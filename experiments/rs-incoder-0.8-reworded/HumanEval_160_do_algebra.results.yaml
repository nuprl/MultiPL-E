language: rs
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    if op == \"-\" {\n            result -= operand.iter().cloned().sum();\n\
    \        }\n        else if op == \"+\" {\n            result += operand.iter().cloned().sum();\n\
    \        }\n        else if op == \"*\" {\n            result *= operand.iter().cloned().sum();\n\
    \        }\n        else if op == \"/\" {\n            result /= operand.iter().cloned().sum();\n\
    \        }\n        else if op == \"//\" {\n            result /= operand.iter().cloned().sum();\n\
    \        }\n        else if op == \"**\" {\n            result **= operand.iter().cloned().sum();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmptyc44m_6.rs:38:21\n\
    \   |\n38 |             result **= operand.iter().cloned().sum();\n   |      \
    \               ^^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // To\
    \ use string slice, we must first convert the string to &str. \n    // If we don't,\
    \ we will end up with an error because &str doesn't implement FromString.\n  \
    \  // We also have to check the number of operands is greater than zero.\n   \
    \ assert_eq!(operator.len(), operand.len());\n    if operator.len() <= 1 {\n \
    \       return -1;\n    }\n    if operand.len() <= 1 {\n        return -1;\n \
    \   }\n    let mut num = 0;\n    let mut denom = 0;\n    for op in operator {\n\
    \        match op {\n            \"+\" | \"-\" => {\n                num += operand[num\
    \ as usize - 1];\n                num -= operand[num as usize - 2];\n        \
    \    }\n            \"*\" => {\n                num += operand[num as usize -\
    \ 1];\n                num *= operand[num as usize - 2];\n            }\n    \
    \        \"/\" => {\n                num += operand[num as usize - 1];\n     \
    \           num /= operand[num as usize - 2];\n            }\n            \"//\"\
    \ => {\n                num += operand[num as usize - 1];\n                num\
    \ = getfloor_division(num as i32, operand[num as usize - 2]);\n            }\n\
    \            \"**\" => {\n                num += operand[num as usize - 1];\n\
    \                num = getpower(num as i32, operand[num as usize - 2], operand[num\
    \ as usize - 1]);\n            }\n            _ => {\n                return -1;\n\
    \            }\n        }\n    }\n    if num == 0 {\n        return -1;\n    }\n\
    \    num as isize\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `getfloor_division` in this scope\n\
    \  --> /tmp/tmpk3nhnalv.rs:48:23\n   |\n48 |                 num = getfloor_division(num\
    \ as i32, operand[num as usize - 2]);\n   |                       ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `getpower` in\
    \ this scope\n  --> /tmp/tmpk3nhnalv.rs:52:23\n   |\n52 |                 num\
    \ = getpower(num as i32, operand[num as usize - 2], operand[num as usize - 1]);\n\
    \   |                       ^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk3nhnalv.rs:34:13\n   |\n33 |         match\
    \ op {\n   |               -- this expression has type `String`\n34 |        \
    \     \"+\" | \"-\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3nhnalv.rs:34:19\n\
    \   |\n33 |         match op {\n   |               -- this expression has type\
    \ `String`\n34 |             \"+\" | \"-\" => {\n   |                   ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3nhnalv.rs:38:13\n\
    \   |\n33 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3nhnalv.rs:42:13\n\
    \   |\n33 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n42 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3nhnalv.rs:46:13\n\
    \   |\n33 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n46 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk3nhnalv.rs:50:13\n\
    \   |\n33 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n50 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 8 previous errors\n\n\
    Some errors have detailed explanatio"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.first().unwrap();\n    for x in &operand.skip(1).unwrap()\
    \ {\n        if *x >= 0 {\n            result *= *x;\n        } else {\n     \
    \       result /= -x;\n        }\n    }\n    operator\n        .iter()\n     \
    \   .zip(operand.iter())\n        .for_each(|op, x| {\n            match op {\n\
    \                \"+\" => result += x,\n                \"-\" => result -= x,\n\
    \                \"*\" => result *= x,\n                \"/\" => result /= x,\n\
    \                \"//\" => result /= x,\n                \"**\" => result **=\
    \ x,\n                op => panic!(\"Operator not found: {}\", op),\n        \
    \    }\n        });\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpwk87v532.rs:38:33\n\
    \   |\n38 |                 \"**\" => result **= x,\n   |                    \
    \  --         ^^ expected expression\n   |                      |\n   |      \
    \                while parsing the `match` arm starting here\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpwk87v532.rs:21:23\n    |\n21\
    \  |       for x in &operand.skip(1).unwrap() {\n    |                       \
    \  ^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<isize>: Iterator`\n           \
    \ which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n\
    \            which is required by `&mut [isize]: Iterator`\n\nerror[E0593]: closure\
    \ is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n\
    \  --> /tmp/tmpwk87v532.rs:31:10\n   |\n31 |         .for_each(|op, x| {\n   |\
    \          ^^^^^^^^ ------- takes 2 distinct arguments\n   |          |\n   |\
    \          expected closure that takes a single 2-tuple as argument\n   |\nhelp:\
    \ change the closure to accept a tuple instead of individual arguments\n   |\n\
    31 |         .for_each(|(op, x)| {\n   |                   ~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwk87v532.rs:42:5\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                     ----- expected `isize` because of return\
    \ type\n...\n42 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n42 |     *result\n   | \
    \    +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0593, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut nums: Vec<isize> = vec![0; operator.len()];\n    let mut i = 0usize;\n\n\
    \    loop {\n        if i < operator.len() {\n            nums[i] = operand.iter().enumerate().filter(|(_i,\
    \ value)| value.to_usize() > 0).next().unwrap().0;\n            i += 1;\n    \
    \    } else {\n            break;\n        }\n    }\n\n    let mut res = 0;\n\
    \    for &i in nums.iter() {\n        res += i * i;\n    }\n\n    res\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_usize` found for reference `&&isize`\
    \ in the current scope\n  --> /tmp/tmprqul3_y6.rs:25:77\n   |\n25 |          \
    \   nums[i] = operand.iter().enumerate().filter(|(_i, value)| value.to_usize()\
    \ > 0).next().unwrap().0;\n   |                                              \
    \                               ^^^^^^^^ method not found in `&&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprqul3_y6.rs:25:23\n   |\n25 |             nums[i]\
    \ = operand.iter().enumerate().filter(|(_i, value)| value.to_usize() > 0).next().unwrap().0;\n\
    \   |             -------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ < 2 {\n        error!(\"Operator vector has less than two operators\");\n  \
    \  }\n    if operand.len() < 1 {\n        error!(\"Operand vector has less than\
    \ one operand\");\n    }\n    let mut op: Vec<String>;\n    if let Some(first_operator)\
    \ = operator.split_first() {\n        let first_operator = first_operator.to_string();\n\
    \        if operand.len() != 1 {\n            error!(\"Operand vector has more\
    \ than one operand\");\n        }\n        op = vec![first_operator, \"+\"];\n\
    \    } else {\n        op = operator;\n    }\n    let mut op1: Vec<isize>;\n \
    \   if let Some(first_operand) = operand.split_first() {\n        let first_operand\
    \ = first_operand.to_owned();\n        if op.len() != 1 {\n            error!(\"\
    Operator vector has more than one operator\");\n        }\n        op1 = vec![first_operand];\n\
    \    } else {\n        op1 = operand;\n    }\n    let mut result = vec![];\n \
    \   for i in op.iter().rev() {\n        result = vec![i + op1[0], result];\n \
    \   }\n    result.next()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `error` in this scope\n  --> /tmp/tmp32epnhl5.rs:21:9\n\
    \   |\n21 |         error!(\"Operator vector has less than two operators\");\n\
    \   |         ^^^^^\n\nerror: cannot find macro `error` in this scope\n  --> /tmp/tmp32epnhl5.rs:24:9\n\
    \   |\n24 |         error!(\"Operand vector has less than one operand\");\n  \
    \ |         ^^^^^\n\nerror: cannot find macro `error` in this scope\n  --> /tmp/tmp32epnhl5.rs:30:13\n\
    \   |\n30 |             error!(\"Operand vector has more than one operand\");\n\
    \   |             ^^^^^\n\nerror: cannot find macro `error` in this scope\n  -->\
    \ /tmp/tmp32epnhl5.rs:40:13\n   |\n40 |             error!(\"Operator vector has\
    \ more than one operator\");\n   |             ^^^^^\n\nerror[E0599]: the method\
    \ `to_string` exists for tuple `(&String, &[String])`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmp32epnhl5.rs:28:45\n   |\n28 |         let first_operator\
    \ = first_operator.to_string();\n   |                                        \
    \     ^^^^^^^^^ method cannot be called on `(&String, &[String])` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(&String, &[String]): std::fmt::Display`\n           which is required\
    \ by `(&String, &[String]): ToString`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp32epnhl5.rs:32:35\n   |\n32 |         op = vec![first_operator, \"+\"\
    ];\n   |                                   ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                   |\n   |             \
    \                      expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp32epnhl5.rs:42:20\n   |\n42 |         op1 =\
    \ vec![first_operand];\n   |                    ^^^^^^^^^^^^^ expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(&isize, &[isize])`\n\nerror[E0369]: cannot add `isize` to `&String`\n  -->\
    \ /tmp/tmp32epnhl5.rs:48:25\n   |\n48 |         result = vec![i + op1[0], result];\n\
    \   |                       - ^ ------ isize\n   |                       |\n \
    \  |               "
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        0\n    } else {\n        let mut result_to_return\
    \ = operand.first();\n        for operand in operand.iter().skip(1) {\n      \
    \      result_to_return *= operator as isize;\n            result_to_return +=\
    \ operand as isize;\n        }\n        result_to_return\n    }\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `*=` cannot be applied to type\
    \ `Option<&isize>`\n  --> /tmp/tmpc7yurmi6.rs:25:13\n   |\n25 |             result_to_return\
    \ *= operator as isize;\n   |             ----------------^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `*=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpc7yurmi6.rs:26:13\n   |\n26 |             result_to_return += operand\
    \ as isize;\n   |             ----------------^^^^^^^^^^^^^^^^^^^^\n   |     \
    \        |\n   |             cannot use `+=` on type `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc7yurmi6.rs:28:9\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                     ----- expected `isize` because of return\
    \ type\n...\n28 |         result_to_return\n   |         ^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0605]: non-primitive cast: `Vec<String>`\
    \ as `isize`\n  --> /tmp/tmpc7yurmi6.rs:25:33\n   |\n25 |             result_to_return\
    \ *= operator as isize;\n   |                                 ^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror[E0606]: casting `&isize` as `isize`\
    \ is invalid\n  --> /tmp/tmpc7yurmi6.rs:26:33\n   |\n26 |             result_to_return\
    \ += operand as isize;\n   |                                 -------^^^^^^^^^\n\
    \   |                                 |\n   |                                \
    \ cannot cast `&isize` as `isize`\n   |                                 help:\
    \ dereference the expression: `*operand`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368, E0605, E0606.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 1;\n    let mut i = 0;\n\n    while i < operator.len() && i < operand.len()\
    \ {\n        match operator[i] {\n            Operator::Addition => {\n      \
    \          result = result + operand[i];\n                i += 1;\n          \
    \  }\n            Operator::Subtraction => {\n                result = result\
    \ - operand[i];\n                i += 1;\n            }\n            Operator::Multiplication\
    \ => {\n                result = result * operand[i];\n                i += 1;\n\
    \            }\n            Operator::FloorDivision => {\n                result\
    \ = result as isize / operand[i];\n                i += 1;\n            }\n  \
    \          Operator::Exponentiation => {\n                result = result as ipow\
    \ * operand[i];\n                i += 1;\n            }\n            _ => {\n\
    \                panic!(\"operator is not supported\");\n            }\n     \
    \   }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmpkgrvigpp.rs:25:13\n   |\n25 |             Operator::Addition => {\n\
    \   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpkgrvigpp.rs:29:13\n\
    \   |\n29 |             Operator::Subtraction => {\n   |             ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpkgrvigpp.rs:33:13\n   |\n33 |    \
    \         Operator::Multiplication => {\n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpkgrvigpp.rs:37:13\n   |\n37 |             Operator::FloorDivision\
    \ => {\n   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpkgrvigpp.rs:41:13\n\
    \   |\n41 |             Operator::Exponentiation => {\n   |             ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0412]: cannot find type `ipow` in\
    \ this scope\n  --> /tmp/tmpkgrvigpp.rs:42:36\n   |\n42 |                 result\
    \ = result as ipow * operand[i];\n   |                                    ^^^^\
    \ not found in this scope\n\nerror: aborting due to 6 previous errors\n\nSome\
    \ errors have detailed explanations: E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    let mut counter = operand[0];\n    for i in 1\
    \ .. operand.len() - 1 {\n        counter += operand[i] * operator[i].to_string().parse().unwrap();\n\
    \        result = counter;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpqgg99j50.rs:23:17\n\
    \   |\n23 |         counter += operand[i] * operator[i].to_string().parse().unwrap();\n\
    \   |                 ^^ cannot infer type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = 0;\n    for op in operator.iter() {\n        match op {\n        \
    \    \"+\" => res += operand.iter().cloned().sum(),\n            \"-\" => res\
    \ -= operand.iter().cloned().sum(),\n            \"*\" => res += operand.iter().cloned().product(),\n\
    \            \"/\" => res /= operand.iter().cloned().product(),\n            \"\
    //\" => res /= operand.iter().cloned().product(),\n            \"**\" => res +=\
    \ operand.iter().cloned().sum(),\n            _ => return -std::i32::MAX,\n  \
    \      };\n    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplzk1xgmd.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `&String`\n\
    23 |             \"+\" => res += operand.iter().cloned().sum(),\n   |        \
    \     ^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplzk1xgmd.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `&String`\n23 |             \"+\"\
    \ => res += operand.iter().cloned().sum(),\n24 |             \"-\" => res -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplzk1xgmd.rs:25:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `&String`\n\
    ...\n25 |             \"*\" => res += operand.iter().cloned().product(),\n   |\
    \             ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplzk1xgmd.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `&String`\n...\n26 |  \
    \           \"/\" => res /= operand.iter().cloned().product(),\n   |         \
    \    ^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplzk1xgmd.rs:27:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `&String`\n...\n27 |             \"\
    //\" => res /= operand.iter().cloned().product(),\n   |             ^^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplzk1xgmd.rs:28:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `&String`\n...\n28"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ < 2 {\n        panic!(\"Invalid operator vector!\");\n    }\n    if operand.len()\
    \ < 2 {\n        panic!(\"Invalid operand vector!\");\n    }\n    if operand.len()\
    \ < operator.len() {\n        panic!(\"Invalid operand vector!\");\n    }\n  \
    \  \n    let mut result = operand[0] as isize;\n    let mut i = 0;\n    while\
    \ i < operator.len() && i < operand.len() {\n        match operator[i] {\n   \
    \         \"+\" => {\n                result = result + operand[i];\n        \
    \        i += 1;\n            }\n            \"*\" => {\n                result\
    \ = result * operand[i];\n                i += 1;\n            }\n           \
    \ \"-\" => {\n                result = result - operand[i];\n                i\
    \ += 1;\n            }\n            \"//\" => {\n                result = result\
    \ / operand[i];\n                i += 1;\n            }\n            \"**\" =>\
    \ {\n                result = result ** operand[i];\n                i += 1;\n\
    \            }\n            _ => panic!(\"Invalid operator in the operator vector!\"\
    ),\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl2_fa7bx.rs:33:15\n   |\n\
    33 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected `&str`,\
    \ found struct `String`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpl2_fa7bx.rs:51:34\n   |\n51 |                 result = result **\
    \ operand[i];\n   |                                  ^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert_eq!(operator.len(),\
    \ operand.len() - 1);\n    \n    let mut result = 0;\n    for i in 0..operator.len()\
    \ {\n        if operator.contains(&operator[i]) {\n            result = operator[i]\
    \ + operand[i + 1] * operand[i];\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp33dh_2m8.rs:25:36\n   |\n\
    25 |             result = operator[i] + operand[i + 1] * operand[i];\n   |   \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp33dh_2m8.rs:25:22\n\
    \   |\n22 |     let mut result = 0;\n   |                      - expected due\
    \ to this value\n...\n25 |             result = operator[i] + operand[i + 1] *\
    \ operand[i];\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.first();\n    for i in 1..operand.len() {\n        let\
    \ left_operand = operand.split_at(i).collect::<Vec<_>>();\n        let operator\
    \ = operator.split_at(i).collect::<Vec<_>>();\n        result *= operator\n  \
    \          .iter()\n            .zip(left_operand.iter())\n            .map(|t|\
    \ t[0].clone() * t[1])\n            .sum()\n            .unwrap();\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `(&[isize], &[isize])` is not an iterator\n  --> /tmp/tmpu5a0kn8r.rs:22:48\n\
    \   |\n22 |         let left_operand = operand.split_at(i).collect::<Vec<_>>();\n\
    \   |                                                ^^^^^^^ `(&[isize], &[isize])`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(&[isize], &[isize]): Iterator`\n           which is required by\
    \ `&mut (&[isize], &[isize]): Iterator`\n\nerror[E0599]: `(&[String], &[String])`\
    \ is not an iterator\n  --> /tmp/tmpu5a0kn8r.rs:23:45\n   |\n23 |         let\
    \ operator = operator.split_at(i).collect::<Vec<_>>();\n   |                 \
    \                            ^^^^^^^ `(&[String], &[String])` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `(&[String],\
    \ &[String]): Iterator`\n           which is required by `&mut (&[String], &[String]):\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu5a0kn8r.rs:31:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n31 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = Vec::with_capacity(operator.len());\n    if operator.len() == 1\
    \ {\n        result.resize(operand.len(), 0);\n        for el in operand {\n \
    \           result[operator.len()-1] += el;\n        }\n    } else if operator.len()\
    \ == 2 {\n        for index in 0..operator.len() {\n            let mut temp_result\
    \ = Vec::with_capacity(operator.len() - 1);\n            for el in result {\n\
    \                temp_result.append(el);\n            }\n            let mut temp_result1\
    \ = Vec::with_capacity(operator.len());\n            for el in &operand[index]\
    \ {\n                temp_result1.append(el);\n            }\n            for\
    \ el in temp_result {\n                temp_result1.append(el);\n            }\n\
    \            for el in &temp_result1 {\n                temp_result.append(el);\n\
    \            }\n        }\n        let mut temp_result = Vec::with_capacity(operator.len());\n\
    \        for el in result {\n            temp_result.append(el);\n        }\n\
    \        for el in &temp_result {\n            result.append(el);\n        }\n\
    \    }\n    result.iter().sum().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn5wro9_z.rs:30:36\n   |\n\
    30 |                 temp_result.append(el);\n   |                           \
    \         ^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<_>`\n                           found type `isize`\n\
    \nerror[E0277]: `&isize` is not an iterator\n  --> /tmp/tmpn5wro9_z.rs:33:23\n\
    \   |\n33 |             for el in &operand[index] {\n   |                    \
    \   ^^^^^^^^^^^^^^^ `&isize` is not an iterator\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn5wro9_z.rs:40:36\n   |\n40 |                 temp_result.append(el);\n\
    \   |                                    ^^ types differ in mutability\n   |\n\
    \   = note: expected mutable reference `&mut Vec<&mut Vec<_>>`\n             \
    \         found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn5wro9_z.rs:45:32\n\
    \   |\n45 |             temp_result.append(el);\n   |                        \
    \        ^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn5wro9_z.rs:48:27\n   |\n48 |             result.append(el);\n\
    \   |                           ^^ types differ in mutability\n   |\n   = note:\
    \ expected mutable reference `&mut Vec<isize>`\n                      found reference\
    \ `&_`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    debug_assert!(operator.len()\
    \ == operand.len());\n    debug_assert!(operand.len() > 0);\n    let mut total:\
    \ isize = 0;\n    for i in 0..operand.len() {\n        let left = operand.split_at_mut(1).len()\
    \ as isize;\n        let right = operand.split_at_mut(i).len() as isize;\n   \
    \     let operator = operator.split_at_mut(1).unwrap();\n        total += (left\
    \ * &operator[0] as isize) + (right * &operator[1] as isize);\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for tuple `(&mut [isize], &mut\
    \ [isize])` in the current scope\n  --> /tmp/tmpa9f3p6mh.rs:24:44\n   |\n24 |\
    \         let left = operand.split_at_mut(1).len() as isize;\n   |           \
    \                                 ^^^ method not found in `(&mut [isize], &mut\
    \ [isize])`\n\nerror[E0599]: no method named `len` found for tuple `(&mut [isize],\
    \ &mut [isize])` in the current scope\n  --> /tmp/tmpa9f3p6mh.rs:25:45\n   |\n\
    25 |         let right = operand.split_at_mut(i).len() as isize;\n   |       \
    \                                      ^^^ method not found in `(&mut [isize],\
    \ &mut [isize])`\n\nerror[E0599]: no method named `unwrap` found for tuple `(&mut\
    \ [String], &mut [String])` in the current scope\n  --> /tmp/tmpa9f3p6mh.rs:26:49\n\
    \   |\n26 |         let operator = operator.split_at_mut(1).unwrap();\n   |  \
    \                                               ^^^^^^ method not found in `(&mut\
    \ [String], &mut [String])`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = 0; //accumulator\n    operator.reverse().for_each(|op|{\n        match\
    \ op {\n            \"+\" => {\n                let num = operand.pop().unwrap();\n\
    \                let den = operand.pop().unwrap();\n                res += num\
    \ * den;\n            }\n            \"-\" => {\n                let num = operand.pop().unwrap();\n\
    \                let den = operand.pop().unwrap();\n                res -= num\
    \ * den;\n            }\n            \"*\" => {\n                let num = operand.pop().unwrap();\n\
    \                let den = operand.pop().unwrap();\n                res = num\
    \ * den;\n            }\n            \"/\" => {\n                let num = operand.pop().unwrap();\n\
    \                let den = operand.pop().unwrap();\n                res = num\
    \ / den;\n            }\n            \"//\" => {\n                let num = operand.pop().unwrap();\n\
    \                let den = operand.pop().unwrap();\n                res = num\
    \ / den;\n            }\n            \"**\" => {\n                let num = operand.pop().unwrap();\n\
    \                let den = operand.pop().unwrap();\n                res = num\
    \ ** den;\n            }\n            _ => {}\n        }\n    });\n    res\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n  --> /tmp/tmpgedg5_vm.rs:21:24\n\
    \   |\n21 |     operator.reverse().for_each(|op|{\n   |                      \
    \  ^^^^^^^^ `()` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `&mut (): Iterator`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpgedg5_vm.rs:51:28\n   |\n51 |                 res = num ** den;\n\
    \   |                            ^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = 0.;\n\n    for op in operator {\n        match op {\n            '+'\
    \ => {\n                let tmp: Vec<_> = operand.iter().cloned().map(|n| n +\
    \ res).collect();\n                res += *tmp;\n            }\n            '-'\
    \ => {\n                let tmp: Vec<_> = operand.iter().cloned().map(|n| n -\
    \ res).collect();\n                res -= *tmp;\n            }\n            '*'\
    \ => {\n                let tmp: Vec<_> = operand.iter().cloned().map(|n| n *\
    \ res).collect();\n                res *= *tmp;\n            }\n            '/'\
    \ => {\n                let tmp: Vec<_> = operand.iter().cloned().map(|n| n /\
    \ res).collect();\n                res /= *tmp;\n            }\n            '^'\
    \ => {\n                let tmp: Vec<_> = operand.iter().cloned().map(|n| n **\
    \ res).collect();\n                res **= *tmp;\n            }\n            _\
    \ => {}\n        }\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmph8e2lxxn.rs:42:22\n\
    \   |\n42 |                 res **= *tmp;\n   |                      ^^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8e2lxxn.rs:24:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n24 |             '+' => {\n   |             ^^^ expected struct `String`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8e2lxxn.rs:28:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             '-' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8e2lxxn.rs:32:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             '*' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8e2lxxn.rs:36:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n36 |             '/' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8e2lxxn.rs:40:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n40 |             '^' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0277]: cannot add `{float}` to `isize`\n  -->\
    \ /tmp/tmph8e2lxxn.rs:25:69\n   |\n25 |                 let tmp: Vec<_> = operand.iter().cloned().map(|n|\
    \ n + res).collect();\n   |                                                  \
    \                   ^ no implementation for `isize + {float}`\n   |\n   = help:\
    \ the trait `Add<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize a"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ op = match operator {\n        vec![a + b for a in operand[0..operand.len()\
    \ - 1]] => {\n            match op {\n                \"+\" => a + b,\n      \
    \          \"-\" => a - b,\n                \"*\" => a * b,\n                \"\
    /\" => a / b,\n                \"%\" => a % b,\n                \"**\" => a **\
    \ b,\n                _ => panic!(\"Operator is not a basic algebra operation\"\
    ),\n            }\n        }\n        _ => panic!(\"Operator is not a basic algebra\
    \ operation\"),\n    };\n\n    if operand.len() < 2 {\n        return 0;\n   \
    \ }\n\n    if operand.len() > 2 {\n        return -1;\n    }\n\n    if op == 0\
    \ {\n        return 0;\n    }\n\n    if op == -1 {\n        return -1;\n    }\n\
    \n    op_trained(op).call(operand)\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: no rules expected the token `for`\n  --> /tmp/tmpzmhpxceb.rs:21:20\n\
    \   |\n21 |         vec![a + b for a in operand[0..operand.len() - 1]] => {\n\
    \   |                    ^^^ no rules expected this token in macro call\n\nerror[E0425]:\
    \ cannot find value `op` in this scope\n  --> /tmp/tmpzmhpxceb.rs:22:19\n   |\n\
    22 |             match op {\n   |                   ^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmpzmhpxceb.rs:23:24\n\
    \   |\n23 |                 \"+\" => a + b,\n   |                        ^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `b` in this scope\n \
    \ --> /tmp/tmpzmhpxceb.rs:23:28\n   |\n23 |                 \"+\" => a + b,\n\
    \   |                            ^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `a` in this scope\n  --> /tmp/tmpzmhpxceb.rs:24:24\n   |\n24 |  \
    \               \"-\" => a - b,\n   |                        ^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `b` in this scope\n  --> /tmp/tmpzmhpxceb.rs:24:28\n\
    \   |\n24 |                 \"-\" => a - b,\n   |                            ^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `a` in this scope\n\
    \  --> /tmp/tmpzmhpxceb.rs:25:24\n   |\n25 |                 \"*\" => a * b,\n\
    \   |                        ^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `b` in this scope\n  --> /tmp/tmpzmhpxceb.rs:25:28\n   |\n25 |  \
    \               \"*\" => a * b,\n   |                            ^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmpzmhpxceb.rs:26:24\n\
    \   |\n26 |                 \"/\" => a / b,\n   |                        ^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `b` in this scope\n \
    \ --> /tmp/tmpzmhpxceb.rs:26:28\n   |\n26 |                 \"/\" => a / b,\n\
    \   |                            ^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `a` in this scope\n  --> /tmp/tmpzmhpxceb.rs:27:24\n   |\n27 |  \
    \               \"%\" => a % b,\n   |                        ^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `b` in this scope\n  -"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 {\n        return operand[0] as isize;\n    }\n    let mut result = operand[0]\
    \ as isize;\n    for i in operator.iter().rev() {\n        result *= operand[i\
    \ - 1];\n        result += operand[i];\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `{integer}` from `&String`\n  --> /tmp/tmp6kgvxyah.rs:25:29\n\
    \   |\n25 |         result *= operand[i - 1];\n   |                          \
    \ - ^ - {integer}\n   |                           |\n   |                    \
    \       &String\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&String`\n\
    \  --> /tmp/tmp6kgvxyah.rs:26:19\n   |\n26 |         result += operand[i];\n \
    \  |                   ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&String`\n   = note: required because of the requirements on the impl of\
    \ `Index<&String>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 || operand.len() == 0 {\n        return 0;\n    }\n    if operator.len()\
    \ == 1 {\n        return operand.iter().cloned().map(|n| n).sum();\n    }\n  \
    \  if operand.len() == 1 {\n        return do_algebra(operator, vec![operand[0]])\n\
    \    }\n    let operator1 = operator[0];\n    let operator2 = operator[1];\n \
    \   let mut result = do_algebra(operator1, operand.clone());\n    for i in 0..operand.len()\
    \ - 1 {\n        if operator2 == operator1 {\n            result *= operand[i];\n\
    \        } else if operator2 == operator2 {\n            result /= operand[i];\n\
    \        } else {\n            println!(\"Error, invalid operator in vector\"\
    );\n            assert!(false);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjlv_in_w.rs:31:33\n   |\n\
    31 |     let mut result = do_algebra(operator1, operand.clone());\n   |      \
    \                           ^^^^^^^^^ expected struct `Vec`, found struct `String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // If\
    \ length of vector is not equal then do some error handling.\n    if operator.len()\
    \ != operand.len() - 1 {\n        println!(\"ERROR: Wrong length of operator vector\
    \ or operand vector!\");\n        return -1;\n    }\n\n    // Construct and evaluate\
    \ algebric expression.\n    let operations = vec![operator[0], operator[1..]];\n\
    \    let result = operations.iter().cloned().zip(operand.iter()).map(|&op| *op).sum();\n\
    \    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp72eu76tt.rs:27:40\n   |\n\
    27 |     let operations = vec![operator[0], operator[1..]];\n   |            \
    \                            ^^^^^^^^^^^^^ expected struct `String`, found slice\n\
    \   |\n   = note: expected struct `String`\n               found slice `[String]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp72eu76tt.rs:28:70\n   |\n28 |\
    \     let result = operations.iter().cloned().zip(operand.iter()).map(|&op| *op).sum();\n\
    \   |                                                                      ^---\n\
    \   |                                                                      ||\n\
    \   |                                                                      |expected\
    \ due to this\n   |                                                          \
    \            expected tuple, found reference\n   |                           \
    \                                           help: did you mean `op`: `&(String,\
    \ &isize)`\n   |\n   = note:  expected tuple `(String, &isize)`\n           found\
    \ reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 1 {\n        let op_name = operator.last().unwrap();\n        if op_name\
    \ != \"+\"\n            && op_name != \"-\"\n            && op_name != \"*\"\n\
    \            && op_name != \"//\"\n            && op_name != \"**\"\n        {\n\
    \            println!(\"Error calculating algebra operator: {}\", op_name);\n\
    \            panic!(\"Invalid operation for algebra expression\");\n        }\n\
    \        match op_name {\n            \"+\" => operand[0] as isize + operand[1]\
    \ as isize,\n            \"-\" => operand[0] as isize - operand[1] as isize,\n\
    \            \"*\" => operand[0] as isize * operand[1] as isize,\n           \
    \ \"//\" => operand[0] as isize // operand[1] as isize,\n            \"**\" =>\
    \ operand[0] as isize ** operand[1] as isize,\n            _ => panic!(\"Invalid\
    \ operation for algebra expression\"),\n        }\n    } else {\n        let op_name\
    \ = operator.last().unwrap();\n        println!(\"Error calculating algebra operator:\
    \ {}\", op_name);\n        panic!(\"Invalid operation for algebra expression\"\
    );\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `,`, `.`, `::`, `<`, `?`, or `}`, found\
    \ `\"**\"`\n  --> /tmp/tmpvfk4b737.rs:36:13\n   |\n35 |             \"//\" =>\
    \ operand[0] as isize // operand[1] as isize,\n   |                  --      \
    \              - expected one of 8 possible tokens\n   |                  |\n\
    \   |                  while parsing the `match` arm starting here\n36 |     \
    \        \"**\" => operand[0] as isize ** operand[1] as isize,\n   |         \
    \    ^^^^ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvfk4b737.rs:32:13\n\
    \   |\n31 |         match op_name {\n   |               ------- this expression\
    \ has type `&String`\n32 |             \"+\" => operand[0] as isize + operand[1]\
    \ as isize,\n   |             ^^^ expected struct `String`, found `str`\n   |\n\
    \   = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvfk4b737.rs:33:13\n  \
    \ |\n31 |         match op_name {\n   |               ------- this expression\
    \ has type `&String`\n32 |             \"+\" => operand[0] as isize + operand[1]\
    \ as isize,\n33 |             \"-\" => operand[0] as isize - operand[1] as isize,\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvfk4b737.rs:34:13\n   |\n31 |\
    \         match op_name {\n   |               ------- this expression has type\
    \ `&String`\n...\n34 |             \"*\" => operand[0] as isize * operand[1] as\
    \ isize,\n   |             ^^^ expected struct `String`, found `str`\n   |\n \
    \  = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ Complete this function.\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7e339gpp.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ > 1);\n    assert!(operand.len() > 1);\n    assert!(operator.len() == operand.len());\n\
    \n    let mut result = 0;\n    for mut op in operator.iter() {\n        match\
    \ op {\n            \"+\" => {\n                result += operand[0];\n      \
    \          result += operand[1];\n            },\n            \"-\" => {\n   \
    \             result -= operand[0];\n                result -= operand[1];\n \
    \           },\n            \"*\" => {\n                result *= operand[0];\n\
    \                result *= operand[1];\n            },\n            \"/\" => {\n\
    \                result /= operand[0];\n                result /= operand[1];\n\
    \            },\n            \"//\" => {\n                result = result / operand[0];\n\
    \                result = result / operand[1];\n            }\n            \"\
    **\" => {\n                result = result ** operand[0];\n                result\
    \ = result ** operand[1];\n            }\n            _ => panic!(\"Unsupported\
    \ operation: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvlcn5kf6.rs:27:13\n   |\n\
    26 |         match op {\n   |               -- this expression has type `&String`\n\
    27 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvlcn5kf6.rs:31:13\n\
    \   |\n26 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n31 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpvlcn5kf6.rs:35:13\n   |\n26 |         match op {\n   |         \
    \      -- this expression has type `&String`\n...\n35 |             \"*\" => {\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvlcn5kf6.rs:39:13\n   |\n26 |\
    \         match op {\n   |               -- this expression has type `&String`\n\
    ...\n39 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvlcn5kf6.rs:43:13\n\
    \   |\n26 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvlcn5kf6.rs:47:13\n   |\n26 |         match op {\n   |        \
    \       -- this expression has type `&String`\n...\n47 |             \"**\" =>\
    \ {\n   |             ^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpvlcn5kf6.r"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    debug_assert!(\n\
    \        operator.len() == operand.len() - 1,\n        \"Operator and operand\
    \ vector sizes must have the same number of elements\"\n    );\n    \n    let\
    \ mut result = 0;\n    let mut operator_idx = 1; // idx of the operator to process\
    \ when iterating over each operand\n    \n    for &operator in operator {\n  \
    \      if operator_idx > operand.len() {\n            break; // no more operators\
    \ found\n        }\n        \n        let operator = match operator {\n      \
    \      '+' => operator_idx += 1,\n            '-' => operator_idx += 1,\n    \
    \        '*' => operator_idx += 1,\n            '/' => operator_idx += 1,\n  \
    \          '%' => operator_idx += 1,\n            '^' => operator_idx += 1,\n\
    \            '**' => operator_idx += 1,\n            _ => continue,\n        };\n\
    \        \n        let operand = operand[operator_idx - 1];\n        result +=\
    \ (operator as isize) * (operand as isize);\n    }\n    \n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp0lac9cu9.rs:40:13\n\
    \   |\n40 |             '**' => operator_idx += 1,\n   |             ^^^^\n  \
    \ |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n40\
    \ |             \"**\" => operator_idx += 1,\n   |             ~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0lac9cu9.rs:28:9\n   |\n28 |     for &operator\
    \ in operator {\n   |         ^^^^^^^^^    -------- this expression has type `Option<String>`\n\
    \   |         |\n   |         expected struct `String`, found reference\n   |\
    \         help: you can probably remove the explicit borrow: `operator`\n   |\n\
    \   = note: expected struct `String`\n           found reference `&_`\n\nerror[E0605]:\
    \ non-primitive cast: `()` as `isize`\n  --> /tmp/tmp0lac9cu9.rs:45:19\n   |\n\
    45 |         result += (operator as isize) * (operand as isize);\n   |       \
    \            ^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0605.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.is_empty());\n\
    \    assert!(operand.is_empty() || operand.len() > 1);\n    let op = operator.pop();\n\
    \    let num_operand = operand.len();\n    let mut res = 0.0;\n    for v in operand\
    \ {\n        let mut tmp = v.clone();\n        let mut carry = 0;\n        for\
    \ i in 0..(num_operand - 1) {\n            let next_tmp = tmp;\n            let\
    \ next_carry = carry % 10;\n            tmp = next_tmp + next_carry + v.clone()\
    \ / 10.0;\n            carry = tmp / 10.0;\n        }\n        res += tmp * op.to_owned();\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpc_h60kjg.rs:31:53\n\
    \   |\n31 |             tmp = next_tmp + next_carry + v.clone() / 10.0;\n   |\
    \                                                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpc_h60kjg.rs:32:25\n\
    \   |\n32 |             carry = tmp / 10.0;\n   |                         ^ no\
    \ implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot multiply `isize` by `Option<String>`\n\
    \  --> /tmp/tmpc_h60kjg.rs:34:20\n   |\n34 |         res += tmp * op.to_owned();\n\
    \   |                    ^ no implementation for `isize * Option<String>`\n  \
    \ |\n   = help: the trait `Mul<Option<String>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc_"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator.len() {\n        0 => operand.first(),\n        _ => operator[0].parse::<isize>().unwrap()\
    \ + operand.first() * do_algebra(operator.iter().skip(1), operand.iter().skip(1)),\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwpaq51h8.rs:21:14\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |                                                              ----- expected\
    \ `isize` because of return type\n20 |     match operator.len() {\n21 |      \
    \   0 => operand.first(),\n   |              ^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwpaq51h8.rs:22:83\n\
    \   |\n22 |         _ => operator[0].parse::<isize>().unwrap() + operand.first()\
    \ * do_algebra(operator.iter().skip(1), operand.iter().skip(1)),\n   |       \
    \                                                                            ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Skip`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Skip<std::slice::Iter<'_, String>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwpaq51h8.rs:22:108\n   |\n22 |\
    \         _ => operator[0].parse::<isize>().unwrap() + operand.first() * do_algebra(operator.iter().skip(1),\
    \ operand.iter().skip(1)),\n   |                                             \
    \                                                               ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Skip`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Skip<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0369]: cannot multiply `Option<&isize>` by `isize`\n  --> /tmp/tmpwpaq51h8.rs:22:70\n\
    \   |\n22 |         _ => operator[0].parse::<isize>().unwrap() + operand.first()\
    \ * do_algebra(operator.iter().skip(1), operand.iter().skip(1)),\n   |       \
    \                                               --------------- ^ -----------------------------------------------------------\
    \ isize\n   |                                                      |\n   |   \
    \                                                   Option<&isize>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For mor"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().zip(operator.iter()).fold(0,\
    \ |res, &(op_res, op_op)| {\n        match op_op {\n            '+' => res + op_res,\n\
    \            '-' => res - op_res,\n            '*' => res * op_res,\n        \
    \    '/' => res / op_res,\n            '//' => res / op_res,\n            '**'\
    \ => res * op_res,\n            _ => res,\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpp53c1fi5.rs:26:13\n\
    \   |\n26 |             '//' => res / op_res,\n   |             ^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659977882
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    do_algebra_helper(operator,\
    \ operand, 0)\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_algebra_helper` in this scope\n\
    \  --> /tmp/tmp6btwbfca.rs:20:5\n   |\n20 |     do_algebra_helper(operator, operand,\
    \ 0)\n   |     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ operator_size = operator.len() - 1;\n    let mut result: isize = 0;\n    for\
    \ i in 0..operator_size.abs() {\n        if !is_number(operator[i]) {\n      \
    \      Err(format!(\"Invalid operator: {}\", operator[i]))\n        } else if\
    \ is_number(operand[i]) {\n            result += operand[i];\n        } else {\n\
    \            Err(format!(\"Invalid operand: {}\", operand[i]))\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_number` in this scope\n  --> /tmp/tmp756axyc4.rs:23:13\n\
    \   |\n23 |         if !is_number(operator[i]) {\n   |             ^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_number` in this\
    \ scope\n  --> /tmp/tmp756axyc4.rs:25:19\n   |\n25 |         } else if is_number(operand[i])\
    \ {\n   |                   ^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `abs` found for type `usize` in the current scope\n  --> /tmp/tmp756axyc4.rs:22:31\n\
    \   |\n22 |     for i in 0..operator_size.abs() {\n   |                      \
    \         ^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp756axyc4.rs:24:13\n   |\n23 | /         if !is_number(operator[i])\
    \ {\n24 | |             Err(format!(\"Invalid operator: {}\", operator[i]))\n\
    \   | |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `()`, found enum `Result`\n25 | |         } else if is_number(operand[i]) {\n\
    26 | |             result += operand[i];\n27 | |         } else {\n28 | |    \
    \         Err(format!(\"Invalid operand: {}\", operand[i]))\n29 | |         }\n\
    \   | |_________- expected this to be `()`\n   |\n   = note: expected unit type\
    \ `()`\n                   found enum `Result<_, String>`\nhelp: consider using\
    \ a semicolon here\n   |\n24 |             Err(format!(\"Invalid operator: {}\"\
    , operator[i]));\n   |                                                       \
    \       +\nhelp: consider using a semicolon here\n   |\n29 |         };\n   |\
    \          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp756axyc4.rs:28:13\n\
    \   |\n25 |           } else if is_number(operand[i]) {\n   |  ________________-\n\
    26 | |             result += operand[i];\n27 | |         } else {\n28 | |    \
    \         Err(format!(\"Invalid operand: {}\", operand[i]))\n   | |          \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum\
    \ `Result`\n29 | |         }\n   | |_________- expected this to be `()`\n   |\n\
    \   = note: expected unit type `()`\n                   found enum `Result<_,\
    \ String>`\nhelp: consider using a semicolo"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op = 0;\n    for ops in operator {\n        op = match ops.chars().first().unwrap()\
    \ {\n            '+' => {\n                op += operand.first().unwrap() as isize;\n\
    \                op\n            }\n            '-' => {\n                op -=\
    \ operand.first().unwrap() as isize;\n                op\n            }\n    \
    \        '*' => {\n                op *= operand.first().unwrap() as isize;\n\
    \                op\n            }\n            '/' => {\n                op /=\
    \ operand.first().unwrap() as isize;\n                op\n            }\n    \
    \        '**' => {\n                op **= operand.first().unwrap() as isize;\n\
    \                op\n            }\n            _ => panic!(\"invalid operation\"\
    ),\n        }\n    }\n    op\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpiwyep7cb.rs:39:13\n\
    \   |\n39 |             '**' => {\n   |             ^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n39 |             \"**\" =>\
    \ {\n   |             ~~~~\n\nerror: expected expression, found `*=`\n  --> /tmp/tmpiwyep7cb.rs:40:21\n\
    \   |\n40 |                 op **= operand.first().unwrap() as isize;\n   |  \
    \                   ^^ expected expression\n\nerror[E0599]: no method named `first`\
    \ found for struct `Chars` in the current scope\n  --> /tmp/tmpiwyep7cb.rs:22:32\n\
    \   |\n22 |         op = match ops.chars().first().unwrap() {\n   |          \
    \                      ^^^^^ method not found in `Chars<'_>`\n\nerror[E0606]:\
    \ casting `&isize` as `isize` is invalid\n  --> /tmp/tmpiwyep7cb.rs:24:23\n  \
    \ |\n24 |                 op += operand.first().unwrap() as isize;\n   |     \
    \                  ------------------------^^^^^^^^^\n   |                   \
    \    |\n   |                       cannot cast `&isize` as `isize`\n   |     \
    \                  help: dereference the expression: `*operand.first().unwrap()`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpiwyep7cb.rs:28:23\n\
    \   |\n28 |                 op -= operand.first().unwrap() as isize;\n   |   \
    \                    ------------------------^^^^^^^^^\n   |                 \
    \      |\n   |                       cannot cast `&isize` as `isize`\n   |   \
    \                    help: dereference the expression: `*operand.first().unwrap()`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpiwyep7cb.rs:32:23\n\
    \   |\n32 |                 op *= operand.first().unwrap() as isize;\n   |   \
    \                    ------------------------^^^^^^^^^\n   |                 \
    \      |\n   |                       cannot cast `&isize` as `isize`\n   |   \
    \                    help: dereference the expression: `*operand.first().unwrap()`\n\
    \nerror[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpiwyep7cb.rs:36:23\n\
    \   |\n36 |                 op /= operand.first().unwrap() as isize;\n   |   \
    \            "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = isize::MAX;\n    let mut idx = 0;\n    for (oper, oper_index) in\
    \ operator.iter().zip(operand.iter()) {\n        match oper {\n            \"\
    +\" => {\n                result = result + operand[oper_index];\n           \
    \ }\n            \"-\" => {\n                result = result - operand[oper_index];\n\
    \            }\n            \"*\" => {\n                result = result * operand[oper_index];\n\
    \            }\n            \"//\" => {\n                result = result // operand[oper_index];\n\
    \            }\n            \"**\" => {\n                result = result ** operand[oper_index];\n\
    \            }\n            other => {\n                return Err(format!(\"\
    Unsupported operator: {}\", other));\n            }\n        }\n        idx +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2i1smmgi.rs:24:13\n   |\n\
    23 |         match oper {\n   |               ---- this expression has type `&String`\n\
    24 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2i1smmgi.rs:27:13\n\
    \   |\n23 |         match oper {\n   |               ---- this expression has\
    \ type `&String`\n...\n27 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2i1smmgi.rs:30:13\n   |\n23 |         match oper {\n   |      \
    \         ---- this expression has type `&String`\n...\n30 |             \"*\"\
    \ => {\n   |             ^^^ expected struct `String`, found `str`\n   |\n   =\
    \ note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2i1smmgi.rs:33:13\n  \
    \ |\n23 |         match oper {\n   |               ---- this expression has type\
    \ `&String`\n...\n33 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2i1smmgi.rs:36:13\n   |\n23 |         match oper {\n   |      \
    \         ---- this expression has type `&String`\n...\n36 |             \"**\"\
    \ => {\n   |             ^^^^ expected struct `String`, found `str`\n   |\n  \
    \ = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  -->\
    \ /tmp/tmp2i1smmgi.rs:25:35\n   |\n25 |                 result = result + operand[oper_index];\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIn"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"The length of operator vector is equal\
    \ to the length of operand vector minus one.\")\n    }\n    let mut res = operand[0].clone();\n\
    \    for op in &operator {\n        if op != \"-\" && op != \"*\" && op != \"\
    /\" && op != \"**\" {\n            panic!(\"Operator vector must contain at least\
    \ one operator, e.g. ['+', '*', '-'].\")\n        }\n    }\n    for op in &operator\
    \ {\n        for op2 in &operator {\n            if op != \"*\" && op2 != \"*\"\
    \ && op2 != \"/\" && op2 != \"**\" {\n                panic!(\"Operator vector\
    \ must contain at least one operator, e.g. ['+', '*', '-'].\")\n            }\n\
    \        }\n    }\n    for op2 in &operator {\n        match op2 {\n         \
    \   \"+\" => res += operand[1],\n            \"-\" => res -= operand[1],\n   \
    \         \"*\" => res += operand[1] * operand[2],\n            \"/\" => res /=\
    \ operand[1],\n            \"**\" => res += (operand[1] * operand[2]) * operand[3],\n\
    \            _ => {}\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr99poe07.rs:38:13\n   |\n\
    37 |         match op2 {\n   |               --- this expression has type `&String`\n\
    38 |             \"+\" => res += operand[1],\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpr99poe07.rs:39:13\n   |\n37 |         match op2 {\n   |        \
    \       --- this expression has type `&String`\n38 |             \"+\" => res\
    \ += operand[1],\n39 |             \"-\" => res -= operand[1],\n   |         \
    \    ^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr99poe07.rs:40:13\n   |\n37 |         match op2 {\n   |\
    \               --- this expression has type `&String`\n...\n40 |            \
    \ \"*\" => res += operand[1] * operand[2],\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpr99poe07.rs:41:13\n   |\n37 |         match op2 {\n   |        \
    \       --- this expression has type `&String`\n...\n41 |             \"/\" =>\
    \ res /= operand[1],\n   |             ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr99poe07.rs:42:13\n\
    \   |\n37 |         match op2 {\n   |               --- this expression has type\
    \ `&String`\n...\n42 |             \"**\" => res += (operand[1] * operand[2])\
    \ * operand[3],\n   |             ^^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"Invalid length of vectors\")\n    }\n\
    \n    let mut res = 0;\n    for i in 0..operator.len() {\n        match operator[i]\
    \ {\n            \"+\" => {\n                res += operand[i];\n            }\n\
    \            \"-\" => {\n                res -= operand[i];\n            }\n \
    \           \"*\" => {\n                res *= operand[i];\n            }\n  \
    \          \"//\" => {\n                res //= operand[i];\n            }\n \
    \           \"**\" => {\n                res **= operand[i];\n            }\n\
    \            _ => (),\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1j7kf0ia.rs:40:22\n\
    \   |\n40 |                 res **= operand[i];\n   |                      ^^\
    \ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1j7kf0ia.rs:26:15\n\
    \   |\n26 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1j7kf0ia.rs:37:17\n\
    \   |\n26 | /         match operator[i] {\n27 | |             \"+\" => {\n28 |\
    \ |                 res += operand[i];\n29 | |             }\n...  |\n37 | | \
    \                res //= operand[i];\n   | |                 ^^^ expected `()`,\
    \ found `isize`\n...  |\n42 | |             _ => (),\n43 | |         }\n   | |_________-\
    \ expected this to be `()`\n   |\nhelp: you might have meant to return this value\n\
    \   |\n37 |                 return res; //= operand[i];\n   |                \
    \ ++++++    +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 1;\n    for i in 0..operand.len() - 1 {\n        match operator[&i]\
    \ {\n            \"+\" => {\n                result += operand[i];\n         \
    \   },\n            \"-\" => {\n                result -= operand[i];\n      \
    \      },\n            \"*\" => {\n                result *= operand[i];\n   \
    \         },\n            \"/\" => {\n                result /= operand[i];\n\
    \            },\n            \"**\" => {\n                result **= operand[i];\n\
    \            },\n            _ => {\n                panic!(\"unknown operator\
    \ {}\", operator[&i]);\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpyy9xyuf5.rs:36:25\n\
    \   |\n36 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0277]: the type `[String]` cannot be indexed\
    \ by `&usize`\n  --> /tmp/tmpyy9xyuf5.rs:22:15\n   |\n22 |         match operator[&i]\
    \ {\n   |               ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented\
    \ for `&usize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&usize>`\
    \ for `Vec<String>`\n\nerror[E0277]: the type `[String]` cannot be indexed by\
    \ `&usize`\n  --> /tmp/tmpyy9xyuf5.rs:39:47\n   |\n39 |                 panic!(\"\
    unknown operator {}\", operator[&i]);\n   |                                  \
    \             ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `&usize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&usize>` for `Vec<String>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut num = 1\n    for v in operand {\n        num *= v\n    }\n\n    for op in\
    \ operator {\n        match op {\n            \"+\" => num += 1,\n           \
    \ \"-\" => num -= 1,\n            \"*\" => num *= 1,\n            \"/\" => num\
    \ *= 0.5,\n            \"%\" => num *= 0.25,\n            \"**\" => num *= 2,\n\
    \            _ => panic!(),\n        }\n    }\n    num\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpp94knsix.rs:20:20\n\
    \   |\n20 |     let mut num = 1\n   |                    ^ help: add `;` here\n\
    21 |     for v in operand {\n   |     --- unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp94knsix.rs:27:13\n   |\n26 |         match op {\n   |\
    \               -- this expression has type `String`\n27 |             \"+\" =>\
    \ num += 1,\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp94knsix.rs:28:13\n   |\n26 |         match\
    \ op {\n   |               -- this expression has type `String`\n27 |        \
    \     \"+\" => num += 1,\n28 |             \"-\" => num -= 1,\n   |          \
    \   ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpp94knsix.rs:29:13\n   |\n26 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n29 |             \"*\" => num\
    \ *= 1,\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp94knsix.rs:30:13\n   |\n26 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n30 |   \
    \          \"/\" => num *= 0.5,\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp94knsix.rs:31:13\n\
    \   |\n26 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n31 |             \"%\" => num *= 0.25,\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpp94knsix.rs:32:13\n   |\n26 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n32 |             \"**\" => num\
    \ *= 2,\n   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]:\
    \ cannot multiply-assign `isize` by `{float}`\n  --> /tmp/tmpp94knsix.rs:30:24\n\
    \   |\n30 |             \"/\" => num *= 0.5,\n   |                        ^^ no\
    \ implementation for `isize *= {float}`\n   |\n   = help: the trait `MulAssign<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implemen"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op_operands: Vec<isize> = operand.clone();\n    op_operands.insert(op_operands.len()\
    \ - 1, 0);\n    op_operands.insert(0, 0);\n\n    // Start building the algebric\
    \ expression\n    let mut algebric_expression: Vec<isize> = operand.clone();\n\
    \n    // Add the initial operators\n    for index in 0..operator.len() {\n   \
    \     algebric_expression[index] += operator[index];\n    }\n\n    // Add the\
    \ intermediate operators\n    for index in 1..op_operands.len() {\n        algebric_expression[index]\
    \ += op_operands[index - 1];\n    }\n\n    // Return the result\n    algebric_expression[0]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `String` to `isize`\n  --> /tmp/tmpkso4wuun.rs:29:36\n\
    \   |\n29 |         algebric_expression[index] += operator[index];\n   |     \
    \                               ^^ no implementation for `isize += String`\n \
    \  |\n   = help: the trait `AddAssign<String>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expr = 0;\n    for i in 0..operator.len() - 1 {\n        expr += operator[i]\
    \ * operand[operand.len() - 1 - i];\n    }\n    expr\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `String` by `isize`\n  --> /tmp/tmptytlc_z8.rs:22:29\n\
    \   |\n22 |         expr += operator[i] * operand[operand.len() - 1 - i];\n  \
    \ |                 ----------- ^ ------------------------------ isize\n   | \
    \                |\n   |                 String\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Get\
    \ the length of operator vector\n    let op_len = operator.len();\n    // Get\
    \ the length of operand vector\n    let op_len2 = operand.len();\n    // Compute\
    \ the length of result vector\n    let result_len = op_len2 - op_len - 1;\n  \
    \  // Initialize result vector\n    let mut result = vec![0isize; result_len];\n\
    \    // Loop through operands\n    for i in 0..op_len2 {\n        // Initialize\
    \ temporary vector\n        let mut temporary = vec![0isize; op_len];\n      \
    \  // Loop through operators\n        for j in 0..op_len {\n            // If\
    \ the first operand of operator is operand, the operand is temporary\n       \
    \     if j == 0 {\n                temporary[j] =\n                    operator[j]\
    \ == operator[0] && operand[i] == operand[0] ? operand[i] : 0;\n            }\
    \ else {\n                // Else if first operand of operator is not operand,\
    \ the operand is temporary\n                temporary[j] =\n                 \
    \   operator[j] == operator[0] && operand[i] != operand[i] ? operand[i] : 0;\n\
    \            }\n        }\n        // Loop through result vector\n        for\
    \ j in 0..result_len {\n            // If the current result element is not zero,\
    \ then the result is invalid\n            if temporary[j] != 0 {\n           \
    \     result[j] = 0;\n            } else {\n                result[j] = temporary[j];\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `operand`\n\
    \  --> /tmp/tmpnn_j_5u6.rs:37:78\n   |\n37 |                     operator[j] ==\
    \ operator[0] && operand[i] == operand[0] ? operand[i] : 0;\n   |            \
    \                                                                  ^^^^^^^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: expected one of `.`, `;`,\
    \ `?`, `}`, or an operator, found `operand`\n  --> /tmp/tmpnn_j_5u6.rs:41:78\n\
    \   |\n41 |                     operator[j] == operator[0] && operand[i] != operand[i]\
    \ ? operand[i] : 0;\n   |                                                    \
    \                          ^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnn_j_5u6.rs:54:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n54 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone(); // Make a mutable copy of the operand.\n    for\
    \ i in 0..operator.len()-1 { // Loop from 0 to length of the operator vector.\n\
    \        match operator[i].as_slice() {\n            Some(x) => { // if the operator[i]\
    \ of the operator vector is \"+\"\n                result[i] = result[i] + operand[result.len()-1];\
    \ // add the operand element at the end of result\n            },\n          \
    \  Some(x) => { // if the operator[i] of the operator vector is \"-\"\n      \
    \          result[i] = result[i] - operand[result.len()-1]; // subtract the operand\
    \ element at the end of result\n            },\n            Some(x) => { // if\
    \ the operator[i] of the operator vector is \"*\"\n                result[i] =\
    \ result[i] * operand[result.len()-1]; // multiply operand element at the end\
    \ of result\n            },\n            Some(x) => { // if the operator[i] of\
    \ the operator vector is \"/\"\n                result[i] = result[i] / operand[result.len()-1];\
    \ // divide operand element at the end of result\n            },\n           \
    \ Some(x) => { // if the operator[i] of the operator vector is \"**\"\n      \
    \          result[i] = result[i] ** operand[result.len()-1]; // raise operand\
    \ element at the end of result\n            },\n            None => { // if the\
    \ operator[i] of the operator vector is not \"+\"\n                return -1;\
    \ // return -1 if the operator is not \"+\"\n            },\n        };\n    }\n\
    \    result[0]; // return the result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_slice` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpxeq4xiej.rs:22:27\n   |\n22 |         match operator[i].as_slice()\
    \ {\n   |                           ^^^^^^^^ method not found in `String`\n\n\
    error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpxeq4xiej.rs:36:40\n\
    \   |\n36 |                 result[i] = result[i] ** operand[result.len()-1];\
    \ // raise operand element at the end of result\n   |                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxeq4xiej.rs:19:62\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |    ----------                        \
    \                        ^^^^^ expected `isize`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n...\n\
    43 |     result[0]; // return the result\n   |              - help: remove this\
    \ semicolon\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut total = 0;\n    for op in operator {\n        total += operand.iter()\n\
    \                    .filter(|x| x == 0)\n                    .count() * match\
    \ op {\n            \"+\" => 1,\n            \"-\" => -1,\n            \"*\" =>\
    \ 2,\n            \"/\" => 1,\n            \"**\" => 2,\n            _ => panic!(\"\
    Invalid operator\"),\n        };\n    }\n    total\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpcw_t2u1u.rs:23:35\n\
    \   |\n23 |                     .filter(|x| x == 0)\n   |                    \
    \               ^^ no implementation for `&&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcw_t2u1u.rs:25:13\n   |\n24 |\
    \                     .count() * match op {\n   |                            \
    \          -- this expression has type `String`\n25 |             \"+\" => 1,\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcw_t2u1u.rs:26:13\n   |\n24 |              \
    \       .count() * match op {\n   |                                      -- this\
    \ expression has type `String`\n25 |             \"+\" => 1,\n26 |           \
    \  \"-\" => -1,\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcw_t2u1u.rs:27:13\n   |\n24 |\
    \                     .count() * match op {\n   |                            \
    \          -- this expression has type `String`\n...\n27 |             \"*\" =>\
    \ 2,\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcw_t2u1u.rs:28:13\n   |\n24 |              \
    \       .count() * match op {\n   |                                      -- this\
    \ expression has type `String`\n...\n28 |             \"/\" => 1,\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcw_t2u1u.rs:29:13\n   |\n24 |                     .count()\
    \ * match op {\n   |                                      -- this expression has\
    \ type `String`\n...\n29 |             \"**\" => 2,\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisf"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator {\n        vec![String::from(\"+\"), String::from(\"-\"), String::from(\"\
    *\"), String::from(\"/\")] => {\n            let mut res = 0;\n            let\
    \ mut cnt = 0;\n            operand.iter().for_each(|e| {\n                if\
    \ e < 0 {\n                    cnt += 1;\n                }\n                else\
    \ {\n                    cnt += 1;\n                    res += e;\n          \
    \      }\n            });\n            cnt -= 1;\n            res\n        }\n\
    \        vec![String::from(\"**\")] => {\n            let mut res = 0;\n     \
    \       let mut cnt = 0;\n            operand.iter().for_each(|e| {\n        \
    \        if e < 0 {\n                    cnt += 1;\n                }\n      \
    \          else {\n                    cnt += 1;\n                    res += e\
    \ * e;\n                }\n            });\n            cnt -= 1;\n          \
    \  res\n        }\n        _ => panic!(\"Operator must be one of [+ - / ^]\"),\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpbog0en1e.rs:21:9\n\
    \   |\n21 |         vec![String::from(\"+\"), String::from(\"-\"), String::from(\"\
    *\"), String::from(\"/\")] => {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpbog0en1e.rs:36:9\n   |\n36 |         vec![String::from(\"\
    **\")] => {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this error\
    \ originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbog0en1e.rs:25:24\n\
    \   |\n25 |                 if e < 0 {\n   |                        ^\n   |  \
    \                      |\n   |                        expected `&isize`, found\
    \ integer\n   |                        help: consider borrowing here: `&0`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbog0en1e.rs:40:24\n   |\n40 |  \
    \               if e < 0 {\n   |                        ^\n   |              \
    \          |\n   |                        expected `&isize`, found integer\n \
    \  |                        help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ == operand.len()-1);\n    let mut res = 0;\n    for i in operator.iter() {\n\
    \        if i == '+' { res += operand[1] } else if i == '*' { res += operand[0]\
    \ * operand[1] } else if i == '-' { res -=\n            operand[0] } else if i\
    \ == '/' { res /= operand[0] } else if i == '//' { res /= operand[0] as isize\n\
    \            } else {\n                panic!(\"Invalid algebraic operation {}\"\
    , i);\n            }\n    }\n    res as isize\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpp8x6q5cw.rs:24:78\n\
    \   |\n24 |             operand[0] } else if i == '/' { res /= operand[0] } else\
    \ if i == '//' { res /= operand[0] as isize\n   |                            \
    \                                                  ^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator {\n        vec![\"*\", \"-\", \"+\"] | vec![\"**\"] => {\n        \
    \    let mut result = 0;\n            for i in 0..operand.len() - 1 {\n      \
    \          result += operand[i] * operand[i + 1];\n            }\n           \
    \ result\n        }\n        vec![\"/\", \"//\"] | vec![\"//\"] | vec![\"//\"\
    ] | vec![\"//\"] => {\n            let mut result: isize = operand[0];\n     \
    \       for i in 1..operand.len() {\n                result = result / operand[i];\n\
    \            }\n            result\n        }\n        vec![\"^\", \"**\", \"\
    **\", \"**\"] | vec![\"//\", \"//\", \"//\", \"//\"] => {\n            let mut\
    \ result = 0;\n            for i in 0..operand.len() - 1 {\n                result\
    \ += operand[i] ** operand[i + 1];\n            }\n            result\n      \
    \  }\n        _ => {\n            let mut result = 0;\n            for i in 0..operand.len()\
    \ - 1 {\n                result += operand[i] + operand[i + 1];\n            }\n\
    \            result\n        }\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpnoz08key.rs:21:9\n\
    \   |\n21 |         vec![\"*\", \"-\", \"+\"] | vec![\"**\"] => {\n   |      \
    \   ^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmpnoz08key.rs:21:31\n  \
    \ |\n21 |         vec![\"*\", \"-\", \"+\"] | vec![\"**\"] => {\n   |        \
    \                       ^^^^^^^^^^\n   |\n   = note: this error originates in\
    \ the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpnoz08key.rs:28:9\n\
    \   |\n28 |         vec![\"/\", \"//\"] | vec![\"//\"] | vec![\"//\"] | vec![\"\
    //\"] => {\n   |         ^^^^^^^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpnoz08key.rs:28:27\n\
    \   |\n28 |         vec![\"/\", \"//\"] | vec![\"//\"] | vec![\"//\"] | vec![\"\
    //\"] => {\n   |                           ^^^^^^^^^^\n   |\n   = note: this error\
    \ originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpnoz08key.rs:28:40\n   |\n28 |         vec![\"/\", \"//\"] | vec![\"\
    //\"] | vec![\"//\"] | vec![\"//\"] => {\n   |                               \
    \         ^^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmpnoz08key.rs:28:53\n  \
    \ |\n28 |         vec![\"/\", \"//\"] | vec![\"//\"] | vec![\"//\"] | vec![\"\
    //\"] => {\n   |                                                     ^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpnoz08key.rs:35:9\n   |\n35 |   "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut eval_result: isize = 0;\n\n    for i in 0..(operand.len() - 1) {\n     \
    \   let operand1: isize = operand[i];\n        let operator1: String = operator[i];\n\
    \        let op1 = match operator1.as_ref() {\n            \"+\" => add::add,\n\
    \            \"-\" => sub::sub,\n            \"*\" => mul::mul,\n            \"\
    /\" => div::div,\n            \"%\" => mod::mod,\n            \"**\" => power::power,\n\
    \            x => panic!(\"operator not recognized: {}\", x)\n        };\n   \
    \     let mut eval_result1: isize = 0;\n\n        // eval the result of the operation\
    \ \n        let operand2: isize = operand[1 + i];\n        eval_result1 = op1(&operand1,\
    \ &operand2);\n        eval_result = eval_result.checked_add(eval_result1).unwrap();\n\
    \    }\n    eval_result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found keyword `mod`\n  --> /tmp/tmp373avb8w.rs:30:20\n\
    \   |\n30 |             \"%\" => mod::mod,\n   |                 -- ^^^ expected\
    \ expression\n   |                 |\n   |                 while parsing the `match`\
    \ arm starting here\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `add`\n  --> /tmp/tmp373avb8w.rs:26:20\n   |\n26 |             \"\
    +\" => add::add,\n   |                    ^^^ use of undeclared crate or module\
    \ `add`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `sub`\n  --> /tmp/tmp373avb8w.rs:27:20\n   |\n27 |             \"-\" => sub::sub,\n\
    \   |                    ^^^ use of undeclared crate or module `sub`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `mul`\n  --> /tmp/tmp373avb8w.rs:28:20\n\
    \   |\n28 |             \"*\" => mul::mul,\n   |                    ^^^ use of\
    \ undeclared crate or module `mul`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared crate or module `div`\n  --> /tmp/tmp373avb8w.rs:29:20\n   |\n29\
    \ |             \"/\" => div::div,\n   |                    ^^^ use of undeclared\
    \ crate or module `div`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Check\
    \ parameters\n    if operator.len() != operand.len() - 1 {\n        panic!(\"\
    vector and operator vector length must match\")\n    }\n    if operator.len()\
    \ == 0 {\n        panic!(\"vector must have at least one operator\")\n    }\n\
    \    if operand.len() < 2 {\n        panic!(\"operand vector must have two or\
    \ more operands\")\n    }\n    // Basic algebra operation operations\n    for\
    \ op in operator {\n        match op {\n            &\"+\" => {\n            \
    \    let temp_sum = operand.iter().cloned().fold(0, |a, b| a + b);\n         \
    \       temp_sum\n            }\n            &\"-\" => {\n                let\
    \ temp_diff = operand.iter().cloned().fold(0, |a, b| a - b);\n               \
    \ temp_diff\n            }\n            &\"*\" => {\n                let temp_product\
    \ = operand.iter().cloned().fold(1, |a, b| a * b);\n                temp_product\n\
    \            }\n            &\"//\" => {\n                let temp_quotient =\
    \ operand.iter().cloned().fold(1, |a, b| a / b);\n                temp_quotient\n\
    \            }\n            &\"**\" => {\n                let temp_exponent =\
    \ operand.iter().cloned().fold(1, |a, b| a * pow(a, b));\n                temp_exponent\n\
    \            }\n            _ => {\n                panic!(\"operators must be\
    \ of '+'/'-'/'*'/'**' format\")\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpu6t9fh9f.rs:50:80\n\
    \   |\n50 |                 let temp_exponent = operand.iter().cloned().fold(1,\
    \ |a, b| a * pow(a, b));\n   |                                               \
    \                                 ^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu6t9fh9f.rs:33:13\n   |\n32 |         match\
    \ op {\n   |               -- this expression has type `String`\n33 |        \
    \     &\"+\" => {\n   |             ^^^^ expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpu6t9fh9f.rs:37:13\n   |\n32 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n37 |             &\"-\" => {\n   |             ^^^^ expected struct `String`,\
    \ found reference\n   |\n   = note: expected struct `String`\n           found\
    \ reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu6t9fh9f.rs:41:13\n\
    \   |\n32 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n41 |             &\"*\" => {\n   |             ^^^^ expected\
    \ struct `String`, found reference\n   |\n   = note: expected struct `String`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu6t9fh9f.rs:45:13\n\
    \   |\n32 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n45 |             &\"//\" => {\n   |             ^^^^^ expected\
    \ struct `String`, found reference\n   |\n   = note: expected struct `String`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu6t9fh9f.rs:49:13\n\
    \   |\n32 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n49 |             &\"**\" => {\n   |             ^^^^^ expected\
    \ struct `String`, found reference\n   |\n   = note: expected struct `String`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu6t9fh9f.rs:35:17\n\
    \   |\n32 | /         match op {\n33 | |             &\"+\" => {\n34 | |     \
    \            let temp_sum = o"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 || operand.len() == 0 || operator.len() != operand.len() - 1 {\n      \
    \  println!(\"Invalid input. Please input valid input: operator vector, operand\
    \ vector, number of operator and operand.\");\n        0;\n    } else {\n    \
    \    let mut exp = operand.iter().map(|x|x).reduce(|a, b| a + b as isize);\n \
    \       match operator.pop() {\n            Operator::Power => exp *= operand\
    \ as isize,\n            Operator::Division => exp = do_division(exp, operand\
    \ as isize),\n            Operator::Multiplication => exp = do_multiplication(exp,\
    \ operand as isize),\n            Operator::Addition => exp = do_addition(exp,\
    \ operand as isize),\n            Operator::Subtraction => exp = do_subtraction(exp,\
    \ operand as isize),\n            Operator::Floor => exp = do_floor(exp, operand\
    \ as isize),\n            Operator::Exponentiation => exp = do_exponentiation(exp,\
    \ operand as isize),\n            _ => println!(\"Invalid operator. Please input\
    \ valid operator: power, division, multiplication, addition, subtraction, floor,\
    \ exponential\");\n        }\n        exp\n    }\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: `match` arm body without braces\n  --> /tmp/tmpz5h2ec6i.rs:33:18\n\
    \   |\n33 | ... _ => println!(\"Invalid operator. Please input valid operator:\
    \ power, division, multiplication, addition, subtraction, floor, exponential\"\
    );\n   |       -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: use a comma to end a `match` arm expression: `,`\n   |       |  |\n  \
    \ |       |  this statement is not surrounded by a body\n   |       while parsing\
    \ the `match` arm starting here\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operator`\n  --> /tmp/tmpz5h2ec6i.rs:26:13\n   |\n26 |             Operator::Power\
    \ => exp *= operand as isize,\n   |             ^^^^^^^^ use of undeclared type\
    \ `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpz5h2ec6i.rs:27:13\n   |\n27 |             Operator::Division =>\
    \ exp = do_division(exp, operand as isize),\n   |             ^^^^^^^^ use of\
    \ undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operator`\n  --> /tmp/tmpz5h2ec6i.rs:28:13\n   |\n28 |             Operator::Multiplication\
    \ => exp = do_multiplication(exp, operand as isize),\n   |             ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpz5h2ec6i.rs:29:13\n   |\n29 |    \
    \         Operator::Addition => exp = do_addition(exp, operand as isize),\n  \
    \ |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpz5h2ec6i.rs:30:13\n\
    \   |\n30 |             Operator::Subtraction => exp = do_subtraction(exp, operand\
    \ as isize),\n   |             ^^^^^^^^ use of undeclared type `Operator`\n\n\
    error[E0433]: failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpz5h2ec6i.rs:31:13\n\
    \   |\n31 |             Operator::Floor => exp = do_floor(exp, operand as isize),\n\
    \   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed t"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.first();\n    for i in &operator {\n        result = operators.find(|item|\
    \ item.0 == i)\n            .unwrap()\n            .1(&result)\n            .unwrap();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `operators` in this scope\n  --> /tmp/tmpycx7ivir.rs:22:18\n\
    \   |\n22 |         result = operators.find(|item| item.0 == i)\n   |        \
    \          ^^^^^^^^^ help: a local variable with a similar name exists: `operator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpycx7ivir.rs:27:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n27 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in operator.iter() {\n        let operand2\
    \ = operand[1 + i];\n        match i {\n            \"+\" => {\n             \
    \   result += operand2;\n            }\n            \"-\" => {\n             \
    \   result -= operand2;\n            }\n            \"*\" => {\n             \
    \   result *= operand2;\n            }\n            \"/\" => {\n             \
    \   result /= operand2;\n            }\n            \"//\" => {\n            \
    \    result /= operand2;\n            }\n            \"**\" => {\n           \
    \     result **= operand2;\n            }\n            _ => {\n              \
    \  return -std::i32::MAX;\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpch8fco49.rs:40:25\n\
    \   |\n40 |                 result **= operand2;\n   |                       \
    \  ^^ expected expression\n\nerror[E0277]: cannot add `&String` to `{integer}`\n\
    \  --> /tmp/tmpch8fco49.rs:22:34\n   |\n22 |         let operand2 = operand[1\
    \ + i];\n   |                                  ^ no implementation for `{integer}\
    \ + &String`\n   |\n   = help: the trait `Add<&String>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpch8fco49.rs:24:13\n\
    \   |\n23 |         match i {\n   |               - this expression has type `&String`\n\
    24 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `str`\n   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpch8fco49.rs:27:13\n\
    \   |\n23 |         match i {\n   |               - this expression has type `&String`\n\
    ...\n27 |             \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpch8fco49.rs:30:13\n\
    \   |\n23 |         match i {\n   |               - this expression has type `&String`\n\
    ...\n30 |             \"*\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpch8fco49.rs:33:13\n\
    \   |\n23 |         match i {\n   |               - this expression has type `&String`\n\
    ...\n33 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator {\n        vec![\"+\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a + b).sum(),\n        vec![\"-\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a - b).sum(),\n        vec![\"*\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a * b).sum(),\n        vec![\"/\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a / b).sum(),\n        vec![\"**\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a ** b).sum(),\n        _ => unreachable!()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpccb1y23n.rs:21:9\n\
    \   |\n21 |         vec![\"+\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a + b).sum(),\n   |         ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpccb1y23n.rs:22:9\n\
    \   |\n22 |         vec![\"-\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a - b).sum(),\n   |         ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpccb1y23n.rs:23:9\n\
    \   |\n23 |         vec![\"*\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a * b).sum(),\n   |         ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpccb1y23n.rs:24:9\n\
    \   |\n24 |         vec![\"/\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a / b).sum(),\n   |         ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpccb1y23n.rs:25:9\n\
    \   |\n25 |         vec![\"**\"] => operand.iter().zip(operand.iter().skip(1)).map(|(a,b)|\
    \ a ** b).sum(),\n   |         ^^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to 5 previous errors\n\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op = operator[0];\n    let mut va = operand.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut vb = operand.iter().cloned().collect::<Vec<isize>>();\n    vb.insert(0,\
    \ 0);\n    let mut va_rem = va.clone();\n    let mut vb_rem = vb.clone();\n  \
    \  vb.insert(0, 0);\n    if op.len() > 2 {\n        for v in va.iter_mut() {\n\
    \            *v += *v;\n        }\n    }\n    if op.len() > 1 {\n        for v\
    \ in va.iter_mut() {\n            *v += *v;\n        }\n    }\n    vb.insert(0,\
    \ 0);\n    let mut res = 0.;\n    while va.len() > 0 && vb.len() > 0 {\n     \
    \   if op == \"+\" || op == \"*\" {\n            let mut sum = 0;\n          \
    \  let mut mult = 1;\n            for v in va.iter_mut() {\n                sum\
    \ += *v;\n            }\n            if op == \"+\" {\n                *va = sum;\n\
    \            } else {\n                *va = sum * mult;\n            }\n    \
    \        for v in vb.iter_mut() {\n                mult *= v;\n            }\n\
    \            va_rem = va.iter_mut();\n            va_rem.insert(0, 0);\n     \
    \       vb_rem = vb.iter_mut();\n            vb_rem.insert(0, 0);\n          \
    \  if op == \"+\" {\n                res = sum + sum;\n            } else {\n\
    \                res = sum * mult;\n            }\n        }\n        if op ==\
    \ \"-\" {\n            let mut diff = 0;\n            for v in va.iter_mut() {\n\
    \                diff += *v;\n            }\n            *va = -diff;\n      \
    \      va_rem = va.iter_mut();\n            va_rem.insert(0, 0);\n           \
    \ if op == \"+\" {\n                res = -diff;\n            }\n        } else\
    \ {\n            assert!(op.len() == 1, \"Invalid operator: {}\", op);\n     \
    \       let mut mul = 1;\n            for v in va.iter_mut() {\n             \
    \   mul *= v;\n            }\n            *va = mul;\n            va_rem = va.iter_mut();\n\
    \            va_rem.insert(0, 0);\n            if op == \"+\" {\n            \
    \    res = mul;\n            } else {\n                *va = mul * mul;\n    \
    \        }\n        }\n        va = va_rem;\n        vb = vb_rem;\n        op\
    \ = operator.pop();\n    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpitibi_j7.rs:47:23\n   |\n\
    47 |                 *va = sum;\n   |                 ---   ^^^ expected slice\
    \ `[isize]`, found `isize`\n   |                 |\n   |                 expected\
    \ due to the type of this binding\n\nerror[E0277]: the size for values of type\
    \ `[isize]` cannot be known at compilation time\n  --> /tmp/tmpitibi_j7.rs:47:17\n\
    \   |\n47 |                 *va = sum;\n   |                 ^^^ doesn't have\
    \ a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `[isize]`\n   = note: the left-hand-side of an assignment must have a statically\
    \ known size\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitibi_j7.rs:49:23\n\
    \   |\n49 |                 *va = sum * mult;\n   |                 ---   ^^^^^^^^^^\
    \ expected slice `[isize]`, found `isize`\n   |                 |\n   |      \
    \           expected due to the type of this binding\n\nerror[E0277]: the size\
    \ for values of type `[isize]` cannot be known at compilation time\n  --> /tmp/tmpitibi_j7.rs:49:17\n\
    \   |\n49 |                 *va = sum * mult;\n   |                 ^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[isize]`\n   = note: the left-hand-side of an assignment must\
    \ have a statically known size\n\nerror[E0277]: cannot multiply-assign `isize`\
    \ by `&mut isize`\n  --> /tmp/tmpitibi_j7.rs:52:22\n   |\n52 |               \
    \  mult *= v;\n   |                      ^^ no implementation for `isize *= &mut\
    \ isize`\n   |\n   = help: the trait `MulAssign<&mut isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitibi_j7.rs:54:22\n\
    \   |\n24 |     let mut va_rem = va.clone("
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result_operand = Vec::new();\n    let mut result_operator = Vec::new();\n\
    \n    for i in 0..operand.len() {\n        result_operand.push(*operand.iter().enumerate().filter(|&(i,_)|\
    \ {\n            operator[i] == operator[i]\n        }).map(|(_,v)| *v).sum());\n\
    \        result_operator.push(operator[i]);\n    }\n\n    result_operand.push(result_operand.iter().enumerate().filter(|&(_,v)|\
    \ *v == 0).map(|(_,v)| *v).sum());\n\n    result_operand.iter().map(|&(_,v)| {\n\
    \        let mut result = v as isize;\n        for j in 0..result_operator.len()\
    \ {\n            result = result_operand[j] * result + result_operator[j];\n \
    \       }\n        result\n    }).sum()\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpgk7s8gxq.rs:26:28\n\
    \   |\n26 |         }).map(|(_,v)| *v).sum());\n   |                         \
    \   ^^^ cannot infer type for type parameter `S` declared on the associated function\
    \ `sum`\n   |\n   = note: type must be known at this point\nhelp: consider specifying\
    \ the type argument in the method call\n   |\n26 |         }).map(|(_,v)| *v).sum::<S>());\n\
    \   |                               +++++\n\nerror[E0277]: can't compare `(_,\
    \ _)` with `{integer}`\n  --> /tmp/tmpgk7s8gxq.rs:30:78\n   |\n30 |     result_operand.push(result_operand.iter().enumerate().filter(|&(_,v)|\
    \ *v == 0).map(|(_,v)| *v).sum());\n   |                                     \
    \                                         ^^ no implementation for `(_, _) ==\
    \ {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `(_, _)`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             ()\n             (A, B, C, D, E, F, G, H, I, J, K, L)\n        \
    \     (B, C, D, E, F, G, H, I, J, K, L)\n             (C, D, E, F, G, H, I, J,\
    \ K, L)\n             (D, E, F, G, H, I, J, K, L)\n             (E, F, G, H, I,\
    \ J, K, L)\n             (F, G, H, I, J, K, L)\n             (G, H, I, J, K, L)\n\
    \           and 5 others\n\nerror[E0277]: the trait bound `(_, _): Sum<(_, _)>`\
    \ is not satisfied\n    --> /tmp/tmpgk7s8gxq.rs:30:100\n     |\n30   |     result_operand.push(result_operand.iter().enumerate().filter(|&(_,v)|\
    \ *v == 0).map(|(_,v)| *v).sum());\n     |                                   \
    \                                                                 ^^^ the trait\
    \ `Sum<(_, _)>` is not implemented for `(_, _)`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n\
    \               <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n\
    \               <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32,\
    \ LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n\
    \               <Simd<f64, LANES> as Sum<&'a Simd<f64, L"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    debug_assert!(operator.is_sorted());\n\
    \    debug_assert!(operand.is_sorted());\n    debug_assert!(operand.len() >= 2);\n\
    \    debug_assert!(operator.len() >= 1);\n\n    let mut result = 0;\n    let mut\
    \ i = 0;\n    for _ in 0..operand.len() {\n        let mut oper = operator[i];\n\
    \        let mut num = operand[i];\n        i += 1;\n        if oper == \"+\"\
    \ {\n            result += num;\n        } else if oper == \"*\" {\n         \
    \   result *= num;\n        } else if oper == \"-\" {\n            result -= num;\n\
    \        } else if oper == \"/\" {\n            if num == 0 {\n              \
    \  return 0;\n            }\n            result /= num;\n        } else if oper\
    \ == \"**\" {\n            result **= num;\n        }\n    }\n    debug_assert!(result\
    \ >= 0);\n    debug_assert!(i == operator.len());\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpkgvqgv5o.rs:43:21\n\
    \   |\n43 |             result **= num;\n   |                     ^^ expected\
    \ expression\n\nerror[E0658]: use of unstable library feature 'is_sorted': new\
    \ API\n  --> /tmp/tmpkgvqgv5o.rs:20:28\n   |\n20 |     debug_assert!(operator.is_sorted());\n\
    \   |                            ^^^^^^^^^\n   |\n   = note: see issue #53485\
    \ <https://github.com/rust-lang/rust/issues/53485> for more information\n\nerror[E0658]:\
    \ use of unstable library feature 'is_sorted': new API\n  --> /tmp/tmpkgvqgv5o.rs:21:27\n\
    \   |\n21 |     debug_assert!(operand.is_sorted());\n   |                    \
    \       ^^^^^^^^^\n   |\n   = note: see issue #53485 <https://github.com/rust-lang/rust/issues/53485>\
    \ for more information\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expr = 0;\n    for i in 0..operand.len() {\n        expr += operator[operand[i]]\
    \ * (operand[i] - i);\n    }\n    expr\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpbkc15bdt.rs:22:17\n\
    \   |\n22 |         expr += operator[operand[i]] * (operand[i] - i);\n   |   \
    \              ^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbkc15bdt.rs:22:54\n\
    \   |\n22 |         expr += operator[operand[i]] * (operand[i] - i);\n   |   \
    \                                                   ^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmpbkc15bdt.rs:22:52\n\
    \   |\n22 |         expr += operator[operand[i]] * (operand[i] - i);\n   |   \
    \                                                 ^ no implementation for `isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"Operator vector has more operators\
    \ than operand vector minus one\")\n    }\n\n    let mut result = operand.iter().cloned().sum();\n\
    \    for operator in operator {\n        match operator {\n            \"+\" =>\
    \ result += operand.iter().cloned().sum(),\n            \"-\" => result -= operand.iter().cloned().sum(),\n\
    \            \"*\" => result *= operand.iter().cloned().sum(),\n            \"\
    /\" => result /= operand.iter().cloned().sum(),\n            \"//\" => result\
    \ /= operand.iter().cloned().sum(),\n            \"**\" => result **= operand.iter().cloned().sum(),\n\
    \            _ => panic!(\"Unsupported operator in given vector\")\n        }\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpph43mef7.rs:32:29\n\
    \   |\n32 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpph43mef7.rs:27:13\n   |\n26 |         match\
    \ operator {\n   |               -------- this expression has type `String`\n\
    27 |             \"+\" => result += operand.iter().cloned().sum(),\n   |     \
    \        ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpph43mef7.rs:28:13\n   |\n26 |         match operator {\n\
    \   |               -------- this expression has type `String`\n27 |         \
    \    \"+\" => result += operand.iter().cloned().sum(),\n28 |             \"-\"\
    \ => result -= operand.iter().cloned().sum(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpph43mef7.rs:29:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n29 |             \"*\" => result *= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpph43mef7.rs:30:13\n   |\n26 |         match\
    \ operator {\n   |               -------- this expression has type `String`\n\
    ...\n30 |             \"/\" => result /= operand.iter().cloned().sum(),\n   |\
    \             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpph43mef7.rs:31:13\n   |\n26 |         match operator {\n\
    \   |               -------- this expression has type `String`\n...\n31 |    \
    \         \"//\" => result /= operand.iter().cloned().sum(),\n   |           \
    \  ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // If\
    \ the operator vector is empty then just return the result\n    if operator.iter().any(|&x|\
    \ x == \"\") {\n        return operand.iter().sum();\n    }\n    \n    // If the\
    \ operator vector is not empty then return the result of the corresponding operation\n\
    \    // of the operator vector with the first operand vector and do recursion\n\
    \    match operator.iter().next() {\n        Some(val) => do_algebra_1(operand,\
    \ val),\n        None => operand.iter().sum(),\n    }\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_algebra_1` in this scope\n  -->\
    \ /tmp/tmpee9aix7n.rs:28:22\n   |\n28 |         Some(val) => do_algebra_1(operand,\
    \ val),\n   |                      ^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand_size = operand.len() as usize;\n    if operator.len() == 0 {\n \
    \       return operand[operand_size - 1] as isize;\n    }\n    if operand_size\
    \ < 2 {\n        panic!(\"Operand vector size must be greater than 1.\");\n  \
    \  }\n    if operand_size == 1 {\n        return do_algebra(operator, [i32::MIN\
    \ as isize].concat());\n    }\n    if operand_size == 2 {\n        return do_algebra(operator,\
    \ [i32::MAX as isize].concat());\n    }\n    let mut operand_vec: Vec<isize> =\
    \ operand.clone();\n    let mut operator_vec: Vec<String> = operator.clone();\n\
    \    let mut result_vec: Vec<isize> = operand_vec[operand_size - 1];\n    if operator_vec.len()\
    \ == 0 {\n        let mut num_operand = operand_vec.len() - 1;\n        let mut\
    \ num_operator = operator_vec.len() - 1;\n        while num_operand >= 1 && num_operator\
    \ >= 1 {\n            let mut operand: isize = operand_vec[num_operand - 1];\n\
    \            let mut operator: String = operator_vec[num_operator - 1];\n    \
    \        result_vec = result_vec.add(do_algebra(operator, [i32::MIN as isize].concat()));\n\
    \            num_operand -= 1;\n            num_operator -= 1;\n        }\n  \
    \      return result_vec;\n    }\n    let mut num_operand = operand_vec.len()\
    \ - 1;\n    let mut num_operator = operator_vec.len() - 1;\n    while num_operand\
    \ >= 1 && num_operator >= 1 {\n        let mut operand: isize = operand_vec[num_operand\
    \ - 1];\n        let mut operator: String = operator_vec[num_operator - 1];\n\
    \        result_vec = result_vec.add(do_algebra(operator, [i32::MIN as isize].concat()));\n\
    \        num_operand -= 1;\n        num_operator -= 1;\n    }\n    let mut num_operand\
    \ = operand_vec.len() - 1;\n    let mut num_operator = operator_vec.len() - 1;\n\
    \    while num_operand >= 1 && num_operator >= 1 {\n        let mut operand: isize\
    \ = operand_vec[num_operand - 1];\n        let mut operator: String = operator_vec[num_operator\
    \ - 1];\n        result_vec = result_vec.add(do_algebra(operator, [i32::MAX as\
    \ isize].concat()));\n        num_operand -= 1;\n        num_operator -= 1;\n\
    \    }\n    let mut num_operand = operand_vec.len() - 1;\n    let mut num_operator\
    \ = operator_vec.len() - 1;\n    while num_operand >= 1 && num_operator >= 1 {\n\
    \        let mut operand: isize = operand_vec[\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpjkj8vb88.rs:77:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n68 |     while num_operand >= 1 && num_operator >=\
    \ 1 {\n   |                                                 - this delimiter might\
    \ not be properly closed...\n69 |         let mut operand: isize = operand_vec[\n\
    70 | }\n   | - ...as it matches this but it has different indentation\n...\n77\
    \ | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpjkj8vb88.rs:69:45\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ closing delimiter possibly meant for this\n...\n69 |         let mut operand:\
    \ isize = operand_vec[\n   |                                             ^ unclosed\
    \ delimiter\n70 | }\n   | ^ mismatched closing delimiter\n\nerror: expected expression,\
    \ found `]`\n  --> /tmp/tmpjkj8vb88.rs:70:1\n   |\n70 | }\n   | ^ expected expression\n\
    \nerror[E0599]: the method `concat` exists for array `[isize; 1]`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpjkj8vb88.rs:28:57\n   |\n28 |     \
    \    return do_algebra(operator, [i32::MIN as isize].concat());\n   |        \
    \                                                 ^^^^^^ method cannot be called\
    \ on `[isize; 1]` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `[isize]: Concat<_>`\n\nerror[E0599]:\
    \ the method `concat` exists for array `[isize; 1]`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpjkj8vb88.rs:31:57\n   |\n31 |         return do_algebra(operator,\
    \ [i32::MAX as isize].concat());\n   |                                       \
    \                  ^^^^^^ method cannot be called on `[isize; 1]` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `[isize]: Concat<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjkj8"
  stdout: ''
  timestamp: 1659977883
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    //write\
    \ your code here\n    let mut res = operand.iter().cloned().take(operator.len()).fold(0,\
    \ |acc, val| {\n        acc + (val as isize) * operator[operator.len()-1].parse::<isize>().unwrap()\n\
    \    });\n    \n    println!(\"{:?}\", res);\n    \n    res\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpebg67fyx.rs:22:76

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operator\n\
    \        .iter()\n        .zip(operand.iter())\n        .map(|op| {\n        \
    \    match op {\n                (operator, operand) => match operator {\n   \
    \                 \"+\".to_string() => operand + operand,\n                  \
    \  \"-\".to_string() => operand - operand,\n                    \"*\".to_string()\
    \ => operand * operand,\n                    \"//\".to_string() => operand / operand,\n\
    \                    \"**\".to_string() => operand ** operand,\n             \
    \       _ => panic!(\"The operator '{}' is not valid.\", operator),\n        \
    \        },\n                _ => panic!(\"The operand vector is empty.\"),\n\
    \            }\n        })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `...`, `..=`, `..`, `=>`, `if`, or `|`, found `.`\n\
    \  --> /tmp/tmpff6e4sg3.rs:26:24\n   |\n26 |                     \"+\".to_string()\
    \ => operand + operand,\n   |                        ^ expected one of `...`,\
    \ `..=`, `..`, `=>`, `if`, or `|`\n\nerror[E0277]: the trait bound `isize: Sum<()>`\
    \ is not satisfied\n    --> /tmp/tmpff6e4sg3.rs:36:10\n     |\n36   |        \
    \ .sum()\n     |          ^^^ the trait `Sum<()>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Check\
    \ operator vector.\n    let mut result = operand.iter().cloned().fold(0isize,\
    \ (0,));\n    for i in 0..operator.len() - 1 {\n        result = operator[i]\n\
    \            .chars()\n            .zip(operand.iter().cloned())\n           \
    \ .fold(result, |a, b| a.0 + (b[0].to_i() * b[1]));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(isize, isize)>` closure, found `({integer},)`\n\
    \    --> /tmp/tmp94s1_6t7.rs:21:59\n     |\n21   |     let mut result = operand.iter().cloned().fold(0isize,\
    \ (0,));\n     |                                              ----         ^^^^\
    \ expected an `FnMut<(isize, isize)>` closure, found `({integer},)`\n     |  \
    \                                            |\n     |                       \
    \                       required by a bound introduced by this call\n     |\n\
    \     = help: the trait `FnMut<(isize, isize)>` is not implemented for `({integer},)`\n\
    note: required by a bound in `fold`\n\nerror[E0610]: `isize` is a primitive type\
    \ and therefore doesn't have fields\n  --> /tmp/tmp94s1_6t7.rs:26:36\n   |\n26\
    \ |             .fold(result, |a, b| a.0 + (b[0].to_i() * b[1]));\n   |      \
    \                              ^\n\nerror[E0608]: cannot index into a value of\
    \ type `(char, isize)`\n  --> /tmp/tmp94s1_6t7.rs:26:41\n   |\n26 |          \
    \   .fold(result, |a, b| a.0 + (b[0].to_i() * b[1]));\n   |                  \
    \                       ^^^^ help: to access tuple elements, use: `b.0`\n\nerror[E0608]:\
    \ cannot index into a value of type `(char, isize)`\n  --> /tmp/tmp94s1_6t7.rs:26:55\n\
    \   |\n26 |             .fold(result, |a, b| a.0 + (b[0].to_i() * b[1]));\n  \
    \ |                                                       ^^^^ help: to access\
    \ tuple elements, use: `b.1`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0608, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // The\
    \ operator vector should have at least one operator\n    // and the operand vector\
    \ should have at least two operands.\n    if operator.is_empty() {\n        panic!(\"\
    Operator vector must have at least one operator\");\n    } else if operand.is_empty()\
    \ {\n        panic!(\"Operand vector must have at least two operands\");\n   \
    \ }\n\n    // Go through each element of the operator vector\n    for operator_element\
    \ in operator.iter() {\n        // Look up the operator in the basic algebra table\n\
    \        let operator = basic_algebra_table[operator_element];\n        // Call\
    \ the function corresponding to the operator from the basic algebra table\n  \
    \      let result = operator(operand);\n        // Return the result of the algebraic\
    \ operation to the caller\n        return result;\n    }\n\n    panic!(\"This\
    \ should not happen\")\n}\n\nfn main() {\n    let candidate = do_algebra;\n  \
    \  assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `basic_algebra_table` in this scope\n \
    \ --> /tmp/tmpamyxkn6r.rs:31:24\n   |\n31 |         let operator = basic_algebra_table[operator_element];\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    \n \
    \   fn do_calculation(mut operator: &Vec<String>, mut operand: &Vec<isize>, index:\
    \ usize) -> isize {\n        if index == operator.len() {\n            return\
    \ operand.get(0).clone() + operand.get(1).clone();\n        } else if index ==\
    \ operator.len() - 1 {\n            return operand.get(0).clone() * operand.get(1).clone();\n\
    \        }\n        if index == 0 {\n            return do_calculation(operator,\
    \ operand, index - 1) + operator.get(index).clone() * do_calculation(operator,\
    \ operand, index - 2);\n        } else if index == operator.len() - 2 {\n    \
    \        return do_calculation(operator, operand, index - 2) + operator.get(index).clone()\
    \ * do_calculation(operator, operand, index - 1);\n        }\n        return do_calculation(operator,\
    \ operand, index - 2) + operator.get(index).clone() * do_calculation(operator,\
    \ operand, index - 1);\n    }\n\n    let result_vector = vec![0isize; operand.len()\
    \ - 1];\n    for (i, operator) in operator.iter().enumerate() {\n        result_vector[i]\
    \ = do_calculation(&operator, &operand, i);\n    }\n    result_vector.iter().cloned().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuu4havl7.rs:37:43\n   |\n\
    37 |         result_vector[i] = do_calculation(&operator, &operand, i);\n   |\
    \                                           ^^^^^^^^^ expected struct `Vec`, found\
    \ `&String`\n   |\n   = note: expected reference `&Vec<String>`\n            \
    \  found reference `&&String`\n\nerror[E0369]: cannot add `Option<&isize>` to\
    \ `Option<&isize>`\n  --> /tmp/tmpuu4havl7.rs:23:43\n   |\n23 |             return\
    \ operand.get(0).clone() + operand.get(1).clone();\n   |                    ----------------------\
    \ ^ ---------------------- Option<&isize>\n   |                    |\n   |   \
    \                 Option<&isize>\n\nerror[E0369]: cannot multiply `Option<&isize>`\
    \ by `Option<&isize>`\n  --> /tmp/tmpuu4havl7.rs:25:43\n   |\n25 |           \
    \  return operand.get(0).clone() * operand.get(1).clone();\n   |             \
    \       ---------------------- ^ ---------------------- Option<&isize>\n   | \
    \                   |\n   |                    Option<&isize>\n\nerror[E0369]:\
    \ cannot multiply `Option<&String>` by `isize`\n  --> /tmp/tmpuu4havl7.rs:28:95\n\
    \   |\n28 | ...tor, operand, index - 1) + operator.get(index).clone() * do_calculation(operator,\
    \ operand, index - 2);\n   |                               ---------------------------\
    \ ^ -------------------------------------------- isize\n   |                 \
    \              |\n   |                               Option<&String>\n\nerror[E0369]:\
    \ cannot multiply `Option<&String>` by `isize`\n  --> /tmp/tmpuu4havl7.rs:30:95\n\
    \   |\n30 | ...tor, operand, index - 2) + operator.get(index).clone() * do_calculation(operator,\
    \ operand, index - 1);\n   |                               ---------------------------\
    \ ^ -------------------------------------------- isize\n   |                 \
    \              |\n   |                               Option<&String>\n\nerror[E0369]:\
    \ cannot multiply `Option<&String>` by `isize`\n  --> /tmp/tmpuu4havl7.rs:32:91\n\
    \   |\n32 |         return do_calculation(operator, operand, index - 2) + operator.get(index).clone()\
    \ * do_calculation(operator, operand, index - 1);\n  "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut op = operator[0];\n    let mut arg1 = operand[0];\n    let mut arg2 = operand[1];\n\
    \    loop {\n        match op {\n            '+' => {\n                let tmp\
    \ = arg1 + arg2;\n                if tmp >= 0 {\n                    arg1 = tmp;\n\
    \                } else {\n                    op = operator[1];\n           \
    \         arg2 = operand[1];\n                }\n            }\n            '-'\
    \ => {\n                let tmp = arg1 - arg2;\n                if tmp >= 0 {\n\
    \                    arg1 = tmp;\n                } else {\n                 \
    \   op = operator[1];\n                    arg2 = operand[1];\n              \
    \  }\n            }\n            '*' => {\n                let tmp = arg1 * arg2;\n\
    \                if tmp >= 0 {\n                    arg1 = tmp;\n            \
    \    } else {\n                    op = operator[1];\n                    arg2\
    \ = operand[1];\n                }\n            }\n            '/' => {\n    \
    \            let tmp = arg1 >> arg2;\n                if tmp >= 0 {\n        \
    \            arg1 = tmp;\n                } else {\n                    op = operator[1];\n\
    \                    arg2 = operand[1];\n                }\n            }\n  \
    \          '%' => {\n                let tmp = arg1 as isize % arg2;\n       \
    \         if tmp >= 0 {\n                    arg1 = tmp;\n                } else\
    \ {\n                    op = operator[1];\n                    arg2 = operand[1];\n\
    \                }\n            }\n            '**' => {\n                let\
    \ tmp = arg1 as isize ** arg2;\n                if tmp >= 0 {\n              \
    \      arg1 = tmp;\n                } else {\n                    op = operator[1];\n\
    \                    arg2 = operand[1];\n                }\n            }\n  \
    \          _ => {\n                return arg1;\n            }\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpxxyowujt.rs:70:13\n\
    \   |\n70 |             '**' => {\n   |             ^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n70 |             \"**\" =>\
    \ {\n   |             ~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxyowujt.rs:25:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n25 |             '+' => {\n   |             ^^^ expected struct `String`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxyowujt.rs:34:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n34 |             '-' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxyowujt.rs:43:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             '*' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxyowujt.rs:52:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n52 |             '/' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxxyowujt.rs:61:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n61 |             '%' => {\n   |             ^^^ expected struct\
    \ `String`, found `char`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpxxyowujt.rs:71:42\n   |\n71 |                 let tmp = arg1 as\
    \ isize ** arg2;\n   |                                          ^^^^^^\n\nerror:\
    \ aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ < 1 || operand.len() < 2 {\n        panic!(\"Invalid vectors provided\");\n\
    \    }\n\n    if operator.len() > operand.len() {\n        panic!(\"Invalid vectors\
    \ provided\");\n    }\n\n    let mut result = operand[0];\n\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                for x in operand\
    \ {\n                    result = result + x;\n                }\n           \
    \ }\n            \"-\" => {\n                for x in operand {\n            \
    \        result = result - x;\n                }\n            }\n            \"\
    *\" => {\n                for x in operand {\n                    result = result\
    \ * x;\n                }\n            }\n            \"//\" => {\n          \
    \      for x in operand {\n                    result = result / x;\n        \
    \        }\n            }\n            \"**\" => {\n                for x in operand\
    \ {\n                    result = result ** x;\n                }\n          \
    \  }\n            _ => {\n                panic!(\"Invalid operator provided\"\
    );\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa4h8_ep9.rs:32:13\n   |\n\
    31 |         match op {\n   |               -- this expression has type `String`\n\
    32 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4h8_ep9.rs:37:13\n\
    \   |\n31 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n37 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4h8_ep9.rs:42:13\n\
    \   |\n31 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n42 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4h8_ep9.rs:47:13\n\
    \   |\n31 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n47 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4h8_ep9.rs:52:13\n\
    \   |\n31 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n52 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpa4h8_ep9.rs:54:38\n   |\n54 |                     result = result\
    \ ** x;\n   |                                      ^^^\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result: isize = 0;\n    result.push(1);\n    for element in operator {\n\
    \        let op: Result<isize, &str> = match element.as_str() {\n            \"\
    +\" => Ok(result + operand.pop()),\n            \"-\" => Ok(result - operand.pop()),\n\
    \            \"*\" => Ok(result * operand.pop()),\n            \"/\" => Ok(result\
    \ / operand.pop()),\n            \"//\" => Ok(result / operand.pop()),\n     \
    \       \"**\" => Ok(result ** operand.pop()),\n            _ => Err(\"Illegal\
    \ operation\"),\n        };\n        result = op.ok_or(\"Illegal operation\");\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6zzjve5s.rs:21:12\n   |\n21 |     result.push(1);\n   |\
    \            ^^^^ method not found in `isize`\n\nerror[E0277]: cannot add `Option<isize>`\
    \ to `isize`\n  --> /tmp/tmp6zzjve5s.rs:24:30\n   |\n24 |             \"+\" =>\
    \ Ok(result + operand.pop()),\n   |                              ^ no implementation\
    \ for `isize + Option<isize>`\n   |\n   = help: the trait `Add<Option<isize>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot subtract `Option<isize>` from\
    \ `isize`\n  --> /tmp/tmp6zzjve5s.rs:25:30\n   |\n25 |             \"-\" => Ok(result\
    \ - operand.pop()),\n   |                              ^ no implementation for\
    \ `isize - Option<isize>`\n   |\n   = help: the trait `Sub<Option<isize>>` is\
    \ not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot multiply `isize` by `Option<isize>`\n\
    \  --> /tmp/tmp6zzjve5s.rs:26:30\n   |\n26 |             \"*\" => Ok(result *\
    \ operand.pop()),\n   |                              ^ no implementation for `isize\
    \ * Option<isize>`\n   |\n   = help: the trait `Mul<Option<isize>>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result: isize = 0;\n    for i in 0..operand.len() - 1 {\n        let op_name\
    \ = operator[i];\n        if op_name.chars().any(|&char| char == ' ') {\n    \
    \        continue;\n        }\n        match op_name {\n            \"+\" => {\n\
    \                result += operand[i];\n            }\n            \"-\" => {\n\
    \                result -= operand[i];\n            }\n            \"*\" => {\n\
    \                result *= operand[i];\n            }\n            \"/\" => {\n\
    \                result /= operand[i];\n            }\n            \"**\" => {\n\
    \                result **= operand[i];\n            }\n            _ => {\n \
    \               panic!(\"Unknown operator \\\"{}\\\"\", op_name);\n          \
    \  }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp45_um6x4.rs:40:25\n\
    \   |\n40 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp45_um6x4.rs:23:33\n\
    \   |\n23 |         if op_name.chars().any(|&char| char == ' ') {\n   |      \
    \                           ^-----\n   |                                 ||\n\
    \   |                                 |expected due to this\n   |            \
    \                     expected `char`, found reference\n   |                 \
    \                help: did you mean `char`: `&char`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp45_um6x4.rs:27:13\n   |\n26 |         match op_name {\n   |   \
    \            ------- this expression has type `String`\n27 |             \"+\"\
    \ => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp45_um6x4.rs:30:13\n   |\n26 |         match\
    \ op_name {\n   |               ------- this expression has type `String`\n...\n\
    30 |             \"-\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp45_um6x4.rs:33:13\n\
    \   |\n26 |         match op_name {\n   |               ------- this expression\
    \ has type `String`\n...\n33 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp45_um6x4.rs:36:13\n\
    \   |\n26 |         match op_name {\n   |               ------- this expression\
    \ has type `String`\n...\n36 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp45_um6x4.rs:39:13\n\
    \   |\n26 |         match op_name {\n   |               ------- this expression\
    \ has type `String`\n...\n39 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    do_algebra1(operator,\
    \ operand, 0) - operand.first()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_algebra1` in this scope\n  --> /tmp/tmpn4s4ji91.rs:20:5\n\
    \   |\n20 |     do_algebra1(operator, operand, 0) - operand.first()\n   |    \
    \ ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut temp_operand = operand.clone();\n\
    \    temp_operand.push(0);\n\n    for elem in &operator[..] {\n        match elem\
    \ {\n            \"+\" | \"-\" => {\n                result = result + temp_operand.pop();\n\
    \                temp_operand.push(0);\n            }\n            \"*\" => {\n\
    \                result = result * temp_operand.pop();\n                temp_operand.push(0);\n\
    \            }\n            \"/\" => {\n                result = result / temp_operand.pop();\n\
    \                temp_operand.push(0);\n            }\n            \"%\" => {\n\
    \                result = result % temp_operand.pop();\n                temp_operand.push(0);\n\
    \            }\n            \"**\" => {\n                result = result ** temp_operand.pop();\n\
    \                temp_operand.push(0);\n            }\n            _ => unimplemented!(),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpicjevfcc.rs:26:13\n   |\n\
    25 |         match elem {\n   |               ---- this expression has type `&String`\n\
    26 |             \"+\" | \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicjevfcc.rs:26:19\n\
    \   |\n25 |         match elem {\n   |               ---- this expression has\
    \ type `&String`\n26 |             \"+\" | \"-\" => {\n   |                  \
    \ ^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpicjevfcc.rs:30:13\n   |\n25 |         match elem {\n  \
    \ |               ---- this expression has type `&String`\n...\n30 |         \
    \    \"*\" => {\n   |             ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicjevfcc.rs:34:13\n\
    \   |\n25 |         match elem {\n   |               ---- this expression has\
    \ type `&String`\n...\n34 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpicjevfcc.rs:38:13\n   |\n25 |         match elem {\n   |      \
    \         ---- this expression has type `&String`\n...\n38 |             \"%\"\
    \ => {\n   |             ^^^ expected struct `String`, found `str`\n   |\n   =\
    \ note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicjevfcc.rs:42:13\n  \
    \ |\n25 |         match elem {\n   |               ---- this expression has type\
    \ `&String`\n...\n42 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0369]: cannot add `Option<isize"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operator_stack: Vec<isize> = vec![];\n    let mut result_stack: Vec<isize>\
    \ = vec![];\n    let mut first_operand = operand.len();\n    let mut second_operand\
    \ = operand.len();\n    \n    for s in operator.iter() {\n        match s {\n\
    \            \"-\" => {\n                result_stack.append(result_stack.pop()\
    \ - first_operand);\n                operator_stack.push(result_stack.len());\n\
    \            }\n            \"+\" => {\n                result_stack.append(result_stack.pop()\
    \ + first_operand);\n                operator_stack.push(result_stack.len());\n\
    \            }\n            \"*\" => {\n                result_stack.append(result_stack.pop()\
    \ * first_operand);\n                operator_stack.push(result_stack.len());\n\
    \            }\n            \"//\" => {\n                result_stack.append(result_stack.pop()\
    \ // first_operand);\n                operator_stack.push(result_stack.len());\n\
    \            }\n            \"**\" => {\n                result_stack.append(result_stack.pop()\
    \ ** first_operand);\n                operator_stack.push(result_stack.len());\n\
    \            }\n            _ => {\n                result_stack.push(s.to_owned());\n\
    \            }\n        }\n        \n        if result_stack.len() > operator_stack.len()\
    \ {\n            result_stack.truncate(operator_stack.len());\n        }\n   \
    \ }\n\n    result_stack.pop();\n\n    if result_stack.len() < operator_stack.len()\
    \ {\n        result_stack.extend(operator_stack - result_stack.len());\n    }\n\
    \n    result_stack.into_iter().sum();\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmps62f2ft0.rs:40:36\n\
    \   |\n39 |             \"//\" => {\n   |                     - closing delimiter\
    \ possibly meant for this\n40 |                 result_stack.append(result_stack.pop()\
    \ // first_operand);\n   |                                    ^ unclosed delimiter\n\
    41 |                 operator_stack.push(result_stack.len());\n42 |          \
    \   }\n   |             ^ mismatched closing delimiter\n\nerror: expected one\
    \ of `)`, `,`, `.`, `?`, or an operator, found `operator_stack`\n  --> /tmp/tmps62f2ft0.rs:40:36\n\
    \   |\n40 |                 result_stack.append(result_stack.pop() // first_operand);\n\
    \   |                                    ^                  - help: `)` may belong\
    \ here\n   |                                    |\n   |                      \
    \              unclosed delimiter\n41 |                 operator_stack.push(result_stack.len());\n\
    \   |                 ^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Your\
    \ code here\n    let mut res: isize = 0;\n    for i in 0..operator.len() {\n \
    \       if let Some(oper) = operator.get_mut(i) {\n            let a = operand.get(i\
    \ as usize - 1).unwrap();\n            let b = operand.get(i as usize).unwrap();\n\
    \            res = res + oper * a * b\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `&mut String` by `&isize`\n  --> /tmp/tmpbak6erjr.rs:26:30\n\
    \   |\n26 |             res = res + oper * a * b\n   |                       \
    \  ---- ^ - &isize\n   |                         |\n   |                     \
    \    &mut String\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // We\
    \ are assuming that the length of operand vector is at least two.\n    // We also\
    \ assume that the length of operator vector is at least one.\n    assert!(operand.len()\
    \ >= 2);\n    assert!(operator.len() > 0);\n\n    let mut result = operand.iter().sum();\n\
    \    for operator in operator.iter() {\n        let mut temp: isize = 0;\n   \
    \     for i in 0..operand.len() - 1 {\n            if operator.0 == operand.slice(i).pop()\
    \ {\n                temp = i;\n                break;\n            }\n      \
    \  }\n        result = do_operator(operator, result, &operand[temp]);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_operator` in this scope\n  --> /tmp/tmpe2a7dxr7.rs:34:18\n\
    \   |\n34 |         result = do_operator(operator, result, &operand[temp]);\n\
    \   |                  ^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `operator`\n\nerror[E0609]: no field `0` on type `&String`\n  --> /tmp/tmpe2a7dxr7.rs:29:25\n\
    \   |\n29 |             if operator.0 == operand.slice(i).pop() {\n   |      \
    \                   ^ unknown field\n\nerror[E0599]: no method named `slice` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpe2a7dxr7.rs:29:38\n\
    \   |\n29 |             if operator.0 == operand.slice(i).pop() {\n   |      \
    \                                ^^^^^\n   |\n   = help: items from traits can\
    \ only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n\
    \   |\nhelp: there is an associated function with a similar name\n   |\n29 | \
    \            if operator.0 == operand.as_slice(i).pop() {\n   |              \
    \                        ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe2a7dxr7.rs:30:24\n\
    \   |\n27 |         let mut temp: isize = 0;\n   |                       -----\
    \ expected due to this type\n...\n30 |                 temp = i;\n   |       \
    \                 ^ expected `isize`, found `usize`\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe2a7dxr7.rs:34:49\n  \
    \ |\n34 |         result = do_operator(operator, result, &operand[temp]);\n  \
    \ |                                                 ^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425, E0599, E0609.\n\
    For more information about an error, t"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.is_empty()\
    \ {\n        0\n    } else if operator.len() == 1 {\n        operand.iter()\n\
    \            .zip(operand.iter().cloned())\n            .fold(0, |res, (a, b)|\
    \ res + a * b)\n    } else {\n        operand.iter()\n            .zip(operand.iter().cloned())\n\
    \            .fold(0, |res, (a, b)| res + operator[0] * a * b * operator[1])\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `String` by `&isize`\n  --> /tmp/tmpxj6a2o7a.rs:29:54\n\
    \   |\n29 |             .fold(0, |res, (a, b)| res + operator[0] * a * b * operator[1])\n\
    \   |                                          ----------- ^ - &isize\n   |  \
    \                                        |\n   |                             \
    \             String\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expr = 0;\n    for op in operator {\n        expr += operand[operand.iter().position(|&x|\
    \ x == op).unwrap()]\n    }\n    expr\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeeatl067.rs:22:59\n   |\n\
    22 |         expr += operand[operand.iter().position(|&x| x == op).unwrap()]\n\
    \   |                                                           ^^ expected `isize`,\
    \ found struct `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ std::iter;\n    use std::cmp::Ordering;\n    let mut operands = operand;\n \
    \   let mut expression = \"\";\n    let mut op_iter: Vec<isize> = operator;\n\
    \    while !op_iter.last().is_some() {\n        let op = op_iter.last().unwrap();\n\
    \        op_iter.pop();\n        let mut ops = \"\";\n        operands.sort();\n\
    \        let mut op_iter: Vec<isize> = operator;\n        while !op_iter.last().is_some()\
    \ {\n            let op = op_iter.last().unwrap();\n            op_iter.pop();\n\
    \            ops.push(op);\n        }\n        ops.push(op);\n        expression\
    \ += ops;\n    }\n    operands.sort();\n    let mut result_vec = Vec::<isize>::new();\n\
    \    for (index, num) in operands.iter().enumerate() {\n        result_vec.push(num);\n\
    \        expression += &operator[index];\n    }\n    expression += \"0\".to_string();\n\
    \    let mut operation = String::from(\"0\");\n    match expression.parse::<isize>()\
    \ {\n        Ok(num) => result_vec.push(num),\n        Err(_) => {\n         \
    \   println!(\"Failed to parse expression.\");\n            result_vec.push(-0);\n\
    \        }\n    };\n    let mut result = -0;\n    for num in result_vec {\n  \
    \      operation = operation.to_ascii_uppercase();\n        result = result +\
    \ (num as isize).pow(operation).unwrap();\n    };\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::iter`\n  --> /tmp/tmp2h5t6f9z.rs:20:9\n \
    \  |\n20 |     use std::iter;\n   |         ^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp2h5t6f9z.rs:21:9\n\
    \   |\n21 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2h5t6f9z.rs:24:35\n   |\n24 |     let mut op_iter:\
    \ Vec<isize> = operator;\n   |                      ----------   ^^^^^^^^ expected\
    \ `isize`, found struct `String`\n   |                      |\n   |          \
    \            expected due to this\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2h5t6f9z.rs:30:39\n   |\n30 |         let mut op_iter: Vec<isize>\
    \ = operator;\n   |                          ----------   ^^^^^^^^ expected `isize`,\
    \ found struct `String`\n   |                          |\n   |               \
    \           expected due to this\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<String>`\n\nerror[E0599]: no method named `push`\
    \ found for reference `&str` in the current scope\n  --> /tmp/tmp2h5t6f9z.rs:34:17\n\
    \   |\n34 |             ops.push(op);\n   |                 ^^^^ method not found\
    \ in `&str`\n\nerror[E0599]: no method named `push` found for reference `&str`\
    \ in the current scope\n  --> /tmp/tmp2h5t6f9z.rs:36:13\n   |\n36 |         ops.push(op);\n\
    \   |             ^^^^ method not found in `&str`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp2h5t6f9z.rs:37:9\n\
    \   |\n37 |         expression += ops;\n   |         ----------^^^^^^^\n   | \
    \        |\n   |         cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2h5t6f9z.rs:42:25\n   |\n42 |         result_vec.push(num);\n\
    \   |                         ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n42 |         result_vec.push(*num);\n\
    \   |                         +\n\nerror[E0368]: binary assignment operation `"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.is_superset(&[\"\
    +\", \"-\", \"*\", \"/\", \"**\"]));\n    assert!(operand.is_superset(&[1..]));\n\
    \n    let mut op = Vec::with_capacity(operator.len());\n    let mut operand =\
    \ Vec::with_capacity(operand.len());\n    \n    if operator.len() >= operand.len()\
    \ {\n        for _ in 0..operand.len() {\n            operand.push(isize::MAX);\n\
    \        }\n    }\n\n    for idx, i in operand.iter().enumerate() {\n        op.push(operator[idx\
    \ as usize]);\n    }\n\n    match operator.len() {\n        1 => {\n         \
    \   let mut result = operand.len() as isize;\n            for _ in 0..operand.len()\
    \ {\n                result += operand.len() as isize;\n            }\n      \
    \      result\n        }\n        _ => do_algebra(op, operand),\n    }\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpizxsgj94.rs:32:12\n   |\n\
    32 |     for idx, i in operand.iter().enumerate() {\n   |            ^\n   |\n\
    help: try adding parentheses to match on a tuple\n   |\n32 |     for (idx, i)\
    \ in operand.iter().enumerate() {\n   |         +      +\n\nerror[E0599]: no method\
    \ named `is_superset` found for struct `Vec<String>` in the current scope\n  -->\
    \ /tmp/tmpizxsgj94.rs:20:22\n   |\n20 |     assert!(operator.is_superset(&[\"\
    +\", \"-\", \"*\", \"/\", \"**\"]));\n   |                      ^^^^^^^^^^^ method\
    \ not found in `Vec<String>`\n\nerror[E0599]: no method named `is_superset` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpizxsgj94.rs:21:21\n\
    \   |\n21 |     assert!(operand.is_superset(&[1..]));\n   |                  \
    \   ^^^^^^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    do_algebra(operator,\
    \ operand, 1);\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n\
    \  --> /tmp/tmpzasbq7bl.rs:20:5\n   |\n20 |     do_algebra(operator, operand,\
    \ 1);\n   |     ^^^^^^^^^^ --------  -------  - supplied 3 arguments\n   |   \
    \  |\n   |     expected 2 arguments\n   |\nnote: function defined here\n  -->\
    \ /tmp/tmpzasbq7bl.rs:19:4\n   |\n19 | fn do_algebra(operator: Vec<String>, operand:\
    \ Vec<isize>) -> isize {\n   |    ^^^^^^^^^^ ---------------------  -------------------\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzasbq7bl.rs:19:62\n   |\n19 |\
    \ fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   | \
    \   ----------                                                ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n20 |     do_algebra(operator, operand, 1);\n   |   \
    \                                  - help: remove this semicolon\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut temp: Vec<isize> = Vec::new();\n    for operand_element in operand {\n \
    \       let operand_index = operand - &operand_element - 1;\n        temp.push(operand\
    \ [operand_index]);\n    }\n    \n    for operator in operator {\n        let\
    \ operator_index = operator - &operator[0] - 1;\n        temp.push(operator [operator_index]);\n\
    \    }\n\n    temp.reduce(|sum, _| sum)\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `&isize` from `Vec<isize>`\n  --> /tmp/tmp269lbl66.rs:22:37\n\
    \   |\n22 |         let operand_index = operand - &operand_element - 1;\n   |\
    \                             ------- ^ ---------------- &isize\n   |        \
    \                     |\n   |                             Vec<isize>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp269lbl66.rs:27:42\n\
    \   |\n27 |         let operator_index = operator - &operator[0] - 1;\n   |  \
    \                                        ^^^^^^^^^^^ `String` cannot be indexed\
    \ by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0369]: cannot subtract `&_` from `String`\n  --> /tmp/tmp269lbl66.rs:27:39\n\
    \   |\n27 |         let operator_index = operator - &operator[0] - 1;\n   |  \
    \                            -------- ^ ------------ &_\n   |                \
    \              |\n   |                              String\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmp269lbl66.rs:31:10\n    |\n31  |       temp.reduce(|sum,\
    \ _| sum)\n    |            ^^^^^^ `Vec<isize>` is not an iterator\n    |\n  \
    \  = note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    \n \
    \   let operator = operator.split('+').collect::<Vec<_>>();\n    let operand =\
    \ operand.iter().cloned().collect::<Vec<_>>();\n    \n    let mut expr = 0;\n\
    \    for i in 0..operand.len() {\n        let mut operands: Vec<_> = operand.split_at(i).collect();\n\
    \        let mut operators: Vec<_> = operator.split_at(i).collect();\n       \
    \ if operands.len() > 1 {\n            let mut new_operators = operators.clone();\n\
    \            let mut new_operands = operands.clone();\n            while new_operands.len()\
    \ > 1 {\n                let a = new_operands.remove(0);\n                let\
    \ b = new_operands.remove(0);\n                new_operators.push(\"+\".to_string());\n\
    \                new_operands.push(a.clone());\n                new_operands.push(b.clone());\n\
    \            }\n            new_operators.push(new_operators.last().to_string());\n\
    \            new_operands.push(operand.last().clone());\n            expr += &(*new_operators.iter().cloned())(&new_operands).unwrap_or(0);\n\
    \        }\n        else {\n            let a = operands.remove(0);\n        \
    \    expr += &(*operators.iter().cloned())(&a).unwrap_or(0);\n        }\n    }\n\
    \    expr\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(&String,)>` closure, found `char`\n  \
    \  --> /tmp/tmpaa7d5ic9.rs:21:35\n     |\n21   |     let operator = operator.split('+').collect::<Vec<_>>();\n\
    \     |                             ----- ^^^ expected an `FnMut<(&String,)>`\
    \ closure, found `char`\n     |                             |\n     |        \
    \                     required by a bound introduced by this call\n     |\n  \
    \   = help: the trait `for<'r> FnMut<(&'r String,)>` is not implemented for `char`\n\
    note: required by a bound in `core::slice::<impl [T]>::split`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `std::slice::Split<'_, String, char>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpaa7d5ic9.rs:21:40\n\
    \    |\n21  |       let operator = operator.split('+').collect::<Vec<_>>();\n\
    \    |                                          ^^^^^^^ method cannot be called\
    \ on `std::slice::Split<'_, String, char>` due to unsatisfied trait bounds\n \
    \   |\n    = note: the following trait bounds were not satisfied:\n          \
    \  `<char as FnOnce<(&String,)>>::Output = bool`\n            which is required\
    \ by `std::slice::Split<'_, String, char>: Iterator`\n            `char: FnMut<(&String,)>`\n\
    \            which is required by `std::slice::Split<'_, String, char>: Iterator`\n\
    \            `std::slice::Split<'_, String, char>: Iterator`\n            which\
    \ is required by `&mut std::slice::Split<'_, String, char>: Iterator`\n\nerror[E0599]:\
    \ `(&[isize], &[isize])` is not an iterator\n  --> /tmp/tmpaa7d5ic9.rs:26:56\n\
    \   |\n26 |         let mut operands: Vec<_> = operand.split_at(i).collect();\n\
    \   |                                                        ^^^^^^^ `(&[isize],\
    \ &[isize])` is not an iterator\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `(&[isize], &[isize]): Iterator`\n           which\
    \ is required by `&mut (&[isize], &[isize]): Iterator`\n\nerror[E0599]: the method\
    \ `to_string` exists for enum `Option<&String>`, but its trait bounds were not\
    \ satisfied\n   --> /tmp/tmpaa7d5ic9.rs:38:53\n    |\n38  |               new_operators.push(n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operand_length = operand.len() - 1;\n\n    let mut oper = Vec::with_capacity(operator.len());\n\
    \    let mut cur_oper: Option<Vec<isize>> = Some(operand.split_off(operand_length));\n\
    \n    for i in 0..operator.len() {\n        let op: isize = operator[i].parse().unwrap();\n\
    \        let a: isize = cur_oper.unwrap()[operand_length];\n        let b: isize\
    \ = cur_oper.unwrap()[operand_length + 1];\n\n        if oper == None {\n    \
    \        oper.push(op + a);\n            oper.push(op - b);\n        } else {\n\
    \            oper.push(op + a + b * oper[0]);\n            oper.push(op - b *\
    \ oper[0]);\n        }\n    }\n\n    oper.pop();\n    oper.pop();\n\n    oper.last().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<_>` with `Option<_>`\n  --> /tmp/tmp05erc8e1.rs:30:17\n\
    \   |\n30 |         if oper == None {\n   |                 ^^ no implementation\
    \ for `Vec<_> == Option<_>`\n   |\n   = help: the trait `PartialEq<Option<_>>`\
    \ is not implemented for `Vec<_>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05erc8e1.rs:42:5\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                        ----- expected `isize` because of return type\n...\n\
    42 |     oper.last().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n42 |  \
    \   *oper.last().unwrap()\n   |     +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator.len() {\n        0 => return 0\n        1 => return operand[0]\n  \
    \      2 => match operand[0].cmp(&operator[0]) {\n            Ordering::Less =>\
    \ return operand[0] + do_algebra(operator, operand.clone());\n            Ordering::Greater\
    \ => return operand[0] - do_algebra(operator, operand.clone());\n            Ordering::Equal\
    \ => panic!(\"invalid operator: operator '{}' equals operand '{}'\", operator[0],\
    \ operand[0]);\n        }\n        3 => match operand[0].cmp(&operator[0]) {\n\
    \            Ordering::Less => return operand[0] + do_algebra(operator, operand.clone());\n\
    \            Ordering::Greater => return operand[0] - do_algebra(operator, operand.clone());\n\
    \            Ordering::Equal => panic!(\"invalid operator: operator '{}' equals\
    \ operand '{}'\", operator[0], operand[0]);\n        }\n        4 => match operand[0].cmp(&operator[0])\
    \ {\n            Ordering::Less => return operand[0] + do_algebra(operator, operand.clone());\n\
    \            Ordering::Greater => return operand[0] - do_algebra(operator, operand.clone());\n\
    \            Ordering::Equal => panic!(\"invalid operator: operator '{}' equals\
    \ operand '{}'\", operator[0], operand[0]);\n        }\n        5 => match operand[0].cmp(&operator[0])\
    \ {\n            Ordering::Less => return operand[0] + do_algebra(operator, operand.clone());\n\
    \            Ordering::Greater => return operand[0] - do_algebra(operator, operand.clone());\n\
    \            Ordering::Equal => panic!(\"invalid operator: operator '{}' equals\
    \ operand '{}'\", operator[0], operand[0]);\n        }\n        _ => panic!(\"\
    invalid operator: vector length greater than 5\"),\n    }\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmp8a4t8le1.rs:22:9\n   |\n21 |         0 => return 0\n   |      \
    \     --         - expected one of `,`, `.`, `?`, `}`, or an operator\n   |  \
    \         |\n   |           while parsing the `match` arm starting here\n22 |\
    \         1 => return operand[0]\n   |         ^ unexpected token\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // check\
    \ input\n    assert!(operator.len() == operand.len()-1, \"invalid input vector\"\
    );\n\n    // calculate expression\n    let mut num: isize = 0;\n    for (x,y)\
    \ in zip(operator, operand) {\n        if x == \"*\" {\n            num = num\
    \ * y;\n        } else if x == \"+\" {\n            num = num + y;\n        }\
    \ else if x == \"-\" {\n            num = num - y;\n        } else if x == \"\
    //\" {\n            num = num / y;\n        } else if x == \"**\" {\n        \
    \    num = num ** y;\n        }\n    }\n    num\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `zip` in this scope\n  --> /tmp/tmpnk8xpu5i.rs:25:18\n\
    \   |\n25 |     for (x,y) in zip(operator, operand) {\n   |                  ^^^\
    \ not found in this scope\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::iter::zip;\n   |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => {\n                result += operand.clone();\n        \
    \    }\n            \"-\" => {\n                result = result - operand.clone();\n\
    \            }\n            \"*\" => {\n                result *= operand.clone();\n\
    \            }\n            \"//\" => {\n                result = result / operand.clone();\n\
    \            }\n            \"**\" => {\n                result **= operand.clone();\n\
    \            }\n            _ => {\n                return -1;\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpbh3x0wyq.rs:36:25\n\
    \   |\n36 |                 result **= operand.clone();\n   |                \
    \         ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbh3x0wyq.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbh3x0wyq.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbh3x0wyq.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbh3x0wyq.rs:32:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbh3x0wyq.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpbh3x0wyq.rs:24:17\n  \
    \ |\n24 |                 result += operand.clone();\n   |                 ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0369]: cannot subtract `Vec<isize>` from `Vec<isize>`\n  --> /tmp/tmpbh3x0wyq.rs:27:33\n\
    \   |\n27 |                 result = result - operand.clone();\n   |         \
    \                 ------ ^ --------------- Vec<isize>\n   |                  \
    \        |\n   |                          Vec<isize>\n\nerror[E0368]: binary assignment\
    \ operation `*=` cannot be applied to type `Vec<isi"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for (i, operator) in operator.iter().enumerate() {\n  \
    \      if i >= operand.len() {\n            return 0;\n        }\n        if operator\
    \ == \"+\"\n            || operator == \"-\"\n            || operator == \"*\"\
    \n            || operator == \"/\"\n            || operator == \"//\"\n      \
    \      || operator == \"**\" {\n            result += operand.as_ptr().unwrap();\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for raw pointer `*const isize`\
    \ in the current scope\n  --> /tmp/tmpaz06v5s4.rs:31:40\n   |\n31 |          \
    \   result += operand.as_ptr().unwrap();\n   |                               \
    \         ^^^^^^ method not found in `*const isize`\n   |\n   = note: try using\
    \ `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n\
    \   = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points\
    \ to invalid or uninitialized memory is undefined behavior\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ == operand.len() - 1);\n    operator.iter().fold(0, |acc, op| {\n        acc\
    \ + (operand[op.to_owned()] - operand[op.to_owned() + 1] as isize)\n    })\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `String`\n  --> /tmp/tmp93shpyav.rs:22:16\n\
    \   |\n22 |         acc + (operand[op.to_owned()] - operand[op.to_owned() + 1]\
    \ as isize)\n   |                ^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `String`\n   = note: required because of the requirements\
    \ on the impl of `Index<String>` for `Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp93shpyav.rs:22:65\n   |\n22 |         acc + (operand[op.to_owned()]\
    \ - operand[op.to_owned() + 1] as isize)\n   |                               \
    \                                  ^ expected `&str`, found integer\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `String`\n  --> /tmp/tmp93shpyav.rs:22:41\n\
    \   |\n22 |         acc + (operand[op.to_owned()] - operand[op.to_owned() + 1]\
    \ as isize)\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `String`\n   = note: required\
    \ because of the requirements on the impl of `Index<String>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operand.len()\
    \ == 0 {\n        println!(\"Vector has no elements!\");\n        return 0;\n\
    \    }\n    let mut res = operand.iter().sum();\n    for (i, &op) in operator.iter().enumerate()\
    \ {\n        let value = &operand[i - 1];\n        if let Some(mut v) = &mut res\
    \ {\n            v = v + op.parse::<i32>().unwrap() * (*value).powf(i as f64);\n\
    \        }\n    }\n    *res\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `Option<_>: Sum<&isize>` is not satisfied\n\
    \    --> /tmp/tmp06mhtg0h.rs:24:34\n     |\n24   |     let mut res = operand.iter().sum();\n\
    \     |                                  ^^^ the trait `Sum<&isize>` is not implemented\
    \ for `Option<_>`\n     |\n     = help: the trait `Sum<Option<U>>` is implemented\
    \ for `Option<T>`\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error[E0599]: no method named `powf` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp06mhtg0h.rs:28:59\n   |\n28 |             v = v + op.parse::<i32>().unwrap()\
    \ * (*value).powf(i as f64);\n   |                                           \
    \                ^^^^ help: there is an associated function with a similar name:\
    \ `pow`\n\nerror[E0614]: type `Option<_>` cannot be dereferenced\n  --> /tmp/tmp06mhtg0h.rs:31:5\n\
    \   |\n31 |     *res\n   |     ^^^^\n   |\nhelp: parentheses are required to parse\
    \ this as an expression\n   |\n25 ~     (for (i, &op) in operator.iter().enumerate()\
    \ {\n26 |         let value = &operand[i - 1];\n27 |         if let Some(mut v)\
    \ = &mut res {\n28 |             v = v + op.parse::<i32>().unwrap() * (*value).powf(i\
    \ as f64);\n29 |         }\n30 ~     })\n   |\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for (i, o) in operator.iter().zip(operand.iter()).zip(0..operand.len()\
    \ - 1) {\n        let operator = operator[i];\n        let operand = operand[o];\n\
    \        match operator.as_ref() {\n            Some(\"+\") => {\n           \
    \     result = result + operand;\n            }\n            Some(\"-\") => {\n\
    \                result = result - operand;\n            }\n            Some(\"\
    *\") => {\n                result = result * operand;\n            }\n       \
    \     Some(\"/\") => {\n                result = result / operand;\n         \
    \   }\n            Some(\"//\") => {\n                result = result // operand;\n\
    \            }\n            Some(\"**\") => {\n                result = result\
    \ ** operand;\n            }\n            _ => panic!(\"Unknown operation: {}\"\
    , operator),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[String]` cannot be indexed by `(&String, &isize)`\n\
    \  --> /tmp/tmp3ca5enm_.rs:22:24\n   |\n22 |         let operator = operator[i];\n\
    \   |                        ^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>` is not\
    \ implemented for `(&String, &isize)`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `(Bound<usize>, Bound<usize>)`\n   = note: required because\
    \ of the requirements on the impl of `Index<(&String, &isize)>` for `Vec<String>`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp3ca5enm_.rs:41:34\n\
    \   |\n41 |                 result = result ** operand;\n   |                \
    \                  ^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Calculate\
    \ the operator precedence in the expression by using the precedence table.\n \
    \   let precedence_table = Precedence::precedence(&operator);\n\n    // If there\
    \ is no such precedence in the precedence table, return 0.\n    if precedence_table.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut left = operand.clone();\n    let\
    \ mut right = operand.clone();\n\n    let mut result = operand.clone();\n\n  \
    \  // Move the left and right operands to the right.\n    while left.len() > 0\
    \ {\n        // Calculate the precedence of the current operator.\n        let\
    \ precedence = precedence_table[left.len() - 1];\n        let mut opr = '+';\n\
    \n        // Move the left operand to the right by repeatedly applying the current\
    \ operator.\n        while precedence_table[left.len() - 1] > precedence {\n \
    \           left.pop();\n            left.push(opr);\n        }\n\n        //\
    \ Move the right operand to the right by repeatedly applying the current operator.\n\
    \        while precedence_table[right.len() - 1] > precedence {\n            right.pop();\n\
    \            right.push(opr);\n        }\n\n        // Update the result. For\
    \ example, the expression \"2 + 3 * 4\" can be evaluated by applying \n      \
    \  // the two operators \"*\" and \"-\" repeatedly to the operands \"2\" and \"\
    3\".\n        let mut left_val = left.clone();\n        let mut right_val = right.clone();\n\
    \        while left_val.len() > 0 {\n            result.pop();\n            result.push(left_val.pop()\
    \ * right_val.pop());\n        }\n    }\n\n    // Reverse the result.\n    result.reverse();\n\
    \n    // Return the evaluated result.\n    result.len()\n}\n\nfn main() {\n  \
    \  let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Precedence`\n\
    \  --> /tmp/tmpa7qpq6o9.rs:21:28\n   |\n21 |     let precedence_table = Precedence::precedence(&operator);\n\
    \   |                            ^^^^^^^^^^ use of undeclared type `Precedence`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa7qpq6o9.rs:42:23\n   |\n42 |\
    \             left.push(opr);\n   |                       ^^^ expected `isize`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa7qpq6o9.rs:48:24\n\
    \   |\n48 |             right.push(opr);\n   |                        ^^^ expected\
    \ `isize`, found `char`\n\nerror[E0369]: cannot multiply `Option<isize>` by `Option<isize>`\n\
    \  --> /tmp/tmpa7qpq6o9.rs:57:40\n   |\n57 |             result.push(left_val.pop()\
    \ * right_val.pop());\n   |                         -------------- ^ ---------------\
    \ Option<isize>\n   |                         |\n   |                        \
    \ Option<isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa7qpq6o9.rs:65:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n65 |     result.len()\n   |     ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n65 |     result.len().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack = Vec::new();\n    stack.append(operator.to_owned());\n    for value\
    \ in &operand {\n        stack.append(value);\n        let mut last = 0;\n   \
    \     for symbol in &stack {\n            let mut sub = Vec::new();\n        \
    \    sub |= symbol[last..].to_owned();\n            sub = sub.iter().cloned().collect::<Vec<_>>();\n\
    \            let mut curr = Vec::new();\n            for element in &sub {\n \
    \               curr.push(element);\n            }\n            if curr.len()\
    \ > 1 {\n                last = stack.iter().position(|&x| x == symbol).unwrap()\
    \ as usize;\n            }\n        }\n    }\n    let mut result = 0;\n    for\
    \ (i, symbol) in stack.iter().enumerate() {\n        if symbol == 0 {\n      \
    \      result += i;\n        } else {\n            result += (i - last) * symbol;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `last` in this scope\n  --> /tmp/tmp4qsl8url.rs:43:28\n\
    \   |\n43 |             result += (i - last) * symbol;\n   |                 \
    \           ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4qsl8url.rs:21:18\n   |\n21 |     stack.append(operator.to_owned());\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^\n   |                  |\n   |    \
    \              expected `&mut Vec<_>`, found struct `Vec`\n   |              \
    \    help: consider mutably borrowing here: `&mut operator.to_owned()`\n   |\n\
    \   = note: expected mutable reference `&mut Vec<_>`\n                       \
    \  found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4qsl8url.rs:23:22\n\
    \   |\n23 |         stack.append(value);\n   |                      ^^^^^ types\
    \ differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n\
    \                      found reference `&isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = isize::MAX;\n    for &i in operator {\n        match i {\n    \
    \        \"+\" => {\n                let mut left = operand[0];\n            \
    \    let mut right = operand[1];\n                while right > 0 {\n        \
    \            left += right;\n                    right -= 1;\n               \
    \ }\n                result = left;\n            }\n            \"-\" => {\n \
    \               let mut left = operand[0];\n                let mut right = operand[1];\n\
    \                while right > 0 {\n                    left -= right;\n     \
    \               right -= 1;\n                }\n                result = left;\n\
    \            }\n            \"*\" => {\n                let mut left = operand[0];\n\
    \                let mut right = operand[1];\n                while right > 0\
    \ {\n                    left *= right;\n                    right -= 1;\n   \
    \             }\n                result = left;\n            }\n            \"\
    /\" => {\n                let mut left = operand[0];\n                let mut\
    \ right = operand[1];\n                while right > 0 {\n                   \
    \ left /= right;\n                    right -= 1;\n                }\n       \
    \         result = left;\n            }\n            \"**\" => {\n           \
    \     let mut left = operand[0];\n                let mut right = operand[1];\n\
    \                while right > 0 {\n                    left *= right;\n     \
    \               right -= 1;\n                }\n                result = left;\n\
    \            }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsy2x38sv.rs:21:9\n   |\n\
    21 |     for &i in operator {\n   |         ^^    -------- this expression has\
    \ type `Option<String>`\n   |         |\n   |         expected struct `String`,\
    \ found reference\n   |         help: you can probably remove the explicit borrow:\
    \ `i`\n   |\n   = note: expected struct `String`\n           found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator.len() {\n        0 => println!(\"The length of operator vector is zero\"\
    );\n        1 => {\n            let mut algebric_expr: Vec<isize> = operand.clone();\n\
    \            algebric_expr.push(0);\n            let result: isize = algebric_expr.iter().fold(0,\
    \ |result, value| {\n                match operator {\n                    vec![\"\
    +\", \"+\"] => result + value,\n                    vec![\"-\", \"+\"] => result\
    \ - value,\n                    vec![\"*\", \"*\"] => result * value,\n      \
    \              vec![\"/\", \"/\"] => result / value,\n                    vec![\"\
    //\", \"//\"] => result & value,\n                    vec![\"**\", \"**\"] =>\
    \ result ^ value,\n                }\n            });\n            result\n  \
    \      }\n        _ => {\n            let mut algebric_expr: Vec<isize> = operand.clone();\n\
    \            algebric_expr.push(0);\n            let mut left_operand: Vec<isize>\
    \ = algebric_expr.clone();\n            left_operand.push(0);\n            let\
    \ mut right_operand: Vec<isize> = algebric_expr.clone();\n            right_operand.push(0);\n\
    \            let mut result: isize = algebric_expr.iter().fold(0, |result, value|\
    \ {\n                match operator {\n                    vec![\"+\", \"+\"]\
    \ => result += value,\n                    vec![\"-\", \"+\"] => result -= value,\n\
    \                    vec![\"*\", \"*\"] => result *= value,\n                \
    \    vec![\"/\", \"/\"] => result /= value,\n                    vec![\"//\",\
    \ \"//\"] => result &= value,\n                    vec![\"**\", \"**\"] => result\
    \ ^= value,\n                }\n            });\n            algebric_expr.iter().fold(0,\
    \ |result, value| {\n                if value == 1 {\n                    if algebric_expr.len()\
    \ == 2 {\n                        right_operand.push(0);\n                   \
    \ } else {\n                        left_operand.push(0);\n                  \
    \  }\n                } else {\n                    match operator {\n       \
    \                 vec![\"+\", \"+\"] => result += (left_operand[0] + value),\n\
    \                        vec![\"-\", \"+\"] => result += (left_operand[0] - value),\n\
    \                        vec![\"*\", \"*\"] => result += (left_operand[0] * value),\n\
    \                        vec![\"/\", \"/\"] => result += (left_operand[0] / value),\n\
    \                        vec![\"//\", \"//\"] => result += (left_operand[0] &\
    \ value),\n                        vec![\"**\", \"**\"] => result += (left_\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_96m9elr.rs:76:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n20 |     match operator.len() {\n   |                  \
    \        - unclosed delimiter\n...\n37 |         _ => {\n   |              - unclosed\
    \ delimiter\n...\n54 |             algebric_expr.iter().fold(0, |result, value|\
    \ {\n   |                                      -                   - unclosed\
    \ delimiter\n   |                                      |\n   |               \
    \                       unclosed delimiter\n...\n61 |                 } else {\n\
    \   |                        - unclosed delimiter\n62 |                     match\
    \ operator {\n   |                                    - this delimiter might not\
    \ be properly closed...\n...\n69 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n76 | }\n   |   ^\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmp_96m9elr.rs:68:55\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                              - closing delimiter possibly meant for this\n...\n\
    68 |                         vec![\"**\", \"**\"] => result += (left_\n   |  \
    \                                                     ^ unclosed delimiter\n69\
    \ | }\n   | ^ mismatched closing delimiter\n\nerror: `match` arm body without\
    \ braces\n  --> /tmp/tmp_96m9elr.rs:21:14\n   |\n21 |         0 => println!(\"\
    The length of operator vector is zero\");\n   |           -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: use a comma to end a `match` arm expression: `,`\n   |           |  |\n\
    \   |           |  this statement is not surrounded by a body\n   |          \
    \ while parsing the `match` arm starting here\n\nerror[E0425]: cannot find value\
    \ `left_` in this scope\n  --> /tmp/tmp_96m9elr.rs:68:56\n   |\n68 |         \
    \                vec![\"**\", \"**\"] => result += (left_\n   |              \
    \                                        "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expression: Vec<isize> = vec![];\n    let mut nums: Vec<isize> = vec![];\n\
    \    for op in operator {\n        expression.push(op.len());\n        \n    \
    \    for v in operand {\n            expression.push(v * op);\n        }\n   \
    \ }\n    expression.push(0);\n    let mut power: Vec<isize> = vec![];\n    power\
    \ = nums.iter().fold(vec![], |mut a, n| {\n        if n != 0 {\n            let\
    \ mut res = vec![];\n            res.push(1);\n            for _ in 0..n {\n \
    \               let p = 1;\n                for _ in 0..(n - 1) {\n          \
    \          let power = power.iter().fold(p, |mut a, e| a + e);\n             \
    \       if power == 0 {\n                        res.push(1)\n               \
    \     } else {\n                        res.push(p * power);\n               \
    \     }\n                }\n            }\n            a.push(res);\n        }\n\
    \        a\n    });\n    let mut result = vec![];\n    for i in 0..expression.len()\
    \ {\n        let mut res = expression[i];\n        for j in i..expression.len()\
    \ {\n            \n            res = res * power[j] / nums.iter().fold(1, |a,\
    \ b| a * b + a);\n        }\n        result.push(res);\n    }\n    \n    result.iter().fold(0,\
    \ |a, b| a + b)\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkx3xi1en.rs:23:25\n   |\n\
    23 |         expression.push(op.len());\n   |                         ^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n23 |         expression.push(op.len().try_into().unwrap());\n\
    \   |                                 ++++++++++++++++++++\n\nerror[E0277]: cannot\
    \ multiply `isize` by `String`\n  --> /tmp/tmpkx3xi1en.rs:26:31\n   |\n26 |  \
    \           expression.push(v * op);\n   |                               ^ no\
    \ implementation for `isize * String`\n   |\n   = help: the trait `Mul<String>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpkx3xi1en.rs:32:14\n   |\n32 |         if n != 0 {\n   |       \
    \       ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkx3xi1en.rs:35:25\n   |\n35 |             for\
    \ _ in 0..n {\n   |                         ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n35 |             for _ in\
    \ 0..*n {\n   |                         +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkx3xi1en.rs:46:20\n   |\n46 |             a.push(res);\n   |  \
    \                  ^^^ expected `isize`, found struct `Vec`\n   |\n   = note:\
    \ expected type `isize`\n            found str"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    let operators = operator.size();\n \
    \   for i in 0..operators {\n        let operator_symbol = operator[i];\n    \
    \    let symbol = symbols::find(|&s| &s == operator_symbol).unwrap();\n      \
    \  let symbol_value = symbols::get(&symbol).unwrap();\n        result *= symbol_value;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `symbols`\n\
    \  --> /tmp/tmpwfarq7z2.rs:24:22\n   |\n24 |         let symbol = symbols::find(|&s|\
    \ &s == operator_symbol).unwrap();\n   |                      ^^^^^^^ use of undeclared\
    \ crate or module `symbols`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `symbols`\n  --> /tmp/tmpwfarq7z2.rs:25:28\n   |\n25 |     \
    \    let symbol_value = symbols::get(&symbol).unwrap();\n   |                \
    \            ^^^^^^^ use of undeclared crate or module `symbols`\n\nerror[E0599]:\
    \ no method named `size` found for struct `Vec<String>` in the current scope\n\
    \  --> /tmp/tmpwfarq7z2.rs:21:30\n   |\n21 |     let operators = operator.size();\n\
    \   |                              ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n  --> /tmp/tmpwfarq7z2.rs:24:38\n   |\n\
    24 |         let symbol = symbols::find(|&s| &s == operator_symbol).unwrap();\n\
    \   |                                      ^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n   = note: all\
    \ local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ implement the basic algebra operation using two given vectors\n    let mut result:\
    \ isize = 0;\n\n    // TODO: use the two given vectors to construct an algebraic\
    \ expression\n    // TODO: evaluate the algebraic expression\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `37`', /tmp/tmpf4uueg1f.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operator\n\
    \        .iter()\n        .zip(operand.iter())\n        .filter_map(|&(op, &d)|\
    \ {\n            if !op.contains(\"*\") {\n                if op == \"+\"\n  \
    \              || op == \"-\"\n                || op == \"//\"\n             \
    \   || op == \"**\"\n                {\n                    return Some(d);\n\
    \                }\n            }\n            None\n        })\n        .flatten()\n\
    \        .fold(0, |acc, &op| {\n            match op.to_ascii_lowercase() {\n\
    \                \"add\" => acc + d,\n                \"sub\" => acc - d,\n  \
    \              \"mul\" => acc * d,\n                \"floor\" => acc / d,\n  \
    \              \"pow\" => {\n                    let d = std::i32::pow(d);\n \
    \                   acc ^ d\n                }\n                \"exp\" => acc\
    \ ** d,\n                _ => 0\n            }\n        })\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmprerc6bop.rs:38:32\n\
    \   |\n38 |                 \"add\" => acc + d,\n   |                        \
    \        ^ not found in this scope\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmprerc6bop.rs:39:32\n   |\n39 |                 \"sub\" =>\
    \ acc - d,\n   |                                ^ not found in this scope\n\n\
    error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmprerc6bop.rs:40:32\n\
    \   |\n40 |                 \"mul\" => acc * d,\n   |                        \
    \        ^ not found in this scope\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmprerc6bop.rs:41:34\n   |\n41 |                 \"floor\"\
    \ => acc / d,\n   |                                  ^ not found in this scope\n\
    \nerror[E0425]: cannot find function `pow` in module `std::i32`\n  --> /tmp/tmprerc6bop.rs:43:39\n\
    \   |\n43 |                     let d = std::i32::pow(d);\n   |              \
    \                         ^^^ not found in `std::i32`\n\nerror[E0425]: cannot\
    \ find value `d` in this scope\n  --> /tmp/tmprerc6bop.rs:43:43\n   |\n43 |  \
    \                   let d = std::i32::pow(d);\n   |                          \
    \                 ^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `d` in this scope\n  --> /tmp/tmprerc6bop.rs:46:33\n   |\n46 |             \
    \    \"exp\" => acc ** d,\n   |                                 ^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprerc6bop.rs:23:22\n\
    \   |\n23 |         .filter_map(|&(op, &d)| {\n   |                      ^^^^^^^^-\n\
    \   |                      |       |\n   |                      |       expected\
    \ due to this\n   |                      expected tuple, found reference\n   |\n\
    \   = note:  expected tuple `(&String, &isize)`\n           found reference `&_`\n\
    \nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for op in operator {\n        match op {\n   \
    \         \"+\" => result += operand[1],\n            \"-\" => result -= operand[1],\n\
    \            \"*\" => result *= operand[1],\n            \"//\" => result = result\
    \ as f32 // operand[1],\n            \"**\" => result = result as f32 ** operand[1],\n\
    \            _ => unimplemented!(),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `,`, `.`, `::`, `<`, `?`, or `}`, found\
    \ `\"**\"`\n  --> /tmp/tmpae_5qac_.rs:27:13\n   |\n26 |             \"//\" =>\
    \ result = result as f32 // operand[1],\n   |                  --            \
    \           - expected one of 8 possible tokens\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n27 |         \
    \    \"**\" => result = result as f32 ** operand[1],\n   |             ^^^^ unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpae_5qac_.rs:23:13\n \
    \  |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[1],\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpae_5qac_.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand[1],\n24 |             \"-\" => result -= operand[1],\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpae_5qac_.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result *= operand[1],\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ Implement this function\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp31_xk07c.rs:21:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Do\
    \ the calculation.\n    let mut result = operand.iter().fold(0, |sum, operand|\
    \ {\n        match operator.get(0) {\n            \"+\" => sum + operand,\n  \
    \          \"-\" => sum - operand,\n            \"*\" => sum * operand,\n    \
    \        \"//\" => sum / operand,\n            \"**\" => sum ** operand,\n   \
    \         _ => unreachable!(),\n        }\n    });\n    debug_assert_eq!(operator.get(0),\
    \ \"*\");\n    debug_assert_eq!(operator.get(1), \"**\");\n    debug_assert_eq!(operator.get(2),\
    \ \"**\");\n    debug_assert_eq!(operator.get(3), \"**\");\n    debug_assert_eq!(operator.get(4),\
    \ \"+\");\n    debug_assert_eq!(operator.get(5), \"-\");\n    debug_assert_eq!(operator.get(6),\
    \ \"*\");\n    debug_assert_eq!(operator.get(7), \"//\");\n    // Deal with the\
    \ case where the last operator is '*', it needs to be replaced by '**'\n    if\
    \ &operator.get(4) == \"*\" {\n        let index = operator.len() - 1;\n     \
    \   // Calculate the exponent part of this expression, then apply it to the result\
    \ and return.\n        let exponent = if index < 2 {\n            operand.get(index)\n\
    \        } else if index < 5 {\n            operand.get(index - 2)\n        }\
    \ else {\n            operand.get(index - 5)\n        };\n        result = result\
    \ * (std::pow((-exponent), -exponent));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in crate `std`\n  --> /tmp/tmpnh1xxkp7.rs:50:33\n\
    \   |\n50 |         result = result * (std::pow((-exponent), -exponent));\n  \
    \ |                                 ^^^ not found in `std`\n\nwarning: unnecessary\
    \ parentheses around function argument\n  --> /tmp/tmpnh1xxkp7.rs:50:37\n   |\n\
    50 |         result = result * (std::pow((-exponent), -exponent));\n   |     \
    \                                ^         ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n50 -         result = result\
    \ * (std::pow((-exponent), -exponent));\n50 +         result = result * (std::pow(-exponent,\
    \ -exponent));\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnh1xxkp7.rs:23:13\n\
    \   |\n22 |         match operator.get(0) {\n   |               ---------------\
    \ this expression has type `Option<&String>`\n23 |             \"+\" => sum +\
    \ operand,\n   |             ^^^ expected enum `Option`, found `&str`\n   |\n\
    \   = note:   expected enum `Option<&String>`\n           found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnh1xxkp7.rs:24:13\n  \
    \ |\n22 |         match operator.get(0) {\n   |               ---------------\
    \ this expression has type `Option<&String>`\n23 |             \"+\" => sum +\
    \ operand,\n24 |             \"-\" => sum - operand,\n   |             ^^^ expected\
    \ enum `Option`, found `&str`\n   |\n   = note:   expected enum `Option<&String>`\n\
    \           found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnh1xxkp7.rs:25:13\n   |\n22 |         match operator.get(0) {\n\
    \   |               --------------- this expression has type `Option<&String>`\n\
    ...\n25 |             \"*\" => sum * operand,\n   |             ^^^ expected enum\
    \ `Option`, found `&str`\n   |\n   = note:   expected enum `Option<&String>`\n\
    \           found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnh1xxkp7.rs:26:13\n   |\n22 |         match operator.get(0) {\n\
    \   |               --------------- this expression has type `Option<&String>`\n\
    ...\n26 |             \"//\" => sum / op"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.len() - 1;\n    for element in operator {\n        match\
    \ element {\n            \"+\" => result += operand[result],\n            \"-\"\
    \ => result -= operand[result],\n            \"*\" => result *= operand[result],\n\
    \            \"/\" => result /= operand[result],\n            \"//\" => result\
    \ //= operand[result],\n            \"**\" => result **= operand[result],\n  \
    \          _ => {\n                return Err(format!(\"Wrong operator '{}'!\"\
    , element));\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmp21dn6d3o.rs:28:13\n   |\n27 |             \"//\"\
    \ => result //= operand[result],\n   |                  --       - expected one\
    \ of 8 possible tokens\n   |                  |\n   |                  while parsing\
    \ the `match` arm starting here\n28 |             \"**\" => result **= operand[result],\n\
    \   |             ^^^^ unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp21dn6d3o.rs:23:13\n   |\n22 |         match element {\n   |        \
    \       ------- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand[result],\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp21dn6d3o.rs:24:13\n   |\n22 |\
    \         match element {\n   |               ------- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand[result],\n24 |       \
    \      \"-\" => result -= operand[result],\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp21dn6d3o.rs:25:13\n\
    \   |\n22 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n25 |             \"*\" => result *= operand[result],\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp21dn6d3o.rs:26:13\n   |\n22 |         match\
    \ element {\n   |               ------- this expression has type `String`\n...\n\
    26 |             \"/\" => result /= operand[result],\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp21dn6d3o.rs:23:30\n\
    \   |\n23 |             \"+\" => result += operand[result],\n   |            \
    \                  ^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmp21dn6d3o.rs:23:27\n   |\n\
    23 |             \"+\" => result += operand[result],\n   |                   \
    \        ^^ no implementation for `usize += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // We\
    \ are using Vec::iter iterator over the two vectors to get pairs of elements from\
    \ them \n    // and using the first element as operator and the second element\
    \ as operand \n    for &(operator, operand) in operand.iter().zip(operator.iter())\
    \ {\n        match operator {\n            \"+\" => return operand + operand,\n\
    \            \"-\" => return operand - operand,\n            \"*\" => return operand\
    \ * operand,\n            \"//\" => return operand / operand,\n            \"\
    **\" => return operand.pow(operand),\n            _ => panic!(\"Invalid operator\
    \ in vector\")\n        }\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjcp2eh7_.rs:22:9\n   |\n\
    22 |     for &(operator, operand) in operand.iter().zip(operator.iter()) {\n \
    \  |         ^^^^^^^^^^^^^^^^^^^^    ----------------------------------- this\
    \ expression has type `Option<(&isize, &String)>`\n   |         |\n   |      \
    \   expected tuple, found reference\n   |\n   = note:  expected tuple `(&isize,\
    \ &String)`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjcp2eh7_.rs:22:5\n   |\n19 |   fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                          ----- expected `isize` because of return type\n...\n\
    22 | /     for &(operator, operand) in operand.iter().zip(operator.iter()) {\n\
    23 | |         match operator {\n24 | |             \"+\" => return operand +\
    \ operand,\n25 | |             \"-\" => return operand - operand,\n...  |\n30\
    \ | |         }\n31 | |     }\n   | |_____^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ == operand.len() - 1);\n    \n    let mut result = operand.len() as isize;\n\
    \    for index, op in operator.iter().enumerate() {\n        match op {\n    \
    \        \"*\" => result *= operand[index],\n            \"/\" => result /= operand[index],\n\
    \            \"+\" => result += operand[index],\n            \"-\" => result -=\
    \ operand[index],\n            _ => panic!(\"Unsupported operator: {}\", op),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpy0ntor3q.rs:23:14\n   |\n\
    23 |     for index, op in operator.iter().enumerate() {\n   |              ^\n\
    \   |\nhelp: try adding parentheses to match on a tuple\n   |\n23 |     for (index,\
    \ op) in operator.iter().enumerate() {\n   |         +         +\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..operand.len() {\n        match operator[i]\
    \ {\n            \"+\" => {\n                result = result + operand[i];\n \
    \           }\n            \"-\" => {\n                result = result - operand[i];\n\
    \            }\n            \"*\" => {\n                result = result * operand[i];\n\
    \            }\n            \"/\" => {\n                result = result / operand[i];\n\
    \            }\n            \"//\" => {\n                result = result / operand[i];\n\
    \            }\n            \"**\" => {\n                result = result * operand[i];\n\
    \            }\n            _ => panic!(\"Operator is invalid\");\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: `match` arm body without braces\n  --> /tmp/tmpx024__jf.rs:41:18\n\
    \   |\n41 |             _ => panic!(\"Operator is invalid\");\n   |          \
    \     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match` arm\
    \ expression: `,`\n   |               |  |\n   |               |  this statement\
    \ is not surrounded by a body\n   |               while parsing the `match` arm\
    \ starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx024__jf.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ std::cmp::Ordering;\n    use std::cmp::Ordering::*;\n    use std::cmp::PartialOrd;\n\
    \    use std::cmp::PartialOrd::*;\n\n    let mut expr = 0;\n    let mut i = 0;\n\
    \    while i < operator.len() && i < operand.len() {\n        match operator[i].as_ref()\
    \ {\n            \"+\" => expr += operand[i] - operand[i-1],\n            \"-\"\
    \ => expr -= operand[i] - operand[i-1],\n            \"*\" => expr *= operand[i]\
    \ - operand[i-1],\n            \"/\" => expr /= operand[i] - operand[i-1],\n \
    \           \"//\" => expr /= operand[i] / operand[i-1],\n            \"**\" =>\
    \ expr *= operand[i] as i64,\n            _ => return expr,\n        }\n     \
    \   i += 1;\n    }\n    expr\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: items in traits are not importable\n  --> /tmp/tmp2od6h876.rs:23:9\n\
    \   |\n23 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp2od6h876.rs:20:9\n\
    \   |\n20 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import:\
    \ `std::cmp::Ordering::*`\n  --> /tmp/tmp2od6h876.rs:21:9\n   |\n21 |     use\
    \ std::cmp::Ordering::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the item\
    \ `PartialOrd` is imported redundantly\n   --> /tmp/tmp2od6h876.rs:22:9\n    |\n\
    22  |     use std::cmp::PartialOrd;\n    |         ^^^^^^^^^^^^^^^^^^^^\n\nwarning:\
    \ unused import: `std::cmp::PartialOrd`\n  --> /tmp/tmp2od6h876.rs:22:9\n   |\n\
    22 |     use std::cmp::PartialOrd;\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nwarning:\
    \ unused import: `std::cmp::PartialOrd::*`\n  --> /tmp/tmp2od6h876.rs:23:9\n \
    \  |\n23 |     use std::cmp::PartialOrd::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2od6h876.rs:34:29\n   |\n34 |\
    \             \"**\" => expr *= operand[i] as i64,\n   |                     \
    \        ^^^^^^^^^^^^^^^^^ expected `isize`, found `i64`\n\nerror[E0277]: cannot\
    \ multiply-assign `isize` by `i64`\n  --> /tmp/tmp2od6h876.rs:34:26\n   |\n34\
    \ |             \"**\" => expr *= operand[i] as i64,\n   |                   \
    \       ^^ no implementation for `isize *= i64`\n   |\n   = help: the trait `MulAssign<i64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `MulAssign<Rhs>`:\n             <f32 as MulAssign<&f32>>\n           \
    \  <f32 as MulAssign>\n             <f64 as MulAssign<&f64>>\n             <f64\
    \ as MulAssign>\n             <i128 as MulAssign<&i128>>\n             <i128 as\
    \ MulAssign>\n             <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors; 5 warnings\
    \ emitted\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ op = operator.to_vec();\n    let operand = operand.to_vec();\n    let mut result\
    \ = operand[0].clone();\n    for x in operand.iter().skip(1) {\n        result\
    \ = op[0] + (&result) * x;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwiycsvl4.rs:24:26\n   |\n\
    24 |         result = op[0] + (&result) * x;\n   |                          ^^^^^^^^^^^^^\
    \ expected `&str`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwiycsvl4.rs:24:18\n\
    \   |\n22 |     let mut result = operand[0].clone();\n   |                   \
    \   ------------------ expected due to this value\n23 |     for x in operand.iter().skip(1)\
    \ {\n24 |         result = op[0] + (&result) * x;\n   |                  ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator.len() {\n        0 => 0\n        1 => {\n            let op = operator[0];\n\
    \            let num = operand.first();\n            if op == \"+\" {\n      \
    \          num + operand.last()\n            }\n            else if op == \"*\"\
    \ {\n                num * operand.last()\n            }\n            else if\
    \ op == \"-\" {\n                num - operand.last()\n            }\n       \
    \     else if op == \"/\" {\n                num / operand.last()\n          \
    \  }\n            else if op == \"%\" {\n                num % operand.last()\n\
    \            }\n            else if op == \"^\" {\n                num ** operand.last()\n\
    \            }\n            else if op == \"//\" {\n                num // operand.last()\n\
    \            }\n            else if op == \"**\" {\n                num ** operand.last()\n\
    \            }\n            else {\n                panic!(\"Unknow operator\"\
    )\n            }\n        }\n        2 => {\n            let op = operator[0];\n\
    \            let op = operator[1];\n            let num = operand.first();\n \
    \           if op == \"+\" {\n                num + operand.last()\n         \
    \   }\n            else if op == \"*\" {\n                num * operand.last()\n\
    \            }\n            else if op == \"-\" {\n                num - operand.last()\n\
    \            }\n            else if op == \"/\" {\n                num / operand.last()\n\
    \            }\n            else if op == \"%\" {\n                num % operand.last()\n\
    \            }\n            else if op == \"^\" {\n                num ** operand.last()\n\
    \            }\n            else if op == \"//\" {\n                num // operand.last()\n\
    \            }\n            else if op == \"**\" {\n                num ** operand.last()\n\
    \            }\n            else {\n                panic!(\"Unknow operator\"\
    )\n            }\n        }\n        3 => {\n            let op = operator[0];\n\
    \            let op = operator[1];\n            let op = operator[2];\n      \
    \      let num = operand.first();\n            if op == \"+\" {\n            \
    \    num + operand.last()\n            }\n            else if op == \"*\" {\n\
    \                num * operand.last()\n            }\n            else if op ==\
    \ \"-\" {\n                num - operand.last()\n            }\n            else\
    \ if op == \"/\" {\n                num / operand.last()\n            }\n    \
    \        else if op == \"%\" {\n                num % operand.last()\n       \
    \     }\n            else if op == \"^\" {\n                num ** operand.last()\n\
    \            }\n            else if op == \"//\" {\n                num // operand.last()\n\
    \n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4dnfbf8g.rs:118:3\n\
    \    |\n19  | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n    |                                                                   \
    \ - unclosed delimiter\n20  |     match operator.len() {\n    |              \
    \            - unclosed delimiter\n...\n85  |         3 => {\n    |          \
    \    - unclosed delimiter\n...\n108 |             else if op == \"//\" {\n   \
    \ |                                - this delimiter might not be properly closed...\n\
    ...\n111 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n118 | }\n    |   ^\n\nerror: expected one of `,`, `.`, `?`, `}`, or an operator,\
    \ found `1`\n  --> /tmp/tmp4dnfbf8g.rs:19:68\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                           ^ unclosed delimiter\n20 |     match\
    \ operator.len() {\n21 |         0 => 0\n   |           --  -\n   |          \
    \ |   |\n   |           |   expected one of `,`, `.`, `?`, `}`, or an operator\n\
    \   |           |   help: `}` may belong here\n   |           while parsing the\
    \ `match` arm starting here\n22 |         1 => {\n   |         ^ unexpected token\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator.pop() {\n        Some(op) => match op {\n            \"+\" => operand.pop()\
    \ + operand.pop(),\n            \"-\" => operand.pop() - operand.pop(),\n    \
    \        \"*\" => operand.pop() * operand.pop(),\n            \"//\" => operand.pop()\
    \ // operand.pop(),\n            \"**\" => operand.pop() ** operand.pop(),\n \
    \           _ => panic!(\"Wrong operator\"),\n        },\n        _ => panic!(\"\
    Wrong operator\"),\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `\"**\"\
    `\n  --> /tmp/tmptn310yug.rs:26:13\n   |\n25 |             \"//\" => operand.pop()\
    \ // operand.pop(),\n   |                  --              - expected one of `,`,\
    \ `.`, `?`, `}`, or an operator\n   |                  |\n   |               \
    \   while parsing the `match` arm starting here\n26 |             \"**\" => operand.pop()\
    \ ** operand.pop(),\n   |             ^^^^ unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptn310yug.rs:22:13\n   |\n21 |         Some(op) => match\
    \ op {\n   |                           -- this expression has type `String`\n\
    22 |             \"+\" => operand.pop() + operand.pop(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptn310yug.rs:23:13\n   |\n21 |         Some(op) => match op {\n \
    \  |                           -- this expression has type `String`\n22 |    \
    \         \"+\" => operand.pop() + operand.pop(),\n23 |             \"-\" => operand.pop()\
    \ - operand.pop(),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn310yug.rs:24:13\n   |\n21 |\
    \         Some(op) => match op {\n   |                           -- this expression\
    \ has type `String`\n...\n24 |             \"*\" => operand.pop() * operand.pop(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0369]:\
    \ cannot add `Option<isize>` to `Option<isize>`\n  --> /tmp/tmptn310yug.rs:22:34\n\
    \   |\n22 |             \"+\" => operand.pop() + operand.pop(),\n   |        \
    \            ------------- ^ ------------- Option<isize>\n   |               \
    \     |\n   |                    Option<isize>\n\nerror[E0369]: cannot subtract\
    \ `Option<isize>` from `Option<isize>`\n  --> /tmp/tmptn310yug.rs:23:34\n   |\n\
    23 |             \"-\" => operand.pop() - operand.pop(),\n   |               \
    \     ------------- ^ ------------- Option<isize>\n   |                    |\n\
    \   |                    Option<isize>\n\nerror[E0369]: cannot multiply `Option<isize>`\
    \ by `Option<isize>`\n  --> /tmp/tmptn310yug.rs:24:34\n   |\n24"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = 0;\n    for op in operator {\n        let mut ops = match *op {\n\
    \            \"+\" => op_plus, \n            \"-\" => op_minus,\n            \"\
    *\" => op_times,\n            \"//\" => op_floor,\n            \"**\" => op_pow,\n\
    \            _ => return -1,\n        };\n        match operand.len() {\n    \
    \        1 => {\n                ops(operand[0]);\n                res = res +\
    \ operand[0];\n            }\n            2 => {\n                ops(operand[0],\
    \ operand[1]);\n                res = res + operand[0] * operand[1];\n       \
    \     }\n            _ => {\n                return -1;\n            }\n     \
    \   }\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `op_plus` in this scope\n  --> /tmp/tmp4yh3jt0j.rs:23:20\n\
    \   |\n23 |             \"+\" => op_plus, \n   |                    ^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `op_minus` in this scope\n\
    \  --> /tmp/tmp4yh3jt0j.rs:24:20\n   |\n24 |             \"-\" => op_minus,\n\
    \   |                    ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `op_times` in this scope\n  --> /tmp/tmp4yh3jt0j.rs:25:20\n   |\n\
    25 |             \"*\" => op_times,\n   |                    ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `op_floor` in this scope\n\
    \  --> /tmp/tmp4yh3jt0j.rs:26:21\n   |\n26 |             \"//\" => op_floor,\n\
    \   |                     ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `op_pow` in this scope\n  --> /tmp/tmp4yh3jt0j.rs:27:21\n   |\n27\
    \ |             \"**\" => op_pow,\n   |                     ^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4yh3jt0j.rs:23:13\n\
    \   |\n22 |         let mut ops = match *op {\n   |                          \
    \   --- this expression has type `str`\n23 |             \"+\" => op_plus, \n\
    \   |             ^^^ expected `str`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4yh3jt0j.rs:24:13\n   |\n22 |         let mut ops = match\
    \ *op {\n   |                             --- this expression has type `str`\n\
    23 |             \"+\" => op_plus, \n24 |             \"-\" => op_minus,\n   |\
    \             ^^^ expected `str`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4yh3jt0j.rs:25:13\n   |\n22 |         let mut ops = match *op {\n\
    \   |                             --- this expression has type `str`\n...\n25\
    \ |             \"*\" => op_times,\n   |             ^^^ expected `str`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4yh3jt0j.rs:26:13\n\
    \   |\n22 |         let mut ops = match *op {\n   |                          \
    \   --- this expression has type `str`\n...\n26 |             \"//\" => op_floor,\n\
    \   |             ^^^^ expected `str`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0].clone() as isize;\n    let mut count = 1;\n    for i\
    \ in &operand[1..] {\n        let mut oper = operator[count..].clone();\n    \
    \    match oper {\n            0 => result = result + i[..],\n            1 =>\
    \ result = result - i[..],\n            2 => result = result * i[..],\n      \
    \      3 => result = result // i[..],\n            4 => result = result ** i[..],\n\
    \            _ => break\n        }\n        count = count + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `4`\n  --> /tmp/tmp3c7lqvjc.rs:29:13\n   |\n28 |             3 => result\
    \ = result // i[..],\n   |               --                - expected one of 8\
    \ possible tokens\n   |               |\n   |               while parsing the\
    \ `match` arm starting here\n29 |             4 => result = result ** i[..],\n\
    \   |             ^ unexpected token\n\nerror[E0599]: no method named `clone`\
    \ found for slice `[String]` in the current scope\n  --> /tmp/tmp3c7lqvjc.rs:23:42\n\
    \   |\n23 |         let mut oper = operator[count..].clone();\n   |          \
    \                                ^^^^^ method not found in `[String]`\n\nerror[E0608]:\
    \ cannot index into a value of type `&isize`\n  --> /tmp/tmp3c7lqvjc.rs:25:36\n\
    \   |\n25 |             0 => result = result + i[..],\n   |                  \
    \                  ^^^^^\n\nerror[E0608]: cannot index into a value of type `&isize`\n\
    \  --> /tmp/tmp3c7lqvjc.rs:26:36\n   |\n26 |             1 => result = result\
    \ - i[..],\n   |                                    ^^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `&isize`\n  --> /tmp/tmp3c7lqvjc.rs:27:36\n   |\n\
    27 |             2 => result = result * i[..],\n   |                         \
    \           ^^^^^\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // if\
    \ lengths of vectors are not equal, that means the operator is invalid.\n    if\
    \ operator.len() != operand.len() {\n        panic!(\"Wrong length of operator\
    \ vector or operand vector.\");\n    }\n\n    // for each operator in operator\
    \ vector, evaluate the result.\n    for e in operator.iter().cloned() {\n    \
    \    let result = if let Some(x) = operand.iter().find(|x| *x == e).cloned() {\n\
    \            match e {\n                \"+\" => x + x,\n                \"-\"\
    \ => x - x,\n                \"*\" => x * x,\n                \"/\" => x / x,\n\
    \                \"//\" => x // x,\n                \"**\" => pow(x, x),\n   \
    \             _ => panic!(\"Wrong operator in operator vector: {}\", e),\n   \
    \         }\n        } else {\n            panic!(\"Wrong operator in operator\
    \ vector: {}\", e);\n        }\n        *result = result;\n    }\n\n    // return\
    \ the evaluated result.\n    operand.iter().cloned().reduce(|x, y| x + y)\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmpx2vrn_ys.rs:34:17\n   |\n33 |                \
    \ \"//\" => x // x,\n   |                      --  - expected one of 8 possible\
    \ tokens\n   |                      |\n   |                      while parsing\
    \ the `match` arm starting here\n34 |                 \"**\" => pow(x, x),\n \
    \  |                 ^^^^ unexpected token\n\nerror[E0425]: cannot find value\
    \ `result` in this scope\n  --> /tmp/tmpx2vrn_ys.rs:40:10\n   |\n40 |        \
    \ *result = result;\n   |          ^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `result` in this scope\n  --> /tmp/tmpx2vrn_ys.rs:40:19\n\
    \   |\n40 |         *result = result;\n   |                   ^^^^^^ not found\
    \ in this scope\n\nerror[E0070]: invalid left-hand side of assignment\n  --> /tmp/tmpx2vrn_ys.rs:40:17\n\
    \   |\n27 |           let result = if let Some(x) = operand.iter().find(|x| *x\
    \ == e).cloned() {\n   |  ______________________-\n28 | |             match e\
    \ {\n29 | |                 \"+\" => x + x,\n30 | |                 \"-\" => x\
    \ - x,\n...  |\n39 | |         }\n40 | |         *result = result;\n   | |   \
    \            - ^\n   | |_______________|\n   |                 cannot assign to\
    \ this expression\n\nerror[E0277]: can't compare `&isize` with `String`\n  -->\
    \ /tmp/tmpx2vrn_ys.rs:27:66\n   |\n27 |         let result = if let Some(x) =\
    \ operand.iter().find(|x| *x == e).cloned() {\n   |                          \
    \                                        ^^ no implementation for `&isize == String`\n\
    \   |\n   = help: the trait `PartialEq<String>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx2vrn_ys.rs:29:17\n\
    \   |\n28 |             match e {\n   |                   - this expression has\
    \ type `String`\n29 |                 \"+\" => x + x,\n   |                 ^^^\
    \ expect"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.is_empty()\
    \ {\n        println!(\"operator is empty\");\n        return 0;\n    }\n    if\
    \ operand.is_empty() {\n        println!(\"operand is empty\");\n        return\
    \ 0;\n    }\n\n    // if operand.len() != operator.len() - 1 {\n    //     println!(\"\
    operand and operator vector lengths are not equal\");\n    //     return 0;\n\
    \    // }\n    \n    let mut result = 0;\n    for op in operator.iter() {\n  \
    \      match op {\n            \"+\" => {\n                for operand in operand.iter_mut()\
    \ {\n                    result += operand;\n                }\n            }\n\
    \            \"-\" => {\n                for operand in operand.iter_mut() {\n\
    \                    result -= operand;\n                }\n            }\n  \
    \          \"*\" => {\n                for operand in operand.iter_mut() {\n \
    \                   result *= operand;\n                }\n            }\n   \
    \         \"//\" => {\n                for operand in operand.iter_mut() {\n \
    \                   result /= operand;\n                }\n            }\n   \
    \         \"**\" => {\n                for operand in operand.iter_mut() {\n \
    \                   result **= operand;\n                }\n            }\n  \
    \          _ => println!(\"unknown operation {:?}\", op),\n        }\n    }\n\
    \    \n    match result {\n        0 => println!(\"result is zero\"),\n      \
    \  _ => println!(\"result = {:?}\", result),\n    }\n    \n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpqqza9g_g.rs:59:29\n\
    \   |\n59 |                     result **= operand;\n   |                    \
    \         ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqqza9g_g.rs:37:13\n\
    \   |\n36 |         match op {\n   |               -- this expression has type\
    \ `&String`\n37 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpqqza9g_g.rs:42:13\n   |\n36 |         match op {\n   |         \
    \      -- this expression has type `&String`\n...\n42 |             \"-\" => {\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqqza9g_g.rs:47:13\n   |\n36 |\
    \         match op {\n   |               -- this expression has type `&String`\n\
    ...\n47 |             \"*\" => {\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqqza9g_g.rs:52:13\n\
    \   |\n36 |         match op {\n   |               -- this expression has type\
    \ `&String`\n...\n52 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqqza9g_g.rs:57:13\n   |\n36 |         match op {\n   |        \
    \       -- this expression has type `&String`\n...\n57 |             \"**\" =>\
    \ {\n   |             ^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0277]: cannot add-assign `&mut isize` to `{integer}`\n  --> /tmp/tmpqqza9g_g.rs:39:28\n\
    \   |\n39 |                     result += operand;\n   |                     \
    \       ^^ no implementation for `{integer} += &mut isize`\n "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operand.iter().zip(&operator).fold(0,\
    \ |acc, (_, op)| {\n        match op {\n            Operator::ADD => {\n     \
    \           acc + 1\n            }\n            Operator::SUB => {\n         \
    \       acc - 1\n            }\n            Operator::MUL => {\n             \
    \   acc * operand.iter().next()\n            }\n            Operator::FLOOR_DIVIDE\
    \ => {\n                if operand.iter().next() % 2 == 0 {\n                \
    \    acc / operand.iter().next()\n                } else {\n                 \
    \   acc / operand.iter().next() + 1\n                }\n            }\n      \
    \      Operator::EXP => {\n                acc ** operand.iter().next()\n    \
    \        }\n        }\n    })\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operator`\n  -->\
    \ /tmp/tmpepyy47s9.rs:22:13\n   |\n22 |             Operator::ADD => {\n   | \
    \            ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpepyy47s9.rs:25:13\n\
    \   |\n25 |             Operator::SUB => {\n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpepyy47s9.rs:28:13\n   |\n28 |             Operator::MUL => {\n\
    \   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpepyy47s9.rs:31:13\n\
    \   |\n31 |             Operator::FLOOR_DIVIDE => {\n   |             ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpepyy47s9.rs:38:13\n   |\n38 |    \
    \         Operator::EXP => {\n   |             ^^^^^^^^ use of undeclared type\
    \ `Operator`\n\nerror[E0277]: cannot multiply `isize` by `Option<&isize>`\n  -->\
    \ /tmp/tmpepyy47s9.rs:29:21\n   |\n29 |                 acc * operand.iter().next()\n\
    \   |                     ^ no implementation for `isize * Option<&isize>`\n \
    \  |\n   = help: the trait `Mul<Option<&isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0369]:\
    \ cannot mod `Option<&isize>` by `{integer}`\n  --> /tmp/tmpepyy47s9.rs:32:42\n\
    \   |\n32 |                 if operand.iter().next() % 2 == 0 {\n   |        \
    \            --------------------- ^ - {integer}\n   |                    |\n\
    \   |                    Option<&isize>\n\nerror[E0277]: cannot divide `isize`\
    \ by `Option<&isize>`\n  --> /tmp/tmpepyy47s9.rs:33:"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut total_product: isize = 1;\n    for a in &operand {\n        for b in &operand\
    \ {\n            let product = a as isize - b as isize * (operator[0] as isize);\n\
    \            total_product *= product as isize;\n        }\n    }\n    total_product\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpznfzt31m.rs:23:27\n\
    \   |\n23 |             let product = a as isize - b as isize * (operator[0] as\
    \ isize);\n   |                           -^^^^^^^^^\n   |                   \
    \        |\n   |                           cannot cast `&isize` as `isize`\n \
    \  |                           help: dereference the expression: `*a`\n\nerror[E0606]:\
    \ casting `&isize` as `isize` is invalid\n  --> /tmp/tmpznfzt31m.rs:23:40\n  \
    \ |\n23 |             let product = a as isize - b as isize * (operator[0] as\
    \ isize);\n   |                                        -^^^^^^^^^\n   |      \
    \                                  |\n   |                                   \
    \     cannot cast `&isize` as `isize`\n   |                                  \
    \      help: dereference the expression: `*b`\n\nerror[E0605]: non-primitive cast:\
    \ `String` as `isize`\n  --> /tmp/tmpznfzt31m.rs:23:53\n   |\n23 |           \
    \  let product = a as isize - b as isize * (operator[0] as isize);\n   |     \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^ an `as`\
    \ expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0605, E0606.\nFor more information about\
    \ an error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator.len() {\n        0 => panic!(\"operator vector must have at least one\
    \ operator!\");\n        1 => return operand.iter().sum();\n        2 => return\
    \ operand[0].to_isize() * operand[1].to_isize() - operand[2].to_isize() * operand[3].to_isize();\n\
    \        3 => {\n            let mut product: isize = 1;\n            for i in\
    \ 0..operand.len() - 2 {\n                product *= operand[i + 2].to_isize();\n\
    \            }\n            product *= operand[1].to_isize();\n            product\
    \ *= operand[2].to_isize();\n            product *= operand[3].to_isize();\n \
    \           return product;\n        }\n        4 => {\n            let mut product:\
    \ isize = 1;\n            for i in 0..operand.len() - 3 {\n                product\
    \ *= operand[i + 3].to_isize();\n            }\n            for i in 0..operand.len()\
    \ - 2 {\n                product *= operand[i + 2].to_isize();\n            }\n\
    \            product *= operand[1].to_isize();\n            product *= operand[2].to_isize();\n\
    \            product *= operand[3].to_isize();\n            return product;\n\
    \        }\n        5 => {\n            let mut product: isize = 1;\n        \
    \    for i in 0..operand.len() - 4 {\n                product *= operand[i + 4].to_isize();\n\
    \            }\n            for i in 0..operand.len() - 3 {\n                product\
    \ *= operand[i + 3].to_isize();\n            }\n            for i in 0..operand.len()\
    \ - 2 {\n                product *= operand[i + 2].to_isize();\n            }\n\
    \            for i in 0..operand.len() - 1 {\n                product *= operand[i\
    \ + 1].to_isize();\n            }\n            product *= operand[0].to_isize();\n\
    \            product *= operand[2].to_isize();\n            product *= operand[3].to_isize();\n\
    \            product *= operand[4].to_isize();\n            return product;\n\
    \        }\n        _ => {\n            let mut product: isize = 1;\n        \
    \    for i in 0..operand.len() - 5 {\n                product *= operand[i + 5].to_isize();\n\
    \            }\n            for i in 0..operand.len() - 4 {\n                product\
    \ *= operand[i + 4].to_isize();\n            }\n            for i in 0..operand.len()\
    \ - 3 {\n                product *= operand[i + 3].to_isize();\n            }\n\
    \            for i in 0..operand.len() - 2 {\n                product *= operand[i\
    \ + 2].to_isize();\n            }\n            for i in 0..operand.len() - 1 {\n\
    \                product *= operand[i + 1].to_isize();\n            }\n      \
    \      for i in 0..operand.len() {\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3rnzl5nz.rs:92:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n20 |     match operator.len() {\n   |                  \
    \        - unclosed delimiter\n...\n67 |         _ => {\n   |              - unclosed\
    \ delimiter\n...\n84 |             for i in 0..operand.len() {\n   |         \
    \                              - this delimiter might not be properly closed...\n\
    85 | }\n   | - ...as it matches this but it has different indentation\n...\n92\
    \ | }\n   |   ^\n\nerror: `match` arm body without braces\n  --> /tmp/tmp3rnzl5nz.rs:21:14\n\
    \   |\n21 |         0 => panic!(\"operator vector must have at least one operator!\"\
    );\n   |           -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: use a comma to end a `match` arm expression: `,`\n   |           |  |\n\
    \   |           |  this statement is not surrounded by a body\n   |          \
    \ while parsing the `match` arm starting here\n\nerror: `match` arm body without\
    \ braces\n  --> /tmp/tmp3rnzl5nz.rs:22:14\n   |\n22 |         1 => return operand.iter().sum();\n\
    \   |           -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: use a comma to end a `match`\
    \ arm expression: `,`\n   |           |  |\n   |           |  this statement is\
    \ not surrounded by a body\n   |           while parsing the `match` arm starting\
    \ here\n\nerror: `match` arm body without braces\n  --> /tmp/tmp3rnzl5nz.rs:23:14\n\
    \   |\n23 |         2 => return operand[0].to_isize() * operand[1].to_isize()\
    \ - operand[2].to_isize() * operand[3].to_isize();\n   |           -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: use a comma to end a `match` arm expression: `,`\n   |           |  |\n\
    \   |           |  this statement is not surrounded by a body\n   |          \
    \ while parsing the `match` arm starting here\n\nerror[E0599]: no method named\
    \ `to_isize` found for type `isize` in the current scope\n  --> /tmp/tmp3rnzl5nz.rs:27:"
  stdout: ''
  timestamp: 1659977883
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // We\
    \ will use the first operand as our exponent.\n    let exponent = operand[0];\n\
    \n    // We will store the result of the expression here.\n    let mut result\
    \ = 0;\n\n    // We will iterate through all operands in operand vector.\n   \
    \ for &n in &operand[1..] {\n        let mut n1 = n;\n        let mut n2 = n;\n\
    \        // We will try to find the n1 with n2 before we run into any errors.\n\
    \        while n1 < 0 {\n            n1 = n1 - n2;\n            n2 = n2;\n   \
    \     }\n\n        // We will find the n1 with n2 until n1 is 0. This will tell\
    \ us the power of n2 to apply to n1.\n        let mut n1_power = n1;\n       \
    \ while n1_power > 0 {\n            // We will keep multiplying by n2 until we\
    \ cannot multiply it anymore.\n            while n1 * n2 < exponent {\n      \
    \          n1 = n1 * n2;\n                n2 = n2;\n            }\n          \
    \  n1_power = n1_power - 1;\n        }\n        // Add the n1 with n2 to the result.\n\
    \        result -= n1 * n2;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-50`,\n right: `37`', /tmp/tmpjvbc7uw3.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() {\n        return -1;\n    }\n    let mut result = operand[0];\n\
    \    for operator_index in 0..operator.len() {\n        match operator[operator_index].as_ref().unwrap()\
    \ {\n            \"+\" => {\n                result += operand[operator_index\
    \ + 1];\n            }\n            \"-\" => {\n                result -= operand[operator_index\
    \ + 1];\n            }\n            \"*\" => {\n                result *= operand[operator_index\
    \ + 1];\n            }\n            \"//\" => {\n                result //= operand[operator_index\
    \ + 1];\n            }\n            \"**\" => {\n                result **= operand[operator_index\
    \ + 1];\n            }\n            _ => panic!(\"Unsupported operator: {}\",\
    \ operator[operator_index]),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp21q66eu0.rs:39:25\n\
    \   |\n39 |                 result **= operand[operator_index + 1];\n   |    \
    \                     ^^ expected expression\n\nerror[E0282]: type annotations\
    \ needed\n  --> /tmp/tmp21q66eu0.rs:25:40\n   |\n25 |         match operator[operator_index].as_ref().unwrap()\
    \ {\n   |               -------------------------^^^^^^--\n   |              \
    \ |                        |\n   |               |                        cannot\
    \ infer type for type parameter `T` declared on the trait `AsRef`\n   |      \
    \         this method call resolves to `&T`\n   |\n   = note: type must be known\
    \ at this point\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp21q66eu0.rs:36:17\n\
    \   |\n25 | /         match operator[operator_index].as_ref().unwrap() {\n26 |\
    \ |             \"+\" => {\n27 | |                 result += operand[operator_index\
    \ + 1];\n28 | |             }\n...  |\n36 | |                 result //= operand[operator_index\
    \ + 1];\n   | |                 ^^^^^^ expected `()`, found `isize`\n...  |\n\
    41 | |             _ => panic!(\"Unsupported operator: {}\", operator[operator_index]),\n\
    42 | |         }\n   | |_________- expected this to be `()`\n   |\nhelp: you might\
    \ have meant to return this value\n   |\n36 |                 return result; //=\
    \ operand[operator_index + 1];\n   |                 ++++++       +\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0282, E0308.\nFor more information about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ operator_size = operator.len();\n    let mut result = operand[0].clone();\n\
    \    for operand in operand.iter().rev() {\n        let mut op1 = result.clone();\n\
    \        let mut op2 = operand.clone();\n        for op in operator.iter().rev()\
    \ {\n            match op {\n                \"+\" => {\n                    op1\
    \ += op2;\n                    op2.clear();\n                }\n             \
    \   \"-\" => {\n                    op1 -= op2;\n                    op2.clear();\n\
    \                }\n                \"*\" => {\n                    op1 *= op2;\n\
    \                    op2.clear();\n                }\n                \"//\" =>\
    \ {\n                    op1 /= op2;\n                    op2.clear();\n     \
    \           }\n                \"**\" => {\n                    op1 **= op2;\n\
    \                    op2.clear();\n                }\n                _ => panic!(\"\
    Invalid operator: {:?}\", op),\n            }\n        }\n        result = op1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpm_a_pvps.rs:44:26\n\
    \   |\n44 |                     op1 **= op2;\n   |                          ^^\
    \ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_a_pvps.rs:27:17\n\
    \   |\n26 |             match op {\n   |                   -- this expression\
    \ has type `&String`\n27 |                 \"+\" => {\n   |                 ^^^\
    \ expected struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpm_a_pvps.rs:31:17\n   |\n26 |             match op {\n   |    \
    \               -- this expression has type `&String`\n...\n31 |             \
    \    \"-\" => {\n   |                 ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_a_pvps.rs:35:17\n\
    \   |\n26 |             match op {\n   |                   -- this expression\
    \ has type `&String`\n...\n35 |                 \"*\" => {\n   |             \
    \    ^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm_a_pvps.rs:39:17\n   |\n26 |             match op {\n\
    \   |                   -- this expression has type `&String`\n...\n39 |     \
    \            \"//\" => {\n   |                 ^^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_a_pvps.rs:43:17\n\
    \   |\n26 |             match op {\n   |                   -- this expression\
    \ has type `&String`\n...\n43 |                 \"**\" => {\n   |            \
    \     ^^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror[E0599]: no\
    \ method named `clear` found for type `isize` in the current scope\n  --> /tmp/tmpm_a_pvps.rs:29:25\n\
    \   |\n29 |                     op2.clear()"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Get\
    \ the number of operators and operands.\n    let num_operators = operator.len();\n\
    \    let num_operands = operand.len();\n    \n    // Check if the length of operator\
    \ vector is equal to the length of operand vector minus one.\n    if num_operators\
    \ != num_operands - 1 {\n        println!(\"The length of operator vector is {},\
    \ but the length of operand vector is {}. Length must be equal to or greater than\
    \ 1.\", num_operators, num_operands - 1);\n        0\n    } else {\n        \n\
    \        // Calculate the value of the operation.\n        let mut result = 0;\n\
    \        \n        // Loop through the operators.\n        for operand_num in\
    \ 0..num_operands {\n            // Get the operator and operant string from the\
    \ operator vector.\n            let operator = operator[operand_num];\n      \
    \      let operant = operand[operand_num];\n            \n            // If the\
    \ current operator is addition, then add operand.\n            if operator ==\
    \ \"+\" {\n                result += operant;\n            }\n            \n \
    \           // If the current operator is subtraction, then subtract operand.\n\
    \            if operator == \"-\" {\n                result -= operant;\n    \
    \        }\n            \n            // If the current operator is multiplication,\
    \ then multiply operand.\n            if operator == \"*\" {\n               \
    \ result *= operant;\n            }\n            \n            // If the current\
    \ operator is floor division, then divide operand by 2.\n            if operator\
    \ == \"//\" {\n                result /= operant;\n            }\n           \
    \ \n            // If the current operator is exponentiation, then raise operand\
    \ to the power of 2.\n            if operator == \"**\" {\n                result\
    \ **= operant;\n            }\n        }\n        \n        result\n    }\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpgk5ojwzq.rs:61:25\n\
    \   |\n61 |                 result **= operant;\n   |                        \
    \ ^^ expected expression\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    debug_assert_eq!(operator.length(),\
    \ operand.len() - 1);\n    let mut result = operand[0].clone();\n    for i in\
    \ 1..operand.len() {\n        result = operator[i - 1].to_ascii_uppercase().to_string()\n\
    \            .as_str()\n            .unwrap()\n            .to_string()\n    \
    \        .as_str()\n            .unwrap()\n            .to_string()\n        \
    \    .to_string()\n            .to_string()\n            .parse()\n          \
    \  .unwrap();\n        result = result\n            .iter()\n            .zip(operand)\n\
    \            .fold(result, |mut acc, (op, num)| {\n                match op {\n\
    \                    \"+\" => acc + num,\n                    \"-\" => acc - num,\n\
    \                    \"*\" => acc * num,\n                    _ => (),\n     \
    \           }\n            });\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmpwsb11xtp.rs:20:31\n   |\n20 |     debug_assert_eq!(operator.length(),\
    \ operand.len() - 1);\n   |                               ^^^^^^ help: there is\
    \ an associated function with a similar name: `len`\n\nerror[E0599]: no method\
    \ named `unwrap` found for reference `&str` in the current scope\n  --> /tmp/tmpwsb11xtp.rs:25:14\n\
    \   |\n25 |             .unwrap()\n   |              ^^^^^^ method not found in\
    \ `&str`\n\nerror[E0599]: no method named `iter` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpwsb11xtp.rs:35:14\n   |\n35 |             .iter()\n\
    \   |              ^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ operator_size = operator.len();\n    let operand1_size = operand.len();\n  \
    \  if operator_size! > operand1_size {\n        panic!(\"Operator has more elements\
    \ than operand\");\n    }\n    let result_size = operator_size - 1;\n    if result_size\
    \ != operand1_size {\n        panic!(\"Operand has more elements than operator\"\
    );\n    }\n    let result = vec![0; result_size];\n\n    for (i, operand_element)\
    \ in operand.iter().enumerate() {\n        let operator = &operator[..i];\n  \
    \      let mut operand1 = &operand[..i];\n        let operand1_size = operand1.len();\n\
    \        let mut operand2 = &operand1[i..operand1_size - 1];\n        let mut\
    \ operand2_size = operand2.len();\n        let operator_size = operator.len();\n\
    \        if operator_size! > operand1_size {\n            panic!(\"Operator has\
    \ more elements than operand\");\n        }\n        if operator_size! > operand2_size\
    \ {\n            panic!(\"Operand has more elements than operator\");\n      \
    \  }\n        if operator_size! < operand2_size {\n            panic!(\"Operand\
    \ has less elements than operator\");\n        }\n\n        if let Some(result)\
    \ = evaluate(operator, operand1, operand2) {\n            result[..operand1_size\
    \ - 1] = result.iter().cloned().collect();\n            result[operand1_size -\
    \ 1] += result;\n        }\n    }\n    let last_result = &result[..operand1_size\
    \ - 1];\n    let last_result_size = operand1_size - 1;\n    if last_result_size\
    \ != operand.len() {\n        panic!(\"Operand has more elements than operator\"\
    );\n    }\n    if last_result_size != operator.len() {\n        panic!(\"Operator\
    \ has more elements than operand\");\n    }\n    result[last_result_size] += last_result;\n\
    \    result.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `>`\n  --> /tmp/tmpqah5yo66.rs:22:23\n\
    \   |\n22 |     if operator_size! > operand1_size {\n   |                    \
    \   ^ expected one of `(`, `[`, or `{`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ operator {\n        vec![\"+\"] => {\n            let mut product = operand.clone();\n\
    \            product.iter().for_each(|element| {\n                match &element\
    \ {\n                    Some(element) => product += element,\n              \
    \      None => return Err(Error::InvalidInput(\"Operand must be a number!\")),\n\
    \                }\n            })\n            product\n        }\n        vec![\"\
    -\"] => {\n            let mut product = operand.clone();\n            product.iter().for_each(|element|\
    \ {\n                match &element {\n                    Some(element) => product\
    \ -= element,\n                    None => return Err(Error::InvalidInput(\"Operand\
    \ must be a number!\")),\n                }\n            })\n            product\n\
    \        }\n        vec![\"*\"] => {\n            let mut product = operand.clone();\n\
    \            product.iter().for_each(|element| {\n                match &element\
    \ {\n                    Some(element) => product *= element,\n              \
    \      None => return Err(Error::InvalidInput(\"Operand must be a number!\")),\n\
    \                }\n            })\n            product\n        }\n        vec![\"\
    /\"] => {\n            let mut product = operand.clone();\n            product.iter().for_each(|element|\
    \ {\n                match &element {\n                    Some(element) => product\
    \ /= element,\n                    None => return Err(Error::InvalidInput(\"Operand\
    \ must be a number!\")),\n                }\n            })\n            product\n\
    \        }\n        vec![\"//\"] => {\n            let mut product = operand.clone();\n\
    \            product.iter().for_each(|element| {\n                match &element\
    \ {\n                    Some(element) => product /= element,\n              \
    \      None => return Err(Error::InvalidInput(\"Operand must be a number!\")),\n\
    \                }\n            })\n            product\n        }\n        vec![\"\
    **\"] => {\n            let mut product = operand.clone();\n            product.iter().for_each(|element|\
    \ {\n                match &element {\n                    Some(element) => product\
    \ *= element,\n                    None => return Err(Error::InvalidInput(\"Operand\
    \ must be a number!\")),\n                }\n            })\n            product\n\
    \        }\n        _ => return Err(Error::InvalidInput(\"Operator is not valid!\"\
    )),\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `product`\n  --> /tmp/tmp91oxdg6d.rs:28:15\n\
    \   |\n28 |             })\n   |               ^ help: add `;` here\n29 |    \
    \         product\n   |             ------- unexpected token\n\nerror: expected\
    \ `;`, found `product`\n  --> /tmp/tmp91oxdg6d.rs:38:15\n   |\n38 |          \
    \   })\n   |               ^ help: add `;` here\n39 |             product\n  \
    \ |             ------- unexpected token\n\nerror: expected `;`, found `product`\n\
    \  --> /tmp/tmp91oxdg6d.rs:48:15\n   |\n48 |             })\n   |            \
    \   ^ help: add `;` here\n49 |             product\n   |             ------- unexpected\
    \ token\n\nerror: expected `;`, found `product`\n  --> /tmp/tmp91oxdg6d.rs:58:15\n\
    \   |\n58 |             })\n   |               ^ help: add `;` here\n59 |    \
    \         product\n   |             ------- unexpected token\n\nerror: expected\
    \ `;`, found `product`\n  --> /tmp/tmp91oxdg6d.rs:68:15\n   |\n68 |          \
    \   })\n   |               ^ help: add `;` here\n69 |             product\n  \
    \ |             ------- unexpected token\n\nerror: expected `;`, found `product`\n\
    \  --> /tmp/tmp91oxdg6d.rs:78:15\n   |\n78 |             })\n   |            \
    \   ^ help: add `;` here\n79 |             product\n   |             ------- unexpected\
    \ token\n\nerror[E0433]: failed to resolve: use of undeclared type `Error`\n \
    \ --> /tmp/tmp91oxdg6d.rs:26:40\n   |\n26 |                     None => return\
    \ Err(Error::InvalidInput(\"Operand must be a number!\")),\n   |             \
    \                           ^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::error::Error;\n   |\n1  |\
    \ use std::fmt::Error;\n   |\n1  | use std::io::Error;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Error`\n  --> /tmp/tmp91oxdg6d.rs:36:40\n\
    \   |\n36 |                     None => return Err(Error::InvalidInput(\"Operand\
    \ must be a number!\")),\n   |                                        ^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing one of these items\n   |\n\
    1  | use std::error::Error;\n   |\n1  | use std::fmt::Error;\n   |\n1  | use std::io::Error;\n\
    \   |"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    debug_assert!(operator.len()\
    \ > 0 && operand.len() > 1);\n    debug_assert!(operator\n        .iter()\n  \
    \      .filter(|&i| i != \"*\" || *i == 0)\n        .count() == 0);\n    let operators:\
    \ Vec<isize> = operator\n        .iter()\n        .map(|&i| {\n            match\
    \ i {\n                \"+\" | \"-\" => 1,\n                \"*\" => 2,\n    \
    \            \"/\" => 2,\n                \"^\" => 3,\n                \"**\"\
    \ => 4,\n                i => panic!(\"Invalid operator in algebra: {}\", i),\n\
    \            }\n        })\n        .collect();\n\n    let mut expr: Vec<isize>\
    \ = vec![operand[0], operand[1]];\n\n    for i in operators.iter().rev() {\n \
    \       let mut cur_expr: Vec<isize> = vec![];\n        for j in &expr {\n   \
    \         cur_expr.push(*j);\n        }\n        let mut cur_operand: Vec<isize>\
    \ = vec![];\n        for j in &operand {\n            cur_operand.push(*j);\n\
    \        }\n        cur_expr.push(do_algebra_op(i, cur_expr, cur_operand));\n\
    \        expr = &cur_expr[..];\n    }\n    expr[0]\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_algebra_op` in this scope\n  -->\
    \ /tmp/tmp2k88z63l.rs:50:23\n   |\n50 |         cur_expr.push(do_algebra_op(i,\
    \ cur_expr, cur_operand));\n   |                       ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: can't compare `String` with `{integer}`\n  -->\
    \ /tmp/tmp2k88z63l.rs:23:37\n   |\n23 |         .filter(|&i| i != \"*\" || *i\
    \ == 0)\n   |                                     ^^ no implementation for `String\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2k88z63l.rs:29:17\n   |\n28 |             match i {\n \
    \  |                   - this expression has type `String`\n29 |             \
    \    \"+\" | \"-\" => 1,\n   |                 ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2k88z63l.rs:29:23\n\
    \   |\n28 |             match i {\n   |                   - this expression has\
    \ type `String`\n29 |                 \"+\" | \"-\" => 1,\n   |              \
    \         ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2k88z63l.rs:30:17\n   |\n28 |             match i {\n \
    \  |                   - this expression has type `String`\n29 |             \
    \    \"+\" | \"-\" => 1,\n30 |                 \"*\" => 2,\n   |             \
    \    ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2k88z63l.rs:31:17\n   |\n28 |             match i {\n   |     \
    \              - this expression has type `String`\n...\n31 |                \
    \ \"/\" => 2,\n   |                 ^^^ expected struct `String`, found `&s"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operations = Vec::new();\n    let mut res = 0;\n    for i in 0..operand.len()\
    \ {\n        operations.push(operator[i]);\n        res += operand[i];\n    }\n\
    \    if operations.len() == 0 {\n        res\n    } else {\n        do_algebra(operations,\
    \ operand.clone());\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5zisg9sp.rs:28:12\n   |\n\
    28 |       } else {\n   |  ____________^\n29 | |         do_algebra(operations,\
    \ operand.clone());\n   | |                                                - help:\
    \ remove this semicolon\n30 | |     }\n   | |_____^ expected `isize`, found `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut stack = Stack::new();\n    let mut result = operand[0];\n    for i in &operand\
    \ {\n        stack.push(i);\n        if stack.len() > operator.len() {\n     \
    \       stack.pop();\n        }\n    }\n    stack\n        .iter()\n        .zip(operator.iter())\n\
    \        .map(|(op, e)| {\n            if op == None {\n                return\
    \ e\n            } else {\n                match op {\n                    \"\
    +\" => result + e,\n                    \"-\" => result - e,\n               \
    \     \"*\" => result * e,\n                    \"/\" => result / e,\n       \
    \             \"**\" => result ** e,\n                    _ => return Err(\"invalid\
    \ algebra operator\".to_string()),\n                }\n            }\n       \
    \ })\n        .collect::<Result<isize, &'static str>>()\n        .unwrap_or(result)\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Stack`\n  -->\
    \ /tmp/tmpim2jq3_6.rs:20:21\n   |\n20 |     let mut stack = Stack::new();\n  \
    \ |                     ^^^^^ use of undeclared type `Stack`\n\nerror[E0277]:\
    \ can't compare `&str` with `Option<_>`\n  --> /tmp/tmpim2jq3_6.rs:32:19\n   |\n\
    32 |             if op == None {\n   |                   ^^ no implementation\
    \ for `&str == Option<_>`\n   |\n   = help: the trait `PartialEq<Option<_>>` is\
    \ not implemented for `&str`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n         \
    \    <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Implement\
    \ the algebraic operations, return the\n    // result of the expression\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ot2s75a.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Basic\
    \ algebra operations\n    // Addition ( + )\n    if operator[0] == '+' {\n   \
    \     let mut result_value = 0;\n        for el in operand {\n            result_value\
    \ = result_value + el;\n        }\n        return result_value;\n    }\n    //\
    \ Subtraction ( - )\n    else if operator[0] == '-' {\n        let mut result_value\
    \ = 0;\n        for el in operand {\n            result_value = result_value -\
    \ el;\n        }\n        return result_value;\n    }\n    // Multiplication (\
    \ * )\n    else if operator[0] == '*' {\n        let mut result_value = 0;\n \
    \       for el in operand {\n            result_value = result_value * el;\n \
    \       }\n        return result_value;\n    }\n    // Floor division ( // )\n\
    \    else if operator[0] == '/' {\n        let mut result_value = 0;\n       \
    \ for el in operand {\n            result_value = result_value / el;\n       \
    \ }\n        return result_value;\n    }\n    // Exponentiation ( ** )\n    else\
    \ if operator[0] == '**' {\n        let mut result_value = 0;\n        for el\
    \ in operand {\n            result_value = result_value ** el;\n        }\n  \
    \      return result_value;\n    }\n    // Invalid operator\n    else {\n    \
    \    panic!(\"Invalid operator!\");\n    }\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmptyt_a5ea.rs:54:28\n\
    \   |\n54 |     else if operator[0] == '**' {\n   |                          \
    \  ^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n54 |     else if operator[0] == \"**\" {\n   |                        \
    \    ~~~~\n\nerror[E0277]: can't compare `String` with `char`\n  --> /tmp/tmptyt_a5ea.rs:22:20\n\
    \   |\n22 |     if operator[0] == '+' {\n   |                    ^^ no implementation\
    \ for `String == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `String` with `char`\n  --> /tmp/tmptyt_a5ea.rs:30:25\n   |\n30 |     else if\
    \ operator[0] == '-' {\n   |                         ^^ no implementation for\
    \ `String == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `String` with `char`\n  --> /tmp/tmptyt_a5ea.rs:38:25\n   |\n38 |     else if\
    \ operator[0] == '*' {\n   |                         ^^ no implementation for\
    \ `String == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `String`\n   = help: the following o"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    //Calculate\
    \ the number of operands\n    let mut num_operands = operand.len();\n\n    //Calculate\
    \ the number of operators\n    let mut num_operators = operator.len();\n\n   \
    \ //Loop while we have enough operators\n    while num_operators > 0 {\n     \
    \   //If the operands are the same, remove it from the vector\n        if num_operands\
    \ == num_operators {\n            operand.pop();\n            num_operands -=\
    \ 1;\n        }\n        //If we have more operators than operands, throw an error\n\
    \        if num_operators > num_operands {\n            bail!(\"Operators and\
    \ operands vector have different number of elements.\");\n        }\n        //Add\
    \ the next operator to the vector of operators\n        operators.push(operator);\n\
    \        num_operators -= 1;\n    }\n    //If the remaining operator vector is\
    \ not empty\n    if num_operators > 0 {\n        //Throw an error\n        bail!(\"\
    Not enough operators to perform operation.\");\n    }\n    //Get the last element\
    \ of the operand vector and cast it to a isize\n    let result = operand.pop().unwrap();\n\
    \    //Return the result\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `bail` in this scope\n  --> /tmp/tmpmci_x4_j.rs:35:13\n\
    \   |\n35 |             bail!(\"Operators and operands vector have different number\
    \ of elements.\");\n   |             ^^^^\n\nerror: cannot find macro `bail` in\
    \ this scope\n  --> /tmp/tmpmci_x4_j.rs:44:9\n   |\n44 |         bail!(\"Not enough\
    \ operators to perform operation.\");\n   |         ^^^^\n\nerror[E0425]: cannot\
    \ find value `operators` in this scope\n  --> /tmp/tmpmci_x4_j.rs:38:9\n   |\n\
    38 |         operators.push(operator);\n   |         ^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `operator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..operator.len() - 1 {\n        result = operator[i]\
    \ + operand [2 * (operand.len() - 1 - i)] + result;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph7u9nfsu.rs:22:32\n   |\n\
    22 |         result = operator[i] + operand [2 * (operand.len() - 1 - i)] + result;\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph7u9nfsu.rs:22:72\n\
    \   |\n22 |         result = operator[i] + operand [2 * (operand.len() - 1 - i)]\
    \ + result;\n   |                                                            \
    \            ^^^^^^ expected `&str`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph7u9nfsu.rs:22:18\n   |\n20 |     let mut result = 0;\n\
    \   |                      - expected due to this value\n21 |     for i in 0..operator.len()\
    \ - 1 {\n22 |         result = operator[i] + operand [2 * (operand.len() - 1 -\
    \ i)] + result;\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found struct `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ op_size = operator.len();\n    let ops = &operator[..op_size];\n    let operands\
    \ = &operand[..op_size-1];\n    \n    let mut result = 0;\n    for n in operands\
    \ {\n        let value = n ** ops[0..op_size - 1];\n        result += value;\n\
    \    }\n    return result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `[String]` cannot be dereferenced\n  --> /tmp/tmpylhvgho6.rs:26:24\n\
    \   |\n26 |         let value = n ** ops[0..op_size - 1];\n   |              \
    \          ^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 1;\n\n    while operator_index < operator.len() && operand_index < operand.len()\
    \ {\n        match operator[operator_index] {\n            \"+\" => {\n      \
    \          result += operand[operand_index];\n            }\n            \"-\"\
    \ => {\n                result -= operand[operand_index];\n            }\n   \
    \         \"*\" => {\n                result *= operand[operand_index];\n    \
    \        }\n            \"/\" => {\n                result /= operand[operand_index];\n\
    \            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \            }\n            _ => {\n                break;\n            }\n  \
    \      }\n        operator_index += 1;\n        operand_index += 1;\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6hjx5asw.rs:39:25\n\
    \   |\n39 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6hjx5asw.rs:25:15\n   |\n25 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // if\
    \ both the operator and the operand are empty vectors\n    // return 0\n    //\
    \ TODO: Implement a better way to handle this case\n    if operator.len() == 0\
    \ && operand.len() == 0 {\n        return 0;\n    }\n    let mut res = 0;\n  \
    \  if operator.len() > 0 && operand.len() > 0 {\n        // TODO: Implement a\
    \ better way to handle this case\n        for (i, j) in operator.iter().zip(operand.iter())\
    \ {\n            let mut res = (*i).to_i32() + (*j).to_i32();\n            if\
    \ operator[i] == \"-\" {\n                res = -res;\n            }\n       \
    \     if operator[i] == \"*\" {\n                res = res.checked_mul(operand[j]);\n\
    \            }\n            if operator[i] == \"+\" {\n                res = res.checked_add(operand[j]);\n\
    \            }\n            if operator[i] == \"/\" {\n                res = res.checked_div(operand[j]);\n\
    \            }\n            if operator[i] == \"%\" {\n                res = res.checked_mod(operand[j]);\n\
    \            }\n            if operator[i] == \"**\" {\n                res =\
    \ res.checked_pow(operand[j], operand[j]);\n            }\n            res = res.unwrap();\n\
    \        }\n    }\n    return res;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_i32` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmphyyj197v.rs:30:32\n   |\n30 |             let mut\
    \ res = (*i).to_i32() + (*j).to_i32();\n   |                                ^^^^^^\
    \ method not found in `String`\n\nerror[E0599]: no method named `to_i32` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmphyyj197v.rs:30:48\n   |\n\
    30 |             let mut res = (*i).to_i32() + (*j).to_i32();\n   |          \
    \                                      ^^^^^^ method not found in `isize`\n\n\
    error[E0277]: the type `[String]` cannot be indexed by `&String`\n  --> /tmp/tmphyyj197v.rs:31:16\n\
    \   |\n31 |             if operator[i] == \"-\" {\n   |                ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[String]>` is not implemented for `&String`\n   = note: required\
    \ because of the requirements on the impl of `Index<&String>` for `Vec<String>`\n\
    \nerror[E0277]: the type `[String]` cannot be indexed by `&String`\n  --> /tmp/tmphyyj197v.rs:34:16\n\
    \   |\n34 |             if operator[i] == \"*\" {\n   |                ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[String]>` is not implemented for `&String`\n   = note: required\
    \ because of the requirements on the impl of `Index<&String>` for `Vec<String>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmphyyj197v.rs:35:39\n\
    \   |\n35 |                 res = res.checked_mul(operand[j]);\n   |         \
    \                              ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[String]` cannot be indexed by `&String`\n\
    \  --> /tmp/tmphyyj197v.rs:37:16\n   |\n37 |             if operator[i] == \"\
    +\" {\n   |                ^^^^^^^^^^^ slice indices a"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ >= 1);\n    assert!(operand.len() >= 2);\n    assert!(operator.len() = operand.len()-1);\n\
    \    let mut result: isize = 0;\n    let mut operator_char: char = 0;\n    let\
    \ mut op_num: isize = 0;\n    let mut op_last: isize = 0;\n    let mut operand_char:\
    \ char = 0;\n    let mut operand_num: isize = 0;\n    let mut operand_last: isize\
    \ = 0;\n    let mut op_index: usize = 0;\n    let mut operand_index = 0;\n   \
    \ let mut op: usize = 0;\n    \n    operator.rev();\n    operand.rev();\n\n  \
    \  loop {\n        // the index of operand in operator vector\n        op_index\
    \ = op_index + 1;\n        operand_index = operand_index + 1;\n        if op_index\
    \ == operator.len() {\n            break;\n        }\n        op_last = operand_num;\n\
    \        operand_last = op_num;\n        // get the operator character\n     \
    \   operand_char = operand[operand_index];\n        op_num = operator[op_index].parse().unwrap();\n\
    \n        // the index of operator in operand vector\n        operand_index =\
    \ operand_index + 1;\n        operand_char = operand[operand_index];\n       \
    \ operand_num = op_num.parse().unwrap();\n\n        // evaluate the basic algebra\
    \ operation\n        if op_num == 0 {\n            result = result + operand[operand_index];\n\
    \        }\n        match op_num {\n            1 => result = result + operand[operand_index],\n\
    \            2 => result = result - operand[operand_index],\n            3 =>\
    \ result = result * operand[operand_index],\n            4 => result = result\
    \ / operand[operand_index],\n            5 => result = result // operand[operand_index],\n\
    \            6 => result = result ** operand[operand_index],\n            _ =>\
    \ {\n                panic!(\"invalid operator in algebra\");\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `6`\n  --> /tmp/tmps6z0b1j7.rs:65:13\n   |\n64 |             5 => result\
    \ = result // operand[operand_index],\n   |               --                -\
    \ expected one of 8 possible tokens\n   |               |\n   |              \
    \ while parsing the `match` arm starting here\n65 |             6 => result =\
    \ result ** operand[operand_index],\n   |             ^ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps6z0b1j7.rs:22:13\n   |\n22 |     assert!(operator.len()\
    \ = operand.len()-1);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found `()`\n   |\nhelp: you might have meant to compare for equality\n\
    \   |\n22 |     assert!(operator.len() == operand.len()-1);\n   |            \
    \                ~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps6z0b1j7.rs:24:35\n\
    \   |\n24 |     let mut operator_char: char = 0;\n   |                       \
    \     ----   ^ expected `char`, found `u8`\n   |                            |\n\
    \   |                            expected due to this\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps6z0b1j7.rs:27:34\n   |\n27 |     let mut operand_char:\
    \ char = 0;\n   |                           ----   ^ expected `char`, found `u8`\n\
    \   |                           |\n   |                           expected due\
    \ to this\n\nerror[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmps6z0b1j7.rs:34:14\n\
    \    |\n34  |       operator.rev();\n    |                ^^^ `Vec<String>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<String>: Iterator`\n            which is required by `&mut Vec<String>:\
    \ Iterator`\n            `[String]: Iterator`\n            which is required by\
    \ `&mut [String]: Iterator`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n\
    \   --> /tmp/tmps6z0b1j7.rs:35:13\n    |\n35  |       operand.rev();\n    |  \
    \             ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is require"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n\n    let mut temp_vector = vec![0; operator.len()];\n    for\
    \ i in 0..operator.len() {\n        temp_vector[i] = operator[i];\n    }\n\n \
    \   for i in 0..operand.len() {\n        if temp_vector[operator.len() - 1] ==\
    \ '*' {\n            temp_vector[operator.len() - 2] = operand[i] * operand[i];\n\
    \        } else if temp_vector[operator.len() - 1] == '/' {\n            temp_vector[operator.len()\
    \ - 2] = operand[i] / operand[i];\n        } else if temp_vector[operator.len()\
    \ - 1] == '+' || temp_vector[operator.len() - 1] == '-' {\n            temp_vector[operator.len()\
    \ - 2] = operand[i] - operand[i];\n        }\n    }\n    for i in 0..temp_vector.len()\
    \ {\n        result = result + temp_vector[i];\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo1pb4f_7.rs:24:26\n   |\n\
    24 |         temp_vector[i] = operator[i];\n   |         --------------   ^^^^^^^^^^^\
    \ expected integer, found struct `String`\n   |         |\n   |         expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo1pb4f_7.rs:28:47\n\
    \   |\n28 |         if temp_vector[operator.len() - 1] == '*' {\n   |        \
    \                                       ^^^ expected integer, found `char`\n\n\
    error[E0277]: can't compare `{integer}` with `char`\n  --> /tmp/tmpo1pb4f_7.rs:28:44\n\
    \   |\n28 |         if temp_vector[operator.len() - 1] == '*' {\n   |        \
    \                                    ^^ no implementation for `{integer} == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo1pb4f_7.rs:30:54\n\
    \   |\n30 |         } else if temp_vector[operator.len() - 1] == '/' {\n   | \
    \                                                     ^^^ expected `isize`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo1pb4f_7.rs:32:54\n\
    \   |\n32 |         } else if temp_vector[operator.len() - 1] == '+' || temp_vector[operator.len()\
    \ - 1] == '-' {\n   |                                                      ^^^\
    \ expected `isize`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo1pb4f_7.rs:32:96\n\
    \   |\n32 |         } else if temp_vector[operator.len() - 1] == '+' || temp_vector[operator.len()\
    \ - 1] == '-' {\n   |                                                        \
    \                                        ^^^ expected `isize`, found `char`\n\n\
    error: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect();\n\n    // If the operator vector\
    \ is empty then result is zero.\n    if operator.iter().filter(|x| x.is_empty()).count()\
    \ > 1 {\n        return 0;\n    }\n\n    // If the operator vector is non-empty,\
    \ iterate through the operator vector and apply the operation on each element\
    \ in the operand vector.\n    for operator in operator.iter() {\n        match\
    \ operator {\n            \"+\" => {\n                result.iter_mut().zip(operand.iter().skip(1)).for_each(|(b,\
    \ a)| {\n                    let mut c = b;\n                    c = c + a;\n\
    \                    *b = c\n                })\n            }\n            \"\
    -\" => {\n                result.iter_mut().zip(operand.iter().skip(1)).for_each(|(b,\
    \ a)| {\n                    let mut c = b;\n                    c = c - a;\n\
    \                    *b = c\n                })\n            }\n            \"\
    *\" => {\n                result.iter_mut().zip(operand.iter().skip(1)).for_each(|(b,\
    \ a)| {\n                    let mut c = b;\n                    c = c * a;\n\
    \                    *b = c\n                })\n            }\n            \"\
    /\" => {\n                result.iter_mut().zip(operand.iter().skip(1)).for_each(|(b,\
    \ a)| {\n                    let mut c = b;\n                    c = c / a;\n\
    \                    *b = c\n                })\n            }\n            \"\
    //\" => {\n                result.iter_mut().zip(operand.iter().skip(1)).for_each(|(b,\
    \ a)| {\n                    let mut c = b;\n                    c = c / a;\n\
    \                    *b = c\n                })\n            }\n            \"\
    **\" => {\n                result.iter_mut().zip(operand.iter().skip(1)).for_each(|(b,\
    \ a)| {\n                    let mut c = b;\n                    c = c * a;\n\
    \                    *b = c\n                })\n            }\n            _\
    \ => {}\n        }\n    }\n    return result.iter().sum();\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3d8vajg2.rs:30:13\n   |\n\
    29 |         match operator {\n   |               -------- this expression has\
    \ type `&String`\n30 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp3d8vajg2.rs:37:13\n   |\n29 |         match operator {\n   |   \
    \            -------- this expression has type `&String`\n...\n37 |          \
    \   \"-\" => {\n   |             ^^^ expected struct `String`, found `str`\n \
    \  |\n   = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3d8vajg2.rs:44:13\n  \
    \ |\n29 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n...\n44 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3d8vajg2.rs:51:13\n   |\n29 |         match operator {\n   |  \
    \             -------- this expression has type `&String`\n...\n51 |         \
    \    \"/\" => {\n   |             ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3d8vajg2.rs:58:13\n\
    \   |\n29 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n...\n58 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3d8vajg2.rs:65:13\n   |\n29 |         match operator {\n   |  \
    \             -------- this expression has type `&String`\n...\n65 |         \
    \    \"**\" => {\n   |             ^^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\ner"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Initialize\
    \ the result with 0.\n    let mut result = 0;\n    // Iterate over the operator.\n\
    \    for element in operator.iter() {\n        // Get the value of the operator\
    \ from the index of the element.\n        let value = element.to_i();\n      \
    \  // Get the index of the operand by subtracting the length of the operator from\
    \ the \n        // index of the element.\n        let index = element.len() -\
    \ 1;\n        // Set the result variable to the result plus \n        // ((index\
    \ of the operand * value of the operator)) + \n        // ((index of the operand\
    \ * value of the operator) * (value of the operator)).\n        result = result\
    \ + ((operand[index] * value) + operand[index] * operand[index] * value);\n  \
    \  }\n    // Return the result.\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_i` found for reference `&String` in the\
    \ current scope\n  --> /tmp/tmpuknmif6d.rs:25:29\n   |\n25 |         let value\
    \ = element.to_i();\n   |                             ^^^^ method not found in\
    \ `&String`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expression = String::new();\n    let mut stack: Vec<usize> = vec![0isize;\
    \ operator.size() + operand.len() - 1];\n    stack.push(0usize);\n    for index\
    \ in 0..operator.len() {\n        expression.push_str(operator[index]);\n    \
    \    expression.push('+');\n        stack.push(stack.last() + 1);\n    }\n   \
    \ for index in 0..operand.len() {\n        expression.push_str(operand[index].to_string());\n\
    \        expression.push('*');\n        stack.push(stack.last() * operand[index]);\n\
    \    }\n    return stack.pop();\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7bb6atx.rs:21:38\n   |\n\
    21 |     let mut stack: Vec<usize> = vec![0isize; operator.size() + operand.len()\
    \ - 1];\n   |                                      ^^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: change the type of the numeric literal from `isize` to\
    \ `usize`\n   |\n21 |     let mut stack: Vec<usize> = vec![0usize; operator.size()\
    \ + operand.len() - 1];\n   |                                       ~~~~~\n\n\
    error[E0599]: no method named `size` found for struct `Vec<String>` in the current\
    \ scope\n  --> /tmp/tmpx7bb6atx.rs:21:55\n   |\n21 |     let mut stack: Vec<usize>\
    \ = vec![0isize; operator.size() + operand.len() - 1];\n   |                 \
    \                                      ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx7bb6atx.rs:24:29\n\
    \   |\n24 |         expression.push_str(operator[index]);\n   |              \
    \               ^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&operator[index]`\n\nerror[E0369]:\
    \ cannot add `{integer}` to `Option<&usize>`\n  --> /tmp/tmpx7bb6atx.rs:26:33\n\
    \   |\n26 |         stack.push(stack.last() + 1);\n   |                    ------------\
    \ ^ - {integer}\n   |                    |\n   |                    Option<&usize>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx7bb6atx.rs:29:29\n   |\n29 |\
    \         expression.push_str(operand[index].to_string());\n   |             \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                            \
    \ |\n   |                             expected `&str`, found struct `String`\n\
    \   |                             help: consider borrowing here: `&operand[index].to_string()`\n\
    \nerror[E0369]: cannot multiply `Option<&usize>` by `isize`\n  --> /tmp/tmpx7bb6atx.rs:31:33\n\
    \   |\n31 |         stack.push(stack.last() * operand[index]);\n   |         \
    \           ------------ ^ -------------- isize\n   |                    |\n \
    \  | "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // convert\
    \ vectors of strings into vectors of ints\n    let mut operands = operand.iter().map(|x|\
    \ x.parse::<isize>().unwrap()).collect::<Vec<_>>();\n    let operators = operator.iter().map(|x|\
    \ x.parse::<String>().unwrap()).collect::<Vec<_>>();\n\n    // create a list of\
    \ binary operations\n    let mut expression = vec![];\n\n    // iterate through\
    \ operators and operands to construct binary operations\n    for (i, operator)\
    \ in operators.iter().enumerate() {\n        let operand = operands[i];\n    \
    \    let mut value = operand;\n\n        // handle floor division by 0\n     \
    \   if operator == \"/\" {\n            if operand == 0 {\n                return\
    \ 0;\n            }\n            let mut iter = operand.iter();\n            iter.skip(1);\n\
    \            value = iter.collect::<Vec<_>>();\n        }\n\n        // handle\
    \ exponentiation\n        if operator == \"**\" {\n            let mut iter =\
    \ operand.iter();\n            iter.skip(1);\n            let mut product = 1;\n\
    \            for item in iter {\n                product *= item;\n          \
    \  }\n            value = product;\n        }\n\n        // handle addition\n\
    \        if operator == \"+\" {\n            value = operand + value;\n      \
    \  }\n\n        // handle subtraction\n        if operator == \"-\" {\n      \
    \      value = operand - value;\n        }\n\n        // handle multiplication\n\
    \        if operator == \"*\" {\n            value = operand * value;\n      \
    \  }\n\n        // handle floor division\n        if operator == \"/\" {\n   \
    \         value = operand / value;\n        }\n\n        // append the result\
    \ to the list of binary operations\n        expression.push(value);\n    }\n\n\
    \    // return the result of the binary operations\n    expression.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `parse` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpwhzglsae.rs:21:49\n   |\n21 |     let mut operands\
    \ = operand.iter().map(|x| x.parse::<isize>().unwrap()).collect::<Vec<_>>();\n\
    \   |                                                 ^^^^^ method not found in\
    \ `&isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op.to_lowercase() {\n            \"+\" | \"-\" => result += operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n            \"*\" => result *= operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n            \"/\" => result /= operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n            \"**\" => result **= operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n            _ => panic!(\"Unexpected operator: {}\", op),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpbwtk5z6l.rs:26:29\n\
    \   |\n26 |             \"**\" => result **= operand.iter().skip(1).find(|x| *x\
    \ == x).unwrap(),\n   |                  --         ^^ expected expression\n \
    \  |                  |\n   |                  while parsing the `match` arm starting\
    \ here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbwtk5z6l.rs:23:13\n  \
    \ |\n22 |         match op.to_lowercase() {\n   |               -----------------\
    \ this expression has type `String`\n23 |             \"+\" | \"-\" => result\
    \ += operand.iter().skip(1).find(|x| *x == x).unwrap(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpbwtk5z6l.rs:23:19\n   |\n22 |         match op.to_lowercase() {\n\
    \   |               ----------------- this expression has type `String`\n23 |\
    \             \"+\" | \"-\" => result += operand.iter().skip(1).find(|x| *x ==\
    \ x).unwrap(),\n   |                   ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbwtk5z6l.rs:24:13\n   |\n22 |\
    \         match op.to_lowercase() {\n   |               ----------------- this\
    \ expression has type `String`\n23 |             \"+\" | \"-\" => result += operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n24 |             \"*\" => result *= operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbwtk5z6l.rs:25:13\n   |\n22 |\
    \         match op.to_lowercase() {\n   |               ----------------- this\
    \ expression has type `String`\n...\n25 |             \"/\" => result /= operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpbwtk5z6l.rs:23:71\n\
    \   |\n23 |             \"+\" | \"-\" => result += operand.iter().skip(1).find(|x|\
    \ *x == x).unwrap(),\n   |                                                   \
    \                    ^^ no implementation for `isize == &isize`\n   |\n   = help:\
    \ the trait `Partia"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = 0;\n    for i in 0..operator.len() {\n        res += operand[operator[i]](&mut\
    \ res);\n    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `String`\n  --> /tmp/tmp_scfk0km.rs:22:16\n\
    \   |\n22 |         res += operand[operator[i]](&mut res);\n   |             \
    \   ^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `String`\n\
    \   = note: required because of the requirements on the impl of `Index<String>`\
    \ for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    operator.iter().skip(1).for_each(|operator|\
    \ {\n        let mut left = operand.iter().skip(1).fold(0, |sum, i| sum + i);\n\
    \        let mut right = operand.iter().skip(1).fold(0, |sum, i| sum + i);\n \
    \       match operator {\n            \"+\" => result += left + right,\n     \
    \       \"-\" => result -= left + right,\n            \"*\" => result *= left\
    \ + right,\n            \"//\" => result /= left + right,\n            \"**\"\
    \ => result **= left + right,\n            _ => (),\n        }\n    });\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb9sk48y7.rs:29:29\n\
    \   |\n29 |             \"**\" => result **= left + right,\n   |             \
    \     --         ^^ expected expression\n   |                  |\n   |       \
    \           while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb9sk48y7.rs:25:13\n   |\n24 |         match operator {\n\
    \   |               -------- this expression has type `&String`\n25 |        \
    \     \"+\" => result += left + right,\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb9sk48y7.rs:26:13\n\
    \   |\n24 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n25 |             \"+\" => result += left + right,\n26 |\
    \             \"-\" => result -= left + right,\n   |             ^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb9sk48y7.rs:27:13\n   |\n24 |         match operator {\n   |  \
    \             -------- this expression has type `&String`\n...\n27 |         \
    \    \"*\" => result *= left + right,\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb9sk48y7.rs:28:13\n\
    \   |\n24 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n...\n28 |             \"//\" => result /= left + right,\n\
    \   |             ^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = operand.clone();\n    operator.iter().skip(1).cloned().zip(res.iter().skip(1)).for_each(|(op,\
    \ val)| {\n        match op {\n            \"+\" => res.push(val + val),\n   \
    \         \"-\" => res.push(val - val),\n            \"*\" => res.push(val * val),\n\
    \            \"/\" => res.push(val / val),\n            \"//\" => res.push(val\
    \ / val),\n            \"**\" => res.push(val ** val),\n            _ => (),\n\
    \        }\n    });\n    res.len()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9m43evao.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => res.push(val + val),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9m43evao.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => res.push(val + val),\n24 |             \"\
    -\" => res.push(val - val),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9m43evao.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => res.push(val * val),\n   |        \
    \     ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9m43evao.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => res.push(val\
    \ / val),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9m43evao.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => res.push(val / val),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9m43evao.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"**\" => res.push(val ** val),\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9m43evao.rs:32:5\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                        ----- expected `isize` because of return type\n...\n\
    32 |     res.len()\n   |     ^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n32 |     res.len().try_into()."
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ std::cmp::Ordering;\n    use std::cmp::Ordering::Equal;\n    use std::cmp::Ordering::Greater;\n\
    \    use std::cmp::Ordering::Less;\n\n    operator.len().cmp(&operand.len()) as\
    \ isize => {}\n    operand.iter().zip(operator.iter()).fold(0, |sum, operator|\
    \ {\n        match operator {\n            \"+\" => sum + operand.last(),\n  \
    \          \"*\" => sum + operand.last() * operand.last(),\n            \"-\"\
    \ => sum - operand.last(),\n            \"//\" => sum / (operand.last()),\n  \
    \          \"**\" => sum ** operand.last()\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `.`, `::`, `;`, `<`, `?`, or `}`, found\
    \ `=>`\n  --> /tmp/tmpwgmnnidw.rs:25:49\n   |\n25 |     operator.len().cmp(&operand.len())\
    \ as isize => {}\n   |                                                 ^^ expected\
    \ one of 8 possible tokens\n\nwarning: unused import: `std::cmp::Ordering`\n \
    \ --> /tmp/tmpwgmnnidw.rs:20:9\n   |\n20 |     use std::cmp::Ordering;\n   | \
    \        ^^^^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by\
    \ default\n\nwarning: unused import: `std::cmp::Ordering::Equal`\n  --> /tmp/tmpwgmnnidw.rs:21:9\n\
    \   |\n21 |     use std::cmp::Ordering::Equal;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nwarning: unused import: `std::cmp::Ordering::Greater`\n  --> /tmp/tmpwgmnnidw.rs:22:9\n\
    \   |\n22 |     use std::cmp::Ordering::Greater;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nwarning: unused import: `std::cmp::Ordering::Less`\n  --> /tmp/tmpwgmnnidw.rs:23:9\n\
    \   |\n23 |     use std::cmp::Ordering::Less;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error; 4 warnings emitted\n\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 || operand.len() <= 1 {\n        panic!(\"Operator and operand vector must\
    \ be non-empty!\");\n    }\n\n    let op_str = operator.join(\"\");\n    let op_nums\
    \ = op_str.chars().map(|x| x.to_digit(16)).collect();\n\n    let operand_str =\
    \ operand.join(\"\");\n    let operand_nums = operand_str.chars().map(|x| x.to_digit(16)).collect();\n\
    \    operand_nums[0] += op_nums[0];\n\n    let mut nums = Vec::new();\n    nums.push(0);\n\
    \    for &num in operand_nums.iter().rev() {\n        let mut new_num = nums.clone();\n\
    \        let op = if num == 0 {\n            op_str\n        } else if num > 0\
    \ {\n            op_str[op_str.len() - num - 1].to_digit(16)\n        } else {\n\
    \            op_str[op.len() - num].to_digit(16)\n        };\n        if new_num.len()\
    \ == op_nums.len() {\n            if num == 0 {\n                new_num[0] -=\
    \ 1;\n            } else if num > 0 {\n                new_num[new_num.len() -\
    \ num - 1] -= 1;\n            } else {\n                new_num[new_num.len()\
    \ - num] -= 1;\n            }\n        } else {\n            panic!(\"Operator\
    \ and operand vectors are not compatible!\");\n        }\n        nums.push(new_num);\n\
    \    }\n    nums[0] = nums[0].checked_add((&operand[1]).checked_mul(2isize));\n\
    \    nums[0].checked_div(2isize).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `op` in this scope\n  --> /tmp/tmpughxcrgt.rs:40:20\n\
    \   |\n40 |             op_str[op.len() - num].to_digit(16)\n   |            \
    \        ^^ not found in this scope\n\nerror[E0599]: the method `join` exists\
    \ for struct `Vec<isize>`, but its trait bounds were not satisfied\n  --> /tmp/tmpughxcrgt.rs:27:31\n\
    \   |\n27 |     let operand_str = operand.join(\"\");\n   |                  \
    \             ^^^^ method cannot be called on `Vec<isize>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `[isize]: Join<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpughxcrgt.rs:53:19\n\
    \   |\n53 |         nums.push(new_num);\n   |                   ^^^^^^^ expected\
    \ integer, found struct `Vec`\n   |\n   = note: expected type `{integer}`\n  \
    \          found struct `Vec<{integer}>`\n\nerror[E0689]: can't call method `checked_add`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmpughxcrgt.rs:55:23\n   |\n\
    55 |     nums[0] = nums[0].checked_add((&operand[1]).checked_mul(2isize));\n \
    \  |                       ^^^^^^^^^^^\n\nerror[E0689]: can't call method `checked_div`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmpughxcrgt.rs:56:13\n   |\n\
    56 |     nums[0].checked_div(2isize).unwrap()\n   |             ^^^^^^^^^^^\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599, E0689.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0].clone();\n    let mut i = 0;\n    while i < operator.len()\
    \ && i < operand.len() {\n        match operator[i] {\n            \"+\" | \"\
    -\" => {\n                result = result + operand[i - 1].clone() * operand[i].clone();\n\
    \            }\n            \"*\" => {\n                result = result + operand[i\
    \ - 1].clone() * operand[i].clone();\n            }\n            \"//\" => {\n\
    \                result = result + operand[i - 1].clone() % operand[i].clone();\n\
    \            }\n            \"**\" => {\n                result = result + (operand[i\
    \ - 1].clone() ** operand[i].clone());\n            }\n            \"\" => {\n\
    \                break;\n            }\n            _ => {\n                break;\n\
    \            }\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4xhie7pg.rs:23:15\n   |\n\
    23 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected `&str`,\
    \ found struct `String`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp4xhie7pg.rs:34:60\n   |\n34 |                 result = result +\
    \ (operand[i - 1].clone() ** operand[i].clone());\n   |                      \
    \                                      ^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = operand.iter().cloned().enumerate().map(|(i, x)|{\n        let mut\
    \ operators: Vec<isize> = vec![];\n        if i != 0 {\n            operators\
    \ = operator.iter().cloned().enumerate().map(|(j, w)|{\n                let mut\
    \ v: Vec<isize> = vec![];\n                match w {\n                    0 =>\
    \ v.append(x),\n                    1 => v.push(operators.last().unwrap()),\n\
    \                    2 => v.push(operators.last().unwrap() * x % &operators.last().unwrap()),\n\
    \                    3 => v.push(operators.last().unwrap() * x % &operators.last().unwrap()\
    \ * x % &operators.last().unwrap()),\n                    _ => { }\n         \
    \       };\n                v.iter().cloned().enumerate().map(|(k, x)|{\n    \
    \                let mut sum = 0;\n                    let mut product = 1;\n\
    \                    for _ in 0..(k-1) {\n                        sum += &operators[k-1];\n\
    \                        product *= x;\n                    }\n              \
    \      v.push(sum * product);\n                }).collect()\n            }).collect();\n\
    \        }\n        operators.last().unwrap()\n    }).collect();\n    res.iter().cloned().enumerate().map(|(i,\
    \ x)|{\n        let mut sum = 0;\n        for _ in 0..(i-1) {\n            sum\
    \ += x;\n        }\n        sum\n    }).sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfuunqnrd.rs:26:21\n   |\n\
    25 |                 match w {\n   |                       - this expression has\
    \ type `String`\n26 |                     0 => v.append(x),\n   |            \
    \         ^ expected struct `String`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfuunqnrd.rs:27:21\n   |\n25 |                 match w {\n\
    \   |                       - this expression has type `String`\n26 |        \
    \             0 => v.append(x),\n27 |                     1 => v.push(operators.last().unwrap()),\n\
    \   |                     ^ expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfuunqnrd.rs:28:21\n   |\n25 |              \
    \   match w {\n   |                       - this expression has type `String`\n\
    ...\n28 |                     2 => v.push(operators.last().unwrap() * x % &operators.last().unwrap()),\n\
    \   |                     ^ expected struct `String`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfuunqnrd.rs:29:21\n   |\n25 |              \
    \   match w {\n   |                       - this expression has type `String`\n\
    ...\n29 |                     3 => v.push(operators.last().unwrap() * x % &operators.last().unwrap()\
    \ * x % &operators.last().unwrap()),\n   |                     ^ expected struct\
    \ `String`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuunqnrd.rs:26:35\n\
    \   |\n26 |                     0 => v.append(x),\n   |                      \
    \             ^ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<isize>`\n                           found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfuunqnrd.rs:27:33\n   |\n27 |\
    \                     1 => v.push(operators.last().unwrap()),\n   |          \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n27 |                   \
    \  1 => v.push(*operators.last().unwrap()),\n   |                            \
    \     +\n\nerror[E0277]: cannot mod `isize` by `&&isize`\n  --> /"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    debug_assert!(operator.size()\
    \ > 0);\n    debug_assert!(operand.size() > 1);\n\n    let mut eval_op = 0;\n\
    \    let mut eval_operand = 0;\n\n    let mut temp1 = operand.clone();\n    let\
    \ mut temp2 = operand.clone();\n\n    for i in 0..operator.size() - 1 {\n    \
    \    if i == 0 {\n            eval_op += temp1[i - 1].clone() * temp2[i - 1].clone();\n\
    \            eval_operand += temp1[i - 1].clone() * temp2[i - 1].clone();\n  \
    \      } else {\n            eval_op += temp1[i - 1].clone() * temp2[i - 1].clone();\n\
    \            eval_operand += temp1[i - 1].clone() * temp2[i - 1].clone();\n  \
    \      }\n        temp1[i - 1].clone() += temp2[i - 1].clone();\n        temp2[i\
    \ - 1].clone() += temp2[i - 1].clone();\n    }\n\n    eval_op + eval_operand\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmpsqelyb70.rs:20:28\n   |\n20 |     debug_assert!(operator.size()\
    \ > 0);\n   |                            ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0599]: no method named `size` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpsqelyb70.rs:21:27\n\
    \   |\n21 |     debug_assert!(operand.size() > 1);\n   |                     \
    \      ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0599]: no method named `size` found for struct `Vec<String>` in the current\
    \ scope\n  --> /tmp/tmpsqelyb70.rs:29:26\n   |\n29 |     for i in 0..operator.size()\
    \ - 1 {\n   |                          ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0067]: invalid left-hand side of assignment\n\
    \  --> /tmp/tmpsqelyb70.rs:37:30\n   |\n37 |         temp1[i - 1].clone() += temp2[i\
    \ - 1].clone();\n   |         -------------------- ^^\n   |         |\n   |  \
    \       cannot assign to this expression\n\nerror[E0067]: invalid left-hand side\
    \ of assignment\n  --> /tmp/tmpsqelyb70.rs:38:30\n   |\n38 |         temp2[i -\
    \ 1].clone() += temp2[i - 1].clone();\n   |         -------------------- ^^\n\
    \   |         |\n   |         cannot assign to this expression\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0067, E0599.\n\
    For more information about an error, try `rustc --explain E0067`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 {\n        println!(\"operator is empty\");\n        return 0;\n    }\n\
    \n    if operand.len() == 0 {\n        println!(\"operand is empty\");\n     \
    \   return 0;\n    }\n\n    let mut result = operand[0];\n\n    for operator in\
    \ operator.iter() {\n        match operator {\n            \"+\" => {\n      \
    \          result += operand[1];\n            }\n            \"-\" => {\n    \
    \            result -= operand[1];\n            }\n            \"*\" => {\n  \
    \              result *= operand[1];\n            }\n            \"/\" => {\n\
    \                result = result / operand[1];\n            }\n            \"\
    //\" => {\n                result = result / operand[1];\n            }\n    \
    \        \"**\" => {\n                result *= operand[1];\n            }\n \
    \           _ => {\n                println!(\"invalid operator\");\n        \
    \        return 0;\n            }\n        }\n    }\n\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp63d6n22_.rs:34:13\n   |\n\
    33 |         match operator {\n   |               -------- this expression has\
    \ type `&String`\n34 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `str`\n   |\n   = note: expected reference `&String`\n     \
    \         found reference `&'static str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp63d6n22_.rs:37:13\n   |\n33 |         match operator {\n   |   \
    \            -------- this expression has type `&String`\n...\n37 |          \
    \   \"-\" => {\n   |             ^^^ expected struct `String`, found `str`\n \
    \  |\n   = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp63d6n22_.rs:40:13\n  \
    \ |\n33 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n...\n40 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp63d6n22_.rs:43:13\n   |\n33 |         match operator {\n   |  \
    \             -------- this expression has type `&String`\n...\n43 |         \
    \    \"/\" => {\n   |             ^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp63d6n22_.rs:46:13\n\
    \   |\n33 |         match operator {\n   |               -------- this expression\
    \ has type `&String`\n...\n46 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp63d6n22_.rs:49:13\n   |\n33 |         match operator {\n   |  \
    \             -------- this expression has type `&String`\n...\n49 |         \
    \    \"**\" => {\n   |             ^^^^ expected struct `String`, found `str`\n\
    \   |\n   = note: expected reference `&String`\n              found reference\
    \ `&'static str`\n\ner"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ ops = operator;\n    let noperand = operand.len();\n\n    if noperand == 0 {\n\
    \        0\n    } else if noperand == 1 {\n        operand[0]\n    } else {\n\
    \        // If the length is greater than two, then there is no need to do any\
    \ operation\n        if noperand > 2 {\n            // Start with noperand - 2\
    \ as the operators [operator, operator, operator] \n            // and noperand\
    \ - 1 as the operands [operand1, operand2].\n            let mut operators = Vec::new();\n\
    \            operators.push(*ops.clone());\n            let mut operands = Vec::new();\n\
    \            operands.push(operand[0]);\n            for x in &operand[1..noperand]\
    \ {\n                operators.push(*ops.clone());\n                operands.push(*x);\n\
    \            }\n\n            let mut operators_vec = vec![operators.len()-1,\
    \ operators.len()];\n            for x in 0..operators.len() {\n             \
    \   operators_vec[x] = operators[x];\n            }\n\n            let mut operators_vec\
    \ = operators_vec[..];\n            let mut operands_vec = vec![operands.len()-1,\
    \ operands.len()];\n            for x in 0..operands.len() {\n               \
    \ operands_vec[x] = operands[x];\n            }\n\n            let mut operands_vec\
    \ = operands_vec[..];\n            \n            let mut operands_vec_clone =\
    \ operands_vec.clone();\n            let mut operators_vec_clone = operators_vec.clone();\n\
    \n            loop {\n                // For every pair of operators and operands,\
    \ compare the pair with\n                // the pair in the current iteration.\
    \ If an equal pair exists, then\n                // swap them. \n            \
    \    let mut index = 0;\n                while index < operators_vec.len() &&\
    \ index < operands_vec.len() {\n                    let mut operators_pair = operators_vec[index..operators_vec.len()].clone();\
    \ \n                    let mut operands_pair = operands_vec[index..operands_vec.len()].clone();\
    \ \n                    let mut current_operators_pair = operators_pair;\n   \
    \                 let mut current_operands_pair = operands_pair;\n           \
    \         while index+1 < operators_vec.len() && index+1 < operands_vec.len()\
    \ {\n                        if current_operators_pair == operators_pair {\n \
    \                           current_operators_pair = operands_pair;\n        \
    \                    current_operands_pair = operands_pair;\n                \
    \            break;\n                        }\n                        current_operators_pair\
    \ = operators_pair;\n                        current_operands_pair = operands_pair;\n\
    \                        index += 1;\n                        \n             \
    \           let mut index2 = 0;\n                        while index2 < current_operators_pair.len()\
    \ && \n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5ox3w8d0.rs:86:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n27 |     } else {\n   |            - unclosed delimiter\n\
    28 |         // If the length is greater than two, then there is no need to do\
    \ any operation\n29 |         if noperand > 2 {\n   |                        \
    \ - unclosed delimiter\n...\n57 |             loop {\n   |                  -\
    \ unclosed delimiter\n...\n62 |                 while index < operators_vec.len()\
    \ && index < operands_vec.len() {\n   |                                      \
    \                                           - unclosed delimiter\n...\n67 |  \
    \                   while index+1 < operators_vec.len() && index+1 < operands_vec.len()\
    \ {\n   |                                                                    \
    \                     - this delimiter might not be properly closed...\n...\n\
    79 | }\n   | - ...as it matches this but it has different indentation\n...\n86\
    \ | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmp5ox3w8d0.rs:79:1\n\
    \   |\n78 |                         while index2 < current_operators_pair.len()\
    \ && \n   |                         ----- while parsing the condition of this\
    \ `while` expression\n79 | }\n   | ^ expected expression\n\nerror[E0277]: the\
    \ size for values of type `[String]` cannot be known at compilation time\n   -->\
    \ /tmp/tmp5ox3w8d0.rs:33:28\n    |\n33  |             operators.push(*ops.clone());\n\
    \    |                       ---- ^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |                       |\n    |                       required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[String]`\nnote: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]:\
    \ the size for values of type `[String]` cannot be known at compilation time\n\
    \   --> /tmp/tmp5ox3w8d0.rs:32:33\n    |\n32  |             let mut operators\
    \ = Vec::new();\n    |                "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Check\
    \ whether the length of operator vector is equal to the length of operand vector\
    \ minus one.\n    if operator.len() != operand.len() {\n        throw ArithmeticError::ArithmeticError(format!(\n\
    \            \"Arithmetic operation vector length must equal the operand vector\
    \ length minus 1.\"\n        ))\n    }\n\n    // Check whether two vectors have\
    \ the same number of elements.\n    if operator.len() != operand.len() {\n   \
    \     throw ArithmeticError::ArithmeticError(format!(\n            \"Arithmetic\
    \ operation vector length must equal the operand vector length minus 1.\"\n  \
    \      ))\n    }\n\n    // Use two loops to calculate each element of the result\
    \ vector.\n    let mut result: isize = operand[0];\n    for i in 0..operator.len()\
    \ {\n        result -= operator[i].parse::<i32>().unwrap() * operand[i + 1];\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `ArithmeticError`\n  --> /tmp/tmplx5lqhn4.rs:22:15\n   |\n22 |       \
    \  throw ArithmeticError::ArithmeticError(format!(\n   |               ^^^^^^^^^^^^^^^\
    \ expected one of 8 possible tokens\n\nerror: expected one of `!`, `.`, `::`,\
    \ `;`, `?`, `{`, `}`, or an operator, found `ArithmeticError`\n  --> /tmp/tmplx5lqhn4.rs:29:15\n\
    \   |\n29 |         throw ArithmeticError::ArithmeticError(format!(\n   |    \
    \           ^^^^^^^^^^^^^^^ expected one of 8 possible tokens\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplx5lqhn4.rs:37:57\n   |\n37 |         result\
    \ -= operator[i].parse::<i32>().unwrap() * operand[i + 1];\n   |             \
    \                                            ^^^^^^^^^^^^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0277]: cannot multiply `i32` by `isize`\n  --> /tmp/tmplx5lqhn4.rs:37:55\n\
    \   |\n37 |         result -= operator[i].parse::<i32>().unwrap() * operand[i\
    \ + 1];\n   |                                                       ^ no implementation\
    \ for `i32 * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplx5lqhn4.rs:37:19\n\
    \   |\n37 |         result -= operator[i].parse::<i32>().unwrap() * operand[i\
    \ + 1];\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `i32`\n\nerror[E0277]: cannot subtract-assign `i32`\
    \ from `isize`\n  --> /tmp/tmplx5lqhn4.rs:37:16\n   |\n37 |         result -=\
    \ operator[i].parse::<i32>().unwrap() * operand[i + 1];\n   |                ^^\
    \ no implementation for `isize -= i32`\n   |\n   = help: the trait `SubAssign<i32>`\
    \ is not implemented for `isize`\n   = "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operation = String::new();\n    let mut result = String::new();\n\n    for\
    \ i in 0..operator.len() {\n        if let Ok(index) = get_index(operator[i],\
    \ operand) {\n            operation.push_str(operator[i]);\n            operation.push_str(String::from(format!(\"\
    ({}) \", index)));\n            result.push_str(&operation);\n            result.push_str(&String::from(format!(\"\
    ({}) \", operand[index])));\n        }\n    }\n\n    match result.len() {\n  \
    \      0 => return 0,\n        1 => operand[0],\n        _ => return result[0].parse::<isize>().unwrap_or(0),\n\
    \    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_index` in this scope\n  --> /tmp/tmpy_8sjggu.rs:24:28\n\
    \   |\n24 |         if let Ok(index) = get_index(operator[i], operand) {\n   |\
    \                            ^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy_8sjggu.rs:25:32\n   |\n25 |             operation.push_str(operator[i]);\n\
    \   |                                ^^^^^^^^^^^\n   |                       \
    \         |\n   |                                expected `&str`, found struct\
    \ `String`\n   |                                help: consider borrowing here:\
    \ `&operator[i]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy_8sjggu.rs:26:32\n\
    \   |\n26 |             operation.push_str(String::from(format!(\"({}) \", index)));\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \
    \  |                                |\n   |                                expected\
    \ `&str`, found struct `String`\n   |                                help: consider\
    \ borrowing here: `&String::from(format!(\"({}) \", index))`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpy_8sjggu.rs:35:21\n\
    \   |\n35 |         _ => return result[0].parse::<isize>().unwrap_or(0),\n   |\
    \                     ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n  \
    \ |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.is_empty()\
    \ {\n        return 0.;\n    }\n    let mut result = 0.;\n    let mut op_iter\
    \ = operator.into_iter();\n    let mut num = 0;\n    op_iter.for_each(|op| {\n\
    \        if num == 0 {\n            result += operand[num] * operand[num + 1];\n\
    \            num += 2;\n        } else {\n            result += operand[num] *\
    \ operand[num + 1];\n            num += 2;\n        }\n    });\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7j86gd1.rs:21:16\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |                                                              ----- expected\
    \ `isize` because of return type\n20 |     if operator.is_empty() {\n21 |    \
    \     return 0.;\n   |                ^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpo7j86gd1.rs:28:20\n\
    \   |\n28 |             result += operand[num] * operand[num + 1];\n   |     \
    \               ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpo7j86gd1.rs:31:20\n   |\n31 |\
    \             result += operand[num] * operand[num + 1];\n   |               \
    \     ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo7j86gd1.rs:35:5\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                        ----- expected `isize` because of return type\n...\n\
    35 |     result\n   |     ^^^^^^ expected `isize`, found f"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"Invalid vector length\")\n    }\n \
    \   let mut result = operand.last().unwrap();\n    for x in operator.iter() {\n\
    \        result = operators.binary_operation(result, x, operand.last().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `operators` in this scope\n  --> /tmp/tmp2eufgvye.rs:25:18\n\
    \   |\n25 |         result = operators.binary_operation(result, x, operand.last().unwrap());\n\
    \   |                  ^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `operator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2eufgvye.rs:27:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                              ----- expected\
    \ `isize` because of return type\n...\n27 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    27 |     *result\n   |     +\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n\n    for &op in &operator {\n        if op == \"\
    +\" {\n            result += operand[1];\n        }\n        if op == \"-\" {\n\
    \            result -= operand[1];\n        }\n        if op == \"*\" {\n    \
    \        result *= operand[1];\n        }\n        if op == \"/\" {\n        \
    \    result /= operand[1];\n        }\n        if op == \"//\" {\n           \
    \ result /= operand[1];\n        }\n        if op == \"**\" {\n            result\
    \ *= operand[1];\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of a shared reference\n  --> /tmp/tmpgmfo6fat.rs:22:16\n\
    \   |\n22 |     for &op in &operator {\n   |         ---    ^^^^^^^^^\n   |  \
    \       ||\n   |         |data moved here\n   |         |move occurs because `op`\
    \ has type `String`, which does not implement the `Copy` trait\n   |         help:\
    \ consider removing the `&`: `op`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0507`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO\n\
    \    let mut result = 0;\n    for element in operand {\n        result = result\
    \ + element;\n    }\n    for element in operator {\n        result = result -\
    \ element;\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `String` from `isize`\n  --> /tmp/tmpm3yyye7y.rs:26:25\n\
    \   |\n26 |         result = result - element;\n   |                         ^\
    \ no implementation for `isize - String`\n   |\n   = help: the trait `Sub<String>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = 0;\n\n    for i in 0..operand.len() {\n        match &operator[&i]\
    \ {\n            \"+\" => res += operand[i],\n            \"-\" => res -= operand[i],\n\
    \            \"*\" => res += operand[i] * operand[i],\n            \"/\" => res\
    \ /= operand[i],\n            \"//\" => res /= operand[i],\n            \"**\"\
    \ => res += operand[i] * operand[i] * operand[i],\n            _ => panic!(\"\
    Invalid operator {}\", operator[&i]),\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[String]` cannot be indexed by `&usize`\n  -->\
    \ /tmp/tmpfvhe393y.rs:23:16\n   |\n23 |         match &operator[&i] {\n   |  \
    \              ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[String]>` is not implemented for `&usize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&usize>` for `Vec<String>`\n\
    \nerror[E0277]: the type `[String]` cannot be indexed by `&usize`\n  --> /tmp/tmpfvhe393y.rs:30:48\n\
    \   |\n30 |             _ => panic!(\"Invalid operator {}\", operator[&i]),\n\
    \   |                                                ^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>`\
    \ is not implemented for `&usize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&usize>` for `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = vec![0; operator.len()];\n    for idx in 0..operator.len() {\n\
    \        result[idx] = operator[idx].to_owned()\n            .iter()\n       \
    \     .map(|ch| {\n                if ch == '+' || ch == '-' || ch == '*' || ch\
    \ == '/' || ch == '**' {\n                    let mut operands: Vec<isize> = operand.clone();\n\
    \                    operands.push(operand.len() - 1);\n                    let\
    \ mut chr = ch.to_owned();\n                    chr = chr.remove(0);\n       \
    \             let mut operand = operand.clone();\n                    operand.push(operands.len()\
    \ - 1);\n                    match chr {\n                        '0' => 0,\n\
    \                        '1' => 1,\n                        '2' => 2,\n      \
    \                  '3' => 3,\n                        '4' => 4,\n            \
    \            '5' => 5,\n                        '6' => 6,\n                  \
    \      '7' => 7,\n                        '8' => 8,\n                        '9'\
    \ => 9,\n                        '+' => +,\n                        '-' => -,\n\
    \                        '*' => *,\n                        '/' => /,\n      \
    \                  '**' => **,\n                    };\n                }\n  \
    \              else {\n                    ch.parse().unwrap()\n             \
    \   }\n            })\n            .sum()\n            .unwrap();\n    }\n   \
    \ result[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpa55fvfri.rs:25:78\n\
    \   |\n25 |                 if ch == '+' || ch == '-' || ch == '*' || ch == '/'\
    \ || ch == '**' {\n   |                                                      \
    \                        ^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n25 |                 if ch == '+' || ch == '-' || ch\
    \ == '*' || ch == '/' || ch == \"**\" {\n   |                                \
    \                                              ~~~~\n\nerror: character literal\
    \ may only contain one codepoint\n  --> /tmp/tmpa55fvfri.rs:47:25\n   |\n47 |\
    \                         '**' => **,\n   |                         ^^^^\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n47 |   \
    \                      \"**\" => **,\n   |                         ~~~~\n\nerror:\
    \ expected expression, found `+`\n  --> /tmp/tmpa55fvfri.rs:43:32\n   |\n43 |\
    \                         '+' => +,\n   |                             -- ^ expected\
    \ expression\n   |                             |\n   |                       \
    \      while parsing the `match` arm starting here\n\nerror[E0599]: no method\
    \ named `iter` found for struct `String` in the current scope\n  --> /tmp/tmpa55fvfri.rs:23:14\n\
    \   |\n23 |             .iter()\n   |              ^^^^ method not found in `String`\n\
    \   |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator`\
    \ over each of its codepoint use method `chars`\n   |\n23 |             .chars()\n\
    \   |              ~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa55fvfri.rs:27:35\n\
    \   |\n27 |                     operands.push(operand.len() - 1);\n   |      \
    \                             ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n27 |                     operands.push((operand.len()\
    \ - 1).try_into().unwrap());\n   |                                   +       \
    \          +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa55fvfri.rs:31:34\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Your\
    \ code here\n    \n    match operator {\n        vec![\"+\"] | vec![\"-\"] | vec![\"\
    *\"] | vec![\"/\"] | vec![\"//\"] | vec![\"**\"] | vec![\"<<\"] | vec![\">>\"\
    ] | vec![\"<=\"] | vec![\"<\"] | vec![\">=\"] | vec![\">\"] | vec![\"==\"] | vec![\"\
    !=\"] => {\n            do_algebra_math(operator, operand)\n        }\n      \
    \  _ => { println!(\"Not valid operator: {}\", operator); return 0 }\n    }\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_algebra_math` in this scope\n  -->\
    \ /tmp/tmpaat8c8f7.rs:24:13\n   |\n24 |             do_algebra_math(operator,\
    \ operand)\n   |             ^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpaat8c8f7.rs:23:9\n\
    \   |\n23 | ...   vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"/\"] | vec![\"\
    //\"] | vec![\"**\"] | vec![\"<<\"] | vec![\">>\"] | vec![\"<=\"] | vec![\"<\"\
    ] | vec![\"...\n   |       ^^^^^^^^^\n   |\n   = note: this error originates in\
    \ the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpaat8c8f7.rs:23:21\n\
    \   |\n23 | ...   vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"/\"] | vec![\"\
    //\"] | vec![\"**\"] | vec![\"<<\"] | vec![\">>\"] | vec![\"<=\"] | vec![\"<\"\
    ] | vec![\"...\n   |                   ^^^^^^^^^\n   |\n   = note: this error\
    \ originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpaat8c8f7.rs:23:33\n   |\n23 | ...   vec![\"+\"] | vec![\"-\"] |\
    \ vec![\"*\"] | vec![\"/\"] | vec![\"//\"] | vec![\"**\"] | vec![\"<<\"] | vec![\"\
    >>\"] | vec![\"<=\"] | vec![\"<\"] | vec![\"...\n   |                        \
    \       ^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec` (in\
    \ Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmpaat8c8f7.rs:23:45\n  \
    \ |\n23 | ...   vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"/\"] | vec![\"\
    //\"] | vec![\"**\"] | vec![\"<<\"] | vec![\">>\"] | vec![\"<=\"] | vec![\"<\"\
    ] | vec![\"...\n   |                                           ^^^^^^^^^\n   |\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't allowed\
    \ in patterns\n  --> /tmp/tmpaat8c8f7.rs:23:57\n   |\n23 | ...   vec![\"+\"] |\
    \ vec![\"-\"] | vec![\"*\"] | vec![\"/\"] | vec![\"//\"] | vec![\"**\"] | vec![\"\
    <<\"] | vec![\">>\"] | vec![\"<=\"] | vec![\"<\"] | vec![\"...\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Initialize\
    \ the result with zero\n    let mut result = vec![0; operator.len()];\n    //\
    \ Go through all operators\n    for i in 0..operator.len() {\n        // Get the\
    \ index for the operator\n        let operator_index: usize = i;\n        // Get\
    \ the index of the operand\n        let operand_index: usize = i - 1;\n      \
    \  // Get the operator itself\n        let operator: String = operator[i];\n \
    \       // Get the operand itself\n        let operand: isize = operand[operand_index];\n\
    \        // Handle the case of addition\n        if operator == \"+\" {\n    \
    \        // Add the operand to the result\n            result = add_two_vectors(result,\
    \ operand);\n            // Keep going through all the operators\n           \
    \ continue;\n        }\n        // Handle the case of subtraction\n        if\
    \ operator == \"-\" {\n            // Subtract the operand from the result\n \
    \           result = subtract_two_vectors(result, operand);\n            // Keep\
    \ going through all the operators\n            continue;\n        }\n        //\
    \ Handle the case of multiplication\n        if operator == \"*\" {\n        \
    \    // Multiply the operand to the result\n            result = multiply_two_vectors(result,\
    \ operand);\n            // Keep going through all the operators\n           \
    \ continue;\n        }\n        // Handle the case of floor division\n       \
    \ if operator == \"/\" {\n            // Get the floor division of the operand\
    \ and the result\n            let result: isize = floor_division(result, operand);\n\
    \            // Keep going through all the operators\n            continue;\n\
    \        }\n        // Handle the case of exponential\n        if operator ==\
    \ \"**\" {\n            // Get the exponential of the operand and result\n   \
    \         let result: isize = exponential(result, operand);\n            // Keep\
    \ going through all the operators\n            continue;\n        }\n        //\
    \ Handle the case of division by zero\n        if operator == \"/\" {\n      \
    \      // Divided by zero\n            assert!(operand_index >= 0 && operand_index\
    \ < operand.len());\n            result = vec![0.0; operand.len()];\n        \
    \    // Keep going through all the operators\n            continue;\n        }\n\
    \    }\n    // Return the result without modifying the original operand\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `add_two_vectors` in this scope\n  -->\
    \ /tmp/tmpl9ycyy9c.rs:35:22\n   |\n35 |             result = add_two_vectors(result,\
    \ operand);\n   |                      ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `subtract_two_vectors` in this scope\n  -->\
    \ /tmp/tmpl9ycyy9c.rs:42:22\n   |\n42 |             result = subtract_two_vectors(result,\
    \ operand);\n   |                      ^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `multiply_two_vectors` in this scope\n\
    \  --> /tmp/tmpl9ycyy9c.rs:49:22\n   |\n49 |             result = multiply_two_vectors(result,\
    \ operand);\n   |                      ^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `floor_division` in this scope\n\
    \  --> /tmp/tmpl9ycyy9c.rs:56:33\n   |\n56 |             let result: isize = floor_division(result,\
    \ operand);\n   |                                 ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `exponential` in this scope\n\
    \  --> /tmp/tmpl9ycyy9c.rs:63:33\n   |\n63 |             let result: isize = exponential(result,\
    \ operand);\n   |                                 ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpl9ycyy9c.rs:70:67\n   |\n70 |             assert!(operand_index\
    \ >= 0 && operand_index < operand.len());\n   |                              \
    \                                     ^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl9ycyy9c.rs:71:27\n   |\n71 |             result\
    \ = vec![0.0; operand.len()];\n   |                           ^^^ expected integer,\
    \ found floating-point number\n\nerror[E0599]: no method named `len` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpl9ycyy9c.rs:71:40\n   |\n71\
    \ |             result = vec![0.0; operand.len()];\n   |                     \
    \                   ^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl9ycyy9c.rs:77:5\n   |\n19 | fn do_algebra("
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Initialize\
    \ result to the first operand\n    let result = operand[0];\n    let mut op_length\
    \ = 0;\n\n    // Loop through the given operators and operands and do the algebra\
    \ operation\n    for i in 0..operator.len() - 1 {\n        op_length += operator[i].len()\
    \ + 1;\n        match operator[i] {\n            Operator::Add() => result +=\
    \ operand[1 + i],\n            Operator::Sub() => result -= operand[1 + i],\n\
    \            Operator::Mul() => result *= operand[1 + i],\n            Operator::FloorDiv\
    \ => result /= operand[1 + i],\n            Operator::Exp => result **= operand[1\
    \ + i],\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp7yj2wehw.rs:32:38\n\
    \   |\n32 |             Operator::Exp => result **= operand[1 + i],\n   |    \
    \                       --         ^^ expected expression\n   |              \
    \             |\n   |                           while parsing the `match` arm\
    \ starting here\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmp7yj2wehw.rs:28:13\n   |\n28 |             Operator::Add() => result\
    \ += operand[1 + i],\n   |             ^^^^^^^^ use of undeclared type `Operator`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmp7yj2wehw.rs:29:13\n\
    \   |\n29 |             Operator::Sub() => result -= operand[1 + i],\n   |   \
    \          ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Operator`\n  --> /tmp/tmp7yj2wehw.rs:30:13\n\
    \   |\n30 |             Operator::Mul() => result *= operand[1 + i],\n   |   \
    \          ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Operator`\n  --> /tmp/tmp7yj2wehw.rs:31:13\n\
    \   |\n31 |             Operator::FloorDiv => result /= operand[1 + i],\n   |\
    \             ^^^^^^^^ use of undeclared type `Operator`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expr = 0;\n    let mut operand = operand.into_iter().collect::<Vec<_>>();\n\
    \    for element in operator {\n        match element {\n            \"+\" =>\
    \ {\n                for operand in &mut operand {\n                    expr +=\
    \ operand;\n                }\n            }\n            \"-\" => {\n       \
    \         for operand in &mut operand {\n                    expr -= operand;\n\
    \                }\n            }\n            \"*\" => {\n                for\
    \ operand in &mut operand {\n                    expr *= operand;\n          \
    \      }\n            }\n            \"/\" => {\n                for operand in\
    \ &mut operand {\n                    expr -= operand / 2;\n                }\n\
    \            }\n            \"^\" => {\n                for operand in &mut operand\
    \ {\n                    expr *= operand * operand;\n                }\n     \
    \       }\n            _ => {\n                for operand in &mut operand {\n\
    \                    expr *= operand;\n                }\n            }\n    \
    \    }\n    }\n    expr\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6kqe2zrx.rs:24:13\n   |\n\
    23 |         match element {\n   |               ------- this expression has type\
    \ `String`\n24 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kqe2zrx.rs:29:13\n\
    \   |\n23 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n29 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kqe2zrx.rs:34:13\n\
    \   |\n23 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n34 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kqe2zrx.rs:39:13\n\
    \   |\n23 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n39 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6kqe2zrx.rs:44:13\n\
    \   |\n23 |         match element {\n   |               ------- this expression\
    \ has type `String`\n...\n44 |             \"^\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0277]: cannot add-assign `&mut isize`\
    \ to `{integer}`\n  --> /tmp/tmp6kqe2zrx.rs:26:26\n   |\n26 |                \
    \     expr += operand;\n   |                          ^^ no implementation for\
    \ `{integer} += &mut isize`\n   |\n   = help: the trait `AddAssign<&mut isize>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot subtract-assign `&mut isize`\
    \ from `{integer}`\n  --> /tmp/tmp6kqe2zrx.rs:31:26\n   |\n31 |              "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // First\
    \ we check whether the length of operator vector equals to the length of operand\
    \ vector minus one.\n    assert!(operator.size() == operand.len() - 1);\n\n  \
    \  // If no operator is provided, then just return 0.\n    let mut result = 0;\n\
    \n    // The for loop will iterate through all the operands.\n    for i in 0..operand.len()\
    \ - 1 {\n        // If the current operand is zero, then return 0.\n        if\
    \ operand[i] == 0 {\n            return 0;\n        }\n\n        // Perform the\
    \ basic algebra operation with the operator, and add the result to the accumulator\
    \ result.\n        result += operator[i] * operand[i];\n    }\n\n    // Return\
    \ the accumulator result.\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmpnjmny69f.rs:21:22\n   |\n21 |     assert!(operator.size()\
    \ == operand.len() - 1);\n   |                      ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0369]: cannot multiply `String`\
    \ by `isize`\n  --> /tmp/tmpnjmny69f.rs:34:31\n   |\n34 |         result += operator[i]\
    \ * operand[i];\n   |                   ----------- ^ ---------- isize\n   | \
    \                  |\n   |                   String\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 101
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    \n \
    \   // Calculate the result by iterating through the operator vector and\n   \
    \ // using the operator and the operand to get the result\n    \n    // This implementation\
    \ iterates the operator vector and uses it\n    // to get the result by iterating\
    \ through the operand vector and\n    // using the operator and operand to get\
    \ the result.\n\n    if operator.len() != operand.len() - 1 {\n        // The\
    \ length of operator vector is not equal to the length of operand vector minus\
    \ one.\n        // return -1;\n    }\n    \n    let mut total = 0;\n    \n   \
    \ for i in 0..operator.len() {\n        // Add the operand vector value to total\
    \ when the operator vector value is equal to operator.\n        // The i is the\
    \ index of the operator vector element.\n        total += operand[operand.len()\
    \ - i - 1];\n    }\n\n    total\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `37`', /tmp/tmpkbcolo8q.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    operator.iter().for_each(|op| {\n  \
    \      match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"//\" => result\
    \ /= operand.iter().cloned().sum(),\n            \"**\" => result **= operand.iter().cloned().sum(),\n\
    \            _ => ()\n        }\n    });\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmprua8o93f.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprua8o93f.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `&String`\n23 |       \
    \      \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `str`\n   |\n   = note: expected reference `&String`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprua8o93f.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `&String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprua8o93f.rs:25:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `&String`\n\
    ...\n25 |             \"*\" => result *= operand.iter().cloned().sum(),\n   |\
    \             ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprua8o93f.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `&String`\n...\n26 |  \
    \           \"//\" => result /= operand.iter().cloned().sum(),\n   |         \
    \    ^^^^ expected struct `String`, found `str`\n   |\n   = note: expected reference\
    \ `&String`\n              found reference `&'static str`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.is_empty());\n\
    \    assert!(operand.is_non_empty());\n\n    if operand.is_empty() {\n       \
    \ return 0;\n    }\n\n    let mut stack: Vec<isize> = vec![];\n    let mut stack_size\
    \ = 0;\n    let mut op = 0;\n\n    while op.len() != operator.len() {\n      \
    \  match operator[op.len()] {\n            \"+\" => stack.append(operand[op.len()\
    \ + 1] + operand[op.len() + 2]),\n            \"-\" => stack.append(operand[op.len()\
    \ + 1] - operand[op.len() + 2]),\n            \"*\" => stack.append(operand[op.len()\
    \ + 1] * operand[op.len() + 2]),\n            \"/\" => stack.append(operand[op.len()\
    \ + 1] / operand[op.len() + 2]),\n            \"%\" => stack.append(operand[op.len()\
    \ + 1] % operand[op.len() + 2]),\n            \"**\" => stack.append(operand[op.len()\
    \ + 1] ** operand[op.len() + 2]),\n            _ => {\n                // operator\
    \ is not a valid operator\n                assert!(op.len() == 0);\n         \
    \       break;\n            }\n        }\n        op += 1;\n    }\n\n    stack[stack_size]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_non_empty` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmphk3cxcf9.rs:21:21\n   |\n21 |     assert!(operand.is_non_empty());\n\
    \   |                     ^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `is_empty`\n\nerror[E0689]: can't call method `len` on ambiguous\
    \ numeric type `{integer}`\n  --> /tmp/tmphk3cxcf9.rs:31:14\n   |\n31 |     while\
    \ op.len() != operator.len() {\n   |              ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n29 |     let mut op: i32 = 0;\n \
    \  |         ~~~~~~~~~~~\n\nerror[E0689]: can't call method `len` on ambiguous\
    \ numeric type `{integer}`\n  --> /tmp/tmphk3cxcf9.rs:32:27\n   |\n32 |      \
    \   match operator[op.len()] {\n   |                           ^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `i32`\n   |\n29 |     let mut\
    \ op: i32 = 0;\n   |         ~~~~~~~~~~~\n\nerror[E0689]: can't call method `len`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmphk3cxcf9.rs:33:44\n   |\n\
    33 |             \"+\" => stack.append(operand[op.len() + 1] + operand[op.len()\
    \ + 2]),\n   |                                            ^^^\n   |\nhelp: you\
    \ must specify a type for this binding, like `i32`\n   |\n29 |     let mut op:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~\n\nerror[E0689]: can't call method `len`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmphk3cxcf9.rs:33:68\n   |\n\
    33 |             \"+\" => stack.append(operand[op.len() + 1] + operand[op.len()\
    \ + 2]),\n   |                                                               \
    \     ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n29 |     let mut op: i32 = 0;\n   |         ~~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `len` on ambiguous numeric type `{integer}`\n  --> /tmp/tmphk3cxcf9.rs:34:44\n\
    \   |\n34 |             \"-\" => stack.append(operand[op.len() + 1] - operand[op.len()\
    \ + 2]),\n   |                                            ^^^\n   |\nhelp: you\
    \ must specify a type for this binding, like `i32`\n   |\n29 |     let mut op:\
    \ i32 = 0;\n   |         ~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ implement the algorithm\n    // let mut result = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    \n    // for i in 0..operand.len() {\n    //     let v = operand[i];\n  \
    \  //     let mut b = operand.iter().cloned().collect::<Vec<_>>();\n    //   \
    \  b.clear();\n    //     let mut new_operand = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    //     let mut new_operator = operator.iter().cloned().collect::<Vec<_>>();\n\
    \    //     new_operator.clear();\n    //     while new_operand.is_empty() {\n\
    \    //         new_operand = operand.iter().cloned().collect::<Vec<_>>();\n \
    \   //     }\n    //     while new_operator.is_empty() {\n    //         new_operator\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    //     }\n    //     while\
    \ !new_operand.is_empty() && !new_operator.is_empty() {\n    //         if new_operand.len()\
    \ == 1 {\n    //             new_operand.push(v);\n    //         } else if new_operator.len()\
    \ == 1 {\n    //             new_operator.push(new_operand[0]);\n    //      \
    \   } else {\n    //             let mut new_b = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    //             new_b.clear();\n    //             let mut new_operand = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    //             let mut new_operator = operator.iter().cloned().collect::<Vec<_>>();\n\
    \    //             new_operator.clear();\n    //             while new_operand.is_empty()\
    \ {\n    //                 new_operand = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    //             }\n    //             while new_operator.is_empty() {\n  \
    \  //                 new_operator = operator.iter().cloned().collect::<Vec<_>>();\n\
    \    //             }\n    //             while !new_operand.is_empty() && !new_operator.is_empty()\
    \ {\n    //                 if new_operand.len() == 1 {\n    //              \
    \       new_operand.push(v);\n    //                 } else if new_operator.len()\
    \ == 1 {\n    //                     new_operator.push(new_operand[0]);\n    //\
    \                 } else {\n    //                     let mut new_b = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    //                     new_b.clear();\n    //                     let mut\
    \ new_operand = operand.iter().cloned().collect::<Vec<_>>();\n    //         \
    \            let mut new_operator = operator.iter().cloned().collect::<\n}\n\n\
    fn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd_2rjs53.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operand.len()\
    \ == 0 || operator.len() == 0 {\n        panic!(\"The length of operator vector\
    \ is zero or length of operand vector is zero.\");\n    }\n    \n    let mut result\
    \ = 0;\n    for index in 0..operand.len() {\n        result += operator.0[operator.0.len()\
    \ - 1]\n            * (operand.0[index] - operand.0[index - 1]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `Vec<String>`\n  --> /tmp/tmptmdgt57i.rs:26:28\n\
    \   |\n26 |         result += operator.0[operator.0.len() - 1]\n   |         \
    \                   ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<String>`\n\
    \  --> /tmp/tmptmdgt57i.rs:26:39\n   |\n26 |         result += operator.0[operator.0.len()\
    \ - 1]\n   |                                       ^ unknown field\n\nerror[E0609]:\
    \ no field `0` on type `Vec<isize>`\n  --> /tmp/tmptmdgt57i.rs:27:24\n   |\n27\
    \ |             * (operand.0[index] - operand.0[index - 1]);\n   |           \
    \             ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n\
    \  --> /tmp/tmptmdgt57i.rs:27:43\n   |\n27 |             * (operand.0[index] -\
    \ operand.0[index - 1]);\n   |                                           ^ unknown\
    \ field\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0609`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ std::mem::transmute;\n    match operator.len() {\n        1 => operand.iter().map(|x|\
    \ operator[0].parse::<isize>().unwrap()).sum(),\n        2 => operand.iter().map(|x|\
    \ operator[0].parse::<isize>().unwrap()).iter().map(|y| operator[1].parse::<isize>().unwrap()).sum(),\n\
    \        _ => panic!(\"Operator vector has more then two operators\"),\n    }\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::mem::transmute`\n  --> /tmp/tmpmrw419eq.rs:20:9\n\
    \   |\n20 |     use std::mem::transmute;\n   |         ^^^^^^^^^^^^^^^^^^^\n \
    \  |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method\
    \ named `iter` found for struct `Map` in the current scope\n  --> /tmp/tmpmrw419eq.rs:23:76\n\
    \   |\n23 |         2 => operand.iter().map(|x| operator[0].parse::<isize>().unwrap()).iter().map(|y|\
    \ operator[1].parse::<isize>().unwrap()).sum(),\n   |                        \
    \                                                    ^^^^ private field, not a\
    \ method\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ Implement algorithm with recursion\n    if operator.len() == 0 || operand.len()\
    \ == 0 {\n        println!(\"Invalid input\");\n        return -1;\n    }\n\n\
    \    let mut result = operand[0];\n    for op in operator.iter() {\n        match\
    \ op.as_str() {\n            \"+\" => result += operand[1],\n            \"-\"\
    \ => result -= operand[1],\n            \"*\" => result *= operand[1],\n     \
    \       \"//\" => result /= operand[1],\n            \"**\" => result **= operand[1],\n\
    \            _ => println!(\"Invalid input\");\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpm3jtovtx.rs:33:29\n\
    \   |\n33 |             \"**\" => result **= operand[1],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 || operand.len() == 0 {\n        panic!(\"Invalid length of vectors\")\n\
    \    }\n\n    if operator.len() != operand.len() {\n        panic!(\"Invalid length\
    \ of operator and operand vectors\")\n    }\n\n    if operator.len() == 1 {\n\
    \        do_algebra_operator(operator[0], operand)\n    } else {\n        do_algebra_operator(operator[0],\
    \ operand)\n            + do_algebra_operator(operator[1], operand)\n    }\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_algebra_operator` in this scope\n\
    \  --> /tmp/tmpd587z6eb.rs:29:9\n   |\n29 |         do_algebra_operator(operator[0],\
    \ operand)\n   |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `do_algebra_operator` in this scope\n  --> /tmp/tmpd587z6eb.rs:31:9\n\
    \   |\n31 |         do_algebra_operator(operator[0], operand)\n   |         ^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `do_algebra_operator`\
    \ in this scope\n  --> /tmp/tmpd587z6eb.rs:32:15\n   |\n32 |             + do_algebra_operator(operator[1],\
    \ operand)\n   |               ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"Invalid input arguments\");\n    }\n\
    \n    // Create the expression and evaluate the expression\n    let expression\
    \ = AlgebraExpression::new(operator, operand).unwrap();\n    expression.evaluate().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `AlgebraExpression`\n\
    \  --> /tmp/tmpvxdr_t6o.rs:25:22\n   |\n25 |     let expression = AlgebraExpression::new(operator,\
    \ operand).unwrap();\n   |                      ^^^^^^^^^^^^^^^^^ use of undeclared\
    \ type `AlgebraExpression`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Extract\
    \ the operators form the operator vector and perform algebra operation on operands\n\
    \    for op in operator {\n        if op == \"+\" {\n            operand + operand\n\
    \        } else if op == \"-\" {\n            operand - operand\n        } else\
    \ if op == \"*\" {\n            operand * operand\n        } else if op == \"\
    /\" {\n            operand / operand\n        } else if op == \"//\" {\n     \
    \       operand // operand\n        } else if op == \"**\" {\n            operand\
    \ ** operand\n        }\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmphmo1gd23.rs:23:21\n\
    \   |\n23 |             operand + operand\n   |             ------- ^ -------\
    \ Vec<isize>\n   |             |\n   |             Vec<isize>\n\nerror[E0369]:\
    \ cannot subtract `Vec<isize>` from `Vec<isize>`\n  --> /tmp/tmphmo1gd23.rs:25:21\n\
    \   |\n25 |             operand - operand\n   |             ------- ^ -------\
    \ Vec<isize>\n   |             |\n   |             Vec<isize>\n\nerror[E0369]:\
    \ cannot multiply `Vec<isize>` by `Vec<isize>`\n  --> /tmp/tmphmo1gd23.rs:27:21\n\
    \   |\n27 |             operand * operand\n   |             ------- ^ -------\
    \ Vec<isize>\n   |             |\n   |             Vec<isize>\n\nerror[E0369]:\
    \ cannot divide `Vec<isize>` by `Vec<isize>`\n  --> /tmp/tmphmo1gd23.rs:29:21\n\
    \   |\n29 |             operand / operand\n   |             ------- ^ -------\
    \ Vec<isize>\n   |             |\n   |             Vec<isize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphmo1gd23.rs:31:13\n   |\n30 |           } else\
    \ if op == \"//\" {\n   |  ________________-\n31 | |             operand // operand\n\
    \   | |             ^^^^^^^ expected `()`, found struct `Vec`\n32 | |        \
    \ } else if op == \"**\" {\n33 | |             operand ** operand\n34 | |    \
    \     }\n   | |_________- expected this to be `()`\n   |\n   = note: expected\
    \ unit type `()`\n                 found struct `Vec<isize>`\n\nerror[E0369]:\
    \ cannot multiply `Vec<isize>` by `[isize]`\n  --> /tmp/tmphmo1gd23.rs:33:21\n\
    \   |\n33 |             operand ** operand\n   |             ------- ^---------\
    \ [isize]\n   |             |\n   |             Vec<isize>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphmo1gd23.rs:21:5\n   |\n19 |   fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                       ----- expected `isize` because of return\
    \ type\n20 |       // Extract the operators form the operator vector and perform\
    \ algebra operation on operands\n21 | /     for op in operator {\n22 | |     \
    \    if op == \"+\" {\n23 | |             operand + operand\n24 | |         }\
    \ else if "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    assert!(operator.len()\
    \ >= 1 && operand.len() >= 2, \"Invalid vector size\");\n    \n    \n    \n  \
    \  \n    // TODO : refactor this function to use loop\n    let operator_string\
    \ = operator[0];\n    let op1 = operand[0];\n    let op2 = operand[1];\n    let\
    \ op3 = operand[2];\n    let op4 = operand[3];\n    \n    \n    // TODO: handle\
    \ operators with more than 4 operands\n    match operator {\n        vec![\"+\"\
    ] => {\n            let op = op1 + op2 + op3 + op4;\n            return op;\n\
    \        }\n        vec![\"-\"] => {\n            let op = op1 - op2 - op3 - op4;\n\
    \            return op;\n        }\n        vec![\"*\"] => {\n            let\
    \ op = op1 * op2 * op3 * op4;\n            return op;\n        }\n        vec![\"\
    /\"] => {\n            let op = op1 / op2 / op3 / op4;\n            return op;\n\
    \        }\n        vec![\"//\"] => {\n            let op = op1 // op2 // op3\
    \ // op4;\n            return op;\n        }\n        vec![\"**\"] => {\n    \
    \        let op = op1 ** op2 ** op3 ** op4;\n            return op;\n        }\n\
    \        _ => panic!(\"Unsupported operator\")\n    }\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpijmv6emg.rs:52:25\n\
    \   |\n52 |             let op = op1 // op2 // op3 // op4;\n   |             \
    \            ^ help: add `;` here\n53 |             return op;\n   |         \
    \    ------ unexpected token\n\nerror: arbitrary expressions aren't allowed in\
    \ patterns\n  --> /tmp/tmpijmv6emg.rs:35:9\n   |\n35 |         vec![\"+\"] =>\
    \ {\n   |         ^^^^^^^^^\n   |\n   = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror:\
    \ arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpijmv6emg.rs:39:9\n\
    \   |\n39 |         vec![\"-\"] => {\n   |         ^^^^^^^^^\n   |\n   = note:\
    \ this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpijmv6emg.rs:43:9\n   |\n43 |         vec![\"*\"] => {\n   |   \
    \      ^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec` (in\
    \ Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmpijmv6emg.rs:47:9\n   |\n\
    47 |         vec![\"/\"] => {\n   |         ^^^^^^^^^\n   |\n   = note: this error\
    \ originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: arbitrary expressions aren't allowed in patterns\n\
    \  --> /tmp/tmpijmv6emg.rs:51:9\n   |\n51 |         vec![\"//\"] => {\n   |  \
    \       ^^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary\
    \ expressions aren't allowed in patterns\n  --> /tmp/tmpijmv6emg.rs:55:9\n   |\n\
    55 |         vec![\"**\"] => {\n   |         ^^^^^^^^^^\n   |\n   = note: this\
    \ error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpijmv6emg.rs:56:27\n\
    \   |\n56 |             let op = op1 ** op2 ** op3 ** op4;\n   |             \
    \              ^^^^^\n\nerror[E0614]: type `isize` can"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().fold(0, |a, b| a + b);\n    for (i, item) in operand.iter().enumerate()\
    \ {\n        match operator.iter().nth(i) {\n            '+' => {\n          \
    \      result = result + item;\n            }\n            '-' => {\n        \
    \        result = result - item;\n            }\n            '*' => {\n      \
    \          result = result * item;\n            }\n            '/' => {\n    \
    \            result = result / item;\n            }\n            '**' => {\n \
    \               result = result ** item;\n            }\n            _ => {}\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpnwu70xoh.rs:35:13\n\
    \   |\n35 |             '**' => {\n   |             ^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n35 |             \"**\" =>\
    \ {\n   |             ~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnwu70xoh.rs:23:13\n\
    \   |\n22 |         match operator.iter().nth(i) {\n   |               ----------------------\
    \ this expression has type `Option<&String>`\n23 |             '+' => {\n   |\
    \             ^^^ expected enum `Option`, found `char`\n   |\n   = note: expected\
    \ enum `Option<&String>`\n              found type `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnwu70xoh.rs:26:13\n   |\n22 |         match operator.iter().nth(i)\
    \ {\n   |               ---------------------- this expression has type `Option<&String>`\n\
    ...\n26 |             '-' => {\n   |             ^^^ expected enum `Option`, found\
    \ `char`\n   |\n   = note: expected enum `Option<&String>`\n              found\
    \ type `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnwu70xoh.rs:29:13\n\
    \   |\n22 |         match operator.iter().nth(i) {\n   |               ----------------------\
    \ this expression has type `Option<&String>`\n...\n29 |             '*' => {\n\
    \   |             ^^^ expected enum `Option`, found `char`\n   |\n   = note: expected\
    \ enum `Option<&String>`\n              found type `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnwu70xoh.rs:32:13\n   |\n22 |         match operator.iter().nth(i)\
    \ {\n   |               ---------------------- this expression has type `Option<&String>`\n\
    ...\n32 |             '/' => {\n   |             ^^^ expected enum `Option`, found\
    \ `char`\n   |\n   = note: expected enum `Option<&String>`\n              found\
    \ type `char`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ add check constraints on vector sizes\n    \n    // Find the length of the operator\
    \ vector\n    let op_len = operator.len();\n\n    // Find the length of the operand\
    \ vector\n    let op_len2 = operand.len();\n\n    // Find out the size of the\
    \ result vector\n    let result_size = (op_len2 - 1).min(op_len) + 1;\n    //\
    \ Allocate space for the result\n    let mut result = vec![0; result_size];\n\
    \    \n    // Iterate over all the operands\n    for i in 0..op_len2 {\n     \
    \   // Add the operand to result\n        result[op_len2 - 1 + i] += operand[i];\n\
    \    }\n\n    // Iterate over the operator to do the evaluation\n    for i in\
    \ 0..op_len {\n        // Perform the operation and add it to result\n       \
    \ result[op_len - 1 - i] += operator[i](operand[op_len - 1 - i]);\n    }\n\n \
    \   // Return the result to the caller\n    result[0]\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `String`\n  --> /tmp/tmprzkwp9kr.rs:42:35\n\
    \   |\n42 |         result[op_len - 1 - i] += operator[i](operand[op_len - 1 -\
    \ i]);\n   |                                   ^^^^^^^^^^^-------------------------\n\
    \   |                                   |\n   |                              \
    \     call expression requires function\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    debug_assert_ne!(operator,\
    \ Operator::None);\n    debug_assert_ne!(operand, Operand::None);\n\n    let operator:\
    \ Vec<String> = operator;\n    let operand: Vec<isize> = operand;\n\n    let mut\
    \ result = 0;\n\n    for op in operator {\n        match op {\n            Operator::Addition\
    \ => {\n                for i in operand.iter() {\n                    result\
    \ += i;\n                }\n            }\n            Operator::Subtraction =>\
    \ {\n                for i in operand.iter() {\n                    result -=\
    \ i;\n                }\n            }\n            Operator::Multiplication =>\
    \ {\n                for i in operand.iter() {\n                    result *=\
    \ i;\n                }\n            }\n            Operator::FloorDivision =>\
    \ {\n                for i in operand.iter() {\n                    if i % 2 ==\
    \ 0 {\n                        result /= i;\n                    }\n         \
    \       }\n            }\n            Operator::Exponentiation => {\n        \
    \        for i in operand.iter() {\n                    result **= i;\n      \
    \          }\n            }\n            _ => {\n                unimplemented!();\n\
    \            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpjncs9ttl.rs:54:29\n\
    \   |\n54 |                     result **= i;\n   |                          \
    \   ^^ expected expression\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operator`\n  --> /tmp/tmpjncs9ttl.rs:20:32\n   |\n20 |     debug_assert_ne!(operator,\
    \ Operator::None);\n   |                                ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operand`\n\
    \  --> /tmp/tmpjncs9ttl.rs:21:31\n   |\n21 |     debug_assert_ne!(operand, Operand::None);\n\
    \   |                               ^^^^^^^ use of undeclared type `Operand`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpjncs9ttl.rs:30:13\n\
    \   |\n30 |             Operator::Addition => {\n   |             ^^^^^^^^ use\
    \ of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Operator`\n  --> /tmp/tmpjncs9ttl.rs:35:13\n   |\n35 |             Operator::Subtraction\
    \ => {\n   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operator`\n  --> /tmp/tmpjncs9ttl.rs:40:13\n\
    \   |\n40 |             Operator::Multiplication => {\n   |             ^^^^^^^^\
    \ use of undeclared type `Operator`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Operator`\n  --> /tmp/tmpjncs9ttl.rs:45:13\n   |\n45 |    \
    \         Operator::FloorDivision => {\n   |             ^^^^^^^^ use of undeclared\
    \ type `Operator`\n\nerror[E0433]: failed to resolve: use of undeclared type `Operator`\n\
    \  --> /tmp/tmpjncs9ttl.rs:52:13\n   |\n52 |             Operator::Exponentiation\
    \ => {\n   |             ^^^^^^^^ use of undeclared type `Operator`\n\nerror:\
    \ aborting due to 8 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ std::cmp::Ordering;\n\n    // Calculate the length of operand vector, minus\
    \ one\n    let mut len: usize = operand.len();\n\n    if len == 0 {\n        //\
    \ Cannot do algebra with zero operand\n        0\n    } else {\n        // Get\
    \ the first operand and operator in the vector\n        let mut op1 = operand.first().unwrap();\n\
    \        let op2 = operand.last().unwrap();\n        let mut op: isize;\n\n  \
    \      // The loop goes through all operators in the vector\n        for &op in\
    \ operator {\n            if op == op1 {\n                // Get the operator\
    \ in the vector\n                op = op2;\n            } else {\n           \
    \     // Get the operator in the vector\n                op = op1;\n         \
    \   }\n\n            // Get the first operand in the vector\n            let mut\
    \ op2 = operand.first().unwrap();\n            let mut op1 = operand.last().unwrap();\n\
    \n            // Go through all operands in the vector\n            for &i in\
    \ operand {\n                if i == op1 {\n                    // Get the first\
    \ operand\n                    op1 = op2;\n                } else {\n        \
    \            // Get the second operand\n                    op2 = i;\n       \
    \         }\n\n                // Perform the algebra operation\n            \
    \    op1 += op2;\n\n                // Break out of the loop\n               \
    \ break\n            }\n        }\n\n        op\n    }\n}\n\nfn main() {\n   \
    \ let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"\
    ), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpnmp_g9f7.rs:20:9\n\
    \   |\n20 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnmp_g9f7.rs:35:13\n   |\n35 |         for &op in operator\
    \ {\n   |             ^^^    -------- this expression has type `Option<String>`\n\
    \   |             |\n   |             expected struct `String`, found reference\n\
    \   |             help: you can probably remove the explicit borrow: `op`\n  \
    \ |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpnmp_g9f7.rs:49:17\n   |\n49 |  \
    \           for &i in operand {\n   |                 ^^    ------- this expression\
    \ has type `Option<isize>`\n   |                 |\n   |                 expected\
    \ `isize`, found reference\n   |                 help: you can probably remove\
    \ the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&isize`\n  --> /tmp/tmpnmp_g9f7.rs:59:17\n   |\n59 |   \
    \              op1 += op2;\n   |                 ---^^^^^^^\n   |            \
    \     |\n   |                 cannot use `+=` on type `&isize`\n   |\nhelp: `+=`\
    \ can be used on `isize`, you can dereference `op1`\n   |\n59 |              \
    \   *op1 += op2;\n   |                 +\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308,\
    \ E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() {\n        println!(\"Operator and operand vectors should have\
    \ same size!\");\n        return -1;\n    }\n    let mut result: isize = operand[0].clone();\n\
    \    for i in 0..operand.len() {\n        let op = operator[i];\n        match\
    \ op {\n            \"+\" => {\n                result = result + operand[i];\n\
    \            }\n            \"-\" => {\n                result = result - operand[i];\n\
    \            }\n            \"*\" => {\n                result = result * operand[i];\n\
    \            }\n            \"/\" => {\n                result = result / operand[i];\n\
    \            }\n            \"^\" => {\n                result = result ^ operand[i];\n\
    \            }\n            \"\" => {\n                break;\n            }\n\
    \            _ => {\n                break;\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph3ngfbfb.rs:28:13\n   |\n\
    27 |         match op {\n   |               -- this expression has type `String`\n\
    28 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph3ngfbfb.rs:31:13\n\
    \   |\n27 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n31 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph3ngfbfb.rs:34:13\n\
    \   |\n27 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n34 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph3ngfbfb.rs:37:13\n\
    \   |\n27 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n37 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph3ngfbfb.rs:40:13\n\
    \   |\n27 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n40 |             \"^\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph3ngfbfb.rs:43:13\n\
    \   |\n27 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"\" => {\n   |             ^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    use\
    \ core::cmp::Ordering;\n\n    let mut result = 0;\n\n    for i in 0..operand.len()\
    \ - 1 {\n        match operator[i] {\n            '+' => {\n                result\
    \ += operand[i];\n            }\n            '-' => {\n                result\
    \ -= operand[i];\n            }\n            '*' => {\n                result\
    \ *= operand[i];\n            }\n            '/' => {\n                result\
    \ /= operand[i];\n            }\n            '^' => {\n                result\
    \ = result ^ operand[i];\n            }\n            '**' => {\n             \
    \   result = result ** operand[i];\n            }\n            _ => {}\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpw8_figpu.rs:41:13\n\
    \   |\n41 |             '**' => {\n   |             ^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n41 |             \"**\" =>\
    \ {\n   |             ~~~~\n\nerror[E0433]: failed to resolve: maybe a missing\
    \ crate `core`?\n  --> /tmp/tmpw8_figpu.rs:20:9\n   |\n20 |     use core::cmp::Ordering;\n\
    \   |         ^^^^ maybe a missing crate `core`?\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpw8_figpu.rs:26:13\n   |\n25 |         match operator[i] {\n   |\
    \               ----------- this expression has type `String`\n26 |          \
    \   '+' => {\n   |             ^^^ expected struct `String`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpw8_figpu.rs:29:13\n   |\n25 |  \
    \       match operator[i] {\n   |               ----------- this expression has\
    \ type `String`\n...\n29 |             '-' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8_figpu.rs:32:13\n\
    \   |\n25 |         match operator[i] {\n   |               ----------- this expression\
    \ has type `String`\n...\n32 |             '*' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8_figpu.rs:35:13\n\
    \   |\n25 |         match operator[i] {\n   |               ----------- this expression\
    \ has type `String`\n...\n35 |             '/' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8_figpu.rs:38:13\n\
    \   |\n25 |         match operator[i] {\n   |               ----------- this expression\
    \ has type `String`\n...\n38 |             '^' => {\n   |             ^^^ expected\
    \ struct `String`, found `char`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpw8_figpu.rs:42:34\n   |\n42 |                 result = result **\
    \ operand[i];\n   |                                  ^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0433,\
    \ E0614.\nFor more information about"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operator\n\
    \        .iter()\n        .zip(operand.iter())\n        .map(|(op, arg)| do_algebra_op(op,\
    \ arg))\n        .sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_algebra_op` in this scope\n  -->\
    \ /tmp/tmpn2iep09r.rs:23:26\n   |\n23 |         .map(|(op, arg)| do_algebra_op(op,\
    \ arg))\n   |                          ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut expression = vec![0; operand.len()];\n    for i in 0..expression.len() {\n\
    \        let a = operand[i] - 1;\n        let b = operator[i] - '0';\n       \
    \ expression[i] = expression[a] * expression[b];\n    }\n    expression[expression.len()\
    \ - 1]\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `String`\n  --> /tmp/tmp8dnjtvzw.rs:23:29\n\
    \   |\n23 |         let b = operator[i] - '0';\n   |                 -----------\
    \ ^ --- char\n   |                 |\n   |                 String\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp8dnjtvzw.rs:24:25\n\
    \   |\n24 |         expression[i] = expression[a] * expression[b];\n   |     \
    \                    ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0];\n    for i in 1..operand.len() {\n        let op =\
    \ &operator[i - 1];\n        result = op(result, operand[i]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `&String`\n  --> /tmp/tmptpkkz_xl.rs:23:18\n\
    \   |\n22 |         let op = &operator[i - 1];\n   |             -- `op` has type\
    \ `&String`\n23 |         result = op(result, operand[i]);\n   |             \
    \     ^^--------------------\n   |                  |\n   |                  call\
    \ expression requires function\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // TODO:\
    \ Implement this function\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnabcr92o.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ length = operator.len();\n    let result = vec![operand[0], operand[1]];\n \
    \   for i in 2..length {\n        let mut result = vec![operand[0], operand[1]];\n\
    \        for j in 0..2 {\n            result[j] += operator[j].parse::<isize>()?\
    \ * result[j];\n        }\n        result[length - 1] = result.last().parse::<isize>()?\
    \ * result[length - 1];\n    }\n    result.last()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the `?` operator can only be used in a function that returns\
    \ `Result` or `Option` (or another type that implements `FromResidual`)\n  -->\
    \ /tmp/tmpbu4abwge.rs:25:54\n   |\n19 | / fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n20 | |     let length = operator.len();\n21\
    \ | |     let result = vec![operand[0], operand[1]];\n22 | |     for i in 2..length\
    \ {\n...  |\n25 | |             result[j] += operator[j].parse::<isize>()? * result[j];\n\
    \   | |                                                      ^ cannot use the\
    \ `?` operator in a function that returns `isize`\n...  |\n29 | |     result.last()\n\
    30 | | }\n   | |_- this function should return `Result` or `Option` to accept\
    \ `?`\n   |\n   = help: the trait `FromResidual<Result<Infallible, ParseIntError>>`\
    \ is not implemented for `isize`\n\nerror[E0599]: no method named `parse` found\
    \ for enum `Option` in the current scope\n  --> /tmp/tmpbu4abwge.rs:27:44\n  \
    \ |\n27 |         result[length - 1] = result.last().parse::<isize>()? * result[length\
    \ - 1];\n   |                                            ^^^^^ method not found\
    \ in `Option<&isize>`\n\nerror[E0277]: the `?` operator can only be used in a\
    \ function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n  --> /tmp/tmpbu4abwge.rs:27:60\n   |\n19 | / fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n20 | |     let length = operator.len();\n\
    21 | |     let result = vec![operand[0], operand[1]];\n22 | |     for i in 2..length\
    \ {\n...  |\n27 | |         result[length - 1] = result.last().parse::<isize>()?\
    \ * result[length - 1];\n   | |                                              \
    \              ^ cannot use the `?` operator in a function that returns `isize`\n\
    28 | |     }\n29 | |     result.last()\n30 | | }\n   | |_- this function should\
    \ return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>`\
    \ is not implemented for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbu4abwge.rs:29:5\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>)"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() {\n        std::env::abort();\n    }\n\n    let mut expression:\
    \ Vec<isize> = vec![0; operator.len()];\n    for (i, op) in operator.iter().enumerate()\
    \ {\n        expression[i] = operand.iter().position(|x| x == i).unwrap();\n \
    \   }\n\n    expression[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abort` in module `std::env`\n  -->\
    \ /tmp/tmp7bln5yne.rs:21:19\n   |\n21 |         std::env::abort();\n   |     \
    \              ^^^^^ not found in `std::env`\n   |\nhelp: consider importing one\
    \ of these items\n   |\n1  | use std::intrinsics::abort;\n   |\n1  | use std::process::abort;\n\
    \   |\nhelp: if you import `abort`, refer to it directly\n   |\n21 -         std::env::abort();\n\
    21 +         abort();\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7bln5yne.rs:26:58\n\
    \   |\n26 |         expression[i] = operand.iter().position(|x| x == i).unwrap();\n\
    \   |                                                          ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n  --> /tmp/tmp7bln5yne.rs:26:55\n\
    \   |\n26 |         expression[i] = operand.iter().position(|x| x == i).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&isize == usize`\n   |\n   = help: the trait `PartialEq<usize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7bln5yne.rs:26:25\n   |\n26 |         expression[i] = operand.iter().position(|x|\
    \ x == i).unwrap();\n   |         -------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |         |\n   |         expected due to\
    \ the type of this binding\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ != operand.len() - 1 {\n        panic!(\"The length of operator vector is {}\
    \ and the length of operand vector is {} minus one.\", operator.len(), operand.len());\n\
    \    }\n    let result = 0;\n    operator.iter().zip(operand).for_each(|operator,\
    \ operand| {\n        match operator {\n            \"+\" => result += operand,\n\
    \            \"-\" => result -= operand,\n            \"*\" => result *= operand,\n\
    \            \"//\" => result /= operand as isize,\n            \"**\" => result\
    \ **= operand as isize,\n            _ => panic!(\"Unsupported operator: {}\"\
    , operator),\n        }\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp3an6bu15.rs:30:29\n\
    \   |\n30 |             \"**\" => result **= operand as isize,\n   |         \
    \         --         ^^ expected expression\n   |                  |\n   |   \
    \               while parsing the `match` arm starting here\n\nerror[E0593]: closure\
    \ is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n\
    \  --> /tmp/tmp3an6bu15.rs:24:34\n   |\n24 |     operator.iter().zip(operand).for_each(|operator,\
    \ operand| {\n   |                                  ^^^^^^^^ -------------------\
    \ takes 2 distinct arguments\n   |                                  |\n   |  \
    \                                expected closure that takes a single 2-tuple\
    \ as argument\n   |\nhelp: change the closure to accept a tuple instead of individual\
    \ arguments\n   |\n24 |     operator.iter().zip(operand).for_each(|(operator,\
    \ operand)| {\n   |                                           ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0593`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Your\
    \ code here\n    if operator.len() == 0 || operand.len() == 1 {\n        panic!(\"\
    ERROR: Invalid vector size!\")\n    }\n    let mut res = operand.first().unwrap()\
    \ * operand.last().unwrap();\n    for element in operator.iter().rev().take(operator).rev()\
    \ {\n        let mut num: isize = 0;\n        for element in operand {\n     \
    \       let a = element as isize;\n            num += a * element.pow(2); \n \
    \       }\n        res -= num;\n    }\n    res.saturating_add( operand.last().unwrap()\
    \ )\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4o6fgatp.rs:25:47\n   |\n\
    25 |     for element in operator.iter().rev().take(operator).rev() {\n   |   \
    \                                            ^^^^^^^^ expected `usize`, found\
    \ struct `Vec`\n   |\n   = note: expected type `usize`\n            found struct\
    \ `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4o6fgatp.rs:33:25\n\
    \   |\n33 |     res.saturating_add( operand.last().unwrap() )\n   |          \
    \               ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n33 |     res.saturating_add( *operand.last().unwrap()\
    \ )\n   |                         +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand[0].clone(); // Copy first operand to be used as constant\
    \ for second operand.\n    for i in 0..operator.len() - 1 {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1];\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1];\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1];\n        } else if operator[i]\
    \ == \"/\" {\n            result /= operand[i + 1];\n        } else if operator[i]\
    \ == \"//\" {\n            result %= operand[i + 1];\n        } else if operator[i]\
    \ == \"**\" {\n            result **= operand[i + 1];\n        } else {\n    \
    \        println!(\"Error: operator {} is not supported.\", operator[i]);\n  \
    \      }\n    }\n    result;\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpf1rrvpb1.rs:33:21\n\
    \   |\n33 |             result **= operand[i + 1];\n   |                     ^^\
    \ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf1rrvpb1.rs:19:62\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n...\n38 |     result;\n   |           -\
    \ help: remove this semicolon\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ < 1 || operand.len() < 2 {\n        return 0;\n    }\n    let mut res = 0;\n\
    \    let mut op1 = operand.get(0);\n    let mut op2 = operand.get(1);\n    let\
    \ mut i = 0;\n    for op in operator {\n        let op = match op {\n        \
    \    \"+\" => op1 + op2,\n            \"-\" => op1 - op2,\n            \"*\" =>\
    \ op1 * op2,\n            \"/\" => op1 / op2,\n            \"//\" => op1 // op2,\n\
    \            \"**\" => op1 ** op2,\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        };\n        op1 = op2;\n        op2 = op;\n        i +=\
    \ 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmpln5vrrck.rs:34:13\n   |\n33 |             \"//\"\
    \ => op1 // op2,\n   |                  --    - expected one of 8 possible tokens\n\
    \   |                  |\n   |                  while parsing the `match` arm\
    \ starting here\n34 |             \"**\" => op1 ** op2,\n   |             ^^^^\
    \ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpln5vrrck.rs:29:13\n\
    \   |\n28 |         let op = match op {\n   |                        -- this expression\
    \ has type `String`\n29 |             \"+\" => op1 + op2,\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpln5vrrck.rs:30:13\n   |\n28 |         let op = match op {\n   |\
    \                        -- this expression has type `String`\n29 |          \
    \   \"+\" => op1 + op2,\n30 |             \"-\" => op1 - op2,\n   |          \
    \   ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpln5vrrck.rs:31:13\n   |\n28 |         let op = match op {\n   |\
    \                        -- this expression has type `String`\n...\n31 |     \
    \        \"*\" => op1 * op2,\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpln5vrrck.rs:32:13\n\
    \   |\n28 |         let op = match op {\n   |                        -- this expression\
    \ has type `String`\n...\n32 |             \"/\" => op1 / op2,\n   |         \
    \    ^^^ expected struct `String`, found `&str`\n\nerror[E0369]: cannot add `Option<&isize>`\
    \ to `Option<&isize>`\n  --> /tmp/tmpln5vrrck.rs:29:24\n   |\n29 |           \
    \  \"+\" => op1 + op2,\n   |                    --- ^ --- Option<&isize>\n   |\
    \                    |\n   |                    Option<&isize>\n\nerror[E0369]:\
    \ cannot subtract `Option<&isize>` from `Option<&isize>`\n  --> /tmp/tmpln5vrrck.rs:30:24\n\
    \   |\n30 |             \"-\" => op1 - op2,\n   |                    --- ^ ---\
    \ Option<&isize>\n   |                    |\n   |                    Option<&isize>\n\
    \nerror[E0369]: cannot multiply `Option<&isize>` by `Option<&"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    match\
    \ (operator.len(), operand.len()) {\n        (2..=2) => {\n            let mut\
    \ result = operand[0];\n            for element in &operand[1..] {\n         \
    \       if element.is_zero() {\n                    result = 0;\n            \
    \        break;\n                }\n                result += (element as isize)\
    \ * (operator[element.len() - 1] as isize);\n            }\n            result\n\
    \        }\n        (3..=3) => {\n            let mut result = operand[0];\n \
    \           for element in &operand[1..] {\n                if element.is_zero()\
    \ {\n                    result = 0;\n                    break;\n           \
    \     }\n                result += (element as isize) * ((operator[element.len()\
    \ - 1] as isize) * (operator[element.len() - 2] as isize));\n            }\n \
    \           result\n        }\n        (4..=4) => {\n            let mut result\
    \ = operand[0];\n            for element in &operand[1..] {\n                if\
    \ element.is_zero() {\n                    result = 0;\n                    break;\n\
    \                }\n                result += (element as isize) * ((operator[element.len()\
    \ - 1] as isize) * ((operator[element.len() - 2] as isize) * (operator[element.len()\
    \ - 3] as isize)));\n            }\n            result\n        }\n        (5..=4)\
    \ => {\n            let mut result = operand[0];\n            for element in &operand[1..]\
    \ {\n                if element.is_zero() {\n                    result = 0;\n\
    \                    break;\n                }\n                result += (element\
    \ as isize) * ((operator[element.len() - 1] as isize) * ((operator[element.len()\
    \ - 2] as isize) * ((operator[element.len() - 3] as isize) * (operator[element.len()\
    \ - 4] as isize))));\n            }\n            result\n        }\n        (6..=6)\
    \ => {\n            let mut result = operand[0];\n            for element in &operand[1..]\
    \ {\n                if element.is_zero() {\n                    result = 0;\n\
    \                    break;\n                }\n                result += (element\
    \ as isize) * ((operator[element.len() - 1] as isize) * ((operator[element.len()\
    \ - 2] as isize) * ((operator[element.len() - 3] as isize) * ((operator[element.len()\
    \ - 4] as isize) * (operator[element.len() - 5] as isize)))));\n            }\n\
    \            result\n        }\n        (7..=6) => {\n            let mut result\
    \ = operand[0];\n            for element in &operand[1..] {\n                if\
    \ element.is_zero() {\n                    result = 0;\n                    break;\n\
    \                }\n                result += (element as isize) * ((operator[element.len()\
    \ - 1] as isize) * ((operator[element.len() - 2] as isize) * ((operator[element.len()\
    \ - 3] as isize\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwb803k6r.rs:91:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n20 |     match (operator.len(), operand.len()) {\n   | \
    \                                          - unclosed delimiter\n...\n76 |   \
    \      (7..=6) => {\n   |                    - unclosed delimiter\n77 |      \
    \       let mut result = operand[0];\n78 |             for element in &operand[1..]\
    \ {\n   |                                          - this delimiter might not\
    \ be properly closed...\n...\n84 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n91 | }\n   |   ^\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpwb803k6r.rs:83:133\n   |\n19 | fn do_algebra(operator: Vec<String>,\
    \ operand: Vec<isize>) -> isize {\n   |                                      \
    \                              - closing delimiter possibly meant for this\n...\n\
    83 |                 result += (element as isize) * ((operator[element.len() -\
    \ 1] as isize) * ((operator[element.len() - 2] as isize) * ((oper...\n   |   \
    \                                                                            \
    \                                                      ^ unclosed delimiter\n\
    84 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwb803k6r.rs:21:10\n   |\n20 |     match (operator.len(), operand.len())\
    \ {\n   |           ------------------------------- this expression has type `(usize,\
    \ usize)`\n21 |         (2..=2) => {\n   |          ^   - this is of type `{integer}`\n\
    \   |          |\n   |          expected tuple, found integer\n   |\n   = note:\
    \ expected tuple `(usize, usize)`\n               found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwb803k6r.rs:21:14\n   |\n20 |     match (operator.len(),\
    \ operand.len()) {\n   |           ------------------------------- this expression\
    \ has type `(usize, usize)`\n21 |         (2..=2) => {\n   |          -   ^ expected\
    \ tuple, found "
  stdout: ''
  timestamp: 1659977884
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let operator_size = operator.len();\n    let operand_size\
    \ = operand.len();\n    if operand_size < 1 || operator_size < 2 {\n        fail_with!(\"\
    Vector size invalid\");\n    }\n    for operand in &operand {\n        result\
    \ = result + operand * operator[operator_size - 1 - operator.len().len()](operand);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `fail_with` in this scope\n  --> /tmp/tmp1ksgqoww.rs:24:9\n\
    \   |\n24 |         fail_with!(\"Vector size invalid\");\n   |         ^^^^^^^^^\n\
    \nerror[E0599]: no method named `len` found for type `usize` in the current scope\n\
    \  --> /tmp/tmp1ksgqoww.rs:27:81\n   |\n27 |         result = result + operand\
    \ * operator[operator_size - 1 - operator.len().len()](operand);\n   |       \
    \                                                                          ^^^\
    \ method not found in `usize`\n\nerror[E0618]: expected function, found `String`\n\
    \  --> /tmp/tmp1ksgqoww.rs:27:37\n   |\n27 |         result = result + operand\
    \ * operator[operator_size - 1 - operator.len().len()](operand);\n   |       \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------\n\
    \   |                                     |\n   |                            \
    \         call expression requires function\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0618.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.len() - 1;\n    for i in 0..(operand.len() - 1) {\n   \
    \     match operator {\n            vec![\"+\"] | vec![\"-\"] | vec![\"*\"] |\
    \ vec![\"//\"] | vec![\"**\"] | vec![\"*..\"] => {\n                let a = operand[i];\n\
    \                let b = operand[i + 1];\n                let c = operand[i +\
    \ 2];\n                result -= 1;\n                let op = operator[i];\n \
    \               match op {\n                    \"+\" => result += a,\n      \
    \              \"-\" => result -= a,\n                    \"*\" => result *= a,\n\
    \                    \"//\" => result = result / a,\n                    \"**\"\
    \ => result = result ** a,\n                    \"*..\" => result = a * b,\n \
    \                   _ => panic!(),\n                }\n            }\n       \
    \     _ => panic!(),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpulwlis0c.rs:23:13\n\
    \   |\n23 |             vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"\
    ] | vec![\"**\"] | vec![\"*..\"] => {\n   |             ^^^^^^^^^\n   |\n   =\
    \ note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't allowed\
    \ in patterns\n  --> /tmp/tmpulwlis0c.rs:23:25\n   |\n23 |             vec![\"\
    +\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"**\"] | vec![\"*..\"\
    ] => {\n   |                         ^^^^^^^^^\n   |\n   = note: this error originates\
    \ in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpulwlis0c.rs:23:37\n\
    \   |\n23 |             vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"\
    ] | vec![\"**\"] | vec![\"*..\"] => {\n   |                                  \
    \   ^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions\
    \ aren't allowed in patterns\n  --> /tmp/tmpulwlis0c.rs:23:49\n   |\n23 |    \
    \         vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"**\"\
    ] | vec![\"*..\"] => {\n   |                                                 ^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions aren't\
    \ allowed in patterns\n  --> /tmp/tmpulwlis0c.rs:23:62\n   |\n23 |           \
    \  vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"**\"] | vec![\"\
    *..\"] => {\n   |                                                            \
    \  ^^^^^^^^^^\n   |\n   = note: this error originates in the macro `vec` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror: arbitrary expressions\
    \ aren't allowed in patterns\n  --> /tmp/tmpulwlis0c.rs:23:75\n   |\n23 |    \
    \         vec![\"+\"] | vec![\"-\"] | vec![\"*\"] | vec![\"//\"] | vec![\"**\"\
    ] | vec![\"*..\"] => {\n   |                                               "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    operator\n\
    \        .iter()\n        .zip(operand.iter())\n        .map(|(op, val)| match\
    \ op {\n            \"+\" => val + val,\n            \"-\" => val - val,\n   \
    \         \"*\" => val * val,\n            \"/\" => val / val,\n            \"\
    //\" => val / val,\n            \"**\" => val ** val,\n            _ => panic!(\"\
    Unsupported operation {}\", op)\n        }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6hyo66al.rs:24:13\n   |\n\
    23 |         .map(|(op, val)| match op {\n   |                               \
    \ -- this expression has type `&String`\n24 |             \"+\" => val + val,\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6hyo66al.rs:25:13\n   |\n23 |\
    \         .map(|(op, val)| match op {\n   |                                --\
    \ this expression has type `&String`\n24 |             \"+\" => val + val,\n25\
    \ |             \"-\" => val - val,\n   |             ^^^ expected struct `String`,\
    \ found `str`\n   |\n   = note: expected reference `&String`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6hyo66al.rs:26:13\n\
    \   |\n23 |         .map(|(op, val)| match op {\n   |                        \
    \        -- this expression has type `&String`\n...\n26 |             \"*\" =>\
    \ val * val,\n   |             ^^^ expected struct `String`, found `str`\n   |\n\
    \   = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6hyo66al.rs:27:13\n  \
    \ |\n23 |         .map(|(op, val)| match op {\n   |                          \
    \      -- this expression has type `&String`\n...\n27 |             \"/\" => val\
    \ / val,\n   |             ^^^ expected struct `String`, found `str`\n   |\n \
    \  = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6hyo66al.rs:28:13\n  \
    \ |\n23 |         .map(|(op, val)| match op {\n   |                          \
    \      -- this expression has type `&String`\n...\n28 |             \"//\" =>\
    \ val / val,\n   |             ^^^^ expected struct `String`, found `str`\n  \
    \ |\n   = note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6hyo66al.rs:29:13\n  \
    \ |\n23 |         .map(|(op, val)| match op {\n   |                          \
    \      -- this expres"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut acc = operand.clone();\n    \n    for i in 0..operator.len() {\n       \
    \ if operator[i] == \"+\" {\n            acc = acc.iter().cloned().map(|x| x +\
    \ operand[i + 1]).collect();\n        } else if (operator[i] == \"*\") {\n   \
    \         acc = acc.iter().cloned().map(|x| x * operand[i + 1]).collect();\n \
    \       } else if (operator[i] == \"-\") {\n            acc = acc.iter().cloned().map(|x|\
    \ x - operand[i + 1]).collect();\n        } else if (operator[i] == \"//\") {\n\
    \            acc = acc.iter().cloned().map(|x| x % operand[i + 1]).collect();\n\
    \        } else if (operator[i] == \"**\") {\n            acc = acc.iter().cloned().map(|x|\
    \ x ** operand[i + 1]).collect();\n        }\n    }\n\n    acc.first().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyo409xo9.rs:25:19\n\
    \   |\n25 |         } else if (operator[i] == \"*\") {\n   |                 \
    \  ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n25 -         } else if (operator[i] == \"\
    *\") {\n25 +         } else if operator[i] == \"*\" {\n   | \n\nwarning: unnecessary\
    \ parentheses around `if` condition\n  --> /tmp/tmpyo409xo9.rs:27:19\n   |\n27\
    \ |         } else if (operator[i] == \"-\") {\n   |                   ^     \
    \             ^\n   |\nhelp: remove these parentheses\n   |\n27 -         } else\
    \ if (operator[i] == \"-\") {\n27 +         } else if operator[i] == \"-\" {\n\
    \   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyo409xo9.rs:29:19\n\
    \   |\n29 |         } else if (operator[i] == \"//\") {\n   |                \
    \   ^                   ^\n   |\nhelp: remove these parentheses\n   |\n29 -  \
    \       } else if (operator[i] == \"//\") {\n29 +         } else if operator[i]\
    \ == \"//\" {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n\
    \  --> /tmp/tmpyo409xo9.rs:31:19\n   |\n31 |         } else if (operator[i] ==\
    \ \"**\") {\n   |                   ^                   ^\n   |\nhelp: remove\
    \ these parentheses\n   |\n31 -         } else if (operator[i] == \"**\") {\n\
    31 +         } else if operator[i] == \"**\" {\n   | \n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpyo409xo9.rs:32:50\n   |\n32 |        \
    \     acc = acc.iter().cloned().map(|x| x ** operand[i + 1]).collect();\n   |\
    \                                                  ^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyo409xo9.rs:36:5\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                     ----- expected `isize` because of return\
    \ type\n...\n36 |     acc.first().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    36 |     *acc.first().unwrap()\n   |     +\n\nerror: aborting due to 2 "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = 0;\n    operator.reverse().for_each(|op| {\n        match op.to_string()\
    \ {\n            \"+\" => {\n                for i in 0..operand.len() {\n   \
    \                 res += operand[i];\n                }\n            }\n     \
    \       \"-\" => {\n                for i in 0..operand.len() {\n            \
    \        res += operand[i]*-1;\n                }\n            }\n           \
    \ \"*\" => {\n                for i in 0..operand.len() {\n                  \
    \  res += operand[i]*operand[i];\n                }\n            }\n         \
    \   \"//\" => {\n                for i in 0..operand.len() {\n               \
    \     res += operand[i] / operand[i];\n                }\n            }\n    \
    \        \"**\" => {\n                for i in 0..operand.len() {\n          \
    \          res += operand[i] ** operand[i];\n                }\n            }\n\
    \            s => { }\n        }\n    })\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `res`\n  --> /tmp/tmpv__w7d75.rs:50:7\n   |\n\
    50 |     })\n   |       ^ help: add `;` here\n51 |     res\n   |     --- unexpected\
    \ token\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpv__w7d75.rs:21:24\n\
    \   |\n21 |     operator.reverse().for_each(|op| {\n   |                     \
    \   ^^^^^^^^ `()` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `&mut (): Iterator`\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpv__w7d75.rs:45:40\n   |\n45 |                     res += operand[i]\
    \ ** operand[i];\n   |                                        ^^^^^^^^^^^^\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = isize::MIN;\n    if operator.len() == 1 {\n        if operand.len()\
    \ <= 1 {\n            return isize::MAX;\n        }\n        for element in operand\
    \ {\n            result = result + element;\n        }\n    } else {\n       \
    \ let mut operator_pos = 0;\n        let mut operation_pos = 0;\n        let mut\
    \ result = isize::MIN;\n        let mut operands_len = operand.len();\n      \
    \  let mut operator_len = operator.len();\n        while operator_pos < operator_len\
    \ {\n            match operator[operator_pos] {\n                \"+\" => {\n\
    \                    if operands_len > 2 {\n                        for element\
    \ in operand {\n                            result = result + element;\n     \
    \                   }\n                        result = result + operand[operation_pos];\n\
    \                        operation_pos++;\n                    }\n           \
    \     }\n                \"-\" => {\n                    if operands_len > 2 {\n\
    \                        for element in operand {\n                          \
    \  result = result - element;\n                        }\n                   \
    \     result = result - operand[operation_pos];\n                        operation_pos++;\n\
    \                    }\n                }\n                \"*\" => {\n      \
    \              if operands_len > 2 {\n                        for element in operand\
    \ {\n                            result = result * element;\n                \
    \        }\n                        result = result * operand[operation_pos];\n\
    \                        operation_pos++;\n                    }\n           \
    \     }\n                \"//\" => {\n                    if operands_len > 2\
    \ {\n                        for element in operand {\n                      \
    \      result = result / element;\n                        }\n               \
    \         result = result / operand[operation_pos];\n                        operation_pos++;\n\
    \                    }\n                }\n                \"**\" => {\n     \
    \               if operands_len > 2 {\n                        for element in\
    \ operand {\n                            result = result ** element;\n       \
    \                 }\n                        result = result ** operand[operation_pos];\n\
    \                        operation_pos++;\n                    }\n           \
    \     }\n                _ => {\n                    return isize::MAX;\n    \
    \            }\n            }\n            operator_pos++;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmptkptjhqz.rs:42:38\n\
    \   |\n42 |                         operation_pos++;\n   |                   \
    \                   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n42 |                         { let tmp = operation_pos; operation_pos +=\
    \ 1; tmp };\n   |                         +++++++++++              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    42 -                         operation_pos++;\n42 +                         operation_pos\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmptkptjhqz.rs:51:38\n\
    \   |\n51 |                         operation_pos++;\n   |                   \
    \                   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n51 |                         { let tmp = operation_pos; operation_pos +=\
    \ 1; tmp };\n   |                         +++++++++++              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    51 -                         operation_pos++;\n51 +                         operation_pos\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmptkptjhqz.rs:60:38\n\
    \   |\n60 |                         operation_pos++;\n   |                   \
    \                   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n60 |                         { let tmp = operation_pos; operation_pos +=\
    \ 1; tmp };\n   |                         +++++++++++              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    60 -                         operation_pos++;\n60 +                         operation_pos\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmptkptjhqz.rs:69:38\n\
    \   |\n69 |                         operation_pos++;\n   |                   \
    \                   ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n\
    \   |\n69 |                         { let tmp = operation_pos; operation_pos +=\
    \ 1; tmp };\n   |                         +++++++++++              ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    69 -                         operation_pos++;\n69 +                         operation_pos\
    \ += 1;\n   | \n\nerror: Rust has no postfix i"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    if operator.len()\
    \ == 0 {\n        operand.last().unwrap()\n    } else {\n        let mut left_operand\
    \ = operand.clone();\n        let mut right_operand = operand.clone();\n\n   \
    \     left_operand.pop();\n\n        for operand in left_operand {\n         \
    \   right_operand.pop();\n            if let Some(result) = do_algebra(operator,\
    \ right_operand) {\n                return result;\n            }\n        }\n\
    \        operator\n            .iter()\n            .fold(0, |result, op| match\
    \ op {\n                \"+\" => result + operand,\n                \"-\" => result\
    \ - operand,\n                \"*\" => result * operand,\n                \"//\"\
    \ => result // operand,\n                \"**\" => result ** operand,\n      \
    \          _ => panic!(\"Unexpected operator: {:?}\", op),\n            })\n \
    \   }\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, `}`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmp7ymat9oc.rs:41:17\n   |\n40 |                \
    \ \"//\" => result // operand,\n   |                      --       - expected\
    \ one of 8 possible tokens\n   |                      |\n   |                \
    \      while parsing the `match` arm starting here\n41 |                 \"**\"\
    \ => result ** operand,\n   |                 ^^^^ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7ymat9oc.rs:21:9\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |                         \
    \                                     ----- expected `isize` because of return\
    \ type\n20 |     if operator.len() == 0 {\n21 |         operand.last().unwrap()\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n21 |         *operand.last().unwrap()\n\
    \   |         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ymat9oc.rs:30:20\n\
    \   |\n30 |             if let Some(result) = do_algebra(operator, right_operand)\
    \ {\n   |                    ^^^^^^^^^^^^   -----------------------------------\
    \ this expression has type `isize`\n   |                    |\n   |          \
    \          expected `isize`, found enum `Option`\n   |\n   = note: expected type\
    \ `isize`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7ymat9oc.rs:37:17\n   |\n36 |             .fold(0, |result, op|\
    \ match op {\n   |                                         -- this expression\
    \ has type `&String`\n37 |                 \"+\" => result + operand,\n   |  \
    \               ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7ymat9oc.rs:38:17\n   |\n36 |             .fold(0,\
    \ |result, op| match op {\n   |                                         -- this\
    \ expression has type `&String`\n37 |                 \"+\" => result + operand,\n\
    38 |                 \"-\" => result - operand,\n   | "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut res = operand.clone();\n    for i in 0..operator.len() {\n        if operator[i]\
    \ == '+' {\n            res.insert(res.iter().position(|&x| x != 0).unwrap_or(0),\
    \ (*(operand + i)).clone());\n        }\n        else if operator[i] == '-' {\n\
    \            res.insert(res.iter().position(|&x| x != 0).unwrap_or(0), (*(operand\
    \ - i)).clone());\n        }\n        else if operator[i] == '*' {\n         \
    \   res.insert(res.iter().position(|&x| x != 0).unwrap_or(0), (*(operand * i)).clone());\n\
    \        }\n        else if operator[i] == '/' {\n            res.insert(res.iter().position(|&x|\
    \ x != 0).unwrap_or(0), (*(operand / i)).clone());\n        }\n        else if\
    \ operator[i] == '%' {\n            res.insert(res.iter().position(|&x| x != 0).unwrap_or(0),\
    \ (*(operand % i)).clone());\n        }\n        else if operator[i] == '^' {\n\
    \            res.insert(res.iter().position(|&x| x != 0).unwrap_or(0), (*(operand\
    \ ** i)).clone());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `char`\n  --> /tmp/tmpqvokyv26.rs:22:24\n\
    \   |\n22 |         if operator[i] == '+' {\n   |                        ^^ no\
    \ implementation for `String == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0369]: cannot add `usize` to `Vec<isize>`\n\
    \  --> /tmp/tmpqvokyv26.rs:23:82\n   |\n23 |             res.insert(res.iter().position(|&x|\
    \ x != 0).unwrap_or(0), (*(operand + i)).clone());\n   |                     \
    \                                                     ------- ^ - usize\n   |\
    \                                                                          |\n\
    \   |                                                                        \
    \  Vec<isize>\n\nerror[E0277]: can't compare `String` with `char`\n  --> /tmp/tmpqvokyv26.rs:25:29\n\
    \   |\n25 |         else if operator[i] == '-' {\n   |                       \
    \      ^^ no implementation for `String == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0369]: cannot subtract `usize` from `Vec<isize>`\n\
    \  --> /tmp/tmpqvokyv26.rs:26:82\n   |\n26 |             res.insert(res.iter().position(|&x| "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    \n    for (idx, op) in operator.iter().enumerate()\
    \ {\n        match op {\n            \"+\" | \"-\" => result[idx] = result[idx]\
    \ + operand[idx - 1],\n            \"*\" => result[idx] = result[idx] * operand[idx\
    \ - 1],\n            \"/\" => result[idx] = result[idx] / operand[idx - 1],\n\
    \            \"**\" => result[idx] = result[idx] ** operand[idx - 1],\n      \
    \      _ => panic!(\"The operator vector must contain a valid operator\")\n  \
    \      }\n    }\n\n    result[0]\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptmctpbj7.rs:24:13\n   |\n\
    23 |         match op {\n   |               -- this expression has type `&String`\n\
    24 |             \"+\" | \"-\" => result[idx] = result[idx] + operand[idx - 1],\n\
    \   |             ^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected reference `&String`\n              found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptmctpbj7.rs:24:19\n   |\n23 |\
    \         match op {\n   |               -- this expression has type `&String`\n\
    24 |             \"+\" | \"-\" => result[idx] = result[idx] + operand[idx - 1],\n\
    \   |                   ^^^ expected struct `String`, found `str`\n   |\n   =\
    \ note: expected reference `&String`\n              found reference `&'static\
    \ str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptmctpbj7.rs:25:13\n  \
    \ |\n23 |         match op {\n   |               -- this expression has type `&String`\n\
    24 |             \"+\" | \"-\" => result[idx] = result[idx] + operand[idx - 1],\n\
    25 |             \"*\" => result[idx] = result[idx] * operand[idx - 1],\n   |\
    \             ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptmctpbj7.rs:26:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `&String`\n...\n26 |  \
    \           \"/\" => result[idx] = result[idx] / operand[idx - 1],\n   |     \
    \        ^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptmctpbj7.rs:27:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `&String`\n...\n27 |  \
    \           \"**\" => result[idx] = result[idx] ** operand[idx - 1],\n   |   \
    \          ^^^^ expected struct `String`, found `str`\n   |\n   = note: expected\
    \ reference `&String`\n              found reference `&'static str`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmptmctpbj7.rs:27:48\n   |\n\
    27 |       "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    \n \
    \   // Initialization and check\n    if operator.len() != operand.len() - 1 {\n\
    \        println!(\"error: invalid operand or operator length\");\n        return\
    \ -1;\n    }\n    if operator.len() == 0 || operand.len() == 0 {\n        println!(\"\
    error: invalid operand or operator length\");\n        return -1;\n    }\n   \
    \ \n    // Initialize the result with the first operand element\n    let mut result:\
    \ isize = 0;\n    for &i in &operand {\n        result = result + i;\n    }\n\
    \    \n    // Find the operator element\n    let mut operator_index: isize = 0;\n\
    \    for &i in &operator {\n        if i == operator[0] {\n            break;\n\
    \        }\n        operator_index += 1;\n    }\n    \n    // Perform the operation\
    \ on the result with the next operand\n    for &i in &operator {\n        if i\
    \ == operator[0] {\n            break;\n        }\n        result = result + operator[operator_index]\
    \ * (i as isize);\n        operator_index += 1;\n    }\n    \n    // Return the\
    \ result\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[String]` cannot be indexed by `isize`\n  --> /tmp/tmpf47_v4zm.rs:51:27\n\
    \   |\n51 |         result = result + operator[operator_index] * (i as isize);\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[String]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<String>`\n\nerror[E0605]: non-primitive cast: `String`\
    \ as `isize`\n  --> /tmp/tmpf47_v4zm.rs:51:54\n   |\n51 |         result = result\
    \ + operator[operator_index] * (i as isize);\n   |                           \
    \                           ^^^^^^^^^^^^ an `as` expression can only be used to\
    \ convert between primitive types or to coerce to a specific trait object\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0605.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    // Your\
    \ code here\n    if operator.len() == 0 {\n        return operand.iter().fold(0,\
    \ |sum, i| sum + i);\n    } else if operator.len() == 1 {\n        return do_single_algebra(operator[0],\
    \ operand);\n    }\n    let mut left = do_algebra(operator[0..operator.len()-1],\
    \ operand);\n    let mut right = do_algebra(operator[operator.len()..], operand);\n\
    \    let mut temp: Vec<isize>;\n    if left < 0 {\n        temp = Vec::new();\n\
    \    } else {\n        temp = Vec::from_iter(operand.iter().filter(|&i| i <= left).cloned());\n\
    \    }\n    if right < 0 {\n        temp.extend(Vec::new());\n    } else {\n \
    \       temp.extend(Vec::from_iter(operand.iter().filter(|&i| i >= right).cloned()));\n\
    \    }\n    let mut result = left;\n    for i in temp.iter_mut() {\n        result\
    \ = result * i;\n    }\n    if right < 0 {\n        result = result + right;\n\
    \    }\n    \n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `do_single_algebra` in this scope\n\
    \  --> /tmp/tmpmdz73g3_.rs:24:16\n   |\n24 |         return do_single_algebra(operator[0],\
    \ operand);\n   |                ^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmdz73g3_.rs:26:31\n   |\n26 |  \
    \   let mut left = do_algebra(operator[0..operator.len()-1], operand);\n   | \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                               |\n   |\
    \                               expected struct `Vec`, found slice\n   |\n   =\
    \ note: expected struct `Vec<String>`\n               found slice `[String]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmdz73g3_.rs:27:32\n   |\n27 |\
    \     let mut right = do_algebra(operator[operator.len()..], operand);\n   | \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ conversion method: `.to_vec()`\n   |                                |\n   |\
    \                                expected struct `Vec`, found slice\n   |\n  \
    \ = note: expected struct `Vec<String>`\n               found slice `[String]`\n\
    \nerror[E0599]: no function or associated item named `from_iter` found for struct\
    \ `Vec<_, _>` in the current scope\n  --> /tmp/tmpmdz73g3_.rs:32:21\n   |\n32\
    \ |         temp = Vec::from_iter(operand.iter().filter(|&i| i <= left).cloned());\n\
    \   |                     ^^^^^^^^^ function or associated item not found in `Vec<_,\
    \ _>`\n   |\n   = help: items from traits can only be used if the trait is in\
    \ scope\nhelp: the following trait is implemented but not in scope; perhaps add\
    \ a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmdz73g3_.rs:32:63\n   |\n32 |         temp =\
    \ Vec::from_iter(operand.iter().filter(|&i| i <= left).cloned());\n   |      \
    \                                                         ^^^^\n   |         \
    \                                                      |\n   |               \
    \                                                expected `&isize`, found `is"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    operator.iter().cloned().for_each(|symbol| {\n        match\
    \ symbol.as_str() {\n            \"+\" => result += operand.cloned().iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.cloned().iter().cloned().sum(),\n    \
    \        \"*\" => result *= operand.cloned().iter().cloned().sum(),\n        \
    \    \"/\" => result /= operand.cloned().iter().cloned().sum(),\n            \"\
    **\" => result **= operand.cloned().iter().cloned().sum(),\n            _ => panic!(\"\
    Error! Please choose the correct operator symbol (+,-,*,/,**).\"),\n        }\n\
    \    })\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp14vtzfd4.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.cloned().iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror:\
    \ expected `;`, found `result`\n  --> /tmp/tmp14vtzfd4.rs:30:7\n   |\n30 |   \
    \  })\n   |       ^ help: add `;` here\n31 |     result\n   |     ------ unexpected\
    \ token\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp14vtzfd4.rs:23:38\n\
    \    |\n23  |               \"+\" => result += operand.cloned().iter().cloned().sum(),\n\
    \    |                                        ^^^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n\
    \   --> /tmp/tmp14vtzfd4.rs:24:38\n    |\n24  |               \"-\" => result\
    \ -= operand.cloned().iter().cloned().sum(),\n    |                          \
    \              ^^^^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n\
    \            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmp14vtzfd4.rs:25:38\n    |\n25\
    \  |               \"*\" => result *= operand.cloned().iter().cloned().sum(),\n\
    \    |                                        ^^^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n\
    \   --> /tmp/tmp14vtzfd4.rs:26:38\n    |\n26  "
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ op = operator.pop().unwrap();\n    let mut result = operand.pop().unwrap();\n\
    \    for (i, _) in operand.iter().enumerate().filter(|(_, x)| *x >= 0) {\n   \
    \     if i != 0 {\n            if op == \"+\" { result = result + x } else if\
    \ op == \"*\" { result = result * x } else if op == \"-\" { result = result -\
    \ x }\n            else if op == \"/\" { result = result / x } else if op == \"\
    //\" { result = result / x; result = result % x } else if op == \"**\" { result\
    \ = result ** x }\n            else  { println!(\"Wrong operator in do_algebra\"\
    ); return -1;}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpiwos8u3o.rs:24:46\n\
    \   |\n24 |             if op == \"+\" { result = result + x } else if op == \"\
    *\" { result = result * x } else if op == \"-\" { result = result - x }\n   |\
    \                                              ^ help: a local variable with a\
    \ similar name exists: `i`\n\nerror[E0425]: cannot find value `x` in this scope\n\
    \  --> /tmp/tmpiwos8u3o.rs:24:88\n   |\n24 |             if op == \"+\" { result\
    \ = result + x } else if op == \"*\" { result = result * x } else if op == \"\
    -\" { result = result - x }\n   |                                            \
    \                                            ^ help: a local variable with a similar\
    \ name exists: `i`\n\nerror[E0425]: cannot find value `x` in this scope\n  -->\
    \ /tmp/tmpiwos8u3o.rs:24:130\n   |\n24 |             if op == \"+\" { result =\
    \ result + x } else if op == \"*\" { result = result * x } else if op == \"-\"\
    \ { result = result - x }\n   |                                              \
    \                                                                            \
    \        ^ help: a local variable with a similar name exists: `i`\n\nerror[E0425]:\
    \ cannot find value `x` in this scope\n  --> /tmp/tmpiwos8u3o.rs:25:51\n   |\n\
    25 | ...   else if op == \"/\" { result = result / x } else if op == \"//\" {\
    \ result = result / x; result = result % x } else if op == \"**\" { resu...\n\
    \   |                                             ^ help: a local variable with\
    \ a similar name exists: `i`\n\nerror[E0425]: cannot find value `x` in this scope\n\
    \  --> /tmp/tmpiwos8u3o.rs:25:94\n   |\n25 | ...else if op == \"//\" { result\
    \ = result / x; result = result % x } else if op == \"**\" { result = result **\
    \ x }\n   |                                           ^ help: a local variable\
    \ with a similar name exists: `i`\n\nerror[E0425]: cannot find value `x` in this\
    \ scope\n  --> /tmp/tmpiwos8u3o.rs:25:115\n   |\n25 | ...result = result / x;\
    \ result = result % x } else if op == \"**\" { result = result ** x }\n   |  \
    \                                         ^ help: a local variable with a similar\
    \ name"
  stdout: ''
  timestamp: 1659977883
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut operator = operator;\n    let mut operand = operand;\n    loop {\n     \
    \   match operator.len() {\n            0 => return operand.last().unwrap(),\n\
    \            1 => {\n                if operand.len() < 1 {\n                \
    \    return 0;\n                }\n                let mut result = operand.first().unwrap();\n\
    \                for element in &mut operand {\n                    result *=\
    \ element;\n                }\n                return result;\n            }\n\
    \            _ => {\n                return 0;\n            }\n        }\n   \
    \     if operator.len() == 1 {\n            return operand.last().unwrap();\n\
    \        }\n        let mut operand = operand;\n        operator = operator.pop();\n\
    \        for element in &mut operator {\n            let mut operand = operand;\n\
    \            for element in &mut operand {\n                if element == 0 {\n\
    \                    return 0;\n                }\n                result *= element;\n\
    \            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `result` in this scope\n  --> /tmp/tmp2u_jtepg.rs:50:17\n\
    \   |\n50 |                 result *= element;\n   |                 ^^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2u_jtepg.rs:24:25\n\
    \   |\n24 |             0 => return operand.last().unwrap(),\n   |           \
    \              ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n24 |             0 => return *operand.last().unwrap(),\n\
    \   |                         +\n\nerror[E0368]: binary assignment operation `*=`\
    \ cannot be applied to type `&isize`\n  --> /tmp/tmp2u_jtepg.rs:31:21\n   |\n\
    31 |                     result *= element;\n   |                     ------^^^^^^^^^^^\n\
    \   |                     |\n   |                     cannot use `*=` on type\
    \ `&isize`\n\nwarning: unreachable statement\n  --> /tmp/tmp2u_jtepg.rs:39:9\n\
    \   |\n23 | /         match operator.len() {\n24 | |             0 => return operand.last().unwrap(),\n\
    25 | |             1 => {\n26 | |                 if operand.len() < 1 {\n...\
    \  |\n37 | |             }\n38 | |         }\n   | |_________- any code following\
    \ this `match` expression is unreachable, as all arms diverge\n39 | /        \
    \ if operator.len() == 1 {\n40 | |             return operand.last().unwrap();\n\
    41 | |         }\n   | |_________^ unreachable statement\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2u_jtepg.rs:43:20\n\
    \   |\n20 |     let mut operator = operator;\n   |                        --------\
    \ expected due to this value\n...\n43 |         operator = operator.pop();\n \
    \  |                    ^^^^^^^^^^^^^^ expected struct `Vec`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<String>`\n                found enum `Option<String>`\n\
    \nerror[E0277]: can't compare `&mut isize` with `{integer}`\n  --> /tmp/tmp2u_jtepg.rs:47:28\n\
    \   |\n47 |                 if element == 0 {\n   |                          \
    \  ^^ no implementation for `&mut isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{inte"
  stdout: ''
  timestamp: 1659977883
