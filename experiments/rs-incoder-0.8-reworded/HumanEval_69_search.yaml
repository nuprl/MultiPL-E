name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty vector of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the vector.\n/// If no such a value exist, return -1.\n\
  /// Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\n\
  fn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5,\
  \ 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n   \
  \ assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8,\
  \ 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n   \
  \ assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1,\
  \ 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3,\
  \ 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8,\
  \ 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1,\
  \ 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]),\
  \ -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),\
  \ 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n\
  \    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\
  }\n"
completions: ["    let mut freqs = vec![];\n\n    let mut itr = lst.iter().enumerate();\n\
    \n    for (_, item) in itr {\n        let mut cnt = 0;\n\n        for (i, _) in\
    \ itr {\n            if item.0 == i {\n                cnt += 1;\n           \
    \ }\n        }\n\n        if cnt > freqs.len() {\n            freqs.push(item.1);\n\
    \        }\n    }\n\n    if freqs.len() == 0 {\n        return -1;\n    }\n\n\
    \    let max_val = freqs.iter().max().unwrap();\n    freqs.retain(|&f| f >= max_val);\n\
    \n    let mut freq = freqs.iter().max().unwrap();\n    let mut i = 0;\n\n    while\
    \ freq > 0 {\n        if lst[i] == 0 {\n            return i;\n        }\n\n \
    \       if lst[i] > 0 {\n            freq -= 1;\n        }\n\n        i += 1;\n\
    \    }\n\n    return -1;", "    let mut max_value = -1;\n    let mut max_count\
    \ = 1;\n    for &i in lst {\n        if *i >= max_value {\n            max_value\
    \ = *i;\n            max_count = *i;\n        } else if *i == max_value {\n  \
    \          max_count += *i;\n        }\n    }\n    if max_count == 0 {\n     \
    \   return -1;\n    }\n    return max_value;", "    let mut max = -1;\n    let\
    \ mut cnt = 0;\n\n    for num in lst {\n        cnt += 1;\n        if max < 0\
    \ || num >= max {\n            max = num;\n        }\n    }\n\n    if cnt > 0\
    \ {\n        max\n    } else {\n        -1\n    }", "    let mut max_val = -1isize;\n\
    \    let mut freq = vec![];\n    for i in lst {\n        freq.push(i);\n    }\n\
    \    for i in freq {\n        if i > 0 && freq[i] > max_val {\n            max_val\
    \ = i;\n        }\n    }\n    if max_val >= 0 {\n        max_val\n    } else {\n\
    \        -1\n    }", "    let mut it = lst.iter().rev();\n    let mut frequencies\
    \ = HashMap::new();\n    \n    loop {\n        if let Some(f) = it.pop() {\n \
    \           if frequencies.contains_key(&f) {\n                frequencies.insert(f,\
    \ frequencies.remove(&f) + 1);\n            }\n            else {\n          \
    \      frequencies.insert(f, 1);\n            }\n            if frequencies.contains_key(&f)\
    \ {\n                it.remove();\n                return f;\n            }\n\
    \        }\n        else {\n            break;\n        }\n    }\n    \n    -1",
  "    // Write your code here.\n    let mut freq = lst[0];\n    for v in lst.iter().rev()\
    \ {\n        if v >= freq {\n            freq = v;\n        }\n    }\n    if freq\
    \ == -1 {\n        -1\n    } else {\n        freq\n    }", "    match (lst.iter().cloned().fold(-1,\
    \ |a, &b| if b > a { b } else { a; })) {\n        -1 => return -1,\n        a\
    \ => a,\n    }", "    let mut ans = -1;\n    let mut freq: isize = 0;\n    for\
    \ elem in lst.iter().cloned() {\n        freq += 1;\n        if freq > elem {\n\
    \            ans = elem;\n            freq = freq - elem;\n        }\n    }\n\
    \    ans", "    let mut max_value: isize = -1;\n    let mut max_freq: usize =\
    \ 0;\n    for i in lst.iter().rev() {\n        if max_value >= i {\n         \
    \   max_freq += 1;\n        }\n        if max_freq >= i {\n            max_value\
    \ = i;\n        }\n    }\n    if max_value == -1 {\n        -1\n    } else {\n\
    \        max_value\n    }", "    let mut freq = vec![0];\n\n    for (index, &value)\
    \ in lst.into_iter().zip(&freq) {\n        if *value > 0 {\n            *value\
    \ = *value + 1;\n            return *value;\n        }\n    }\n    -1", "    let\
    \ mut i = 0;\n    let mut freq = 0;\n    loop {\n        if i > lst.len() {\n\
    \            return -1;\n        }\n        let tmp = lst[i];\n        if tmp\
    \ < freq {\n            return -1;\n        }\n        if freq == tmp {\n    \
    \        i += 1;\n        } else {\n            freq = tmp;\n            i +=\
    \ 1;\n        }\n    }", "    let mut max = isize::max();\n    for i in lst {\n\
    \        if *i > *max {\n            max = *i;\n        }\n    }\n    if max ==\
    \ 0 {\n        -1\n    } else {\n        max\n    }", "    let mut frequencies\
    \ = HashMap::new();\n    for element in lst {\n        frequencies.insert(element.clone(),\
    \ 1);\n    }\n    let mut best_value = -1;\n    let mut best_frequency = -1;\n\
    \    for (value, frequency) in frequencies.iter() {\n        if frequency > best_frequency\
    \ {\n            best_frequency = frequency;\n            best_value = value;\n\
    \        }\n    }\n    best_value", "    let mut min_i = lst.iter().min().unwrap_or_else(||\
    \ -1);\n    let mut min_j = min_i;\n    let mut min_freq = vec![0; lst.len()];\n\
    \    for &i in &lst {\n        match &i {\n            i if i >= min_i => {\n\
    \                let mut count = 0;\n                for &j in &lst {\n      \
    \              if i == j {\n                        count += 1;\n            \
    \            break;\n                    } else if j == min_j {\n            \
    \            count += 1;\n                    } else {\n                     \
    \   if count > min_freq[j] {\n                            min_freq[j] = count;\n\
    \                            min_j = j;\n                        }\n         \
    \               count = 0;\n                    }\n                }\n       \
    \         min_freq[i] = count;\n            }\n            _ => {}\n        }\n\
    \    }\n    min_j", "    let mut freq: usize = 0;\n    let mut max_elem: isize\
    \ = 0;\n    for i in lst {\n        freq += 1;\n        if freq >= i {\n     \
    \       max_elem = i;\n        }\n    }\n    if max_elem == 0 {\n        -1\n\
    \    } else {\n        max_elem\n    }", "    let mut min = std::i32::MAX;\n \
    \   let mut max = std::i32::MIN;\n    let mut ans = -1;\n    let mut cnt = 0;\n\
    \    for x in lst {\n        if x >= min {\n            if x == min {\n      \
    \          min = x;\n            }\n            cnt = 1;\n        }\n        else\
    \ {\n            cnt += 1;\n            if cnt > max {\n                ans =\
    \ x;\n            }\n        }\n    }\n    ans", "    if lst.len() > 0 {\n   \
    \     let mut freq = HashMap::new();\n        for &x in lst {\n            freq.insert((x).to_owned(),\
    \ 0);\n        }\n        \n        let mut res = -1;\n        let mut i = 0;\n\
    \        while i < lst.len() {\n            if freq.contains_key(&lst[i]) {\n\
    \                freq.get_mut(&lst[i]) = (freq.get_mut(&lst[i]) + 1);\n      \
    \      } else {\n                return i;\n            }\n            i += 1;\n\
    \        }\n        \n        if freq.contains_key(&0) {\n            return -1;\n\
    \        }\n        \n        if freq.get_mut(&0) == freq.get_mut(&lst[0]) {\n\
    \            return 0;\n        }\n        \n        res -= 1;\n        \n   \
    \     if freq.contains_key(&-1) {\n            return -1;\n        }\n       \
    \ \n        if freq.get_mut(&-1) == freq.get_mut(&lst[lst.len() - 1]) {\n    \
    \        return lst.len() - 1;\n        }\n        \n        res += 1;\n     \
    \   \n        return res\n    }\n    \n    return -1;", "    if lst.len() == 0\
    \ {\n        return -1;\n    }\n\n    let mut max_val = i32::MAX;\n    let mut\
    \ max_count = i32::MAX;\n\n    for i in lst {\n        let count = lst.iter().filter(|&el|\
    \ el == i).count();\n        if count > max_count {\n            max_count = count;\n\
    \            max_val = i;\n        }\n    }\n\n    if max_count == i32::MAX {\n\
    \        return -1;\n    }\n    \n    return max_val;", "    let mut max_val =\
    \ -1;\n    let mut max_freq = 0;\n    for v in lst {\n        if v > 0 {\n   \
    \         max_val = max(v, max_val);\n            max_freq += 1;\n        }\n\
    \    }\n    if max_freq > max_val {\n        max_val\n    } else {\n        -1\n\
    \    }", "    let mut max_freq = lst.iter().fold(0, |accum, elt| {\n        accum\
    \ + if elt > 0 { 1 } else { 0 };\n    });\n    let mut max_elt = lst.iter().last();\n\
    \    if max_freq == 0 {\n        max_elt = -1;\n    } else if max_freq == 1 {\n\
    \        max_elt = lst.iter().nth(1);\n    }\n    \n    if max_freq == -1 { -1\
    \ }\n    else { max_elt }", "    struct Solution;\n\n    fn recursive_search<I:\
    \ Iterator<Item = isize>>(\n        freqs: Vec<isize>,\n        i: I,\n    ) ->\
    \ Option<isize> {\n        if freqs.len() == i.len() {\n            return Some(i.next());\n\
    \        }\n\n        if let Some(i) = (i.next()..).find(|&f| freqs[f] > freqs[*i])\
    \ {\n            return Some(*i);\n        }\n\n        recursive_search(freqs,\
    \ i)\n    }\n\n    recursive_search(vec![], lst.iter())", "    let mut freq_count\
    \ = vec![0; lst.len()];\n    for v in lst.iter() {\n        freq_count[*v] +=\
    \ 1;\n    }\n    for (i, v) in freq_count.iter().enumerate() {\n        if *v\
    \ > 0 {\n            return i;\n        }\n    }\n    return -1;", "    let mut\
    \ max = 0;\n    for i in lst.iter() {\n        if lst.count() >= i {\n       \
    \     max = i;\n        }\n    }\n    max", "    fn helper(lst: &[isize]) -> isize\
    \ {\n        if lst.len() < 1 {\n            return -1;\n        }\n        if\
    \ lst.len() == 1 {\n            return 0;\n        }\n        if let Some(first)\
    \ = lst.iter().find(|&x| x != lst[0]) {\n            helper(&lst[1..first]);\n\
    \        } else {\n            helper(&lst[2..]);\n        }\n    }\n    helper(&lst[1..])",
  "    let mut res = -1;\n    let mut cnt = 0;\n\n    for x in lst {\n        if *x\
    \ > *res {\n            res = *x;\n            cnt = 1;\n        } else {\n  \
    \          *res += *x;\n            cnt += 1;\n        }\n    }\n\n    if cnt\
    \ == 0 {\n        return -1;\n    }\n\n    if cnt > 1 {\n        res = *res;\n\
    \    }\n\n    res", "    let mut freq = vec![0; lst.len()];\n    let mut maxfreq\
    \ = 0;\n    for i in 0..lst.len() {\n        freq[i] = (lst[i] + 1).clone();\n\
    \        maxfreq = if freq[i] > maxfreq { freq[i] } else { maxfreq };\n    }\n\
    \    for (i,v) in freq.iter().enumerate() {\n        if v >= maxfreq {\n     \
    \       return i;\n        }\n    }\n    -1", "    let mut freq = usize::MAX;\n\
    \    let mut max_val = -1;\n    let mut max_i = 0;\n    for i in lst.iter() {\n\
    \        freq += 1;\n        if freq > i {\n            freq -= i;\n        }\
    \ else {\n            if i == max_val {\n                max_val = i;\n      \
    \          max_i = i;\n            } else {\n                max_val = max_val\
    \ * i / freq;\n                max_i = i;\n            }\n        }\n    }\n \
    \   max_i", "    search(0, &lst, |i| {\n        std::mem::swap(i, 0); // We cannot\
    \ use i because it is an lvalue \n        i.1\n    })", "    lst.iter().fold(-1,\
    \ |acc, x| match acc {\n        -1 if x >= 0 => {\n            if lst.iter().count(|y|\
    \ y == x) <= x {\n                x + 1\n            } else {\n              \
    \  -1\n            }\n        }\n        x => x + 1,\n    })", "    let mut min\
    \ = isize::MAX;\n    let mut max = 0;\n    for n in lst {\n        if n > min\
    \ {\n            if n >= max {\n                max = n;\n            } else {\n\
    \                min = n;\n            }\n        } else {\n            if min\
    \ > n {\n                max = n;\n            }\n        }\n    }\n    min as\
    \ isize", '    lst.iter().max(|a, b| if a < b { a } else { b }).unwrap_or(-1)',
  "    let mut m = Map::new();\n    for i in lst.iter() {\n        if m.contains_key(&i).is_some()\
    \ {\n            return i;\n        }\n        m.insert(i, 1);\n    }\n    -1",
  "    \n    if lst.len() == 0 {\n        -1\n    }\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut freq = lst.iter().filter(|&x| x > max).count();\n    while freq >\
    \ 1 {\n        if lst.iter().filter(|&x| x > max).count() > freq {\n         \
    \   max = lst.iter().filter(|&x| x > max).max().unwrap();\n            freq =\
    \ lst.iter().filter(|&x| x > max).count();\n        } else {\n            break;\n\
    \        }\n    }\n    max", "    if lst.is_empty() {\n        return -1;\n  \
    \  }\n    let mut highest_frequency = 0;\n    let mut current_frequency = 1;\n\
    \    let mut current_max = lst.len() as isize;\n    for num in lst {\n       \
    \ if current_frequency > current_max {\n            highest_frequency = current_frequency;\n\
    \            current_frequency = 1;\n            current_max = num;\n        }\
    \ else {\n            current_frequency += 1;\n        }\n    }\n    if highest_frequency\
    \ == 0 {\n        return -1;\n    }\n    return highest_frequency;", "    let\
    \ mut freq = HashMap::new();\n    let mut max_val = None;\n    for v in lst {\n\
    \        if let Some(v) = freq.get(&v) {\n            if v > freq.get(&v) {\n\
    \                max_val = Some(v);\n            }\n            freq.insert(&v,\
    \ v + 1);\n        } else {\n            freq.insert(&v, 1);\n        }\n    }\n\
    \    if let Some(v) = max_val {\n        v\n    } else {\n        -1\n    }",
  "    let mut max_freq = -1;\n\n    for el in lst {\n        if lst.iter().filter(|x|\
    \ x == el).count() > 0 {\n            let count = lst.iter().filter(|x| x == el).count();\n\
    \            if count > max_freq {\n                max_freq = count;\n      \
    \      }\n        }\n    }\n    if max_freq == -1 { -1 }\n    else { max_freq\
    \ }", "    debug_assert!(lst.len() >= 1);\n\n    let mut freq = vec![0; lst.len()];\n\
    \n    for &item in lst {\n        freq[item] += 1;\n    }\n\n    let mut result\
    \ = -1;\n\n    for i in freq.iter_mut() {\n        if *i > 0 && *i > result {\n\
    \            result = i;\n        }\n    }\n\n    result", "    let mut max_cnt\
    \ = 0;\n    for x in lst {\n        if &x > 0 { max_cnt = 1; }\n        else if\
    \ max_cnt > 1 {\n            max_cnt = 0;\n        }\n    }\n    if max_cnt ==\
    \ 1 {\n        return vec![0]\n    }\n    else if max_cnt == 2 {\n        if lst.iter().any(|&x|\
    \ x != 1) {\n            return -1\n        }\n        return vec![0]\n    }\n\
    \    return -1", "    let mut min_val = lst[0];\n    let mut min_freq = 1;\n \
    \   let mut min_idx = -1;\n    for val in lst {\n        if val >= min_val {\n\
    \            min_freq += 1;\n            if min_freq > val {\n               \
    \ min_val = val;\n                min_freq = val;\n                min_idx = lst.iter().position(|x|\
    \ *x == val);\n            }\n        }\n    }\n    min_idx", "    let mut freq\
    \ = 0;\n    let mut value = -1;\n    for v in lst {\n        if freq == 0 {\n\
    \            freq = 1;\n            v = *v;\n        }\n        if v == value\
    \ {\n            freq += 1;\n        } else {\n            freq = v;\n       \
    \     value = v;\n        }\n    }\n    value", "    let mut max_freq = -1;\n\
    \    let mut freqs = vec![0];\n\n    for x in lst {\n        freqs.insert((*freqs.iter().enumerate()\n\
    \            .filter_map(|(k, v)| if v >= x { Some(x + k.1) } else { None })\n\
    \            .fold(0, |i, x| i + x.0)));\n    }\n    if freqs.len() > 0 {\n  \
    \      max_freq = *freqs.iter().max().unwrap() + 1;\n    }\n    max_freq", " \
    \   if lst.is_empty() {\n        return -1;\n    }\n\n    let mut counter = lst.len();\n\
    \    let mut max_val = lst[0];\n    for val in lst {\n        if val > max_val\
    \ {\n            max_val = val;\n        }\n        counter -= 1;\n    }\n\n \
    \   if counter > 0 {\n        return max_val;\n    }\n\n    return -1;", "   \
    \ lst.iter().fold(-1, |a, e| if a == -1 {\n        match e {\n            0 =>\
    \ return e,\n            _ => return e\n        }\n    })", "    let mut max:\
    \ isize = 0;\n    let mut count: usize = 0;\n\n    for x in lst {\n        if\
    \ x > 0 {\n            count += 1;\n            if x > max {\n               \
    \ max = x;\n            }\n        }\n    }\n\n    if count > 0 {\n        max\
    \ = max * count + lst[count];\n    }\n    max", "    let mut n = lst.len();\n\
    \    let mut greatest = 0;\n    let mut freq = 0;\n    while n > 0 {\n       \
    \ let ele = lst.remove(0);\n        if *ele > 0 {\n            freq = *ele;\n\
    \        } else {\n            n = n - 1;\n        }\n        if freq >= greatest\
    \ {\n            greatest = freq;\n        }\n    }\n    if greatest == 0 {\n\
    \        -1\n    } else {\n        greatest\n    }", "    let mut freq: usize\
    \ = 0;\n    let mut max_val: isize = 0;\n    for i in lst.iter() {\n        if\
    \ *i > *max_val {\n            max_val = *i;\n            freq = freq + 1;\n \
    \       }\n    }\n    if freq > 0 {\n        return max_val;\n    } else {\n \
    \       return -1;\n    }", "    if lst.len() <= 0 {\n        return -1;\n   \
    \ }\n    \n    let mut max = -1;\n    let mut maxval = -1;\n    let mut freq =\
    \ vec![0; lst.len()];\n    for x in lst {\n        freq[x] += 1;\n        if freq[x]\
    \ >= max {\n            max = freq[x];\n            maxval = x;\n        }\n \
    \   }\n    return maxval;", "    let mut freqs = HashMap::new();\n    for x in\
    \ lst {\n        if !freqs.contains_key(&x) {\n            freqs.insert(x, 0);\n\
    \        }\n        freqs.insert(x, freqs.get_mut(&x).unwrap() + 1);\n    }\n\
    \    let mut max = 0;\n    for (x, count) in freqs.into_iter() {\n        if count\
    \ > max {\n            max = count;\n        }\n    }\n    if max == 0 {\n   \
    \     return -1;\n    }\n    max", "    let mut freq = vec![0; lst.len() + 1];\n\
    \    for v in lst {\n        freq[v as usize] += 1;\n    }\n    if freq[0] > freq[lst[0]\
    \ as usize] {\n        -1\n    } else {\n        lst.iter().fold(0, |a, v| if\
    \ a == v {\n            -1\n        } else {\n            a - 1\n        })\n\
    \    }", "    let mut v = lst.clone();\n    v.sort();\n    \n    let mut max =\
    \ v[0];\n    for el in v {\n        if el == 0 {\n            return -1;\n   \
    \     }\n        if el > max {\n            max = el;\n        }\n    }\n    \n\
    \    max", "    let mut freq = HashMap::new();\n    let mut max_freq = -1;\n \
    \   for &x in lst {\n        assert!(x >= 0);\n        if freq.contains_key(&x)\
    \ {\n            freq.insert(x, freq.get(&x) + 1);\n        } else {\n       \
    \     freq.insert(x, 1);\n        }\n        if freq.get(&x) > max_freq {\n  \
    \          max_freq = freq.get(&x);\n        }\n    }\n    if max_freq == -1 {\n\
    \        -1\n    } else {\n        max_freq\n    }", "    let mut freq_count =\
    \ 0;\n    let mut max_freq_count = -1;\n\n    for i in lst {\n        freq_count\
    \ += 1;\n        if freq_count >= max_freq_count {\n            max_freq_count\
    \ = freq_count;\n        }\n    }\n\n    if freq_count*lst.len() < 0 {\n     \
    \   return -1;\n    }\n\n    max_freq_count", "    let mut max: isize = 1;\n \
    \   let mut max_cnt: isize = 1;\n    let mut curr: isize = 0;\n    for v in lst\
    \ {\n        if v > 0 {\n            if v != curr {\n                max_cnt =\
    \ max_cnt + 1;\n            }\n            max = max > v ? max : v;\n        \
    \    curr = v;\n        } else {\n            max_cnt = max_cnt + 1;\n       \
    \ }\n    }\n    if max <= 0 {\n        -1\n    } else {\n        max_cnt\n   \
    \ }", "    if lst.is_empty() {\n        return -1;\n    }\n\n    fn helper(lst:\
    \ Vec<isize>, max: isize, count: isize) -> isize {\n        match lst.iter().find(|&x|\
    \ x > max) {\n            Some(_) => -1,\n            None => {\n            \
    \    if count > max {\n                    return -1;\n                }\n   \
    \             max\n            }\n        }\n    }\n\n    if helper(lst, lst.iter().max().unwrap(),\
    \ 1) >= 0 {\n        return helper(lst, lst.iter().max().unwrap(), 1);\n    }\n\
    \    if helper(lst, lst.iter().max().unwrap(), 2) >= 0 {\n        return helper(lst,\
    \ lst.iter().max().unwrap(), 2);\n    }\n    if helper(lst, lst.iter().max().unwrap(),\
    \ 3) >= 0 {\n        return helper(lst, lst.iter().max().unwrap(), 3);\n    }\n\
    \    if helper(lst, lst.iter().max().unwrap(), 4) >= 0 {\n        return helper(lst,\
    \ lst.iter().max().unwrap(), 4);\n    }\n    if helper(lst, lst.iter().max().unwrap(),\
    \ 5) >= 0 {\n        return helper(lst, lst.iter().max().unwrap(), 5);\n    }\n\
    \    if helper(lst, lst.iter().max().unwrap(), 6) >= 0 {\n        return helper(lst,\
    \ lst.iter().max().unwrap(), 6);\n    }\n    if helper(lst, lst.iter().max().unwrap(),\
    \ 7) >= 0 {\n        return helper(lst, lst.iter().max().unwrap(), 7);\n    }\n\
    \    if helper(lst, lst.iter().max().unwrap(), 8) >= 0 {\n        return helper(lst,\
    \ lst.iter().max().unwrap(), 8);\n    }\n    if helper(lst, lst.iter().max().unwrap(),\
    \ 9) >= 0 {\n        return helper(lst, lst.iter().max().unwrap(), 9);\n    }\n\
    \    if helper(lst, lst.iter().max().unwrap(), 10) >= 0 {\n        return helper(lst,\
    \ lst.iter().max().unwrap(), 10);\n    }\n    if helper(lst, lst.iter().max().unwrap(),\
    \ 11) >= 0 {\n        return helper(lst, lst.iter().max().unwrap(), 11);\n   \
    \ }\n    if helper(lst, lst.iter().max().unwrap(), 12) >= 0 {\n        return\
    \ helper(lst, lst.iter().max().unwrap(), 12);\n    }\n    if helper(lst, lst.iter().max().unwrap(),\
    \ 13) >= 0 {\n        return helper(lst, lst.iter().max().unwrap(), 13);\n   \
    \ }\n    if helper(lst, lst.iter().max().unwrap(), 14) >= 0 {\n", "    let mut\
    \ freq = vec![]; // Initialize a new freq array\n    for i in lst {\n        freq.push(i);\n\
    \    }\n    // Sort the freq array\n    let mut freq2 = freq.iter().cloned().collect::<Vec<isize>>();\n\
    \    freq2.sort();\n    // Find the greatest number greater than zero\n    let\
    \ mut result = freq2.last().unwrap();\n    // Iterate through freq array to find\
    \ the element with the max frequency\n    for i in freq2.iter() {\n        if\
    \ i.0 > result {\n            result = i.0;\n        }\n    }\n    result", " \
    \   let mut min = vec![-1isize; lst.len()];\n    let mut max = vec![0];\n\n  \
    \  for &x in lst {\n        min[x] = if min[x] == -1 { 1 } else { min[x] + 1 };\n\
    \        max[x] = if max[x] == x { 0 } else { max[x] + 1 };\n    }\n\n    for\
    \ &x in lst {\n        if min[x] != -1 && max[x] != x {\n            return x;\n\
    \        }\n    }\n\n    return -1;", "    use std::cmp::Ordering;\n    lst.iter().enumerate().filter_map(|(i,\
    \ elem)| {\n        if let Some(pos) = elem.partial_cmp(&0) {\n            if\
    \ pos > 0 {\n                Some(i)\n            } else {\n                None\n\
    \            }\n        } else {\n            None\n        }\n    }).max().map(|i|\
    \ lst[i]).unwrap_or(-1)", "    let mut counters = HashMap::new();\n    let mut\
    \ max_freq = -1;\n    for v in lst.iter() {\n        if let Some(c) = counters.get(&v)\
    \ {\n            counters.insert(v, c + 1);\n        } else {\n            counters.insert(v,\
    \ 1);\n        }\n        if counters.len() > max_freq {\n            max_freq\
    \ = counters.len();\n        }\n    }\n    -1", "    if lst.is_empty() {\n   \
    \     return -1;\n    }\n    let mut max = 0;\n    for i in lst {\n        if\
    \ max < i {\n            max = i;\n        }\n    }\n    max", "    let mut freq\
    \ = 0;\n    let mut result = -1;\n    for elem in lst {\n        if freq == 0\
    \ || elem == freq {\n            result = elem\n            freq++;\n        }\n\
    \    }\n    result", "    let mut freq = HashMap::new();\n    let mut isize =\
    \ 0;\n    for n in lst {\n        if let Some(val) = (*freq.get(n).unwrap()).as_mut()\
    \ {\n            if val > 0 {\n                *val += 1;\n            } else\
    \ {\n                *val = 0;\n            }\n        } else {\n            *freq.insert(n,\
    \ 1);\n            isize = n;\n        }\n    }\n\n    if freq.values().all(|&x|\
    \ x > 0) {\n        isize\n    } else {\n        -1\n    }", "    if lst.is_empty()\
    \ {\n        -1\n    } else {\n        find_first_larger(lst, 0)\n    }", "  \
    \  let mut min = i32::MAX;\n    let mut freq = i32::MAX;\n\n    for i in lst {\n\
    \        if *i == 0 {\n            return -1;\n        }\n        if *i > freq\
    \ {\n            min = i;\n            freq = *i;\n        }\n    }\n\n    min",
  "    let mut max = 0;\n    let mut freq = 0;\n    for x in lst {\n        if x ==\
    \ max {\n            freq += 1;\n        } else {\n            if freq >= x {\n\
    \                max = x;\n                freq = freq + 1;\n            }\n \
    \       }\n    }\n    max - 1", "    let mut counter: Vec<usize> = vec![];\n \
    \   let mut max: usize = 0;\n    for val in lst {\n        counter.push((val as\
    \ usize) - 1);\n        if counter.iter().any(|&count| count > max) {\n      \
    \      max = counter.iter().find(|&count| count > max).unwrap() as usize;\n  \
    \      }\n    }\n    max + 1", "    let mut max_elem = -1isize;\n    let mut max_freq\
    \ = -1isize;\n    for x in lst.iter() {\n        if x > max_elem {\n         \
    \   max_elem = x;\n        }\n        let y = lst.iter().filter(|&x| *x == x).count();\n\
    \        if y > max_freq {\n            max_freq = y;\n        }\n    }\n    if\
    \ max_elem == -1isize {\n        return -1isize;\n    }\n    if max_freq >= *max_elem\
    \ {\n        return max_elem;\n    }\n    return -1;", "    let mut freq = HashMap::new();\n\
    \    let mut max = 0;\n    for x in lst {\n        freq.entry(x).or_insert(0)\n\
    \            += 1;\n        if freq[x] > max {\n            max = freq[x];\n \
    \       }\n    }\n    if max == 0 {\n        return -1;\n    }\n    for x in freq.keys()\
    \ {\n        if freq[x] >= max {\n            return x;\n        }\n    }\n  \
    \  -1", "    let mut freqs = vec![vec![0; lst.len()]; lst.len()];\n    let mut\
    \ max_freq = -1;\n    for idx in 0..lst.len() {\n        freqs[idx][idx] += 1;\n\
    \        if freqs[idx][idx] > max_freq {\n            max_freq = freqs[idx][idx];\n\
    \        }\n    }\n    if max_freq < 1 {\n        return -1;\n    }\n    for i\
    \ in 0..lst.len() {\n        freqs[i][lst.len() - i - 1] += 1;\n        if freqs[i][lst.len()\
    \ - i - 1] >= max_freq {\n            return i;\n        }\n    }\n    -1", " \
    \   let mut i = 0;\n    let mut max_freq = std::i32::MAX;\n    while i < lst.len()\
    \ {\n        let freq = lst[i] + 1;\n        if freq > max_freq {\n          \
    \  max_freq = freq;\n        }\n        i += 1;\n    }\n    if max_freq < 0 {\n\
    \        return -1;\n    }\n    max_freq", "    let mut max_freq = -1;\n    let\
    \ mut max_element = -1;\n\n    for i in lst.iter() {\n        if max_freq < i\
    \ {\n            max_freq = i;\n            max_element = i;\n        }\n    \
    \    if max_freq == i {\n            if max_freq < i {\n                max_freq\
    \ = i;\n                max_element = i;\n            }\n        }\n    }\n\n\
    \    if max_freq == -1 {\n        -1\n    } else {\n        max_element\n    }",
  "    lst.iter().fold(std::i32::MAX - 1, |memo, elem| if memo == elem - 1 {\n   \
    \     memo\n    } else {\n        memo\n    })", "    let mut freqs = HashMap::new();\n\
    \    for num in lst {\n        freqs.insert(num, 0);\n    }\n    for i in lst\
    \ {\n        if freqs.contains_key(&i) {\n            freqs.insert(i, freqs.get(&i)\
    \ + 1);\n        }\n    }\n    let mut max_freq = 0;\n    let mut i = 1;\n   \
    \ while i <= lst.len() {\n        if freqs.contains_key(&i) && freqs.get(&i) >=\
    \ i {\n            max_freq = i;\n        }\n        i += 1;\n    }\n    if max_freq\
    \ == lst.len() {\n        return -1;\n    }\n    return max_freq;", "    let mut\
    \ it = lst.iter().cloned().filter_map(|&elem| elem >= 0);\n    if let Some(next)\
    \ = it.next() {\n        let mut freq: isize = 0;\n        for e in &lst {\n \
    \           if e == next {\n                freq += 1;\n            }\n      \
    \  }\n        if freq > 0 {\n            return next;\n        } else {\n    \
    \        return -1;\n        }\n    }\n    -1", "    let mut fr_map = hashmap::HashMap::new();\n\
    \    for val in lst {\n        if fr_map.contains_key(&val) {\n            *fr_map.get_mut(&val).unwrap()+=1;\n\
    \        } else {\n            fr_map.insert(val, 1);\n        }\n    }\n    for\
    \ el in fr_map.keys() {\n        if fr_map.get(&el).unwrap()>0 {\n           \
    \ return *el;\n        }\n    }\n    return -1;", "    let mut freqs = Vec::new();\n\
    \    for ele in lst {\n        if let Some(count) = freqs.binary_search(&ele)\
    \ {\n            *count = *count + 1;\n        } else {\n            freqs.push(elem);\n\
    \        }\n    }\n    for ele in freqs {\n        if let Some(count) = freqs.binary_search(&ele)\
    \ {\n            if *count >= *ele {\n                return ele;\n          \
    \  }\n        }\n    }\n    -1", "    let mut min_i = lst.iter().min_by_key(|v|\
    \ v);\n    let mut max_i = lst.iter().max_by_key(|v| v);\n    if min_i <= 0 {\n\
    \        return -1;\n    }\n    if max_i >= lst.len() - 1 {\n        return -1;\n\
    \    }\n    if min_i > max_i {\n        if min_i > lst.len() / 2 {\n         \
    \   max_i = lst.len() - 1;\n        } else {\n            min_i = 0;\n       \
    \ }\n    }\n\n    let mut counter = 0;\n    for i in lst {\n        if i == min_i\
    \ {\n            counter += 1;\n        }\n        if i == max_i {\n         \
    \   counter += 1;\n        }\n    }\n    if counter >= 2 {\n        return min_i;\n\
    \    }\n    return -1;", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = 0isize;\n\
    \    let mut max_key = None;\n    for (i, freq) in freq.into_iter().zip(lst.iter())\
    \ {\n        if freq >= i {\n            max = freq;\n            max_key = Some(i);\n\
    \        }\n    }\n    max.saturating_add((*max_key).unwrap());\n    ", "    let\
    \ mut counts = HashMap::new();\n    for el in lst {\n        if counts.contains_key(&el)\
    \ {\n            let freq = counts.get(&el).unwrap();\n            counts.entry(el).or_insert(freq);\n\
    \        } else {\n            counts.insert(el, 1);\n        }\n    }\n    \n\
    \    let mut largest = -1;\n    let mut max_freq = 0;\n    for (el, freq) in counts\
    \ {\n        if freq > max_freq {\n            largest = el;\n            max_freq\
    \ = freq;\n        }\n    }\n    largest", "    let mut freq = vec![0; lst.len()];\n\
    \    for i in lst {\n        freq[i] = freq[i] + 1 as isize;\n    }\n    for j\
    \ in 0..lst.len() {\n        if freq[j] >= 0 {\n            return j;\n      \
    \  }\n    }\n    return -1;", "    let mut max: usize = 0;\n    for v in lst {\n\
    \        if *v >= *max {\n            max = *v;\n        }\n    }\n    if max\
    \ == 0 {\n        return -1;\n    }\n    for v in lst {\n        if *v >= *max\
    \ {\n            return *v;\n        }\n    }\n    -1", "    match (lst.iter().cloned().fold(isize::max,\
    \ |max, &x| {\n        if x > max {\n            max = x;\n        }\n       \
    \ match max {\n            isize::max => return x,\n            _ => return max,\n\
    \        }\n    })) {\n        isize::max => return -1,\n        x => x,\n   \
    \ }", "    let mut max: isize = 0;\n    let mut max_freq = 0;\n    let mut max_idx\
    \ = 0;\n\n    for &v in lst.iter() {\n        let freq = lst.iter().filter(|x|\
    \ x == v).count();\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_idx = v;\n        }\n    }\n    if max_freq == 0 {\n        return\
    \ -1;\n    }\n\n    let mut cur = 0;\n    for &v in lst.iter() {\n        if v\
    \ == max_idx {\n            return cur;\n        }\n        cur += v;\n    }\n\
    \    return -1;", '    lst.iter().filter(|&x| x > 0).max().unwrap()', "    let\
    \ mut max = -1.isize;\n    for n in lst.iter() {\n        if *n > max {\n    \
    \        max = *n;\n        }\n        if *n == max {\n            return *n;\n\
    \        }\n    }\n    max", "    let mut max_val = *lst.iter().max();\n    let\
    \ mut cur_val = max_val;\n    let mut counter = 1;\n    let mut iter = lst.iter();\n\
    \    while let Some(elem) = iter.next() {\n        if elem > cur_val {\n     \
    \       cur_val = elem;\n            counter = 1;\n        } else {\n        \
    \    counter += 1;\n            if counter > max_val {\n                max_val\
    \ = cur_val;\n            }\n        }\n    }\n    max_val", "    let mut freqs\
    \ = vec![];\n    for i in lst {\n        freqs.push(i + 1);\n    }\n    for freq\
    \ in freqs.iter().rev() {\n        if freq >= lst.len() {\n            return\
    \ -1;\n        }\n        for el in lst {\n            if el == freq {\n     \
    \           return freq;\n            }\n        }\n    }\n    return -1;", " \
    \   let mut max = 0;\n    let mut found = false;\n\n    for x in lst {\n     \
    \   if x > max {\n            max = x;\n            found = true;\n        }\n\
    \    }\n\n    if !found {\n        return -1;\n    }\n\n    if max > 0 {\n   \
    \     (*lst.iter_mut().filter(|x| x > 0).count())\n    } else {\n        -1\n\
    \    }", "    let mut cnt = 0;\n    for i in lst {\n        if cnt > i {\n   \
    \         return i;\n        }\n        cnt += 1;\n    }\n    -1", "    let mut\
    \ max_val: Option<isize> = None;\n    let mut max_freq: Option<isize> = None;\n\
    \    for val in lst {\n        let freq = lst.filter(|x| *x == val).count();\n\
    \        if freq >= *val {\n            if max_freq.is_none() {\n            \
    \    max_freq = Some(val);\n                max_val = Some(val);\n           \
    \ } else {\n                max_freq = Some(freq);\n                max_val =\
    \ Some(val);\n            }\n        }\n    }\n    if max_freq.is_none() {\n \
    \       max_freq = None;\n        max_val = None;\n    }\n    if max_freq.is_some()\
    \ {\n        *max_freq\n    } else {\n        *max_val\n    }", "    let mut max\
    \ = -1;\n    let mut freq = 1;\n    for e in lst {\n        if e > max {\n   \
    \         max = e;\n            freq = 1;\n        } else {\n            freq\
    \ += 1;\n        }\n    }\n    if freq > max {\n        return -1;\n    }\n  \
    \  max", "    let mut max = 0;\n    let mut freq = lst.len();\n    for i in lst\
    \ {\n        if freq > max {\n            max = freq;\n        }\n        if freq\
    \ == i {\n            freq += 1;\n        } else {\n            freq -= 1;\n \
    \       }\n    }\n    if freq > max {\n        -1\n    } else {\n        max\n\
    \    }", "    let mut m = lst.len() as isize;\n    let mut cnt = 0;\n    loop\
    \ {\n        if cnt > m {\n            return -1;\n        }\n        if cnt+lst[cnt]\
    \ > m {\n            cnt += 1;\n        } else {\n            return cnt+lst[cnt];\n\
    \        }\n    }", "    let mut max_freq = -1;\n    let mut max_elem = 0;\n \
    \   for ele in lst.iter().cloned() {\n        if let Some(ele_freq) = &ele {\n\
    \            if ele_freq > max_freq {\n                max_freq = ele_freq;\n\
    \                max_elem = ele;\n            }\n        }\n    }\n    max_elem",
  "    let mut freq = Vec::new();\n    for &el in lst {\n        freq.push(el);\n\
    \    }\n    if freq.len() == 0 {\n        -1\n    } else {\n        for el in\
    \ freq.iter().rev() {\n            if el > 0 {\n                if freq.iter().any(|&x|\
    \ x == el) {\n                    return el;\n                }\n            }\n\
    \        }\n        -1\n    }", "    // Base case: if the list is empty, return\
    \ -1\n    if lst.is_empty() {\n        return -1;\n    }\n\n    // Recursive case:\
    \ pick the first element and check all others \n    // until we find a non-matching\
    \ element.\n    let first: isize = lst.first();\n    let mut is_match = true;\n\
    \    for e in lst.iter().skip(1) {\n        if e > first {\n            is_match\
    \ = false;\n            break;\n        }\n    }\n\n    // Return the index of\
    \ the first non-matching element\n    if !is_match {\n        return -1;\n   \
    \ }\n    first", "    // If empty return -1\n    if lst.is_empty() {\n       \
    \ return -1;\n    }\n\n    // Iterate and keep track of the largest frequency,\
    \ then return it\n    let mut freq = vec![0];\n    for num in lst {\n        freq.push(1);\n\
    \        freq[0] += 1;\n    }\n\n    for i in 0..freq.len() {\n        if freq[i]\
    \ > freq[0] {\n            return i;\n        }\n    }\n\n    // No frequency\
    \ was found\n    return -1;", "    let mut max: usize = 0;\n    let mut freq:\
    \ usize = 0;\n    for i in lst.iter() {\n        if *i > 0 {\n            if *i\
    \ == 1 {\n                freq += 1;\n            } else {\n                freq\
    \ -= 1;\n            }\n        } else {\n            max = i;\n        }\n  \
    \      if freq > 0 {\n            freq += 1;\n        } else {\n            freq\
    \ -= 1;\n        }\n        if freq > 0 {\n            freq += 1;\n        } else\
    \ {\n            freq -= 1;\n        }\n    }\n    max", "    let mut max_freq\
    \ = -1isize;\n    let mut freq = vec![0; lst.len()];\n    for &num in &lst {\n\
    \        freq[num] += 1;\n        if freq[num] > max_freq {\n            max_freq\
    \ = freq[num];\n        }\n    }\n    if freq.iter().any(|&x| x > max_freq) {\n\
    \        -1\n    } else {\n        max_freq\n    }", "    let mut freq_map = HashMap::new();\n\
    \    for x in lst {\n        freq_map.insert(x, freq_map.get(&x)?.clone() + 1);\n\
    \    }\n    for x in &freq_map {\n        if let Some(y) = &x.value {\n      \
    \      if x.1 >= y {\n                return x.0;\n            }\n        }\n\
    \    }\n    -1", "    let mut freq = vec![0];\n    for el in lst {\n        freq[el]\
    \ += 1;\n    }\n    let max_count = freq.iter().fold(0, |acc, el| if acc == 0\
    \ { el } else { acc });\n    if max_count > 0 {\n        lst.iter().filter(|&el|\
    \ freq[el] >= max_count).next().unwrap()\n    } else {\n        -1\n    }", " \
    \   let mut i = lst.len();\n    while i > 0 {\n        let mut j = i;\n      \
    \  loop {\n            j = j - 1;\n            if lst[j] > lst[i] {\n        \
    \        break;\n            }\n        }\n        if j == i {\n            return\
    \ -1;\n        }\n        i -= 1;\n    }\n    return i;", "    if lst.len() ==\
    \ 0 {\n        -1\n    } else {\n        let mut counter = 0;\n        let mut\
    \ min = lst[0];\n        for el in lst {\n            if el > 0 {\n          \
    \      counter = counter + 1;\n                if el < min {\n               \
    \     min = el;\n                }\n            }\n        }\n        if counter\
    \ > 1 {\n            -1\n        } else {\n            min\n        }\n    }",
  "    let mut freq = HashMap::new();\n    let mut max: isize = -1;\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n        if freq[x] > freq.entry(max).or_insert(0)\
    \ {\n            max = x;\n        }\n    }\n    max", "    let mut min = vec![0;\
    \ lst.len()];\n    for x in lst {\n        min[x] = lst.iter().fold(0, |x, y|\
    \ x + y);\n    }\n    let mut max = vec![0; lst.len()];\n    for x in lst {\n\
    \        max[x] = lst.iter().fold(0, |x, y| max(x, y));\n    }\n    find_index(min,\
    \ max, &lst)", "    let mut max = -1;\n\n    for value in lst {\n        if value\
    \ > max {\n            max = value;\n        }\n    }\n\n    if max != -1 {\n\
    \        return max;\n    }\n\n    -1", "    let mut freq: usize = 0;\n    for\
    \ ele in lst {\n        if ele > 0 {\n            if freq < ele {\n          \
    \      freq = ele;\n            }\n        }\n    }\n    if freq == 0 {\n    \
    \    return -1;\n    }\n    freq", "    let mut v = lst.iter().cloned().collect();\n\
    \    v.sort_unstable();\n    let mut frequency = Vec::new();\n    while !v.is_empty()\
    \ {\n        frequency.push(v.next().unwrap());\n    }\n    frequency.sort_unstable();\n\
    \    if let Some(index) = frequency.iter().rposition(|x| x > 0).unwrap() {\n \
    \       return index;\n    } else {\n        return -1;\n    }", "    let mut\
    \ m = isize::min_value();\n    for n in lst {\n        if m == 0 {\n         \
    \   m = n;\n        }\n        if n == m {\n            m += 1;\n        }\n \
    \   }\n    if m != isize::min_value() {\n        m\n    } else {\n        -1\n\
    \    }", "    if lst.is_empty() {\n        return -1\n    }\n    let mut freq\
    \ = HashMap::new();\n    for num in lst {\n        freq.entry(num).or_insert(0)\
    \ += 1;\n    }\n    let mut freq_count = freq.values.iter().rev().take(10);\n\
    \    freq_count.fold(-1, |max, &val| {\n        if val >= max {\n            max\n\
    \        } else {\n            let new_max = val + max;\n            if new_max\
    \ < val {\n                val\n            } else {\n                val\n  \
    \          }\n        }\n    })", "    let mut freqs: HashMap<isize, usize> =\
    \ HashMap::new();\n    for x in lst {\n        if freqs.contains_key(&x) {\n \
    \           freqs.entry(x).or_insert(0) += 1;\n        } else {\n            freqs.insert(x,\
    \ 1);\n        }\n    }\n    if freqs.contains_key(&0) {\n        -1\n    } else\
    \ {\n        freqs.max_by_key(|x| x)\n    }", "    let mut max_idx = 0;\n    let\
    \ mut freq = 0;\n    for &i in lst {\n        freq += 1;\n        if freq > i\
    \ {\n            max_idx = i;\n        }\n    }\n    if freq == 0 {\n        -1\n\
    \    } else {\n        max_idx\n    }", "    match lst.iter().cloned().enumerate().max_by(|a,\
    \ b| {\n        a.1.cmp(&b.1) == Ordering::Greater && a.1.cmp(&b.0) > 0\n    })\
    \ {\n        Some(a) => a.1,\n        None => -1,\n    }", "    let mut freq =\
    \ HashMap::new();\n    for x in lst {\n        assert!(!freq.contains_key(x));\n\
    \        freq.insert(x, 1);\n    }\n\n    fn max(freq: &mut HashMap<isize, usize>,\
    \ key: usize) -> usize {\n        if freq.contains_key(key) {\n            let\
    \ mut result = key;\n            for x in freq.remove(&key) {\n              \
    \  if x > result {\n                    result = x;\n                }\n     \
    \       }\n            return result;\n        } else {\n            return -1;\n\
    \        }\n    }\n\n    let mut max_key = -1;\n    while !freq.is_empty() {\n\
    \        let mut current_max = max(freq.keys(), 0);\n        let mut current_max\
    \ = current_max * freq.get(&current_max).unwrap() + 1;\n        max_key = current_max;\n\
    \n        if max_key > 0 {\n            let mut new_freq = HashMap::new();\n \
    \           for x in &freq[&max_key] {\n                new_freq.insert(x, freq.get(&x).unwrap()\
    \ + 1);\n            }\n            freq = new_freq;\n        } else {\n     \
    \       break;\n        }\n    }\n\n    max_key", "    let mut i = lst.len() -\
    \ 1;\n    let mut freq = 0;\n    while i >= 0 {\n        i += 1\n        if freq\
    \ > lst[i] {\n            freq = lst[i];\n        } else {\n            break;\n\
    \        }\n    }\n    freq", "    use std::cmp::Ordering;\n    let mut freqs\
    \ = Vec::new();\n\n    for val in lst.iter() {\n        freqs.push(match freqs.get_mut(&val)\
    \ {\n            Some(x) => x + 1,\n            None => 0,\n        });\n    }\n\
    \n    let min_freq = freqs.iter().min();\n\n    match freqs.iter().find(|&(_)|\
    \ min_freq <= *val) {\n        Some(idx) => idx,\n        None => -1,\n    }",
  "    let mut high = -1;\n\n    for elt in lst {\n        if elt > high {\n     \
    \       high = elt;\n        }\n    }\n\n    if high == -1 {\n        return -1;\n\
    \    }\n\n    for i in 0..lst.len() {\n        if lst[i] >= high {\n         \
    \   return i;\n        }\n    }\n\n    return -1;", "    if lst.is_empty() {\n\
    \        -1\n    }\n    let mut max_index = 0;\n    let mut freq = 0;\n    let\
    \ mut max_freq = 0;\n    for v in lst {\n        if v > 0 {\n            freq\
    \ += 1;\n            if freq > max_freq {\n                max_freq = freq;\n\
    \                max_index = v;\n            }\n        }\n    }\n    Some(max_index)",
  "    if lst.len() == 0 {\n        return -1;\n    }\n    let mut first_occurance\
    \ = vec![0; lst.len()];\n    let mut max_val = -999;\n    for i in lst {\n   \
    \     if i > 0 {\n            if first_occurance[i] < 2 {\n                first_occurance[i]\
    \ = 1;\n            }\n        } else {\n            if first_occurance[i] > 1\
    \ {\n                break;\n            }\n        }\n        if first_occurance[i]\
    \ >= max_val {\n            max_val = first_occurance[i];\n        }\n    }\n\
    \    if max_val == -999 {\n        return -1;\n    }\n    return max_val;", " \
    \   if lst.len() < 1 {\n        -1\n    } else {\n        let mut result = vec![0];\n\
    \n        for i in lst {\n            if *i > result.last() {\n              \
    \  result.push(i);\n            }\n        }\n\n        *(result.iter().max(|a,\
    \ b| a.cmp(b).unwrap()))\n    }", "    let mut max: isize = 0;\n    let mut freq\
    \ = 1;\n    for i in lst {\n        if freq <= i {\n            freq += 1;\n \
    \       } else {\n            if freq > max {\n                max = freq;\n \
    \           }\n            freq = 1;\n        }\n    }\n    if freq > max {\n\
    \        max = freq;\n    }\n    max", "    let mut freq = HashMap::new();\n \
    \   for n in lst.iter() {\n        freq.entry(*n).or_insert(0) += 1;\n    }\n\n\
    \    for (k, v) in freq.iter() {\n        if *v > 0 {\n            return k;\n\
    \        }\n    }\n\n    return -1;", "    let mut freq = 0;\n    let mut max\
    \ = -1;\n    for el in lst {\n        if freq > 0 {\n            if freq == el\
    \ {\n                freq = 0;\n                max = el;\n            } else\
    \ {\n                freq -= 1;\n            }\n        }\n    }\n    max", " \
    \   let mut max_idx = 0;\n    let mut max_val = lst[0];\n    for (idx, val) in\
    \ lst.iter().enumerate() {\n        if val > max_val {\n            max_val =\
    \ val;\n            max_idx = idx;\n        }\n    }\n    max_idx", "    let mut\
    \ max = 0;\n    let mut i = lst.iter().rev().enumerate();\n    while !i.next().is_some()\
    \ {\n        if let Some(item) = i.next() {\n            if item > max {\n   \
    \             max = item;\n            }\n            if item.1 > max {\n    \
    \            max = item.1;\n            }\n        }\n    }\n    if max < 0 {\n\
    \        -1\n    } else {\n        max\n    }", "    let mut largest = -1;\n \
    \   let mut freq = 1;\n    for ele in lst.iter() {\n        if ele == 0 {\n  \
    \          continue;\n        }\n        if freq > largest {\n            largest\
    \ = ele;\n        }\n        ele += freq;\n        freq *= ele;\n    }\n    largest",
  "    let mut max = -1isize;\n    for (i, el) in lst.iter().enumerate() {\n     \
    \   if el > 0 {\n            if max < el {\n                max = el;\n      \
    \      }\n        }\n    }\n    max", "    let mut freq = lst.iter().filter(|&x|\
    \ x > 0).count();\n    freq.cmp(&freq.max())", "    let mut freq = Arc::new(HashMap::new());\n\
    \    let mut greatest = 0isize;\n    let mut cnt = 0;\n    for x in lst {\n  \
    \      if *freq.entry(x).or_insert(0) >= x {\n            greatest = x;\n    \
    \        cnt += 1;\n        }\n        freq.entry(x).or_insert(0) = cnt + x;\n\
    \    }\n    greatest", "    let mut max = -1;\n    let mut freq = usize::MAX;\n\
    \    for elt in lst {\n        if *elt > max {\n            max = *elt;\n    \
    \    }\n        if *elt >= *max {\n            freq = (freq + 1) as usize;\n \
    \       }\n    }\n    max", "    let mut min = vec![Int::default(); lst.len()];\n\
    \    for (i,e) in lst.iter().zip(min.iter()).skip(1).take(lst.len()) {\n     \
    \   if *e < 0 {\n            *e = -1;\n            continue;\n        }\n    \
    \    *e += 1;\n        if *e > min.max().unwrap() + 1 {\n            min[0] =\
    \ -1;\n            break;\n        }\n    }\n    min.iter().max().unwrap()", " \
    \   if lst.len() == 0 {\n        return -1;\n    }\n\n    let mut freq = vec![0;\
    \ lst.len()];\n    let mut max: isize = 0;\n\n    for i in lst {\n        freq[i]\
    \ = freq[i] + 1;\n        if freq[i] > max {\n            max = freq[i];\n   \
    \     }\n    }\n\n    for i in 0..lst.len() {\n        if freq[i] >= i {\n   \
    \         return i;\n        }\n    }\n\n    return -1;", "    let mut result\
    \ = -1;\n    let mut i = 1;\n    let mut freq = 1;\n\n    while i < lst.len()\
    \ {\n        if freq == lst.len() {\n            result -= 1;\n        }\n\n \
    \       if freq < lst.len() && lst.len() > i {\n            if lst[i] == freq\
    \ {\n                freq += 1;\n            } else {\n                freq =\
    \ lst[i];\n            }\n        } else {\n            result -= 1;\n       \
    \ }\n        i += 1;\n    }\n    result", "    let mut min: isize = 0;\n    let\
    \ mut max: isize = 0;\n    for i in lst.iter() {\n        match i {\n        \
    \    0 => {}\n            x => {\n                if x < min {\n             \
    \       min = x;\n                }\n            }\n        }\n    }\n\n    for\
    \ i in lst.iter() {\n        match i {\n            0 => {}\n            x =>\
    \ {\n                if x > max {\n                    max = x;\n            \
    \    }\n            }\n        }\n    }\n\n    if min == max {\n        -1\n \
    \   } else {\n        min\n    }", "    let mut freq = std::collections::HashMap::new();\n\
    \    for (index, val) in lst.iter().enumerate() {\n        freq.insert(val, index);\n\
    \    }\n    let mut max_val = 0;\n    let mut max_index = -1;\n    for val in\
    \ freq.keys() {\n        if val >= max_val {\n            max_val = val;\n   \
    \         max_index = freq.get_mut(val).unwrap();\n        }\n    }\n    if max_index\
    \ == -1 {\n        -1\n    } else {\n        max_index\n    }", "    let mut counter\
    \ = 1;\n    let mut max_freq = 0;\n    for i in lst.iter() {\n        if i > 0\
    \ {\n            counter = counter * i;\n        }\n        if counter == 1 {\n\
    \            max_freq = i;\n        }\n        counter -= 1;\n    }\n    if counter\
    \ == 1 && max_freq > 0 {\n        return max_freq;\n    } else {\n        -1\n\
    \    }", "    if lst.is_empty() {\n        return -1;\n    }\n\n    let mut freq:\
    \ Vec<isize> = lst.into_iter().map(|x| *x).collect();\n    freq.sort();\n    freq.pop();\n\
    \n    if freq.iter().any(|&x| x <= 0) {\n        return -1;\n    }\n\n    let\
    \ mut max = 0;\n\n    for i in freq.iter().rev() {\n        if *i < max {\n  \
    \          max = *i;\n        }\n    }\n\n    max", "    let mut max = 0;\n  \
    \  let mut freq = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if\
    \ item > max {\n            max = item;\n        }\n        if item == max {\n\
    \            freq += 1;\n        }\n    }\n    if max > 0 {\n        return max;\n\
    \    }\n    return -1;", "    if lst.len() == 0 {\n        return -1;\n    }\n\
    \    let mut freq = std::collections::HashSet::new();\n    for ele in lst {\n\
    \        if !freq.contains_key(&ele) {\n            freq.insert(ele);\n      \
    \  }\n    }\n    let mut res = -1;\n    for (ele, freq) in freq.iter().zip(lst.iter())\
    \ {\n        if ele > 0 && freq > 0 {\n            if freq >= ele {\n        \
    \        res = ele;\n            }\n        }\n    }\n    res", "    let mut max_freq\
    \ = -1;\n    let mut freq = 0;\n    for ele in lst {\n        freq += ele;\n \
    \       if freq > max_freq {\n            max_freq = freq;\n        }\n    }\n\
    \    if max_freq == -1 {\n        return -1;\n    }\n    let mut best_idx = 0;\n\
    \    for idx = 0; idx < lst.len(); idx++ {\n        if lst[idx] > max_freq {\n\
    \            break;\n        }\n    }\n    return best_idx;", "    let mut max_so_far\
    \ = -1;\n    let mut max_count = -1;\n    for elt in lst.iter() {\n        if\
    \ *elt > 0 && *elt >= *max_count {\n            max_count = 1;\n            *max_so_far\
    \ = *elt;\n        } else if *elt > 0 && *elt >= *max_count {\n            *max_count\
    \ = *elt;\n            *max_so_far = *elt;\n        }\n    }\n    if *max_count\
    \ > 0 && *max_count >= *max_so_far {\n        *max_so_far\n    } else {\n    \
    \    -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst.iter()\
    \ {\n        freq.insert(x, freq.entry(x).or_insert(0));\n    }\n    \n    for\
    \ x in freq.keys() {\n        if freq[x] > lst.len() - x && freq[x] >= lst.len()\
    \ - x {\n            return x;\n        }\n    }\n    \n    -1", "    let mut\
    \ freq = vec![0; lst.len()];\n    for &x in lst {\n        freq[x] += 1;\n   \
    \ }\n    \n    for &x in freq.iter() {\n        if freq[x] >= x {\n          \
    \  return x;\n        }\n    }\n    \n    -1", "    let mut max_num: isize = -1;\n\
    \    let mut min_num = std::i32::MAX;\n    for num in lst.iter() {\n        if\
    \ num < min_num {\n            min_num = num;\n        }\n        if num > max_num\
    \ {\n            max_num = num;\n        }\n    }\n    if min_num > 0 {\n    \
    \    return min_num;\n    }\n    return max_num;", "    if lst.len() > 0 {\n \
    \       let mut freqs = lst.iter().fold(0, |sum, el| sum + el);\n        if freqs\
    \ > 0 {\n            for e in lst {\n                if freqs == e {\n       \
    \             return e;\n                }\n                freqs = freqs - e;\n\
    \            }\n        }\n    }\n    -1", "    let mut max_freq = 0;\n    let\
    \ mut index = 0;\n    let mut current_freq = 1;\n\n    while index != lst.len()\
    \ {\n        index = lst.iter().enumerate().find(|(_, x)| x > current_freq).unwrap();\n\
    \n        if index == lst.len() {\n            break;\n        }\n\n        if\
    \ lst[index] == current_freq {\n            current_freq += 1;\n        } else\
    \ {\n            max_freq = current_freq;\n            current_freq = 1;\n   \
    \     }\n    }\n\n    if max_freq == current_freq {\n        return -1;\n    }\n\
    \    \n    return max_freq;", "    use std::cmp::Ordering;\n    use std::cmp::Ordering::*;\n\
    \    let mut freqs = Vec::with_capacity(lst.len());\n    for elt in lst {\n  \
    \      freqs.push(elt.clone());\n    }\n    let mut max_freq = freqs[0];\n   \
    \ for freq in freqs.iter_mut() {\n        *freq = (*freq as usize).cmp(&max_freq).unwrap_or(1);\n\
    \    }\n    if max_freq == 0 {\n        -1\n    } else {\n        max_freq\n \
    \   }", "    let mut min = vec![-1isize; lst.rev().len()];\n\n    for i in 0..lst.rev().len()\
    \ {\n        if lst[i] > 0 {\n            if min[i] < 0 {\n                min[i]\
    \ = i;\n            } else {\n                if min[min[i]] >= 0 {\n        \
    \            min[i] = min[min[i]];\n                } else {\n               \
    \     min[i] = i;\n                }\n            }\n        }\n    }\n\n    if\
    \ min.iter().all(|&x| x < 0) {\n        return -1;\n    }\n\n    match min.iter().any(|&x|\
    \ x >= 0) {\n        true => return (min - min.iter().filter(|&x| x < 0).collect::<Vec<isize>>()).last().unwrap_or(-1),\n\
    \        false => return -1,\n    }", "    let mut max = 0;\n    let mut freq\
    \ = 1;\n    for x in lst {\n        if *x > max {\n            max = *x;\n   \
    \         freq = 1;\n        } else {\n            freq += 1;\n        }\n   \
    \ }\n    if freq >= max {\n        return -1;\n    }\n    max", "    \n    struct\
    \ Solution;\n    \n    impl<'a> Solution for Vec<isize> {\n        fn search(&self,\
    \ num: isize) -> Option<isize> {\n            self.binary_search(num).map(|index|\
    \ index + 1)\n        }\n    }\n\n    let solution = Solution { lst: lst };\n\
    \    \n    solution.search(num).unwrap()", "    let mut it = lst.iter().enumerate().rev();\n\
    \    loop {\n        let (n, x) = it.next();\n        if n < 0 || x >= lst.len()\
    \ {\n            return -1;\n        }\n        let mut n = n as isize;\n    \
    \    let mut x = x as isize;\n        if n >= x {\n            it.next(); // skip\
    \ x\n            n--; // decrement n\n        }\n        if n&x > 0 {\n      \
    \      return x;\n        }\n    }", "    use std::cmp::Ordering::*;\n    lst.sort_by(|&a,\
    \ &b| {\n        match (*a, *b) {\n            (Less, Equal) => Ordering::Less,\n\
    \            (Greater, Equal) => Ordering::Greater,\n            (Equal, _) =>\
    \ Ordering::Equal,\n        }\n    });\n    lst.iter().filter(|&x| x > 0).max()",
  "    match lst.iter().enumerate().max().filter(|&(i, x)| x > 0) {\n        Some((i,\
    \ x)) if x >= lst.len() as isize => i,\n        _ => -1,\n    }", "    let mut\
    \ max = vec![-1; lst.len()];\n    let mut freq = vec![0; lst.len()];\n\n    for\
    \ i in &lst {\n        freq[i] = freq[i] + 1;\n        if freq[i] > max {\n  \
    \          max = freq[i];\n        }\n    }\n\n    if freq.iter().find(|&x| *x\
    \ == -1) != freq.iter().end() {\n        -1\n    } else {\n        max[0]\n  \
    \  }", "    let mut freqs = HashMap::new();\n    for elem in lst.iter() {\n  \
    \      freqs.entry(elem).or_insert(0) += 1;\n    }\n    match freqs.iter().max_by_key(|&(k,\
    \ _)| k.to_string()) {\n        Some((max, _)) => max,\n        None => -1,\n\
    \    }", "    let mut freq = [0];\n    for el in lst.iter() {\n        freq.push(0);\n\
    \    }\n\n    for el in lst.iter() {\n        freq[el as usize] += 1;\n    }\n\
    \n    for el in freq.iter().rposition(|x| *x > 1) {\n        el\n    }", "   \
    \ if lst.is_empty() {\n        return -1;\n    }\n    let mut freq: isize = 0;\n\
    \    let mut max = 0;\n    for i in lst {\n        if freq > 0 {\n           \
    \ freq = freq.saturating_sub(1);\n        }\n        if freq == 0 {\n        \
    \    if *i == 0 {\n                max = i;\n            } else {\n          \
    \      freq = i;\n            }\n        } else {\n            freq = freq.saturating_add(1);\n\
    \            if *i == 0 {\n                if max < freq {\n                 \
    \   max = i;\n                }\n            }\n        }\n    }\n    max", " \
    \   \n    if lst.len() == 0 {\n        -1\n    }\n    if lst.len() == 1 {\n  \
    \      vec![*lst]\n    }\n    if lst.len() > 1 {\n        let max_value = *lst.iter().max();\n\
    \        let mut count = 0;\n        \n        for i in lst.iter() {\n       \
    \     if *i == max_value {\n                count += 1;\n            }\n     \
    \   }\n        \n        if count >= *lst.iter().max() {\n            -1\n   \
    \     } else {\n            max_value\n        }\n    }", "    let mut high =\
    \ std::cmp::max(lst.len(), 0);\n    \n    let mut freq = vec![0; lst.len()];\n\
    \    for x in lst {\n        (*freq[x]) = (freq[x] + 1) % high;\n        high\
    \ = (high - freq[x]) % high;\n    }\n    \n    if freq.iter().all(|&x| x >= high)\
    \ {\n        -1\n    } else {\n        high\n    }", "    let mut max_idx = lst.len()\
    \ - 1;\n    let mut curr = lst[max_idx];\n    while curr > 0 {\n        let new_max_idx\
    \ = max_idx;\n        while new_max_idx >= 0 && curr == lst[new_max_idx] {\n \
    \           new_max_idx -= 1;\n        }\n        if new_max_idx < 0 {\n     \
    \       return -1;\n        }\n        max_idx = new_max_idx;\n        curr =\
    \ lst[max_idx];\n    }\n    max_idx", "    let mut max = 0isize;\n    let mut\
    \ freq = Vec::new();\n\n    for elem in lst {\n        freq.push(elem);\n    }\n\
    \n    for i in 0..lst.len() {\n        if freq[i] >= freq[max] {\n           \
    \ max = i;\n        }\n    }\n\n    if max == lst.len() - 1 {\n        return\
    \ -1;\n    }\n\n    freq[max]", "    \n    if lst.len() == 0 {\n        return\
    \ -1;\n    }\n    let mut freq = vec![0]; \n    for (i, &item) in lst.iter().enumerate()\
    \ {\n        freq[i] = freq[i] + 1;\n        if freq[i] > item {\n           \
    \ return i;\n        }\n    }\n    return -1;", "    fn find_first(first: isize)\
    \ -> Option<isize> {\n        if first > 0 {\n            find_first(first-1)\n\
    \        } else {\n            None\n        }\n    }\n\n    if lst.len() > 0\
    \ {\n        let first = find_first(lst.len());\n        let value = first.unwrap_or(-1);\n\
    \        if value >= lst.len() {\n            return -1;\n        }\n        let\
    \ mut counter = 0;\n        for ele in lst {\n            if ele == value {\n\
    \                counter += 1;\n            }\n        }\n        if counter >\
    \ 0 {\n            return lst.iter().max_by_key(|&x| x).unwrap();\n        }\n\
    \    }\n    -1", "    let mut counter = HashMap::new();\n    for elem in lst {\n\
    \        if counter.contains_key(&elem) {\n            let count = counter.entry(&elem).or_insert(0);\n\
    \            counter.entry(elem).and_modify(|x| *x = 1 + x)?;\n            if\
    \ *x > 0 {\n                return elem\n            }\n        } else {\n   \
    \         counter.insert(elem, 1);\n        }\n    }\n    -1", "    if lst.is_empty()\
    \ {\n        return -1;\n    }\n    \n    let mut freq = lst[0];\n    for i in\
    \ 1..lst.len() {\n        freq += lst[i];\n        if freq >= freq {\n       \
    \     return i;\n        }\n    }\n    return -1;", "    if lst.len() == 0 {\n\
    \        return -1;\n    }\n\n    let mut freq = vec![0; lst.len()];\n    for\
    \ i in lst.iter() {\n        freq[i] += 1;\n    }\n    let mut val = -1;\n   \
    \ for i in lst.iter() {\n        if freq[i] >= val {\n            val = i;\n \
    \       }\n    }\n    val", "    let mut max_freq = 0;\n    let mut max_element\
    \ = -1;\n\n    for e in lst.iter() {\n        if max_freq == 0 || e >= max_element\
    \ {\n            max_freq = e;\n            max_element = e;\n        } else if\
    \ e == max_freq {\n            max_freq += 1;\n        }\n    }\n    max_element",
  "    \n    let mut freq = vec![0; lst.len()];\n\n    for x in lst {\n        freq[x]\
    \ += 1;\n    }\n    \n    let mut max = lst.len();\n    \n    for i in 0..lst.len()-1\
    \ {\n        if freq[i] >= freq[max] {\n            max = i;\n        }\n    }\n\
    \n    if max < lst.len()-1 {\n        -1\n    } else {\n        max\n    }", " \
    \   let mut largest = lst.iter().max().unwrap();\n    let mut freq = lst.iter().filter(|x|\
    \ x > 0).count();\n    \n    while freq > 0 {\n        largest += 1;\n       \
    \ if freq == largest * 2 {\n            break;\n        }\n        freq -= 1;\n\
    \    }\n    \n    largest - 1", "    let mut frequencies = HashMap::new();\n \
    \   for &i in lst {\n        *frequencies.entry(i).or_insert(0) += 1;\n    }\n\
    \n    let mut max_index = -1;\n    let mut max_frequency = -1;\n    for (index,\
    \ frequency) in frequencies.iter().enumerate() {\n        if *frequency > max_frequency\
    \ {\n            max_frequency = *frequency;\n            max_index = index;\n\
    \        }\n    }\n    max_index", "    if lst.len() == 0 {\n        return -1;\n\
    \    }\n\n    let mut max_freq = isize::MAX;\n    let mut max_val = i32::MAX;\n\
    \n    for val in lst {\n        if val == 0 {\n            continue;\n       \
    \ }\n\n        let new_freq = lst.iter().filter(|x| *x == val).count();\n    \
    \    if new_freq > max_freq {\n            max_freq = new_freq;\n            max_val\
    \ = val;\n        }\n    }\n\n    if max_freq > 0 {\n        max_val\n    } else\
    \ {\n        -1\n    }", "    let mut max_freq = 0;\n    let mut max_elem = -1;\n\
    \    for e in lst {\n        if *e >= 0 {\n            if *e > max_freq {\n  \
    \              max_freq = *e;\n                max_elem = e;\n            }\n\
    \        }\n    }\n    max_elem", "    let mut min_value = std::i32::MAX;\n  \
    \  let mut min_value_index = std::isize::MAX;\n    for i in lst.iter().rev() {\n\
    \        \n        if *i < min_value {\n            min_value = *i;\n        \
    \    min_value_index = i;\n        }\n    }\n    if min_value_index == std::isize::MAX\
    \ {\n        return -1;\n    }\n    if min_value_index == 0 {\n        return\
    \ *lst.iter().rev().next().unwrap();\n    }\n    let mut freq = 0;\n    for i\
    \ in lst.iter().rev().skip(min_value_index) {\n        if *i < min_value {\n \
    \           break;\n        }\n        freq += 1;\n    }\n    min_value_index\
    \ - freq;\n    min_value_index", "    let mut counter = HashMap::new();\n    for\
    \ x in lst {\n        if counter.get_mut(&x).is_none() {\n            counter.insert(x,\
    \ 0);\n        }\n        counter.get_mut(&x).unwrap() += 1;\n    }\n    \n  \
    \  let mut max = -1;\n    for ((x, _), count) in counter.iter().take(counter.len()\
    \ - 1) {\n        if count > max {\n            max = count;\n        }\n    }\n\
    \    max", '    ', "    let mut res = -1;\n\n    for v in lst {\n        if v\
    \ > res {\n            res = v;\n        }\n    }\n\n    res", "    let mut cur:\
    \ isize = 0;\n    for x in lst {\n        if cur == x {\n            cur += 1;\n\
    \        } else {\n            if cur > x {\n                return cur;\n   \
    \         }\n            cur = x;\n        }\n    }\n    return -1;", "    //\
    \ find the greatest index that has a frequency greater than or equal to the value\
    \ of the integer\n    let mut max = lst.len() as isize;\n    let mut idx = 1;\n\
    \    while idx < lst.len() {\n        let mut count = 0;\n        for i in 1..lst.len()\
    \ {\n            if lst[idx] == lst[i] {\n                count += 1;\n      \
    \          if count > max {\n                    max = count;\n              \
    \  }\n            }\n        }\n        idx += 1;\n    }\n    if max > 0 {\n \
    \       max\n    } else {\n        -1\n    }", "    let mut max_elem = -1;\n \
    \   let mut max_elem_index = -1;\n    let mut freq = vec![0];\n\n    for i in\
    \ lst.iter() {\n        if freq.iter().skip(i).count() >= freq.iter().count()\
    \ {\n            if freq[i] - freq.iter().skip(i).count() >= max_elem - freq.iter().count()\
    \ {\n                max_elem = freq[i];\n                max_elem_index = i;\n\
    \            }\n        } else {\n            freq.push(1);\n        }\n    }\n\
    \    if max_elem_index != -1 && max_elem_index < lst.len() {\n        max_elem_index\n\
    \    } else {\n        max_elem_index\n    }", "    if lst.len() <= 1 {\n    \
    \    return -1\n    }\n    \n    let mut counters = vec![0; lst.len()];\n\n  \
    \  for &i in lst {\n        counters[i as usize] += 1;\n    }\n    \n    for i\
    \ in 0..lst.len() {\n        if counters[i] < counters[i + 1] {\n            return\
    \ i as isize;\n        }\n    }\n    \n    return -1", "    let mut res = -1;\n\
    \    for v in lst {\n        if res < 0 || res-v in lst {\n            res = v;\n\
    \        }\n    }\n    res", "    let mut counter = 0;\n    let mut result = -1;\n\
    \    for el in lst {\n        if counter == el {\n            counter = 0;\n \
    \           result = el;\n        }\n        counter += 1;\n    }\n    result",
  "    let mut v = lst.iter().cloned().collect::<Vec<_>>();\n    let mut i = 1;\n\
    \    loop {\n        if v.contains(&i) {\n            return i;\n        }\n \
    \       i += 1;\n    }", "    let mut largest = -1;\n    let mut freq = Vec::new();\n\
    \    for ele in lst {\n        freq.push(ele);\n        if ele > 0 {\n       \
    \     if let Some(mut largest) = freq.iter().max().unwrap() {\n              \
    \  largest = ele;\n            }\n        }\n    }\n    if freq.iter().any(|&_|\
    \ _ > largest) {\n        -1\n    } else {\n        largest\n    }", "    lst.iter().fold(0,\
    \ |acc, val| {\n        if *val <= acc {\n            *val\n        } else {\n\
    \            acc\n        }\n    })", "    let mut cnt = 0;\n    for elt in lst\
    \ {\n        if cnt > elt {\n            return cnt;\n        }\n        cnt +=\
    \ 1;\n    }\n    -1", '    lst.iter().fold(-1, |acc, x| acc if acc == -1 || x
    <= acc => x).unwrap_or(-1)', "    let mut freqs: Vec<isize> = vec![0; lst.len()];\n\
    \    let mut max_freq = 0;\n    for i in lst.iter() {\n        freqs[i] = freqs.get(&i).unwrap()\
    \ + 1;\n        if freqs[i] > max_freq {\n            max_freq = freqs[i];\n \
    \       }\n    }\n    for i in freqs.iter() {\n        if freqs[i] > max_freq\
    \ {\n            return i;\n        }\n    }\n    return -1;", "    use std::collections::HashMap;\n\
    \    let mut cnts = HashMap::new();\n    for v in lst {\n        cnts.entry(v).or_insert(0);\n\
    \    }\n    let max_value = std::cmp::min(lst.len(), cnts.iter().map(|(_, count)|\
    \ *count).sum());\n    for i in 0..lst.len() {\n        if cnts[i] != 0 {\n  \
    \          if cnts[i] == max_value && cnts[i] > i {\n                return i;\n\
    \            }\n            cnts[i] = cnts[i] - 1;\n        }\n    }\n    -1",
  "    let mut min_isize = std::i32::MAX;\n    for i in lst.iter() {\n        if *i\
    \ == *min_isize {\n            min_isize = i;\n        }\n    }\n    min_isize",
  "    let mut min = -1isize;\n    let mut max = lst.len() - 1;\n    let mut current\
    \ = vec![0; lst.len()];\n\n    while current != lst.iter().cloned() {\n      \
    \  current.iter().cloned().for_each(|&item| {\n            if item < min {\n \
    \               min = item;\n            }\n        });\n        current.iter().cloned().for_each(|&item|\
    \ {\n            if item > max {\n                max = item;\n            }\n\
    \        });\n    }\n\n    if min >= 0 && current >= lst.iter().cloned() {\n \
    \       return min;\n    }\n    return -1;", "    if lst.len() > 0 {\n       \
    \ let mut freq = vec![0];\n        for i in 0..lst.len() {\n            freq[lst[i]]\
    \ += 1;\n            if freq[lst[i]] > freq[lst.len() - 1] {\n               \
    \ return lst[i];\n            }\n        }\n    }\n    -1", "    let mut counters\
    \ = vec![0; lst.len()];\n    let mut freqs = vec![0; lst.len()];\n    for i in\
    \ lst.iter() {\n        counters[i] += 1;\n        freqs[i] = counters[i];\n \
    \   }\n    for (_, val) in freqs.iter().enumerate().max_by(|a, b| b.1.cmp(&a.1))\
    \ {\n        if val <= 0 {\n            return -1;\n        }\n    }\n    let\
    \ mut sum = 0;\n    for i in freqs.iter() {\n        sum += i;\n    }\n    sum",
  "    if lst.len() < 2 {\n        return -1;\n    }\n    let mut max_freq = lst.len()\
    \ as isize;\n    for i in lst.iter().rev() {\n        if *i > 0 {\n          \
    \  if *i >= max_freq {\n                max_freq = *i;\n            }\n      \
    \  }\n    }\n    if max_freq == lst.len() {\n        return -1;\n    }\n    return\
    \ max_freq;", "    let mut freq_max = isize::MAX;\n    let mut idx = 0;\n    let\
    \ mut found = false;\n\n    for elem in lst.iter() {\n        if found {\n   \
    \         if elem == 0 {\n                return -1;\n            }\n        \
    \    if elem == freq_max {\n                return freq_max;\n            }\n\
    \        }\n        if elem == 0 {\n            found = false;\n        } else\
    \ {\n            found = true;\n        }\n\n        freq_max -= elem;\n     \
    \   idx += 1;\n    }\n\n    freq_max", "    let mut min_v = i32::MAX;\n    let\
    \ mut min_freq = 1;\n    for x in lst {\n        if *x >= min_v {\n          \
    \  let v = *x - min_v;\n            if v >= min_freq {\n                return\
    \ x;\n            } else {\n                min_v = v;\n                min_freq\
    \ = v;\n            }\n        }\n    }\n    -1", "    let mut max: isize = 1;\n\
    \    let mut freq = lst.count(|x| x > 0);\n    while freq > 0 {\n        max =\
    \ *lst.iter().max().unwrap();\n        freq = lst.iter().filter(|x| x > max).count(|x|\
    \ x > 0);\n    }\n    max", "    if lst.len() == 0 {\n        return -1;\n   \
    \ }\n    let mut freq = 1;\n    let mut max = -1;\n    for i in lst.iter() {\n\
    \        if freq > i {\n            freq = i;\n            max = i;\n        }\n\
    \    }\n    max", "    let mut min_freq = -1;\n    let mut min_idx = -1;\n   \
    \ for (idx, x) in lst.iter().enumerate() {\n        let freq = lst.iter().filter(|&x|\
    \ x == x).count();\n        if freq >= min_freq {\n            if freq == min_freq\
    \ {\n                min_idx = idx;\n            } else {\n                if\
    \ freq > min_freq {\n                    return min_idx;\n                }\n\
    \            }\n        } else {\n            min_freq = freq;\n            min_idx\
    \ = idx;\n        }\n    }\n    if min_idx != -1 { // if min_idx != -1, then min_freq\
    \ != -1, so min_idx < min_freq\n        min_idx\n    } else {\n        -1\n  \
    \  }", "    let mut min_freq = vec![0; lst.len()];\n    let mut greatest_int =\
    \ 0;\n    let mut greatest_int = vec![0; lst.len()];\n\n    for i in lst.iter()\
    \ {\n        greatest_int[i] = 1;\n    }\n    for i in lst.iter() {\n        min_freq[i]\
    \ += 1\n    }\n\n    for i in lst.iter() {\n        if min_freq[i] >= i {\n  \
    \          greatest_int = i;\n            break;\n        }\n    }\n    greatest_int",
  "    if lst.len() == 0 {\n        return -1;\n    }\n    \n    let mut max_freq\
    \ = 0;\n    let mut max_element = 0;\n    let mut it = lst.iter();\n    \n   \
    \ // Get max frequency\n    let mut frequency = it.count();\n    while frequency\
    \ > 0 {\n        frequency -= 1;\n        if *it > max_element {\n           \
    \ max_element = *it;\n        }\n        it += 1;\n    }\n    \n    if max_element\
    \ == 0 {\n        return -1;\n    }\n    \n    // Get max frequency with greatest\
    \ value\n    let mut freq_it = it.count();\n    while freq_it > 0 {\n        if\
    \ *freq_it > max_freq {\n            max_freq = *freq_it;\n        }\n       \
    \ freq_it -= 1;\n    }\n    \n    max_element"]
stop_tokens:
- "\n}"
