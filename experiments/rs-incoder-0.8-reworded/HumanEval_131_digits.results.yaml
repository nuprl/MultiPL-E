language: rs
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 0;\n    let mut rem = 0;\n    while n != 0\
    \ {\n        if n % 2 == 0 {\n            product *= 2;\n        } else {\n  \
    \          product += 1;\n        }\n        rem += 1;\n        n /= 10;\n   \
    \ }\n    if rem > 0 {\n        product *= rem;\n    }\n    product\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6a4o16fj.rs:20:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n20 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n as isize).checked_mul(2).expect(\n        \"digits requires\
    \ a positive integer\",\n    )\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `5`', /tmp/tmpkirvx3xk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n as i32).checked_mul(&((n as u32).trailing_zeros()))\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdoa3njeo.rs:11:28\n   |\n\
    11 |     (n as i32).checked_mul(&((n as u32).trailing_zeros()))\n   |        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&u32`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdoa3njeo.rs:11:5\n   |\n10 | fn\
    \ digits(n: isize) -> isize {\n   |                        ----- expected `isize`\
    \ because of return type\n11 |     (n as i32).checked_mul(&((n as u32).trailing_zeros()))\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<i32>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut product =\
    \ 1;\n    let mut counter = 0;\n    loop {\n        if n > counter {\n       \
    \     product *= n - counter;\n        }\n        counter += 1;\n        if counter\
    \ > 9 {\n            break;\n        }\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `120`,\n right: `5`', /tmp/tmp93ex_mr7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        return 0;\n    }\n    else {\n    \
    \    let mut result = 1;\n        for i in 3..=n / 2 {\n            result *=\
    \ i;\n        }\n        result *= n % 2;\n        result\n    }\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmpka5qjrej.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // Find the greatest power of 10 that divides n\n    let mut\
    \ remain = n;\n    let mut pow10 = 1;\n    while remain > 0 {\n        remain\
    \ %= 10;\n        pow10 *= 10;\n    }\n    pow10\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmpbjepydsk.rs:16:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    match n {\n        n @ 0 => 1,\n        n @ 1 => n,\n      \
    \  n @ 2 => n * 2,\n        n @ 3 => n * 3,\n        n @ 4 => n * 4,\n       \
    \ _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpqjkamxkv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        n.checked_mul(2).unwrap_or(0)\n\
    \    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `5`', /tmp/tmpczann13i.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // We use unsigned types to avoid any overflow:\n    // we take\
    \ the largest value that the type can represent.\n    let mut product = n.into();\n\
    \    let mut dig = n.into();\n    while dig.is_positive() {\n        if dig.is_odd()\
    \ {\n            product *= 2;\n        }\n        dig /= 10;\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpkdcj16n_.rs:15:11\n\
    \   |\n14 |     let mut dig = n.into();\n   |         ------- consider giving\
    \ `dig` a type\n15 |     while dig.is_positive() {\n   |           ^^^ cannot\
    \ infer type\n   |\n   = note: type must be known at this point\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    for &d in n.to_digits() {\n        if\
    \ d & 1 == 1 {\n            prod *= 10 * (d - 1) as isize;\n        } else {\n\
    \            return 0;\n        }\n    }\n    prod\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp0gv7si1d.rs:12:17\n   |\n12 |     for &d in n.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut total = 1;\n    for &d in &n {\n        if d % 2 ==\
    \ 1 {\n            total *= d;\n        }\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n  --> /tmp/tmpsxy7txeg.rs:12:15\n\
    \   |\n12 |     for &d in &n {\n   |               ^^ `&isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `&isize`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0, \"Odd digits not supported in digits\"\
    );\n    let mut product: isize = 0;\n    while n > 0 {\n        product = product*2\
    \ + n % 10;\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmph72ygr72.rs:15:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n15 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            result *= n;\n        }\n        n /= 2;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2s4o13z9.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 2;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return n;\n    }\n    let mut product =\
    \ n as isize;\n    for &d in &n.digits() as [1..] {\n        product *= d as usize;\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected type, found `1`\n  --> /tmp/tmpvbj53hha.rs:15:31\n   |\n\
    15 |     for &d in &n.digits() as [1..] {\n   |                              \
    \ ^ expected type\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut prod = 1;\n    while n >\
    \ 0 {\n        if n % 2 == 1 {\n            prod *= 2;\n            n /= 2;\n\
    \        } else {\n            prod *= 2;\n        }\n    }\n    prod\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphj1sxf4n.rs:16:13\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |             n /= 2;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        n * (n / 2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `5`', /tmp/tmps5zyxxxx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        return 0;\n    }\n\n    // Use a slice\
    \ to ensure that we do not use unnecessarily many divisions\n    let mut odds\
    \ = &n[..];\n\n    while let Some(digit) = odds.pop() {\n        if digit % 2\
    \ == 0 {\n            return digit * digits(n - digit);\n        }\n    }\n\n\
    \    0\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpg6ohk12t.rs:16:21\n\
    \   |\n16 |     let mut odds = &n[..];\n   |                     ^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for d in n.digits() {\n        product\
    \ *= d;\n        if product % 2 == 1 {\n            return 0;\n        }\n   \
    \ }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpli7quw26.rs:12:16\n   |\n12 |     for d in n.digits() {\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut i = 1;\n    while i <= n {\n\
    \        if n % i == 0 {\n            result *= i;\n        }\n        i += 2;\n\
    \    }\n    if n % 2 == 0 {\n        result *= n;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `39366`,\n right: `5`', /tmp/tmptdqzspnp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut digits = 0;\n\n    while n\
    \ > 0 {\n        product = product * n % 10;\n        digits += 1;\n        n\
    \ /= 10;\n    }\n\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable `digits` is assigned to, but never used\n  --> /tmp/tmpd6ud86qd.rs:12:13\n\
    \   |\n12 |     let mut digits = 0;\n   |             ^^^^^^\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n   = note: consider using `_digits`\
    \ instead\n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpd6ud86qd.rs:17:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n17 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n\n    } else {\n        n - 1\n  \
    \  }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpf9zr5a7t.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        return 0;\n    }\n    n / 2\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpspimfq0m.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut res: isize = 0;\n    while n > 0 {\n        res *= n\
    \ % 10;\n        n /= 10;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpe_np7hyb.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 1 {\n        return 1;\n    }\n    let mut accum = 0;\n\
    \    for &d in n.digits() {\n        accum += if d % 2 == 1 {\n            1\n\
    \        } else {\n            0\n        };\n    }\n    accum\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpxe3zosxv.rs:15:17\n   |\n15 |     for &d in n.digits()\
    \ {\n   |                 ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // Compute the product of digits in base 10, then reduce to\
    \ base 2.\n    n as isize * 10\n        .powf(1)\n        .rem(std::usize::MAX)\n\
    \        .into()\n        .into()\n        .powf(2)\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `powf` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp_lg0jxpa.rs:13:10\n   |\n13 |         .powf(1)\n   |          ^^^^\n\
    \   |\nhelp: you must specify a concrete type for this numeric value, like `i32`\n\
    \   |\n12 |     n as isize * 10_i32\n   |                  ~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0689`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n + digit_count(n as u64)) % 10\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_count` in this scope\n  --> /tmp/tmpnkvgxm7v.rs:11:10\n\
    \   |\n11 |     (n + digit_count(n as u64)) % 10\n   |          ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n.leading_zeros() as isize\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `61`,\n right: `5`', /tmp/tmp5hkb7t9q.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    for i in 2..=n {\n        if n % 2 ==\
    \ 1 {\n            prod *= i;\n            n /= i;\n        } else {\n       \
    \     prod /= i;\n        }\n    }\n    prod\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp107li_0c.rs:15:13\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n15 |             n /= i;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => n % 2 != 0 ? n / 2\
    \ : digits(n / 2),\n    }\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `n`\n\
    \  --> /tmp/tmprnf0ns6y.rs:13:27\n   |\n13 |         _ => n % 2 != 0 ? n / 2 :\
    \ digits(n / 2),\n   |           --              ^ expected one of `,`, `.`, `?`,\
    \ `}`, or an operator\n   |           |\n   |           while parsing the `match`\
    \ arm starting here\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    if n == 0 {\n        product\n    } else\
    \ {\n        0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9ektfot2.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n.checked_mul(2).expect(\"only even numbers\")\n        .checked_div(10)\n\
    \        .expect(\"only even numbers\")\n        .checked_div(10)\n        .expect(\"\
    only even numbers\")\n        .checked_div(10)\n        .expect(\"only even numbers\"\
    )\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmptm2w6hpf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut ns: Vec<isize> = vec![n];\n\
    \    let mut prod: isize = 1;\n    for d in ns {\n        if d % 2 == 1 {\n  \
    \          prod *= d / 2;\n        } else {\n            return 0;\n        }\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpm2tr4nzt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    match n % 10 {\n        0 => n % 10,\n        x if x % 2 ==\
    \ 1 => 1,\n        x => x,\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmptcsskkcy.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut res = 1;\n\
    \    let mut carry = 0;\n    for &d in n.digits() {\n        let digit = d.unwrap();\n\
    \        let mut mul = res.clone();\n        mul *= digit;\n        res -= digit;\n\
    \        res %= 10;\n        carry += mul;\n    }\n    carry %= 10;\n    res\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpe458augd.rs:16:17\n   |\n16 |     for &d in n.digits()\
    \ {\n   |                 ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n / 2\n    } else {\n        n % 2\n\
    \    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmp08e1qdsh.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut res = 0;\n    for &n in n.to_string().chars().take(digits(n))\
    \ {\n        res *= n % 10;\n        res /= 10;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsr29uyfp.rs:12:42\n   |\n\
    12 |     for &n in n.to_string().chars().take(digits(n)) {\n   |             \
    \                             ^^^^^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n12 |     for &n in n.to_string().chars().take(digits(n).try_into().unwrap())\
    \ {\n   |                                                   ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsr29uyfp.rs:12:9\n   |\n12 | \
    \    for &n in n.to_string().chars().take(digits(n)) {\n   |         ^^    -------------------------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    while n > 0 {\n        result *= n\
    \ % 10;\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpg7dr8md2.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 != 0 {\n        0\n    } else {\n        (n as isize)\
    \ * ((n as isize) as isize)\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp6px9arwz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        return 0\n    }\n    let mut product =\
    \ 1\n    for &n in n.to_string().chars() {\n        if n % 2 == 0 {\n        \
    \    product *= n % 10;\n        }\n    }\n    product\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpx5h3xg20.rs:14:24\n\
    \   |\n14 |     let mut product = 1\n   |                        ^ help: add `;`\
    \ here\n15 |     for &n in n.to_string().chars() {\n   |     --- unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx5h3xg20.rs:15:9\n   |\n15 | \
    \    for &n in n.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n   |         |\n   |         expected\
    \ `char`, found reference\n   |         help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for i in 0..n {\n        if i % 2\
    \ == 1 {\n            product *= i;\n        }\n    }\n    if product == 0 {\n\
    \        0\n    } else {\n        product\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp0s_g2vqc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    let mut factor: isize\
    \ = 1;\n    while n > 0 {\n        factor *= n % 10;\n        n /= 10;\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp0wcg1ehb.rs:17:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n17 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0);\n    if n % 10 == 0 {\n        return\
    \ n;\n    }\n    n / 2 * 3 + n % 10\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 2 == 0'', /tmp/tmp17vhldfu.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 { return n }\n    let mut n2 = n;\n    while n2 %\
    \ 2 == 0 {\n        n2 /= 2;\n    }\n    while n2 % 3 == 0 {\n        n2 /= 3;\n\
    \    }\n    n2\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmp2es8nvso.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    let mut d = n;\n    while d > 0 {\n\
    \        if d % 2 == 1 {\n            result *= 3;\n        }\n        d /= 2;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp3ci4r50e.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    for d in n.trailing_digits() {\n  \
    \      if d > 0 {\n            result = (result * d) % 10;\n        } else {\n\
    \            result = (result * 10) % 10;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `trailing_digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpxfs3igtt.rs:12:16\n   |\n12 |     for d\
    \ in n.trailing_digits() {\n   |                ^^^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `trailing_ones`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n\n    let mut product\
    \ = 1;\n    let mut digits = n / 10;\n    while digits != 0 {\n        if digits\
    \ & 1 == 1 {\n            product *= digits;\n        }\n        digits >>= 1;\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmpkc85ci1y.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert_eq!(n, 0);\n\n    fn is_odd(x: usize) -> bool {\n\
    \        x % 2 != 0\n    }\n\n    if n == 1 {\n        return 1;\n    }\n\n  \
    \  n as usize * digits(n as usize).filter(is_odd).product()\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp78gf4scz.rs:21:25\n   |\n\
    21 |     n as usize * digits(n as usize).filter(is_odd).product()\n   |      \
    \                   ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |     n as usize * digits((n as usize).try_into().unwrap()).filter(is_odd).product()\n\
    \   |                         +          +++++++++++++++++++++\n\nerror[E0599]:\
    \ `isize` is not an iterator\n  --> /tmp/tmp78gf4scz.rs:21:37\n   |\n21 |    \
    \ n as usize * digits(n as usize).filter(is_odd).product()\n   |             \
    \                        ^^^^^^ `isize` is not an iterator\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `isize: Iterator`\n \
    \          which is required by `&mut isize: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp78gf4scz.rs:21:5\n   |\n10 | fn digits(n: isize) -> isize\
    \ {\n   |                        ----- expected `isize` because of return type\n\
    ...\n21 |     n as usize * digits(n as usize).filter(is_odd).product()\n   | \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n21 |     (n as usize * digits(n as\
    \ usize).filter(is_odd).product()).try_into().unwrap()\n   |     +           \
    \                                             +++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    fn mul(c: isize) -> isize {\n        (c % 2) * c\n    }\n\n\
    \    (0..n).map(mul).filter(|&x| x % 2 != 0).sum()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpxn79vvmo.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n * digits2(n / 2)\n    } else {\n\
    \        0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits2` in this scope\n  --> /tmp/tmpbd372n_q.rs:12:13\n\
    \   |\n12 |         n * digits2(n / 2)\n   |             ^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpz1g4noda.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut ndigits = n as usize;\n    if ndigits < 0 {\n      \
    \  Err(format!(\"Invalid number of digits: {}\", n))\n    } else {\n        let\
    \ mut ret = 1;\n        let mut carry = 1;\n        while ndigits > 0 {\n    \
    \        let x = n % 10;\n            ret *= x;\n            n /= 10;\n      \
    \      carry *= x;\n            ndigits -= 1;\n        }\n        if n != 0 {\n\
    \            ret *= n % 10;\n            carry *= n % 10;\n            ndigits\
    \ += 1;\n        }\n        if carry != 0 {\n            ret += carry;\n     \
    \   }\n        ret\n    }\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdrlbvmm0.rs:13:9\n   |\n\
    10 | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n13 |         Err(format!(\"Invalid number\
    \ of digits: {}\", n))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Result`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Result<_, String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        return 0\n    }\n    let mut digits\
    \ = n as usize;\n    let mut product = 1;\n    while digits > 0 {\n        digits\
    \ /= 2;\n        product *= digits;\n    }\n    product\n}\n\nfn main() {\n  \
    \  let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyyd198is.rs:20:5\n   |\n\
    10 | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n20 |     product\n   |     ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     product.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod: isize = 0;\n    while n > 0 {\n        n -= 1;\n\
    \        prod *= n % 10;\n        n /= 10;\n    }\n    prod\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpweqr2scj.rs:13:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n13 |         n -= 1;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `n`\n  --> /tmp/tmpweqr2scj.rs:15:9\n   |\n10 | fn digits(n: isize)\
    \ -> isize {\n   |           - help: consider making this binding mutable: `mut\
    \ n`\n...\n15 |         n /= 10;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 0;\n    let mut current = n;\n    while current\
    \ % 2 == 0 {\n        product *= 2;\n        current /= 2;\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpn6cletpw.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    for d in n.checked_digits() {\n     \
    \   assert!(d.is_odd());\n        prod *= d;\n    }\n    prod\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_digits` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp_4fmyeaq.rs:12:16\n   |\n12 |     for d in\
    \ n.checked_digits() {\n   |                ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `checked_div`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        n % 9\n  \
    \  }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpq_5jsytx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n % 8\n    } else {\n        0\n  \
    \  }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpkarlp5rr.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut product =\
    \ 1;\n    for i in 0..n / 2 {\n        if n % i == 0 {\n            product *=\
    \ i;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpnu2_wb5l.rs:16:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 != 0);\n    (n as i32).digits() as isize\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `i32` in the current\
    \ scope\n  --> /tmp/tmp7q9jrgdj.rs:12:16\n   |\n12 |     (n as i32).digits() as\
    \ isize\n   |                ^^^^^^ method not found in `i32`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    fn is_odd(x: isize) -> bool {\n        x % 2 == 1\n    }\n \
    \   if n < 10 || is_odd(n) || n > 0 {\n        n\n    } else {\n        digits(n\
    \ - 10) * 3 + 1\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `5`', /tmp/tmp_9tv537h.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // Special case for 1.\n    if n == 1 {\n        return 1;\n\
    \    }\n    // Special case for 0.\n    if n == 0 {\n        return 0;\n    }\n\
    \    let mut product = 1;\n    // Iterating over all the digits in reverse order\n\
    \    for i in (n as usize).rev() {\n        product *= digit(i);\n    }\n    return\
    \ product;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit` in this scope\n  --> /tmp/tmp4o0x_tc9.rs:22:20\n\
    \   |\n22 |         product *= digit(i);\n   |                    ^^^^^ not found\
    \ in this scope\n\nerror[E0599]: `usize` is not an iterator\n  --> /tmp/tmp4o0x_tc9.rs:21:27\n\
    \   |\n21 |     for i in (n as usize).rev() {\n   |                          \
    \ ^^^ `usize` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `usize: Iterator`\n           which is required\
    \ by `&mut usize: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    fn digit_prod(x: isize) -> isize {\n        if x % 2 == 0 {\n\
    \            x * 3\n        } else {\n            x * 3 + 1\n        }\n    }\n\
    \n    // The first digit is always odd because it is the number itself.\n    let\
    \ mut n_odd = n;\n    if n_odd % 2 == 0 {\n        n_odd -= 1;\n    }\n\n    let\
    \ mut n_even = n;\n    if n_even % 2 == 0 {\n        n_even += 1;\n    }\n\n \
    \   let mut product = n_even;\n    for _ in 0..(digit_prod(n_odd) - 1) {\n   \
    \     product *= n_even;\n    }\n\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `152587890625`,\n right: `5`', /tmp/tmpne260fv4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // Only do even number check\n    if n % 2 == 0 {\n        let\
    \ mut product = 0;\n        let mut current_digit = 1;\n        while n > 0 {\n\
    \            current_digit *= n % 10;\n            product += current_digit;\n\
    \            n /= 10;\n        }\n        return product;\n    }\n    // Odd case\
    \ already covered by the first check\n    return n;\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp2vhjbu14.rs:18:13\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |             n /= 10;\n   |        \
    \     ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n / 9).ceil() as isize\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ceil` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpzo1zmizd.rs:11:13\n   |\n11 |     (n / 9).ceil() as isize\n\
    \   |             ^^^^ help: there is an associated function with a similar name:\
    \ `div_ceil`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 0;\n    for i in 2..n / 2 {\n        result\
    \ = result * i + (n % i as u8);\n    }\n    if n > 0 && n % 2 == 0 {\n       \
    \ result = result * 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj28_49c_.rs:13:36\n   |\n\
    13 |         result = result * i + (n % i as u8);\n   |                      \
    \              ^^^^^^^ expected `isize`, found `u8`\n\nerror[E0277]: cannot mod\
    \ `isize` by `u8`\n  --> /tmp/tmpj28_49c_.rs:13:34\n   |\n13 |         result\
    \ = result * i + (n % i as u8);\n   |                                  ^ no implementation\
    \ for `isize % u8`\n   |\n   = help: the trait `Rem<u8>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n >= (1 << 32) {\n        return 0;\n    }\n    let mut prod\
    \ = 0;\n    let mut factor = 1;\n    for i in 0..n {\n        if ((i & 1) == 1)\
    \ {\n            prod *= factor;\n        }\n        factor += 2;\n    }\n   \
    \ prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpe6jp8hk0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        return 0;\n    }\n    n / 2 % 9\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmplbrrd4ns.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        let mut x\
    \ = 1;\n        let mut y = n;\n        while y % 2 == 0 {\n            x += 1;\n\
    \            y /= 2;\n        }\n        y\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp95wrjh7l.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return n;\n    }\n\n    let mut result\
    \ = 1;\n    while n >= 10 {\n        result *= n % 10;\n        n /= 10;\n   \
    \ }\n    result *= n % 10;\n    result\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpnw9vpxez.rs:18:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for (i, _) in n.iter().enumerate()\
    \ {\n        if i % 2 == 1 {\n            product *= i;\n        }\n    }\n  \
    \  product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5h84rivm.rs:12:21\n   |\n12 |     for (i, _) in n.iter().enumerate()\
    \ {\n   |                     ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n >= 10 {\n        return n.to_digits(2);\n    }\n    if\
    \ n % 2 == 0 {\n        return 0;\n    }\n    let mut result = 1;\n    for i in\
    \ n.rev() {\n        result = result * 2;\n        if i >= 10 {\n            break;\n\
    \        }\n        result = result + i as isize;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp5qr0na05.rs:12:18\n   |\n12 |         return n.to_digits(2);\n\
    \   |                  ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ `isize` is not an iterator\n  --> /tmp/tmp5qr0na05.rs:18:16\n   |\n18 |    \
    \ for i in n.rev() {\n   |                ^^^ `isize` is not an iterator\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `isize:\
    \ Iterator`\n           which is required by `&mut isize: Iterator`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    for d in n.digits().cloned() {\n  \
    \      result *= d as usize;\n    }\n    if result > MAX_DIGITS as usize {\n \
    \       0\n    } else {\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MAX_DIGITS` in this scope\n  --> /tmp/tmp20c9f_0c.rs:15:17\n\
    \   |\n15 |     if result > MAX_DIGITS as usize {\n   |                 ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `digits` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmp20c9f_0c.rs:12:16\n   |\n12\
    \ |     for d in n.digits().cloned() {\n   |                ^^^^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp20c9f_0c.rs:18:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of return type\n...\n18 |         result\n   |    \
    \     ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n18 |     \
    \    result.try_into().unwrap()\n   |               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n\n    } else {\n        0\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp_9luxqxd.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n * (n / 2)\n    } else {\n       \
    \ 0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp7br93oh4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        return 0\n    }\n    let mut product:\
    \ isize = 1;\n    for &x in &n / 2 {\n        product *= *x;\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpspdxk9ob.rs:15:15\n\
    \   |\n15 |     for &x in &n / 2 {\n   |               ^^^^^^ `isize` is not an\
    \ iterator\n   |\n   = help: the trait `Iterator` is not implemented for `isize`\n\
    \   = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product_even = 0;\n    let mut product_odd = 1;\n  \
    \  for d in n.digits() { product_even += d.is_even(); }\n    for d in n.digits()\
    \ { product_odd *= d.is_odd(); }\n    product_even % product_odd\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpp44nfdba.rs:13:16\n   |\n13 |     for d in n.digits() {\
    \ product_even += d.is_even(); }\n   |                ^^^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpp44nfdba.rs:14:16\n   |\n14 |     for d\
    \ in n.digits() { product_odd *= d.is_odd(); }\n   |                ^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 0 {\n        0\n    } else if n < 10 {\n        n\n \
    \   } else {\n        n % 10\n            .digits()\n            .map(|i| i *\
    \ 2)\n            .reduce(|a, b| a * b as isize)\n    }\n}\n\nfn main() {\n  \
    \  let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmp1k9ayimc.rs:17:14\n   |\n17 |             .digits()\n\
    \   |              ^^^^^^ method not found in `{integer}`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (1..=n).filter(|&x| x % 2).sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwae5kdfm.rs:11:25\n   |\n\
    11 |     (1..=n).filter(|&x| x % 2).sum::<isize>()\n   |                     \
    \    ^^^^^ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        return n / 2;\n    }\n    n % 2 ==\
    \ 1\n        ? 0\n        : digits(n / 2) * digits(n / 2)\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `0`\n\
    \  --> /tmp/tmpchakeqd3.rs:15:11\n   |\n15 |         ? 0\n   |           ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            result *= n - 1;\n        }\n        n /= 2;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgtiakems.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 2;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        n\n    } else {\n        0\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpcra5_mj0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // https://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10\n\
    \    fn digits_log2(val: isize) -> isize {\n        if val < 2 {\n           \
    \ return 0;\n        }\n        let mut val2 = val / 2;\n        val %= 2;\n \
    \       if val == 0 {\n            return 1;\n        }\n        if val2 == 0\
    \ {\n            return 2;\n        }\n        let mut val4 = val2 / 4;\n    \
    \    val %= 4;\n        if val2 == 0 {\n            return 3;\n        }\n   \
    \     if val4 == 0 {\n            return 4;\n        }\n        let mut val8 =\
    \ val4 / 8;\n        val %= 8;\n        if val2 == 0 {\n            return 5;\n\
    \        }\n        if val4 == 0 {\n            return 6;\n        }\n       \
    \ let mut val16 = val8 / 16;\n        val %= 16;\n        if val2 == 0 {\n   \
    \         return 7;\n        }\n        if val4 == 0 {\n            return 8;\n\
    \        }\n        let mut val32 = val16 / 32;\n        val %= 32;\n        if\
    \ val2 == 0 {\n            return 9;\n        }\n        if val4 == 0 {\n    \
    \        return 10;\n        }\n        let mut val64 = val32 / 64;\n        val\
    \ %= 64;\n        if val2 == 0 {\n            return 11;\n        }\n        if\
    \ val4 == 0 {\n            return 12;\n        }\n        let mut val128 = val64\
    \ / 128;\n        val %= 128;\n        if val2 == 0 {\n            return 13;\n\
    \        }\n        if val4 == 0 {\n            return 14;\n        }\n      \
    \  let mut val256 = val128 / 256;\n        val %= 256;\n        if val2 == 0 {\n\
    \            return 15;\n        }\n        if val4 == 0 {\n            return\
    \ 16;\n        }\n        let mut val512 = val256 / 512;\n        val %= 512;\n\
    \        if val2 == 0 {\n            return 17;\n        }\n        if val4 ==\
    \ 0 {\n            return 18;\n        }\n        let mut val1024 = val512 / 1024;\n\
    \        val %= 1024;\n        if val2 == 0 {\n            return 19;\n      \
    \  }\n        if val4 == 0 {\n            return 20;\n        }\n        let mut\
    \ val2048 = val1024 / 2048;\n        val %= 2048;\n        if val2 == 0 {\n  \
    \          return 21;\n        }\n        if val4 == 0 {\n            return 22;\n\
    \        }\n        let mut val4096 = val2048 / 4096;\n        val %= 4096;\n\
    \        if val2 == 0 {\n            return 23;\n        }\n        if val4 ==\
    \ 0 {\n            return 24;\n        }\n        let mut val8192 = val\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpg9z_qy0s.rs:124:3\n\
    \    |\n10  | fn digits(n: isize) -> isize {\n    |                          \
    \    - unclosed delimiter\n11  |     // https://graphics.stanford.edu/~seander/bithacks.html#IntegerLog10\n\
    12  |     fn digits_log2(val: isize) -> isize {\n    |                       \
    \                  - this delimiter might not be properly closed...\n...\n113\
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n124\
    \ | }\n    |   ^\n\nerror: expected `;`, found `}`\n   --> /tmp/tmpg9z_qy0s.rs:112:30\n\
    \    |\n112 |         let mut val8192 = val\n    |                           \
    \   ^ help: add `;` here\n113 | }\n    | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg9z_qy0s.rs:10:24\n   |\n10 | fn digits(n: isize) -> isize\
    \ {\n   |    ------              ^^^^^ expected `isize`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg9z_qy0s.rs:12:35\n   |\n12 |\
    \     fn digits_log2(val: isize) -> isize {\n   |        -----------         \
    \       ^^^^^ expected `isize`, found `()`\n   |        |\n   |        implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    while n > 0 {\n        if n % 2 ==\
    \ 0 {\n            product *= n % 10;\n            n /= 10;\n        } else {\n\
    \            product *= 3;\n            n /= 10;\n        }\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6c89pos8.rs:15:13\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n15 |             n /= 10;\n   |        \
    \     ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmp6c89pos8.rs:18:13\n   |\n10 | fn digits(n:\
    \ isize) -> isize {\n   |           - help: consider making this binding mutable:\
    \ `mut n`\n...\n18 |             n /= 10;\n   |             ^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (0..n).map(|i| i as isize)\n        .filter(|&i| i % 2 == 0)\n\
    \        .product()\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpd7xxzwme.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        n % 10 as\
    \ isize\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmprzf5y2ey.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut product =\
    \ 1;\n    for &n in n.digits() { product *= n; }\n    if product % 2 == 0 {\n\
    \        0\n    } else {\n        product\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvo08tpoy.rs:15:17\n   |\n15 |     for &n in n.digits()\
    \ { product *= n; }\n   |                 ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n >= 10 && n % 10 == 0 {\n        1\n    } else {\n     \
    \   0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpwda455c2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 0;\n    for d in n.digits() {\n        if\
    \ d % 2 == 1 {\n            product += d;\n        }\n    }\n    product\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmptwz759xy.rs:12:16\n   |\n12 |     for d in n.digits() {\n\
    \   |                ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    assert!(n >= 0);\n    if n % 2 == 1 {\n        return 0;\n \
    \   }\n    n / 2\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpyobtsv0y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 || n % 10 == 0 {\n        n\n    } else {\n      \
    \  digits(n / 10).mul(1.digit + n % 10).unwrap() * 10\n    }\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mul` found for type `isize` in the current\
    \ scope\n   --> /tmp/tmplobazg26.rs:14:24\n    |\n14  |         digits(n / 10).mul(1.digit\
    \ + n % 10).unwrap() * 10\n    |                        ^^^ method not found in\
    \ `isize`\n    |\n    = help: items from traits can only be used if the trait\
    \ is in scope\nhelp: the following trait is implemented but not in scope; perhaps\
    \ add a `use` for it:\n    |\n1   | use std::ops::Mul;\n    |\n\nerror[E0610]:\
    \ `{integer}` is a primitive type and therefore doesn't have fields\n  --> /tmp/tmplobazg26.rs:14:30\n\
    \   |\n14 |         digits(n / 10).mul(1.digit + n % 10).unwrap() * 10\n   | \
    \                             ^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n.checked_mul(*(n as u64).clone() / 10).ok()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `u64` cannot be dereferenced\n  --> /tmp/tmpqc_d3gps.rs:11:19\n\
    \   |\n11 |     n.checked_mul(*(n as u64).clone() / 10).ok()\n   |           \
    \        ^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `ok` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmpqc_d3gps.rs:11:45\n   |\n11 | \
    \    n.checked_mul(*(n as u64).clone() / 10).ok()\n   |                      \
    \                       ^^ help: there is an associated function with a similar\
    \ name: `or`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"Input must be non-negative\")\n\
    \    }\n    let mut result = 1i32;\n    for i in 1..=n {\n        result *= i\
    \ as i32;\n        if i % 2 == 1 {\n            result *= -1i32;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9m3zxz9u.rs:21:5\n   |\n\
    10 | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n21 |     result.try_into().unwrap()\n\
    \   |           ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut total = 1;\n    while n > 0 {\n        if n % 2 == 0\
    \ {\n            total *= n % 10;\n        }\n        n /= 10;\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpbbj9x8m6.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for &d in n.to_str_radix(2).chars().take(n\
    \ as usize) {\n        product *= d;\n    }\n    if product % 2 == 0 {\n     \
    \   product\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_str_radix` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpm7_9_a1y.rs:12:17\n   |\n12 |     for &d in\
    \ n.to_str_radix(2).chars().take(n as usize) {\n   |                 ^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        let mut product:\
    \ isize = 1;\n        for i in 1..(n / 2) {\n            product *= 2;\n     \
    \       if n % i == 0 {\n                product /= i;\n            }\n      \
    \  }\n        product\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmp9378qwkg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 != 0 {\n        return 0\n    }\n    if n < 10 && n\
    \ % 10 == 0 {\n        return n\n    }\n    let mut product = n;\n    while product\
    \ > 10 {\n        product /= 10;\n    }\n    product\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp8f_hjfsr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    match n % 10 {\n        1 => n,\n        _ => 0,\n    }\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpk8qd42kp.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let digits = n.to_digits();\n    for\
    \ d in digits {\n        if d.is_odd() {\n            product *= d;\n        }\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpc020fdl4.rs:12:20\n   |\n12 |     let digits =\
    \ n.to_digits();\n   |                    ^^^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut ret: isize = 1;\n    while n > 0 {\n        if n % 2\
    \ == 0 {\n            ret = ret * 10;\n        }\n        n = n / 2;\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpiep083k8.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n = n / 2;\n   |         ^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n / 2\n    } else {\n        n * (3\
    \ * n + 1) / (2 * n + 1)\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `5`', /tmp/tmpsl0pfsa1.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 0 {\n        return 0;\n    }\n    let mut product =\
    \ 1;\n    let mut last = 0;\n    for d in n.iter().cloned().map(|x| *x) {\n  \
    \      if *d & 1 != 0 {\n            product *= last;\n        }\n        product\
    \ *= d;\n        last += 1;\n    }\n    if product == 0 {\n        return 0;\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvrgm38pi.rs:16:16\n   |\n16 |     for d in n.iter().cloned().map(|x|\
    \ *x) {\n   |                ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 { return 0 }\n    let mut product = n as isize;\n\
    \    let mut prev_product = 1;\n    while n > 0 {\n        if n % 2 == 0 {\n \
    \           product += prev_product;\n        }\n        prev_product *= 2;\n\
    \        n /= 2;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpqz95ce5r.rs:19:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n19 |         n /= 2;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // Use a loop to avoid overflow of isize\n    let mut ret =\
    \ 1;\n    for d in n % 10..=0 {\n        if d % 2 == 0 {\n            ret *= d;\n\
    \        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `5`', /tmp/tmpdiow4ne8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: -1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n as isize\n    } else {\n        n\
    \ * digits(n as isize)\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976414
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n.checked_mul(2)\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpidbh64x9.rs:11:5\n   |\n\
    10 | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n11 |     n.checked_mul(2)\n   |     ^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    while n > 0 {\n        result *= n\
    \ % 10;\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpg7dr8md2.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        return n\n    }\n\n    let mut product\
    \ = 1;\n\n    for &d in n.str() {\n        if d > '9' {\n            break;\n\
    \        }\n        product *= c - '0';\n    }\n\n    product\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpqbp3783i.rs:21:20\n\
    \   |\n21 |         product *= c - '0';\n   |                    ^ help: a local\
    \ variable with a similar name exists: `d`\n\nerror[E0599]: no method named `str`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpqbp3783i.rs:17:17\n\
    \   |\n17 |     for &d in n.str() {\n   |                 ^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        n\n    } else {\n        0\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpcra5_mj0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    for (i, &d) in n.to_string().into_iter().zip(n.to_string().into_iter().filter(|&d|\
    \ d > '9').skip(1).collect::<Vec<_>>()) {\n        if d % 2 == 1 {\n         \
    \   *result *= 10;\n            *result += d;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp19axo9gz.rs:12:34\n    |\n12\
    \  |       for (i, &d) in n.to_string().into_iter().zip(n.to_string().into_iter().filter(|&d|\
    \ d > '9').skip(1).collect::<Vec<_>>()) {\n    |                             \
    \       ^^^^^^^^^\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror[E0599]: the method `into_iter`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmp19axo9gz.rs:12:64\n    |\n12  |       for (i, &d) in n.to_string().into_iter().zip(n.to_string().into_iter().filter(|&d|\
    \ d > '9').skip(1).collect::<Vec<_>>()) {\n    |                             \
    \                                     ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Sized`\n            which is required by `str: IntoIterator`\n\
    \            `str: Iterator`\n            which is required by `str: IntoIterator`\n\
    \            `&str: Iterator`\n            which is required by `&str: IntoIterator`\n\
    \            `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror[E0614]: "
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (0..n).filter(|&n| n % 2 == 1).sum()\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpfq4b985g.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return n;\n    }\n    if n % 2 == 0 {\n\
    \        return n * digits(n / 2);\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmporra9oi7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // The return value is in range [0, 10)\n    let mut result\
    \ = 1;\n    for d in n.checked_div_mod(10).unwrap().digits() {\n        if d %\
    \ 2 == 1 {\n            result *= d;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_div_mod` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmprrrdhowb.rs:13:16\n   |\n13 |     for d\
    \ in n.checked_div_mod(10).unwrap().digits() {\n   |                ^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `checked_div`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n > 0 {\n        for _ in 0..n / 2 {\n            n /= 2;\n\
    \        }\n        if n % 2 == 0 {\n            n /= 2;\n        }\n    }\n \
    \   n\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpvlwhlp49.rs:13:13\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n13 |             n /= 2;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmpvlwhlp49.rs:16:13\n   |\n10 | fn digits(n:\
    \ isize) -> isize {\n   |           - help: consider making this binding mutable:\
    \ `mut n`\n...\n16 |             n /= 2;\n   |             ^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0);\n\n    let mut result = 1;\n    for\
    \ d in n.digits().rev() {\n        result *= d;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpiup1j6ro.rs:14:16\n   |\n14 |     for d in n.digits().rev()\
    \ {\n   |                ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut ret = 1;\n    for i in n.digits().into_iter() {\n  \
    \      if i % 2 == 1 {\n            ret *= i;\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpiupzsc_8.rs:12:16\n   |\n12 |     for i in n.digits().into_iter()\
    \ {\n   |                ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n / 2\n    } else {\n        n * 3\
    \ + 1\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `5`', /tmp/tmp9kdt20kw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    match n {\n        0 => 1,\n        1 => 1,\n        _ => n.checked_mul(digits(n.checked_sub(1usize)))\n\
    \    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqc4my7k4.rs:14:49\n   |\n\
    14 |         _ => n.checked_mul(digits(n.checked_sub(1usize)))\n   |         \
    \                                        ^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: change the type of the numeric literal from `usize` to `isize`\n\
    \   |\n14 |         _ => n.checked_mul(digits(n.checked_sub(1isize)))\n   |  \
    \                                                ~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqc4my7k4.rs:14:35\n   |\n14 |         _ => n.checked_mul(digits(n.checked_sub(1usize)))\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpqc4my7k4.rs:14:14\n   |\n11 | /     match n {\n12 | |         0\
    \ => 1,\n   | |              - this is found to be of type `isize`\n13 | |   \
    \      1 => 1,\n   | |              - this is found to be of type `isize`\n14\
    \ | |         _ => n.checked_mul(digits(n.checked_sub(1usize)))\n   | |      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n15 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 || n % 2 == 0 {\n        n\n    } else {\n       \
    \ digits(n / 2)\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `5`', /tmp/tmp8grnuppt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n / 10\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp5lpjml6h.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        return n.trailing_digits(2) as isize\n\
    \    } else {\n        return 0\n    }\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `trailing_digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpicn7hrwv.rs:12:18\n   |\n12 |         return\
    \ n.trailing_digits(2) as isize\n   |                  ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `trailing_ones`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0);\n    let mut product = 1;\n    for\
    \ x in n.checked_div_2() {\n        if x % 2 == 1 {\n            product *= x;\n\
    \        }\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_div_2` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpayzpheku.rs:13:16\n   |\n13 |     for x in\
    \ n.checked_div_2() {\n   |                ^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `checked_div`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n % 10\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpxqah9hir.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0);\n    let mut result = n;\n    for\
    \ d in n.digits().cloned().rev() {\n        result *= d;\n    }\n    if result\
    \ < 2 {\n        return 0;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpdek4u9r_.rs:13:16\n   |\n13 |     for d in n.digits().cloned().rev()\
    \ {\n   |                ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n\n        .checked_div(2).unwrap()\n        .checked_mul(2)\n\
    \        .unwrap()\n        .checked_add((n as usize).checked_div(2).unwrap()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphsg4ra3h.rs:15:22\n   |\n\
    15 |         .checked_add((n as usize).checked_div(2).unwrap()).unwrap()\n   |\
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |         .checked_add((n as usize).checked_div(2).unwrap().try_into().unwrap()).unwrap()\n\
    \   |                                                          ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        n / 2 * 3\n\
    \    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `5`', /tmp/tmp_dz2195y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    for i in 0..n {\n        if i % 2 ==\
    \ 1 {\n            result *= i;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp6awc4n1e.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    use core::cmp::Ordering;\n    (n as u32).checked_mul(n as u32).expect(\"\
    odd number\")\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `core`?\n  --> /tmp/tmp9_o4cjx2.rs:11:9\n\
    \   |\n11 |     use core::cmp::Ordering;\n   |         ^^^^ maybe a missing crate\
    \ `core`?\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9_o4cjx2.rs:12:5\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of return type\n11 |     use core::cmp::Ordering;\n\
    12 |     (n as u32).checked_mul(n as u32).expect(\"odd number\")\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     (n as u32).checked_mul(n\
    \ as u32).expect(\"odd number\").try_into().unwrap()\n   |                   \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        return n\n    }\n    if n < 10 {\n\
    \        return n * 10\n    }\n    if n >= 10_000 {\n        return n * 100\n\
    \    }\n    if n >= 1000 {\n        return n * 1000\n    }\n    if n >= 100 {\n\
    \        return n * 100\n    }\n    if n >= 10 {\n        return n * 10\n    }\n\
    \    return 0\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `5`', /tmp/tmpugjn1v8m.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        0\n    } else {\n        n * digits(n\
    \ - 2)\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpntfwela4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // if n has no fractional part, return n itself\n    if n %\
    \ 2 == 0 {\n        n\n    } else {\n        let mut product = 1i32;\n       \
    \ let mut remainder = n - 1i32;\n        while remainder > 1i32 {\n          \
    \  product *= (remainder - 1i32);\n            remainder -= 2i32;\n        }\n\
    \        product\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp92qlfp1t.rs:18:24\n\
    \   |\n18 |             product *= (remainder - 1i32);\n   |                 \
    \       ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n18 -             product *= (remainder -\
    \ 1i32);\n18 +             product *= remainder - 1i32;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp92qlfp1t.rs:16:33\n   |\n16 |         let mut\
    \ remainder = n - 1i32;\n   |                                 ^^^^ expected `isize`,\
    \ found `i32`\n\nerror[E0277]: cannot subtract `i32` from `isize`\n  --> /tmp/tmp92qlfp1t.rs:16:31\n\
    \   |\n16 |         let mut remainder = n - 1i32;\n   |                      \
    \         ^ no implementation for `isize - i32`\n   |\n   = help: the trait `Sub<i32>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp92qlfp1t.rs:17:27\n\
    \   |\n17 |         while remainder > 1i32 {\n   |                           ^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: change the type of the numeric literal\
    \ from `i32` to `isize`\n   |\n17 |         while remainder > 1isize {\n   | \
    \                           ~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp92qlfp1t.rs:18:37\n\
    \   |\n18 |             product *= (remainder - 1i32);\n   |                 \
    \                    ^^^^ expected `isize`, found `i32`\n\nerror[E0277]: cannot\
    \ subtract `i32` from `isize`\n  --> /tmp/tmp92qlfp1t.rs:18:35\n   |\n18 |   \
    \          product *= (remainder - 1i32);\n   |                              \
    \     ^ no implementation for `isize - i32`\n   |\n   = help: the trait `Sub<i32>`\
    \ is not implemented for `isize`\n   = help: the following other types imp"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return n;\n    }\n\n    let mut m = n as\
    \ usize;\n    for d in 0..((n - 1) / 2) {\n        m *= 2 % 10;\n        m +=\
    \ 2 % 10 * (n % 10 as usize);\n        n /= 10;\n    }\n\n    if n > 0 {\n   \
    \     m *= 2 % 10;\n        m += 2 % 10 * (n % 10 as usize);\n    }\n    m\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4fcscw7z.rs:18:28\n   |\n\
    18 |         m += 2 % 10 * (n % 10 as usize);\n   |                          \
    \  ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize`\
    \ by `usize`\n  --> /tmp/tmp4fcscw7z.rs:18:26\n   |\n18 |         m += 2 % 10\
    \ * (n % 10 as usize);\n   |                          ^ no implementation for\
    \ `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fcscw7z.rs:18:14\n\
    \   |\n18 |         m += 2 % 10 * (n % 10 as usize);\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to\
    \ `usize`\n  --> /tmp/tmp4fcscw7z.rs:18:11\n   |\n18 |         m += 2 % 10 * (n\
    \ % 10 as usize);\n   |           ^^ no implementation for `usize += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4fcscw7z.rs:24:28\n   |\n24 |\
    \         m += 2 % 10 * (n % 10 as usize);\n   |                            ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp4fcscw7z.rs:24:26\n   |\n24 |         m += 2 % 10 * (n % 10 as\
    \ usize);\n   |                          ^ no implementation for `isi"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    let mut result =\
    \ 0;\n    while n > 0 {\n        if n % 2 == 1 {\n            result *= 2;\n \
    \           n -= 1;\n        } else {\n            result *= 10;\n           \
    \ n -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdrcntnkb.rs:18:13\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |             n -= 1;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmpdrcntnkb.rs:21:13\n   |\n10 | fn digits(n:\
    \ isize) -> isize {\n   |           - help: consider making this binding mutable:\
    \ `mut n`\n...\n21 |             n -= 1;\n   |             ^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for &d in n.iter().take(n.len() -\
    \ 1) {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmplgcvzzwn.rs:12:17\n   |\n12 |     for &d in n.iter().take(n.len()\
    \ - 1) {\n   |                 ^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmplgcvzzwn.rs:12:31\n\
    \   |\n12 |     for &d in n.iter().take(n.len() - 1) {\n   |                 \
    \              ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut nd = 1;\n    let mut i = 10;\n    while n > 0 {\n  \
    \      if n % 2 == 0 {\n            nd*= i;\n        }\n        i*=10;\n     \
    \   n/=10;\n    }\n    nd\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpzv6lhtwb.rs:18:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |         n/=10;\n   |         ^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0\n    }\n    let mut n = n as u8;\n\
    \    let mut result = 1;\n    loop {\n        result *= n % 10;\n        n /=\
    \ 10;\n        if n == 0 {\n            return result as isize;\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `5`', /tmp/tmp61d9tvjn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    assert!(n > 0);\n    n as usize * 2 + (n % 2) * 8\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp57etv91x.rs:12:22\n   |\n\
    12 |     n as usize * 2 + (n % 2) * 8\n   |                      ^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp57etv91x.rs:12:5\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of return type\n11 |     assert!(n > 0);\n12 |    \
    \ n as usize * 2 + (n % 2) * 8\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     (n as usize * 2\
    \ + (n % 2) * 8).try_into().unwrap()\n   |     +                            +++++++++++++++++++++\n\
    \nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp57etv91x.rs:12:20\n\
    \   |\n12 |     n as usize * 2 + (n % 2) * 8\n   |                    ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        return 0\n    }\n    let mut product\
    \ = 1;\n    for i in 1..(n / 2) {\n        product *= i % 10;\n    }\n    if n\
    \ % 2 != 0 {\n        product *= n % 10;\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpwnthhwfr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n > 9 {\n        0\n    } else {\n        let mut result\
    \ = 1;\n        for digit in n.to_digits(10).iter() {\n            if digit %\
    \ 2 == 1 {\n                result *= digit as isize;\n            }\n       \
    \ }\n        result\n    }\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpo2krd9qs.rs:15:24\n   |\n15 |         for digit\
    \ in n.to_digits(10).iter() {\n   |                        ^^^^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 || n % 10 == 0 {\n        n\n    } else {\n      \
    \  digits(n / 10) * 10 + n % 10\n    }\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `5`', /tmp/tmp27y1_npr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n > 0 {\n        let mut product = n;\n        while product\
    \ % 2 == 0 {\n            product /= 2;\n        }\n        product\n    } else\
    \ {\n        0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `5`', /tmp/tmpmis9i0ue.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut ret: isize\
    \ = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            ret *= (n % 10);\n\
    \        }\n        n /= 10;\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpdjvdbxup.rs:17:20\n\
    \   |\n17 |             ret *= (n % 10);\n   |                    ^      ^\n \
    \  |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n17 -             ret *= (n % 10);\n17 +             ret *= n % 10;\n  \
    \ | \n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdjvdbxup.rs:19:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n19 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        return 0\n    }\n    let mut product =\
    \ n as isize;\n    for &digit in &n.to_digits(2) {\n        product *= digit;\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpoxsc39e5.rs:15:22\n   |\n15 |     for &digit in\
    \ &n.to_digits(2) {\n   |                      ^^^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for i in n.checked_div(10).unwrap_range()\
    \ {\n        product *= i as u8;\n    }\n    if product > 0 {\n        product\n\
    \    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_range` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmp3d523qhv.rs:12:32\n   |\n12 |     for i in\
    \ n.checked_div(10).unwrap_range() {\n   |                                ^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `unwrap`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3d523qhv.rs:16:9\n   |\n10 | fn digits(n: isize)\
    \ -> isize {\n   |                        ----- expected `isize` because of return\
    \ type\n...\n16 |         product\n   |         ^^^^^^^ expected `isize`, found\
    \ `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n   |\n16 |         product.into()\n\
    \   |                +++++++\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        return 0;\n    }\n    if n % 2 == 1 {\n\
    \        return n;\n    }\n    let mut n = 1u8;\n    while n > 0 {\n        if\
    \ n % 2 == 1 {\n            n *= 2u8;\n        } else {\n            n *= 3u8;\n\
    \        }\n        n /= 2u8;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqhxjx72_.rs:26:5\n   |\n\
    10 | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n26 |     n\n   |     ^ expected `isize`,\
    \ found `u8`\n   |\nhelp: you can convert a `u8` to an `isize`\n   |\n26 |   \
    \  n.into()\n   |      +++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // Fast case for n <= 9.\n    if n <= 9 {\n        return n;\n\
    \    }\n\n    // Find first non-zero digit.\n    let mut m = 1;\n    while n %\
    \ m == 0 {\n        m += 1;\n    }\n\n    // Odd digits are product of (non-zero)\
    \ odd digits.\n    if m % 2 == 1 {\n        return (n * digits(m)).into();\n \
    \   }\n\n    // Even digits are product of even digits.\n    return digits(m)\
    \ * (n / m);\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `52`,\n right: `5`', /tmp/tmpzt8x2hc5.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut n1 = n % 10;\n    let mut n2 = n % 10;\n    let mut\
    \ n3 = n % 10;\n    let mut n4 = n % 10;\n    let mut n5 = n % 10;\n    let mut\
    \ n6 = n % 10;\n    let mut n7 = n % 10;\n    let mut n8 = n % 10;\n    let mut\
    \ n9 = n % 10;\n    let mut n10 = n % 10;\n    let mut n11 = n % 10;\n    let\
    \ mut n12 = n % 10;\n    let mut n13 = n % 10;\n    let mut n14 = n % 10;\n  \
    \  let mut n15 = n % 10;\n    let mut n16 = n % 10;\n    let mut n17 = n % 10;\n\
    \    let mut n18 = n % 10;\n    let mut n19 = n % 10;\n    let mut n20 = n % 10;\n\
    \    let mut n21 = n % 10;\n    let mut n22 = n % 10;\n    let mut n23 = n % 10;\n\
    \    let mut n24 = n % 10;\n    let mut n25 = n % 10;\n    let mut n26 = n % 10;\n\
    \    let mut n27 = n % 10;\n    let mut n28 = n % 10;\n    let mut n29 = n % 10;\n\
    \    let mut n30 = n % 10;\n    let mut n31 = n % 10;\n    let mut n32 = n % 10;\n\
    \    let mut n33 = n % 10;\n    let mut n34 = n % 10;\n    let mut n35 = n % 10;\n\
    \    let mut n36 = n % 10;\n    let mut n37 = n % 10;\n    let mut n38 = n % 10;\n\
    \    let mut n39 = n % 10;\n    let mut n40 = n % 10;\n    let mut n41 = n % 10;\n\
    \    let mut n42 = n % 10;\n    let mut n43 = n % 10;\n    let mut n44 = n % 10;\n\
    \    let mut n45 = n % 10;\n    let mut n46 = n % 10;\n    let mut n47 = n % 10;\n\
    \    let mut n48 = n % 10;\n    let mut n49 = n % 10;\n    let mut n50 = n % 10;\n\
    \    let mut n51 = n % 10;\n    let mut n52 = n % 10;\n    let mut n53 = n % 10;\n\
    \    let mut n54 = n % 10;\n    let mut n55 = n % 10;\n    let mut n56 = n % 10;\n\
    \    let mut n57 = n % 10;\n    let mut n58 = n % 10;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpiu27wsc5.rs:70:1\n\
    \   |\n70 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 1;\n    while n > 0 {\n        result *= n\
    \ % 10;\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpg7dr8md2.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976408
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut ans = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            ans *= n % 10;\n        }\n        n /= 10;\n    }\n    ans\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1odmfigl.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 { return 0; }\n    if n % 2 == 1 { return 0; }\n \
    \   let mut product = 1;\n    for i in 1..n / 2 {\n        product *= 2;\n   \
    \     if i % 2 != 0 { product *= 3; }\n    }\n    product\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpdz3j49xx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        0\n    } else {\n        if n % 2 == 1\
    \ {\n            n / 2\n        } else {\n            0\n        }\n    }\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmprnx66liv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        0\n    } else {\n        (n / 2) *\
    \ 3\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `5`', /tmp/tmpm3xy_8c9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    assert!(n == std::digits::digit(n));\n    let mut n1 = n / 10;\n\
    \    let mut n2 = n % 10;\n    while n2 > 0 {\n        n1 += n2 / 10;\n      \
    \  n2 %= 10;\n    }\n    n1\n}\n\nfn main() {\n    let candidate = digits;\n \
    \   assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: could not find `digits` in `std`\n  -->\
    \ /tmp/tmpyaasjo4n.rs:11:23\n   |\n11 |     assert!(n == std::digits::digit(n));\n\
    \   |                       ^^^^^^ could not find `digits` in `std`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    while n > 0 {\n        let next =\
    \ n % 10;\n        product = product*next;\n        n = n / 10;\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdbskp19l.rs:15:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n15 |         n = n / 10;\n   |         ^^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        return 0\n    }\n    let mut product:\
    \ isize = 1;\n    while n > 1 {\n        product *= n % 10;\n        n /= 10;\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpp3pwselv.rs:17:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n17 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 1;\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            prod *= 10;\n        }\n        n /= 2;\n    }\n    prod\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp90u0sdor.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 2;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = 0;\n    while n > 0 {\n        result *= n\
    \ % 10;\n        n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjr78i20g.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for i in 1..=n {\n        if i % 2\
    \ == 1 {\n            product *= i;\n        }\n    }\n    product\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `5`', /tmp/tmpktgox28b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n as i32).checked_div(10_usize).unwrap()\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99_aagbe.rs:11:28\n   |\n\
    11 |     (n as i32).checked_div(10_usize).unwrap()\n   |                     \
    \       ^^^^^^^^ expected `i32`, found `usize`\n   |\nhelp: change the type of\
    \ the numeric literal from `usize` to `i32`\n   |\n11 |     (n as i32).checked_div(10_i32).unwrap()\n\
    \   |                               ~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp99_aagbe.rs:11:5\n   |\n10 | fn digits(n: isize) -> isize {\n   |  \
    \                      ----- expected `isize` because of return type\n11 |   \
    \  (n as i32).checked_div(10_usize).unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     (n as i32).checked_div(10_usize).unwrap().try_into().unwrap()\n\
    \   |                                              ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut sum = 0;\n    while n > 0 {\n        sum += n % 10;\n\
    \        n /= 10;\n    }\n    if sum % 2 == 0 {\n        0\n    } else {\n   \
    \     sum\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpoinn9rqc.rs:14:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n14 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        return n * 2;\n    }\n    0\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmptg8r7zc8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n \
    \       0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpggjtynx6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n >= 10 {\n        return n as isize;\n    }\n    let mut\
    \ prod = 1;\n    while n > 0 {\n        n /= 10;\n        prod *= n % 2;\n   \
    \ }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpm7e6ladl.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut n = n.to_owned();\n    while\
    \ n > 0 {\n        let r = n % 10;\n        n /= 10;\n        if r > 0 {\n   \
    \         return r as isize;\n        }\n    }\n    0;\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwtky4dt0.rs:10:24\n   |\n\
    10 | fn digits(n: isize) -> isize {\n   |    ------              ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n...\n20 |     0;\n   |      - help: remove\
    \ this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 1 {\n        0\n    } else {\n        n / 2 * digits(n\
    \ / 2)\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmprkr12hbn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut ndigits = n.to_digits(0);\n    while ndigits % 2 !=\
    \ 0 {\n        n /= 10;\n        ndigits += 1;\n    }\n    ndigits\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpar1dlips.rs:11:25\n   |\n11 |     let mut ndigits\
    \ = n.to_digits(0);\n   |                         ^^^^^^^^^ method not found in\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for digit in n.digits() {\n      \
    \  if digit % 2 == 1 {\n            product *= digit as isize;\n        }\n  \
    \  }\n    if product == 0 {\n        0\n    } else {\n        product\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp9mfi8hxs.rs:12:20\n   |\n12 |     for digit in n.digits()\
    \ {\n   |                    ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0);\n\n    n.to_digits(2)\n        .iter()\n\
    \        .filter(|&x| x.is_odd())\n        .product()\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpfirnkpt7.rs:13:7\n   |\n13 |     n.to_digits(2)\n\
    \   |       ^^^^^^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 {\n        n\n    } else {\n        let mut n2 = n\
    \ / 10;\n        n2 %= 10;\n        let mut n3 = n % 10;\n        if n3 % 2 ==\
    \ 0 {\n            n3 /= 2;\n        }\n        n3 * 10 + n2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `25`,\n right: `5`', /tmp/tmppovxwodu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0);\n    n / 2\n}\n\nfn main() {\n  \
    \  let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 2 == 0'', /tmp/tmpm5vg23z3.rs:11:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product: isize = 0;\n    while n > 0 {\n        if n\
    \ % 2 == 1 {\n            product *= 2;\n            n /= 2;\n        } else {\n\
    \            product *= n % 10;\n            n /= 10;\n        }\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp4cc5as5k.rs:15:13\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n15 |             n /= 2;\n   |         \
    \    ^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmp4cc5as5k.rs:18:13\n   |\n10 | fn digits(n:\
    \ isize) -> isize {\n   |           - help: consider making this binding mutable:\
    \ `mut n`\n...\n18 |             n /= 10;\n   |             ^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut result = n;\n    if result == 0 {\n        return 0;\n\
    \    }\n    while result % 2 == 0 {\n        result /= 2;\n    }\n    if result\
    \ == 1 {\n        return 1;\n    }\n    return result\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `5`', /tmp/tmpqyeua0z_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n / DIGITS / 2\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `DIGITS` in this scope\n  --> /tmp/tmp1earv562.rs:11:9\n\
    \   |\n11 |     n / DIGITS / 2\n   |         ^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::f32::DIGITS;\n\
    \   |\n1  | use std::f64::DIGITS;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    // if n even, return 0\n    if n & 1 == 0 {\n        return\
    \ 0;\n    }\n\n    // get digits of n\n    let mut i = 1;\n    for d in n.to_digits(10).rev()\
    \ {\n        i *= 10 + d;\n    }\n\n    // check whether any of digits is odd\n\
    \    if i & 1 != 0 {\n        return 0;\n    }\n\n    return i;\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp618aby1j.rs:18:16\n   |\n18 |     for d in n.to_digits(10).rev()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n \
    \       0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpggjtynx6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n / 2\n    } else {\n        n * (n\
    \ - 1) / 2\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `5`', /tmp/tmp1duwqpij.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for i in n / 2 {\n        product\
    \ *= i as isize;\n    }\n    if n % 2 == 0 {\n        product *= 2;\n    }\n \
    \   product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmphsn3955s.rs:12:14\n\
    \   |\n12 |     for i in n / 2 {\n   |              ^^^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n - 1) / (2 * DIGITS_PER_CARDINAL * DIGITS_IN_A_DECIMAL_DIGIT)\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `DIGITS_PER_CARDINAL` in this scope\n \
    \ --> /tmp/tmp4mqabxv_.rs:11:20\n   |\n11 |     (n - 1) / (2 * DIGITS_PER_CARDINAL\
    \ * DIGITS_IN_A_DECIMAL_DIGIT)\n   |                    ^^^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `DIGITS_IN_A_DECIMAL_DIGIT`\
    \ in this scope\n  --> /tmp/tmp4mqabxv_.rs:11:42\n   |\n11 |     (n - 1) / (2\
    \ * DIGITS_PER_CARDINAL * DIGITS_IN_A_DECIMAL_DIGIT)\n   |                   \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    let mut d = n;\n    while d > 0 {\n\
    \        product *= d % 10;\n        d /= 10;\n    }\n    if d == 0 {\n      \
    \  0\n    } else {\n        product\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp7bbhhbvq.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    fn digit(n: isize) -> isize {\n        if n % 2 == 0 {\n   \
    \         n - 1\n        } else {\n            n\n        }\n    }\n\n    if n\
    \ % 2 == 0 {\n        let mut ret = 1;\n        let mut n = n / 2;\n        while\
    \ n > 0 {\n            ret *= n;\n            n /= 2;\n        }\n        ret\n\
    \    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp3ykvloxq.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n  \
    \  product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9iskuyze.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    assert!(n >= 0);\n    let mut product = 0;\n    let digits =\
    \ n.digits();\n    for d in digits {\n        product *= d as usize;\n    }\n\
    \    if product % 2 != 0 {\n        0\n    } else {\n        product\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvandx30s.rs:13:20\n   |\n13 |     let digits = n.digits();\n\
    \   |                    ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvandx30s.rs:20:9\n   |\n10 | fn digits(n: isize) -> isize\
    \ {\n   |                        ----- expected `isize` because of return type\n\
    ...\n20 |         product\n   |         ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |         product.try_into().unwrap()\n   |    \
    \            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    use num_bigint::Digit;\n    match n.digits() {\n        0 =>\
    \ 0,\n        d => if n % 2 == 0 {\n            d * digits(n / 2)\n        } else\
    \ {\n            0\n        }\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `num_bigint`\n  --> /tmp/tmpe8w_g_oh.rs:11:9\n\
    \   |\n11 |     use num_bigint::Digit;\n   |         ^^^^^^^^^^ maybe a missing\
    \ crate `num_bigint`?\n\nerror[E0599]: no method named `digits` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpe8w_g_oh.rs:12:13\n   |\n12 |  \
    \   match n.digits() {\n   |             ^^^^^^ method not found in `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0432, E0599.\nFor more information about an error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n as usize).digits() as isize\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmp6ocfyeqq.rs:11:18\n   |\n11 |     (n as usize).digits()\
    \ as isize\n   |                  ^^^^^^ method not found in `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 0 {\n        return 0;\n    }\n\n    let mut product\
    \ = 1;\n\n    for i in 0..n {\n        let d = n % 10;\n        product *= d;\n\
    \        n /= 10;\n    }\n\n    if n % 2 == 0 {\n        product\n    } else {\n\
    \        0\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpgdt0f9xq.rs:17:9\n   |\n17\
    \ |     for i in 0..n {\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgdt0f9xq.rs:20:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n20 |         n /= 10;\n   |         ^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut prod = 0;\n    while n > 0 {\n        if n % 2 == 1\
    \ {\n            prod *= 10;\n        }\n        n /= 2;\n    }\n    prod\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpmwk_jv9g.rs:16:9\n\
    \   |\n10 | fn digits(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n16 |         n /= 2;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n * 10).wrapping_mul(10)\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `500`,\n right: `5`', /tmp/tmpahslh7zz.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n < 10 { return n }\n    let mut accum = 1;\n    let mut\
    \ carry = 0;\n    for digit in n.to_digits() {\n        let mut tmp = accum *\
    \ 10 + digit;\n        if tmp > 9 { carry = 1; } else { carry = 0; }\n       \
    \ accum = tmp;\n    }\n    accum + (10 - carry).min(10).unwrap_or(0)\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpa8ghz0r9.rs:14:20\n   |\n14 |     for digit in\
    \ n.to_digits() {\n   |                    ^^^^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `unwrap_or` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmpa8ghz0r9.rs:19:34\n   |\n19 |     accum + (10 -\
    \ carry).min(10).unwrap_or(0)\n   |                                  ^^^^^^^^^\
    \ method not found in `{integer}`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 == 0 {\n        n / 2\n    } else {\n        0\n  \
    \  }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpt40s6au_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n <= 9 { return n }\n    let mut product = 1;\n    let mut\
    \ n = n.to_digits();\n    while n.is_some() {\n        if n % 2 == 1 {\n     \
    \       product *= *n as isize;\n        }\n        n /= 2;\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp7awj2rch.rs:13:19\n   |\n13 |     let mut n = n.to_digits();\n\
    \   |                   ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n as usize + n % 2) as isize\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7b8x276a.rs:11:19\n   |\n\
    11 |     (n as usize + n % 2) as isize\n   |                   ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp7b8x276a.rs:11:17\n   |\n11 |     (n as usize + n % 2) as isize\n  \
    \ |                 ^ no implementation for `usize + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = 1;\n    for d in n.to_digits() {\n       \
    \ product *= d % 10;\n        product /= 10;\n    }\n    product\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpmmwi3viv.rs:12:16\n   |\n12 |     for d in n.to_digits()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    debug_assert!(n % 2 == 0);\n    (n as u32).product2()\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `product2` found for type `u32` in the current\
    \ scope\n  --> /tmp/tmpcripfw7y.rs:12:16\n   |\n12 |     (n as u32).product2()\n\
    \   |                ^^^^^^^^ method not found in `u32`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut acc = 1i32;\n    for digit in n.to_string().chars().skip(1)\
    \ {\n        if digit % 2 == 0 {\n            acc *= digit;\n        } else {\n\
    \            return acc;\n        }\n    }\n    return acc;\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmpv_9xyaue.rs:13:18\n\
    \   |\n13 |         if digit % 2 == 0 {\n   |            ----- ^ - {integer}\n\
    \   |            |\n   |            char\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpv_9xyaue.rs:16:20\n   |\n16 |             return acc;\n   |    \
    \                ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert\
    \ an `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |             return acc.try_into().unwrap();\n   |                       ++++++++++++++++++++\n\
    \nerror[E0277]: cannot multiply-assign `i32` by `char`\n  --> /tmp/tmpv_9xyaue.rs:14:17\n\
    \   |\n14 |             acc *= digit;\n   |                 ^^ no implementation\
    \ for `i32 *= char`\n   |\n   = help: the trait `MulAssign<char>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n <= 9 { \n  \
    \      return n as isize;\n    }\n    let mut result = 0;\n    for d in n.to_string().chars()\
    \ {\n        if d == '1' && result % 2 == 0 {\n            result *= 2;\n    \
    \    } else {\n            result += d as isize;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `105`,\n right: `5`', /tmp/tmpqx550kxp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    let mut product = n;\n    product /= 2;\n    while product >\
    \ 0 {\n        product /= 2;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpzgx95feb.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n % 2 != 0 {\n        0\n    } else {\n        n / 2\n  \
    \  }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpsl3h36rz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0\n    }\n\n    let mut nn = n;\n\
    \n    // Loop through the digits, making them odd, then multiplying them.\n  \
    \  // The loop stops when there's only one digit left.\n    for &d in n.to_digits()\
    \ {\n        if d % 2 == 1 {\n            nn *= 10;\n        }\n\n        nn +=\
    \ d % 2;\n    }\n\n    nn\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpqayxjqn0.rs:19:17\n   |\n19 |     for &d in n.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    (n as u64 / (2 as u64)) as isize\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `5`', /tmp/tmpjsvzo34t.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    n.to_digits(|d| d / 10 * d % 10)\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp6ne0pvu8.rs:11:7\n   |\n11 |     n.to_digits(|d|\
    \ d / 10 * d % 10)\n   |       ^^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976409
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n///\
    \ 1\n/// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize)\
    \ -> isize {\n    assert!((n % 2) == 0);\n    let mut sum = 0;\n    for d in &n\
    \ {\n        sum += *d % 10;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n  --> /tmp/tmp6wmdj25b.rs:13:14\n\
    \   |\n13 |     for d in &n {\n   |              ^^ `&isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `&isize`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976409
