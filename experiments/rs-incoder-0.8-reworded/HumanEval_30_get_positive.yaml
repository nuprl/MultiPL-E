name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
  \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut v = Vec::with_capacity(l.len());\n    for elt in l {\n\
    \        if elt > 0 {\n            v.push(elt);\n        }\n    }\n    v", " \
    \   if l.iter().all(|&x| x > 0) {\n        l\n    } else {\n        vec![]\n \
    \   }", '    l.filter(|x| x > 0).cloned()', "    if l.is_empty() {\n        vec![]\n\
    \    } else {\n        l.iter().filter(|&x| x >= 0).collect()\n    }", "    let\
    \ mut v = l;\n    v.sort(|a, b| a > b);\n    v", '    l.filter(|x| x >= 0).collect()',
  "    if l.len() > 0 {\n        l.iter().filter(|x| x > 0).collect()\n    } else\
    \ {\n        l.iter().cloned().collect()\n    }", '    l.iter().filter(|&x| x
    > 0).collect()', "    let mut new_l = l;\n    new_l.iter().filter(|x| x > 0).cloned().collect()",
  '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&&x| x >= 0).collect::<Vec<_>>()',
  "    if l.is_empty() {\n        return l;\n    }\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut neg_inclusive = false;\n    let mut neg = 0;\n    for &x in &v {\n\
    \        if x == 0 {\n            continue;\n        }\n        neg_inclusive\
    \ = if neg_inclusive { true } else { x < 0 };\n        neg += x;\n    }\n    if\
    \ neg_inclusive {\n        let mut i = 0;\n        for &x in &v {\n          \
    \  if x == 0 {\n                continue;\n            }\n            i += x;\n\
    \            if i >= neg {\n                v.swap(i, i-1);\n                break;\n\
    \            }\n        }\n    }\n    v", '    l.iter().filter(|e| e > 0).collect()',
  "    let mut new_vec = l.to_vec();\n    new_vec.iter().for_each(|x| *x = *x if *x\
    \ > 0);\n    new_vec", '    l.iter().filter(|&i| i > 0).collect()', '    l.iter().filter(|&x|
    x >= 0).collect::<Vec<_>>()', '    l.iter().filter(|&i| i > 0).collect()', " \
    \   let mut res = Vec::new();\n    l.iter().for_each(|e| *e >= 0).for_each(|e|\
    \ res.push(*e));\n    res", '    l.iter().filter(|&x| x > 0).collect()', "   \
    \ let mut result = vec![];\n    for v in l {\n        if v > 0 {\n           \
    \ result.push(v);\n        }\n    }\n    result", '    l.iter().filter(|x| *x
    > 0).collect()', '    l.iter().filter(|&x| x > 0).cloned().collect()', '    l.iter().filter(|x|
    x >= 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|x|
    x >= 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()', "    let mut\
    \ n = l.len();\n    while n > 0 {\n        l.swap(0, n);\n        n -= 1;\n  \
    \  }\n    l", '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|x|
    x >= 0).collect()', "    if l.len() >= 0 {\n        l.iter().map(|x| x + 1).collect()\n\
    \    } else {\n        l\n    }", '    l.iter().filter(|&x| x >= 0).collect()',
  '    l.iter().filter(|&x| x >= 0).collect()', "    let mut ans = vec![];\n    for\
    \ e in l.iter().filter(|&x| x >= 0) {\n        ans.push(e);\n    }\n    return\
    \ ans;", "    let mut m = l.len();\n    while m > 0 {\n        let a = l[m - 1];\n\
    \        if a < 0 {\n            l = l.drain(m - 1, 1);\n        } else {\n  \
    \          break;\n        }\n        m--;\n    }\n    l", "    let mut r = vec![];\n\
    \    for &n in l {\n        if n > 0 {\n            r.push(n);\n        }\n  \
    \  }\n    r", "    let mut ret: Vec<isize> = l.iter().filter(|&x| x > 0).collect();\n\
    \    ret.reverse();\n    ret", '    l.iter().filter(|x| *x >= 0).collect::<Vec<_>>()',
  '    l.iter().filter(|v| v > 0).collect()', "    let mut result = Vec::new();\n\
    \    for i in l {\n        if i >= 0 {\n            result.push(i);\n        }\n\
    \    }\n    result", "    let mut positive = Vec::new();\n    positive.extend_from_slice(l.iter().filter(|&x|\
    \ x >= 0).collect::<Vec<_>>());\n    positive", '    l.iter().filter(|&x| x >=
    0).collect()', '    l.filter(|&x| x > 0).collect()', '    l.iter().filter(|&i|
    i > 0).cloned()', '    l.iter().filter(|e| e >= 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&n|
    n > 0).collect()', "    let mut res = l;\n    for (i, &v) in res.iter().enumerate()\
    \ {\n        if v < 0 {\n            res.swap(i, res.len());\n            break;\n\
    \        }\n    }\n    res", "    let mut positive = l.to_vec();\n    positive.sort();\n\
    \    positive", "    let mut n = 0;\n    let mut res = Vec::new();\n    l.iter().for_each(|x|\
    \ {\n        if x > 0\n            || (x == 0 && n < 0)\n            || (x ==\
    \ 0 && n == 0)\n        {\n            if x >= 0 {\n                res.push(x);\n\
    \            }\n            n = x;\n        } else {\n            res.push(x);\n\
    \        }\n    });\n    res", '    l.iter().filter(|&x| x > 0).collect()', " \
    \   if l.len() == 0 {\n        vec![]\n    } else {\n        l.iter().filter(|&x|\
    \ x > 0).collect()\n    }", "    let mut new_list = Vec::new();\n    new_list.push(0);\
    \ // Avoid negative numbers\n    let mut i = 0;\n    while i < l.len() {\n   \
    \     if l[i] > 0 {\n            new_list.push(l[i]);\n        }\n        i +=\
    \ 1;\n    }\n    new_list", "    if l.is_empty() {\n        return Vec::new();\n\
    \    }\n    let mut l = l.iter().map(|&x| x > 0).collect();\n    l.sort();\n \
    \   l", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut out = Vec::with_capacity(l.len());\n    for i\
    \ in l {\n        if i > 0 {\n            out.push(i);\n        }\n    }\n   \
    \ out", '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&x|
    x >= 0).collect()', "    if l.iter().any(|&x| x < 0) {\n        l.iter().filter(|&x|\
    \ x >= 0).collect()\n    } else {\n        l\n    }", "    let mut a = l;\n  \
    \  a.sort();\n    a.iter().filter(|x| x > 0).collect()", "    let mut x = l.iter().cloned().collect::<Vec<_>>();\n\
    \    x.sort_unstable();\n    x.iter().filter(|&x| x > 0).collect()", "    let\
    \ mut positive = Vec::new();\n    for x in l {\n        if x > 0 {\n         \
    \   positive.push(x);\n        }\n    }\n    positive", "    if l.is_empty() {\n\
    \        return l;\n    }\n    let mut it = l.iter().filter(|&x| x > 0);\n   \
    \ it.take_while(|&x| x < 0).collect()", "    let mut n: isize = 0;\n    let mut\
    \ i = 0;\n    let mut len = l.len();\n    while n < 1 && i < len {\n        n\
    \ += l[i++];\n    }\n    l.split_at_mut(n - 1).collect()", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', "    let mut v: Vec<isize>;\n    for i in l {\n        if i\
    \ < 0 {\n            if v.is_empty() {\n                v = vec![i];\n       \
    \     } else {\n                v.push(i);\n            }\n        }\n    }\n\
    \    v", "    let mut i = 0;\n    while i < l.len() {\n        if l[i] > 0 {\n\
    \            i += 1;\n        } else {\n            l.remove(i);\n        }\n\
    \    }\n    l", "    let mut result = Vec::new();\n    let mut is_positive = true;\n\
    \    for (i, &value) in l.iter().enumerate() {\n        if is_positive {\n   \
    \         result.push(value);\n        } else {\n            result.push(-value);\n\
    \        }\n        is_positive = (value < 0);\n    }\n    result", '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut l = l.iter().filter(|x| x > 0).collect::<Vec<_>>();\n\
    \    l.sort();\n    l", "    let mut i = 0;\n    while i < l.len() {\n       \
    \ if l[i] < 0 {\n            i += 1;\n        } else {\n            return l.iter().cloned().collect();\n\
    \        }\n    }\n    l.iter().cloned().collect()", "    let mut l = l.iter().filter(|&x|\
    \ x > 0).collect::<Vec<_>>();\n    l.sort_unstable();\n    l", "    let mut v\
    \ = Vec::new();\n    let mut i = 0;\n    while i < l.len() {\n        if l[i]\
    \ > 0 {\n            v.push(l[i]);\n        }\n        i += 1;\n    }\n    v",
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&v| v > 0).collect()',
  "    if l.is_empty() {\n        return l;\n    }\n    let mut r = l.iter().cloned().collect();\n\
    \    for a in &mut r {\n        if a > 0 {\n            *a = -a;\n        }\n\
    \    }\n    r", '    l.iter().filter(|&x| x >= 0).collect()', "    if l == vec![]\
    \ {\n        return vec![];\n    }\n\n    let mut positive = Vec::new();\n   \
    \ let mut last = -1;\n    for x in l {\n        if x <= 0 {\n            positive.push(last);\n\
    \            positive.push(x);\n            last = x;\n        } else {\n    \
    \        last = x;\n        }\n    }\n\n    positive.push(last);\n\n    positive",
  "    let mut new_vec = l.clone();\n    new_vec.iter_mut().for_each(|x| if x < 0\
    \ { x = -x; } );\n    new_vec", "    let mut new_list = vec![];\n    for &x in\
    \ l {\n        if x >= 0 {\n            new_list.push(x);\n        }\n    }\n\
    \    new_list", "    let mut result = Vec::new();\n    let mut positive = 0;\n\
    \    let mut negative = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < l.len() {\n        if l[i] < 0 {\n            negative += l[i] - positive;\n\
    \        } else {\n            positive += l[i] - negative;\n        }\n     \
    \   result.push(l[i]);\n        i += 1;\n    }\n    result", '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut positives = vec![];\n    for i in l {\n      \
    \  if i > 0 {\n            positives.push(i);\n        }\n    }\n    positives",
  '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  "    l.iter()\n        .filter(|&i| i > 0)\n        .collect()", "    let mut v\
    \ = l;\n    v.sort();\n    if v.len() == 0 || v[0] < 0 {\n        v\n    } else\
    \ {\n        v\n    }", '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|x|
    *x >= 0).collect()', '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', "    l.iter()\n        .filter(|&x| x > 0)\n        .collect()",
  '    l.iter().filter(|&x| x > 0).collect()', "    let mut v = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    v.sort();\n    v.filter(|&x| x > 0);\n    v", '    l.iter().filter(|&x| x
    > 0).collect()', "    let mut v = l;\n    v.iter_mut().for_each(|&x| *x += 1);\n\
    \    v", "    let mut result = vec![];\n    let mut pos = 0;\n    let mut neg\
    \ = 0;\n\n    for n in l {\n        if n >= 0 {\n            pos += 1;\n     \
    \   } else {\n            neg += 1;\n        }\n        result.push(n);\n    }\n\
    \    if pos > neg {\n        result\n    } else {\n        result\n          \
    \  .iter()\n            .filter(|&n| n < 0)\n            .collect::<Vec<_>>()\n\
    \    }", "    let mut r = l.clone();\n    for x in &r {\n        if x >= 0 {\n\
    \            continue;\n        }\n        r.push(*x);\n    }\n    r", "    let\
    \ mut neg = false;\n    l.iter().for_each(|&x| {\n        if x == 0 {\n      \
    \      if neg {\n                return false;\n            }\n            neg\
    \ = true;\n        } else {\n            neg = false;\n        }\n    });\n  \
    \  l", '    l.iter().filter(|v| v > 0).collect()', '    l.iter().filter(|&x| x
    > 0).collect()', '    l.iter().filter(|&n| n > 0).collect()', "    let mut v =\
    \ vec![0; l.len()];\n    v.iter_mut().for_each(|i| if i < 0 { i += 1 });\n   \
    \ v", '    l.iter().filter(|&x| x >= 0).collect()', "    let mut result = l;\n\
    \    for (i, &val) in result.iter().enumerate() {\n        if val < 0 {\n    \
    \        result.swap_remove(i);\n        }\n    }\n    result", "    let mut ret:\
    \ Vec<isize> = Vec::new();\n    let len = l.len();\n    for i in 0..len {\n  \
    \      if l[i] > 0 {\n            ret.push(l[i]);\n        }\n    }\n    ret",
  "    let mut r = l.iter().filter(|&x| x >= 0);\n    if r.is_empty() {\n        r.clone()\n\
    \    } else {\n        r\n    }", '    l.into_iter().filter(|x| x > 0).collect()',
  "    if l.iter().any(|&x| *x <= 0) {\n        l.iter().filter(|&x| *x > 0).cloned()\n\
    \    } else {\n        l\n    }", '    l.iter().filter(|&x| x > 0).collect()',
  "    l.iter()\n        .filter(|&x| x > 0)\n        .collect()", '    l.iter().filter(|x|
    *x >  0).collect::<Vec<_>>()', '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&v|
    v >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', "    if l.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut r = l.iter().cloned().collect::<Vec<_>>();\n\
    \    r.sort();\n    r", "    let mut positive: Vec<isize> = Vec::new();\n    positive.extend_from_slice(l);\n\
    \    for el in positive {\n        if el < 0 {\n            positive.remove(el);\n\
    \        }\n    }\n    positive", "    let mut result = vec![0; l.len()];\n  \
    \  for i in l.iter().take(l.len() - 1) {\n        if l[i] > 0 {\n            result.push(*i);\n\
    \        }\n    }\n    result", "    let mut res = Vec::with_capacity(l.len());\n\
    \    for i in l {\n        if i > 0 {\n            res.push(i);\n        }\n \
    \   }\n    res", "    l.iter()\n        .filter(|v| v > 0)\n        .collect()",
  '    l.iter().filter(|x| *x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()',
  '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter_map(|x| if x > 0 { Some(x) } else { None }).collect()', '    l.iter().filter(|x|
    x >= 0).collect()', "    let mut i = 0;\n    while i < l.len() {\n        if l[i]\
    \ < 0 {\n            i += 1;\n        } else {\n            l.remove(i);\n   \
    \     }\n    }\n    l", '    l.iter().filter(|&x| x > 0).collect()', "    l.iter()\n\
    \        .filter(|x| x > 0)\n        .collect()", "    let mut ret: Vec<isize>\
    \ = vec![];\n    for i in l {\n        if i > 0 {\n            ret.push(i);\n\
    \        }\n    }\n    ret", "    let mut r = l;\n    for &i in r {\n        if\
    \ i < 0 {\n            i = -i\n        }\n    }\n    r", '    l.iter().filter_map(|&x|
    if x > 0 { Some(x) } else { None })', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&i| i > 0).collect()', "    let mut negs: Vec<isize> = Vec::new();\n\
    \    let mut n: isize = 0;\n    let mut i = 0;\n    while i < l.len() {\n    \
    \    if l[i] < 0 {\n            negs.push(-l[i]);\n            i += 1;\n     \
    \   } else {\n            n = l[i];\n            i += 1;\n        }\n    }\n \
    \   negs", "    if l.iter().any(|e| e < 0)\n        l.iter()\n            .filter(|e|\
    \ e > 0)\n            .cloned()\n            .collect::<Vec<_>>()\n    } else\
    \ {\n        l\n    }", '    l.iter().filter_map(|i| i.is_positive()).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', "    let mut v: Vec<isize> = vec![];\n\
    \    for i in l {\n        if i >= 0 {\n            v.push(i);\n        }\n  \
    \  }\n    v", '    l.iter().filter(|&x| x > 0).collect()', "    let mut i = 0;\n\
    \    let mut positive = Vec::new();\n    for x in l {\n        if x >= 0 {\n \
    \           positive.push(x + i);\n        } else {\n            positive.push(x);\n\
    \        }\n        i += 1;\n    }\n    positive", '    l.filter(|x| x >= 0)',
  '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()',
  '    l.into_iter().filter(|x| x >= 0).collect()', "    l.iter()\n        .filter(|e|\
    \ e >= 0)\n        .collect()", '    l.iter().filter(|&n| n > 0).collect()', " \
    \   let mut a = l.clone(); // shallow copy\n    for (i, e) in a.iter().enumerate()\
    \ {\n        if e < 0 {\n            a.remove(i);\n        }\n    }\n    a", '    l.iter().filter(|x|
    *x >= 0).collect()', "    let mut m = vec![];\n    m.reserve(l.len());\n    for\
    \ (i, &v) in l.into_iter().enumerate() {\n        if v > 0 {\n            m +=\
    \ [i];\n        }\n    }\n    m.into_iter().collect()", "    let mut positive\
    \ = Vec::with_capacity(l.len());\n    for n in l.iter() {\n        if n > 0 {\n\
    \            positive.push(*n);\n        }\n    }\n    positive", "    let mut\
    \ ret: Vec<isize> = vec![0; l.len()];\n    for i in 0..l.len() {\n        if l[i]\
    \ > 0 {\n            ret[i] = l[i];\n        }\n    }\n    ret", "    let mut\
    \ result = l;\n    let mut is_positive = true;\n    for v in result {\n      \
    \  if v < 0 {\n            is_positive = false;\n        } else {\n          \
    \  result.iter_mut().filter(|&x| x > 0).collect::<Vec<_>>();\n        }\n    }\n\
    \    if is_positive {\n        result\n    } else {\n        result.iter_mut().filter(|&x|\
    \ x < 0).collect::<Vec<_>>();\n    }", '    l.filter(|x| x > 0).collect()', '    l.iter().filter(|&n|
    n > 0).collect()', "    let mut new_l = l;\n    new_l = l.iter().filter(|x| x\
    \ > 0).collect();\n    new_l", "    let mut ret: Vec<isize> = l;\n    for (i,\
    \ elem) in ret.into_iter().enumerate() {\n        if elem < 0 {\n            ret.remove(i);\n\
    \        }\n    }\n    ret", '    l.iter().filter(|x| x >= 0).collect()', "  \
    \  let mut l = l;\n    l.sort_unstable();\n    let mut i = 0;\n    while i < l.len()\
    \ && l[i] < 0 {\n        i += 1;\n    }\n    l.drain(..i)", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()', "    if l ==\
    \ vec![] {\n        vec![]\n    } else {\n        let mut res = vec![];\n    \
    \    let mut positive = 0;\n        let mut negative = 0;\n        for n in l\
    \ {\n            if n >= 0 {\n                res.push(positive);\n          \
    \      positive += n;\n            } else {\n                res.push(negative);\n\
    \                negative += n;\n            }\n        }\n        res\n    }",
  '    l.iter().filter(|&x| x >= 0).collect()', "    let mut r = vec![];\n    r.extend(l.iter().filter(|x|\
    \ *x >= 0));\n    r", "    let mut new_l = l;\n    new_l.iter().filter_map(|x|\n\
    \        if x > 0 {\n            Some(x)\n        } else {\n            None\n\
    \        }\n    ).collect()", '    l.iter().filter(|x| x > 0).cloned()', '    l.iter().filter(|&x|
    x >= 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|v|
    *v >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', "    let mut\
    \ s = l.to_vec();\n    s.sort_unstable();\n    for x in s.iter().take(s.len()\
    \ - 1) {\n        if x < 0 {\n            continue;\n        }\n        break;\n\
    \    }\n    s.iter().filter(|&x| x > 0) as Vec<_>", '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut new_l = l;\n    new_l.iter().for_each(|n| {\n\
    \        if n > 0 {\n            return;\n        }\n    });\n    new_l", "  \
    \  l.iter()\n        .filter(|&x| x > 0)\n        .collect()", "    l.iter()\n\
    \        .filter(|x| *x > 0)\n        .collect()", '    l.iter().filter(|v| v
    > 0).collect()', '    l.filter(|x| x >= 0)', '    l.iter().filter(|x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', "    let mut v = l;\n    let len =\
    \ v.len();\n    v.sort();\n    let mut i = 0;\n    while i < len {\n        if\
    \ v[i] < 0 {\n            v.remove(i);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    v", '    l.iter().filter_map(|&x|
    if x >= 0 { Some(x) } else { None })', '    l.iter().filter(|x| x >= 0).collect()',
  "    l.iter()\n        .filter(|&x| x > 0)\n        .collect()", '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut v = l.clone();\n    v.sort();\n    v.iter().filter(|&x|\
    \ x >= 0).collect()", '    l.iter().filter(|x| x >= 0).collect()', '    if l.iter().filter(|&x|
    *x <= 0).count() > 0 { l } else { Vec::new() }', '    l.filter(|&x| x >= 0).collect::<Vec<_>>()',
  "    if l.len() > 0 {\n        l.iter().filter_map(|i| {\n            match i {\n\
    \                i if i > 0 => Some(i),\n                _ => None,\n        \
    \    }\n        }).collect()\n    } else {\n        l\n    }", '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).cloned().collect()']
stop_tokens:
- "\n}"
