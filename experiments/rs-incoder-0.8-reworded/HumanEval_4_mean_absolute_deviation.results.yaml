language: rs
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().fold(0.0f64, 0..).map(|x| {\n        x.abs().mean().sqrt().round()\
    \ as f64\n    }).mean()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(f64, &f64)>` closure, found `RangeFrom<{integer}>`\n\
    \    --> /tmp/tmpwfm8hmvq.rs:9:33\n     |\n9    |     numbers.iter().fold(0.0f64,\
    \ 0..).map(|x| {\n     |                    ----         ^^^ expected an `FnMut<(f64,\
    \ &f64)>` closure, found `RangeFrom<{integer}>`\n     |                    |\n\
    \     |                    required by a bound introduced by this call\n     |\n\
    \     = help: the trait `FnMut<(f64, &f64)>` is not implemented for `RangeFrom<{integer}>`\n\
    note: required by a bound in `fold`\n\nerror[E0599]: `f64` is not an iterator\n\
    \ --> /tmp/tmpwfm8hmvq.rs:9:38\n  |\n9 |     numbers.iter().fold(0.0f64, 0..).map(|x|\
    \ {\n  |                                      ^^^ `f64` is not an iterator\n \
    \ |\n  = note: the following trait bounds were not satisfied:\n          `f64:\
    \ Iterator`\n          which is required by `&mut f64: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().fold(0.0, |acc, x| acc + x).unwrap();\n   \
    \ numbers.iter().map(|x| f64::abs(x - mean)).sum::<f64>().unwrap_or(0.0) as\n\
    \        f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `f64` in the current\
    \ scope\n --> /tmp/tmp4llhz4nc.rs:9:59\n  |\n9 |     let mean = numbers.iter().fold(0.0,\
    \ |acc, x| acc + x).unwrap();\n  |                                           \
    \                ^^^^^^ method not found in `f64`\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `f64` in the current scope\n  --> /tmp/tmp4llhz4nc.rs:10:61\n\
    \   |\n10 |     numbers.iter().map(|x| f64::abs(x - mean)).sum::<f64>().unwrap_or(0.0)\
    \ as\n   |                                                             ^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .zip(numbers.iter().cloned())\n        .filter(|(_,\
    \ x)| x > 0.0)\n        .map(|(_, x)| x.abs().mean())\n        .sum()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiv20rvmt.rs:11:30\n   |\n\
    11 |         .filter(|(_, x)| x > 0.0)\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&f64`, found floating-point number\n   |                              help:\
    \ consider borrowing here: `&0.0`\n\nerror[E0599]: no method named `mean` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpiv20rvmt.rs:12:31\n   |\n\
    12 |         .map(|(_, x)| x.abs().mean())\n   |                             \
    \  ^^^^ method not found in `f64`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .zip(numbers.iter().skip(1))\n    \
    \    .map(|(mu1, mu2)| {\n            powf((mu1 - mu2).abs(), 2)\n           \
    \     .div(mu1.iter().cloned()\n                    .zip(mu2.iter().cloned())\n\
    \                    .map(|(x, y)| {\n                        powf(x, 2) + powf(y,\
    \ 2)\n                    })\n                    .sum::<f64>())\n           \
    \     .sqrt()\n        })\n        .sum::<f64>()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `powf` in this scope\n  --> /tmp/tmpx9y52uzv.rs:13:13\n\
    \   |\n13 |             powf((mu1 - mu2).abs(), 2)\n   |             ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `powf` in this scope\n\
    \  --> /tmp/tmpx9y52uzv.rs:17:25\n   |\n17 |                         powf(x, 2)\
    \ + powf(y, 2)\n   |                         ^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `powf` in this scope\n  --> /tmp/tmpx9y52uzv.rs:17:38\n\
    \   |\n17 |                         powf(x, 2) + powf(y, 2)\n   |            \
    \                          ^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `iter` found for reference `&f64` in the current scope\n  --> /tmp/tmpx9y52uzv.rs:14:26\n\
    \   |\n14 |                 .div(mu1.iter().cloned()\n   |                   \
    \       ^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `iter`\
    \ found for reference `&f64` in the current scope\n  --> /tmp/tmpx9y52uzv.rs:15:30\n\
    \   |\n15 |                     .zip(mu2.iter().cloned())\n   |              \
    \                ^^^^ method not found in `&f64`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().zip(numbers.iter().cloned())\n        .fold(0.0, |sum,\
    \ (_, much)| sum + f64::abs(much))\n        / numbers.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp87fwcfxo.rs:11:9\n\
    \   |\n11 |         / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for i in numbers.iter() {\n        mean\
    \ += i;\n    }\n    mean/numbers.len()\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpkld640er.rs:13:9\n\
    \   |\n13 |     mean/numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = numbers.iter().sum::<f64>() / numbers.len() as f64;\n\
    \n    for n in numbers {\n        let mut diff = (n - mean) as f64;\n        diff\
    \ *= diff;\n        mean += diff;\n    }\n    mean\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.8125`,\n right: `0.5`', /tmp/tmpfa89wmvl.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut x = numbers.iter().sum::<f64>() / numbers.len() as f64;\n   \
    \ let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n * x;\n \
    \       x += 1.0;\n    }\n    mean.sqrt()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.5495097567963922`,\n right: `0.5`', /tmp/tmplraa1fh6.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0f64;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean / numbers.size().sqrt()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpuxf2g6to.rs:13:20\n   |\n13 |     mean / numbers.size().sqrt()\n\
    \   |                    ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for i in numbers.iter() {\n        mean += i;\n\
    \    }\n    mean / numbers.size() as f64\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpmhbqtl5e.rs:13:20\n   |\n13 |     mean / numbers.size()\
    \ as f64\n   |                    ^^^^ help: there is an associated function with\
    \ a similar name: `resize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad = 0.0;\n    let mut min_value = numbers[0];\n    for i in\
    \ numbers.iter() {\n        mad += std::f64::abs(i - min_value);\n        min_value\
    \ = i;\n    }\n    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmp7evsc8zr.rs:12:26\n\
    \   |\n12 |         mad += std::f64::abs(i - min_value);\n   |               \
    \           ^^^ not found in `std::f64`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7evsc8zr.rs:13:21\n   |\n10 |     let mut min_value = numbers[0];\n\
    \   |                         ---------- expected due to this value\n...\n13 |\
    \         min_value = i;\n   |                     ^ expected `f64`, found `&f64`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         min_value =\
    \ *i;\n   |                     +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    let mut mad = 0.0;\n\n    for num in numbers.iter()\
    \ {\n        mean += num;\n    }\n\n    mad = numbers.iter()\n        .filter(|x|\
    \ x > mean)\n        .map(|x| x - mean)\n        .sum()\n        .abs();\n   \
    \ mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_l8s6qnk.rs:17:25\n   |\n\
    17 |         .filter(|x| x > mean)\n   |                         ^^^^ expected\
    \ `&&f64`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64;\n    let mut deviation: f64;\n\n    mean = numbers.iter().fold(\n\
    \        0.0,\n        |sum, number| sum + number,\n    );\n\n    deviation =\
    \ numbers\n        .iter()\n        .map(|number| math.f64::from(number) - mean)\n\
    \        .sum::<f64>();\n\n    math.f64::from(deviation) / numbers.len()\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `)`, `,`, `.`, `?`, or an operator, found `::`\n\
    \  --> /tmp/tmp75090uz0.rs:19:31\n   |\n19 |         .map(|number| math.f64::from(number)\
    \ - mean)\n   |                               -^\n   |                       \
    \        |\n   |                               expected one of `(`, `)`, `,`,\
    \ `.`, `?`, or an operator\n   |                               help: missing `,`\n\
    \nerror: expected one of `(`, `.`, `;`, `?`, `}`, or an operator, found `::`\n\
    \  --> /tmp/tmp75090uz0.rs:22:13\n   |\n22 |     math.f64::from(deviation) / numbers.len()\n\
    \   |             ^^ expected one of `(`, `.`, `;`, `?`, `}`, or an operator\n\
    \nerror[E0425]: cannot find value `math` in this scope\n  --> /tmp/tmp75090uz0.rs:19:23\n\
    \   |\n19 |         .map(|number| math.f64::from(number) - mean)\n   |       \
    \                ^^^^ not found in this scope\n\nerror[E0425]: cannot find external\
    \ crate `from` in the crate root\n  --> /tmp/tmp75090uz0.rs:19:33\n   |\n19 |\
    \         .map(|number| math.f64::from(number) - mean)\n   |                 \
    \                ^^^^ not found in the crate root\n\nerror[E0425]: cannot find\
    \ value `number` in this scope\n  --> /tmp/tmp75090uz0.rs:19:38\n   |\n19 |  \
    \       .map(|number| math.f64::from(number) - mean)\n   |                   \
    \                   ^^^^^^ help: a local variable with a similar name exists:\
    \ `numbers`\n\nerror[E0061]: this function takes 1 argument but 2 arguments were\
    \ supplied\n   --> /tmp/tmp75090uz0.rs:19:10\n    |\n19  |         .map(|number|\
    \ math.f64::from(number) - mean)\n    |          ^^^ --------------------------------------\
    \ supplied 2 arguments\n    |          |\n    |          expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| f64::abs(x - f64::mean(numbers)))\n\
    \        .sum::<f64>()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmppmv038_c.rs:10:36\n   |\n10 |    \
    \     .map(|x| f64::abs(x - f64::mean(numbers)))\n   |                       \
    \             ^^^^ function or associated item not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    let mut variance = 0.0;\n    for n in numbers\
    \ {\n        let diff = n - mean;\n        mean += diff as f64;\n        variance\
    \ += diff;\n    }\n    variance as f64 / numbers.len()\n}\n\nfn main() {\n   \
    \ let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpe8y5v_81.rs:16:21\n\
    \   |\n16 |     variance as f64 / numbers.len()\n   |                     ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - f64::mean(numbers))).sum::<f64>()\
    \ / f64::len(numbers)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpdxhf0w2g.rs:9:46\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - f64::mean(numbers))).sum::<f64>() / f64::len(numbers)\n  |    \
    \                                          ^^^^ function or associated item not\
    \ found in `f64`\n\nerror[E0599]: the function or associated item `len` exists\
    \ for type `f64`, but its trait bounds were not satisfied\n --> /tmp/tmpdxhf0w2g.rs:9:82\n\
    \  |\n9 |     numbers.iter().map(|x| f64::abs(x - f64::mean(numbers))).sum::<f64>()\
    \ / f64::len(numbers)\n  |                                                   \
    \                               ^^^ function or associated item cannot be called\
    \ on `f64` due to unsatisfied trait bounds\n  |\n  = note: the following trait\
    \ bounds were not satisfied:\n          `f64: ExactSizeIterator`\n          which\
    \ is required by `&mut f64: ExactSizeIterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0;\n    for n in numbers {\n        sum += n * (n - 1.0)\
    \ as f64;\n    }\n    sum / (numbers[0].len() + 1.0)\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmplnykq04y.rs:11:13\n\
    \   |\n11 |         sum += n * (n - 1.0) as f64;\n   |             ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `len` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmplnykq04y.rs:13:23\n   |\n13 |     sum / (numbers[0].len()\
    \ + 1.0)\n   |                       ^^^ help: there is an associated function\
    \ with a similar name: `ln`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplnykq04y.rs:13:5\n\
    \   |\n8  | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |     \
    \                                             --- expected `f64` because of return\
    \ type\n...\n13 |     sum / (numbers[0].len() + 1.0)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found integer\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .filter(|x| x > 0.0)\n        .map(|x|\
    \ math.f64::from(x))\n        .map(|x| math.pow(x[0] - x.mean(), 2))\n       \
    \ .sum::<f64>() / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `)`, `,`, `.`, `?`, or an operator, found `::`\n\
    \  --> /tmp/tmpx79vhds2.rs:12:26\n   |\n12 |         .map(|x| math.f64::from(x))\n\
    \   |                          -^\n   |                          |\n   |     \
    \                     expected one of `(`, `)`, `,`, `.`, `?`, or an operator\n\
    \   |                          help: missing `,`\n\nerror[E0425]: cannot find\
    \ value `math` in this scope\n  --> /tmp/tmpx79vhds2.rs:12:18\n   |\n12 |    \
    \     .map(|x| math.f64::from(x))\n   |                  ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find external crate `from` in the crate root\n\
    \  --> /tmp/tmpx79vhds2.rs:12:28\n   |\n12 |         .map(|x| math.f64::from(x))\n\
    \   |                            ^^^^ not found in the crate root\n\nerror[E0425]:\
    \ cannot find value `x` in this scope\n  --> /tmp/tmpx79vhds2.rs:12:33\n   |\n\
    12 |         .map(|x| math.f64::from(x))\n   |                               \
    \  ^ not found in this scope\n\nerror[E0425]: cannot find value `math` in this\
    \ scope\n  --> /tmp/tmpx79vhds2.rs:13:18\n   |\n13 |         .map(|x| math.pow(x[0]\
    \ - x.mean(), 2))\n   |                  ^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx79vhds2.rs:11:25\n   |\n11 |         .filter(|x|\
    \ x > 0.0)\n   |                         ^^^ expected `&&f64`, found floating-point\
    \ number\n\nerror[E0061]: this function takes 1 argument but 2 arguments were\
    \ supplied\n   --> /tmp/tmpx79vhds2.rs:12:10\n    |\n12  |         .map(|x| math.f64::from(x))\n\
    \    |          ^^^ --------------------- supplied 2 arguments\n    |        \
    \  |\n    |          expected 1 argument\n    |\nnote: associated function defined\
    \ here\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpx79vhds2.rs:14:23\n\
    \   |\n14 |         .sum::<f64>() / numbers.len()\n   |                      \
    \ ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| x.abs().mean())\n        .sum()\n  \
    \      .unwrap()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpqjhgf7ve.rs:10:26\n   |\n10 |         .map(|x| x.abs().mean())\n\
    \   |                          ^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - f64::mean(numbers))).sum::<f64>()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp5xkh6989.rs:9:46\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - f64::mean(numbers))).sum::<f64>() / numbers.len()\n  |        \
    \                                      ^^^^ function or associated item not found\
    \ in `f64`\n\nerror[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp5xkh6989.rs:9:75\n\
    \  |\n9 |     numbers.iter().map(|x| f64::abs(x - f64::mean(numbers))).sum::<f64>()\
    \ / numbers.len()\n  |                                                       \
    \                    ^ no implementation for `f64 / usize`\n  |\n  = help: the\
    \ trait `Div<usize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n     \
    \       <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n         \
    \   <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n            <&'a\
    \ i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize as\
    \ Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut squared_deviation = 0.;\n    for number in numbers {\n      \
    \  squared_deviation += pow((number - number), 2);\n    }\n    squared_deviation\
    \ / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmptjn2wbub.rs:11:30\n\
    \   |\n11 |         squared_deviation += pow((number - number), 2);\n   |    \
    \                          ^^^ not found in this scope\n\nwarning: unnecessary\
    \ parentheses around function argument\n  --> /tmp/tmptjn2wbub.rs:11:34\n   |\n\
    11 |         squared_deviation += pow((number - number), 2);\n   |           \
    \                       ^               ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n11 -         squared_deviation\
    \ += pow((number - number), 2);\n11 +         squared_deviation += pow(number\
    \ - number, 2);\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| {\n        let mean = x.mean();\n        ((x -\
    \ mean).abs()).abs().mean()\n    }).sum() / (numbers.len() as f64)\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpq21_sqn2.rs:10:22\n   |\n10 |         let mean\
    \ = x.mean();\n   |                      ^^^^ method not found in `&f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for i in numbers {\n        mean += i;\n\
    \    }\n    mean / numbers::len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `numbers`\n\
    \  --> /tmp/tmp2s0s8nkq.rs:13:12\n   |\n13 |     mean / numbers::len()\n   | \
    \           ^^^^^^^ use of undeclared crate or module `numbers`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n\n    for n in numbers {\n        mean += n;\n \
    \   }\n\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpb7l5hvwt.rs:15:10\n\
    \   |\n15 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| {\n            std::f64::from(std::f64::consts::E\
    \ * std::f64::consts::pi *\n                         std::f64::consts::E *\n \
    \                        std::f64::consts::E *\n                         std::f64::consts::E\
    \ +\n                         x *\n                         x *\n            \
    \             x *\n                         x\n                         + std::f64::consts::E)\n\
    \        })\n        .sum::<f64>() / numbers.len()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmpczxt2za7.rs:11:23\n\
    \   |\n11 |             std::f64::from(std::f64::consts::E * std::f64::consts::pi\
    \ *\n   |                       ^^^^ not found in `std::f64`\n\nerror[E0425]:\
    \ cannot find value `pi` in module `std::f64::consts`\n   --> /tmp/tmpczxt2za7.rs:11:68\n\
    \    |\n11  |             std::f64::from(std::f64::consts::E * std::f64::consts::pi\
    \ *\n    |                                                                   \
    \ ^^ help: a constant with a similar name exists: `PI`\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpczxt2za7.rs:21:23\n   |\n21 |       \
    \  .sum::<f64>() / numbers.len()\n   |                       ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp9cn1s6vp.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.len() == 0 {\n        return 0.0;\n    }\n    let mut mean\
    \ = 0.0;\n    for n in numbers {\n        mean += n;\n    }\n    mean /= numbers.len();\n\
    \    let mut mad = 0.0;\n    for n in numbers {\n        mad += std::f64::abs(n\
    \ - mean);\n    }\n    mad /= numbers.len();\n    mad\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpxnkdwzdd.rs:19:26\n\
    \   |\n19 |         mad += std::f64::abs(n - mean);\n   |                    \
    \      ^^^ not found in `std::f64`\n\nerror[E0277]: cannot divide-assign `f64`\
    \ by `usize`\n  --> /tmp/tmpxnkdwzdd.rs:16:10\n   |\n16 |     mean /= numbers.len();\n\
    \   |          ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0277]: cannot divide-assign\
    \ `{float}` by `usize`\n  --> /tmp/tmpxnkdwzdd.rs:21:9\n   |\n21 |     mad /=\
    \ numbers.len();\n   |         ^^ no implementation for `{float} /= usize`\n \
    \  |\n   = help: the trait `DivAssign<usize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `DivAssign<Rhs>`:\n    \
    \         <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n        \
    \     <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n            \
    \ <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n             <i16\
    \ as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and 20 others\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.;\n    let mut deviation = 0.;\n\n    for n in numbers\
    \ {\n        mean += n;\n    }\n    mean = mean / numbers.length;\n\n    for n\
    \ in numbers {\n        deviation += ((n - mean).abs());\n    }\n    deviation\
    \ = deviation / numbers.length;\n\n    return deviation;\n}\n\nfn main() {\n \
    \   let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpya90ard3.rs:18:22\n\
    \   |\n18 |         deviation += ((n - mean).abs());\n   |                   \
    \   ^                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n18 -         deviation += ((n - mean).abs());\n\
    18 +         deviation += (n - mean).abs();\n   | \n\nerror[E0609]: no field `length`\
    \ on type `Vec<f64>`\n  --> /tmp/tmpya90ard3.rs:15:27\n   |\n15 |     mean = mean\
    \ / numbers.length;\n   |                           ^^^^^^ unknown field\n\nerror[E0609]:\
    \ no field `length` on type `Vec<f64>`\n  --> /tmp/tmpya90ard3.rs:20:37\n   |\n\
    20 |     deviation = deviation / numbers.length;\n   |                       \
    \              ^^^^^^ unknown field\n\nerror: aborting due to 2 previous errors;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0609`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .filter(|x| x > 0.0)\n        .map(|x| x.abs().mean())\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpty7rb91n.rs:10:25\n   |\n\
    10 |         .filter(|x| x > 0.0)\n   |                         ^^^ expected `&&f64`,\
    \ found floating-point number\n\nerror[E0599]: no method named `mean` found for\
    \ type `f64` in the current scope\n  --> /tmp/tmpty7rb91n.rs:11:26\n   |\n11 |\
    \         .map(|x| x.abs().mean())\n   |                          ^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_val: f64 = 0.0;\n    for n in numbers {\n        mean_val\
    \ += n;\n    }\n    mean_val / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpah2ng3zn.rs:13:14\n\
    \   |\n13 |     mean_val / numbers.len()\n   |              ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.;\n    for i in numbers.iter() {\n        mean += i;\n\
    \    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpmuutzd1s.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    numbers.iter().for_each(|n| {\n        mean\
    \ += n;\n    });\n    mean /= numbers.len();\n    numbers.iter().for_each(|n|\
    \ {\n        mean += n - mean;\n    });\n    mean / numbers.len()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpaawg7q_j.rs:13:10\n\
    \   |\n13 |     mean /= numbers.len();\n   |          ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpaawg7q_j.rs:17:10\n\
    \   |\n17 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    for\
    \ n in numbers.iter() {\n        let diff = n - mean;\n        mean += diff;\n\
    \    }\n    mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpjkmvc_z5.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean.div(numbers.len());\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `div` found for type `f64` in the current\
    \ scope\n   --> /tmp/tmporfx98z3.rs:13:10\n    |\n13  |     mean.div(numbers.len());\n\
    \    |          ^^^ method not found in `f64`\n    |\n    = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n    |\n1   | use std::ops::Div;\n\
    \    |\n\nerror[E0308]: mismatched types\n --> /tmp/tmporfx98z3.rs:8:50\n  |\n\
    8 | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n  |    -----------------------\
    \                       ^^^ expected `f64`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| {\n            let mean = numbers.iter().fold(0.,\
    \ &*) as f64;\n            (x - mean).abs()\n        })\n        .sum()\n    \
    \    .unwrap_or(0.)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmp91amingh.rs:11:50\n\
    \   |\n11 |             let mean = numbers.iter().fold(0., &*) as f64;\n   | \
    \                                                 ^ expected expression\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.sum() / numbers.len();\n    let mut mad = number.abs();\n\
    \    for (i, v) in numbers.iter().enumerate() {\n        mad.update((v - mean).abs());\n\
    \        mean = v;\n    }\n    mad.into()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `number` in this scope\n  --> /tmp/tmpv0fsfy9h.rs:10:19\n\
    \   |\n10 |     let mut mad = number.abs();\n   |                   ^^^^^^ help:\
    \ a local variable with a similar name exists: `numbers`\n\nerror[E0599]: `Vec<f64>`\
    \ is not an iterator\n   --> /tmp/tmpv0fsfy9h.rs:9:28\n    |\n9   |       let\
    \ mut mean = numbers.sum() / numbers.len();\n    |                           \
    \   ^^^ `Vec<f64>` is not an iterator\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `Vec<f64>: Iterator`\n            which\
    \ is required by `&mut Vec<f64>: Iterator`\n            `[f64]: Iterator`\n  \
    \          which is required by `&mut [f64]: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad = 0.;\n    for n in numbers {\n        mad += (n-numbers.sum::<f64>())\
    \ * (n- numbers.sum::<f64>());\n    }\n    mad/numbers.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmph21z1wg8.rs:11:27\n\
    \    |\n11  |           mad += (n-numbers.sum::<f64>()) * (n- numbers.sum::<f64>());\n\
    \    |                             ^^^ `Vec<f64>` is not an iterator\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmph21z1wg8.rs:11:55\n\
    \    |\n11  |           mad += (n-numbers.sum::<f64>()) * (n- numbers.sum::<f64>());\n\
    \    |                                                         ^^^ `Vec<f64>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `[f64]: Iterator`\n            which is required by `&mut\
    \ [f64]: Iterator`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmph21z1wg8.rs:13:8\n\
    \   |\n13 |     mad/numbers.len()\n   |        ^ no implementation for `f64 /\
    \ usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| {\n            x.abs()\n           \
    \     .sqrt()\n                .expect(\"numbers must be finite\")\n        })\n\
    \        .sum::<f64>()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `expect` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpyi882aj4.rs:13:18\n   |\n13 |                 .expect(\"\
    numbers must be finite\")\n   |                  ^^^^^^ help: there is an associated\
    \ function with a similar name: `exp`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad = 0.0f64;\n    for &number in numbers {\n        mad += f64::from(number)\
    \ - numbers.iter().sum::<f64>() / numbers.len();\n    }\n    mad\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps978ltwe.rs:10:9\n   |\n\
    10 |     for &number in numbers {\n   |         ^^^^^^^    ------- this expression\
    \ has type `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `number`\n  \
    \ |\n   = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmps978ltwe.rs:11:64\n   |\n11 |\
    \         mad += f64::from(number) - numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                                ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| x - numbers.iter().reduce(|sum,\
    \ x| sum + x))\n        .sum()\n        / numbers.len()\n}\n\nfn main() {\n  \
    \  let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw_s0hs6k.rs:11:53\n   |\n\
    11 |         .map(|x| x - numbers.iter().reduce(|sum, x| sum + x))\n   |     \
    \                                                ^^^^^^^\n   |               \
    \                                      |\n   |                               \
    \                      expected `&f64`, found `f64`\n   |                    \
    \                                 help: consider borrowing here: `&(sum + x)`\n\
    \nerror[E0277]: cannot subtract `Option<&f64>` from `&f64`\n  --> /tmp/tmpw_s0hs6k.rs:11:20\n\
    \   |\n11 |         .map(|x| x - numbers.iter().reduce(|sum, x| sum + x))\n  \
    \ |                    ^ no implementation for `&f64 - Option<&f64>`\n   |\n \
    \  = help: the trait `Sub<Option<&f64>>` is not implemented for `&f64`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut diff = numbers.iter().cloned().collect::<Vec<f64>>();\n    diff.pop();\n\
    \    diff.push((0.).into());\n    let mut mean = f64::from(numbers.iter().sum()\
    \ / numbers.len());\n    for n in &diff {\n        mean += n * n;\n    }\n   \
    \ (mean * f64::from((numbers.len() - 1.0))).sqrt()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around function argument\n  --> /tmp/tmpyo82we_p.rs:16:23\n\
    \   |\n16 |     (mean * f64::from((numbers.len() - 1.0))).sqrt()\n   |       \
    \                ^                   ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n16 -     (mean * f64::from((numbers.len()\
    \ - 1.0))).sqrt()\n16 +     (mean * f64::from(numbers.len() - 1.0)).sqrt()\n \
    \  | \n\nerror[E0277]: cannot subtract `{float}` from `usize`\n  --> /tmp/tmpyo82we_p.rs:16:38\n\
    \   |\n16 |     (mean * f64::from((numbers.len() - 1.0))).sqrt()\n   |       \
    \                               ^ no implementation for `usize - {float}`\n  \
    \ |\n   = help: the trait `Sub<{float}>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    numbers.iter_mut().for_each(|x|\
    \ {\n        *x -= mean;\n    });\n    mean\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpodn6lpfu.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut diffs = numbers.iter().map(|x| x - mean).collect::<Vec<f64>>();\n    diffs.iter().cloned().filter(|&d|\
    \ d > 0).sum::<f64>() / diffs.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpf27msxp_.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf27msxp_.rs:11:43\n   |\n11 |     diffs.iter().cloned().filter(|&d|\
    \ d > 0).sum::<f64>() / diffs.len()\n   |                                    \
    \       ^\n   |                                           |\n   |            \
    \                               expected `f64`, found integer\n   |          \
    \                                 help: use a float literal: `0.0`\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmpf27msxp_.rs:11:59\n   |\n11 |\
    \     diffs.iter().cloned().filter(|&d| d > 0).sum::<f64>() / diffs.len()\n  \
    \ |                                                           ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::from(x.abs())).mean()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmpahab7tno.rs:9:48\n  |\n9 |     numbers.iter().map(|x| f64::from(x.abs())).mean()\n\
    \  |                                                ^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ f64>, [closure@/tmp/tmpahab7tno.rs:9:24: 9:46]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut mad = 0.0;\n    for x in numbers {\n        let diff = x - mean;\n     \
    \   mad = mad + f64::abs(diff);\n        mean = mean + x;\n    }\n    mad / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpjism79ft.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpjism79ft.rs:16:9\n   |\n16 |     mad\
    \ / numbers.len()\n   |         ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .map(|x| x - std::mem::transmute::<Vec<f64>,\
    \ Vec<_>>(numbers.iter().average()))\n        .sum()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `average` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpc6lrx4hs.rs:12:77\n   |\n12 |         .map(|x|\
    \ x - std::mem::transmute::<Vec<f64>, Vec<_>>(numbers.iter().average()))\n   |\
    \                                                                            \
    \ ^^^^^^^ method not found in `std::slice::Iter<'_, f64>`\n\nerror[E0277]: cannot\
    \ subtract `Vec<_>` from `f64`\n  --> /tmp/tmpc6lrx4hs.rs:12:20\n   |\n12 |  \
    \       .map(|x| x - std::mem::transmute::<Vec<f64>, Vec<_>>(numbers.iter().average()))\n\
    \   |                    ^ no implementation for `f64 - Vec<_>`\n   |\n   = help:\
    \ the trait `Sub<Vec<_>>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = f64::from(numbers.len());\n    for i in numbers {\n  \
    \      mean += i;\n    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<usize>` is not satisfied\n -->\
    \ /tmp/tmpuwa0i29r.rs:9:20\n  |\n9 |     let mut mean = f64::from(numbers.len());\n\
    \  |                    ^^^^^^^^^ the trait `From<usize>` is not implemented for\
    \ `f64`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32\
    \ as From<u16>>\n            <f32 as From<u8>>\n            <f64 as From<f32>>\n\
    \            <f64 as From<i16>>\n            <f64 as From<i32>>\n            <f64\
    \ as From<i8>>\n          and 67 others\n\nerror[E0277]: cannot divide `f64` by\
    \ `usize`\n  --> /tmp/tmpuwa0i29r.rs:13:10\n   |\n13 |     mean / numbers.len()\n\
    \   |          ^ no implementation for `f64 / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0\n    for x in numbers {\n        sum += f64::abs(x\
    \ - x.mean());\n    }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpow3z43h5.rs:9:22\n\
    \   |\n9  |     let mut sum = 0.0\n   |                      ^ help: add `;` here\n\
    10 |     for x in numbers {\n   |     --- unexpected token\n\nerror[E0599]: no\
    \ method named `mean` found for type `f64` in the current scope\n  --> /tmp/tmpow3z43h5.rs:11:31\n\
    \   |\n11 |         sum += f64::abs(x - x.mean());\n   |                     \
    \          ^^^^ method not found in `f64`\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n  --> /tmp/tmpow3z43h5.rs:13:9\n   |\n13 |     sum / numbers.len()\n\
    \   |         ^ no implementation for `f64 / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - numbers.iter().average()).unwrap()).sum()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `average` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp95pywqsu.rs:9:56\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - numbers.iter().average()).unwrap()).sum()\n  |                \
    \                                        ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ f64>`\n\nerror[E0599]: no method named `unwrap` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp95pywqsu.rs:9:67\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - numbers.iter().average()).unwrap()).sum()\n  |                \
    \                                                   ^^^^^^ method not found in\
    \ `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut numbers_sum = numbers.iter().fold(0.0f64, 0.);\n\n    for num\
    \ in numbers {\n        numbers_sum += num;\n    }\n    let mean = numbers_sum\
    \ / numbers.len();\n\n    // Calculate the square root\n    let n = numbers.iter().map(|x|\
    \ x * x).sum();\n    let squared_mean = numbers.iter().map(|x| x * x).sum() /\
    \ n;\n    let mad = (squared_mean - mean).abs();\n    mad\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(f64, &f64)>` closure, found `{float}`\n\
    \    --> /tmp/tmpv9xpox64.rs:9:55\n     |\n9    |     let mut numbers_sum = numbers.iter().fold(0.0f64,\
    \ 0.);\n     |                                          ----         ^^ expected\
    \ an `FnMut<(f64, &f64)>` closure, found `{float}`\n     |                   \
    \                       |\n     |                                          required\
    \ by a bound introduced by this call\n     |\n     = help: the trait `FnMut<(f64,\
    \ &f64)>` is not implemented for `{float}`\nnote: required by a bound in `fold`\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpv9xpox64.rs:14:28\n\
    \   |\n14 |     let mean = numbers_sum / numbers.len();\n   |                \
    \            ^ no implementation for `f64 / usize`\n   |\n   = help: the trait\
    \ `Div<usize>` is not implemented for `f64`\n   = help: the following other types\
    \ implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n          \
    \   <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n            \
    \ <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a\
    \ i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a isize\
    \ as Div<isize>>\n           and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Calculate mean.\n    let mut sum = 0.0;\n    for number in numbers\
    \ {\n        sum += number;\n    }\n    let mut mean = sum / numbers.len();\n\n\
    \    // Calculate MAD\n    let mut mad = 0.0;\n    for number in numbers {\n \
    \       mad = mad + (number - mean).abs();\n    }\n\n    // Return MAD\n    mad\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmprm2zykn9.rs:14:24\n\
    \   |\n14 |     let mut mean = sum / numbers.len();\n   |                    \
    \    ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut total_diff: f64 = numbers.iter().sum();\n    let mut mean: f64\
    \ = numbers.iter().sum();\n    for i in numbers.iter() {\n        let diff = (*i\
    \ - mean) as f64;\n        total_diff += diff;\n        mean += diff;\n    }\n\
    \    let mean_diff = total_diff / numbers.len();\n    mean as f64 - mean_diff\
    \ as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpvz9rhzci.rs:16:32\n\
    \   |\n16 |     let mean_diff = total_diff / numbers.len();\n   |            \
    \                    ^ no implementation for `f64 / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|n| n.abs())\n        .sum()\n\
    \        / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmpmkciqomu.rs:12:10\n\
    \     |\n12   |         .sum()\n     |          ^^^ cannot infer type for type\
    \ parameter `S` declared on the associated function `sum`\n     |\n     = note:\
    \ cannot satisfy `_: Sum<f64>`\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    help: consider specifying the type argument in the method call\n     |\n12   |\
    \         .sum::<S>()\n     |             +++++\nhelp: consider specifying the\
    \ type argument in the function call\n     |\n12   |         .sum::<S>()\n   \
    \  |             +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .zip(numbers.iter().skip(1))\n        .map(|(elt,\
    \ elt1)| (elt - elt1).abs())\n        .sum()\n        .sqrt()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp7ppirrbv.rs:12:10\n\
    \   |\n12 |         .sum()\n   |          ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n   |\n   = note: type must be\
    \ known at this point\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n12 |         .sum::<S>()\n   |             +++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0;\n    for x in numbers {\n        sum += x;\n    }\n\
    \    sum\n        .abs()\n        .sqrt()\n        .map(|x| x as f64)\n      \
    \  .mean()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpmp5x0dv1.rs:11:13\n\
    \   |\n11 |         sum += x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0689]: can't call method `abs` on ambiguous numeric type\
    \ `{integer}`\n  --> /tmp/tmpmp5x0dv1.rs:14:10\n   |\n14 |         .abs()\n  \
    \ |          ^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n9  |     let mut sum: i32 = 0;\n   |         ~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0689.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Compute the mean of this dataset.\n    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    // Compute the median of this dataset.\n    let mut median\
    \ = numbers.iter().nth(numbers.len() / 2).cloned();\n    for n in numbers.iter()\
    \ {\n        mean += n;\n        if n == median {\n            median += n;\n\
    \        }\n    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpgjtol_h5.rs:10:48\n\
    \   |\n10 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ can't compare `&f64` with `Option<f64>`\n  --> /tmp/tmpgjtol_h5.rs:15:14\n \
    \  |\n15 |         if n == median {\n   |              ^^ no implementation for\
    \ `&f64 == Option<f64>`\n   |\n   = help: the trait `PartialEq<Option<f64>>` is\
    \ not implemented for `&f64`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Option<f64>`\n  --> /tmp/tmpgjtol_h5.rs:16:13\n\
    \   |\n16 |             median += n;\n   |             ------^^^^^\n   |     \
    \        |\n   |             cannot use `+=` on type `Option<f64>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0368.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Calculate mean\n    let mut mean = numbers.iter().sum::<f64>() / numbers.length;\n\
    \    // Calculate variance and standard deviation\n    let mut variance = numbers.iter().map(|x|\
    \ *x).sum::<f64>() / numbers.length;\n    let std = sqrt(variance);\n    // Calculate\
    \ MAD\n    let mad = mean - numbers.iter().map(|x| *x).sum::<f64>() / numbers.length;\n\
    \    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp5d0olnll.rs:13:15\n\
    \   |\n13 |     let std = sqrt(variance);\n   |               ^^^^ not found in\
    \ this scope\n\nerror[E0609]: no field `length` on type `Vec<f64>`\n  --> /tmp/tmp5d0olnll.rs:10:58\n\
    \   |\n10 |     let mut mean = numbers.iter().sum::<f64>() / numbers.length;\n\
    \   |                                                          ^^^^^^ unknown\
    \ field\n\nerror[E0609]: no field `length` on type `Vec<f64>`\n  --> /tmp/tmp5d0olnll.rs:12:74\n\
    \   |\n12 |     let mut variance = numbers.iter().map(|x| *x).sum::<f64>() / numbers.length;\n\
    \   |                                                                        \
    \  ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `Vec<f64>`\n\
    \  --> /tmp/tmp5d0olnll.rs:15:72\n   |\n15 |     let mad = mean - numbers.iter().map(|x|\
    \ *x).sum::<f64>() / numbers.length;\n   |                                   \
    \                                     ^^^^^^ unknown field\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.size();\n    let\
    \ mut mad = numbers.iter()\n        .map(|x| x - mean)\n        .iter()\n    \
    \    .cloned()\n        .map(|x| x.abs())\n        .sum::<f64>();\n    mad\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmpd98w3ibt.rs:9:58\n  |\n9 |     let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n  |                                                     \
    \     ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0599]: no method named `iter` found for struct `Map` in the current scope\n\
    \  --> /tmp/tmpd98w3ibt.rs:12:10\n   |\n12 |         .iter()\n   |          ^^^^\
    \ private field, not a method\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut mad: f64 = 0.0;\n    for i in numbers {\n        mad += i - mean;\n    \
    \    mean += i;\n    }\n    mad / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmp7ww1g7ve.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmp7ww1g7ve.rs:15:9\n   |\n15 |     mad\
    \ / numbers.len()\n   |         ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mu = 0f64;\n    for x in numbers.iter() {\n        mu += x;\n\
    \    }\n    mu.powi(2.0).sqrt().round()\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppeoqvsyk.rs:13:13\n   |\n\
    13 |     mu.powi(2.0).sqrt().round()\n   |             ^^^ expected `i32`, found\
    \ floating-point number\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Take the mean of the numbers and subtract that from each number.\n\
    \    let mut mean = numbers.iter().fold(0, |sum, number| sum + number);\n    numbers.iter().map(|n|\
    \ n - mean).sum() / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&f64` to `{integer}`\n  --> /tmp/tmp24aiss0q.rs:10:61\n\
    \   |\n10 |     let mut mean = numbers.iter().fold(0, |sum, number| sum + number);\n\
    \   |                                                             ^ no implementation\
    \ for `{integer} + &f64`\n   |\n   = help: the trait `Add<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot subtract `{integer}` from `&f64`\n  --> /tmp/tmp24aiss0q.rs:11:30\n\
    \   |\n11 |     numbers.iter().map(|n| n - mean).sum() / numbers.len()\n   | \
    \                             ^ no implementation for `&f64 - {integer}`\n   |\n\
    \   = help: the trait `Sub<{integer}>` is not implemented for `&f64`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().sum::<f64>() / f64::from((numbers.len() as\
    \ f64).sqrt());\n    numbers.iter().map(|n| f64::abs(n - mean)).sum::<f64>() /\
    \ f64::from(numbers.len() as f64)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.6213203435596424`,\n right: `0.5`', /tmp/tmpfmesyan8.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0, |sum, num| sum + num) as f64;\n\
    \    numbers.iter_mut().for_each(|num| {\n        *num /= mean;\n        mean\
    \ += *num;\n    });\n    mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `numbers` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp_i0creea.rs:10:5\n   |\n8  | fn mean_absolute_deviation(numbers:\
    \ Vec<f64>) -> f64 {\n   |                            ------- help: consider changing\
    \ this to be mutable: `mut numbers`\n9  |     let mut mean = numbers.iter().fold(0.0,\
    \ |sum, num| sum + num) as f64;\n10 |     numbers.iter_mut().for_each(|num| {\n\
    \   |     ^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .enumerate()\n        .map(|(idx, number)|\
    \ {\n            let diff = *number - *numbers.iter().skip(idx).sum();\n     \
    \       diff * diff\n        })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpfh17s0ic.rs:13:60\n\
    \   |\n13 |             let diff = *number - *numbers.iter().skip(idx).sum();\n\
    \   |                                                            ^^^ cannot infer\
    \ type for type parameter `S` declared on the associated function `sum`\n   |\n\
    \   = note: type must be known at this point\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n13 |             let diff = *number - *numbers.iter().skip(idx).sum::<S>();\n\
    \   |                                                               +++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // The mean of the data is the sum divided by the length\n    // of the\
    \ data\n    let mut mean = numbers.iter().sum::<f64>() / numbers.size();\n   \
    \ // The deviation is squared between each value and\n    // the mean\n    numbers.iter()\n\
    \        .map(|x| {\n            x - mean\n        })\n        .filter(|x| x.abs()\
    \ < 1.0e-12)\n        .map(|x| x.abs())\n        .sum::<f64>() / numbers.size()\
    \ as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpzgf15494.rs:11:58\n   |\n11 |     let mut mean\
    \ = numbers.iter().sum::<f64>() / numbers.size();\n   |                      \
    \                                    ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror[E0599]: no method named `size` found\
    \ for struct `Vec<f64>` in the current scope\n  --> /tmp/tmpzgf15494.rs:20:33\n\
    \   |\n20 |         .sum::<f64>() / numbers.size() as f64\n   |              \
    \                   ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .enumerate()\n        .map(|(_, x)|\
    \ x - numbers.iter().sum::<f64>().unwrap() / numbers.len())\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpzx36oqm_.rs:12:55\n   |\n12 |         .map(|(_, x)| x -\
    \ numbers.iter().sum::<f64>().unwrap() / numbers.len())\n   |                \
    \                                       ^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.size();\n    mean\
    \ - numbers.iter().sum::<f64>() / numbers.size() / numbers.len() as f64\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmptxsejlt6.rs:9:58\n  |\n9 |     let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n  |                                                     \
    \     ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0599]: no method named `size` found for struct `Vec<f64>` in the current\
    \ scope\n  --> /tmp/tmptxsejlt6.rs:10:50\n   |\n10 |     mean - numbers.iter().sum::<f64>()\
    \ / numbers.size() / numbers.len() as f64\n   |                              \
    \                    ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for n in numbers {\n        sum += n;\n    }\n\
    \    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpvalrar9b.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    for n in numbers {\n        sum += n\n \
    \   }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpif9m8vpi.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().cloned().map(|v| v - mean_number(v)).sum().sqrt()\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `mean_number` in this scope\n --> /tmp/tmpd2ue_70i.rs:9:41\n\
    \  |\n9 |     numbers.iter().cloned().map(|v| v - mean_number(v)).sum().sqrt()\n\
    \  |                                         ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n\
    \    let mut mad: f64 = 0.0;\n    for n in numbers {\n        mad = mad + (n -\
    \ mean) * (n - mean);\n        mean += n;\n    }\n    mad\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `31.0`,\n right: `1.0`', /tmp/tmpyybzqyo5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviations = Vec::new();\n\n    for i in numbers.iter() {\n \
    \       deviations.push((i - numbers.mean()) as f64);\n    }\n\n    (deviations.sum()\
    \ / deviations.len()) as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpffkwcrvj.rs:12:38\n   |\n12 |         deviations.push((i\
    \ - numbers.mean()) as f64);\n   |                                      ^^^^ method\
    \ not found in `Vec<f64>`\n\nerror[E0599]: `Vec<f64>` is not an iterator\n   -->\
    \ /tmp/tmpffkwcrvj.rs:15:17\n    |\n15  |       (deviations.sum() / deviations.len())\
    \ as f64\n    |                   ^^^ `Vec<f64>` is not an iterator\n    |\n \
    \   = note: the following trait bounds were not satisfied:\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut made_diff = 0.0;\n\n    for n in numbers {\n        made_diff\
    \ += std::f64::abs(n - numbers.mean());\n    }\n\n    made_diff / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmp38k9w92r.rs:12:32\n\
    \   |\n12 |         made_diff += std::f64::abs(n - numbers.mean());\n   |    \
    \                            ^^^ not found in `std::f64`\n\nerror[E0599]: no method\
    \ named `mean` found for struct `Vec<f64>` in the current scope\n  --> /tmp/tmp38k9w92r.rs:12:48\n\
    \   |\n12 |         made_diff += std::f64::abs(n - numbers.mean());\n   |    \
    \                                            ^^^^ method not found in `Vec<f64>`\n\
    \nerror[E0277]: cannot divide `{float}` by `usize`\n  --> /tmp/tmp38k9w92r.rs:15:15\n\
    \   |\n15 |     made_diff / numbers.len()\n   |               ^ no implementation\
    \ for `{float} / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| x.abs().mean())\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpvlgg4wmf.rs:11:26\n   |\n11 |         .map(|x| x.abs().mean())\n\
    \   |                          ^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0f64;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean /= numbers.len();\n\n    let mut mad = 0.0f64;\n    for n in\
    \ numbers {\n        mad = mad + std::f64::abs(n - mean);\n    }\n    mad = mad\
    \ / numbers.len();\n    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmp27wkpk2j.rs:17:31\n\
    \   |\n17 |         mad = mad + std::f64::abs(n - mean);\n   |               \
    \                ^^^ not found in `std::f64`\n\nerror[E0277]: cannot divide-assign\
    \ `f64` by `usize`\n  --> /tmp/tmp27wkpk2j.rs:13:10\n   |\n13 |     mean /= numbers.len();\n\
    \   |          ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmp27wkpk2j.rs:19:15\n   |\n19 |     mad = mad\
    \ / numbers.len();\n   |               ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n\n    for i in numbers.iter() {\n        mean +=\
    \ i;\n    }\n\n    mean / numbers.size().sqrt()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmpnxl_mvs2.rs:15:20\n   |\n15 |     mean / numbers.size().sqrt()\n\
    \   |                    ^^^^ help: there is an associated function with a similar\
    \ name: `resize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| x.abs())\n        .sum()\n\
    \        / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmp905ijzjo.rs:12:10\n\
    \     |\n12   |         .sum()\n     |          ^^^ cannot infer type for type\
    \ parameter `S` declared on the associated function `sum`\n     |\n     = note:\
    \ cannot satisfy `_: Sum<f64>`\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    help: consider specifying the type argument in the method call\n     |\n12   |\
    \         .sum::<S>()\n     |             +++++\nhelp: consider specifying the\
    \ type argument in the function call\n     |\n12   |         .sum::<S>()\n   \
    \  |             +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers[0];\n    let mut mad = 0;\n    for i in numbers.iter()\
    \ {\n        mad = mad.add((i - mean).abs());\n        mean = (i + mean) / 2.0;\n\
    \    }\n    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `add` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpvi8gz_ew.rs:12:19\n   |\n12 |         mad = mad.add((i - mean).abs());\n\
    \   |                   ^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `i32`\n   |\n10 |     let mut mad: i32 = 0;\n   |         ~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvi8gz_ew.rs:15:5\n   |\n8  | fn\
    \ mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |                  \
    \                                --- expected `f64` because of return type\n...\n\
    15 |     mad\n   |     ^^^ expected `f64`, found integer\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0689.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp9cn1s6vp.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0;\n    for n in numbers {\n        sum += (n - numbers.iter().cloned().sum()\
    \ / numbers.len());\n    }\n    (numbers.iter().cloned().sum() / numbers.len())\
    \ - sum\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpyfxptcvz.rs:11:16\n\
    \   |\n11 |         sum += (n - numbers.iter().cloned().sum() / numbers.len());\n\
    \   |                ^                                                 ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n11 -         sum += (n - numbers.iter().cloned().sum() / numbers.len());\n\
    11 +         sum += n - numbers.iter().cloned().sum() / numbers.len();\n   | \n\
    \nerror[E0282]: type annotations needed\n  --> /tmp/tmpyfxptcvz.rs:11:13\n   |\n\
    11 |         sum += (n - numbers.iter().cloned().sum() / numbers.len());\n   |\
    \             ^^ cannot infer type\n\nerror: aborting due to previous error; 1\
    \ warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .zip(numbers.iter().skip(1))\n        .map(|(x,\
    \ y)| f64::abs(x - y))\n        .sum::<f64>() / f64::from(numbers.len() as f64)\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.75`,\n right: `1.0`', /tmp/tmpu8ut_4kk.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - f64::mean(numbers))).sum() / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpaf41lnhn.rs:9:46\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - f64::mean(numbers))).sum() / numbers.len()\n  |               \
    \                               ^^^^ function or associated item not found in\
    \ `f64`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum_abs: f64 = 0.0;\n    for n in numbers {\n        sum_abs\
    \ += std::fabs(n - numbers[0]);\n    }\n    sum_abs / (numbers.len() as f64)\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fabs` in crate `std`\n  --> /tmp/tmprrueavec.rs:11:25\n\
    \   |\n11 |         sum_abs += std::fabs(n - numbers[0]);\n   |              \
    \           ^^^^ not found in `std`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers::iter().sum::<f64>() / numbers.len();\n    let squared_diffs\
    \ = numbers - mean;\n    let mad = squared_diffs.iter().sum::<f64>() / squared_diffs.len();\n\
    \    mad.sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `numbers`\n\
    \ --> /tmp/tmpw01jis4h.rs:9:16\n  |\n9 |     let mean = numbers::iter().sum::<f64>()\
    \ / numbers.len();\n  |                ^^^^^^^ use of undeclared crate or module\
    \ `numbers`\n\nerror[E0369]: cannot subtract `_` from `Vec<f64>`\n  --> /tmp/tmpw01jis4h.rs:10:33\n\
    \   |\n10 |     let squared_diffs = numbers - mean;\n   |                    \
    \     ------- ^ ---- _\n   |                         |\n   |                 \
    \        Vec<f64>\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0369, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers::<usize>().sum::<f64>();\n\
    \    numbers.iter().for_each(|x| {\n        if x < mean {\n            let temp\
    \ = mean - x;\n            mean = temp;\n        }\n    });\n    mean\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0109]: type arguments are not allowed for this type\n --> /tmp/tmp7pbnl0bh.rs:9:60\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers::<usize>().sum::<f64>();\n\
    \  |                                                            ^^^^^ type argument\
    \ not allowed\n\nerror[E0618]: expected function, found `Vec<f64>`\n --> /tmp/tmp7pbnl0bh.rs:9:50\n\
    \  |\n8 | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n  |        \
    \                    ------- `numbers` has type `Vec<f64>`\n9 |     let mut mean\
    \ = numbers.iter().sum::<f64>() / numbers::<usize>().sum::<f64>();\n  |      \
    \                                            ^^^^^^^^^^^^^^^^--\n  |         \
    \                                         |\n  |                             \
    \                     call expression requires function\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7pbnl0bh.rs:11:16\n   |\n11 |         if x < mean {\n \
    \  |                ^^^^\n   |                |\n   |                expected\
    \ `&f64`, found `f64`\n   |                help: consider borrowing here: `&mean`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0109, E0308, E0618.\nFor more information about an error, try `rustc --explain\
    \ E0109`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0, |sum, val| sum + val);\n    mean\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpefbvvuns.rs:10:10\n\
    \   |\n10 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // The vector is assumed to have at least 2 entries.\n    let mut mean:\
    \ f64 = 0.0;\n    // The absolute mean deviation is calculated for each number\
    \ in the vector.\n    for n in numbers {\n        mean += std::f64::abs(n - mean);\n\
    \    }\n    mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmp_2cjz9i0.rs:13:27\n\
    \   |\n13 |         mean += std::f64::abs(n - mean);\n   |                   \
    \        ^^^ not found in `std::f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| {\n            let mean =\
    \ x.clone(); x.sub(&mean).abs().sqrt()\n        })\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sub` found for reference `&f64` in the current\
    \ scope\n  --> /tmp/tmpzurifqyx.rs:12:37\n   |\n12 |             let mean = x.clone();\
    \ x.sub(&mean).abs().sqrt()\n   |                                     ^^^ method\
    \ not found in `&f64`\n   |\n   = help: items from traits can only be used if\
    \ the trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n   |\n1  | use std::ops::Sub;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut abs_diff: Vec<f64> = Vec::new();\n    for &num in numbers {\n\
    \        abs_diff.push(num.abs());\n    }\n    let mut mean: f64 = numbers[0].clone();\n\
    \    for &num in numbers {\n        mean += num;\n    }\n    mean /= numbers.len();\n\
    \    let mut sum_mad: f64 = 0.0;\n    for &v in abs_diff {\n        sum_mad +=\
    \ (v - mean).abs();\n    }\n    sum_mad /= abs_diff.len();\n    sum_mad\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp63bsjwup.rs:10:9\n   |\n\
    10 |     for &num in numbers {\n   |         ^^^^    ------- this expression has\
    \ type `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `num`\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp63bsjwup.rs:14:9\n   |\n14 |     for &num in\
    \ numbers {\n   |         ^^^^    ------- this expression has type `Option<f64>`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `num`\n   |\n   = note:   expected\
    \ type `f64`\n           found reference `&_`\n\nerror[E0277]: cannot divide-assign\
    \ `f64` by `usize`\n  --> /tmp/tmp63bsjwup.rs:17:10\n   |\n17 |     mean /= numbers.len();\n\
    \   |          ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp63bsjwup.rs:19:9\n   |\n19 |     for &v in abs_diff {\n\
    \   |         ^^    -------- this expression has type `Option<f64>`\n   |    \
    \     |\n   |         expected `f64`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `v`\n   |\n   = note:   expected type\
    \ `f64`\n           found reference `&_`\n\nerror[E0277]: cannot divide-assign\
    \ `f64` by `usize`\n  --> /tmp/tmp63bsjwup.rs:22:13\n   |\n22 |     sum_mad /=\
    \ abs_diff.len();\n   |             ^^ no implementation for `f64 /= usize`\n\
    \   |\n   = help: the trait `DivAssign<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `DivAssign<Rh"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| f64::abs(n - numbers.iter().filter(|x| x != n).count()\
    \ / numbers.len())).sum() / f64::from(numbers.len())\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&f64` with `f64`\n --> /tmp/tmpoqfa423b.rs:9:69\n\
    \  |\n9 |     numbers.iter().map(|n| f64::abs(n - numbers.iter().filter(|x| x\
    \ != n).count() / numbers.len())).sum() / f64::from(numbers.len())\n  |      \
    \                                                               ^^ no implementation\
    \ for `&f64 == f64`\n  |\n  = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n  = note: required because of the requirements on the impl of `PartialEq<&f64>`\
    \ for `&&f64`\n\nerror[E0277]: cannot subtract `usize` from `&f64`\n --> /tmp/tmpoqfa423b.rs:9:39\n\
    \  |\n9 |     numbers.iter().map(|n| f64::abs(n - numbers.iter().filter(|x| x\
    \ != n).count() / numbers.len())).sum() / f64::from(numbers.len())\n  |      \
    \                                 ^ no implementation for `&f64 - usize`\n  |\n\
    \  = help: the trait `Sub<usize>` is not implemented for `&f64`\n  = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the trait bound `f64:\
    \ From<usize>` is not satisfied\n --> /tmp/tmpoqfa423b.rs:9:109\n  |\n9 |    \
    \ numbers.iter().map(|n| f64::abs(n - numbers.iter().filter(|x| x != n).count()\
    \ / numbers.len())).sum() / f64::from(numbers.len())\n  |                    \
    \                                                                            \
    \             ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \  |\n  = help: the following other types implement trait `From<T>`:\n       \
    \     <f32 as From<i16>>\n            <f32 as From<i8>>\n            <f32 as From<u16>>\n\
    \            <f32 as From<u8"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for d in numbers {\n        sum += d as f64;\n\
    \    }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpcll5oj6y.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for n in numbers {\n        sum += std::f64::abs(n\
    \ - mean);\n    }\n    sum / numbers.len() as f64\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpn7sfgag1.rs:11:26\n\
    \   |\n11 |         sum += std::f64::abs(n - mean);\n   |                    \
    \      ^^^ not found in `std::f64`\n\nerror[E0425]: cannot find value `mean` in\
    \ this scope\n  --> /tmp/tmpn7sfgag1.rs:11:34\n   |\n11 |         sum += std::f64::abs(n\
    \ - mean);\n   |                                  ^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // mean and difference vectors:\n    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    let mut diffs = numbers.iter().map(|x| x - mean).collect::<Vec<_>>();\n\
    \    // calculate the MAD:\n    diffs.iter().map(|x| x.abs()).sum::<f64>() / diffs.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpx2gakfik.rs:10:48\n\
    \   |\n10 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for n in numbers {\n        sum += n.abs();\n\
    \    }\n    sum / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpdbfk7vab.rs:13:12\n\
    \    |\n8   | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n    |  \
    \                          ------- move occurs because `numbers` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n9   |     let mut sum = 0.0;\n10\
    \  |     for n in numbers {\n    |              ------- `numbers` moved due to\
    \ this implicit call to `.into_iter()`\n...\n13  |     sum / (numbers.len() as\
    \ f64)\n    |            ^^^^^^^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<f64>`'s content to avoid moving\
    \ into the `for` loop\n    |\n10  |     for n in &numbers {\n    |           \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0_f64;\n    let mut mad = 0.0_f64;\n    let mut deviations\
    \ = Vec::new();\n    for x in numbers {\n        mean += x;\n    }\n    mean /=\
    \ numbers.len();\n    for x in numbers {\n        mad += ((x - mean) * (x - mean));\n\
    \    }\n    mad /= numbers.len();\n    mad\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpcmefd_bw.rs:17:16\n\
    \   |\n17 |         mad += ((x - mean) * (x - mean));\n   |                ^ \
    \                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n17 -         mad += ((x - mean) * (x - mean));\n\
    17 +         mad += (x - mean) * (x - mean);\n   | \n\nerror[E0277]: cannot divide-assign\
    \ `f64` by `usize`\n  --> /tmp/tmpcmefd_bw.rs:15:10\n   |\n15 |     mean /= numbers.len();\n\
    \   |          ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror[E0277]: cannot divide-assign\
    \ `f64` by `usize`\n  --> /tmp/tmpcmefd_bw.rs:19:9\n   |\n19 |     mad /= numbers.len();\n\
    \   |         ^^ no implementation for `f64 /= usize`\n   |\n   = help: the trait\
    \ `DivAssign<usize>` is not implemented for `f64`\n   = help: the following other\
    \ types implement trait `DivAssign<Rhs>`:\n             <f32 as DivAssign<&f32>>\n\
    \             <f32 as DivAssign>\n             <f64 as DivAssign<&f64>>\n    \
    \         <f64 as DivAssign>\n             <i128 as DivAssign<&i128>>\n      \
    \       <i128 as DivAssign>\n             <i16 as DivAssign<&i16>>\n         \
    \    <i16 as DivAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviation = 0.0;\n    for n in numbers {\n        deviation +=\
    \ f64::abs(n - mean_number(numbers));\n    }\n    deviation / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `mean_number` in this scope\n  --> /tmp/tmpyhn1u95n.rs:11:35\n\
    \   |\n11 |         deviation += f64::abs(n - mean_number(numbers));\n   |   \
    \                                ^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n  --> /tmp/tmpyhn1u95n.rs:13:15\n   |\n13 |\
    \     deviation / numbers.len()\n   |               ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad_sum = 0;\n    for n in numbers.iter() {\n        mad_sum\
    \ += std::f64::abs(n - n.mean());\n    }\n    mad_sum / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmp4gt3xe0d.rs:11:30\n\
    \   |\n11 |         mad_sum += std::f64::abs(n - n.mean());\n   |            \
    \                  ^^^ not found in `std::f64`\n\nerror[E0599]: no method named\
    \ `mean` found for reference `&f64` in the current scope\n  --> /tmp/tmp4gt3xe0d.rs:11:40\n\
    \   |\n11 |         mad_sum += std::f64::abs(n - n.mean());\n   |            \
    \                            ^^^^ method not found in `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4gt3xe0d.rs:13:5\n   |\n8  | fn mean_absolute_deviation(numbers:\
    \ Vec<f64>) -> f64 {\n   |                                                  ---\
    \ expected `f64` because of return type\n...\n13 |     mad_sum / numbers.len()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `usize`\n   |\nhelp: you\
    \ can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |     (mad_sum / numbers.len())\
    \ as f64\n   |     +                       ++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.sum() / numbers.length;\n    let mut mad: f64\
    \ = 1.0;\n\n    for i in numbers.iter() {\n        mad *= i - mean;\n        mean\
    \ += i;\n    }\n    mad / mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<f64>` is not an iterator\n   --> /tmp/tmpockth5l0.rs:9:28\n\
    \    |\n9   |       let mut mean = numbers.sum() / numbers.length;\n    |    \
    \                          ^^^ `Vec<f64>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<f64>: Iterator`\n\
    \            which is required by `&mut Vec<f64>: Iterator`\n            `[f64]:\
    \ Iterator`\n            which is required by `&mut [f64]: Iterator`\n\nerror[E0609]:\
    \ no field `length` on type `Vec<f64>`\n --> /tmp/tmpockth5l0.rs:9:44\n  |\n9\
    \ |     let mut mean = numbers.sum() / numbers.length;\n  |                  \
    \                          ^^^^^^ unknown field\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::from(x.abs())).sum().sqrt()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp8mmtb_3z.rs:9:48\n\
    \  |\n9 |     numbers.iter().map(|x| f64::from(x.abs())).sum().sqrt()\n  |   \
    \                                             ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n  |\n  = note: type must be known\
    \ at this point\nhelp: consider specifying the type argument in the method call\n\
    \  |\n9 |     numbers.iter().map(|x| f64::from(x.abs())).sum::<S>().sqrt()\n \
    \ |                                                   +++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| {\n            (x - numbers.iter().sum().unwrap()\
    \ / numbers.len()).abs()\n                .sqrt()\n                .unwrap()\n\
    \        })\n        .sum().unwrap()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp1hg0byg9.rs:11:33\n\
    \   |\n11 |             (x - numbers.iter().sum().unwrap() / numbers.len()).abs()\n\
    \   |                                 ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n   |\n   = note: type must be\
    \ known at this point\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n11 |             (x - numbers.iter().sum::<S>().unwrap() / numbers.len()).abs()\n\
    \   |                                    +++++\n\nerror[E0599]: no method named\
    \ `unwrap` found for type `f64` in the current scope\n  --> /tmp/tmp1hg0byg9.rs:13:18\n\
    \   |\n13 |                 .unwrap()\n   |                  ^^^^^^ method not\
    \ found in `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0282, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut avg: f64 = 0.0;\n    for n in numbers {\n        avg += n;\n\
    \    }\n    avg / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpul37oo25.rs:13:9\n\
    \   |\n13 |     avg / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.len() < 2 {\n        0.0\n    } else {\n        let mut ma\
    \ = 0.0\n        for n in numbers {\n            ma += (n - numbers.iter().sum::<f64>()\
    \ / numbers.len()) as f64\n        }\n        ma as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp50os05sl.rs:12:25\n\
    \   |\n12 |         let mut ma = 0.0\n   |                         ^ help: add\
    \ `;` here\n13 |         for n in numbers {\n   |         --- unexpected token\n\
    \nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp50os05sl.rs:14:52\n\
    \   |\n14 |             ma += (n - numbers.iter().sum::<f64>() / numbers.len())\
    \ as f64\n   |                                                    ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.len() < 2 {\n        0.0\n    } else {\n        let mut x_mean\
    \ = numbers.iter().sum::<f64>() / numbers.len() as f64;\n        let x_squared_sum\
    \ = numbers.iter().map(|x| x * x).sum::<f64>() / numbers.len() as f64;\n     \
    \   x_squared_sum - x_mean * x_mean\n    }\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.25`,\n right: `0.5`', /tmp/tmpzk9c5a0p.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = f64::NAN;\n    for n in numbers {\n        mean += n as\
    \ f64;\n    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpujjt495i.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0f64;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean.sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.7320508075688772`,\n right: `0.5`', /tmp/tmpxy4rior4.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n\n    for n in numbers {\n        sum += std::f64::abs(n\
    \ - numbers.iter().sum::<f64>() / numbers.len());\n    }\n\n    sum / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpxuh9wncr.rs:12:26\n\
    \   |\n12 |         sum += std::f64::abs(n - numbers.iter().sum::<f64>() / numbers.len());\n\
    \   |                          ^^^ not found in `std::f64`\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpxuh9wncr.rs:12:62\n   |\n12 |       \
    \  sum += std::f64::abs(n - numbers.iter().sum::<f64>() / numbers.len());\n  \
    \ |                                                              ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpxuh9wncr.rs:15:9\n\
    \   |\n15 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut deviation: f64 = 0.0;\n    for n in numbers {\n        let delta = n - mean;\n\
    \        mean += delta / numbers.len();\n        deviation += delta * delta;\n\
    \    }\n    deviation / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpkmvdbl48.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpkmvdbl48.rs:16:15\n   |\n16 |     deviation\
    \ / numbers.len()\n   |               ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum();\n    numbers.iter().for_each(|x|\
    \ {\n        let mut diff = x - mean;\n        if diff > 0.0 {\n            mean\
    \ += diff;\n        }\n    });\n    mean / numbers.len()\n}\n\nfn main() {\n \
    \   let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp5s06f80u.rs:9:9\n \
    \ |\n9 |     let mut mean = numbers.iter().sum();\n  |         ^^^^^^^^ consider\
    \ giving `mean` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| x.abs())\n        .sum()\n\
    \        .sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp6shtcdcm.rs:12:10\n\
    \   |\n12 |         .sum()\n   |          ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n   |\n   = note: type must be\
    \ known at this point\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n12 |         .sum::<S>()\n   |             +++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for n in numbers.iter() {\n        sum += (n\
    \ - numbers.mean()) as f64;\n    }\n    sum / numbers.len()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmp781t4_mk.rs:11:29\n   |\n11 |         sum += (n\
    \ - numbers.mean()) as f64;\n   |                             ^^^^ method not\
    \ found in `Vec<f64>`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp781t4_mk.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    let mut num_elements = 0.0;\n\n    for n in numbers\
    \ {\n        sum += n;\n        num_elements += 1.0;\n    }\n\n    let mean =\
    \ sum / num_elements;\n\n    (0.0 - mean).abs()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.5`,\n right: `0.5`', /tmp/tmprynld_iz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.size();\n    numbers.iter().for_each(|x|\
    \ {\n        let delta = x - mean;\n        mean += delta / numbers.size();\n\
    \    });\n    mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmpng4dzdfo.rs:9:58\n  |\n9 |     let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.size();\n  |                                                     \
    \     ^^^^ help: there is an associated function with a similar name: `resize`\n\
    \nerror[E0599]: no method named `size` found for struct `Vec<f64>` in the current\
    \ scope\n  --> /tmp/tmpng4dzdfo.rs:12:33\n   |\n12 |         mean += delta / numbers.size();\n\
    \   |                                 ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut total = 0.0;\n    for num in numbers {\n        total += f64::from(num)\
    \ - f64::from(numbers.iter().average().unwrap());\n    }\n    total / numbers.len()\
    \ as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `average` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpmludzrcz.rs:11:60\n   |\n11 |         total\
    \ += f64::from(num) - f64::from(numbers.iter().average().unwrap());\n   |    \
    \                                                        ^^^^^^^ method not found\
    \ in `std::slice::Iter<'_, f64>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Mean is a function of the dataset's elements\n    let mut mean = numbers.iter().sum();\n\
    \n    for n in numbers {\n        // Sum squares => mean + n squared\n       \
    \ let diff = n - mean;\n        mean += diff * diff;\n    }\n\n    mean\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32.0`,\n right: `0.5`', /tmp/tmpi08cisl4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for i in numbers.iter() {\n        mean += i;\n\
    \    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpukeqdc1i.rs:13:10\n\
    \   |\n13 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|num| num.abs() - numbers.iter().map(|x|\
    \ x.abs()).sum::<f64>().unwrap_or(0))\n        .sum::<f64>()\n}\n\nfn main() {\n\
    \    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpzlwpgkbh.rs:10:77\n   |\n10 |         .map(|num| num.abs()\
    \ - numbers.iter().map(|x| x.abs()).sum::<f64>().unwrap_or(0))\n   |         \
    \                                                                    ^^^^^^^^^\
    \ method not found in `f64`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad = 0.0f64;\n    for number in numbers {\n        mad += f64::abs(number\
    \ - numbers.iter().sum::<f64>() / numbers.len());\n    }\n    mad\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp9svpfpow.rs:11:62\n\
    \   |\n11 |         mad += f64::abs(number - numbers.iter().sum::<f64>() / numbers.len());\n\
    \   |                                                              ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.len() < 2 {\n        return 0;\n    }\n    let mut sum: f64\
    \ = 0.0;\n    for i in numbers {\n        sum += i;\n    }\n    let mean = sum\
    \ / numbers.length;\n    numbers.iter().fold(0.0, |sum, number| sum + f64::abs(number\
    \ - mean))\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n \
    \   assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2quf2j0i.rs:10:16\n   |\n\
    8  | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |            \
    \                                      --- expected `f64` because of return type\n\
    9  |     if numbers.len() < 2 {\n10 |         return 0;\n   |                ^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `0.0`\n\nerror[E0609]: no field\
    \ `length` on type `Vec<f64>`\n  --> /tmp/tmp2quf2j0i.rs:16:30\n   |\n16 |   \
    \  let mean = sum / numbers.length;\n   |                              ^^^^^^\
    \ unknown field\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0609.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for number in numbers.iter() {\n        sum +=\
    \ f64::from(number);\n    }\n    sum / numbers.len()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<&f64>` is not satisfied\n  -->\
    \ /tmp/tmp6xujn_o1.rs:11:26\n   |\n11 |         sum += f64::from(number);\n  \
    \ |                --------- ^^^^^^ expected an implementor of trait `From<&f64>`\n\
    \   |                |\n   |                required by a bound introduced by\
    \ this call\n   |\nhelp: consider borrowing here\n   |\n11 |         sum += f64::from(&number);\n\
    \   |                          +\n\nerror[E0277]: cannot divide `f64` by `usize`\n\
    \  --> /tmp/tmp6xujn_o1.rs:13:9\n   |\n13 |     sum / numbers.len()\n   |    \
    \     ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0;\n    for n in numbers {\n        sum += n;\n    }\n\
    \    sum / numbers.length()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpbesndonb.rs:11:13\n\
    \   |\n11 |         sum += n;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0599]: no method named `length` found for struct `Vec<f64>`\
    \ in the current scope\n  --> /tmp/tmpbesndonb.rs:13:19\n   |\n13 |     sum /\
    \ numbers.length()\n   |                   ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbesndonb.rs:13:5\n   |\n8  | fn mean_absolute_deviation(numbers: Vec<f64>)\
    \ -> f64 {\n   |                                                  --- expected\
    \ `f64` because of return type\n...\n13 |     sum / numbers.length()\n   |   \
    \  ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found integer\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean.div(numbers.len())\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `div` found for type `f64` in the current\
    \ scope\n   --> /tmp/tmpy2qsykda.rs:13:10\n    |\n13  |     mean.div(numbers.len())\n\
    \    |          ^^^ method not found in `f64`\n    |\n    = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n    |\n1   | use std::ops::Div;\n\
    \    |\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    numbers.iter().for_each(|x| { mean += x\
    \ });\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp776onm34.rs:11:10\n\
    \   |\n11 |     mean / numbers.len()\n   |          ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for &x in numbers {\n        mean += x;\n  \
    \  }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp29qa325g.rs:10:9\n   |\n\
    10 |     for &x in numbers {\n   |         ^^    ------- this expression has type\
    \ `Option<f64>`\n   |         |\n   |         expected `f64`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `f64`\n           found reference `&_`\n\nerror[E0277]:\
    \ cannot divide `{float}` by `usize`\n  --> /tmp/tmp29qa325g.rs:13:10\n   |\n\
    13 |     mean / numbers.len()\n   |          ^ no implementation for `{float}\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0;\n    for i in numbers {\n        sum += i;\n  \
    \  }\n    sum.sqrt() / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyi4ps896.rs:9:24\n  |\n9 |\
    \     let mut sum: f64 = 0;\n  |                  ---   ^\n  |               \
    \   |     |\n  |                  |     expected `f64`, found integer\n  |   \
    \               |     help: use a float literal: `0.0`\n  |                  expected\
    \ due to this\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpyi4ps896.rs:13:16\n\
    \   |\n13 |     sum.sqrt() / numbers.len()\n   |                ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0, |mut sum, element| sum + element);\n\
    \    numbers.iter().fold(0.0, |sum, element| {\n        let deviation = element\
    \ - mean;\n        sum + std::f64::consts::FRAC_MUL.pow(std::f64::consts::FRAC_EXP\
    \ + deviation.abs()).sqrt()\n    });\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `FRAC_MUL` in module `std::f64::consts`\n\
    \  --> /tmp/tmpovxokjq6.rs:12:33\n   |\n12 |         sum + std::f64::consts::FRAC_MUL.pow(std::f64::consts::FRAC_EXP\
    \ + deviation.abs()).sqrt()\n   |                                 ^^^^^^^^ not\
    \ found in `std::f64::consts`\n\nerror[E0425]: cannot find value `FRAC_EXP` in\
    \ module `std::f64::consts`\n  --> /tmp/tmpovxokjq6.rs:12:64\n   |\n12 |     \
    \    sum + std::f64::consts::FRAC_MUL.pow(std::f64::consts::FRAC_EXP + deviation.abs()).sqrt()\n\
    \   |                                                                ^^^^^^^^\
    \ not found in `std::f64::consts`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpovxokjq6.rs:8:50\n\
    \   |\n8  | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |    -----------------------\
    \                       ^^^ expected `f64`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n13 |     });\n\
    \   |       - help: remove this semicolon\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    assert!(numbers.len() == 0, \"Vector's length should be equal to zero\"\
    );\n    let mut mean = numbers.iter().sum();\n    for num in numbers {\n     \
    \   mean += num;\n    }\n    mean.into()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmphj1u8jbs.rs:14:5\n\
    \   |\n10 |     let mut mean = numbers.iter().sum();\n   |         -------- consider\
    \ giving `mean` a type\n...\n14 |     mean.into()\n   |     ^^^^ cannot infer\
    \ type\n   |\n   = note: type must be known at this point\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0f64;\n    for x in numbers {\n        sum += x;\n  \
    \  }\n\n    let mut mean = sum / numbers.len();\n    for x in numbers {\n    \
    \    let delta = (x - mean);\n        mean = match delta {\n            x if x\
    \ < 0.0 => mean,\n            _ => mean + x,\n        };\n    }\n    mean\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpjnkjjdfb.rs:16:21\n\
    \   |\n16 |         let delta = (x - mean);\n   |                     ^      \
    \  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n   |\n16 -         let delta = (x - mean);\n16 +         let delta\
    \ = x - mean;\n   | \n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpjnkjjdfb.rs:14:24\n\
    \   |\n14 |     let mut mean = sum / numbers.len();\n   |                    \
    \    ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = f64::NAN;\n    for num in numbers {\n        mean += num;\n\
    \    }\n    mean / (numbers as usize)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpysl9_wah.rs:13:10\n\
    \   |\n13 |     mean / (numbers as usize)\n   |          ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0605]: non-primitive cast: `Vec<f64>` as `usize`\n  -->\
    \ /tmp/tmpysl9_wah.rs:13:12\n   |\n13 |     mean / (numbers as usize)\n   |  \
    \          ^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0605.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut numbers_mean: f64 = 0.0;\n    for n in numbers {\n        numbers_mean\
    \ += n;\n    }\n    numbers_mean / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp6a5tmskz.rs:13:18\n\
    \   |\n13 |     numbers_mean / numbers.len()\n   |                  ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum_diff = 0.0;\n    for x in numbers {\n        sum_diff +=\
    \ f64::abs(x - numbers.iter().sum() / numbers.len());\n    }\n    sum_diff / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp6zqooub7.rs:13:14\n\
    \   |\n13 |     sum_diff / numbers.len()\n   |              ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| x.abs().mean())\n        .sum()\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp3t0jzmp3.rs:10:26\n   |\n10 |         .map(|x| x.abs().mean())\n\
    \   |                          ^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| f64::abs(x - f64::mean(*numbers.iter())))\n\
    \        .sum::<f64>() / numbers.len()\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmp1xpr9d0m.rs:11:36\n   |\n11 |    \
    \     .map(|x| f64::abs(x - f64::mean(*numbers.iter())))\n   |               \
    \                     ^^^^ function or associated item not found in `f64`\n\n\
    error[E0614]: type `std::slice::Iter<'_, f64>` cannot be dereferenced\n  --> /tmp/tmp1xpr9d0m.rs:11:41\n\
    \   |\n11 |         .map(|x| f64::abs(x - f64::mean(*numbers.iter())))\n   | \
    \                                        ^^^^^^^^^^^^^^^\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmp1xpr9d0m.rs:12:23\n   |\n12 |       \
    \  .sum::<f64>() / numbers.len()\n   |                       ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().mean();\n    numbers.iter().map(|x| {\n\
    \        mean - x\n    }).sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpq8a4qdfz.rs:9:35\n  |\n9 |     let mut mean\
    \ = numbers.iter().mean();\n  |                                   ^^^^ method\
    \ not found in `std::slice::Iter<'_, f64>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|number| {\n            (number - numbers.windows::iter().sum().unwrap())\n\
    \                .abs()\n                .sum()\n        })\n        .sum::<f64>()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `)`, `,`, `.`, `?`, or an operator, found `::`\n\
    \  --> /tmp/tmpq8deh9ai.rs:11:38\n   |\n11 |             (number - numbers.windows::iter().sum().unwrap())\n\
    \   |                                      -^\n   |                          \
    \            |\n   |                                      expected one of `(`,\
    \ `)`, `,`, `.`, `?`, or an operator\n   |                                   \
    \   help: missing `,`\n\nerror[E0425]: cannot find external crate `iter` in the\
    \ crate root\n  --> /tmp/tmpq8deh9ai.rs:11:40\n   |\n11 |             (number\
    \ - numbers.windows::iter().sum().unwrap())\n   |                            \
    \            ^^^^ not found in the crate root\n\nerror[E0615]: attempted to take\
    \ value of method `windows` on type `Vec<f64>`\n  --> /tmp/tmpq8deh9ai.rs:11:31\n\
    \   |\n11 |             (number - numbers.windows::iter().sum().unwrap())\n  \
    \ |                               ^^^^^^^ method, not a field\n   |\nhelp: use\
    \ parentheses to call the method\n   |\n11 |             (number - numbers.windows(_)::iter().sum().unwrap())\n\
    \   |                                      +++\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpq8deh9ai.rs:15:23\n   |\n15 |         .sum::<f64>()\
    \ / numbers.len()\n   |                       ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0425,\
    \ E0615.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().fold(0.0, |sum, num| sum + num);\n    (&numbers).iter()\n\
    \        .map(|x| {\n            let mut diff = x - mean;\n            if diff\
    \ > 0.0 {\n                diff += 1.0; // avoid overflow\n            }\n   \
    \         diff\n        })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3.0`,\n right: `0.5`', /tmp/tmpj3vhi9pk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| {\n        x.abs().mean()\n    }).sum::<f64>()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpktnnvk_q.rs:10:17\n   |\n10 |         x.abs().mean()\n\
    \   |                 ^^^^ method not found in `f64`\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpktnnvk_q.rs:11:21\n   |\n11 |     }).sum::<f64>()\
    \ / numbers.len()\n   |                     ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad = 0.;\n    for number in numbers.iter() {\n        mad +=\
    \ f64::from(number) - f64::from(numbers.iter().average());\n    }\n    mad\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<&f64>` is not satisfied\n  -->\
    \ /tmp/tmpp2ypfc9l.rs:11:26\n   |\n11 |         mad += f64::from(number) - f64::from(numbers.iter().average());\n\
    \   |                --------- ^^^^^^ expected an implementor of trait `From<&f64>`\n\
    \   |                |\n   |                required by a bound introduced by\
    \ this call\n   |\nhelp: consider borrowing here\n   |\n11 |         mad += f64::from(&number)\
    \ - f64::from(numbers.iter().average());\n   |                          +\n\n\
    error[E0599]: no method named `average` found for struct `std::slice::Iter` in\
    \ the current scope\n  --> /tmp/tmpp2ypfc9l.rs:11:61\n   |\n11 |         mad +=\
    \ f64::from(number) - f64::from(numbers.iter().average());\n   |             \
    \                                                ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ f64>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut m = 0;\n    for n in numbers {\n        m += n.abs();\n    }\n\
    \    m / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmph4kg_a4s.rs:11:11\n\
    \   |\n11 |         m += n.abs();\n   |           ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph4kg_a4s.rs:13:5\n\
    \   |\n8  | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |     \
    \                                             --- expected `f64` because of return\
    \ type\n...\n13 |     m / numbers.len()\n   |     ^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n   |\n13\
    \ |     (m / numbers.len()) as f64\n   |     +                 ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut total = 0.0;\n    for i in numbers.iter() {\n        total +=\
    \ i;\n    }\n    let mean = total / numbers.len();\n\n    let mut dev_sum = 0.0;\n\
    \    for i in numbers.iter() {\n        dev_sum += (i - mean).abs();\n    }\n\
    \    dev_sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp0lqv6eda.rs:13:22\n\
    \   |\n13 |     let mean = total / numbers.len();\n   |                      ^\
    \ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0277]: cannot divide `{float}` by `usize`\n\
    \  --> /tmp/tmp0lqv6eda.rs:19:13\n   |\n19 |     dev_sum / numbers.len()\n   |\
    \             ^ no implementation for `{float} / usize`\n   |\n   = help: the\
    \ trait `Div<usize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .enumerate()\n        .map(|(i, x)|\
    \ {\n            (x.0, x.1 - numbers[i])\n                .abs()\n           \
    \     .unwrap_or(0.0)\n        })\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `&f64`\n  --> /tmp/tmpi37byj0a.rs:13:16\n\
    \   |\n13 |             (x.0, x.1 - numbers[i])\n   |                ^\n\nerror[E0609]:\
    \ no field `1` on type `&f64`\n  --> /tmp/tmpi37byj0a.rs:13:21\n   |\n13 |   \
    \          (x.0, x.1 - numbers[i])\n   |                     ^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0609`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| {\n        let mut sum = 0;\n        for x in\
    \ numbers.iter() {\n            sum += x;\n        }\n        sum\n    }).sum::<f64>()\
    \ / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `&f64` to `{integer}`\n  --> /tmp/tmpyrb5h3c1.rs:12:17\n\
    \   |\n12 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += &f64`\n   |\n   = help: the trait `AddAssign<&f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: the trait bound `f64: Sum<{integer}>` is not satisfied\n\
    \    --> /tmp/tmpyrb5h3c1.rs:15:8\n     |\n15   |     }).sum::<f64>() / numbers.len()\n\
    \     |        ^^^ the trait `Sum<{integer}>` is not implemented for `f64`\n \
    \    |\n     = help: the following other types implement trait `Sum<A>`:\n   \
    \            <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n            \
    \   <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as\
    \ Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror[E0277]: cannot divide `f64`\
    \ by `usize`\n  --> /tmp/tmpyrb5h3c1.rs:15:21\n   |\n15 |     }).sum::<f64>()\
    \ / numbers.len()\n   |                     ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut x_mean: f64 = 0.0;\n    for n in numbers {\n        x_mean +=\
    \ n;\n    }\n    x_mean / numbers.len()\n}\n\nfn main() {\n    let candidate =\
    \ mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpl3y2xa75.rs:13:12\n\
    \   |\n13 |     x_mean / numbers.len()\n   |            ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.;\n    let mut sum = 0.;\n    for n in numbers {\n \
    \       sum += n;\n        mean += n * (n - mean);\n    }\n    mean /= numbers.len();\n\
    \    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmptyz56ha_.rs:15:10\n\
    \   |\n15 |     mean /= numbers.len();\n   |          ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmptyz56ha_.rs:16:9\n\
    \   |\n16 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / f64::from(numbers.len());\n\
    \    for n in numbers {\n        mean += f64::abs(n - mean);\n    }\n    mean\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<usize>` is not satisfied\n -->\
    \ /tmp/tmpolr_tyvt.rs:9:50\n  |\n9 |     let mut mean = numbers.iter().sum::<f64>()\
    \ / f64::from(numbers.len());\n  |                                           \
    \       ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n  |\n\
    \  = help: the following other types implement trait `From<T>`:\n            <f32\
    \ as From<i16>>\n            <f32 as From<i8>>\n            <f32 as From<u16>>\n\
    \            <f32 as From<u8>>\n            <f64 as From<f32>>\n            <f64\
    \ as From<i16>>\n            <f64 as From<i32>>\n            <f64 as From<i8>>\n\
    \          and 67 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    for n in numbers.iter() {\n        sum +=\
    \ std::f64::abs(n - numbers.iter().sum());\n    }\n    sum / numbers.len() as\
    \ f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::f64`\n  --> /tmp/tmpyqyrfzgr.rs:11:26\n\
    \   |\n11 |         sum += std::f64::abs(n - numbers.iter().sum());\n   |    \
    \                      ^^^ not found in `std::f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for num in numbers {\n        sum += num;\n \
    \   }\n    (sum / numbers).abs()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `Vec<f64>`\n  --> /tmp/tmp_wczrr49.rs:13:10\n\
    \   |\n13 |     (sum / numbers).abs()\n   |          ^ no implementation for `f64\
    \ / Vec<f64>`\n   |\n   = help: the trait `Div<Vec<f64>>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut delta: Vec<f64> = Vec::new();\n\n    for value in numbers {\n\
    \        let delta = value - number.mean();\n        delta.push(delta);\n    }\n\
    \n    let mut sum_of_deltas: f64 = 0.0;\n\n    for delta in delta {\n        sum_of_deltas\
    \ += delta;\n    }\n\n    sum_of_deltas / deltas.len()\n}\n\nfn main() {\n   \
    \ let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `number` in this scope\n  --> /tmp/tmphklqops4.rs:12:29\n\
    \   |\n12 |         let delta = value - number.mean();\n   |                 \
    \            ^^^^^^ help: a local variable with a similar name exists: `numbers`\n\
    \nerror[E0425]: cannot find value `deltas` in this scope\n  --> /tmp/tmphklqops4.rs:22:21\n\
    \   |\n22 |     sum_of_deltas / deltas.len()\n   |                     ^^^^^^\
    \ help: a local variable with a similar name exists: `delta`\n\nerror[E0599]:\
    \ no method named `push` found for type `f64` in the current scope\n  --> /tmp/tmphklqops4.rs:13:15\n\
    \   |\n13 |         delta.push(delta);\n   |               ^^^^ method not found\
    \ in `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| {\n            (x - numbers.iter().mean()).abs()\n\
    \        })\n        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp24_tx86w.rs:11:33\n   |\n11 |          \
    \   (x - numbers.iter().mean()).abs()\n   |                                 ^^^^\
    \ method not found in `std::slice::Iter<'_, f64>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0f64;\n    for n in numbers {\n        sum += n;\n  \
    \  }\n    sum / f64::from(numbers.len())\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<usize>` is not satisfied\n  -->\
    \ /tmp/tmpzhduu_4w.rs:13:11\n   |\n13 |     sum / f64::from(numbers.len())\n \
    \  |           ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .enumerate()\n        .map(|(i, x)|\
    \ (f64::abs(x - numbers[i]) / f64::abs(numbers[i])))\n        .sum()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.0`,\n right: `0.5`', /tmp/tmpsdl0rrus.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).sum()\n        .sqrt()\n        .sqrt()\n\
    \        .unwrap_or(1.0) // avoid overflow\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp_zlsjcsr.rs:9:37\n\
    \  |\n9 |     numbers.iter().map(|x| x.abs()).sum()\n  |                     \
    \                ^^^ cannot infer type for type parameter `S` declared on the\
    \ associated function `sum`\n  |\n  = note: type must be known at this point\n\
    help: consider specifying the type argument in the method call\n  |\n9 |     numbers.iter().map(|x|\
    \ x.abs()).sum::<S>()\n  |                                        +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.len() == 0 {\n        return 0.0\n    }\n    let mut sum:\
    \ f64 = 0.0\n    for i in numbers {\n        sum += i;\n    }\n    sum / numbers.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp6y97klkt.rs:12:27\n\
    \   |\n12 |     let mut sum: f64 = 0.0\n   |                           ^ help:\
    \ add `;` here\n13 |     for i in numbers {\n   |     --- unexpected token\n\n\
    error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp6y97klkt.rs:16:9\n\
    \   |\n16 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n\
    \    let mut delta: f64 = 0;\n\n    for n in numbers {\n        delta += powf((n\
    \ - mean), 2.0);\n    }\n\n    delta / numbers.len()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `powf` in this scope\n  --> /tmp/tmpxb8k4l42.rs:13:18\n\
    \   |\n13 |         delta += powf((n - mean), 2.0);\n   |                  ^^^^\
    \ not found in this scope\n\nwarning: unnecessary parentheses around function\
    \ argument\n  --> /tmp/tmpxb8k4l42.rs:13:23\n   |\n13 |         delta += powf((n\
    \ - mean), 2.0);\n   |                       ^        ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n13 -         delta += powf((n\
    \ - mean), 2.0);\n13 +         delta += powf(n - mean, 2.0);\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxb8k4l42.rs:10:26\n   |\n10 |     let mut delta:\
    \ f64 = 0;\n   |                    ---   ^\n   |                    |     |\n\
    \   |                    |     expected `f64`, found integer\n   |           \
    \         |     help: use a float literal: `0.0`\n   |                    expected\
    \ due to this\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpxb8k4l42.rs:16:11\n\
    \   |\n16 |     delta / numbers.len()\n   |           ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| n.abs()).sum::<f64>() / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpksavxm_a.rs:9:50\n\
    \  |\n9 |     numbers.iter().map(|n| n.abs()).sum::<f64>() / numbers.len()\n \
    \ |                                                  ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().fold(0, |mut sum, el| sum + el);\n    mean\
    \ as f64\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n   \
    \ assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&f64` to `{integer}`\n --> /tmp/tmp98bjzy3w.rs:9:57\n\
    \  |\n9 |     let mean = numbers.iter().fold(0, |mut sum, el| sum + el);\n  |\
    \                                                         ^ no implementation\
    \ for `{integer} + &f64`\n  |\n  = help: the trait `Add<&f64>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    let mut cnt: usize = 0;\n    for x in numbers\
    \ {\n        sum += x;\n        cnt += 1;\n    }\n    if cnt == 0 {\n        return\
    \ 0.0;\n    }\n    sum / cnt\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmptpq58v4c.rs:18:9\n\
    \   |\n18 |     sum / cnt\n   |         ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = numbers.iter().sum();\n    let mut deviations = Vec::with_capacity(numbers.len());\n\
    \    for n in numbers {\n        deviations.push((n - mean).abs());\n        mean\
    \ += n;\n    }\n    mean.sqrt()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.449489742783178`,\n right: `0.5`', /tmp/tmp2j2qaukq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::from(x.abs().mean()).unwrap()).sum() /\n\
    \        numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n --> /tmp/tmpjdpjz8sk.rs:9:46\n  |\n9 |     numbers.iter().map(|x| f64::from(x.abs().mean()).unwrap()).sum()\
    \ /\n  |                                              ^^^^ method not found in\
    \ `f64`\n\nerror[E0599]: no method named `unwrap` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpjdpjz8sk.rs:9:54\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::from(x.abs().mean()).unwrap()).sum() /\n  |                           \
    \                           ^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .enumerate()\n        .map(|(idx, number)| {\n\
    \            if idx == 0 {\n                // skip first element, which is the\
    \ mean\n                number\n            } else {\n                // subtract\
    \ each element with the mean and calculate the difference\n                (number\
    \ - numbers[idx - 1]).abs()\n            }\n        })\n        .sum()\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmp7ppsxe5c.rs:17:17\n\
    \   |\n12 | /             if idx == 0 {\n13 | |                 // skip first\
    \ element, which is the mean\n14 | |                 number\n   | |          \
    \       ------ expected because of this\n15 | |             } else {\n16 | | \
    \                // subtract each element with the mean and calculate the difference\n\
    17 | |                 (number - numbers[idx - 1]).abs()\n   | |             \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&f64`, found `f64`\n18 | |  \
    \           }\n   | |_____________- `if` and `else` have incompatible types\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut deviation: f64 = 0.0;\n\n    for number in numbers {\n      \
    \  deviation += f64::abs(number - numbers.iter().average().unwrap());\n    }\n\
    \n    deviation / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `average` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp_kheg7sk.rs:12:55\n   |\n12 |         deviation\
    \ += f64::abs(number - numbers.iter().average().unwrap());\n   |             \
    \                                          ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ f64>`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp_kheg7sk.rs:15:15\n\
    \   |\n15 |     deviation / numbers.len()\n   |               ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .cloned()\n        .enumerate()\n \
    \       .map(|(i, number)| {\n            (i, f64::abs(number - numbers.iter().sum::<f64>()\
    \ / numbers.len()))\n        })\n        .filter(|&(_, x)| x > 0.0)\n        .map(|(_,\
    \ x)| x)\n        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpx4l96rxy.rs:14:63\n\
    \   |\n14 |             (i, f64::abs(number - numbers.iter().sum::<f64>() / numbers.len()))\n\
    \   |                                                               ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Average Absolute Deviation = sum((x - mean)^2) / (n-1)\n    numbers.iter().map(|x|\
    \ {\n        (x - numbers.iter().reduce(|sum, x| sum + x).unwrap()) ** 2\n   \
    \ }).sum().unwrap() / numbers.len() as f64\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph3d1l0g3.rs:11:45\n   |\n\
    11 |         (x - numbers.iter().reduce(|sum, x| sum + x).unwrap()) ** 2\n   |\
    \                                             ^^^^^^^\n   |                  \
    \                           |\n   |                                          \
    \   expected `&f64`, found `f64`\n   |                                       \
    \      help: consider borrowing here: `&(sum + x)`\n\nerror[E0614]: type `{integer}`\
    \ cannot be dereferenced\n  --> /tmp/tmph3d1l0g3.rs:11:65\n   |\n11 |        \
    \ (x - numbers.iter().reduce(|sum, x| sum + x).unwrap()) ** 2\n   |          \
    \                                                       ^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers\n        .iter()\n        .map(|x| f64::abs(x - numbers.iter().sum::<f64>()\
    \ / numbers.len()))\n        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp5tpfww1i.rs:11:59\n\
    \   |\n11 |         .map(|x| f64::abs(x - numbers.iter().sum::<f64>() / numbers.len()))\n\
    \   |                                                           ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .map(|x| x.abs().mean())\n        .sum()\n}\n\
    \nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp3t0jzmp3.rs:10:26\n   |\n10 |         .map(|x| x.abs().mean())\n\
    \   |                          ^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum = 0.0;\n    for x in numbers {\n        let mut abs = x.abs();\n\
    \        if abs > 0.0 {\n            sum += abs;\n        }\n    }\n    sum /\
    \ numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpzj165xex.rs:16:9\n\
    \   |\n16 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for n in numbers {\n        mean += n;\n\
    \    }\n    mean /= numbers.len();\n    let mut abs_diffs: Vec<f64> = Vec::new();\n\
    \    for n in numbers {\n        abs_diffs.push(n.abs());\n    }\n    let mut\
    \ means: Vec<f64> = Vec::new();\n    for n in numbers {\n        let mut sum:\
    \ f64 = 0.0;\n        for abs in abs_diffs {\n            sum += abs;\n      \
    \  }\n        means.push(sum / abs_diffs.len());\n    }\n    means.iter().fold1(f64::add)\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide-assign `f64` by `usize`\n  --> /tmp/tmpy9rje4_u.rs:13:10\n\
    \   |\n13 |     mean /= numbers.len();\n   |          ^^ no implementation for\
    \ `f64 /= usize`\n   |\n   = help: the trait `DivAssign<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpy9rje4_u.rs:24:24\n\
    \   |\n24 |         means.push(sum / abs_diffs.len());\n   |                 \
    \       ^ no implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0599]: no method named `fold1` found for struct\
    \ `std::slice::Iter` in the current scope\n  --> /tmp/tmpy9rje4_u.rs:26:18\n \
    \  |\n26 |     means.iter().fold1(f64::add)\n   |                  ^^^^^ method\
    \ not found in `std::slice::Iter<'_, f64>`\n\nerror[E0599]: no function or associated\
    \ item named `add` found for type `f64` in the current scope\n  --> /tmp/tmpy9rje4_u.rs:26:29\n\
    \   |\n26 |     means.iter().fold1(f64::add)\n   |                           \
    \  ^^^ function or associated item not found in `f64`\n   |\n   = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use\
    \ std::ops::Add;\n   |\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanati"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    if numbers.is_empty() {\n        0.0\n    } else {\n        let mut mean\
    \ = numbers.iter().sum::<f64>() / numbers.len();\n        for n in numbers {\n\
    \            mean -= n;\n        }\n        mean / numbers.len()\n    }\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp8d8xw2f4.rs:12:52\n\
    \   |\n12 |         let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                    ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| x.abs()).sum::<f64>() / numbers.len() as f64\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.5`,\n right: `0.5`', /tmp/tmp7bopk4bq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_val = numbers[0];\n    for i in numbers.iter().skip(1) {\n\
    \        let mut current = i;\n        for j in (0..i).rev() {\n            current\
    \ -= j;\n        }\n        mean_val = current + mean_val / 2;\n    }\n    return\
    \ std::f64::sqrt(f64::mean((numbers - mean_val).abs()));\n}\n\nfn main() {\n \
    \   let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in module `std::f64`\n  --> /tmp/tmpd7_q1kp9.rs:17:22\n\
    \   |\n17 |     return std::f64::sqrt(f64::mean((numbers - mean_val).abs()));\n\
    \   |                      ^^^^ not found in `std::f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd7_q1kp9.rs:12:22\n   |\n12 |         for j in (0..i).rev()\
    \ {\n   |                      ^ expected integer, found `&f64`\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `&f64`\n  --> /tmp/tmpd7_q1kp9.rs:13:13\n\
    \   |\n13 |             current -= j;\n   |             -------^^^^^\n   |   \
    \          |\n   |             cannot use `-=` on type `&f64`\n\nerror[E0277]:\
    \ cannot divide `f64` by `{integer}`\n  --> /tmp/tmpd7_q1kp9.rs:15:39\n   |\n\
    15 |         mean_val = current + mean_val / 2;\n   |                        \
    \               ^ no implementation for `f64 / {integer}`\n   |\n   = help: the\
    \ trait `Div<{integer}>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n15 |         mean_val\
    \ = current + mean_val / 2.0;\n   |                                          ++\n\
    \nerror[E0599]: no function or associated item named `mean` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpd7_q1kp9.rs:17:32\n   |\n17 |     return\
    \ std::f64::sqrt(f64::mean((numbers - mean_val).abs()));\n   |               \
    \                 ^^^^ function or associated item not found in `f64`\n\nerror[E0369]:\
    \ cannot subtract `f64` from `Vec<f64>`\n  --> /tmp/tmpd7_q1kp9.rs:17:46\n   |\n\
    17 |     return std::f64::sqrt(f64::mean((numbers - mean_val).abs()));\n   | \
    \                                     ------- ^ -------- f64\n   |           \
    \                           |\n   |"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut m = 0.0;\n    for x in numbers {\n        m += x;\n    }\n  \
    \  m / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpfnaps_67.rs:13:7\n\
    \   |\n13 |     m / numbers.len()\n   |       ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut average: f64 = 0.0;\n    for n in numbers {\n        average\
    \ += n;\n    }\n    average /= numbers.size;\n\n    let mut variance = 0.0;\n\
    \    for n in numbers {\n        let n = n * n - n * average + average * average;\n\
    \        variance += n;\n    }\n    variance /= numbers.size;\n\n    variance\
    \ / math.pow(numbers.len() as f64, 2)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `math` in this scope\n  --> /tmp/tmpyxbazr9z.rs:22:16\n\
    \   |\n22 |     variance / math.pow(numbers.len() as f64, 2)\n   |           \
    \     ^^^^ not found in this scope\n\nerror[E0609]: no field `size` on type `Vec<f64>`\n\
    \  --> /tmp/tmpyxbazr9z.rs:13:24\n   |\n13 |     average /= numbers.size;\n  \
    \ |                        ^^^^ unknown field\n\nerror[E0609]: no field `size`\
    \ on type `Vec<f64>`\n  --> /tmp/tmpyxbazr9z.rs:20:25\n   |\n20 |     variance\
    \ /= numbers.size;\n   |                         ^^^^ unknown field\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0609.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().fold(0.0, |mut sum, x| sum + x);\n    mean\
    \ / (numbers.len() as f64) - 1.0\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.5`,\n right: `1.0`', /tmp/tmpha2sy7tj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // First find the mean\n    let mut sum = 0.;\n    for i in numbers.iter()\
    \ {\n        sum += i;\n    }\n    let mean = sum / numbers.len();\n\n    // Then\
    \ compute the MAD\n    let mad = numbers - mean;\n    let mad: Vec<f64> = mad.iter().map(|&x|\
    \ (x - mean)).collect();\n    mad.iter().map(|&x| x.abs()).sum() / mad.len()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpa43oitly.rs:14:20\n\
    \   |\n14 |     let mean = sum / numbers.len();\n   |                    ^ no\
    \ implementation for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is\
    \ not implemented for `f64`\n   = help: the following other types implement trait\
    \ `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n\
    \             <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n  \
    \           <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n      \
    \       <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n        \
    \   and 54 others\n\nerror[E0369]: cannot subtract `_` from `Vec<f64>`\n  -->\
    \ /tmp/tmpa43oitly.rs:17:23\n   |\n17 |     let mad = numbers - mean;\n   |  \
    \             ------- ^ ---- _\n   |               |\n   |               Vec<f64>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter()\n        .filter(|number| number.is_finite())\n      \
    \  .sum()\n        .div(numbers.len() as f64)\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpo1z2j4ht.rs:11:10\n\
    \   |\n11 |         .sum()\n   |          ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n   |\n   = note: type must be\
    \ known at this point\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n11 |         .sum::<S>()\n   |             +++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut result = 0.0;\n    for n in numbers {\n        let mut abs =\
    \ n.abs();\n        result += abs;\n    }\n    result / numbers.len()\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp3xkhou5m.rs:14:12\n\
    \   |\n14 |     result / numbers.len()\n   |            ^ no implementation for\
    \ `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n  \
    \           <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n      \
    \       <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n        \
    \     <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n            \
    \ <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().zip(numbers.iter().cloned()).fold(0.0, |sum, (x, _)| {\n\
    \        sum + f64::abs(x - f64::mean(&numbers))\n    }) / numbers.len()\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `mean` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpjfztva9e.rs:10:33\n   |\n10 |    \
    \     sum + f64::abs(x - f64::mean(&numbers))\n   |                          \
    \       ^^^^ function or associated item not found in `f64`\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpjfztva9e.rs:11:8\n   |\n11 |     }) /\
    \ numbers.len()\n   |        ^ no implementation for `f64 / usize`\n   |\n   =\
    \ help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum: f64 = 0.0;\n    for value in numbers {\n        sum += value.abs();\n\
    \    }\n    sum / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpsypugk59.rs:13:9\n\
    \   |\n13 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // First calculate the mean\n    let mut avg = f64::from(numbers.iter().sum::<f64>()\
    \ / numbers.len());\n    for n in numbers {\n        avg -= n;\n    }\n    avg\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp_c1s5f73.rs:10:57\n\
    \   |\n10 |     let mut avg = f64::from(numbers.iter().sum::<f64>() / numbers.len());\n\
    \   |                                                         ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    let mut total = 0.0;\n    for n in numbers.iter()\
    \ {\n        total += n;\n        mean += n / total;\n    }\n    mean\n}\n\nfn\
    \ main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.6666666666666665`,\n right: `0.5`', /tmp/tmp64jeqpfv.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mu = 0f64;\n    for i in numbers {\n        mu += i;\n    }\n\
    \    let mu = mu / numbers.len();\n    numbers - mu\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpf73w81iv.rs:13:17\n\
    \   |\n13 |     let mu = mu / numbers.len();\n   |                 ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0369]: cannot subtract `_` from `Vec<f64>`\n  --> /tmp/tmpf73w81iv.rs:14:13\n\
    \   |\n14 |     numbers - mu\n   |     ------- ^ -- _\n   |     |\n   |     Vec<f64>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut deviation = 0.0;\n    for n in numbers {\n        deviation += f64::abs(n\
    \ - mean);\n        mean = n;\n    }\n    deviation / numbers.len()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpvtc14mnn.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot\
    \ divide `f64` by `usize`\n  --> /tmp/tmpvtc14mnn.rs:15:15\n   |\n15 |     deviation\
    \ / numbers.len()\n   |               ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut deviation = 0.0;\n    for i in numbers.iter() {\n        deviation += f64::abs(i\
    \ - mean);\n        mean = i;\n    }\n    deviation.sqrt().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpwrtj69qj.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0599]: no method\
    \ named `unwrap` found for type `f64` in the current scope\n  --> /tmp/tmpwrtj69qj.rs:15:22\n\
    \   |\n15 |     deviation.sqrt().unwrap()\n   |                      ^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mu: f64 = 0.0;\n    for x in numbers {\n        mu += x;\n  \
    \  }\n    mu / (numbers.len() as f64)\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpft3l4v77.rs:13:11\n\
    \    |\n8   | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n    |  \
    \                          ------- move occurs because `numbers` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n9   |     let mut mu: f64 = 0.0;\n\
    10  |     for x in numbers {\n    |              ------- `numbers` moved due to\
    \ this implicit call to `.into_iter()`\n...\n13  |     mu / (numbers.len() as\
    \ f64)\n    |           ^^^^^^^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<f64>`'s content to avoid moving\
    \ into the `for` loop\n    |\n10  |     for x in &numbers {\n    |           \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum_of_squares = 0;\n    for n in numbers {\n        sum_of_squares\
    \ += n * n;\n    }\n    sum_of_squares / numbers.len()\n}\n\nfn main() {\n   \
    \ let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpygr0sx2k.rs:11:24\n\
    \   |\n11 |         sum_of_squares += n * n;\n   |                        ^^ no\
    \ implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpygr0sx2k.rs:13:5\n\
    \   |\n8  | fn mean_absolute_deviation(numbers: Vec<f64>) -> f64 {\n   |     \
    \                                             --- expected `f64` because of return\
    \ type\n...\n13 |     sum_of_squares / numbers.len()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n13 |     (sum_of_squares / numbers.len()) as f64\n   |     +          \
    \                    ++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|x| f64::abs(x - numbers.mean()).unwrap()).sum::<f64>()\
    \ / f64::from(numbers.len())\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for struct `Vec<f64>` in the\
    \ current scope\n --> /tmp/tmpggf41ylr.rs:9:49\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - numbers.mean()).unwrap()).sum::<f64>() / f64::from(numbers.len())\n\
    \  |                                                 ^^^^ method not found in\
    \ `Vec<f64>`\n\nerror[E0599]: no method named `unwrap` found for type `f64` in\
    \ the current scope\n --> /tmp/tmpggf41ylr.rs:9:57\n  |\n9 |     numbers.iter().map(|x|\
    \ f64::abs(x - numbers.mean()).unwrap()).sum::<f64>() / f64::from(numbers.len())\n\
    \  |                                                         ^^^^^^ method not\
    \ found in `f64`\n\nerror[E0277]: the trait bound `f64: From<usize>` is not satisfied\n\
    \ --> /tmp/tmpggf41ylr.rs:9:82\n  |\n9 |     numbers.iter().map(|x| f64::abs(x\
    \ - numbers.mean()).unwrap()).sum::<f64>() / f64::from(numbers.len())\n  |   \
    \                                                                            \
    \   ^^^^^^^^^ the trait `From<usize>` is not implemented for `f64`\n  |\n  = help:\
    \ the following other types implement trait `From<T>`:\n            <f32 as From<i16>>\n\
    \            <f32 as From<i8>>\n            <f32 as From<u16>>\n            <f32\
    \ as From<u8>>\n            <f64 as From<f32>>\n            <f64 as From<i16>>\n\
    \            <f64 as From<i32>>\n            <f64 as From<i8>>\n          and\
    \ 67 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mad = 0.0;\n\n    for i in 0..numbers.len() {\n        let diff\
    \ = numbers[i] - numbers.iter().sum::<f64>() / numbers.len();\n        mad +=\
    \ diff * diff;\n    }\n\n    mad\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmp4l6vqkss.rs:12:61\n\
    \   |\n12 |         let diff = numbers[i] - numbers.iter().sum::<f64>() / numbers.len();\n\
    \   |                                                             ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // Mean absolute deviation is (x - x_mean)\n    // x is a vector of input\
    \ numbers\n    let mut mean_num = 0;\n    let mut abs_num = 0;\n\n    for n in\
    \ numbers {\n        mean_num += n;\n        abs_num += n * n;\n    }\n\n    let\
    \ mean_num = mean_num / numbers.size;\n    let abs_num = abs_num / numbers.size;\n\
    \n    (abs_num - mean_num).abs()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp433gd4m1.rs:15:18\n\
    \   |\n15 |         mean_num += n;\n   |                  ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp433gd4m1.rs:16:17\n\
    \   |\n16 |         abs_num += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0609]: no field `size` on type `Vec<f64>`\n  --> /tmp/tmp433gd4m1.rs:19:39\n\
    \   |\n19 |     let mean_num = mean_num / numbers.size;\n   |                \
    \                       ^^^^ unknown field\n\nerror[E0609]: no field `size` on\
    \ type `Vec<f64>`\n  --> /tmp/tmp433gd4m1.rs:20:37\n   |\n20 |     let abs_num\
    \ = abs_num / numbers.size;\n   |                                     ^^^^ unknown\
    \ field\n\nerror[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp433gd4m1.rs:22:26\n   |\n22 |     (abs_num - mean_num).abs()\n\
    \   |                          ^^^\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0609, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut deviations = vec![];\n    for n in numbers {\n        deviations.push((n\
    \ - mean).abs());\n    }\n    let mut md = deviations.iter().sum::<f64>() / deviations.len();\n\
    \    md = f64::min(md, 1.0); // avoid division by zero\n    mean\n        .as_float()\n\
    \        .powf((2.0 * f64::log(md.as_float()) / f64::log(2.0)))\n        .expect(\"\
    Error calculating Mean Absolute Deviation\")\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpf8wuwj0b.rs:18:15\n\
    \   |\n18 |         .powf((2.0 * f64::log(md.as_float()) / f64::log(2.0)))\n \
    \  |               ^                                             ^\n   |\n   =\
    \ note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n18 -         .powf((2.0 * f64::log(md.as_float()) / f64::log(2.0)))\n18\
    \ +         .powf(2.0 * f64::log(md.as_float()) / f64::log(2.0))\n   | \n\nerror[E0277]:\
    \ cannot divide `f64` by `usize`\n --> /tmp/tmpf8wuwj0b.rs:9:48\n  |\n9 |    \
    \ let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |           \
    \                                     ^ no implementation for `f64 / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpf8wuwj0b.rs:14:49\n   |\n14 |     let mut md\
    \ = deviations.iter().sum::<f64>() / deviations.len();\n   |                 \
    \                                ^ no implementation for `f64 / usize`\n   |\n\
    \   = help: the trait `Div<usize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Div<Rhs>`:\n             <&'a f32 as\
    \ Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n\
    \             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n    \
    \         <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n          \
    \   <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0599]: no method\
    \ named `as_float` found for type `f64` in the current scope\n  --> /tmp/tmpf8wuwj0b.rs:18:34\n\
    \   |\n18 |         .powf((2.0 * f64::log(md.as_float()) / f64::log(2.0)))\n \
    \  |                                  ^^^^^^"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // https://en.wikipedia.org/wiki/Mean_absolute_difference\n    numbers.iter()\n\
    \        .map(|number| {\n            number.abs().mean().sqrt()\n        })\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `mean` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpw5zmx7wf.rs:12:26\n   |\n12 |             number.abs().mean().sqrt()\n\
    \   |                          ^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean_absolute_deviation = 0.0;\n\n    for x in numbers {\n  \
    \      mean_absolute_deviation += f64::abs(x - mean_of_vector(numbers));\n   \
    \ }\n\n    mean_absolute_deviation / numbers.len()\n}\n\nfn main() {\n    let\
    \ candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]),\
    \ 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `mean_of_vector` in this scope\n  -->\
    \ /tmp/tmpa3kj9hr8.rs:12:49\n   |\n12 |         mean_absolute_deviation += f64::abs(x\
    \ - mean_of_vector(numbers));\n   |                                          \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: cannot divide\
    \ `f64` by `usize`\n  --> /tmp/tmpa3kj9hr8.rs:15:29\n   |\n15 |     mean_absolute_deviation\
    \ / numbers.len()\n   |                             ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = f64::NINFINITY;\n    let mut deviation = f64::NINFINITY;\n\
    \    for n in numbers {\n        mean += n;\n        deviation += n - mean;\n\
    \    }\n    mean / numbers.len()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no associated item named `NINFINITY` found for type `f64`\
    \ in the current scope\n --> /tmp/tmpg8bq1o8u.rs:9:25\n  |\n9 |     let mut mean\
    \ = f64::NINFINITY;\n  |                         ^^^^^^^^^\n  |              \
    \           |\n  |                         associated item not found in `f64`\n\
    \  |                         help: there is an associated constant with a similar\
    \ name: `INFINITY`\n\nerror[E0599]: no associated item named `NINFINITY` found\
    \ for type `f64` in the current scope\n  --> /tmp/tmpg8bq1o8u.rs:10:30\n   |\n\
    10 |     let mut deviation = f64::NINFINITY;\n   |                           \
    \   ^^^^^^^^^\n   |                              |\n   |                     \
    \         associated item not found in `f64`\n   |                           \
    \   help: there is an associated constant with a similar name: `INFINITY`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    // If there are no numbers, return NaN\n    if numbers.is_empty() {\n\
    \        return NAN;\n    }\n    let mut sum_of_squares = 0.0;\n    for number\
    \ in numbers {\n        sum_of_squares += number * number;\n    }\n    (numbers.len()\
    \ as f64 - sum_of_squares) / numbers.len()\n}\n\nfn main() {\n    let candidate\
    \ = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NAN` in this scope\n  --> /tmp/tmprw_n7fiq.rs:11:16\n\
    \   |\n11 |         return NAN;\n   |                ^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::f32::NAN;\n\
    \   |\n1  | use std::f64::NAN;\n   |\n\nerror[E0277]: cannot divide `f64` by `usize`\n\
    \  --> /tmp/tmprw_n7fiq.rs:17:45\n   |\n17 |     (numbers.len() as f64 - sum_of_squares)\
    \ / numbers.len()\n   |                                             ^ no implementation\
    \ for `f64 / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut sum_f64: f64 = 0.0;\n    for n in numbers.iter() {\n        sum_f64\
    \ += n * n;\n    }\n    let mut mean_f64: f64 = 0.0;\n    mean_f64 = numbers.iter().sum();\n\
    \    mean_f64 / numbers.size() as f64\n        - sum_f64 / numbers.len() as f64\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<f64>` in the\
    \ current scope\n  --> /tmp/tmp_s47vs4n.rs:15:24\n   |\n15 |     mean_f64 / numbers.size()\
    \ as f64\n   |                        ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean: f64 = 0.0;\n    for value in numbers {\n        mean +=\
    \ value;\n    }\n    mean.into()\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.0`,\n right: `0.5`', /tmp/tmplj01edlq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mean = numbers.iter().sum::<f64>() / numbers.len();\n    let mut\
    \ distance = 0.0f64;\n    for (i, x) in numbers.iter().enumerate() {\n       \
    \ distance += f64::abs(x - mean);\n    }\n    distance\n}\n\nfn main() {\n   \
    \ let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpn7lxpavb.rs:9:44\n\
    \  |\n9 |     let mean = numbers.iter().sum::<f64>() / numbers.len();\n  |   \
    \                                         ^ no implementation for `f64 / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n  = help:\
    \ the following other types implement trait `Div<Rhs>`:\n            <&'a f32\
    \ as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n\
    \            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n      \
    \      <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a\
    \ isize as Div<isize>>\n          and 54 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let\
    \ mut deviations = Vec::new();\n    for n in numbers {\n        let diff = n -\
    \ mean;\n        deviations.push(diff);\n        mean += diff;\n    }\n    mean\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpwx46js7o.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 101
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = 0.0;\n    for n in numbers {\n        mean += n;\n   \
    \ }\n    mean\n}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]),\
    \ 1.2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3.0`,\n right: `0.5`', /tmp/tmpk09bh1xy.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    numbers.iter_mut().for_each(|x|\
    \ {\n        *x -= mean;\n        mean *= x;\n    });\n    mean.sqrt()\n}\n\n\
    fn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n --> /tmp/tmpba996q7w.rs:9:48\n\
    \  |\n9 |     let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n  |\
    \                                                ^ no implementation for `f64\
    \ / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    assert!(numbers.len() > 1);\n    let mut sum = 0.0;\n    for i in numbers\
    \ {\n        sum += i;\n    }\n    sum / numbers.len()\n}\n\nfn main() {\n   \
    \ let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpc23903fo.rs:14:9\n\
    \   |\n14 |     sum / numbers.len()\n   |         ^ no implementation for `f64\
    \ / usize`\n   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
    \ {\n    numbers.iter().map(|n| n.abs()).sum()\n        .map(|x| x / numbers.len()).sqrt()\n\
    }\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n  \
    \  assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp2ut_bte7.rs:9:37\n\
    \  |\n9 |     numbers.iter().map(|n| n.abs()).sum()\n  |                     \
    \                ^^^ cannot infer type for type parameter `S` declared on the\
    \ associated function `sum`\n  |\n  = note: type must be known at this point\n\
    help: consider specifying the type argument in the method call\n  |\n9 |     numbers.iter().map(|n|\
    \ n.abs()).sum::<S>()\n  |                                        +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976123
