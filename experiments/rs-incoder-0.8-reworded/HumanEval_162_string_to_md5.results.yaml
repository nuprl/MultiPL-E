language: rs
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    md5::digest(text.as_bytes()).ok()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpg2iueen9.rs:9:5\n  |\n9 |     md5::digest(text.as_bytes()).ok()\n\
    \  |     ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5er = MD5::new();\n    let bytes\
    \ = text.as_bytes();\n    md5er.write_all(bytes).unwrap();\n    let mut md5: Vec<u8>\
    \ = md5er.result().unwrap();\n    md5.truncate(0);\n    Some(String::from_utf8_lossy(&md5).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp9s6iyv0a.rs:6:21\n\
    \  |\n6 |     let mut md5er = MD5::new();\n  |                     ^^^ use of\
    \ undeclared type `MD5`\n\nerror[E0599]: no method named `unwrap` found for enum\
    \ `Cow<'_, str>` in the current scope\n  --> /tmp/tmp9s6iyv0a.rs:11:40\n   |\n\
    11 |     Some(String::from_utf8_lossy(&md5).unwrap())\n   |                  \
    \                      ^^^^^^ method not found in `Cow<'_, str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        Some(md5_string(&text))\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_string` in this scope\n --> /tmp/tmptcxohkis.rs:7:14\n\
    \  |\n7 |         Some(md5_string(&text))\n  |              ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let digest = digest::digest(digest::MD5(),\
    \ text.as_bytes()).to_hex();\n    Some(text.to_string().append(&digest))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2j4us1eu.rs:6:18\n  |\n6 |     let digest = digest::digest(digest::MD5(),\
    \ text.as_bytes()).to_hex();\n  |                  ^^^^^^ use of undeclared crate\
    \ or module `digest`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `digest`\n --> /tmp/tmp2j4us1eu.rs:6:33\n  |\n6 |     let digest =\
    \ digest::digest(digest::MD5(), text.as_bytes()).to_hex();\n  |              \
    \                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n -->\
    \ /tmp/tmp2j4us1eu.rs:7:27\n  |\n7 |     Some(text.to_string().append(&digest))\n\
    \  |                           ^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    let mut state = HashState::new(&mut\
    \ md5);\n    state.process(text.as_bytes());\n    Some(md5)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashState`\n \
    \ --> /tmp/tmpgyzk4noi.rs:10:21\n   |\n10 |     let mut state = HashState::new(&mut\
    \ md5);\n   |                     ^^^^^^^^^ use of undeclared type `HashState`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.hexdigest())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpowhbxpiz.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut hash = md5_default::Md5::new();\n    hash.input(text.as_bytes());\n\
    \n    Some(hash.hex().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_default`\n\
    \  --> /tmp/tmp94ei1l_r.rs:10:20\n   |\n10 |     let mut hash = md5_default::Md5::new();\n\
    \   |                    ^^^^^^^^^^^ use of undeclared crate or module `md5_default`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpfx0onrzh.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        \"\" => None,\n     \
    \   _ => hash::Md5::new(text).ok()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hash`\n\
    \ --> /tmp/tmp2ypufi08.rs:8:14\n  |\n8 |         _ => hash::Md5::new(text).ok()\n\
    \  |              ^^^^ use of undeclared crate or module `hash`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2ypufi08.rs:7:9\n  |\n6 |     match text {\n\
    \  |           ---- this expression has type `String`\n7 |         \"\" => None,\n\
    \  |         ^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = md5_sha1::Sha5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.finish();\n\n    let mut digest = digest::Digest::sha1_digest(&mut md5);\n\
    \    digest = digest.bytes_less_than(16);\n    Some(digest.to_hex().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_sha1`\n\
    \  --> /tmp/tmp2gbyrdip.rs:10:19\n   |\n10 |     let mut md5 = md5_sha1::Sha5::new();\n\
    \   |                   ^^^^^^^^ use of undeclared crate or module `md5_sha1`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp2gbyrdip.rs:14:22\n   |\n14 |     let mut digest = digest::Digest::sha1_digest(&mut\
    \ md5);\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    String::from_utf8(text).ok().and_then(|s| {\n\
    \        md5_hash(&s).ok()\n    })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_hash` in this scope\n --> /tmp/tmp_c6uzrjq.rs:7:9\n\
    \  |\n7 |         md5_hash(&s).ok()\n  |         ^^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp_c6uzrjq.rs:6:23\n  |\n6 |    \
    \ String::from_utf8(text).ok().and_then(|s| {\n  |                       ^^^^\
    \ expected struct `Vec`, found struct `String`\n  |\n  = note: expected struct\
    \ `Vec<u8>`\n             found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    fn get_md5_of_bytes(b: &[u8]) -> String {\n\
    \        let mut md5 = digest::Digest::md5();\n        md5.update(&b);\n     \
    \   md5.finalize()\n    }\n\n    if text.len() == 0 {\n        None\n    } else\
    \ {\n        let b = text.as_bytes();\n        Some(get_md5_of_bytes(b))\n   \
    \ }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_dvnm3g_.rs:7:23\n  |\n7 |         let mut md5 = digest::Digest::md5();\n\
    \  |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        let mut md5\
    \ = digest::MD5::new();\n        md5.update(&text);\n        md5.finish();\n \
    \       Some(String::from_utf8(md5.result()).unwrap())\n    } else {\n       \
    \ None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp2vq16_5q.rs:7:23\n  |\n7 |         let mut md5 = digest::MD5::new();\n\
    \  |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Ok(match text {\n        \"\" => None,\n  \
    \      str => Digest::new(Md5).digest(str.as_bytes()).clone(),\n    })\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpx2yndshd.rs:8:16\n  |\n8 |         str => Digest::new(Md5).digest(str.as_bytes()).clone(),\n\
    \  |                ^^^^^^ use of undeclared type `Digest`\n\nerror[E0425]: cannot\
    \ find value `Md5` in this scope\n --> /tmp/tmpx2yndshd.rs:8:28\n  |\n8 |    \
    \     str => Digest::new(Md5).digest(str.as_bytes()).clone(),\n  |           \
    \                 ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpx2yndshd.rs:7:9\n  |\n6 |     Ok(match text {\n  |             \
    \ ---- this expression has type `String`\n7 |         \"\" => None,\n  |     \
    \    ^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpx2yndshd.rs:6:5\n  |\n5 |   fn string_to_md5(text: String) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n6 | /     Ok(match text {\n7 | |         \"\" => None,\n\
    8 | |         str => Digest::new(Md5).digest(str.as_bytes()).clone(),\n9 | | \
    \    })\n  | |______^ expected enum `Option`, found enum `Result`\n  |\n  = note:\
    \ expected enum `Option<String>`\n             found enum `Result<_, _>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => Some(md5(&text.as_bytes()).unwrap()),\n    }\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmph9jaz9yn.rs:8:19\n\
    \  |\n8 |         _ => Some(md5(&text.as_bytes()).unwrap()),\n  |            \
    \       ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    debug_assert!(!text.is_empty());\n    let mut\
    \ md5_digest = MD5::new();\n    md5_digest.update(&text).unwrap();\n    md5_digest.result()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp76tma9ft.rs:7:26\n\
    \  |\n7 |     let mut md5_digest = MD5::new();\n  |                          ^^^\
    \ use of undeclared type `MD5`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    // Taken from http://stackoverflow.com/a/3268168/15677\n    use\
    \ std::digest::Digest;\n    use std::str::FromStr;\n\n    let mut digest = Digest::new(\"\
    md5\");\n    let mut buf = Vec::new();\n    buf.extend_from_slice(text.as_bytes());\n\
    \n    digest.update(&buf).unwrap();\n    digest.digest().to_hex()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::digest`\n  --> /tmp/tmp1m9hqs8m.rs:11:14\n\
    \   |\n11 |     use std::digest::Digest;\n   |              ^^^^^^ could not find\
    \ `digest` in `std`\n\nwarning: unused import: `std::str::FromStr`\n  --> /tmp/tmp1m9hqs8m.rs:12:9\n\
    \   |\n12 |     use std::str::FromStr;\n   |         ^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&hex::encode(digest(text)));\n\
    \    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \ --> /tmp/tmpxt1mnz1f.rs:7:19\n  |\n7 |     md5.push_str(&hex::encode(digest(text)));\n\
    \  |                   ^^^ use of undeclared crate or module `hex`\n\nerror[E0425]:\
    \ cannot find function `digest` in this scope\n --> /tmp/tmpxt1mnz1f.rs:7:31\n\
    \  |\n7 |     md5.push_str(&hex::encode(digest(text)));\n  |                 \
    \              ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpxt1mnz1f.rs:8:5\n  |\n5 | fn string_to_md5(text: String) -> Option<String>\
    \ {\n  |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n8 |     md5.to_owned()\n  |     ^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `String`\n  |\n  = note: expected enum\
    \ `Option<String>`\n           found struct `String`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n8 |     Some(md5.to_owned())\n  |     +++++              +\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    crypto::digest(\n        ALGORITHM_NAME,\n\
    \        text.as_bytes().as_ptr() as *const u8,\n        text.len() as u64,\n\
    \    )\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n\
    \ --> /tmp/tmplpoochxo.rs:6:5\n  |\n6 |     crypto::digest(\n  |     ^^^^^^ use\
    \ of undeclared crate or module `crypto`\n\nerror[E0425]: cannot find value `ALGORITHM_NAME`\
    \ in this scope\n --> /tmp/tmplpoochxo.rs:7:9\n  |\n7 |         ALGORITHM_NAME,\n\
    \  |         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut hash = text.as_bytes().to_vec();\n    hash.resize(32, 0);\n\
    \    let hash = digest::digest(hash.as_slice());\n    Some(String::from_utf8(hash).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp4kwg6znx.rs:12:16\n   |\n12 |     let hash = digest::digest(hash.as_slice());\n\
    \   |                ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hash = digest::digest::MD5::new();\n\
    \    hash.input(text.as_bytes());\n\n    if let Ok(digest) = hash {\n        let\
    \ mut digester = digest::digest::StringDigest::new();\n        digester.input(digest);\n\
    \        let output = digester.output();\n        Some(output.as_bytes())\n  \
    \  } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwtegjyk3.rs:6:20\n  |\n6 |     let mut hash = digest::digest::MD5::new();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpwtegjyk3.rs:10:28\n   |\n10 |         let mut digester = digest::digest::StringDigest::new();\n\
    \   |                            ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpfx0onrzh.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.write_fmt(|s| {\n        md5.extend(s);\n\
    \    });\n    for c in text.chars() {\n        md5.push(hex::encode(c.to_digit(16).unwrap()));\n\
    \    }\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpjueojhuo.rs:14:18\n   |\n14 |         md5.push(hex::encode(c.to_digit(16).unwrap()));\n\
    \   |                  ^^^ use of undeclared crate or module `hex`\n\nerror[E0599]:\
    \ no method named `write_fmt` found for struct `String` in the current scope\n\
    \   --> /tmp/tmpjueojhuo.rs:10:9\n    |\n10  |     md5.write_fmt(|s| {\n    |\
    \         ^^^^^^^^^ method not found in `String`\n    |\n    = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::fmt::Write;\n    |\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0433, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        let mut ctx\
    \ = md5_ctx();\n        ctx.update(&text.as_bytes());\n        ctx.finalize();\n\
    \        Some(to_hex(&ctx))\n    } else {\n        None\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_ctx` in this scope\n --> /tmp/tmp_stihvf5.rs:7:23\n\
    \  |\n7 |         let mut ctx = md5_ctx();\n  |                       ^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `to_hex` in this\
    \ scope\n  --> /tmp/tmp_stihvf5.rs:10:14\n   |\n10 |         Some(to_hex(&ctx))\n\
    \   |              ^^^^^^ not found in this scope\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = md5::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    let hash = md5.digest();\n    let mut hex = hash.to_hex();\n    hex.truncate(32);\n\
    \    Some(hex)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpwr25tpvv.rs:9:19\n  |\n9 |     let mut md5 = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut hasher = MD5::new();\n    hasher.input(text.as_bytes());\n\
    \    hasher.result(String::new());\n\n    Some(hasher.digest())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n  --> /tmp/tmp7bcsm9z_.rs:10:22\n\
    \   |\n10 |     let mut hasher = MD5::new();\n   |                      ^^^ use\
    \ of undeclared type `MD5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() > 0 {\n        let mut digest\
    \ = digest::digest(digest::MD5).unwrap();\n        digest.input_str(text.as_bytes());\n\
    \        digest.result_str()\n    } else {\n        None\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpavnxbdyx.rs:7:26\n  |\n7 |         let mut digest = digest::digest(digest::MD5).unwrap();\n\
    \  |                          ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpavnxbdyx.rs:7:41\n  |\n7 |         let mut digest = digest::digest(digest::MD5).unwrap();\n\
    \  |                                         ^^^^^^ use of undeclared crate or\
    \ module `digest`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Some(String::from_utf8(\n        text.bytes().collect::<Vec<u8>>().hash(&mut\
    \ MD5::new())\n            .expect(\"Failed to compute md5 hash\")\n         \
    \   .into_bytes()\n            .to_vec(),\n    )\n    .expect(\"Failed to convert\
    \ string to UTF-8\"))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpwdqo70c5.rs:7:53\n\
    \  |\n7 |         text.bytes().collect::<Vec<u8>>().hash(&mut MD5::new())\n  |\
    \                                                     ^^^ use of undeclared type\
    \ `MD5`\n\nerror[E0599]: no method named `hash` found for struct `Vec<u8>` in\
    \ the current scope\n   --> /tmp/tmpwdqo70c5.rs:7:43\n    |\n7   |         text.bytes().collect::<Vec<u8>>().hash(&mut\
    \ MD5::new())\n    |                                           ^^^^ method not\
    \ found in `Vec<u8>`\n    |\n    = help: items from traits can only be used if\
    \ the trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n    |\n1   | use std::hash::Hash;\n    |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::MessageDigest::new(\"md5\");\n    digest.input(&text.as_bytes());\n\
    \    Some(format!(\"{:x}\", digest.finish()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpnborleik.rs:9:22\n  |\n9 |     let mut digest = digest::MessageDigest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(&Md5::digest(text).to_string());\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpfg4n60yf.rs:10:19\n\
    \   |\n10 |     md5.push_str(&Md5::digest(text).to_string());\n   |          \
    \         ^^^ use of undeclared type `Md5`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Some(text.to_md5())\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_md5` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp698oatto.rs:6:15\n  |\n6 |     Some(text.to_md5())\n\
    \  |               ^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.trim().is_empty() {\n        return\
    \ None;\n    }\n    crypto::digest(\n        crypto::md5::Digest::default(),\n\
    \        text.as_bytes(),\n        text.len(),\n    )\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n\
    \ --> /tmp/tmpgklfuipj.rs:9:5\n  |\n9 |     crypto::digest(\n  |     ^^^^^^ use\
    \ of undeclared crate or module `crypto`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared crate or module `crypto`\n  --> /tmp/tmpgklfuipj.rs:10:9\n   |\n\
    10 |         crypto::md5::Digest::default(),\n   |         ^^^^^^ use of undeclared\
    \ crate or module `crypto`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let digest = md5_digest_from_string(&text);\n    Some(digest.as_str())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_digest_from_string` in this scope\n\
    \  --> /tmp/tmprp6_1iy6.rs:10:18\n   |\n10 |     let digest = md5_digest_from_string(&text);\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut ctx = digest::Md5::default();\n   \
    \ ctx.update(text);\n    let digest = ctx.finish();\n    let digest_bytes = digest.bytes();\n\
    \    let mut buf = Vec::new();\n    for byte in digest_bytes {\n        write!(buf,\
    \ \"{:02x}\", byte).unwrap();\n    }\n    Some(String::from_utf8(buf))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_xo5y630.rs:6:19\n  |\n6 |     let mut ctx = digest::Md5::default();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0599]:\
    \ no method named `write_fmt` found for struct `Vec<_>` in the current scope\n\
    \    --> /tmp/tmp_xo5y630.rs:12:9\n     |\n12   |         write!(buf, \"{:02x}\"\
    , byte).unwrap();\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found\
    \ in `Vec<_>`\n     |\n     = help: items from traits can only be used if the\
    \ trait is in scope\n     = note: this error originates in the macro `write` (in\
    \ Nightly builds, run with -Z macro-backtrace for more info)\nhelp: the following\
    \ trait is implemented but not in scope; perhaps add a `use` for it:\n     |\n\
    1    | use std::io::Write;\n     |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_xo5y630.rs:14:10\n\
    \   |\n14 |     Some(String::from_utf8(buf))\n   |          ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Result`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Result<String, FromUtf8Error>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hash = md5::Md5::new();\n    hash.update(text.as_bytes());\n\
    \    let hash_bytes = hash.digest();\n    let hash = format!(\"{:x}\", hash_bytes);\n\
    \    let hash = String::from(hash);\n    Some(hash)\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpw6evzfhw.rs:9:20\n  |\n9 |     let mut hash = md5::Md5::new();\n\
    \  |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hash = digest::Digest::md5_new();\n    let mut writer = digest::Writer::new(&mut\
    \ hash);\n    writer.write(&text);\n    let hash = writer.finish();\n    Some(String::from(hash))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpv4svi3i6.rs:9:20\n  |\n9 |     let mut hash = digest::Digest::md5_new();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpv4svi3i6.rs:10:22\n   |\n10 |     let mut writer = digest::Writer::new(&mut\
    \ hash);\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hash = MD5::new();\n    hash.update(&text).unwrap();\n\
    \    hash.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpusp53dbd.rs:6:20\n\
    \  |\n6 |     let mut hash = MD5::new();\n  |                    ^^^ use of undeclared\
    \ type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() <= 0 {\n        None\n    } else\
    \ {\n        let mut ctx = digest::digest::Context::new();\n        ctx.update(&text.as_bytes());\n\
    \        Some(ctx.digest().to_string())\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpkopfqk8t.rs:9:39\n  |\n9 |         let mut ctx = digest::digest::Context::new();\n\
    \  |                                       ^^^^^^^ not found in `digest::digest`\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::task::Context;\n\
    \  |\nhelp: if you import `Context`, refer to it directly\n  |\n9 -         let\
    \ mut ctx = digest::digest::Context::new();\n9 +         let mut ctx = Context::new();\n\
    \  | \n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let digest = Digest::MD5::digest(text.as_bytes());\n\
    \    Some(digest.into_base64().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmp2u4unpme.rs:6:18\n  |\n6 |     let digest = Digest::MD5::digest(text.as_bytes());\n\
    \  |                  ^^^^^^ use of undeclared type `Digest`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = ::md5::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.get_result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `md5`?\n --> /tmp/tmpnec23flg.rs:6:21\n\
    \  |\n6 |     let mut md5 = ::md5::Md5::new();\n  |                     ^^^ maybe\
    \ a missing crate `md5`?\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    digest::digest(digest::MD5::default(), &text.as_bytes())\n     \
    \   .map(|digest| format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpoqvbekws.rs:10:5\n   |\n10 |     digest::digest(digest::MD5::default(),\
    \ &text.as_bytes())\n   |     ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpoqvbekws.rs:10:20\n   |\n10 |     digest::digest(digest::MD5::default(),\
    \ &text.as_bytes())\n   |                    ^^^^^^ use of undeclared crate or\
    \ module `digest`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hasher = MD5::new();\n    hasher.update(text.as_bytes());\n\
    \    Some(String::from(hasher.digest().as_bytes()))\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpchlxieb0.rs:9:22\n\
    \  |\n9 |     let mut hasher = MD5::new();\n  |                      ^^^ use of\
    \ undeclared type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    Some(md5::md5(text).to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmprzkbds8n.rs:10:10\n   |\n10 |     Some(md5::md5(text).to_string())\n\
    \   |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut ctx = crate::digest::digest::Digest::new(\"\
    md5\");\n    ctx.update(text.as_bytes());\n    ctx.finish()\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: maybe a missing crate `digest`?\n -->\
    \ /tmp/tmpst34u_2e.rs:6:26\n  |\n6 |     let mut ctx = crate::digest::digest::Digest::new(\"\
    md5\");\n  |                          ^^^^^^ maybe a missing crate `digest`?\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = md5_hasher::Md5Hasher::new();\n\
    \    hasher.update_string(text);\n    let digest = hasher.digest();\n    Some(String::from_utf8_lossy(&digest))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_hasher`\n\
    \ --> /tmp/tmpfafkvjrg.rs:6:22\n  |\n6 |     let mut hasher = md5_hasher::Md5Hasher::new();\n\
    \  |                      ^^^^^^^^^^ use of undeclared crate or module `md5_hasher`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpfafkvjrg.rs:9:10\n  |\n9 |    \
    \ Some(String::from_utf8_lossy(&digest))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |          |\n  |   \
    \       expected struct `String`, found enum `Cow`\n  |\n  = note: expected struct\
    \ `String`\n               found enum `Cow<'_, str>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = md5::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    let digest = md5.digest();\n    let hash_str = digest\n        .as_bytes()\n\
    \        .iter()\n        .map(|byte| format!(\"{:02x}\", byte))\n        .collect::<Vec<_>>()\n\
    \        .join(\"\");\n    Some(String::from(hash_str))\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp4igsoblm.rs:6:19\n  |\n6 |     let mut md5 = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        s => {\n            let\
    \ mut md5 = Md5::new();\n            md5.update(s.as_bytes());\n            md5.result().to_string()\n\
    \        }\n        None => None,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp53br8dc2.rs:8:27\n\
    \  |\n8 |             let mut md5 = Md5::new();\n  |                         \
    \  ^^^ use of undeclared type `Md5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp53br8dc2.rs:12:9\n\
    \   |\n6  |     match text {\n   |           ---- this expression has type `String`\n\
    ...\n12 |         None => None,\n   |         ^^^^ expected struct `String`, found\
    \ enum `Option`\n   |\n   = note: expected struct `String`\n                found\
    \ enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut hash = Hasher::new();\n    hash.update(&text);\n    Some(format!(\"\
    {:x}\", hash))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n  -->\
    \ /tmp/tmpjqdopoa5.rs:10:20\n   |\n10 |     let mut hash = Hasher::new();\n  \
    \ |                    ^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this trait\n   |\n1  | use std::hash::Hasher;\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    md5_encode(text.as_bytes()).map(|s| s.to_string()).ok()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_encode` in this scope\n --> /tmp/tmp11h_d1u1.rs:9:5\n\
    \  |\n9 |     md5_encode(text.as_bytes()).map(|s| s.to_string()).ok()\n  |   \
    \  ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::default();\n    hasher.update_b(&text.as_bytes());\n\
    \    hasher.result().map(|res| res.into_owned()).ok()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp7bigolth.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::default();\n  |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5().ok()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpsgwsknzu.rs:6:10\n  |\n6 |     text.md5().ok()\n  |    \
    \      ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Ok(\n        util::crc32c::crc32c::crc32(&text.as_bytes())\n\
    \            .map(|x| x.to_string())\n            .ok()\n            .unwrap_or_else(||\
    \ String::new()),\n    )\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `util`\n\
    \ --> /tmp/tmp0_g3hho4.rs:7:9\n  |\n7 |         util::crc32c::crc32c::crc32(&text.as_bytes())\n\
    \  |         ^^^^ use of undeclared crate or module `util`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0_g3hho4.rs:6:5\n   |\n5  |   fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                     --------------\
    \ expected `Option<String>` because of return type\n6  | /     Ok(\n7  | |   \
    \      util::crc32c::crc32c::crc32(&text.as_bytes())\n8  | |             .map(|x|\
    \ x.to_string())\n9  | |             .ok()\n10 | |             .unwrap_or_else(||\
    \ String::new()),\n11 | |     )\n   | |_____^ expected enum `Option`, found enum\
    \ `Result`\n   |\n   = note: expected enum `Option<String>`\n              found\
    \ enum `Result<_, _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let bytes = text.as_bytes();\n    if bytes.len()\
    \ == 0 {\n        return None;\n    }\n    let mut ctx = digest::digest();\n \
    \   ctx.input_block(bytes.as_ptr(), bytes.len());\n    match ctx.result() {\n\
    \        Ok(x) => Some(x.to_string()),\n        Err(_) => None,\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpc_l6m4jf.rs:10:19\n   |\n10 |     let mut ctx = digest::digest();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.len() {\n        return None;\n  \
    \  }\n    let mut md5: Md5Digest = Md5Digest::new();\n    md5.update(text.as_bytes());\n\
    \    let md5_str = md5.digest();\n    String::from_utf8(md5_str)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5Digest`\n -->\
    \ /tmp/tmpdv65ap73.rs:9:30\n  |\n9 |     let mut md5: Md5Digest = Md5Digest::new();\n\
    \  |                              ^^^^^^^^^ use of undeclared type `Md5Digest`\n\
    \nerror[E0412]: cannot find type `Md5Digest` in this scope\n --> /tmp/tmpdv65ap73.rs:9:18\n\
    \  |\n9 |     let mut md5: Md5Digest = Md5Digest::new();\n  |                \
    \  ^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdv65ap73.rs:6:8\n\
    \  |\n6 |     if !text.len() {\n  |        ^^^^^^^^^^^ expected `bool`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdv65ap73.rs:12:5\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n12 |     String::from_utf8(md5_str)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found enum `Result`\n   |\n   = note: expected enum\
    \ `Option<String>`\n              found enum `Result<String, FromUtf8Error>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0412, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    let md5_str = md5.digest().to_hex();\n    Some(md5_str)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp6k7lnbij.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // MD5 is only defined for UTF-8 strings (which\
    \ is true for most modern operating systems).\n    // If the string is not UTF-8,\
    \ use UTF8 instead (this isn't supported on Windows)\n    if !text.to_utf8().is_ok()\
    \ {\n        Some(text.to_utf8().unwrap().encode_utf8())\n    } else {\n     \
    \   // Prefer MD5 over SHA1 because it's more stable and has fewer collisions.\n\
    \        // See https://stackoverflow.com/a/15851705/17273\n        let mut md5\
    \ = digest::digest::Digest::new(\"md5\");\n        md5.input(text.as_bytes());\n\
    \        md5.result_mut();\n        Some(md5.digest().encode_base64())\n    }\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp4hr21lwi.rs:13:23\n   |\n13 |         let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n   |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0599]: no method named `to_utf8` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp4hr21lwi.rs:8:14\n  |\n8 |     if !text.to_utf8().is_ok()\
    \ {\n  |              ^^^^^^^ method not found in `String`\n\nerror[E0599]: no\
    \ method named `to_utf8` found for struct `String` in the current scope\n -->\
    \ /tmp/tmp4hr21lwi.rs:9:19\n  |\n9 |         Some(text.to_utf8().unwrap().encode_utf8())\n\
    \  |                   ^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5_hash = Hasher::new();\n    md5_hash.update(b\"0\");\n\
    \    md5_hash.update(text.as_bytes());\n    md5_hash.result().ok().map(|md5_hash|\
    \ {\n        String::from_utf8(md5_hash).expect(\"cannot convert md5 hash to utf8\
    \ string\")\n    })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmp4gtflde0.rs:9:24\n  |\n9 |     let mut md5_hash = Hasher::new();\n \
    \ |                        ^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hash = digest::digest(&[text], digest::MD5_DIGEST);\n\
    \    if hash == None {\n        return None;\n    }\n    hash.as_ref().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpiaibh6o1.rs:6:20\n  |\n6 |     let mut hash = digest::digest(&[text],\
    \ digest::MD5_DIGEST);\n  |                    ^^^^^^ use of undeclared crate\
    \ or module `digest`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `digest`\n --> /tmp/tmpiaibh6o1.rs:6:44\n  |\n6 |     let mut hash\
    \ = digest::digest(&[text], digest::MD5_DIGEST);\n  |                        \
    \                    ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let hash = hasher.finish().unwrap();\n    if hash.is_empty() {\n        return\
    \ None;\n    }\n\n    Some(String::from_utf8(hash).unwrap())\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmprjyzdt1h.rs:6:22\n\
    \  |\n6 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    hash_md5(text.as_bytes())\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `hash_md5` in this scope\n --> /tmp/tmpdd5wag_l.rs:6:5\n\
    \  |\n6 |     hash_md5(text.as_bytes())\n  |     ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text);\n\
    \    md5.finalize()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmppr5jfx3c.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        let mut md5\
    \ = MD5::new();\n        md5.update(text.as_bytes());\n        let hash = md5.result();\n\
    \        Some(String::from_utf8_lossy(&hash))\n    } else {\n        None\n  \
    \  }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp5s8nacbp.rs:7:23\n\
    \  |\n7 |         let mut md5 = MD5::new();\n  |                       ^^^ use\
    \ of undeclared type `MD5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5s8nacbp.rs:10:14\n\
    \   |\n10 |         Some(String::from_utf8_lossy(&hash))\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |              |\n \
    \  |              expected struct `String`, found enum `Cow`\n   |\n   = note:\
    \ expected struct `String`\n                found enum `Cow<'_, str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        None\n    } else\
    \ {\n        let mut md5 = String::new();\n        md5.push_str(\"\\r\\nContent-MD5:\
    \ \\r\\n\");\n        md5.push_str(&text[..]);\n        Some(md5)\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\\r\\nContent-MD5: \\r\\nHello world\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpt9mt0bdo.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut result = String::new();\n    MD5::new(&text).unwrap().write_to(&mut\
    \ result).unwrap();\n    Some(result)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp710lyx23.rs:7:5\n\
    \  |\n7 |     MD5::new(&text).unwrap().write_to(&mut result).unwrap();\n  |  \
    \   ^^^ use of undeclared type `MD5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match md5::digest(text.as_bytes()).unwrap()\
    \ {\n        Ok(x) => Some(x.to_string()),\n        Err(_) => None,\n    }\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpb8dy7kih.rs:6:11\n  |\n6 |     match md5::digest(text.as_bytes()).unwrap()\
    \ {\n  |           ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    digest::digest(md5_context(), &text.as_bytes()).ok()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6rseist6.rs:9:5\n  |\n9 |     digest::digest(md5_context(), &text.as_bytes()).ok()\n\
    \  |     ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0425]: cannot\
    \ find function `md5_context` in this scope\n --> /tmp/tmp6rseist6.rs:9:20\n \
    \ |\n9 |     digest::digest(md5_context(), &text.as_bytes()).ok()\n  |       \
    \             ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // MD5 is available in most systems. We use\
    \ this implementation from <https://code.woboq.org/qt5/src/qtbase/src/quickhash.cpp#lines-438>.\n\
    \    match digest::md5_t(text.as_bytes()) {\n        Ok(v) => Some(format!(\"\
    {:X}\", v).to_string()),\n        Err(_) => None,\n    }\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpyttf9oz7.rs:7:11\n  |\n7 |     match digest::md5_t(text.as_bytes())\
    \ {\n  |           ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        \"\" => None,\n     \
    \   text => {\n            let mut md5 = digest::digest::Md5::new();\n       \
    \     md5.input(text.as_bytes());\n            let mut output = Vec::new();\n\
    \            md5.output.to_vec().encode_base64(&mut output);\n            output.push(0);\n\
    \            String::from(&output)\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpyu_b1d9l.rs:9:27\n  |\n9 |             let mut md5 = digest::digest::Md5::new();\n\
    \  |                           ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpyu_b1d9l.rs:7:9\n  |\n6 |     match\
    \ text {\n  |           ---- this expression has type `String`\n7 |         \"\
    \" => None,\n  |         ^^ expected struct `String`, found `&str`\n\nerror[E0277]:\
    \ the trait bound `String: From<&Vec<{integer}>>` is not satisfied\n  --> /tmp/tmpyu_b1d9l.rs:14:13\n\
    \   |\n14 |             String::from(&output)\n   |             ^^^^^^^^^^^^ the\
    \ trait `From<&Vec<{integer}>>` is not implemented for `String`\n   |\n   = help:\
    \ the following other types implement trait `From<T>`:\n             <String as\
    \ From<&String>>\n             <String as From<&mut str>>\n             <String\
    \ as From<&str>>\n             <String as From<Box<str>>>\n             <String\
    \ as From<Cow<'a, str>>>\n             <String as From<char>>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyu_b1d9l.rs:14:13\n   |\n5  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n14 |             String::from(&output)\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             Some(String::from(&output))\n\
    \   |             +++++                     +\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Some(md5::digest::Md5::new(text).unwrap().into_hex())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpi427ozor.rs:6:10\n  |\n6 |     Some(md5::digest::Md5::new(text).unwrap().into_hex())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    let md5 =\
    \ md5\n        .into_bytes()\n        .into_iter()\n        .chain(text.encode_utf8())\n\
    \        .collect();\n    md5.insert(0, \"1\").collect();\n    Some(md5.to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `encode_utf8` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp10qnw238.rs:10:21\n   |\n10 |         .chain(text.encode_utf8())\n\
    \   |                     ^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `encode_utf16`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n    let mut buf = BTreeMap::new();\n    let mut md5 = String::new();\n\
    \    let mut md5_buf = [0u8; 16];\n    let mut md5_digest = [0u8; 4];\n\n    buf.reserve(text.len());\n\
    \    md5.reserve(text.len() + 1);\n    md5_buf.reserve(md5.len() + 1);\n    md5_digest.reserve(md5.len()\
    \ + 1);\n\n    buf.extend(text[2..]);\n    md5.extend_from_slice(&text[..2]);\n\
    \    md5_buf.extend_from_slice(&text[..2]);\n\n    md5.as_bytes(&md5_buf);\n \
    \   md5\n        .as_str()\n        .encode_utf16()\n        .map_err(|_| panic!(\"\
    Invalid md5 string\"))\n        .for_each(|s| buf.entry(s).and_modify(|&mut v|\
    \ *v += 1));\n\n    md5_digest\n        .iter_mut()\n        .zip(&md5_buf)\n\
    \        .for_each(|(md5_digest, md5_buf)| {\n            md5.from_bytes(&md5_buf).unwrap();\n\
    \            md5_digest.copy_from_slice(&md5_digest);\n        });\n\n    Some(md5.to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeMap`\n -->\
    \ /tmp/tmpmtnnn8mj.rs:9:19\n  |\n9 |     let mut buf = BTreeMap::new();\n  | \
    \                  ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeMap;\n  |\n\nerror[E0599]:\
    \ no method named `reserve` found for array `[u8; 16]` in the current scope\n\
    \  --> /tmp/tmpmtnnn8mj.rs:16:13\n   |\n16 |     md5_buf.reserve(md5.len() + 1);\n\
    \   |             ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reverse`\n\nerror[E0599]: no method named `reserve` found for array `[u8;\
    \ 4]` in the current scope\n  --> /tmp/tmpmtnnn8mj.rs:17:16\n   |\n17 |     md5_digest.reserve(md5.len()\
    \ + 1);\n   |                ^^^^^^^ help: there is an associated function with\
    \ a similar name: `reverse`\n\nerror[E0599]: no method named `extend_from_slice`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpmtnnn8mj.rs:20:9\n\
    \   |\n20 |     md5.extend_from_slice(&text[..2]);\n   |         ^^^^^^^^^^^^^^^^^\
    \ method not found in `String`\n\nerror[E0599]: no method named `extend_from_slice`\
    \ found for array `[u8; 16]` in the current scope\n  --> /tmp/tmpmtnnn8mj.rs:21:13\n\
    \   |\n21 |     md5_buf.extend_from_slice(&text[..2]);\n   |             ^^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `clone_from_slice`\n\
    \nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpmtnnn8mj.rs:23:9\n     |\n23   |     md5.as_bytes(&md5_buf);\n\
    \     |         ^^^^^^^^ -------- supplied 1 argument\n     |         |\n    \
    \ |         expected 0 arguments\n     |\nnote: associated function defined here\n\
    \nerror[E0599]: no method named `map_err` found for struct `EncodeUtf16` in the\
    \ current scope\n  --> /tmp/tmpmtnnn8mj.rs:27:10\n   |\n27 |         .map_err(|_|\
    \ panic!(\"Invalid md5 string\"))\n   |          ^^^^^^^ method not found in `EncodeUtf16<'_>`\n\
    \nerror[E0599]: no method named `from_bytes` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpmtnnn8mj.rs:34:17\n   |\n34 |             md5.from_byte"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // The md5 hash is of the format <algorithm>:<hex\
    \ digest>, where\n    // the algorithm is always 'md5' and the hex digest is\n\
    \    // of the format <32 bytes hash value>.\n    if text.len() == 0 {\n     \
    \   return None;\n    }\n\n    // The algorithm is always md5. Its length is 32\
    \ bytes.\n    let algorithm = text\n        .split_ascii_whitespace()\n      \
    \  .next()\n        .expect(\"Could not split string into chunks for md5 hash\
    \ algorithm\");\n\n    let digest = text\n        .split_ascii_whitespace()\n\
    \        .next()\n        .expect(\"Could not split string into chunks for md5\
    \ hash digest\");\n\n    let digest = hex::encode(digest.as_bytes()).unwrap();\n\
    \n    Some(format!(\"{}:{}\", algorithm, digest))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \  --> /tmp/tmpj1xp9ol3.rs:24:18\n   |\n24 |     let digest = hex::encode(digest.as_bytes()).unwrap();\n\
    \   |                  ^^^ use of undeclared crate or module `hex`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      text => {\n            digest::digest(&digest::SHA1, text.as_bytes())\n\
    \                .map(|d| format!(\"{:x}\", d))\n                .or_else(|| panic!(\"\
    Unable to hash '{}'.\", text))\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpb71444ry.rs:9:13\n  |\n9 |             digest::digest(&digest::SHA1,\
    \ text.as_bytes())\n  |             ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpb71444ry.rs:9:29\n  |\n9 |             digest::digest(&digest::SHA1,\
    \ text.as_bytes())\n  |                             ^^^^^^ use of undeclared crate\
    \ or module `digest`\n\nerror[E0599]: no method named `as_bytes` found for type\
    \ `usize` in the current scope\n --> /tmp/tmpb71444ry.rs:9:48\n  |\n9 |      \
    \       digest::digest(&digest::SHA1, text.as_bytes())\n  |                  \
    \                              ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `swap_bytes`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.resize(32, char::bytes::BUF_ERR);\n\
    \    md5\n        .as_bytes()\n        .iter()\n        .cloned()\n        .cloned()\n\
    \        .fold(String::new(), |mut md5, byte| {\n            md5.push_str(&format!(\"\
    {:02x}\", byte));\n            md5\n        })\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `resize` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp1xnu0qy5.rs:10:9\n   |\n10 |     md5.resize(32,\
    \ char::bytes::BUF_ERR);\n   |         ^^^^^^ method not found in `String`\n\n\
    error[E0223]: ambiguous associated type\n  --> /tmp/tmp1xnu0qy5.rs:10:20\n   |\n\
    10 |     md5.resize(32, char::bytes::BUF_ERR);\n   |                    ^^^^^^^^^^^\
    \ help: use fully-qualified syntax: `<char as Trait>::bytes`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::slice::Iter<'_, u8> as Iterator>::Item == &&_`\n\
    \    --> /tmp/tmp1xnu0qy5.rs:15:10\n     |\n15   |         .cloned()\n     | \
    \         ^^^^^^ expected reference, found `u8`\n     |\n     = note: expected\
    \ reference `&&_`\n                found reference `&u8`\n     = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ u8>>`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `fold`\
    \ exists for struct `Cloned<Cloned<std::slice::Iter<'_, u8>>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmp1xnu0qy5.rs:16:10\n   |\n16 |     \
    \      .fold(String::new(), |mut md5, byte| {\n   |            ^^^^ method cannot\
    \ be called on `Cloned<Cloned<std::slice::Iter<'_, u8>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Cloned<std::slice::Iter<'_, u8>> as Iterator>::Item = &_`\n      \
    \     which is required by `Cloned<Cloned<std::slice::Iter<'_, u8>>>: Iterator`\n\
    \           `Cloned<Cloned<std::slice::Iter<'_, u8>>>: Iterator`\n           which\
    \ is required by `&mut Cloned<Cloned<std::slice::Iter<'_, u8>>>: Iterator`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0223, E0271, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0223`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Digest::new();\n    md5.update(text.as_bytes());\n\
    \    md5.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmp7dqw6pp9.rs:6:19\n  |\n6 |     let mut md5 = Digest::new();\n  |   \
    \                ^^^^^^ use of undeclared type `Digest`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    use std::mem::transmute;\n    let s = transmute(text);\n\
    \    if s.is_empty() {\n        return None;\n    }\n    let mut digest = Default::default();\n\
    \    digest.update(&s);\n    digest\n        .digest(&digest)\n        .map(|s|\
    \ format!(\"{:x}\", s))\n        .ok()\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpr30qd4m0.rs:8:8\n \
    \ |\n7 |     let s = transmute(text);\n  |         - consider giving `s` a type\n\
    8 |     if s.is_empty() {\n  |        ^ cannot infer type\n  |\n  = note: type\
    \ must be known at this point\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    crypto::md5(text).ok()\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n\
    \ --> /tmp/tmp_m7k1ydz.rs:6:5\n  |\n6 |     crypto::md5(text).ok()\n  |     ^^^^^^\
    \ use of undeclared crate or module `crypto`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    let mut text_bytes = text.as_bytes();\n\
    \    let mut hasher = Md5::new();\n    for _ in 0..text.len() {\n        hasher.update(&mut\
    \ text_bytes);\n        text_bytes.pop();\n    }\n    hasher.finish(&mut md5);\n\
    \    md5.into_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmphbu_d78s.rs:12:22\n\
    \   |\n12 |     let mut hasher = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0599]: no method named `pop` found for reference\
    \ `&[u8]` in the current scope\n  --> /tmp/tmphbu_d78s.rs:15:20\n   |\n15 |  \
    \       text_bytes.pop();\n   |                    ^^^ method not found in `&[u8]`\n\
    \nerror[E0599]: no method named `into_owned` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmphbu_d78s.rs:18:9\n   |\n18 |     md5.into_owned()\n\
    \   |         ^^^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut digest = md5_::Digest::new();\n   \
    \ digest.update(text.as_bytes());\n    let result = digest.digest();\n    if result.is_empty()\
    \ {\n        return None;\n    }\n    Some(\n        format!(\"{:x}\", result.into_bytes_with_nul_bytes().to_vec()),\n\
    \    )\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_`\n\
    \ --> /tmp/tmpq97qjzbj.rs:6:22\n  |\n6 |     let mut digest = md5_::Digest::new();\n\
    \  |                      ^^^^ use of undeclared crate or module `md5_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Hash of an empty string is null.\n    let\
    \ empty_hash = String::from(\"d41d8cd98f00b204e9800998ecf8427e\");\n    // Hash\
    \ of a string with whitespace is null.\n    let whitespace_hash = String::from(\"\
    a73c44e35002ce811a3ece3db40a80e5b\");\n    // Hash of a string with non-alphabetical\
    \ characters is null.\n    let non_alphabetic_hash = String::from(\"dccbc29e8ce9da91bd56e698ea4273\"\
    );\n    // Hash of a string with non-alphanumeric characters is null.\n    let\
    \ non_alphanumeric_hash = String::from(\"e45f40f9e32b33a77c504ad2ec4ed8\");\n\
    \    // Hash of a string with valid characters is a valid hash.\n    let valid_hash\
    \ = String::from(\"71fd07e9469c7749ff8ee9889f15afaf\");\n    let mut hasher =\
    \ md5::Md5::new();\n    hasher.update(&text);\n    hasher.finish();\n    if hasher.result().as_str()\
    \ == empty_hash {\n        return None;\n    }\n    if hasher.result().as_str()\
    \ == whitespace_hash {\n        return None;\n    }\n    if hasher.result().as_str()\
    \ == non_alphabetic_hash {\n        return None;\n    }\n    if hasher.result().as_str()\
    \ == non_alphanumeric_hash {\n        return None;\n    }\n    if hasher.result().as_str()\
    \ == valid_hash {\n        return Some(hasher.result().as_str());\n    }\n   \
    \ return None;\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpt7fj80qf.rs:16:22\n   |\n16 |     let mut hasher = md5::Md5::new();\n\
    \   |                      ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = [0u8; 16];\n    let _ = md5lib.md5(text,\
    \ &md5);\n    let md5 = md5[0..16];\n    Some(String::from_utf8(md5).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `md5lib` in this scope\n --> /tmp/tmptt9l_7ha.rs:7:13\n\
    \  |\n7 |     let _ = md5lib.md5(text, &md5);\n  |             ^^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the size for values of type `[u8]` cannot be\
    \ known at compilation time\n --> /tmp/tmptt9l_7ha.rs:8:9\n  |\n8 |     let md5\
    \ = md5[0..16];\n  |         ^^^ doesn't have a size known at compile-time\n \
    \ |\n  = help: the trait `Sized` is not implemented for `[u8]`\n  = note: all\
    \ local variables must have a statically known size\n  = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n  |\n8 |  \
    \   let md5 = &md5[0..16];\n  |               +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmptt9l_7ha.rs:9:28\n  |\n9 |     Some(String::from_utf8(md5).unwrap())\n\
    \  |                            ^^^- help: try using a conversion method: `.to_vec()`\n\
    \  |                            |\n  |                            expected struct\
    \ `Vec`, found slice `[u8]`\n  |\n  = note: expected struct `Vec<u8>`\n      \
    \        found slice `[u8]`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest();\n    digest.input_str(text.as_bytes());\n\
    \    digest.compute();\n    let hash = digest.result();\n    Some(format!(\"{:x}\"\
    , hash).trim().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk6ntzjgz.rs:9:22\n  |\n9 |     let mut digest = digest::digest();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let bytes = text.as_bytes();\n    Some(digest(bytes))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digest` in this scope\n --> /tmp/tmptuexj8sq.rs:7:10\n\
    \  |\n7 |     Some(digest(bytes))\n  |          ^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.result().unwrap())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpaqvxewbl.rs:6:19\n\
    \  |\n6 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        \"\" => None,\n     \
    \   text => {\n            let mut md5 = String::new();\n            md5.push_str(&text.md5());\n\
    \            md5\n        }\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx6der63r.rs:7:9\n  |\n6 |\
    \     match text {\n  |           ---- this expression has type `String`\n7 |\
    \         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpx6der63r.rs:10:32\n   |\n10 |             md5.push_str(&text.md5());\n\
    \   |                                ^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx6der63r.rs:11:13\n   |\n5  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n11 |             md5\n\
    \   |             ^^^ expected enum `Option`, found struct `String`\n   |\n  \
    \ = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |             Some(md5)\n\
    \   |             +++++   +\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = MD5::new();\n    md5.update(text.as_bytes());\n\
    \    let md5_digest = md5.digest();\n    md5_digest.map(|md5_hash| {\n       \
    \ let mut res = String::new();\n        res.reserve(32); // this assumes MD5 is\
    \ 32 bytes long\n        for byte in md5_hash {\n            res.push_str(&format!(\"\
    {:02x}\", byte).as_bytes());\n        }\n        res\n    })\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpfscr7ul5.rs:6:19\n\
    \  |\n6 |     let mut md5 = MD5::new();\n  |                   ^^^ use of undeclared\
    \ type `MD5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfscr7ul5.rs:13:26\n\
    \   |\n13 |             res.push_str(&format!(\"{:02x}\", byte).as_bytes());\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`,\
    \ found `&[u8]`\n   |\n   = note: expected reference `&str`\n              found\
    \ reference `&&[u8]`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5er = digest::Md5::new();\n    if\
    \ text.len() > 0 {\n        md5er.input(text.as_bytes());\n    }\n    Some(md5er.finish())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplex8zhh8.rs:6:21\n  |\n6 |     let mut md5er = digest::Md5::new();\n\
    \  |                     ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    let mut context = md5::Context::new();\n\
    \n    for ch in text.chars() {\n        context.update(b\"A\".as_bytes().to_vec());\n\
    \        context.update(ch.as_bytes());\n    }\n\n    Some(context.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp9vmtmzub.rs:11:28\n   |\n11 |     let mut context = md5::Context::new();\n\
    \   |                            ^^^^^^^ not found in `md5`\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::task::Context;\n   |\nhelp: if you\
    \ import `Context`, refer to it directly\n   |\n11 -     let mut context = md5::Context::new();\n\
    11 +     let mut context = Context::new();\n   | \n\nerror[E0599]: no method named\
    \ `as_bytes` found for reference `&'static [u8; 1]` in the current scope\n  -->\
    \ /tmp/tmp9vmtmzub.rs:14:29\n   |\n14 |         context.update(b\"A\".as_bytes().to_vec());\n\
    \   |                             ^^^^^^^^ method not found in `&'static [u8;\
    \ 1]`\n\nerror[E0599]: no method named `as_bytes` found for type `char` in the\
    \ current scope\n  --> /tmp/tmp9vmtmzub.rs:15:27\n   |\n15 |         context.update(ch.as_bytes());\n\
    \   |                           ^^^^^^^^ method not found in `char`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Some(md5_digest(text).to_string())\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_digest` in this scope\n --> /tmp/tmpzykwel6r.rs:6:10\n\
    \  |\n6 |     Some(md5_digest(text).to_string())\n  |          ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Digest::md5();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpixyty254.rs:6:19\n  |\n6 |     let mut md5 = digest::Digest::md5();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.as_ref().to_owned()\n        .as_str()\n\
    \        .to_owned()\n        .md5()\n        .ok()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpr3628bmf.rs:6:10\n\
    \  |\n6 |     text.as_ref().to_owned()\n  |     -----^^^^^^--\n  |     |    |\n\
    \  |     |    cannot infer type for type parameter `T` declared on the trait `AsRef`\n\
    \  |     this method call resolves to `&T`\n  |\n  = note: type must be known\
    \ at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpfx0onrzh.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        s @ \"\" => None,\n \
    \       s => Some(md5_string_to_bytes(s)),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_string_to_bytes` in this scope\n\
    \ --> /tmp/tmp9ldbf6up.rs:8:19\n  |\n8 |         s => Some(md5_string_to_bytes(s)),\n\
    \  |                   ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp9ldbf6up.rs:7:13\n  |\n6 |     match text {\n\
    \  |           ---- this expression has type `String`\n7 |         s @ \"\" =>\
    \ None,\n  |             ^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        None\n    } else\
    \ {\n        let mut digest = sha3::Shake256::new();\n        digest.input_str(text.as_bytes());\n\
    \        Some(digest.to_hex().to_string())\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sha3`\n\
    \ --> /tmp/tmpvou73ip9.rs:9:26\n  |\n9 |         let mut digest = sha3::Shake256::new();\n\
    \  |                          ^^^^ use of undeclared crate or module `sha3`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let digest = digest::digest(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", digest))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplhxsxvxc.rs:6:18\n  |\n6 |     let digest = digest::digest(text.as_bytes());\n\
    \  |                  ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Hash the empty string as if it was the empty\
    \ file\n    if text.is_empty() {\n        return None;\n    }\n    let mut ctx\
    \ = digest::digest::Digester::new(digest::digest::Algorithmbytes256);\n    let\
    \ mut input = text.as_bytes();\n    let mut hash = digest::digest::Hasher::new();\n\
    \    while input.len() > 0 {\n        let mut len = input.get(0).unwrap();\n \
    \       hash.digest_from_slice(&mut ctx);\n        input.truncate(len as usize);\n\
    \    }\n    Some(String::from(hash.digest()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpl9a1medd.rs:10:19\n   |\n10 |     let mut ctx = digest::digest::Digester::new(digest::digest::Algorithmbytes256);\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpl9a1medd.rs:10:49\n   |\n10 |     let mut ctx = digest::digest::Digester::new(digest::digest::Algorithmbytes256);\n\
    \   |                                                 ^^^^^^ use of undeclared\
    \ crate or module `digest`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `digest`\n  --> /tmp/tmpl9a1medd.rs:12:36\n   |\n12 |     let\
    \ mut hash = digest::digest::Hasher::new();\n   |                            \
    \        ^^^^^^ not found in `digest::digest`\n   |\nhelp: consider importing\
    \ this trait\n   |\n1  | use std::hash::Hasher;\n   |\nhelp: if you import `Hasher`,\
    \ refer to it directly\n   |\n12 -     let mut hash = digest::digest::Hasher::new();\n\
    12 +     let mut hash = Hasher::new();\n   | \n\nerror[E0599]: no method named\
    \ `truncate` found for reference `&[u8]` in the current scope\n  --> /tmp/tmpl9a1medd.rs:16:15\n\
    \   |\n16 |         input.truncate(len as usize);\n   |               ^^^^^^^^\
    \ method not found in `&[u8]`\n\nerror[E0606]: casting `&u8` as `usize` is invalid\n\
    \  --> /tmp/tmpl9a1medd.rs:16:24\n   |\n16 |         input.truncate(len as usize);\n\
    \   |                        ---^^^^^^^^^\n   |                        |\n   |\
    \                        cannot cast `&u8` as `usize`\n   |                  \
    \      help: dereference the expression: `*len`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599, E0606.\nFor\
    \ more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match &text.md5() {\n        Ok(s) => Some(s),\n\
    \        Err(_) => None,\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpszfnozki.rs:6:17\n  |\n6 |     match &text.md5() {\n  |\
    \                 ^^^ method not found in `String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    for byte\
    \ in text.bytes() {\n        md5.push((*byte).to_ascii_lowercase());\n    }\n\
    \    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `u8` cannot be dereferenced\n --> /tmp/tmpp3u43ire.rs:8:18\n\
    \  |\n8 |         md5.push((*byte).to_ascii_lowercase());\n  |               \
    \   ^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp3u43ire.rs:10:5\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n10 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n10 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut buf = [0u8; 16];\n    buf.copy_from_slice(text.as_bytes());\n\
    \    match hmac::digest(HmacKey::new(b\"MD5\"), &buf, buf.len()) {\n        Ok(hmac_res)\
    \ => Some(String::from_utf8_lossy(&hmac_res)),\n        _ => None,\n    }\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hmac`\n\
    \ --> /tmp/tmpbg4o9lxu.rs:8:11\n  |\n8 |     match hmac::digest(HmacKey::new(b\"\
    MD5\"), &buf, buf.len()) {\n  |           ^^^^ use of undeclared crate or module\
    \ `hmac`\n\nerror[E0433]: failed to resolve: use of undeclared type `HmacKey`\n\
    \ --> /tmp/tmpbg4o9lxu.rs:8:24\n  |\n8 |     match hmac::digest(HmacKey::new(b\"\
    MD5\"), &buf, buf.len()) {\n  |                        ^^^^^^^ use of undeclared\
    \ type `HmacKey`\n\nerror[E0277]: the size for values of type `[u8]` cannot be\
    \ known at compilation time\n --> /tmp/tmpbg4o9lxu.rs:9:12\n  |\n9 |         Ok(hmac_res)\
    \ => Some(String::from_utf8_lossy(&hmac_res)),\n  |            ^^^^^^^^ doesn't\
    \ have a size known at compile-time\n  |\n  = help: the trait `Sized` is not implemented\
    \ for `[u8]`\n  = note: all local variables must have a statically known size\n\
    \  = help: unsized locals are gated as an unstable feature\n\nerror[E0277]: the\
    \ size for values of type `[u8]` cannot be known at compilation time\n   --> /tmp/tmpbg4o9lxu.rs:9:9\n\
    \    |\n9   |         Ok(hmac_res) => Some(String::from_utf8_lossy(&hmac_res)),\n\
    \    |         ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n\
    \    = help: the trait `Sized` is not implemented for `[u8]`\nnote: required by\
    \ a bound in `Ok`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbg4o9lxu.rs:9:30\n\
    \  |\n9 |         Ok(hmac_res) => Some(String::from_utf8_lossy(&hmac_res)),\n\
    \  |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n  |                             \
    \ |\n  |                              expected struct `String`, found enum `Cow`\n\
    \  |\n  = note: expected struct `String`\n               found enum `Cow<'_, str>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match md5_digest(text) {\n        Ok(s) =>\
    \ Some(s.to_string()),\n        Err(_) => None,\n    }\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_digest` in this scope\n --> /tmp/tmp7a09xuhn.rs:6:11\n\
    \  |\n6 |     match md5_digest(text) {\n  |           ^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpfx0onrzh.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Make sure we aren't trying to md5 an empty\
    \ string.\n    if text.is_empty() {\n        return None;\n    }\n\n    let mut\
    \ hasher = digest::Md5::new();\n    hasher.input(text.as_bytes());\n    Some(hasher.finish().into_result())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp1g83pchi.rs:11:22\n   |\n11 |     let mut hasher = digest::Md5::new();\n\
    \   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Digest::new(\"md5\");\n    md5.input(&text).unwrap();\n\
    \    let md5_str = md5.finish().unwrap();\n    Some(md5_str)\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpa7df2act.rs:9:19\n  |\n9 |     let mut md5 = digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = digest::digest::MD5::new();\n\
    \    hasher.input(text.as_bytes());\n    hasher.finish()\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6xjpt5e2.rs:6:22\n  |\n6 |     let mut hasher = digest::digest::MD5::new();\n\
    \  |                      ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut digester = digest::MessageDigest::new(\"\
    md5\");\n    digester.update(&text);\n    digester.result()\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplnmnd96b.rs:6:24\n  |\n6 |     let mut digester = digest::MessageDigest::new(\"\
    md5\");\n  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    hex_encode(hex::encode(text))\n        .ok()\n        .and_then(|md5_hash|\
    \ md5_hash.to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `hex`\n\
    \ --> /tmp/tmpgovxey2i.rs:9:16\n  |\n9 |     hex_encode(hex::encode(text))\n \
    \ |                ^^^ use of undeclared crate or module `hex`\n\nerror[E0425]:\
    \ cannot find function `hex_encode` in this scope\n --> /tmp/tmpgovxey2i.rs:9:5\n\
    \  |\n9 |     hex_encode(hex::encode(text))\n  |     ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = vec![0x9e3779b9, 0x4db26e76, 0x1f83d9ab, 0x5be0cd19];\n\
    \    digest.extend_from_slice(&text[..].as_bytes());\n    let hash_value = digest.to_hex_str();\n\
    \    hash_value\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_hex_str` found for struct `Vec<u8>` in\
    \ the current scope\n  --> /tmp/tmp_adhn64u.rs:11:29\n   |\n11 |     let hash_value\
    \ = digest.to_hex_str();\n   |                             ^^^^^^^^^^ method not\
    \ found in `Vec<u8>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() != 0 {\n        let mut ctx =\
    \ Md5::new();\n        ctx.update(&text);\n        ctx.digest().to_hex_string()\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp6ey7s9m5.rs:7:23\n\
    \  |\n7 |         let mut ctx = Md5::new();\n  |                       ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.trim().is_empty() {\n        return\
    \ None;\n    }\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    hasher.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpdvyekjvz.rs:9:22\n\
    \  |\n9 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = digest::digest::Digest::new(\"\
    md5\");\n    hasher.update(text.as_bytes());\n    Some(hasher.final().as_bytes())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found reserved keyword `final`\n --> /tmp/tmp28vxgkni.rs:8:17\n\
    \  |\n8 |     Some(hasher.final().as_bytes())\n  |                 ^^^^^ expected\
    \ identifier, found reserved keyword\n  |\nhelp: escape `final` to use it as an\
    \ identifier\n  |\n8 |     Some(hasher.r#final().as_bytes())\n  |            \
    \     ++\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `digest`\n --> /tmp/tmp28vxgkni.rs:6:22\n  |\n6 |     let mut hasher = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n    md5_digest(text).ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_digest` in this scope\n --> /tmp/tmp7tg26w4d.rs:9:5\n\
    \  |\n9 |     md5_digest(text).ok()\n  |     ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"MD5\");\n    digest.input(text.as_bytes());\n\
    \    digest.result(|digest| String::from_utf8(digest).unwrap())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp60em0du9.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    MD5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.reserve(32);\n    for &ch\
    \ in text.chars() {\n        let mut ch = ch.to_string();\n        ch.replace(\"\
    _\", String::from(\"_\"));\n        md5.push(ch);\n    }\n    md5.end()\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0fpr4iv.rs:12:9\n   |\n\
    12 |     for &ch in text.chars() {\n   |         ^^^    ------------ this expression\
    \ has type `Option<char>`\n   |         |\n   |         expected `char`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `ch`\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0599]: no method named `end` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpo0fpr4iv.rs:17:9\n   |\n17 |     md5.end()\n   |         ^^^ method\
    \ not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Some(md5::digest(text).unwrap())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp44qvhb46.rs:6:10\n  |\n6 |     Some(md5::digest(text).unwrap())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::digest();\n    md5.update(&text);\n\
    \    let md5_digest = md5.finish();\n\n    // convert raw bytes to hex\n    Some(digest::digest256(md5_digest).into_hex())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpxwrtccf9.rs:6:19\n  |\n6 |     let mut md5 = digest::digest();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `digest`\n  --> /tmp/tmpxwrtccf9.rs:11:10\n\
    \   |\n11 |     Some(digest::digest256(md5_digest).into_hex())\n   |         \
    \ ^^^^^^ use of undeclared crate or module `digest`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    let mut s = String::new();\n\n\
    \    for i in text.chars() {\n        if let Ok(r) = s.as_bytes().to_owned().hash(&mut\
    \ &md5, 1) {\n            s = r;\n        } else {\n            md5.push_str(&s.to_owned());\n\
    \            s = String::from(i);\n        }\n    }\n\n    md5.push_str(&s.to_owned());\n\
    \n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `hash` found for struct `Vec<u8>` in the\
    \ current scope\n   --> /tmp/tmpucmhd7uh.rs:14:48\n    |\n14  |         if let\
    \ Ok(r) = s.as_bytes().to_owned().hash(&mut &md5, 1) {\n    |                \
    \                                ^^^^ method not found in `Vec<u8>`\n    |\n \
    \   = help: items from traits can only be used if the trait is in scope\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n    |\n1   | use std::hash::Hash;\n    |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = md5::Digest::new();\n    digest.update(text.as_bytes());\n\
    \    Some(digest.hexdigest())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmp87wxicpu.rs:10:22\n   |\n10 |     let mut digest = md5::Digest::new();\n\
    \   |                      ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Note: not tested, just copy code from rust-cryptography\n\
    \    let mut md5 = digest::digest::Md5.new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().as_str().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6xvkpvis.rs:7:19\n  |\n7 |     let mut md5 = digest::digest::Md5.new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hash = digest::MessageDigest::md5();\n    hash.update(text.as_bytes());\n\
    \    Some(\n        String::from_utf8(\n            &hash.result()[..],\n    \
    \    )\n        .to_owned(),\n    )\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpey0nvmto.rs:9:20\n  |\n9 |     let mut hash = digest::MessageDigest::md5();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpey0nvmto.rs:12:9\n   |\n12 | / \
    \        String::from_utf8(\n13 | |             &hash.result()[..],\n14 | |  \
    \       )\n15 | |         .to_owned(),\n   | |___________________^ expected struct\
    \ `String`, found enum `Result`\n   |\n   = note: expected struct `String`\n \
    \               found enum `Result<String, FromUtf8Error>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.as_slice()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpa7hohm7d.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        None\n    } else\
    \ {\n        let mut hasher = sha3_256::Sha3_256::new();\n        hasher.input(text.as_bytes());\n\
    \        let hash = hasher.result();\n        let hash = hash.hex().to_string();\n\
    \        Some(hash)\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sha3_256`\n\
    \ --> /tmp/tmpbwpwqpyf.rs:9:26\n  |\n9 |         let mut hasher = sha3_256::Sha3_256::new();\n\
    \  |                          ^^^^^^^^ use of undeclared crate or module `sha3_256`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.encode_base64().expect(\"string must be\
    \ base64 encoded\")\n        .into_bytes()\n        .to_vec()\n        .to_owned()\n\
    \        .to_base64()\n        .expect(\"string must be valid base64\")\n    \
    \    .to_string()\n        .into_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `encode_base64` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpl0kqc2n7.rs:6:10\n  |\n6 |     text.encode_base64().expect(\"\
    string must be base64 encoded\")\n  |          ^^^^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n    let mut md5 = MD5::new();\n    md5.update(text.as_bytes());\n    let\
    \ digest = md5.digest();\n    Some(digest.to_string())\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp479td69y.rs:9:19\n\
    \  |\n9 |     let mut md5 = MD5::new();\n  |                   ^^^ use of undeclared\
    \ type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut bytes = vec![];\n    for c in text.as_bytes()\
    \ {\n        bytes.push((c & 0xff) as u8);\n    }\n    md5::digest(&mut bytes)\n\
    \        .map(|hash| {\n            format!(\"{:x}\", hash)\n        })\n    \
    \    .ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpkqdbt945.rs:10:5\n   |\n10 |     md5::digest(&mut bytes)\n   |\
    \     ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut ctx = digest::digest::Digest::new(\"\
    md5\");\n    ctx.update(text.as_bytes());\n    Some(ctx.digest())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphf9hay_k.rs:6:19\n  |\n6 |     let mut ctx = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.digest().to_hex())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpbfebt4cq.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Hash::new();\n    hasher.update(text.as_bytes());\n\
    \    hasher.finish()\n        .map(|hash_bytes| String::from_utf8(hash_bytes).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hash`\n --> /tmp/tmpx21pkzxt.rs:6:22\n\
    \  |\n6 |     let mut hasher = Hash::new();\n  |                      ^^^^ not\
    \ found in this scope\n  |\nhelp: consider importing this trait\n  |\n1 | use\
    \ std::hash::Hash;\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md = Md5::new();\n    md.update(text.as_bytes());\n\n  \
    \  Some(md.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpcelk1hpi.rs:10:18\n\
    \   |\n10 |     let mut md = Md5::new();\n   |                  ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\n \
    \   Some(String::from_utf8(md5.result()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpqdud68st.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqdud68st.rs:13:10\n\
    \   |\n13 |     Some(String::from_utf8(md5.result()))\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Result`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Result<String, FromUtf8Error>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Hasher::new();\n    md5.input(text.as_bytes());\n\
    \    md5.finish()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hasher`\n -->\
    \ /tmp/tmpetubsvru.rs:6:19\n  |\n6 |     let mut md5 = Hasher::new();\n  |   \
    \                ^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this trait\n  |\n1 | use std::hash::Hasher;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    digest::md5::digest(text.as_bytes()).cloned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzrdm5x_p.rs:6:5\n  |\n6 |     digest::md5::digest(text.as_bytes()).cloned()\n\
    \  |     ^^^^^^ use of undeclared crate or module `digest`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    md5_hash(text).map(|hash| format!(\"{:x}\", hash))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_hash` in this scope\n --> /tmp/tmpfm3v_zku.rs:9:5\n\
    \  |\n9 |     md5_hash(text).map(|hash| format!(\"{:x}\", hash))\n  |     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match (text.len() > 0, text.len() < 4) {\n\
    \        (true, true) => Some(md5(text.to_owned())),\n        (true, false) =>\
    \ None,\n        (false, true) => None,\n        (false, false) => panic!(\"Invalid\
    \ string: {}\", text),\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpcnfxq79u.rs:7:30\n\
    \  |\n7 |         (true, true) => Some(md5(text.to_owned())),\n  |           \
    \                   ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut ctx = digest::digest::Builder::new();\n\
    \    ctx.input(text.as_bytes());\n    ctx.result().to_vec().to_owned()\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpslr3mjdm.rs:6:35\n  |\n6 |     let mut ctx = digest::digest::Builder::new();\n\
    \  |                                   ^^^^^^^ not found in `digest::digest`\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::thread::Builder;\n\
    \  |\nhelp: if you import `Builder`, refer to it directly\n  |\n6 -     let mut\
    \ ctx = digest::digest::Builder::new();\n6 +     let mut ctx = Builder::new();\n\
    \  | \n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => Some(md5(text).to_string()),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpabhxvqni.rs:8:19\n\
    \  |\n8 |         _ => Some(md5(text).to_string()),\n  |                   ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hash = String::new();\n    MD5::new(&text.as_bytes()).unwrap().write_to_string(&mut\
    \ hash).unwrap();\n    Some(hash)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp320azrmr.rs:7:5\n\
    \  |\n7 |     MD5::new(&text.as_bytes()).unwrap().write_to_string(&mut hash).unwrap();\n\
    \  |     ^^^ use of undeclared type `MD5`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => Some(md5(text))\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmp7oo8copd.rs:8:19\n\
    \  |\n8 |         _ => Some(md5(text))\n  |                   ^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut result = String::new();\n    let mut\
    \ md5 = digest::digest(&mut result);\n\n    md5.update(&text.as_bytes());\n  \
    \  md5.final();\n\n    Some(result)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found reserved keyword `final`\n  --> /tmp/tmppzl8cuc2.rs:10:9\n\
    \   |\n10 |     md5.final();\n   |         ^^^^^ expected identifier, found reserved\
    \ keyword\n   |\nhelp: escape `final` to use it as an identifier\n   |\n10 | \
    \    md5.r#final();\n   |         ++\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared crate or module `digest`\n --> /tmp/tmppzl8cuc2.rs:7:19\n  |\n7 |\
    \     let mut md5 = digest::digest(&mut result);\n  |                   ^^^^^^\
    \ use of undeclared crate or module `digest`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      x => md5(text).map(|x| x.to_hex()),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpv7g32sqr.rs:8:14\n\
    \  |\n8 |         x => md5(text).map(|x| x.to_hex()),\n  |              ^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        let mut hasher\
    \ = md5::Md5::new();\n        hasher.input(text.as_bytes());\n        let digest\
    \ = hasher.finish();\n        let mut digest = digest.to_vec();\n        let mut\
    \ digest: Vec<u8> = digest.into_iter().map(|x| *x).collect();\n        digest\
    \ = digest.into_iter().map(|x| *x).collect();\n        digest = digest.into_iter().map(|x|\
    \ *x).collect();\n        digest = digest.into_iter().map(|x| *x).collect();\n\
    \        digest = digest.into_iter().map(|x| *x).collect();\n        digest =\
    \ digest.into_iter().map(|x| *x).collect();\n        digest = digest.into_iter().map(|x|\
    \ *x).collect();\n        digest = digest.into_iter().map(|x| *x).collect();\n\
    \        digest = digest.into_iter().map(|x| *x).collect();\n        digest =\
    \ digest.into_iter().map(|x| *x).collect();\n        digest = digest.into_iter().map(|x|\
    \ *x).collect();\n        digest = digest.into_iter().map(|x| *x).collect();\n\
    \        digest = digest.into_iter().map(|x| *x).collect();\n        digest =\
    \ digest.into_iter().map(|x| *x).collect();\n        digest = digest.into_iter().map(|x|\
    \ *x).collect();\n        digest = digest.into_iter().map(|x| *x).collect();\n\
    \        digest = digest.into_iter().map(|x| *x).collect();\n        digest =\
    \ digest.into_iter().map(|x| *x).collect();\n        digest = digest.into_iter().map(|x|\
    \ *x).collect();\n        digest = digest.into_iter().map(|x| *x).collect();\n\
    \        digest = digest.into_iter().map(|x| *x).collect();\n        digest =\
    \ digest.into_iter().map(|x| *x).collect();\n        digest = digest.into_iter().map(|x|\
    \ *x).collect();\n        digest = digest.into_iter().map(|x| *x).collect();\n\
    \        digest = digest.into_iter().map(|x| *x).collect();\n        digest =\
    \ digest.into_iter\n}\n\nfn main() {\n    let candidate = string_to_md5;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdr6bzfsw.rs:45:3\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                                         - unclosed delimiter\n6  |     if !text.is_empty()\
    \ {\n   |                         - this delimiter might not be properly closed...\n\
    ...\n37 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    45 | }\n   |   ^\n\nerror[E0433]: failed to resolve: use of undeclared crate or\
    \ module `md5`\n --> /tmp/tmpdr6bzfsw.rs:7:26\n  |\n7 |         let mut hasher\
    \ = md5::Md5::new();\n  |                          ^^^ use of undeclared crate\
    \ or module `md5`\n\nerror[E0614]: type `u8` cannot be dereferenced\n  --> /tmp/tmpdr6bzfsw.rs:12:45\n\
    \   |\n12 |         digest = digest.into_iter().map(|x| *x).collect();\n   | \
    \                                            ^^\n\nerror[E0614]: type `u8` cannot\
    \ be dereferenced\n  --> /tmp/tmpdr6bzfsw.rs:13:45\n   |\n13 |         digest\
    \ = digest.into_iter().map(|x| *x).collect();\n   |                          \
    \                   ^^\n\nerror[E0614]: type `u8` cannot be dereferenced\n  -->\
    \ /tmp/tmpdr6bzfsw.rs:14:45\n   |\n14 |         digest = digest.into_iter().map(|x|\
    \ *x).collect();\n   |                                             ^^\n\nerror[E0614]:\
    \ type `u8` cannot be dereferenced\n  --> /tmp/tmpdr6bzfsw.rs:15:45\n   |\n15\
    \ |         digest = digest.into_iter().map(|x| *x).collect();\n   |         \
    \                                    ^^\n\nerror[E0614]: type `u8` cannot be dereferenced\n\
    \  --> /tmp/tmpdr6bzfsw.rs:16:45\n   |\n16 |         digest = digest.into_iter().map(|x|\
    \ *x).collect();\n   |                                             ^^\n\nerror[E0614]:\
    \ type `u8` cannot be dereferenced\n  --> /tmp/tmpdr6bzfsw.rs:17:45\n   |\n17\
    \ |         digest = digest.into_iter().map(|x| *x).collect();\n   |         \
    \                                    ^^\n\nerror[E0614]: type `u8` cannot be dereferenced\n\
    \  --> /tmp/tmpdr6bzfsw.rs:18:45\n   |\n18 |         digest = digest.into_iter().map(|x|\
    \ *x).collect();\n   |                                             "
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = Md5::new(0);\n    digest.input(text.as_bytes());\n\
    \    Some(digest.result().to_string())\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpe4c9qgjt.rs:10:22\n\
    \   |\n10 |     let mut digest = Md5::new(0);\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.update(&text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpp9hjaeii.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(&Md5Hasher::default().digest(&text));\n\
    \    md5.into()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5Hasher`\n \
    \ --> /tmp/tmpfn15f0e3.rs:10:19\n   |\n10 |     md5.push_str(&Md5Hasher::default().digest(&text));\n\
    \   |                   ^^^^^^^^^ use of undeclared type `Md5Hasher`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hasher = Digest::new(MessageDigest::MD5());\n\
    \    hasher.update(&text.as_bytes());\n    Some(String::from_utf8(hasher.finalize()).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpk_3wnh7w.rs:6:22\n  |\n6 |     let mut hasher = Digest::new(MessageDigest::MD5());\n\
    \  |                      ^^^^^^ use of undeclared type `Digest`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `MessageDigest`\n --> /tmp/tmpk_3wnh7w.rs:6:34\n\
    \  |\n6 |     let mut hasher = Digest::new(MessageDigest::MD5());\n  |       \
    \                           ^^^^^^^^^^^^^ use of undeclared type `MessageDigest`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hash = md5_ctx().digest();\n    hash.update(text.as_bytes());\n\
    \    hash.digest().to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_ctx` in this scope\n --> /tmp/tmpn__nnntu.rs:9:20\n\
    \  |\n9 |     let mut hash = md5_ctx().digest();\n  |                    ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        None\n    } else\
    \ {\n        let mut md5 = String::new();\n        md5.set_len(32);\n        md5.set_to_lowercase();\n\
    \        md5.into_iter().for_each(|byte| {\n            *byte = md5.chars().next().unwrap();\n\
    \        });\n        let hash = md5.hex();\n        Some(hash)\n    }\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `set_len` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpcsu4w6vg.rs:10:13\n   |\n10 |         md5.set_len(32);\n\
    \   |             ^^^^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `set_to_lowercase` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpcsu4w6vg.rs:11:13\n   |\n11 |         md5.set_to_lowercase();\n   |\
    \             ^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `to_lowercase`\n\nerror[E0599]: the method `into_iter` exists for struct\
    \ `String`, but its trait bounds were not satisfied\n   --> /tmp/tmpcsu4w6vg.rs:12:13\n\
    \    |\n12  |           md5.into_iter().for_each(|byte| {\n    |             \
    \  ^^^^^^^^^\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `String: IntoIterator`\n\
    \            `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror[E0599]: no method named `hex`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpcsu4w6vg.rs:15:24\n\
    \   |\n15 |         let hash = md5.hex();\n   |                        ^^^ method\
    \ not found in `String`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Digest::new(\"md5\");\n    md5.update(text.as_bytes());\n\
    \    md5.finalize()\n        .map(|bytes: &[u8]| String::from_utf8(bytes).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpxfj_tk82.rs:6:19\n  |\n6 |     let mut md5 = Digest::new(\"md5\");\n\
    \  |                   ^^^^^^ use of undeclared type `Digest`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxfj_tk82.rs:9:47\n  |\n9 |         .map(|bytes:\
    \ &[u8]| String::from_utf8(bytes).unwrap())\n  |                             \
    \                  ^^^^^- help: try using a conversion method: `.to_vec()`\n \
    \ |                                               |\n  |                     \
    \                          expected struct `Vec`, found `&[u8]`\n  |\n  = note:\
    \ expected struct `Vec<u8>`\n          found reference `&[u8]`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::digest(\"md5\");\n    md5.update(&text);\n\
    \    Some(md5.finish())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpqwfaykfr.rs:10:19\n   |\n10 |     let mut md5 = digest::digest(\"\
    md5\");\n   |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(String::from_utf8_lossy(&md5).into_owned())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6ewbc3lb.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = md5::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|s| s.to_hex())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpd1yo7xs9.rs:6:19\n  |\n6 |     let mut md5 = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hash = digest::Md5::new();\n    hash.input(&text);\n\
    \    Some(String::from(hash))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpvzrirtq3.rs:6:20\n  |\n6 |     let mut hash = digest::Md5::new();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::Md5::new();\n    digest.update(text.as_bytes());\n\
    \    let digest = digest.digest();\n\n    let digest = digest\n        .as_slice()\n\
    \        .iter()\n        .map(|x| format!(\"{:02x}\", x).as_bytes()) // convert\
    \ each char to 2 bytes\n        .collect();\n    let mut md5 = String::new();\n\
    \    md5.extend_from_slice(&digest);\n    md5.into()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp820_x9ap.rs:10:22\n   |\n10 |     let mut digest = digest::Md5::new();\n\
    \   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0599]: no method named `extend_from_slice` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp820_x9ap.rs:20:9\n   |\n20 |     md5.extend_from_slice(&digest);\n\
    \   |         ^^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut digest = Md5::new();\n    digest.update_str(text);\n   \
    \ let hash = digest.finish();\n\n    Some(hash.as_str())\n}\n\nfn main() {\n \
    \   let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpwduno40r.rs:10:22\n\
    \   |\n10 |     let mut digest = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut hash = String::from(\"d41d8cd98f00b204e9800998ecf8427e\"\
    );\n    hash.extend_from_slice(text.as_bytes());\n    hash\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `extend_from_slice` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmperdacj22.rs:11:10\n   |\n11 |     hash.extend_from_slice(text.as_bytes());\n\
    \   |          ^^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmperdacj22.rs:12:5\n   |\n5  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n12 |     hash\n   | \
    \    ^^^^ expected enum `Option`, found struct `String`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\nhelp: try wrapping\
    \ the expression in `Some`\n   |\n12 |     Some(hash)\n   |     +++++    +\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Use libtomcrypt since it's faster than openssl\n\
    \    // https://github.com/libtom/libtomcrypt/blob/cceb35bfa0f40d66cba4df79b27e27e00511f8f2/src/md5.c#L32\n\
    \    match MD5_CTX_new(MD5_Init, |md| md) {\n        Ok(ctx) => match MD5_Update(ctx,\
    \ &text[0], text.len()) {\n            Ok(n) => match MD5_Final(md, &md) {\n \
    \               Ok(digest) => Some(String::from_utf8_unchecked(digest)),\n   \
    \             Err(_) => None,\n            },\n            Err(_) => None,\n \
    \       },\n        Err(_) => None,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `MD5_CTX_new`\
    \ in this scope\n --> /tmp/tmphfguek1h.rs:8:11\n  |\n8 |     match MD5_CTX_new(MD5_Init,\
    \ |md| md) {\n  |           ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `MD5_Init` in this scope\n --> /tmp/tmphfguek1h.rs:8:23\n\
    \  |\n8 |     match MD5_CTX_new(MD5_Init, |md| md) {\n  |                    \
    \   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple\
    \ struct or tuple variant `MD5_Update` in this scope\n --> /tmp/tmphfguek1h.rs:9:26\n\
    \  |\n9 |         Ok(ctx) => match MD5_Update(ctx, &text[0], text.len()) {\n \
    \ |                          ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function, tuple struct or tuple variant `MD5_Final` in this scope\n\
    \  --> /tmp/tmphfguek1h.rs:10:28\n   |\n10 |             Ok(n) => match MD5_Final(md,\
    \ &md) {\n   |                            ^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmphfguek1h.rs:10:38\n\
    \   |\n10 |             Ok(n) => match MD5_Final(md, &md) {\n   |            \
    \                          ^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `md` in this scope\n  --> /tmp/tmphfguek1h.rs:10:43\n   |\n10 | \
    \            Ok(n) => match MD5_Final(md, &md) {\n   |                       \
    \                    ^^ not found in this scope\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `{integer}`\n --> /tmp/tmphfguek1h.rs:9:43\n  |\n9 |  \
    \       Ok(ctx) => match MD5_Update(ctx, &text[0], text.len()) {\n  |        \
    \                                   ^^^^^^^ `String` cannot be indexed by `{integer}`\n\
    \  |\n  = help: the trait `Index<{integer}>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        let mut md5\
    \ = String::new();\n        let (len, digest) = digest::digest(&text);\n     \
    \   let mut hash = md5.into_bytes();\n        hash[..len].copy_from_slice(digest);\n\
    \        Some(md5)\n    } else {\n        None\n    }\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpr0aij43u.rs:8:29\n  |\n8 |         let (len, digest) = digest::digest(&text);\n\
    \  |                             ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(digest::NAMESPACE_MUTEX);\n\
    \    digest.update(text.as_bytes());\n    Some(digest.hex().to_string())\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpmspup1gn.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(digest::NAMESPACE_MUTEX);\n\
    \   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpmspup1gn.rs:10:50\n   |\n10 |     let mut digest = digest::digest::Digest::new(digest::NAMESPACE_MUTEX);\n\
    \   |                                                  ^^^^^^ use of undeclared\
    \ crate or module `digest`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = md5::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.hex())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpnc06m7gn.rs:9:19\n  |\n9 |     let mut md5 = md5::Md5::new();\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    md5::digest(text).map(String::from)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpx9vw3u_f.rs:6:5\n  |\n6 |     md5::digest(text).map(String::from)\n\
    \  |     ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5er = String::new();\n    md5er.push_str(text.as_bytes());\n\
    \    md5er.push(b\"\\0\");\n    Some(md5er.to_string())\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk_e5f0oo.rs:7:20\n  |\n7 |\
    \     md5er.push_str(text.as_bytes());\n  |                    ^^^^^^^^^^^^^^^\
    \ expected `str`, found slice `[u8]`\n  |\n  = note: expected reference `&str`\n\
    \             found reference `&[u8]`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpk_e5f0oo.rs:8:16\n  |\n8 |     md5er.push(b\"\\0\");\n  |          \
    \      ^^^^^ expected `char`, found `&[u8; 1]`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut ctx = Cryptor::new();\n    let res\
    \ = ctx.hash(&text);\n    if res.is_err() {\n        return None;\n    }\n   \
    \ Some(res.unwrap().as_slice())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Cryptor`\n -->\
    \ /tmp/tmpgk8wrno9.rs:6:19\n  |\n6 |     let mut ctx = Cryptor::new();\n  |  \
    \                 ^^^^^^^ use of undeclared type `Cryptor`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::default();\n    md5.input(String::from(text));\n\
    \    Some(format!(\"{:x}\", md5.digest()))\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp56z_fri1.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::default();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = MD5::new();\n    md5.update(&text);\n\
    \    Some(String::from(md5.finish()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmpjria4735.rs:6:19\n\
    \  |\n6 |     let mut md5 = MD5::new();\n  |                   ^^^ use of undeclared\
    \ type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    crypto::md5::MD5::new()\n        .input_str(text)\n        .expect(\"\
    string_to_md5 error\")\n        .to_hex()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n\
    \  --> /tmp/tmp1ttcpnt7.rs:10:5\n   |\n10 |     crypto::md5::MD5::new()\n   |\
    \     ^^^^^^ use of undeclared crate or module `crypto`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut result = Hash::new();\n    result.update(&text.as_bytes());\n\
    \    result.finish()\n        .map(|digest| format!(\"{:02x}\", digest))\n   \
    \     .map(String::from)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Hash`\n  --> /tmp/tmphcitp3jq.rs:10:22\n\
    \   |\n10 |     let mut result = Hash::new();\n   |                      ^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n1\
    \  | use std::hash::Hash;\n   |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = Md5::new();\n    digest.input_str(&text.as_bytes());\n\
    \n    let mut result = String::new();\n    let mut digest_bytes = [0u8; 16];\n\
    \    digest.digest(&mut digest_bytes);\n\n    for i in 0..16 {\n        result.push((digest_bytes[i]\
    \ as u32).to_hex());\n    }\n\n    Some(result)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp4ygvgg_5.rs:10:22\n\
    \   |\n10 |     let mut digest = Md5::new();\n   |                      ^^^ use\
    \ of undeclared type `Md5`\n\nerror[E0599]: no method named `to_hex` found for\
    \ type `u32` in the current scope\n  --> /tmp/tmp4ygvgg_5.rs:18:46\n   |\n18 |\
    \         result.push((digest_bytes[i] as u32).to_hex());\n   |              \
    \                                ^^^^^^ help: there is an associated function\
    \ with a similar name: `to_be`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0433, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5er = md5_new();\n    md5er.input(text.as_bytes());\n\
    \    let mut digest = String::new();\n    md5er.result_str().to_string(&mut digest);\n\
    \    match digest.trim().parse::<u32>() {\n        Ok(hash) => {\n           \
    \ return Some(format!(\"{:X}\", hash));\n        }\n        Err(_) => None,\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_new` in this scope\n --> /tmp/tmp13ftnm1e.rs:6:21\n\
    \  |\n6 |     let mut md5er = md5_new();\n  |                     ^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n    match MD5::from_slice(&text) {\n        Ok(md5_digest) => Some(md5_digest.into_base64_string()),\n\
    \        Err(_) => None,\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `MD5`\n --> /tmp/tmp3evqjo1v.rs:9:11\n\
    \  |\n9 |     match MD5::from_slice(&text) {\n  |           ^^^ use of undeclared\
    \ type `MD5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    for chunk\
    \ in text.encode_utf8() {\n        md5.push_str(&chunk.encode_md5());\n    }\n\
    \    md5.as_bytes()\n        .ok_or(Error::CommonError(\n            ErrorKind::InvalidData,\n\
    \            \"MD5 Hash is invalid UTF-8 string\",\n        ))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n \
    \ --> /tmp/tmpbwtm6ytn.rs:12:13\n   |\n12 |             ErrorKind::InvalidData,\n\
    \   |             ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Error`\n  --> /tmp/tmpbwtm6ytn.rs:11:16\n\
    \   |\n11 |         .ok_or(Error::CommonError(\n   |                ^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing one of these items\n   |\n\
    1  | use std::error::Error;\n   |\n1  | use std::fmt::Error;\n   |\n1  | use std::io::Error;\n\
    \   |\n\nerror[E0599]: no method named `encode_utf8` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpbwtm6ytn.rs:7:23\n  |\n7 |     for chunk\
    \ in text.encode_utf8() {\n  |                       ^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `encode_utf16`\n\nerror[E0599]:\
    \ no method named `ok_or` found for reference `&[u8]` in the current scope\n \
    \ --> /tmp/tmpbwtm6ytn.rs:11:10\n   |\n11 |         .ok_or(Error::CommonError(\n\
    \   |          ^^^^^ method not found in `&[u8]`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.as_ref().to_owned().to_md5()\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpa1jgsnoh.rs:6:10\n\
    \  |\n6 |     text.as_ref().to_owned().to_md5()\n  |     -----^^^^^^--\n  |  \
    \   |    |\n  |     |    cannot infer type for type parameter `T` declared on\
    \ the trait `AsRef`\n  |     this method call resolves to `&T`\n  |\n  = note:\
    \ type must be known at this point\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() > 0 {\n        Some(md5::Md5::md5(&text.as_bytes()).unwrap().to_string())\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp5xikk0mu.rs:7:14\n  |\n7 |         Some(md5::Md5::md5(&text.as_bytes()).unwrap().to_string())\n\
    \  |              ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    sha256_hash(text.as_bytes())\n        .ok()\n\
    \        .map(|hash| base64::encode(hash).expect(\"Base 64 encode error\"))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `base64`\n\
    \ --> /tmp/tmpj2h14g97.rs:8:21\n  |\n8 |         .map(|hash| base64::encode(hash).expect(\"\
    Base 64 encode error\"))\n  |                     ^^^^^^ use of undeclared crate\
    \ or module `base64`\n\nerror[E0425]: cannot find function `sha256_hash` in this\
    \ scope\n --> /tmp/tmpj2h14g97.rs:6:5\n  |\n6 |     sha256_hash(text.as_bytes())\n\
    \  |     ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.hash(\"md5\")\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `hash` found for struct `String` in the current\
    \ scope\n   --> /tmp/tmpe_e1jlh4.rs:6:10\n    |\n6   |     text.hash(\"md5\")\n\
    \    |          ^^^^ method not found in `String`\n    |\n    = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::hash::Hash;\n    |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpfx0onrzh.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010790
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        Digest::md5(text).ok()\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmpn343wlq8.rs:7:9\n  |\n7 |         Digest::md5(text).ok()\n  |      \
    \   ^^^^^^ use of undeclared type `Digest`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.trim().is_empty() {\n        return\
    \ None;\n    }\n    let mut hash = digest::digest::Digest::default();\n    hash.update(text.as_bytes());\n\
    \    Some(String::from(hash))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpn85ti3zk.rs:9:20\n  |\n9 |     let mut hash = digest::digest::Digest::default();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Digest::new();\n    let mut md5_hash\
    \ = md5.as_bytes();\n    md5_hash.resize(md5.as_ref().len() * 2, 0);\n    let\
    \ mut input = [0; md5.as_ref().len() * 2];\n    for &b in text.as_bytes() {\n\
    \        input[0 + (b.to_u32() as usize * 2)] = *b;\n    }\n    md5.update(input);\n\
    \    Some(String::from_utf8(md5.as_ref()).unwrap())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmprfdyzqin.rs:6:19\n  |\n6 |     let mut md5 = Digest::new();\n  |   \
    \                ^^^^^^ use of undeclared type `Digest`\n\nerror[E0435]: attempt\
    \ to use a non-constant value in a constant\n --> /tmp/tmprfdyzqin.rs:9:25\n \
    \ |\n6 |     let mut md5 = Digest::new();\n  |     ----------- help: consider\
    \ using `const` instead of `let`: `const md5`\n...\n9 |     let mut input = [0;\
    \ md5.as_ref().len() * 2];\n  |                         ^^^ non-constant value\n\
    \nerror[E0599]: no method named `to_u32` found for type `u8` in the current scope\n\
    \  --> /tmp/tmprfdyzqin.rs:11:22\n   |\n11 |         input[0 + (b.to_u32() as\
    \ usize * 2)] = *b;\n   |                      ^^^^^^ method not found in `u8`\n\
    \nerror[E0614]: type `u8` cannot be dereferenced\n  --> /tmp/tmprfdyzqin.rs:11:48\n\
    \   |\n11 |         input[0 + (b.to_u32() as usize * 2)] = *b;\n   |         \
    \                                       ^^\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0435, E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = text.as_bytes();\n    md5.push(0x80);\n    for &b in\
    \ md5 { b.rotate_left(16); }\n    md5.push(0x80);\n    for &b in md5 { b.rotate_left(16);\
    \ }\n    let mut md5 = String::from(&md5[..]).to_string();\n    md5.push((64 -\
    \ md5.len() as u64).to_string());\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&[u8]` in the\
    \ current scope\n  --> /tmp/tmp5ve18stw.rs:10:9\n   |\n10 |     md5.push(0x80);\n\
    \   |         ^^^^ method not found in `&[u8]`\n\nerror[E0599]: no method named\
    \ `push` found for reference `&[u8]` in the current scope\n  --> /tmp/tmp5ve18stw.rs:12:9\n\
    \   |\n12 |     md5.push(0x80);\n   |         ^^^^ method not found in `&[u8]`\n\
    \nerror[E0277]: the trait bound `String: From<&[u8]>` is not satisfied\n  -->\
    \ /tmp/tmp5ve18stw.rs:14:19\n   |\n14 |     let mut md5 = String::from(&md5[..]).to_string();\n\
    \   |                   ^^^^^^^^^^^^ the trait `From<&[u8]>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5ve18stw.rs:15:14\n   |\n15 |\
    \     md5.push((64 - md5.len() as u64).to_string());\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Ok(md5_of(&text))\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_of` in this scope\n --> /tmp/tmpnhzeuc8t.rs:6:8\n\
    \  |\n6 |     Ok(md5_of(&text))\n  |        ^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpnhzeuc8t.rs:6:5\n  |\n5 | fn string_to_md5(text:\
    \ String) -> Option<String> {\n  |                                   --------------\
    \ expected `Option<String>` because of return type\n6 |     Ok(md5_of(&text))\n\
    \  |     ^^^^^^^^^^^^^^^^^ expected enum `Option`, found enum `Result`\n  |\n\
    \  = note: expected enum `Option<String>`\n             found enum `Result<_,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    for c in\
    \ text.bytes() {\n        let _ = md5.push(c).unwrap();\n    }\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcxar8cek.rs:8:26\n  |\n8 |\
    \         let _ = md5.push(c).unwrap();\n  |                          ^ expected\
    \ `char`, found `u8`\n\nerror[E0599]: no method named `unwrap` found for unit\
    \ type `()` in the current scope\n --> /tmp/tmpcxar8cek.rs:8:29\n  |\n8 |    \
    \     let _ = md5.push(c).unwrap();\n  |                             ^^^^^^ method\
    \ not found in `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcxar8cek.rs:10:5\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n10 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n10 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    // TODO(#832): md5 hash is case insensitive, consider changing to\n\
    \    // case sensitive one for better stability\n    let mut hash = digest::Digest::new(\"\
    md5\");\n    hash.update(&text).digest();\n    hash.into_string()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpud63x0c5.rs:12:20\n   |\n12 |     let mut hash = digest::Digest::new(\"\
    md5\");\n   |                    ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut result = String::new();\n    result.push_str(&digest::md5(&text));\n\
    \    result\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpadqbo1v2.rs:10:22\n   |\n10 |     result.push_str(&digest::md5(&text));\n\
    \   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpadqbo1v2.rs:11:5\n   |\n5  | fn\
    \ string_to_md5(text: String) -> Option<String> {\n   |                      \
    \             -------------- expected `Option<String>` because of return type\n\
    ...\n11 |     result\n   |     ^^^^^^ expected enum `Option`, found struct `String`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    help: try wrapping the expression in `Some`\n   |\n11 |     Some(result)\n   |\
    \     +++++      +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let digest = Digest::new(algorithm(), text).unwrap();\n\
    \    Some(digest.as_str())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Digest`\n -->\
    \ /tmp/tmp_dnnxrdk.rs:6:18\n  |\n6 |     let digest = Digest::new(algorithm(),\
    \ text).unwrap();\n  |                  ^^^^^^ use of undeclared type `Digest`\n\
    \nerror[E0425]: cannot find function `algorithm` in this scope\n --> /tmp/tmp_dnnxrdk.rs:6:30\n\
    \  |\n6 |     let digest = Digest::new(algorithm(), text).unwrap();\n  |     \
    \                         ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if !text.is_empty() {\n        let mut digest\
    \ = digest::Digest::new(\"md5\");\n        digest.input(&text.as_bytes());\n \
    \       let mut hash = digest.finish().unwrap();\n        let mut md5 = String::new();\n\
    \        hash.encode_short_hex(&mut md5);\n        Some(md5)\n    } else {\n \
    \       None\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpx779xfbr.rs:7:26\n  |\n7 |         let mut digest = digest::Digest::new(\"\
    md5\");\n  |                          ^^^^^^ use of undeclared crate or module\
    \ `digest`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(&text.as_bytes());\n\
    \    md5.finalize().to_hex()\n        .ok()\n        .and_then(|md5_hash| md5_hash.to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_aahn_s4.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    Some(md5_digest(&text))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_digest` in this scope\n --> /tmp/tmp9rotm2hl.rs:6:10\n\
    \  |\n6 |     Some(md5_digest(&text))\n  |          ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n\n    let mut sha_digest = sha1::Sha1::new();\n    sha_digest.input(text.as_bytes());\n\
    \    let mut hex_digest = sha_digest.result();\n\n    let mut digest = hex_digest.as_bytes();\n\
    \    digest.truncate(16);\n\n    // Represent `digest` as an `&[u8]` so we can\
    \ assign it back to the `digest` variable.\n    digest.copy_from_slice(&mut digest);\n\
    \n    // Convert the `&[u8]` into an `String` so we can return it.\n    String::from_utf8(digest).ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sha1`\n\
    \  --> /tmp/tmppdwf9l7m.rs:10:26\n   |\n10 |     let mut sha_digest = sha1::Sha1::new();\n\
    \   |                          ^^^^ use of undeclared crate or module `sha1`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hash = md5::Md5::new();\n    hash.update(text.as_bytes());\n\
    \    hash.as_str()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpdzh2v_ur.rs:9:20\n  |\n9 |     let mut hash = md5::Md5::new();\n\
    \  |                    ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.to_owned()\n        .into_iter()\n   \
    \     .map(|c| char_to_hex(&c))\n        .sum::<u8>()\n        .map(|x| x.to_string())\n\
    \        .filter(|&x| x != \"\\0\")\n        .map(|x| x.to_string())\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `char_to_hex` in this scope\n --> /tmp/tmp_uzgu8ix.rs:8:18\n\
    \  |\n8 |         .map(|c| char_to_hex(&c))\n  |                  ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: the method `into_iter` exists for struct\
    \ `String`, but its trait bounds were not satisfied\n   --> /tmp/tmp_uzgu8ix.rs:7:10\n\
    \    |\n7   |           .into_iter()\n    |            ^^^^^^^^^\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `String: IntoIterator`\n            `&String:\
    \ Iterator`\n            which is required by `&String: IntoIterator`\n      \
    \      `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    Some(hasher.finish().into_vec())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpjf5zmt6u.rs:9:22\n\
    \  |\n9 |     let mut hasher = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut hash = md5_hasher::Md5::new(text.as_bytes());\n\
    \    hash\n        .update_str(&text, &|into_bytes| into_bytes.as_bytes())\n \
    \       .ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5_hasher`\n\
    \ --> /tmp/tmpuzu9vxcj.rs:6:20\n  |\n6 |     let mut hash = md5_hasher::Md5::new(text.as_bytes());\n\
    \  |                    ^^^^^^^^^^ use of undeclared crate or module `md5_hasher`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut ctx = digest::digest::Context::new();\n    ctx.update(text.as_bytes());\n\
    \    ctx.final()\n        .map(|mut res| res.to_hex().as_bytes())\n        .transpose()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found reserved keyword `final`\n  --> /tmp/tmp4nwf0m94.rs:11:9\n\
    \   |\n11 |     ctx.final()\n   |         ^^^^^ expected identifier, found reserved\
    \ keyword\n   |\nhelp: escape `final` to use it as an identifier\n   |\n11 | \
    \    ctx.r#final()\n   |         ++\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared crate or module `digest`\n --> /tmp/tmp4nwf0m94.rs:9:35\n  |\n9 |\
    \     let mut ctx = digest::digest::Context::new();\n  |                     \
    \              ^^^^^^^ not found in `digest::digest`\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::task::Context;\n  |\nhelp: if you import `Context`,\
    \ refer to it directly\n  |\n9 -     let mut ctx = digest::digest::Context::new();\n\
    9 +     let mut ctx = Context::new();\n  | \n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n    let mut hasher = CString::new(text.as_bytes()).unwrap();\n    hasher.hash(&mut\
    \ MD5);\n    hasher.to_str().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `CString`\n   -->\
    \ /tmp/tmp2ycyhko6.rs:9:22\n    |\n9   |       let mut hasher = CString::new(text.as_bytes()).unwrap();\n\
    \    |                        ^^^^^^^\n    |\nhelp: a struct with a similar name\
    \ exists\n    |\n9   |     let mut hasher = String::new(text.as_bytes()).unwrap();\n\
    \    |                      ~~~~~~\nhelp: consider importing this type alias\n\
    \    |\n1   | use std::ffi::CString;\n    |\n\nerror[E0425]: cannot find value\
    \ `MD5` in this scope\n  --> /tmp/tmp2ycyhko6.rs:10:22\n   |\n10 |     hasher.hash(&mut\
    \ MD5);\n   |                      ^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.is_empty() {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(&text);\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpqczh1s21.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    // Convert any string to MD5\n    Some(match\
    \ md5_hash(&text) {\n        Ok(s) => s,\n        Err(_) => return None,\n   \
    \ })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5_hash` in this scope\n --> /tmp/tmptrh5ld2s.rs:7:16\n\
    \  |\n7 |     Some(match md5_hash(&text) {\n  |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut hash = crypto::md5::MD5::new();\n    hash.update(&text);\n\
    \    hash.as_str()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n   \
    \ assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `crypto`\n\
    \ --> /tmp/tmpxi69l1gi.rs:9:20\n  |\n9 |     let mut hash = crypto::md5::MD5::new();\n\
    \  |                    ^^^^^^ use of undeclared crate or module `crypto`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut digest = Md5::new();\n    digest.update(text.as_bytes());\n\
    \    digest.finish()\n        .map(|x| x.to_hex().to_string())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpboazshsq.rs:6:22\n\
    \  |\n6 |     let mut digest = Md5::new();\n  |                      ^^^ use of\
    \ undeclared type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        \"\" => None,\n     \
    \   x => Some(md5::digest(x.as_bytes()))\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmp7dq3g328.rs:8:19\n  |\n8 |         x => Some(md5::digest(x.as_bytes()))\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp7dq3g328.rs:7:9\n  |\n6 |     match text {\n\
    \  |           ---- this expression has type `String`\n7 |         \"\" => None,\n\
    \  |         ^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => {\n            let mut md5 = CryptoHasher::new(CryptHashAlgorithm::SHA1);\n\
    \            md5.input(text.as_bytes());\n            let mut hash = String::new();\n\
    \            md5.output(&mut hash);\n            Some(hash)\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `CryptoHasher`\n\
    \ --> /tmp/tmpmz_oz7l5.rs:9:27\n  |\n9 |             let mut md5 = CryptoHasher::new(CryptHashAlgorithm::SHA1);\n\
    \  |                           ^^^^^^^^^^^^ use of undeclared type `CryptoHasher`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `CryptHashAlgorithm`\n\
    \ --> /tmp/tmpmz_oz7l5.rs:9:45\n  |\n9 |             let mut md5 = CryptoHasher::new(CryptHashAlgorithm::SHA1);\n\
    \  |                                             ^^^^^^^^^^^^^^^^^^ use of undeclared\
    \ type `CryptHashAlgorithm`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010791
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digester = digest::digest::Digest::md5();\n    digester.input(text.as_bytes());\n\
    \    let mut buf = Vec::new();\n    let len = digester.result_slice(&mut buf).unwrap();\n\
    \    let mut md5 = String::new();\n    buf.iter().for_each(|x| md5.push(x));\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmps_95nij4.rs:9:24\n  |\n9 |     let mut digester = digest::digest::Digest::md5();\n\
    \  |                        ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps_95nij4.rs:14:38\n   |\n14 |\
    \     buf.iter().for_each(|x| md5.push(x));\n   |                            \
    \          ^ expected `char`, found reference\n   |\n   = note:   expected type\
    \ `char`\n           found reference `&_`\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |     buf.iter().for_each(|x| md5.push(*x));\n   |                 \
    \                     +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0433.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010791
