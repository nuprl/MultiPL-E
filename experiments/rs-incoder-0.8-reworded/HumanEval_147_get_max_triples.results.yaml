language: rs
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|&x| x.checked_add(1).is_zero()).count()\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for enum `Option` in the\
    \ current scope\n  --> /tmp/tmp4onqx6qo.rs:12:41\n   |\n12 |     (1..n).filter(|&x|\
    \ x.checked_add(1).is_zero()).count()\n   |                                  \
    \       ^^^^^^^ method not found in `Option<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4onqx6qo.rs:12:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n12 |     (1..n).filter(|&x| x.checked_add(1).is_zero()).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     (1..n).filter(|&x| x.checked_add(1).is_zero()).count().try_into().unwrap()\n\
    \   |                                                           ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut vec: Vec<isize> = vec![0; n];\n    for i in 0..n {\n        vec[i]\
    \ = i * i - i + 1;\n    }\n    for (i1, j1, k1) in vec.iter().enumerate().rev()\
    \ {\n        for (i2, j2, k2) in vec.iter().enumerate().rev() {\n            if\
    \ i1 < i2 && i2 < i1 && i1 < j1 && i2 < j1 && i1 < k1 && i2 < k1 && i1 < j2 &&\
    \ i2 < j2 && i1 < k2 && i2 < k2 {\n                if vec[i1] + vec[j1] + vec[k1]\
    \ % 3 == 0 {\n                    return 1 + i1 * i2 + j1 * j2 + k1 * k2;\n  \
    \              }\n            }\n        }\n    }\n    1\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4m9hljvq.rs:12:39\n   |\n\
    12 |     let mut vec: Vec<isize> = vec![0; n];\n   |                         \
    \              ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |     let mut vec: Vec<isize> = vec![0; n.try_into().unwrap()];\n   |     \
    \                                   ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4m9hljvq.rs:14:9\n\
    \   |\n14 |         vec[i] = i * i - i + 1;\n   |         ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4m9hljvq.rs:16:9\n\
    \   |\n16 |     for (i1, j1, k1) in vec.iter().enumerate().rev() {\n   |     \
    \    ^^^^^^^^^^^^    ---------------------------- this expression has type `Option<(usize,\
    \ &isize)>`\n   |         |\n   |         expected a tuple with 2 elements, found\
    \ one with 3 elements\n   |\n   = note: expected tuple `(usize, &isize)`\n   \
    \           found tuple `(_, _, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4m9hljvq.rs:17:13\n\
    \   |\n17 |         for (i2, j2, k2) in vec.iter().enumerate().rev() {\n   | \
    \            ^^^^^^^^^^^^    ---------------------------- this expression has\
    \ type `Option<(usize, &isize)>`\n   |             |\n   |             expected\
    \ a tuple with 2 elements, found one with 3 elements\n   |\n   = note: expected\
    \ tuple `(usize, &isize)`\n              found tuple `(_, _, _)`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    fn get_max_triples_in_range(range: (isize, isize, isize)) {\n       \
    \ let (lower, upper) = range;\n        let mut lower = lower % 3;\n        let\
    \ mut upper = upper % 3;\n        let mut cnt = 0;\n        for _ in 0..n {\n\
    \            if lower < lower + upper {\n                cnt += 1;\n         \
    \       lower += 2;\n            } else if lower < upper + lower {\n         \
    \       cnt += 1;\n                lower += 1;\n            } else if lower <\
    \ upper + upper {\n                cnt += 1;\n                upper += 1;\n  \
    \          } else {\n                cnt += 1;\n            }\n        }\n   \
    \     cnt\n    }\n\n    fn get_max_triples_helper(x: isize, y: isize, z: isize,\
    \ a: [isize; n]) {\n        if x + y + z < 3 {\n            return;\n        }\n\
    \        if x + y > z {\n            if y + z > x {\n                if x + z\
    \ > y {\n                    let mut cnt = 0;\n                    for _ in 0..n\
    \ {\n                        if a[_] == x + y + z {\n                        \
    \    cnt += 1;\n                            a[_] = x + y + z + 1;\n          \
    \              }\n                    }\n                    cnt\n           \
    \     } else {\n                    get_max_triples_helper(x, y, z + 1, a)\n \
    \               }\n            } else {\n                get_max_triples_helper(x,\
    \ y, z, a)\n            }\n        } else {\n            get_max_triples_helper(x,\
    \ y, z, a)\n        }\n    }\n\n    get_max_triples_in_range((n, n, n))\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpstfgmq51.rs:17:21\n\
    \   |\n17 |         for _ in 0..n {\n   |                     ^\n   |\n   = help:\
    \ use the `|| { ... }` closure form instead\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmpstfgmq51.rs:34:72\n   |\n11\
    \ | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n...\n34 |     fn get_max_triples_helper(x: isize, y: isize,\
    \ z: isize, a: [isize; n]) {\n   |                                           \
    \                             ^\n\nerror[E0434]: can't capture dynamic environment\
    \ in a fn item\n  --> /tmp/tmpstfgmq51.rs:42:33\n   |\n42 |                  \
    \   for _ in 0..n {\n   |                                 ^\n   |\n   = help:\
    \ use the `|| { ... }` closure form instead\n\nerror: in expressions, `_` can\
    \ only be used on the left-hand side of an assignment\n  --> /tmp/tmpstfgmq51.rs:43:30\n\
    \   |\n43 |                         if a[_] == x + y + z {\n   |             \
    \                 ^ `_` not allowed here\n\nerror: in expressions, `_` can only\
    \ be used on the left-hand side of an assignment\n  --> /tmp/tmpstfgmq51.rs:45:31\n\
    \   |\n45 | ...                   a[_] = x + y + z + 1;\n   |                \
    \         ^ `_` not allowed here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpstfgmq51.rs:60:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n60 |     get_max_triples_in_range((n,\
    \ n, n))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpstfgmq51.rs:13:13\n  \
    \ |\n13 |         let (lower, upper) = range;\n   |             ^^^^^^^^^^^^^^\
    \   ----- this expression has type `(isize, isize, isize)`\n   |             |\n\
    \   |             expected a tuple with 3 elements, found one with 2 elements\n\
    \   |\n   = note: expected tuple `(isize, isize, isize)`\n              found\
    \ tuple `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpstfgmq51.rs:31:9\n\
    \   |\n12 |  "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0..n].iter().cloned().collect::<Vec<_>>();\n    for\
    \ &n in a.iter_mut() {\n        *n = *n + 1;\n    }\n    a.sort_unstable();\n\
    \    let mut result = 1;\n    for &n in a.iter_mut().rev() {\n        for &n in\
    \ &a[0..n-1] {\n            for &n in &a[1..n] {\n                if n == *n +\
    \ 1 {\n                    result++;\n                    break;\n           \
    \     }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp47s5f9jt.rs:22:27\n\
    \   |\n22 |                     result++;\n   |                           ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |       \
    \              { let tmp = result; result += 1; tmp };\n   |                 \
    \    +++++++++++       ~~~~~~~~~~~~~~~~~~~~\n22 -                     result++;\n\
    22 +                     result += 1;\n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp47s5f9jt.rs:13:9\n   |\n13 |     for &n in a.iter_mut() {\n   |\
    \         ^^    ------------ this expression has type `Option<&mut std::ops::Range<isize>>`\n\
    \   |         |\n   |         types differ in mutability\n   |         help: you\
    \ can probably remove the explicit borrow: `n`\n   |\n   = note: expected mutable\
    \ reference `&mut std::ops::Range<isize>`\n                      found reference\
    \ `&_`\n\nerror[E0277]: the trait bound `std::ops::Range<isize>: Ord` is not satisfied\n\
    \    --> /tmp/tmp47s5f9jt.rs:16:7\n     |\n16   |     a.sort_unstable();\n   \
    \  |       ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::Range<isize>`\n\
    \     |\nnote: required by a bound in `core::slice::<impl [T]>::sort_unstable`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp47s5f9jt.rs:18:9\n   |\n18 | \
    \    for &n in a.iter_mut().rev() {\n   |         ^^    ------------------ this\
    \ expression has type `Option<&mut std::ops::Range<isize>>`\n   |         |\n\
    \   |         types differ in mutability\n   |         help: you can probably\
    \ remove the explicit borrow: `n`\n   |\n   = note: expected mutable reference\
    \ `&mut std::ops::Range<isize>`\n                      found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp47s5f9jt.rs:20:29\n   |\n20 |  \
    \           for &n in &a[1..n] {\n   |                             ^ expected\
    \ integer, found struct `std::ops::Range`\n   |\n   = note: expected type `{integer}`\n\
    \            found struct `std::ops::Range<isize>`\n\nerror[E0614]: type `std::ops::Range<isize>`\
    \ cannot be dereferenced\n  --> /tmp/tmp47s5f9jt.rs:21:25\n   |\n21 |        \
    \         if n == *n + 1 "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0i32; n];\n    for i in 1..(n-1) {\n        a[i] = i * i\
    \ - i + 1;\n    }\n    for i in 0..(n-1){\n        let j = n - i - 1;\n      \
    \  let k = n - i;\n        let k1 = n - j;\n        if a[i] > a[j] + a[k1]{\n\
    \            a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n  \
    \      }\n    }\n    for i in 0..(n-1){\n        let j = n - i - 1;\n        let\
    \ k = n - i;\n        let k1 = n - j;\n        if a[i] == (a[j] + a[k1]){ \n \
    \           a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n   \
    \     }\n    }\n    for i in 0..(n-1){\n        let j = n - i - 1;\n        let\
    \ k = n - i;\n        let k1 = n - j;\n        if a[j] == (a[i] + a[k1]){ \n \
    \           a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n   \
    \     }\n    }\n    for i in 0..(n-1){\n        let j = n - i - 1;\n        let\
    \ k = n - i;\n        let k1 = n - j;\n        if a[k] == (a[i] + a[j]){ \n  \
    \          a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n    \
    \    }\n    }\n    for i in 0..(n-1){\n        let j = n - i - 1;\n        let\
    \ k = n - i;\n        let k1 = n - j;\n        if a[k1] == (a[i] + a[j]){ \n \
    \           a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n   \
    \     }\n    }\n    a.len()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n\
    \  --> /tmp/tmpirl7x3bb.rs:21:17\n   |\n21 |             a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n\
    \   |                 ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmpirl7x3bb.rs:29:17\n\
    \   |\n29 |             a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n\
    \   |                 ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmpirl7x3bb.rs:37:17\n\
    \   |\n37 |             a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n\
    \   |                 ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmpirl7x3bb.rs:45:17\n\
    \   |\n45 |             a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n\
    \   |                 ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n  --> /tmp/tmpirl7x3bb.rs:53:17\n\
    \   |\n53 |             a[i],a[j],a[k1] = std::i32::MAX,std::i32::MAX,std::i32::MAX;\n\
    \   |                 ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmpirl7x3bb.rs:12:24\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    -\
    \ this would need to be a `const`\n12 |     let mut a = [0i32; n];\n   |     \
    \                   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpirl7x3bb.rs:56:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n56 |     a.len()\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    56 |     a.len().try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 7 previous errors\n\nSom"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    \n    for i in 0..(n-1){\n        if a[i] + a[i + 1] + a[i\
    \ + 2] % 3 == 0 {\n            return i + 2;\n        }\n    }\n    \n    0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_ldeqea.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt_ldeqea.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpt_ldeqea.rs:18:12\n   |\n18 |  \
    \       if a[i] + a[i + 1] + a[i + 2] % 3 == 0 {\n   |            ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpt_ldeqea.rs:18:19\n   |\n18 |  \
    \       if a[i] + a[i + 1] + a[i + 2] % 3 == 0 {\n   |                   ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt_ldeqea.rs:18:30\n\
    \   |\n18 |         if a[i] + a[i + 1] + a[i + 2] % 3 == 0 {\n   |           \
    \                   ^^^^^^^^ slice indices are of type `usize` or ranges "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n-1 {\n        for j in i..n\
    \ {\n            assert!(i % 3 != 0);\n            assert!(j % 3 != 0);\n    \
    \        a[i] += i;\n            a[j] += i;\n            a[k] += i;\n        }\n\
    \    }\n    a.iter().filter(|&i| i % 3 == 0).count()\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `k` in this scope\n   --> /tmp/tmplqguz5y6.rs:19:15\n\
    \    |\n19  |             a[k] += i;\n    |               ^ help: a tuple variant\
    \ with a similar name exists: `Ok`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplqguz5y6.rs:12:25\n\
    \   |\n12 |     let mut a = vec![0; n];\n   |                         ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0;\
    \ n.try_into().unwrap()];\n   |                          ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplqguz5y6.rs:17:13\n\
    \   |\n17 |             a[i] += i;\n   |             ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplqguz5y6.rs:18:13\n   |\n18 |  \
    \           a[j] += i;\n   |             ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplqguz5y6.rs:22:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n22 |     a.iter().filter(|&i| i % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n22 |     a.iter().filter(|&i|\
    \ i % 3 == 0).count().try_into().unwrap()\n   |                              \
    \               +++++++++++++++++"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 1..n {\n        for j in 1..i {\n    \
    \        for k in 1..j {\n                if i == j && i == k && j != k {\n  \
    \                  sum += 3;\n                }\n            }\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpe7j5dqpw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max_triples = 1;\n    for i in 1..n {\n        for j in 1..i\
    \ {\n            for k in 1..j {\n                if i * i + j * j + k * k > max_triples\
    \ * 3 {\n                    max_triples = i * i + j * j + k * k;\n          \
    \      }\n            }\n        }\n    }\n    return max_triples;\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `1`', /tmp/tmp6bc0685d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n] = Default::default();\n    for i in 0..n {\n  \
    \      a[i] = i * i - i + 1;\n    }\n    for ((i, j), k) in a.iter().zip(&a[0..n]).rev()\
    \ {\n        if i % 3 == 0 || i % 3 == 1 && j % 3 == 0 || i % 3 == 1 && j % 3\
    \ == 1 && k % 3 == 0 {\n            return 1;\n        }\n    }\n    0\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpslgaqzwq.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n] = Default::default();\n   |                        ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpslgaqzwq.rs:16:10\n   |\n16 |     for ((i, j),\
    \ k) in a.iter().zip(&a[0..n]).rev() {\n   |          ^^^^^^        ----------------------------\
    \ this expression has type `Option<(&usize, _)>`\n   |          |\n   |      \
    \    expected `usize`, found tuple\n   |\n   = note: expected type `usize`\n \
    \            found tuple `(_, _)`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 { return 0; }\n\n    let mut a_vec: Vec<_> = Vec::with_capacity(n);\n\
    \    for i in 1..=n {\n        let a = i * i - i + 1;\n        a_vec.push(i);\n\
    \        a_vec.push(j);\n        a_vec.push(k);\n    }\n\n    a_vec\n        .iter()\n\
    \        .filter(|&a| a % 3 == 0)\n        .count() + 1\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmp6b_5ltg1.rs:18:20\n\
    \   |\n18 |         a_vec.push(j);\n   |                    ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `k` in this\
    \ scope\n   --> /tmp/tmp6b_5ltg1.rs:19:20\n    |\n19  |         a_vec.push(k);\n\
    \    |                    ^ help: a tuple variant with a similar name exists:\
    \ `Ok`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6b_5ltg1.rs:14:48\n  \
    \ |\n14 |     let mut a_vec: Vec<_> = Vec::with_capacity(n);\n   |           \
    \                                     ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n14 |     let mut a_vec: Vec<_> = Vec::with_capacity(n.try_into().unwrap());\n\
    \   |                                                 ++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp6b_5ltg1.rs:22:5\n   |\n11 |   fn\
    \ get_max_triples(n: isize) -> isize {\n   |                                 \
    \  ----- expected `isize` because of return type\n...\n22 | /     a_vec\n23 |\
    \ |         .iter()\n24 | |         .filter(|&a| a % 3 == 0)\n25 | |         .count()\
    \ + 1\n   | |____________________^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n22 ~     (a_vec\n23 |         .iter()\n24 |         .filter(|&a|\
    \ a % 3 == 0)\n25 ~         .count() + 1).try_into().unwrap()\n   |\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 0 {\n        0\n    } else if n == 0 {\n        0\n    } else\
    \ {\n        let mut a_vec = vec![0; (n - 1) + 1];\n        for a in a_vec {\n\
    \            a * a - a - a += 1;\n        }\n        let mut result = a_vec[0];\n\
    \        for i in 0..a_vec.len() - 2 {\n            for j in i + 1 to a_vec.len()\
    \ - 2 {\n                if a_vec[i] + a_vec[j] + a_vec[k] % 3 == 0 {\n      \
    \              result += 1;\n                }\n            }\n        }\n   \
    \     result\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `to`\n  --> /tmp/tmpd4jpds1n.rs:23:28\n   |\n\
    23 |             for j in i + 1 to a_vec.len() - 2 {\n   |                   \
    \         ^^ expected `{`\n   |\nhelp: try placing this code inside a block\n\
    \   |\n23 |             for j in i + 1 { to } a_vec.len() - 2 {\n   |        \
    \                    +    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd4jpds1n.rs:17:33\n\
    \   |\n17 |         let mut a_vec = vec![0; (n - 1) + 1];\n   |              \
    \                   ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |         let mut a_vec = vec![0; ((n - 1) + 1).try_into().unwrap()];\n\
    \   |                                 +           +++++++++++++++++++++\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n  --> /tmp/tmpd4jpds1n.rs:19:27\n   |\n\
    19 |             a * a - a - a += 1;\n   |             ------------- ^^\n   |\
    \             |\n   |             cannot assign to this expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0067, E0308.\n\
    For more information about an error, try `rustc --explain E0067`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Write your code here.\n    let mut a = vec![1; n];\n    for x in &mut\
    \ a {\n        if *x >= 3 {\n            *x = *x * 3 - x + 1;\n        }\n   \
    \ }\n    let mut cnt = 0;\n    for i in &mut a {\n        for j in &mut a {\n\
    \            if *i >= *j {\n                continue;\n            }\n       \
    \     if *i + *j == 3 {\n                cnt++;\n            }\n        }\n  \
    \  }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpxj7isd90.rs:26:20\n\
    \   |\n26 |                 cnt++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n26 |                 { let tmp\
    \ = cnt; cnt += 1; tmp };\n   |                 +++++++++++    ~~~~~~~~~~~~~~~~~\n\
    26 -                 cnt++;\n26 +                 cnt += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxj7isd90.rs:13:25\n   |\n13 |     let mut a\
    \ = vec![1; n];\n   |                         ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     let mut a = vec![1; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: cannot subtract\
    \ `&mut {integer}` from `{integer}`\n  --> /tmp/tmpxj7isd90.rs:16:25\n   |\n16\
    \ |             *x = *x * 3 - x + 1;\n   |                         ^ no implementation\
    \ for `{integer} - &mut {integer}`\n   |\n   = help: the trait `Sub<&mut {integer}>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 {\n        return 0;\n    }\n\n    let mut a: Vec<isize> =\
    \ vec![0; n];\n\n    for i in 1..n{\n        for j in 1..n{\n            for k\
    \ in 1..n{\n                if i + j + k == n {\n                    a[i + j +\
    \ k] = (i * i - i * i + i + j * j + k * k) % 3;\n                }\n         \
    \   }\n        }\n    }\n\n    if a.iter().filter(|x| *x == 0).count() == 0 {\n\
    \        return 0;\n    }\n    \n    let mut sum = 0;\n    for i in 0..n {\n \
    \       sum += a[i];\n    }\n    \n    for i in 1..n {\n        if a[i] == sum\
    \ {\n            return i;\n        }\n    }\n    \n    0\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptl8j882w.rs:16:37\n   |\n\
    16 |     let mut a: Vec<isize> = vec![0; n];\n   |                           \
    \          ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n16 |     let\
    \ mut a: Vec<isize> = vec![0; n.try_into().unwrap()];\n   |                  \
    \                    ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptl8j882w.rs:22:21\n   |\n22 |  \
    \                   a[i + j + k] = (i * i - i * i + i + j * j + k * k) % 3;\n\
    \   |                     ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmptl8j882w.rs:28:31\n   |\n28 |     if a.iter().filter(|x| *x ==\
    \ 0).count() == 0 {\n   |                               ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmptl8j882w.rs:34:16\n   |\n34 |         sum\
    \ += a[i];\n   |                ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmptl8j882w.rs:38:12\n   |\n38 |         if a[i] == sum"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [(isize, isize, isize)] = [];\n    for i in 1..n {\n     \
    \   a[i] = (i * i - i + 1, i, i);\n    }\n    a.iter().filter(|&(_, i, j)| {\n\
    \        if i != j {\n            a.iter().any(|&(_, _, _)| {\n              \
    \  i.wrapping_add(j) == i.wrapping_add(k).wrapping_add(j)\n            })\n  \
    \      } else {\n            true\n        }\n    }).count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `k` in this scope\n   --> /tmp/tmpgsv5pz48.rs:19:53\n\
    \    |\n19  |                 i.wrapping_add(j) == i.wrapping_add(k).wrapping_add(j)\n\
    \    |                                                     ^ help: a tuple variant\
    \ with a similar name exists: `Ok`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgsv5pz48.rs:12:42\n\
    \   |\n12 |     let mut a: [(isize, isize, isize)] = [];\n   |               \
    \ -----------------------   ^^ expected slice, found array of 0 elements\n   |\
    \                |\n   |                expected due to this\n   |\n   = note:\
    \ expected slice `[(isize, isize, isize)]`\n              found array `[_; 0]`\n\
    \nerror[E0277]: the size for values of type `[(isize, isize, isize)]` cannot be\
    \ known at compilation time\n  --> /tmp/tmpgsv5pz48.rs:12:9\n   |\n12 |     let\
    \ mut a: [(isize, isize, isize)] = [];\n   |         ^^^^^ doesn't have a size\
    \ known at compile-time\n   |\n   = help: the trait `Sized` is not implemented\
    \ for `[(isize, isize, isize)]`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\n\nerror[E0277]:\
    \ the type `[(isize, isize, isize)]` cannot be indexed by `isize`\n  --> /tmp/tmpgsv5pz48.rs:14:9\n\
    \   |\n14 |         a[i] = (i * i - i + 1, i, i);\n   |         ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[(isize,\
    \ isize, isize)]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[(isize, isize, isize)]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgsv5pz48.rs:19:32\n   |\n19 |              \
    \   i.wrapping_add(j) == i.wrapping_add(k).wrapping_add(j)\n   |             \
    \                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n19 |                 i.wrapping_add(*j) == i.wrapping_add(k).wrapping_add(j)\n\
    \   |                                +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgsv5pz48.rs:19:6"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 0 {\n        0\n    } else {\n        let mut a = Vec::new();\n\
    \        for i in 1..n {\n            a.push(i * i - i + 1);\n        }\n    \
    \    \n        let mut count = 1;\n        let mut triple = 0;\n        for (i,\
    \ j, k) in a.iter().rev() {\n            if i < j && i < k {\n               \
    \ triple += 1;\n            }\n            if i > j && i < k {\n             \
    \   triple += 1;\n            }\n        }\n        \n        triple += 1;\n \
    \       return triple;\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_lrqz_i1.rs:22:13\n   |\n\
    22 |         for (i, j, k) in a.iter().rev() {\n   |             ^^^^^^^^^   \
    \ -------------- this expression has type `Option<&isize>`\n   |             |\n\
    \   |             expected `isize`, found tuple\n   |\n   = note: expected type\
    \ `isize`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (0..n).fold(0, |a, i| {\n        a.iter().any(|j| {\n            a.iter().any(|k|\
    \ {\n                a[i + j] + a[j + k] + a[k + i] % 3 == 0\n            })\n\
    \        })\n    })\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpq5s5l57s.rs:13:11\n   |\n13 |         a.iter().any(|j|\
    \ {\n   |           ^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `iter` found for type `isize` in the current scope\n  --> /tmp/tmpq5s5l57s.rs:14:15\n\
    \   |\n14 |             a.iter().any(|k| {\n   |               ^^^^ method not\
    \ found in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpq5s5l57s.rs:15:17\n   |\n15 |                 a[i + j] + a[j +\
    \ k] + a[k + i] % 3 == 0\n   |                 ^^^^^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpq5s5l57s.rs:15:28\n   |\n\
    15 |                 a[i + j] + a[j + k] + a[k + i] % 3 == 0\n   |           \
    \                 ^^^^^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpq5s5l57s.rs:15:39\n   |\n15 |                 a[i + j]\
    \ + a[j + k] + a[k + i] % 3 == 0\n   |                                       ^^^^^^^^\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max: isize = 0;\n    let mut triple = 0;\n\n    let mut a = [0i32;\
    \ n];\n\n    for i in 0..n - 1 {\n        a[i] = i * i - i + 1;\n        if a[i]\
    \ > max {\n            max = a[i];\n            triple = i;\n        }\n    }\n\
    \    return triple;\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpr2knyti1.rs:15:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n...\n15 |    \
    \ let mut a = [0i32; n];\n   |                        ^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    \n    // Create a vector of length n\n    let mut vec = Vec::new();\n\
    \    for i in 1..n {\n        vec.push(i);\n    }\n    \n    // Sort the vector\
    \ using bubble sort and check \n    // how many numbers are triples\n    for ele\
    \ in vec.iter().cloned() {\n        let mut j = 1;\n        let mut count = 0;\n\
    \        while j < ele {\n            if ele % j == 0 {\n                count\
    \ += 1;\n                j += 1;\n            } else {\n                break;\n\
    \            }\n        }\n        if count > 1 {\n            count -= 1;\n \
    \       }\n    }\n    \n    // Return count of triple numbers\n    count\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `count` in this scope\n  --> /tmp/tmpye97is6b.rs:38:5\n\
    \   |\n38 |     count\n   |     ^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for _ in 0..n {\n        a.push(0);\n\
    \    }\n    \n    for _ in 0..n {\n        for _ in 0..n {\n            a.push(0);\n\
    \        }\n    }\n    \n    for x in a {\n        a.push(x + 1);\n    }\n   \
    \ \n    let mut cnt = 0;\n    for x in a {\n        for y in a {\n           \
    \ for z in a {\n                if x > y && x > z && y > z {\n               \
    \     cnt += 1;\n                    break;\n                }\n            }\n\
    \        }\n    }\n    \n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `a`\n   --> /tmp/tmp8j6epvdu.rs:24:9\n\
    \    |\n12  |     let mut a: Vec<isize> = vec![];\n    |         ----- move occurs\
    \ because `a` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    ...\n23  |     for x in a {\n    |              - `a` moved due to this implicit\
    \ call to `.into_iter()`\n24  |         a.push(x + 1);\n    |         ^^^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `a`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n23\
    \  |     for x in &a {\n    |              +\n\nerror[E0382]: use of moved value:\
    \ `a`\n  --> /tmp/tmp8j6epvdu.rs:29:18\n   |\n12 |     let mut a: Vec<isize> =\
    \ vec![];\n   |         ----- move occurs because `a` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n28 |     for x in a {\n   |      \
    \        - `a` moved due to this implicit call to `.into_iter()`\n29 |       \
    \  for y in a {\n   |                  ^ value used here after move\n   |\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n   |\n28 |     for x in &a {\n   |              +\n\nerror[E0382]:\
    \ use of moved value: `a`\n  --> /tmp/tmp8j6epvdu.rs:30:22\n   |\n12 |     let\
    \ mut a: Vec<isize> = vec![];\n   |         ----- move occurs because `a` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n29 |    \
    \     for y in a {\n   |                  - `a` moved due to this implicit call\
    \ to `.into_iter()`\n30 |             for z in a {\n   |                     \
    \ ^ value used here after move\n   |\nhelp: consider iterating over a slice of\
    \ the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n29 | \
    \        for y in &a {\n   |                  +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<_> = vec![0; n];\n    for i in 0..n {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    a.sort();\n    let mut cnt = 0;\n    for i in 1..a.len()\
    \ {\n        if a[i] > a[i - 1] {\n            cnt += 1;\n        }\n    }\n \
    \   cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxh88gjv3.rs:12:33\n   |\n\
    12 |     let mut a: Vec<_> = vec![0; n];\n   |                               \
    \  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ a: Vec<_> = vec![0; n.try_into().unwrap()];\n   |                          \
    \        ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpxh88gjv3.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max_triple = 0;\n    let mut a = [0; n];\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for i in 0..n {\n        for j in (i\
    \ + 1)..n {\n            for k in (i + 2)..n {\n                if a[i] == a[j]\
    \ + a[k] {\n                    if i == j && i == k && a[i] % 3 == 0 {\n     \
    \                   max_triple += 1;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if max_triple == 0 {\n        max_triple\
    \ = 1\n    }\n    return max_triple\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpnv9_d4sz.rs:13:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ max_triple = 0;\n13 |     let mut a = [0; n];\n   |                     ^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in i+1..n\
    \ {\n            if a[i] == 0 && a[j] == 0 && a[k] == 0 {\n                cnt\
    \ += 1;\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp6sdm68i7.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0425]: cannot find value `k`\
    \ in this scope\n   --> /tmp/tmp6sdm68i7.rs:19:44\n    |\n19  |             if\
    \ a[i] == 0 && a[j] == 0 && a[k] == 0 {\n    |                               \
    \             ^ help: a tuple variant with a similar name exists: `Ok`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0435.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![1; n + 1];\n    for i in 1..n + 1 {\n        let s =\
    \ i * i - i + 1;\n        for j in 0..i {\n            let t = i * i + j;\n  \
    \          let k = s * j - t; //k is multiple of 3\n            if k != 0 && a[j]\
    \ > a[k] {\n                a[j] = a[k];\n            }\n        }\n    }\n  \
    \  a.iter().filter(|&x| x.is_multiple_of_three()).count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxksov4qs.rs:12:25\n   |\n\
    12 |     let mut a = vec![1; n + 1];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut a = vec![1;\
    \ (n + 1).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxksov4qs.rs:18:26\n\
    \   |\n18 |             if k != 0 && a[j] > a[k] {\n   |                     \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxksov4qs.rs:18:33\n\
    \   |\n18 |             if k != 0 && a[j] > a[k] {\n   |                     \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxksov4qs.rs:19:17\n\
    \   |\n19 |                 a[j] = a[k];\n   |                 ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxksov4qs.rs:19:24\n   |\n19 |  \
    \               a[j] = a[k];\n   |                        ^^^^ slice indices are\
    \ of type `usize` or range"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut cnt: isize = 0;\n    for i in 1..n {\n        let mut a = vec![*i;\
    \ i];\n        for j in i..n {\n            for k in 0..i {\n                if\
    \ i + j + k == 3 {\n                    cnt += 1;\n                }\n       \
    \     }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp4phqamw6.rs:14:26\n\
    \   |\n14 |         let mut a = vec![*i; i];\n   |                          ^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4phqamw6.rs:14:30\n   |\n14 |\
    \         let mut a = vec![*i; i];\n   |                              ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |         let mut a =\
    \ vec![*i; i.try_into().unwrap()];\n   |                               ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return n;\n    }\n    let mut cnt: isize = 0;\n \
    \   let mut i = 1;\n    while i <= n {\n        cnt += 1;\n        let mut j =\
    \ i;\n        while j < n {\n            cnt += 1;\n            j += 1;\n    \
    \    }\n        i += 1;\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `1`', /tmp/tmp7af3ww4w.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut total: isize = 0;\n    let mut a: [isize; n + 1] = Array::new();\n\
    \n    a[0] = 1;\n    a[1] = 1;\n    a[2] = 1;\n    \n    for i in 2..n + 1 {\n\
    \        a[i] = a[2 * i - 1] + a[2 * i] - 1;\n        if a[i] % 3 == 0 {\n   \
    \         total += 1;\n        }\n    }\n    total\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpfd4zfsya.rs:13:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ total: isize = 0;\n13 |     let mut a: [isize; n + 1] = Array::new();\n   |\
    \                        ^\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Array`\n  --> /tmp/tmpfd4zfsya.rs:13:33\n   |\n13 |     let mut a: [isize;\
    \ n + 1] = Array::new();\n   |                                 ^^^^^ use of undeclared\
    \ type `Array`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0433, E0435.\nFor more information about an error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // The last index is the number of the triples\n    // If a[i] = i *\
    \ i - 1 + 1, then a[n] = a[n-1] - a[n-2]\n    let mut max_triples = n - 1;\n \
    \   let mut a: [isize; n] =\n        [2; n];\n    for &j in a.iter_mut() {\n \
    \       *j = 0;\n    }\n    for &i in a.iter_mut() {\n        *i = i - 1;\n  \
    \  }\n    for &k in a.iter_mut() {\n        *k = k - 1;\n    }\n    for i in 1..n\
    \ {\n        a[i] = i * i - 1 + 1;\n        if a[i] > a[j] + a[k] {\n        \
    \    a[i] = a[j] + a[k];\n            max_triples = i;\n        }\n    }\n   \
    \ max_triles\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmprfdk735z.rs:15:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n...\n15 |    \
    \ let mut a: [isize; n] =\n   |                        ^\n\nerror[E0435]: attempt\
    \ to use a non-constant value in a constant\n  --> /tmp/tmprfdk735z.rs:16:13\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    -\
    \ this would need to be a `const`\n...\n16 |         [2; n];\n   |           \
    \  ^\n\nerror[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmprfdk735z.rs:28:21\n\
    \   |\n28 |         if a[i] > a[j] + a[k] {\n   |                     ^ help:\
    \ a local variable with a similar name exists: `a`\n\nerror[E0425]: cannot find\
    \ value `k` in this scope\n   --> /tmp/tmprfdk735z.rs:28:28\n    |\n28  |    \
    \     if a[i] > a[j] + a[k] {\n    |                            ^ help: a tuple\
    \ variant with a similar name exists: `Ok`\n\nerror[E0425]: cannot find value\
    \ `j` in this scope\n  --> /tmp/tmprfdk735z.rs:29:22\n   |\n29 |             a[i]\
    \ = a[j] + a[k];\n   |                      ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror[E0425]: cannot find value `k` in this scope\n   -->\
    \ /tmp/tmprfdk735z.rs:29:29\n    |\n29  |             a[i] = a[j] + a[k];\n  \
    \  |                             ^ help: a tuple variant with a similar name exists:\
    \ `Ok`\n\nerror[E0425]: cannot find value `max_triles` in this scope\n  --> /tmp/tmprfdk735z.rs:33:5\n\
    \   |\n33 |     max_triles\n   |     ^^^^^^^^^^ help: a local variable with a\
    \ similar name exists: `max_triples`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprfdk735z.rs:17:9\n   |\n17 |     for &j in a.iter_mut() {\n   |    \
    \     ^^    ------------ this expression has type `Option<&mut isize>`\n   | \
    \        |\n   |         types differ in mutability\n   |         help: you can\
    \ probably remove the explicit borrow: `j`\n   |\n   = note: expected mutable\
    \ reference `&mut isize`\n                      found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprfdk735z.rs:20:9\n   |\n20 | "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    let mut a = vec![0; n + 1];\n    a[0] = 1;\n\
    \    a[1] = 1;\n    for i in 2..n + 1 {\n        a[i] = i * i - i + 1;\n     \
    \   if a[i] % 3 == 0 {\n            triples += 1;\n        }\n    }\n    triples\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpte0213ef.rs:13:25\n   |\n\
    13 |     let mut a = vec![0; n + 1];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     let mut a = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpte0213ef.rs:17:9\n\
    \   |\n17 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpte0213ef.rs:18:12\n   |\n18 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    sum % 3 == 0\
    \ || 0\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdykd790l.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpdykd790l.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdykd790l.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdykd790l.rs:18:21\n   |\n18 |     sum % 3 == 0 || 0\n   |          \
    \           ^ expected `bool`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdykd790l.rs:18:5\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n18 |     sum % 3 == 0 || 0\n   |     ^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `bool`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![];\n    for i in 1..n {\n        for j in 1..n {\n \
    \           for k in 1..n {\n                if i > j > k && i * i + j * j + k\
    \ * k == 3 * i + 3 * j + k * i {\n                    a.push(i * i - i + 1, j\
    \ * j - i + 1, k * k - i + 1);\n                }\n            }\n        }\n\
    \    }\n    a.iter().max().unwrap_or(1)\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpnupp041m.rs:16:22\n\
    \   |\n16 |                 if i > j > k && i * i + j * j + k * k == 3 * i + 3\
    \ * j + k * i {\n   |                      ^   ^\n   |\n   = help: use `::<...>`\
    \ instead of `<...>` to specify lifetime, type, or const arguments\n   = help:\
    \ or use `(...)` if you meant to specify fn arguments\nhelp: split the comparison\
    \ into two\n   |\n16 |                 if i > j && j > k && i * i + j * j + k\
    \ * k == 3 * i + 3 * j + k * i {\n   |                          ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnupp041m.rs:22:30\n   |\n22 |     a.iter().max().unwrap_or(1)\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&1`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnupp041m.rs:22:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n22 |     a.iter().max().unwrap_or(1)\n   |    \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\nhelp: consider dereferencing\
    \ the borrow\n   |\n22 |     *a.iter().max().unwrap_or(1)\n   |     +\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|i|\n        (1..n).filter(|j|\n            (1..n).filter(|k|\n\
    \                let (a1, a2, a3) = (i * i - i + 1, j * j - j + 1, k * k - k +\
    \ 1)\n                (a1 + a2 + a3) % 3 == 0\n            ).count() > 1\n   \
    \     ).count() > 1\n    ).count()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found statement (`let`)\n  --> /tmp/tmpp0643_0_.rs:15:17\n\
    \   |\n15 | /                 let (a1, a2, a3) = (i * i - i + 1, j * j - j + 1,\
    \ k * k - k + 1)\n16 | |                 (a1 + a2 + a3) % 3 == 0\n   | |_______________________________________^\n\
    \   |\n   = note: variable declaration using `let` is a statement\n\nerror[E0425]:\
    \ cannot find value `a1` in this scope\n  --> /tmp/tmpp0643_0_.rs:16:18\n   |\n\
    16 |                 (a1 + a2 + a3) % 3 == 0\n   |                  ^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `a2` in this scope\n  --> /tmp/tmpp0643_0_.rs:16:23\n\
    \   |\n16 |                 (a1 + a2 + a3) % 3 == 0\n   |                    \
    \   ^^ not found in this scope\n\nerror[E0425]: cannot find value `a3` in this\
    \ scope\n  --> /tmp/tmpp0643_0_.rs:16:28\n   |\n16 |                 (a1 + a2\
    \ + a3) % 3 == 0\n   |                            ^^ not found in this scope\n\
    \nerror[E0658]: `let` expressions in this position are unstable\n  --> /tmp/tmpp0643_0_.rs:15:17\n\
    \   |\n15 | /                 let (a1, a2, a3) = (i * i - i + 1, j * j - j + 1,\
    \ k * k - k + 1)\n16 | |                 (a1 + a2 + a3) % 3 == 0\n   | |_______________________________________^\n\
    \   |\n   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667>\
    \ for more information\n\nerror[E0618]: expected function, found `(isize, isize,\
    \ isize)`\n  --> /tmp/tmpp0643_0_.rs:15:36\n   |\n15 |                   let (a1,\
    \ a2, a3) = (i * i - i + 1, j * j - j + 1, k * k - k + 1)\n   |  ____________________________________-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    16 | |                 (a1 + a2 + a3) % 3 == 0\n   | |______________________________-\
    \ call expression requires function\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp0643_0_.rs:15:21\n\
    \   |\n15 |                   let (a1, a2, a3) = (i * i - i + 1, j * j - j + 1,\
    \ k * k - k + 1)\n   |  _____________________^^^^^^^^^^^^___-\n   | |        \
    \             |\n   | |                     expected `bool`, found tuple\n16 |\
    \ |                 (a1 + a2 + a3) % 3 == 0\n   | |_____________________________"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert_eq!(n, 5);\n    let mut a = [0; n];\n    a[0] = 0;\n   \
    \ a[1] = 1;\n    a[2] = 1;\n    a[3] = 1;\n    a[4] = 1;\n    for &i in &a[..]\
    \ {\n        for &j in &a[..] {\n            for &k in &a[..] {\n            \
    \    if i + j + k == 3 {\n                    debug_assert!(i % 3 != 0 && j %\
    \ 3 != 0 && k % 3 != 0);\n                    return a.iter().filter(|&x| x %\
    \ 3 == 0).count();\n                }\n            }\n        }\n    }\n    0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp7b91igru.rs:13:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     debug_assert_eq!(n,\
    \ 5);\n13 |     let mut a = [0; n];\n   |                     ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7b91igru.rs:24:28\n   |\n24 |              \
    \       return a.iter().filter(|&x| x % 3 == 0).count();\n   |               \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n24 |                     return a.iter().filter(|&x|\
    \ x % 3 == 0).count().try_into().unwrap();\n   |                             \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Step 1: Compute all triples. \n    // a[i] and a[j] are both <= n.\
    \ \n    // a[i] >= i * i - i + 1 = i * i - i - 1 = 0, so \n    // a[i] >= a[j].\n\
    \    // a[i] >= a[j] implies a[j] + a[k] = 0, where k is the smallest integer\
    \ such that a[i] >= a[j].\n    let mut a = vec![0; n];\n    let mut i = 1;\n \
    \   for j in 0..n-1 { \n        if a[j] > a[j] { \n            a[j] = a[j] + a[i]\
    \ - a[j] - a[i];\n        }\n        i += 1; \n    }\n    \n    // Step 2: Count\
    \ triples. \n    let mut count_triples = 0;\n    for i in 0..n-1 { \n        for\
    \ j in 0..n-1 { \n            for k in 0..n-1 { \n                if i == j &&\
    \ j == k { continue; }\n                count_triples += a[i] >= a[j] + a[k] &&\
    \ a[j] >= a[k];\n            }\n        }\n    }\n    count_triples\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxcbr8qqn.rs:17:25\n   |\n\
    17 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxcbr8qqn.rs:20:12\n\
    \   |\n20 |         if a[j] > a[j] { \n   |            ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxcbr8qqn.rs:20:19\n   |\n20 |  \
    \       if a[j] > a[j] { \n   |                   ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxcbr8qqn.rs:21:13\n   |\n21 |  \
    \           a[j] = a[j] + a[i] - a[j] - a[i];\n   |             ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxcbr8qqn.rs:21:20\n   |\n21 |  \
    \           a[j] = a[j] + a[i] - a[j] - a[i];\n   |                    ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceInd"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum_a = 0;\n    let mut count = 1;\n    let mut max_triples =\
    \ 1;\n    let mut a = vec![1..n];\n    for &i in a { sum_a += i; }\n    for &i\
    \ in a {\n        for &j in &a[..] {\n            for &k in &a[..] {\n       \
    \         if i != j && j != k && i != k && sum_a + j + k % 3 == 0 {\n        \
    \            count += 1;\n                    if count > max_triples {\n     \
    \                   max_triples = count;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return max_triples;\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeg35dhyk.rs:16:9\n   |\n\
    16 |     for &i in a { sum_a += i; }\n   |         ^^    - this expression has\
    \ type `Option<std::ops::Range<isize>>`\n   |         |\n   |         expected\
    \ struct `std::ops::Range`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note: expected struct `std::ops::Range<isize>`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeg35dhyk.rs:17:9\n\
    \   |\n17 |     for &i in a {\n   |         ^^    - this expression has type `Option<std::ops::Range<isize>>`\n\
    \   |         |\n   |         expected struct `std::ops::Range`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note: expected struct `std::ops::Range<isize>`\n           found reference\
    \ `&_`\n\nerror[E0277]: cannot add `std::ops::Range<isize>` to `{integer}`\n \
    \ --> /tmp/tmpeg35dhyk.rs:20:56\n   |\n20 |                 if i != j && j !=\
    \ k && i != k && sum_a + j + k % 3 == 0 {\n   |                              \
    \                          ^ no implementation for `{integer} + std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Add<std::ops::Range<isize>>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0369]: cannot mod `std::ops::Range<isize>` by `{integer}`\n\
    \  --> /tmp/tmpeg35dhyk.rs:20:64\n   |\n20 |                 if i != j && j !=\
    \ k && i != k && sum_a + j + k % 3 == 0 {\n   |                              \
    \                                - ^ - {integer}\n   |                       \
    \                                       |\n   |                              \
    \                                std::ops::Range<isize>\n\nerror: aborting due\
    \ to 4 previous"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut counter = 0;\n    for i in 1..=n{\n        if i <= n{\n     \
    \       for j in 1..=n{\n                if j > i{\n                    for k\
    \ in 1..=n{\n                        if k > i && k > j{\n                    \
    \        let res = (i as i64) + (j as i64) + (k as i64);\n                   \
    \         if res == ((i * i) + (j * j) + (k * k)) as i64{\n                  \
    \              counter += 1;\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    counter\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6rvprnyf.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    match n {\n        1 => 0,\n        2 => 1,\n        _ => 1,\n    }\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpwh4m19f7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert!(n > 0);\n\n    let mut res = 0;\n\n    for _ in 0..n {\n\
    \        for a in (0..n).rev() {\n            let mut k = a;\n            while\
    \ k < n && k + a == k + k {\n                k+=1;\n            }\n          \
    \  res += k;\n        }\n    }\n\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `75`,\n right: `1`', /tmp/tmp4d7pmkna.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![];\n    for i in 1..n{\n        a.push(3*i - i - 1);\n\
    \    }\n    let mut sum = 0;\n    for i in 0..a.len(){\n        sum += a[i] +\
    \ a[i+1] + a[i+2];\n    }\n    sum == a.len()\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbe73lzcu.rs:20:12\n   |\n\
    20 |     sum == a.len()\n   |            ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     sum == a.len().try_into().unwrap()\n   | \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbe73lzcu.rs:20:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n20 |     sum == a.len()\n   |     ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 { return 0; }\n    let mut vec: Vec<i32> = vec![0; n];\n  \
    \  for i in 1..n {\n        vec[i] += i * i - i + 1;\n    }\n    let mut triple\
    \ = 0;\n    for i in 0..n {\n        for j in 0..n {\n            for k in 0..n\
    \ {\n                if vec[i] + vec[j] + vec[k] == 0 {\n                    continue;\n\
    \                }\n                if vec[i] > triple {\n                   \
    \ triple = vec[i];\n                }\n            }\n        }\n    }\n    triple\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5b5e23kx.rs:13:37\n   |\n\
    13 |     let mut vec: Vec<i32> = vec![0; n];\n   |                           \
    \          ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n13 |     let\
    \ mut vec: Vec<i32> = vec![0; n.try_into().unwrap()];\n   |                  \
    \                    ++++++++++++++++++++\n\nerror[E0277]: the type `[i32]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5b5e23kx.rs:15:9\n   |\n15 |         vec[i]\
    \ += i * i - i + 1;\n   |         ^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp5b5e23kx.rs:21:20\n   |\n21 |                 if vec[i] + vec[j]\
    \ + vec[k] == 0 {\n   |                    ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp5b5e23kx.rs:21:29\n   |\n21 |                 if vec[i]\
    \ + vec[j] + vec[k] == 0 {\n   |                             ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp5b5e23kx.rs:21:38\n   |\n21 |                 if vec[i]\
    \ + vec[j] + vec[k] == 0 {\n   |                                      ^^^^^^ slice\
    \ indices are of "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 {\n        return 0;\n    }\n    \n    let mut i = 1; // 1\
    \ \u2264 i \u2264 n\n    let mut sum = 0; // 0 \u2264 sum < n\n    \n    let mut\
    \ max_triple = 1;\n    \n    while i < n {\n        let mut j = 1; // 1 \u2264\
    \ j \u2264 n\n        let mut sum = 0; // 0 \u2264 sum < n\n        \n       \
    \ while j < n {\n            let mut k = 1; // 1 \u2264 k \u2264 n\n         \
    \   let mut sum = 0; // 0 \u2264 sum < n\n            \n            while k <\
    \ n {\n                sum += k + j;\n                k++;\n            }\n  \
    \          \n            if sum % 3 == 0 {\n                if i == k {\n    \
    \                max_triple++;\n                }\n            }\n           \
    \ j++;\n        }\n        \n        sum += i;\n        sum -= max_triple;\n \
    \       \n        if sum % 3 == 0 {\n            if i == k {\n               \
    \ max_triple++;\n            }\n        }\n        i++;\n    }\n    \n    max_triple\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpxbl27bkb.rs:31:18\n\
    \   |\n31 |                 k++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n31 |                 { let tmp\
    \ = k; k += 1; tmp };\n   |                 +++++++++++  ~~~~~~~~~~~~~~~\n31 -\
    \                 k++;\n31 +                 k += 1;\n   | \n\nerror: Rust has\
    \ no postfix increment operator\n  --> /tmp/tmpxbl27bkb.rs:36:31\n   |\n36 | \
    \                    max_triple++;\n   |                               ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n36 |       \
    \              { let tmp = max_triple; max_triple += 1; tmp };\n   |         \
    \            +++++++++++           ~~~~~~~~~~~~~~~~~~~~~~~~\n36 -            \
    \         max_triple++;\n36 +                     max_triple += 1;\n   | \n\n\
    error: Rust has no postfix increment operator\n  --> /tmp/tmpxbl27bkb.rs:39:14\n\
    \   |\n39 |             j++;\n   |              ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n39 |             { let tmp = j; j += 1;\
    \ tmp };\n   |             +++++++++++  ~~~~~~~~~~~~~~~\n39 -             j++;\n\
    39 +             j += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpxbl27bkb.rs:47:27\n   |\n47 |                 max_triple++;\n \
    \  |                           ^^ not a valid postfix operator\n   |\nhelp: use\
    \ `+= 1` instead\n   |\n47 |                 { let tmp = max_triple; max_triple\
    \ += 1; tmp };\n   |                 +++++++++++           ~~~~~~~~~~~~~~~~~~~~~~~~\n\
    47 -                 max_triple++;\n47 +                 max_triple += 1;\n  \
    \ | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpxbl27bkb.rs:50:10\n\
    \   |\n50 |         i++;\n   |          ^^ not a valid postfix operator\n   |\n\
    help: use `+= 1` instead\n   |\n50 |         { let tmp = i; i += 1; tmp };\n \
    \  |         +++++++++++  ~~~~~~~~~~~~~~~\n50 -         i++;\n50 +         i +=\
    \ 1;\n   | \n\nerror[E0425]: cannot find value `k` in this scope\n   --> /tmp/tmpxbl27bkb.rs:46:21\n\
    \    |\n46  |             if i == k {\n    |                     ^ "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|i| {\n        (1..i).filter(|j| {\n            (1..i).filter(|k|\
    \ {\n                (i * i - i + j * (i + 1) + k * (k + 1)) % 3 == 0\n      \
    \      })\n        })\n    })\n    .count()\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsdjj58e6.rs:13:13\n   |\n\
    13 |         (1..i).filter(|j| {\n   |             ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         (1..*i).filter(|j|\
    \ {\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsdjj58e6.rs:14:17\n\
    \   |\n14 |             (1..i).filter(|k| {\n   |                 ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \           (1..*i).filter(|k| {\n   |                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsdjj58e6.rs:14:13\n   |\n14 | /             (1..i).filter(|k|\
    \ {\n15 | |                 (i * i - i + j * (i + 1) + k * (k + 1)) % 3 == 0\n\
    16 | |             })\n   | |______________^ expected `bool`, found struct `Filter`\n\
    \   |\n   = note: expected type `bool`\n            found struct `Filter<std::ops::Range<isize>,\
    \ [closure@/tmp/tmpsdjj58e6.rs:14:27: 16:14]>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsdjj58e6.rs:13:9\n   |\n13 | /         (1..i).filter(|j| {\n14\
    \ | |             (1..i).filter(|k| {\n15 | |                 (i * i - i + j *\
    \ (i + 1) + k * (k + 1)) % 3 == 0\n16 | |             })\n17 | |         })\n\
    \   | |__________^ expected `bool`, found struct `Filter`\n   |\n   = note: expected\
    \ type `bool`\n            found struct `Filter<std::ops::Range<isize>, [closure@/tmp/tmpsdjj58e6.rs:13:23:\
    \ 17:10]>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsdjj58e6.rs:12:5\n\
    \   |\n11 |   fn get_max_triples(n: isize) -> isize {\n   |                  \
    \                 ----- expected `isize` because of return type\n12 | /     (1..n).filter(|i|\
    \ {\n13 | |         (1..i).filter(|j| {\n14 | |             (1..i).filter(|k|\
    \ {\n15 | |                 (i * i - i + j * (i + 1) + k * (k + 1)) % 3 == 0\n\
    ...  |\n18 | |     })\n19 | |     .count()\n   | |____________^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |     .count().try_into().unwrap()\n\
    \   |             ++++++++++++++++++++\n\nerror: aborting due"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0i32; n];\n    let mut cnt = 0;\n    for i in 0..n-1\
    \ {\n        for j in i+1..n-1 {\n            for k in j+1..n-1 {\n          \
    \      let sum = i*i - i*i + i*k;\n                if sum % 3 == 0 {\n       \
    \             a.swap(i, k);\n                    a.swap(j, k);\n             \
    \       cnt += 1;\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnhwbncim.rs:12:28\n   |\n\
    12 |     let mut a = vec![0i32; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0i32;\
    \ n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnhwbncim.rs:19:28\n   |\n19 |\
    \                     a.swap(i, k);\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |                   \
    \  a.swap(i.try_into().unwrap(), k);\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnhwbncim.rs:19:31\n   |\n19 |\
    \                     a.swap(i, k);\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |                   \
    \  a.swap(i, k.try_into().unwrap());\n   |                                ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnhwbncim.rs:20:28\n   |\n20 |\
    \                     a.swap(j, k);\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |                   \
    \  a.swap(j.try_into().unwrap(), k);\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnhwbncim.rs:20:31\n   |\n20 |\
    \                     a.swap(j, k);\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |                   \
    \  a.swap(j, k.try_into().unwrap());\n   |                                ++++++++++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 || n % 3 == 0 {\n        n\n    } else {\n        let mut i\
    \ = 1\n        while i * i <= n {\n            i += 1;\n        }\n        i\n\
    \    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `while`\n  --> /tmp/tmp0xb30ui9.rs:15:22\n\
    \   |\n15 |         let mut i = 1\n   |                      ^ help: add `;` here\n\
    16 |         while i * i <= n {\n   |         ----- unexpected token\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        0\n    } else {\n        let mut max_triple = vec![0isize;\
    \ n];\n        let mut cnt = 0;\n        for i in 0..n {\n            for j in\
    \ 0..n {\n                for k in 0..n {\n                    if i < j && j <\
    \ k && i < k {\n                        max_triple[i] += 1;\n                \
    \        if max_triple[i] == 3 {\n                            cnt += 1;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n        cnt\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn9bdfysb.rs:15:43\n   |\n\
    15 |         let mut max_triple = vec![0isize; n];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n15 |         let mut max_triple = vec![0isize; n.try_into().unwrap()];\n\
    \   |                                            ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpn9bdfysb.rs:21:25\n\
    \   |\n21 |                         max_triple[i] += 1;\n   |                \
    \         ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpn9bdfysb.rs:22:28\n\
    \   |\n22 |                         if max_triple[i] == 3 {\n   |            \
    \                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for &i in &mut a {\n        *i = i * i -\
    \ i + 1;\n    }\n    for i in 1..n-1 {\n        for j in i+1..n-1 {\n        \
    \    for k in j+1..n-1 {\n                if a[j] - a[i] == a[k] - a[j] {\n  \
    \                  return 1;\n                }\n            }\n        }\n  \
    \  }\n    \n    return 0;\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptcouliri.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptcouliri.rs:13:9\n   |\n13 |     for &i in &mut a {\n \
    \  |         ^^    ------ this expression has type `Option<&mut {integer}>`\n\
    \   |         |\n   |         types differ in mutability\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note: expected mutable\
    \ reference `&mut {integer}`\n                      found reference `&_`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmptcouliri.rs:19:20\n\
    \   |\n19 |                 if a[j] - a[i] == a[k] - a[j] {\n   |            \
    \        ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmptcouliri.rs:19:27\n\
    \   |\n19 |                 if a[j] - a[i] == a[k] - a[j] {\n   |            \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmptcouliri.rs:19:35\n\
    \   |\n19 |                 if a[j] - a[i] == a[k] - a[j] {\n   |            \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    a.iter().filter(|&i| i < n-2 && i + 1 < n && i + 2 < n).count()\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmp2wt58p9q.rs:12:5\n\
    \   |\n12 |     a.iter().filter(|&i| i < n-2 && i + 1 < n && i + 2 < n).count()\n\
    \   |     ^ help: a local variable with a similar name exists: `n`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|&i| {\n        if i != 0 {\n            i + i + i == 3\
    \ * i - i\n        } else {\n            true\n        }\n    }).count()\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpab5iyi3w.rs:12:5\n   |\n\
    11 |   fn get_max_triples(n: isize) -> isize {\n   |                         \
    \          ----- expected `isize` because of return type\n12 | /     (1..n).filter(|&i|\
    \ {\n13 | |         if i != 0 {\n14 | |             i + i + i == 3 * i - i\n15\
    \ | |         } else {\n16 | |             true\n17 | |         }\n18 | |    \
    \ }).count()\n   | |______________^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     }).count().try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0isize; n];\n    let mut sum = 0;\n    for i in 1..n {\n\
    \        for j in 1..i {\n            for k in 1..j {\n                if i +\
    \ j + k == 3 {\n                    sum += 1;\n                    a[i] = k; //\
    \ move k to the last place\n                    break;\n                }\n  \
    \          }\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpp92m09jl.rs:12:26\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0isize; n];\n   |                          ^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut total = 0;\n    let mut a = [1..n];\n    \n    for i in 1..n\
    \ {\n        for j in 1..i {\n            for k in 1..j {\n                if\
    \ i + j + k == i * i * i {\n                    total += 1;\n                }\n\
    \            }\n        }\n    }\n    \n    total\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7gw5u6t9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    a.push(n);\n\n    for i in 1..n-1\
    \ {\n        for j in i + 1..n-1 {\n            for k in j + 1..n-1 {\n      \
    \          if i * i + j * j + k * k == 3 * n * n {\n                    a.push(i,\
    \ j, k);\n                }\n            }\n        }\n    }\n\n    a.iter().filter(|&v|\
    \ v != 0).count().unwrap_or(0)\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 3 arguments were supplied\n\
    \    --> /tmp/tmp0a5gdb_0.rs:19:23\n     |\n19   |                     a.push(i,\
    \ j, k);\n     |                       ^^^^ -  -  - supplied 3 arguments\n   \
    \  |                       |\n     |                       expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n  --> /tmp/tmp0a5gdb_0.rs:25:28\n   |\n25 |     a.iter().filter(|&v|\
    \ v != 0).count().unwrap_or(0)\n   |                            ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0599]: no method named `unwrap_or`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmp0a5gdb_0.rs:25:42\n\
    \   |\n25 |     a.iter().filter(|&v| v != 0).count().unwrap_or(0)\n   |      \
    \                                    ^^^^^^^^^ method not found in `usize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n <= 2 {\n        return 1;\n    }\n    // we first sort the array\
    \ by ascending element\n    let arr = vec![n,n,n];\n    arr.sort_by_key(|x| x);\n\
    \    for i in 0..(arr.len() - 1) {\n        for j in (i + 1..arr.len()) {\n  \
    \          let mut k = j;\n            while k >= i {\n                if arr[k]\
    \ + arr[j] > arr[k] + arr[k - 1] {\n                    break;\n             \
    \   } else {\n                    k -= 1;\n                }\n            }\n\
    \            if arr[k] + arr[j] + arr[i] == arr[j] + arr[k] + arr[i] {\n     \
    \           return j - i + 1;\n            }\n        }\n    }\n    return 0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `for` iterator expression\n  -->\
    \ /tmp/tmpy7qgz3wd.rs:19:18\n   |\n19 |         for j in (i + 1..arr.len()) {\n\
    \   |                  ^                ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n19 -         for j in (i\
    \ + 1..arr.len()) {\n19 +         for j in i + 1..arr.len() {\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy7qgz3wd.rs:29:24\n   |\n29 |              \
    \   return j - i + 1;\n   |                        ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n29 |                 return (j - i\
    \ + 1).try_into().unwrap();\n   |                        +         +++++++++++++++++++++\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert_eq!(n, 3);\n\n    let mut max_triples = 0;\n\n    let mut\
    \ a = [1i32; 3];\n    a.copy_from_slice(&[0, 1, 2]);\n    for i in 2..n as usize\
    \ {\n        a[i] = i*i - i + 1;\n        for j in 3..n as usize {\n         \
    \   a[1 + j] += a[j];\n        }\n\n        if a[i] % 3 == 0 {\n            max_triples\
    \ += 1;\n        }\n    }\n    a.remove(0);\n\n    a\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4beb6ld2.rs:19:16\n   |\n\
    19 |         a[i] = i*i - i + 1;\n   |         ----   ^^^^^^^^^^^ expected `i32`,\
    \ found `usize`\n   |         |\n   |         expected due to the type of this\
    \ binding\n\nerror[E0599]: no method named `remove` found for array `[i32; 3]`\
    \ in the current scope\n  --> /tmp/tmp4beb6ld2.rs:28:7\n   |\n28 |     a.remove(0);\n\
    \   |       ^^^^^^ method not found in `[i32; 3]`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4beb6ld2.rs:30:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n...\n30 |     a\n   |     ^ expected `isize`, found array `[i32;\
    \ 3]`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![1; n + 1];\n    a[0] = 0;\n    for i in 1..n+1 {\n \
    \       for j in i+1..n+1 {\n            for k in j+1..n+1 {\n               \
    \ if a[j] > a[j]+a[k] {\n                    a[j] = a[j]+a[k];\n             \
    \   }\n            }\n        }\n    }\n    a.iter().find(|x| x * x + x * x -\
    \ 3 * x % 3 == 0).unwrap()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp62zedm84.rs:12:25\n   |\n\
    12 |     let mut a = vec![1; n + 1];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut a = vec![1;\
    \ (n + 1).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp62zedm84.rs:17:20\n\
    \   |\n17 |                 if a[j] > a[j]+a[k] {\n   |                    ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp62zedm84.rs:17:27\n\
    \   |\n17 |                 if a[j] > a[j]+a[k] {\n   |                      \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp62zedm84.rs:17:32\n\
    \   |\n17 |                 if a[j] > a[j]+a[k] {\n   |                      \
    \          ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp62zedm84.rs:18:21\n\
    \   |\n18 |                     a[j] = a[j]+a[k];\n   |                     ^^^^\
    \ slice indices are of type "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    use std::cmp::Ordering;\n    use std::collections::HashMap;\n    let\
    \ mut counter = HashMap::new();\n    for i in 1..n {\n        counter.insert(i,\
    \ i);\n    }\n    for i in 1..(n * n) - 1 {\n        let j = (i + 1) % n;\n  \
    \      let k = ((i + j + n + 1) % n) - 1;\n        if !counter.contains(&i + 1).unwrap()\
    \ || !counter.contains(&j).unwrap() || !counter.contains(&k).unwrap() {\n    \
    \        counter.insert(i + 1, i + 1);\n            counter.insert(j, j + 1);\n\
    \            counter.insert(k, k + 1);\n        }\n        let triple = i + j\
    \ + k;\n        if triple % 3 == 0 {\n            counter.insert(triple, triple);\n\
    \        }\n    }\n    \n    let mut sum = 0;\n    for i in 1..n {\n        sum\
    \ += counter.get(&i).unwrap();\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp5d7nv666.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method\
    \ named `contains` found for struct `HashMap` in the current scope\n  --> /tmp/tmp5d7nv666.rs:21:21\n\
    \   |\n21 |         if !counter.contains(&i + 1).unwrap() || !counter.contains(&j).unwrap()\
    \ || !counter.contains(&k).unwrap() {\n   |                     ^^^^^^^^ help:\
    \ there is an associated function with a similar name: `contains_key`\n\nerror[E0599]:\
    \ no method named `contains` found for struct `HashMap` in the current scope\n\
    \  --> /tmp/tmp5d7nv666.rs:21:59\n   |\n21 |         if !counter.contains(&i +\
    \ 1).unwrap() || !counter.contains(&j).unwrap() || !counter.contains(&k).unwrap()\
    \ {\n   |                                                           ^^^^^^^^ help:\
    \ there is an associated function with a similar name: `contains_key`\n\nerror[E0599]:\
    \ no method named `contains` found for struct `HashMap` in the current scope\n\
    \  --> /tmp/tmp5d7nv666.rs:21:93\n   |\n21 |         if !counter.contains(&i +\
    \ 1).unwrap() || !counter.contains(&j).unwrap() || !counter.contains(&k).unwrap()\
    \ {\n   |                                                                    \
    \                         ^^^^^^^^ help: there is an associated function with\
    \ a similar name: `contains_key`\n\nerror: aborting due to 3 previous errors;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0\n    let mut a = vec![i32::MIN; n];\n    for i in 0..n-1\
    \ {\n        a[i] = i*i-1+i+1;\n    }\n\n    for i in 1..n-1 {\n        for (j,\
    \ k) in &a[..i] {\n            if i+j+k == i*i+i*j+i*k {\n                count\
    \ += 1;\n            }\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp263mp0od.rs:12:22\n\
    \   |\n12 |     let mut count = 0\n   |                      ^ help: add `;` here\n\
    13 |     let mut a = vec![i32::MIN; n];\n   |     --- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp263mp0od.rs:13:32\n   |\n13 |     let mut a\
    \ = vec![i32::MIN; n];\n   |                                ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     let mut a = vec![i32::MIN;\
    \ n.try_into().unwrap()];\n   |                                 ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmp263mp0od.rs:15:9\n\
    \   |\n15 |         a[i] = i*i-1+i+1;\n   |         ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed\
    \ by `RangeTo<isize>`\n  --> /tmp/tmp263mp0od.rs:19:24\n   |\n19 |         for\
    \ (j, k) in &a[..i] {\n   |                        ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>`\
    \ is not implemented for `RangeTo<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeTo<usize> as SliceIndex<[T]>>\n\
    \             <RangeTo<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeTo<isize>>` for `Vec<i32>`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = vec![];\n    let mut last_triple = vec![0, 0, 0];\n\
    \    for x in 1..n+1 {\n        if x == 1 {\n            triples.push(x);\n  \
    \          last_triple.push(x);\n            continue;\n        }\n        let\
    \ max_triple = max_triple(last_triple);\n        if max_triple.0 == x {\n    \
    \        triples.push(x);\n            last_triple.push(x);\n        } else if\
    \ max_triple.1 == x {\n            triples.push(x);\n            last_triple.push(x);\n\
    \        } else {\n            triples.push(max_triple.0);\n            triples.push(max_triple.1);\n\
    \        }\n    }\n    triples.len()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max_triple` in this scope\n  --> /tmp/tmpv2zxwtc4.rs:20:26\n\
    \   |\n20 |         let max_triple = max_triple(last_triple);\n   |          \
    \                ^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `last_triple`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv2zxwtc4.rs:32:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n32 |     triples.len()\n\
    \   |     ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    32 |     triples.len().try_into().unwrap()\n   |                  ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for _ in 0..n {\n        a.push(0);\n  \
    \  }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in (i + 1..n) {\n\
    \            for k in (j + 1..n) {\n                let res = (a[i] + a[j] + a[k])\
    \ % 3 == 0;\n                if res {\n                    cnt += 1;\n       \
    \         }\n                a[k] = a[j];\n                a[j] = a[i];\n    \
    \            a[i] = res;\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `for` iterator expression\n  -->\
    \ /tmp/tmp47khg6n0.rs:18:18\n   |\n18 |         for j in (i + 1..n) {\n   |  \
    \                ^        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n18 -         for j in (i + 1..n) {\n18 +\
    \         for j in i + 1..n {\n   | \n\nwarning: unnecessary parentheses around\
    \ `for` iterator expression\n  --> /tmp/tmp47khg6n0.rs:19:22\n   |\n19 |     \
    \        for k in (j + 1..n) {\n   |                      ^        ^\n   |\nhelp:\
    \ remove these parentheses\n   |\n19 -             for k in (j + 1..n) {\n19 +\
    \             for k in j + 1..n {\n   | \n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp47khg6n0.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp47khg6n0.rs:20:28\n   |\n20 |         \
    \        let res = (a[i] + a[j] + a[k]) % 3 == 0;\n   |                      \
    \      ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp47khg6n0.rs:20:35\n\
    \   |\n20 |                 let res = (a[i] + a[j] + a[k]) % 3 == 0;\n   |   \
    \                                ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the t"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut cnt = 0;\n    \n    for i in 1..n {\n        for j in 1..i {\n\
    \            for k in 1..j {\n                if i > j && i > k && j > k {\n \
    \                   cnt += 1;\n                }\n            }\n        }\n \
    \   }\n    \n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp6vzof1cv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut i = 0;\n    let mut\
    \ j = n-1;\n    let mut k = 0;\n    while i < j {\n        if a[i..j].iter().map(|x|\
    \ x * x - x + 1).sum() % 3 == 0 {\n            i += 1;\n            j -= 1;\n\
    \        } else {\n            i += 1;\n            k += 1;\n        }\n    }\n\
    \    k + (i-j+2)*2\n}\n\nfn main() {\n    let candidate = get_max_triples;\n \
    \   assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmph6z9p1u_.rs:19:12\n\
    \   |\n19 |         if a[i..j].iter().map(|x| x * x - x + 1).sum() % 3 == 0 {\n\
    \   |            ^ help: a local variable with a similar name exists: `i`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut total: usize = 0;\n    for i in 1..n {\n        for j in (i +\
    \ 1)..n {\n            for k in (j + 1)..n {\n                total += i + j +\
    \ k + 1;\n                if total % 3 == 0 {\n                    return total;\n\
    \                }\n            }\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx052ypu1.rs:16:26\n   |\n\
    16 |                 total += i + j + k + 1;\n   |                          ^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to\
    \ `usize`\n  --> /tmp/tmpx052ypu1.rs:16:23\n   |\n16 |                 total +=\
    \ i + j + k + 1;\n   |                       ^^ no implementation for `usize +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx052ypu1.rs:18:28\n\
    \   |\n18 |                     return total;\n   |                          \
    \  ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n18 |     \
    \                return total.try_into().unwrap();\n   |                     \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx052ypu1.rs:23:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n23 |     total\n\
    \   |     ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n23\
    \ |     total.try_into().unwrap()\n   |          ++++++++++++++++++++\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n];\n    a.iter_mut().enumerate().for_each(|(i,\
    \ _)| a[i] = i * i - i + 1);\n\n    for i in a.iter().skip(1) {\n        for j\
    \ in a.iter().skip(i + 1) {\n            for k in a.iter().skip(j + 1) {\n   \
    \             if i + j + k == a.len() % 3 {\n                    return 1;\n \
    \               }\n            }\n        }\n    }\n    0\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprdgnb9bh.rs:12:37\n   |\n\
    12 |     let mut a: Vec<isize> = vec![0; n];\n   |                           \
    \          ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut a: Vec<isize> = vec![0; n.try_into().unwrap()];\n   |                  \
    \                    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprdgnb9bh.rs:13:55\n   |\n13 |     a.iter_mut().enumerate().for_each(|(i,\
    \ _)| a[i] = i * i - i + 1);\n   |                                           \
    \     ----   ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |             \
    \                                   |\n   |                                  \
    \              expected due to the type of this binding\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprdgnb9bh.rs:16:32\n   |\n16 |         for j in a.iter().skip(i\
    \ + 1) {\n   |                                ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         for j in a.iter().skip((i + 1).try_into().unwrap())\
    \ {\n   |                                +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprdgnb9bh.rs:17:36\n   |\n17 |             for\
    \ k in a.iter().skip(j + 1) {\n   |                                    ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |             for k in\
    \ a.iter().skip((j + 1).try_into().unwrap()) {\n   |                         \
    \           +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprdgnb9bh.rs:18:33\n   |\n18 |                 if i + j + k == a.len()\
    \ % 3 {\n   |                                 ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |                 if i + j + k == (a.len()\
    \ % 3).try_into().unwrap() {\n   |"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert!(n > 0);\n\n    let mut a = vec![0..n as usize];\n    for\
    \ i in 1..n {\n        a[i] = i * i - i + 1;\n    }\n    let mut count = 0;\n\
    \    for i in 0..n {\n        for j in 0..n {\n            for k in 0..n {\n \
    \               if i < j && j < k && i < k {\n                    count++;\n \
    \               }\n            }\n        }\n    }\n\n    return count;\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpj8dz7p25.rs:23:26\n\
    \   |\n23 |                     count++;\n   |                          ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |       \
    \              { let tmp = count; count += 1; tmp };\n   |                   \
    \  +++++++++++      ~~~~~~~~~~~~~~~~~~~\n23 -                     count++;\n23\
    \ +                     count += 1;\n   | \n\nerror[E0277]: the type `[std::ops::Range<usize>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpj8dz7p25.rs:16:9\n   |\n16 |   \
    \      a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[std::ops::Range<usize>]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<std::ops::Range<usize>>`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0..i];\n    for i in a {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    \n    let mut count = 0;\n    for &i in a {\n        for &j in\
    \ a {\n            for &k in a {\n                if i < j < k {\n           \
    \         if a[i] < a[j] {\n                        if a[j] < a[k] {\n       \
    \                     count += 1;\n                        }\n               \
    \     }\n                    if a[i] > a[j] {\n                        if a[j]\
    \ > a[k] {\n                            count += 1;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpp2xou5o3.rs:21:22\n\
    \   |\n21 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n21 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0425]: cannot find value\
    \ `i` in this scope\n  --> /tmp/tmpp2xou5o3.rs:12:25\n   |\n12 |     let mut a\
    \ = vec![0..i];\n   |                         ^ help: a local variable with a\
    \ similar name exists: `n`\n\nerror[E0369]: cannot multiply `std::ops::Range<usize>`\
    \ by `std::ops::Range<usize>`\n  --> /tmp/tmpp2xou5o3.rs:14:18\n   |\n14 |   \
    \      a[i] = i * i - i + 1;\n   |                - ^ - std::ops::Range<usize>\n\
    \   |                |\n   |                std::ops::Range<usize>\n\nerror[E0277]:\
    \ the size for values of type `[std::ops::Range<usize>]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpp2xou5o3.rs:14:9\n   |\n14 |         a[i] = i * i - i +\
    \ 1;\n   |         ^^^^ doesn't have a size known at compile-time\n   |\n   =\
    \ help: the trait `Sized` is not implemented for `[std::ops::Range<usize>]`\n\
    \   = note: the left-hand-side of an assignment must have a statically known size\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp2xou5o3.rs:18:9\n   |\n18 | \
    \    for &i in a {\n   |         ^^    - this expression has type `Option<std::ops::Range<usize>>`\n\
    \   |         |\n   |         expected struct `std::ops::Range`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `i`\n   |\n \
    \  = note: expected struct `std::ops::Range<usize>`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp2xou5o3.rs:19:13\n  \
    \ |\n19 |         for &j in a {\n   |             ^^    - this expression has\
    \ type `Option<std::ops::Range<usize>>`\n   |             |\n   |            \
    \ expected struct `std::ops::Range`, found reference\n   |             help: you\
    \ can probably remove the explicit borrow: `j`"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::with_capacity(n);\n    for i in 1..n {\n\
    \        a.push(i * (i - 1) + 1);\n    }\n    a.sort();\n    let mut counter =\
    \ 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && i\
    \ != n - 1 && j != n - 1 && a[i] + a[j] + a[i] == 3 {\n                counter++;\n\
    \            }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpsrfx27zh.rs:21:24\n\
    \   |\n21 |                 counter++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n21 |               \
    \  { let tmp = counter; counter += 1; tmp };\n   |                 +++++++++++\
    \        ~~~~~~~~~~~~~~~~~~~~~\n21 -                 counter++;\n21 +        \
    \         counter += 1;\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsrfx27zh.rs:12:48\n\
    \   |\n12 |     let mut a: Vec<isize> = Vec::with_capacity(n);\n   |         \
    \                                       ^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |     let mut a: Vec<isize> = Vec::with_capacity(n.try_into().unwrap());\n\
    \   |                                                 ++++++++++++++++++++\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsrfx27zh.rs:20:54\n\
    \   |\n20 |             if i != j && i != n - 1 && j != n - 1 && a[i] + a[j] +\
    \ a[i] == 3 {\n   |                                                      ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsrfx27zh.rs:20:61\n\
    \   |\n20 |             if i != j && i != n - 1 && j != n - 1 && a[i] + a[j] +\
    \ a[i] == 3 {\n   |                                                          \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsrfx27zh.r"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result: Vec<(isize, isize, isize)> = Vec::new();\n    for i in\
    \ 1..n {\n        let mut temp: Vec<_> = vec![i];\n        for j in i + 1..n {\n\
    \            let mut temp2: Vec<_> = vec![j, i];\n            for k in i + 1..n\
    \ {\n                let mut temp3: Vec<_> = vec![k, i, j];\n                if\
    \ temp3.iter().filter(|&x| x == k).any() + temp2.iter().filter(|&x| x == k).any()\
    \ + temp.iter().filter(|&x| x == k).any() + [i, j, k].iter().filter(|&x| x ==\
    \ k).any() == 3 {\n                    result.push((i, j, k));\n             \
    \   }\n            }\n        }\n    }\n    result.len()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpgdhw6hy6.rs:19:47\n\
    \   |\n19 | ...   if temp3.iter().filter(|&x| x == k).any() + temp2.iter().filter(|&x|\
    \ x == k).any() + temp.iter().filter(|&x| x == k).any() + [i, j,...\n   |    \
    \                                 ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n    --> /tmp/tmpgdhw6hy6.rs:19:53\n     |\n19   | ...   if temp3.iter().filter(|&x|\
    \ x == k).any() + temp2.iter().filter(|&x| x == k).any() + temp.iter().filter(|&x|\
    \ x == k).any() + [i, j,...\n     |                                          \
    \ ^^^- supplied 0 arguments\n     |                                          \
    \ |\n     |                                           expected 1 argument\n  \
    \   |\nnote: associated function defined here\n\nerror[E0277]: can't compare `&isize`\
    \ with `isize`\n  --> /tmp/tmpgdhw6hy6.rs:19:88\n   |\n19 | ...   if temp3.iter().filter(|&x|\
    \ x == k).any() + temp2.iter().filter(|&x| x == k).any() + temp.iter().filter(|&x|\
    \ x == k).any() + [i, j,...\n   |                                            \
    \                                  ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n    --> /tmp/tmpgdhw6hy6.rs:19:94\n     |\n19   | ...   if temp3.iter().filter(|&x|\
    \ x == k).any() + temp2.iter().filter(|&x| x == k).any() + temp.iter().filter(|&x|\
    \ x == k)"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut triple = 0;\n    let mut temp = 0;\n  \
    \  let mut a = [0; n];\n    for i in 1..n {\n        temp += i*(i + 1) - i + 1;\n\
    \        a[i] = temp;\n    }\n    for i in 0..(n-1){\n        let sum = a[i] +\
    \ a[i + 1] + a[i + 2];\n        if ((sum - a[i])%3 == 0 && triple==0) {\n    \
    \        triple = sum;\n        }\n    }\n    return triple;\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp1juc6ji8.rs:15:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n...\n15 |    \
    \ let mut a = [0; n];\n   |                     ^\n\nwarning: unnecessary parentheses\
    \ around `if` condition\n  --> /tmp/tmp1juc6ji8.rs:22:12\n   |\n22 |         if\
    \ ((sum - a[i])%3 == 0 && triple==0) {\n   |            ^                    \
    \            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n22 -         if ((sum - a[i])%3 == 0 && triple==0)\
    \ {\n22 +         if (sum - a[i])%3 == 0 && triple==0 {\n   | \n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut total = a::<isize>[n];\n    for i in 0..n {\n        for j in\
    \ 0..n {\n            if i < j {\n                total += a::<isize>[j] - a::<isize>[i];\n\
    \            }\n        }\n    }\n    if total % 3 == 0 {\n        1\n    } else\
    \ {\n        0\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmpzhoaralr.rs:12:21\n\
    \   |\n12 |     let mut total = a::<isize>[n];\n   |                     ^ help:\
    \ a local variable with a similar name exists: `n`\n\nerror[E0425]: cannot find\
    \ value `a` in this scope\n  --> /tmp/tmpzhoaralr.rs:16:26\n   |\n16 |       \
    \          total += a::<isize>[j] - a::<isize>[i];\n   |                     \
    \     ^ help: a local variable with a similar name exists: `i`\n\nerror[E0425]:\
    \ cannot find value `a` in this scope\n  --> /tmp/tmpzhoaralr.rs:16:42\n   |\n\
    16 |                 total += a::<isize>[j] - a::<isize>[i];\n   |           \
    \                               ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // write your code here\n    let mut counter: isize = 0;\n    let mut\
    \ tri: Vec<isize> = Vec::with_capacity(n);\n    for i in 1..n {\n        let mut\
    \ j: isize = i;\n        tri.push(i as isize);\n        while j > 0 {\n      \
    \      j = j / 2;\n            tri.push(i as isize);\n            counter += 1;\n\
    \        }\n    }\n    let mut temp: Vec<isize> = Vec::with_capacity(tri.len());\n\
    \    for i in 0..tri.len() {\n        temp.push(tri[i]);\n    }\n    for i in\
    \ 0..temp.len() {\n        if temp[i] % 3 == 0 {\n            counter += 1;\n\
    \        }\n    }\n    counter as isize\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo6cbk657.rs:14:50\n   |\n\
    14 |     let mut tri: Vec<isize> = Vec::with_capacity(n);\n   |              \
    \                                    ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n14 |     let mut tri: Vec<isize> = Vec::with_capacity(n.try_into().unwrap());\n\
    \   |                                                   ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n {\n        let\
    \ mut sum = 0;\n        for j in (i..n).rev() {\n            sum += j;\n     \
    \   }\n        a.push((i*i) - sum + 1);\n    }\n    let mut cnt = 0;\n    let\
    \ mut triples = a.len();\n    for &(aa, _, _) in &a {\n        for &(_, j, _)\
    \ in &a {\n            if triples > 0 {\n                cnt += ((*aa) + (*aa)\
    \ + j) == ((*aa) * (*aa) + j);\n            }\n            triples -= 1;\n   \
    \     }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2bmnarko.rs:22:10\n   |\n\
    22 |     for &(aa, _, _) in &a {\n   |          ^^^^^^^^^^    -- this expression\
    \ has type `Option<&isize>`\n   |          |\n   |          expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(_, _, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2bmnarko.rs:23:14\n\
    \   |\n23 |         for &(_, j, _) in &a {\n   |              ^^^^^^^^^    --\
    \ this expression has type `Option<&isize>`\n   |              |\n   |       \
    \       expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n\
    \             found tuple `(_, _, _)`\n\nerror[E0277]: cannot add-assign `bool`\
    \ to `{integer}`\n  --> /tmp/tmp2bmnarko.rs:25:21\n   |\n25 |                \
    \ cnt += ((*aa) + (*aa) + j) == ((*aa) * (*aa) + j);\n   |                   \
    \  ^^ no implementation for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Write your code here.\n    let mut a = vec![1i32; n];\n    for x in\
    \ 0..n {\n        a[x] += x;\n    }\n    let mut count = 0;\n    for x in 0..n\
    \ {\n        for y in 0..n {\n            for z in 0..n {\n                if\
    \ x >= y && x >= z && y >= z {\n                    if a[x] + a[y] + a[z] == 3\
    \ * x * x * x {\n                        count = count + 1;\n                \
    \    }\n                }\n            }\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxo7tmb_e.rs:13:28\n   |\n\
    13 |     let mut a = vec![1i32; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |     let mut a = vec![1i32;\
    \ n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpxo7tmb_e.rs:15:9\n\
    \   |\n15 |         a[x] += x;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpxo7tmb_e.rs:22:24\n   |\n22 |                    \
    \ if a[x] + a[y] + a[z] == 3 * x * x * x {\n   |                        ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[i32]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxo7tmb_e.rs:22:31\n   |\n22 |  \
    \                   if a[x] + a[y] + a[z] == 3 * x * x * x {\n   |           \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<i32>`\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpxo7tmb_e.rs:22:38\n\
    \   |\n22 |                     if a[x] + a[y] + a[z] == 3 * x * x * x {\n   |\
    \                                      ^^^^ slice indices are of type `usize`\
    \ or ranges"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for idx in 0..n {\n        a[idx] = idx\
    \ * idx + idx + 1;\n    }\n    let mut num_triples = 0;\n    for (i, j, k) in\
    \ a.iter().skip(1) {\n        if ((i + j + k) % 3 == 0) {\n            num_triples\
    \ += 1;\n        }\n    }\n    num_triples\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp66f5809t.rs:18:12\n\
    \   |\n18 |         if ((i + j + k) % 3 == 0) {\n   |            ^           \
    \         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n18 -         if ((i + j + k) % 3 == 0) {\n18 +    \
    \     if (i + j + k) % 3 == 0 {\n   | \n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp66f5809t.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |    \
    \                     ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |                   \
    \       ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp66f5809t.rs:14:9\n   |\n14 |         a[idx]\
    \ = idx * idx + idx + 1;\n   |         ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp66f5809t.rs:17:9\n   |\n17 |     for (i, j, k) in a.iter().skip(1) {\n\
    \   |         ^^^^^^^^^    ---------------- this expression has type `Option<&{integer}>`\n\
    \   |         |\n   |         expected integer, found tuple\n   |\n   = note:\
    \ expected type `{integer}`\n             found tuple `(_, _, _)`\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 { return 0 }\n    let mut a = vec![0; n];\n    for &i in a\
    \ {\n        i += 1;\n    }\n    for &j in a {\n        j += 1;\n    }\n    for\
    \ &k in a {\n        k += 1;\n    }\n    let mut ans = 0;\n    for i in a {\n\
    \        for j in a {\n            for k in a {\n                if i >= j &&\
    \ j >= k && i <= k {\n                    ans += 1;\n                }\n     \
    \       }\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv5k500r2.rs:13:25\n   |\n\
    13 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv5k500r2.rs:14:9\n   |\n14 |     for &i in a {\n   |  \
    \       ^^    - this expression has type `Option<{integer}>`\n   |         |\n\
    \   |         expected integer, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `{integer}`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv5k500r2.rs:17:9\n\
    \   |\n17 |     for &j in a {\n   |         ^^    - this expression has type `Option<{integer}>`\n\
    \   |         |\n   |         expected integer, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `j`\n   |\n   = note:   expected\
    \ type `{integer}`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv5k500r2.rs:20:9\n   |\n20 |     for &k in a {\n   |  \
    \       ^^    - this expression has type `Option<{integer}>`\n   |         |\n\
    \   |         expected integer, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `k`\n   |\n   = note:   expected type `{integer}`\n\
    \           found reference `&_`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0..i];\n    let mut sum = 0;\n    for i in 0..i-1{\n\
    \        for j in i+1..n{\n            for k in j+1..n{\n                sum +=\
    \ a[i] + a[j] + a[k];\n                if sum > 3 {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp8ejbky62.rs:12:25\n\
    \   |\n12 |     let mut a = vec![0..i];\n   |                         ^ help:\
    \ a local variable with a similar name exists: `n`\n\nerror[E0425]: cannot find\
    \ value `i` in this scope\n  --> /tmp/tmp8ejbky62.rs:14:17\n   |\n14 |     for\
    \ i in 0..i-1{\n   |                 ^ help: a local variable with a similar name\
    \ exists: `a`\n\nerror[E0277]: the type `[std::ops::Range<{integer}>]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp8ejbky62.rs:17:24\n   |\n17 |         \
    \        sum += a[i] + a[j] + a[k];\n   |                        ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[std::ops::Range<{integer}>]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<std::ops::Range<{integer}>>`\n\nerror[E0277]: the type\
    \ `[std::ops::Range<{integer}>]` cannot be indexed by `isize`\n  --> /tmp/tmp8ejbky62.rs:17:31\n\
    \   |\n17 |                 sum += a[i] + a[j] + a[k];\n   |                 \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[std::ops::Range<{integer}>]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<std::ops::Range<{integer}>>`\n\nerror[E0277]: the type `[std::ops::Range<{integer}>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8ejbky62.rs:17:38\n   |\n17 |  \
    \               sum += a[i] + a[j] + a[k];\n   |                             \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[std::ops::Range<{integer}>]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<std::ops::Range<{integer}>>`\n\nerror: abor"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    use std::cmp::Ordering;\n\n    let mut a = vec![0; n];\n    a.iter_mut().for_each(|x|\
    \ x = x * 3 - x + 1);\n    let mut ans = 0;\n    for i in 0..n {\n        for\
    \ j in i..n {\n            for k in i..n {\n                if i != j && i !=\
    \ k && j != k {\n                    ans = ans + a.iter().filter(|&x| x < i).count()\
    \ + a.iter().filter(|&x| x < k).count() + a.iter().filter(|&x| x < j).count();\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    ans\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmprba_nlqd.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprba_nlqd.rs:14:25\n   |\n14 |     let mut a = vec![0; n];\n\
    \   |                         ^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     let mut a = vec![0; n.try_into().unwrap()];\n   |      \
    \                    ++++++++++++++++++++\n\nerror[E0369]: cannot multiply `&mut\
    \ {integer}` by `{integer}`\n  --> /tmp/tmprba_nlqd.rs:15:37\n   |\n15 |     a.iter_mut().for_each(|x|\
    \ x = x * 3 - x + 1);\n   |                                   - ^ - {integer}\n\
    \   |                                   |\n   |                              \
    \     &mut {integer}\n   |\nhelp: `*` can be used on `{integer}`, you can dereference\
    \ `x`\n   |\n15 |     a.iter_mut().for_each(|x| x = *x * 3 - x + 1);\n   |   \
    \                                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprba_nlqd.rs:21:58\n\
    \   |\n21 | ...   ans = ans + a.iter().filter(|&x| x < i).count() + a.iter().filter(|&x|\
    \ x < k).count() + a.iter().filter(|&x| x < j).count();\n   |                \
    \                            ^\n   |                                         \
    \   |\n   |                                            expected reference, found\
    \ `isize`\n   |                                            help: consider borrowing\
    \ here: `&i`\n   |\n   = note: expected reference `&_`\n                   found\
    \ type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprba_nlqd.rs:21:96\n\
    \   |\n21 | ...   ans = ans + a.iter().filter(|&x| x < i).count() + a.iter().filter(|&x|\
    \ x < k).count() + a.iter().filter(|&x| x < j).count();\n   |                \
    \                                                                  ^\n   |   \
    \                                                                            \
    \   |\n   |                                                                  \
    \  "
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![];\n    for i in 1..n{\n        a.push(3*i-1);\n   \
    \ }\n    a.sort();\n    return a.iter().filter(|&x| x % 3 != 0).count() as isize;\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpjg4ef3nt.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert_eq!(n < 1, \"n should be positive\");\n    \n    let mut\
    \ min_sum = vec![0; n];\n    let mut max_sum = vec![0; n];\n    \n    for i in\
    \ 1..n {\n        min_sum[i] = i * i - i + 1;\n        max_sum[i] = i * i - i\
    \ - 1;\n    }\n    \n    let mut cnt = 0;\n    for triple in 0..(n * n - 2) {\n\
    \        if min_sum[triple] > max_sum[triple] {\n            cnt += 1;\n     \
    \   } else {\n            min_sum[triple] -= 1;\n            max_sum[triple] +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptdswn9lr.rs:12:5\n   |\n\
    12 |     debug_assert_eq!(n < 1, \"n should be positive\");\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `&str`\n   |\n   = note: this error originates in the\
    \ macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for\
    \ more info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptdswn9lr.rs:14:31\n\
    \   |\n14 |     let mut min_sum = vec![0; n];\n   |                          \
    \     ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n14 |     let\
    \ mut min_sum = vec![0; n.try_into().unwrap()];\n   |                        \
    \        ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptdswn9lr.rs:15:31\n\
    \   |\n15 |     let mut max_sum = vec![0; n];\n   |                          \
    \     ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n15 |     let\
    \ mut max_sum = vec![0; n.try_into().unwrap()];\n   |                        \
    \        ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmptdswn9lr.rs:18:9\n   |\n18 |         min_sum[i]\
    \ = i * i - i + 1;\n   |         ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptdswn9lr.rs:19:9\n   |\n19 |   \
    \      max_sum[i] = i * i - i - 1;\n   |         ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<i"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|&i| {\n        i.is_power_of_two()\n    }).filter(|&i|\
    \ {\n        (1..n).filter(|&j| {\n            (i + 1).is_power_of_two() &&\n\
    \            (j + 1).is_power_of_two()\n        }).all(|&k| {\n            (2\
    \ * i + 2 * j + k).is_power_of_two()\n        })\n    }).count()\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmp9jgs8fza.rs:19:26\n\
    \   |\n19 |             (2 * i + 2 * j + k).is_power_of_two()\n   |          \
    \                ^ help: a local variable with a similar name exists: `i`\n\n\
    error[E0599]: no method named `is_power_of_two` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp9jgs8fza.rs:13:11\n   |\n13 |         i.is_power_of_two()\n\
    \   |           ^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `is_power_of_two` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp9jgs8fza.rs:16:21\n   |\n16 |             (i + 1).is_power_of_two()\
    \ &&\n   |                     ^^^^^^^^^^^^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `is_power_of_two` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp9jgs8fza.rs:17:21\n   |\n17 |             (j +\
    \ 1).is_power_of_two()\n   |                     ^^^^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9jgs8fza.rs:18:17\n\
    \   |\n18 |         }).all(|&k| {\n   |                 ^--\n   |            \
    \     ||\n   |                 |expected due to this\n   |                 expected\
    \ `isize`, found reference\n   |                 help: did you mean `k`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9jgs8fza.rs:12:5\n   |\n11 |   fn\
    \ get_max_triples(n: isize) -> isize {\n   |                                 \
    \  ----- expected `isize` because of return type\n12 | /     (1..n).filter(|&i|\
    \ {\n13 | |         i.is_power_of_two()\n14 | |     }).filter(|&i| {\n15 | | \
    \        (1..n).filter(|&j| {\n...  |\n20 | |         })\n21 | |     }).count()\n\
    \   | |______________^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     }).count().try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information abo"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    use std::cmp::Ordering;\n    \n    let mut max: isize = 0;\n    for _\
    \ in 0..n {\n        if n % 3 != 0 {\n            break;\n        }\n        max\
    \ += 1;\n        n /= 3;\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpiwuqlnqn.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n  --> /tmp/tmpiwuqlnqn.rs:20:9\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                    - help: consider making this binding\
    \ mutable: `mut n`\n...\n20 |         n /= 3;\n   |         ^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a : [f32; n] = [0.0; n];\n    let mut t : isize = 0;\n    for\
    \ i in 1..n{\n        if a[i] < a[i-1] + a[i-2] + 3 {\n            a[i] += 1;\n\
    \            t += 1;\n        }\n    }\n    t\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpslkf8o74.rs:12:23\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a : [f32; n] = [0.0; n];\n   |                       ^\n\nerror[E0435]: attempt\
    \ to use a non-constant value in a constant\n  --> /tmp/tmpslkf8o74.rs:12:34\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    -\
    \ this would need to be a `const`\n12 |     let mut a : [f32; n] = [0.0; n];\n\
    \   |                                  ^\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut ans = 1;\n    for i\
    \ in 1..n {\n        for j in i..n {\n            for k in i..n {\n          \
    \      if i != j && i != k && j != k {\n                    ans += 1;\n      \
    \          }\n            }\n        }\n    }\n    ans\n}\n\nfn main() {\n   \
    \ let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `1`', /tmp/tmpn_393_h9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().for_each(|x| {\n        if x > 3 {\n           \
    \ println!(\"The only valid triple is ({}, {}, {})\", a[0], a[2], a[1]);\n   \
    \     }\n    })\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjd4kiu1e.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjd4kiu1e.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjd4kiu1e.rs:17:16\n   |\n17 |         if x > 3 {\n   |             \
    \   ^\n   |                |\n   |                expected reference, found integer\n\
    \   |                help: consider borrowing here: `&3`\n   |\n   = note: expected\
    \ reference `&_`\n                   found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjd4kiu1e.rs:16:5\n   |\n11 |   fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                   ----- expected `isize` because\
    \ of return type\n...\n16 | /     a.iter().for_each(|x| {\n17 | |         if x\
    \ > 3 {\n18 | |             println!(\"The only valid triple is ({}, {}, {})\"\
    , a[0], a[2], a[1]);\n19 | |         }\n20 | |     })\n   | |______^ expected\
    \ `isize`, found `()`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a : [Vec<usize>; n + 1] = Default::default();\n    for i in 0..n\
    \ {\n        a[i] = i.to_vec();\n    }\n    for i in 0..n - 1 {\n        for j\
    \ in i + 1..n {\n            for k in j + 1..n {\n                if is_multiple_of_3(i.to_vec(),\
    \ j.to_vec(), k.to_vec()) {\n                    a[i][j].push(k.to_vec());\n \
    \               }\n            }\n        }\n    }\n    a.iter().fold(0, |mut\
    \ acc, ele| {\n        if *ele.len() > acc {\n            acc\n        } else\
    \ {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp9_ckl_qe.rs:12:30\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a : [Vec<usize>; n + 1] = Default::default();\n   |                        \
    \      ^\n\nerror[E0425]: cannot find function `is_multiple_of_3` in this scope\n\
    \  --> /tmp/tmp9_ckl_qe.rs:19:20\n   |\n19 |                 if is_multiple_of_3(i.to_vec(),\
    \ j.to_vec(), k.to_vec()) {\n   |                    ^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `to_vec` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp9_ckl_qe.rs:14:18\n   |\n14 |         a[i]\
    \ = i.to_vec();\n   |                  ^^^^^^ help: there is an associated function\
    \ with a similar name: `to_be`\n\nerror[E0599]: no method named `to_vec` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmp9_ckl_qe.rs:19:39\n   |\n\
    19 |                 if is_multiple_of_3(i.to_vec(), j.to_vec(), k.to_vec()) {\n\
    \   |                                       ^^^^^^ help: there is an associated\
    \ function with a similar name: `to_be`\n\nerror[E0599]: no method named `to_vec`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp9_ckl_qe.rs:19:51\n\
    \   |\n19 |                 if is_multiple_of_3(i.to_vec(), j.to_vec(), k.to_vec())\
    \ {\n   |                                                   ^^^^^^ help: there\
    \ is an associated function with a similar name: `to_be`\n\nerror[E0599]: no method\
    \ named `to_vec` found for type `isize` in the current scope\n  --> /tmp/tmp9_ckl_qe.rs:19:63\n\
    \   |\n19 |                 if is_multiple_of_3(i.to_vec(), j.to_vec(), k.to_vec())\
    \ {\n   |                                                               ^^^^^^\
    \ help: there is an associated function with a similar name: `to_be`\n\nerror[E0599]:\
    \ no method named `to_vec` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp9_ckl_qe.rs:20:36\n   |\n20 |                     a[i][j].push(k.to_vec());\n\
    \   |                                    ^^^^^^ help: there is an associated function\
    \ wi"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 1;\n    }\n\n    let mut a = [1; n];\n\n \
    \   let mut count = 0;\n    for i in 1..n-1 {\n        for j in 1..n-1 {\n   \
    \         if a[i] < a[j] {\n                break;\n            }\n\n        \
    \    if a[i] == a[j] && i != j {\n                count += 1;\n            }\n\
    \        }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpwpvml5ky.rs:16:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n...\n16 |    \
    \ let mut a = [1; n];\n   |                     ^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![0; n];\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for j in 0..n {\n        for k in 0..n\
    \ {\n            if a[j] > a[k] && j > k {\n                count += 1;\n    \
    \        }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdg11j3ua.rs:13:25\n   |\n\
    13 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpdg11j3ua.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdg11j3ua.rs:19:16\n   |\n19 |  \
    \           if a[j] > a[k] && j > k {\n   |                ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdg11j3ua.rs:19:23\n   |\n19 |  \
    \           if a[j] > a[k] && j > k {\n   |                       ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    fn f(a: &[isize]) -> isize {\n        let mut result = 1;\n        for\
    \ (i, j, k) in a.iter().cloned().zip(a.iter().cloned().skip(1).cloned().zip(a.iter().cloned().skip(1).cloned().skip(1).cloned()))\
    \ {\n            if i <= j && j <= k && k <= n {\n                let mut sum\
    \ = 0;\n                for v in a.iter().cloned().skip(1).cloned().skip(1).cloned().skip(1).cloned()\
    \ {\n                    sum += *v;\n                    if sum == 3 {\n     \
    \                   return result + 1;\n                    }\n              \
    \  }\n            }\n            result += 1;\n        }\n        result\n   \
    \ }\n    f(&[][..n])\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpey0nmic8.rs:15:41\n\
    \   |\n15 |             if i <= j && j <= k && k <= n {\n   |                \
    \                         ^\n   |\n   = help: use the `|| { ... }` closure form\
    \ instead\n\nerror[E0277]: the type `[_]` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpey0nmic8.rs:28:8\n   |\n28 |     f(&[][..n])\n   |        ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `RangeTo<isize>`\n   = help:\
    \ the following other types implement trait `SliceIndex<T>`:\n             <RangeTo<usize>\
    \ as SliceIndex<[T]>>\n             <RangeTo<usize> as SliceIndex<str>>\n   =\
    \ note: required because of the requirements on the impl of `Index<RangeTo<isize>>`\
    \ for `[_]`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize>\
    \ as Iterator>::Item == &&_`\n    --> /tmp/tmpey0nmic8.rs:14:74\n     |\n14  \
    \ | ...   for (i, j, k) in a.iter().cloned().zip(a.iter().cloned().skip(1).cloned().zip(a.iter().cloned().skip(1).cloned().skip(1).cloned()))\
    \ {\n     |                                                                  \
    \      ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&&_`\n                found reference `&isize`\n     = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `zip` exists for struct `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpey0nmic8.rs:14:83\n \
    \  |\n14 |    ....cloned().zip(a.iter().cloned().skip(1).cloned().skip(1).cloned()))\
    \ {\n   |                 ^^^ method cannot be called on `Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `<Skip<Cloned<std::slice::Iter<'_, isize>>>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Skip<Cloned<std::slice"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n-1 {\n        for j in i+1..n-1\
    \ {\n            for k in j+1..n-1 {\n                a.push(k);\n           \
    \ }\n        }\n    }\n    a.sort();\n    a.rev();\n    let mut ans = 0.;\n  \
    \  for (ai, aj, ak) in a.iter().rev().take(3*n-2) {\n        ans += ai - (ai -\
    \ aj) - ak;\n    }\n    ans\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjvz4s4cx.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0599]: `Vec<isize>`\
    \ is not an iterator\n   --> /tmp/tmpjvz4s4cx.rs:21:7\n    |\n21  |       a.rev();\n\
    \    |         ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjvz4s4cx.rs:23:45\n   |\n23 |     for (ai, aj,\
    \ ak) in a.iter().rev().take(3*n-2) {\n   |                                  \
    \           ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    23 |     for (ai, aj, ak) in a.iter().rev().take((3*n-2).try_into().unwrap())\
    \ {\n   |                                             +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjvz4s4cx.rs:23:9\n   |\n23 | \
    \    for (ai, aj, ak) in a.iter().rev().take(3*n-2) {\n   |         ^^^^^^^^^^^^\
    \    -------------------------- this expression has type `Option<&isize>`\n  \
    \ |         |\n   |         expected `isize`, found tuple\n   |\n   = note: expected\
    \ type `isize`\n             found tuple `(_, _, _)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjvz4s4cx.rs:26:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n...\n26 |     ans\n   |     ^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (0..n).fold(1, |acc, i| {\n        if i % 3 == 0 {\n            if acc\
    \ % 3 == 0 {\n                acc + 1\n            } else {\n                acc\n\
    \            }\n        } else {\n            acc\n        }\n    })\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpum8v27qz.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = vec![(0, 0, 0)]; // n * (n + 1) / 2\n    for i in 1..n\
    \ {\n        for j in i+1..n {\n            for k in j+1..n {\n              \
    \  let sum = i + j + k;\n                if sum % 3 == 0 {\n                 \
    \   let mut new_result = Vec::new();\n                    new_result.push(i);\
    \ // i\n                    new_result.push(j); // j\n                    new_result.push(k);\
    \ // k\n                    let mut is_new_result = false;\n                 \
    \   for (&x, &y, &z) in new_result {\n                        if x == y {\n  \
    \                          if x == z {\n                                is_new_result\
    \ = true;\n                            }\n                            break;\n\
    \                        } else if y == z {\n                            is_new_result\
    \ = true;\n                            break;\n                        }\n   \
    \                 }\n                    if !is_new_result {\n               \
    \         result.push(new_result);\n                    }\n                }\n\
    \            }\n        }\n    }\n    result.len() // return number of valid pairs\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy22afvfg.rs:23:25\n   |\n\
    23 |                     for (&x, &y, &z) in new_result {\n   |              \
    \           ^^^^^^^^^^^^    ---------- this expression has type `Option<isize>`\n\
    \   |                         |\n   |                         expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(_, _, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy22afvfg.rs:35:37\n\
    \   |\n35 |                         result.push(new_result);\n   |           \
    \                          ^^^^^^^^^^ expected tuple, found struct `Vec`\n   |\n\
    \   = note: expected tuple `({integer}, {integer}, {integer})`\n             found\
    \ struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy22afvfg.rs:41:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n41 |     result.len()\
    \ // return number of valid pairs\n   |     ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n41 |     result.len().try_into().unwrap()\
    \ // return number of valid pairs\n   |                 ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n];\n    for i in 0..n {\n        a[i]\
    \ = i * i - i + 1;\n    }\n\n    for i in 1..n-1 {\n        let j = i + 1; //\
    \ a[i+1] = a[i] + a[j-1]\n        let k = i - 1; // a[i-1] = a[j-1] + a[k]\n \
    \       assert!(check_same_three(a[j], a[i], a[k]));\n    }\n    a.iter().filter(|&a|\
    \ a % 3 == 0).count()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `check_same_three` in this scope\n \
    \ --> /tmp/tmp_kfpc1g6.rs:20:17\n   |\n20 |         assert!(check_same_three(a[j],\
    \ a[i], a[k]));\n   |                 ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_kfpc1g6.rs:12:37\n   |\n12 |\
    \     let mut a: Vec<isize> = vec![0; n];\n   |                              \
    \       ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut a: Vec<isize> = vec![0; n.try_into().unwrap()];\n   |                  \
    \                    ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_kfpc1g6.rs:14:9\n   |\n14 |   \
    \      a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_kfpc1g6.rs:20:34\n   |\n20 |         assert!(check_same_three(a[j],\
    \ a[i], a[k]));\n   |                                  ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_kfpc1g6.rs:20:40\n   |\n20 |         assert!(check_same_three(a[j],\
    \ a[i], a[k]));\n   |                                        ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    let mut sum = 0;\n    for i in 0..n {\n    \
    \    a[i] = i * i - i + 1;\n        if i % 3 == 0 {\n            sum += i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpanufw9qy.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (0..n).fold(0, |mut acc, i| acc + get_triples(i).unwrap().iter().sum())\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_triples` in this scope\n  --> /tmp/tmpjdw2hn77.rs:12:39\n\
    \   |\n12 |     (0..n).fold(0, |mut acc, i| acc + get_triples(i).unwrap().iter().sum())\n\
    \   |                                       ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    loop {\n        if n == 0 {\n            break;\n        }\n        let\
    \ mut triples: Vec<isize> = vec![];\n        let mut a = vec![1isize; n];\n  \
    \      let mut a_ptr = 0;\n        let mut a_len = a.len();\n        while a_len\
    \ > 0 {\n            triples.push(a[a_len - 1]);\n            a_ptr += 1;\n  \
    \          a_len -= 1;\n        }\n        \n        if triples.iter().all(|&i|\
    \ i * i - i + 1 == triples.last()) {\n            return triples.len() - 1;\n\
    \        }\n\n        for (i, &j) in triples.iter().enumerate() {\n          \
    \  a[a_len + i] -= 1;\n        }\n\n        a_len += 1;\n    }\n    0\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp18l33edd.rs:17:34\n   |\n\
    17 |         let mut a = vec![1isize; n];\n   |                              \
    \    ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n17 |      \
    \   let mut a = vec![1isize; n.try_into().unwrap()];\n   |                   \
    \                ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp18l33edd.rs:26:53\n   |\n26 |         if triples.iter().all(|&i| i *\
    \ i - i + 1 == triples.last()) {\n   |                                       \
    \              ^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n  \
    \ = note: expected type `isize`\n              found enum `Option<&isize>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp18l33edd.rs:27:20\n   |\n27 |  \
    \           return triples.len() - 1;\n   |                    ^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n27 |           \
    \  return (triples.len() - 1).try_into().unwrap();\n   |                    +\
    \                 +++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Sort the a array\n    let mut a = vec![0; n];\n    for (i, _) in a.iter_mut().enumerate()\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    a.sort_unstable();\n\n    // Iterate\
    \ in reverse order\n    for (i, _) in a.iter().rev().enumerate() {\n        let\
    \ mut count = 0;\n        // Increment count for each a[i] - a[j]\n        for\
    \ j in 0..i {\n            let s = a[i] - a[j];\n            if s == 0 {\n   \
    \             break;\n            }\n            count += s;\n        }\n    \
    \    if count % 3 == 0 {\n            return count;\n        }\n    }\n    0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8pv_q_ra.rs:13:25\n   |\n\
    13 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8pv_q_ra.rs:31:20\n   |\n31 |             return count;\n\
    \   |                    ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n31 |             return count.try_into().unwrap();\n   |        \
    \                 ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n-1 {\n        a[i] = i*i -\
    \ i + 1;\n    }\n    let mut num_triplets = 0;\n    for j in 1..n-1 {\n      \
    \  for k in 1..n-1 {\n            if i != j && j != k {\n                if a[i]\
    \ - a[j] == a[k] - a[i] {\n                    num_triplets += 1;\n          \
    \      }\n            }\n        }\n    }\n    num_triplets\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpzrc96uog.rs:19:16\n\
    \   |\n19 |             if i != j && j != k {\n   |                ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find value\
    \ `i` in this scope\n  --> /tmp/tmpzrc96uog.rs:20:22\n   |\n20 |             \
    \    if a[i] - a[j] == a[k] - a[i] {\n   |                      ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find value\
    \ `i` in this scope\n  --> /tmp/tmpzrc96uog.rs:20:44\n   |\n20 |             \
    \    if a[i] - a[j] == a[k] - a[i] {\n   |                                   \
    \         ^ help: a local variable with a similar name exists: `a`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzrc96uog.rs:12:25\n   |\n12 |     let mut a\
    \ = vec![0; n];\n   |                         ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpzrc96uog.rs:14:9\n\
    \   |\n14 |         a[i] = i*i - i + 1;\n   |         ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzrc96uog.rs:20:27\n   |\n20 |  \
    \               if a[i] - a[j] == a[k] - a[i] {\n   |                        \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be inde"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (0..n).map(|i| i * i - i + 1).filter(|&x| x % 3 == 0).count()\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpprl04_go.rs:12:5\n   |\n\
    11 | fn get_max_triples(n: isize) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n12 |     (0..n).map(|i|\
    \ i * i - i + 1).filter(|&x| x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     (0..n).map(|i|\
    \ i * i - i + 1).filter(|&x| x % 3 == 0).count().try_into().unwrap()\n   |   \
    \                                                               ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = 1;\n    for i in 1..n {\n        if i % 3 == 0 && i\
    \ % 3 != 0 && i % 7 == 0 {\n            result += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpyakk8gp_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 1 {\n        return 1;\n    }\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    res.resize(n + 1);\n    for i in 1..=n+1 {\n        let mut\
    \ a: Vec<isize> = Vec::new();\n        a.resize(n + 1);\n        a[0] = i;\n \
    \       a[i] = i * i - i + 1;\n        for i in 1..n+1 {\n            for j in\
    \ 1..n+1 {\n                for k in 1..n+1 {\n                    if i != j &&\
    \ j != k {\n                        if a[i] < a[j] && a[i] < a[k] {\n        \
    \                    a[i] = a[j];\n                        }\n               \
    \         if a[i] > a[j] && a[j] > a[k] {\n                            a[i] =\
    \ a[k];\n                        }\n                        if a[i] > a[j] &&\
    \ a[j] < a[k] {\n                            a[i] = a[j];\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \        res.push(a.len());\n    }\n    res.iter().max()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmplqsvpd5o.rs:16:9\n     |\n16   |     res.resize(n + 1);\n   \
    \  |         ^^^^^^ ----- supplied 1 argument\n     |         |\n     |      \
    \   expected 2 arguments\n     |\nnote: associated function defined here\n\nerror[E0061]:\
    \ this function takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmplqsvpd5o.rs:19:11\n\
    \     |\n19   |         a.resize(n + 1);\n     |           ^^^^^^ ----- supplied\
    \ 1 argument\n     |           |\n     |           expected 2 arguments\n    \
    \ |\nnote: associated function defined here\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplqsvpd5o.rs:21:9\n   |\n21 |   \
    \      a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplqsvpd5o.rs:26:28\n   |\n26 |            \
    \             if a[i] < a[j] && a[i] < a[k] {\n   |                          \
    \  ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplqsvpd5o.rs:26:35\n\
    \   |\n26 |                         if a[i] < a[j] && a[i] < a[k] {\n   |    \
    \                               ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: t"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut cnt = 0;\n    let mut a = [0; n];\n    let mut x = n - 1;\n \
    \   while x < n {\n        a[x] = a[x] * a[x] - a[x] + 1;\n        if a[x + 1]\
    \ == 0 || a[x + 1] + a[x + 2] == 0 {\n            cnt++;\n        }\n        x++;\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpp1qlcik_.rs:18:16\n\
    \   |\n18 |             cnt++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n18 |             { let tmp = cnt; cnt +=\
    \ 1; tmp };\n   |             +++++++++++    ~~~~~~~~~~~~~~~~~\n18 -         \
    \    cnt++;\n18 +             cnt += 1;\n   | \n\nerror: Rust has no postfix increment\
    \ operator\n  --> /tmp/tmpp1qlcik_.rs:20:10\n   |\n20 |         x++;\n   |   \
    \       ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n\
    20 |         { let tmp = x; x += 1; tmp };\n   |         +++++++++++  ~~~~~~~~~~~~~~~\n\
    20 -         x++;\n20 +         x += 1;\n   | \n\nerror[E0435]: attempt to use\
    \ a non-constant value in a constant\n  --> /tmp/tmpp1qlcik_.rs:13:21\n   |\n\
    11 | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n12 |     let mut cnt = 0;\n13 |     let mut a = [0; n];\n\
    \   |                     ^\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = vec![(0, 0, 0)];\n    let mut i = 1;\n    while i < n {\n\
    \        for j in 0..i {\n            for k in 0..i {\n                if (i +\
    \ j + k) == i*i*i {\n                    res.push((i, j, k));\n              \
    \  }\n            }\n        }\n        i += 1;\n    }\n    res.len() as isize\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp35mgm85t.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    for i in 0..n - 1 {\n        for j in (i + 1)..n {\n        \
    \    for k in (i + 1)..n {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n\
    \                    return 1 + 1 + 1;\n                }\n            }\n   \
    \     }\n    }\n    0\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpmrtxtocs.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0i;\n    let mut triples = 0usize;\n    for _ in 0..n {\n\
    \        let mut trip = 0usize;\n        for _ in 0..n {\n            trip +=\
    \ 1;\n        }\n        sum += trip;\n        triples += trip;\n    }\n    triples\
    \ % 3\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: invalid suffix `i` for number literal\n  --> /tmp/tmpz0wchx89.rs:12:19\n\
    \   |\n12 |     let mut sum = 0i;\n   |                   ^^ invalid suffix `i`\n\
    \   |\n   = help: the suffix must be one of the numeric types (`u32`, `isize`,\
    \ `f32`, etc.)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz0wchx89.rs:22:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n22 |     triples\
    \ % 3\n   |     ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n22 |     (triples % 3).try_into().unwrap()\n   |     +           +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0isize; n];\n\n    for i in 1..a.len() {\n        a[i] =\
    \ i * (i - 1) + i + 1;\n    }\n\n    a.iter().filter(|&x| x % 3 == 0).count()\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp12c8wy9a.rs:12:26\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0isize; n];\n   |                          ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp12c8wy9a.rs:18:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n...\n18 |     a.iter().filter(|&x| x % 3 == 0).count()\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n18 |     a.iter().filter(|&x| x % 3 == 0).count().try_into().unwrap()\n\
    \   |                                             ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0435.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut a = [0; n];\n    \n    for i in 1..n {\n\
    \        for j in i+1..n {\n            sum += a.iter().map(|&i| i * i - i + 1).sum();\n\
    \            a[j] -= sum;\n        }\n    }\n    \n    a.iter().filter(|&x| x\
    \ % 3 == 0).count();\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpyl1_9d26.rs:13:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ sum = 0;\n13 |     let mut a = [0; n];\n   |                     ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyl1_9d26.rs:11:33\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |    ---------------              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0435.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 1 {\n        return 0;\n    }\n    let mut a: Vec<_> = Vec::new();\n\
    \    for _ in 1..n {\n        a.push(*((*((&a.front()).unwrap()) + 1) - 1));\n\
    \    }\n    let mut count: isize = 0;\n    for i in 0..(n - 1) {\n        for\
    \ j in 0..(n - 1) {\n            for k in 0..(n - 1) {\n                if i ==\
    \ j && j == k {\n                    continue;\n                }\n          \
    \      if i == j && i == k {\n                    continue;\n                }\n\
    \                if i == j && j == k {\n                    continue;\n      \
    \          }\n                if a[i] < a[j] && a[i] < a[k] {\n              \
    \      count += 1;\n                }\n                if a[j] < a[i] && a[j]\
    \ < a[k] {\n                    count += 1;\n                }\n             \
    \   if a[k] < a[i] && a[k] < a[j] {\n                    count += 1;\n       \
    \         }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `front` found for struct `Vec<_>` in the\
    \ current scope\n  --> /tmp/tmpepgksmx8.rs:17:25\n   |\n17 |         a.push(*((*((&a.front()).unwrap())\
    \ + 1) - 1));\n   |                         ^^^^^ method not found in `Vec<_>`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpepgksmx8.rs:32:20\n\
    \   |\n32 |                 if a[i] < a[j] && a[i] < a[k] {\n   |            \
    \        ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpepgksmx8.rs:32:27\n\
    \   |\n32 |                 if a[i] < a[j] && a[i] < a[k] {\n   |            \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpepgksmx8.rs:32:35\n\
    \   |\n32 |                 if a[i] < a[j] && a[i] < a[k] {\n   |            \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpepgksmx8.rs:32:42\n\
    \   |\n32 |                 if a[i] < a[j] && a[i] < a[k] {\n   |            \
    \                              ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented f"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0;n];\n    let mut sum = 0;\n    for x in &mut a[0..n-1]\
    \ {\n        *x = *x + 1;\n        sum = sum + 1;\n    }\n\n    for x in &mut\
    \ a[0..n-1] {\n        let mut found = false;\n        for y in &mut a[0..n-1]\
    \ {\n            if y == x {\n                continue;\n            }\n     \
    \       found = true;\n            *y = *y + 1;\n            if check(a[0..n-1],\
    \ x, y) {\n                return sum;\n            }\n        }\n    }\n    0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpbbud866c.rs:12:20\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0;n];\n   |                    ^\n\nerror[E0425]: cannot find function\
    \ `check` in this scope\n  --> /tmp/tmpbbud866c.rs:27:16\n   |\n27 |         \
    \    if check(a[0..n-1], x, y) {\n   |                ^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0435.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n + 1];\n    for i in 1..n{\n        a[i] = i * i\
    \ - i + 1;\n    }\n    for (i1, i2, i3) in a.iter().rev(){\n        if i1 + i2\
    \ == i3 {\n            return i1;\n        }\n    }\n    0\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbaa33r_3.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n + 1];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbaa33r_3.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbaa33r_3.rs:16:9\n   |\n16 |     for (i1, i2, i3) in a.iter().rev(){\n\
    \   |         ^^^^^^^^^^^^    -------------- this expression has type `Option<&{integer}>`\n\
    \   |         |\n   |         expected integer, found tuple\n   |\n   = note:\
    \ expected type `{integer}`\n             found tuple `(_, _, _)`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = Vec::new();\n    let mut a = Vec::new();\n    for i\
    \ in 1..n + 1 {\n        let mut j = 0;\n        while j < n {\n            if\
    \ j + 1 < n {\n                a.push(j + 1 + i * i);\n            }\n       \
    \     j += 1;\n        }\n        triples.push((a[i], a[j], a[n]));\n    }\n \
    \   let mut i = 0;\n    while i < triples.len() {\n        if triples[i].1 % 3\
    \ != 0 {\n            break;\n        }\n        i += 1;\n    }\n    triples.len()\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppcjg8ez7.rs:22:23\n\
    \   |\n22 |         triples.push((a[i], a[j], a[n]));\n   |                  \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppcjg8ez7.rs:22:29\n\
    \   |\n22 |         triples.push((a[i], a[j], a[n]));\n   |                  \
    \           ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppcjg8ez7.rs:22:35\n\
    \   |\n22 |         triples.push((a[i], a[j], a[n]));\n   |                  \
    \                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppcjg8ez7.rs:31:5\n   |\n11 | fn\
    \ get_max_triples(n: isize) -> isize {\n   |                                 -----\
    \ expected `isize` because of return type\n...\n31 |     triples.len()\n   | \
    \    ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    31 |     triples.len().try_into().unwrap()\n   |                  ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    match n {\n        1 => 1,\n        _ => {\n            let mut a = vec![1isize;\
    \ n];\n            for i in 0..n {\n                a[i] = i * i - i + 1;\n  \
    \          }\n            a[n]\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw0pykajk.rs:15:38\n   |\n\
    15 |             let mut a = vec![1isize; n];\n   |                          \
    \            ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n15\
    \ |             let mut a = vec![1isize; n.try_into().unwrap()];\n   |       \
    \                                ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw0pykajk.rs:17:17\n  \
    \ |\n17 |                 a[i] = i * i - i + 1;\n   |                 ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpw0pykajk.rs:19:13\n   |\n19 |  \
    \           a[n]\n   |             ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if i + j + k == 3 && i*i + j*j\
    \ == k*k {\n                    result +=1;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6o7w0r23.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut triples = 0;\n    for i in 1..n+1 {\n \
    \       for j in 1..n+1 {\n            sum += i * j;\n            if i * j % 3\
    \ == 0 && sum % 3 == 0 {\n                triples++;\n            }\n        }\n\
    \    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp0ey9a0yj.rs:18:24\n\
    \   |\n18 |                 triples++;\n   |                        ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n18 |               \
    \  { let tmp = triples; triples += 1; tmp };\n   |                 +++++++++++\
    \        ~~~~~~~~~~~~~~~~~~~~~\n18 -                 triples++;\n18 +        \
    \         triples += 1;\n   | \n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n] = [0; n];\n    \n    for i in 0..n {\n        a[i]\
    \ = i * i - i + 1;\n    }\n\n    for i in 1..n {\n        for j in i..n {\n  \
    \          let k = n - i - j;\n\n            if a[i] < a[j] && a[i] < a[k] {\n\
    \                return i;\n            }\n        }\n    }\n\n    a.len()\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpxzh2tgea.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n] = [0; n];\n   |                        ^\n\nerror[E0435]: attempt\
    \ to use a non-constant value in a constant\n  --> /tmp/tmpxzh2tgea.rs:12:33\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    -\
    \ this would need to be a `const`\n12 |     let mut a: [usize; n] = [0; n];\n\
    \   |                                 ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxzh2tgea.rs:28:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n28 |     a.len()\n   |     ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n28 |     a.len().try_into().unwrap()\n   |        \
    \    ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0435.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0\n    }\n    let mut a = vec![0; n];\n  \
    \  for i in 0..n {\n        a[i] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            let mut res = 0;\n            for k in\
    \ 0..i {\n                res += a[k];\n            }\n            if res == i*(i+1)-i+1\
    \ {\n                return i+j+1;\n            }\n        }\n    }\n    0\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2zjgmnw.rs:15:25\n   |\n\
    15 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpw2zjgmnw.rs:17:9\n\
    \   |\n17 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpw2zjgmnw.rs:23:24\n   |\n23 |  \
    \               res += a[k];\n   |                        ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|x| x ** 3 % 3 == 0).count()\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp3m1bphlt.rs:12:26\n\
    \   |\n12 |     (1..n).filter(|x| x ** 3 % 3 == 0).count()\n   |             \
    \             ^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3m1bphlt.rs:12:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n12 |     (1..n).filter(|x|\
    \ x ** 3 % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     (1..n).filter(|x|\
    \ x ** 3 % 3 == 0).count().try_into().unwrap()\n   |                         \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 1 {\n        return 0;\n    }\n\n    let mut a_vec: Vec<isize>\
    \ = vec![0; n + 1];\n    a_vec[0] = -1;\n    for i in 1..n + 1 {\n        a_vec[i]\
    \ = i * i - i + 1;\n    }\n    a_vec.iter().enumerate().filter(|&(e, _)| e.p2\
    \ >= 3).count() as isize\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi5gvpnxx.rs:16:41\n   |\n\
    16 |     let mut a_vec: Vec<isize> = vec![0; n + 1];\n   |                   \
    \                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     let mut a_vec: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                         +     +++++++++++++++++++++\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpi5gvpnxx.rs:19:9\n\
    \   |\n19 |         a_vec[i] = i * i - i + 1;\n   |         ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0610]: `usize` is a primitive type\
    \ and therefore doesn't have fields\n  --> /tmp/tmpi5gvpnxx.rs:21:49\n   |\n21\
    \ |     a_vec.iter().enumerate().filter(|&(e, _)| e.p2 >= 3).count() as isize\n\
    \   |                                                 ^^\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0610.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![n*(n - 1) / 2];\n    for i in 0..n {\n        for j\
    \ in (i + 1..n) {\n            match checked_add_triple(i, j, &mut a) { \n   \
    \             Ok(()) => {}\n                Err(_) => {}\n            }\n    \
    \    }\n    }\n    a.iter().filter_map(|&x| x).count()\n}\n\nfn main() {\n   \
    \ let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `checked_add_triple` in this scope\n\
    \  --> /tmp/tmp73579z2l.rs:15:19\n   |\n15 |             match checked_add_triple(i,\
    \ j, &mut a) { \n   |                   ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nwarning: unnecessary parentheses around `for` iterator expression\n  --> /tmp/tmp73579z2l.rs:14:18\n\
    \   |\n14 |         for j in (i + 1..n) {\n   |                  ^        ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n14 -         for j in (i + 1..n) {\n14 +         for j in i + 1..n {\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp73579z2l.rs:21:30\n  \
    \ |\n21 |     a.iter().filter_map(|&x| x).count()\n   |                      \
    \        ^ expected enum `Option`, found `isize`\n   |\n   = note: expected enum\
    \ `Option<_>`\n              found type `isize`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n21 |     a.iter().filter_map(|&x| Some(x)).count()\n   |  \
    \                            +++++ +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp73579z2l.rs:21:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n21 |     a.iter().filter_map(|&x| x).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n21 |     a.iter().filter_map(|&x|\
    \ x).count().try_into().unwrap()\n   |                                       \
    \ ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    a.iter().cloned().enumerate().filter(|(v, i)| i < n).count()\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmpnxpll3l6.rs:12:5\n\
    \   |\n12 |     a.iter().cloned().enumerate().filter(|(v, i)| i < n).count()\n\
    \   |     ^ help: a local variable with a similar name exists: `n`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut min_triples = vec![0; n];\n    let mut max_triples = vec![0;\
    \ n];\n    let mut min_triples_size: isize = 0;\n    let mut max_triples_size:\
    \ isize = 0;\n    for i in 0..n {\n        for j in 0..i {\n            if i !=\
    \ j {\n                for k in 0..i+j {\n                    if i != k && j !=\
    \ k {\n                        if ((i*i)+(i*j)+(i*k)) == (i*(i+1)+(i*(j+1))+(i*(k+1)))*3\
    \ {\n                            min_triples_size += 1;\n                    \
    \        min_triples[i] = i;\n                            min_triples[j] = j;\n\
    \                            min_triples[k] = k;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   for i in 0..n {\n        if min_triples[i] != i {\n            max_triples[i]\
    \ = min_triples[i] + 1;\n            max_triples_size += 1;\n        }\n    }\n\
    \    // max_triples_size == min_triples_size => no triple\n    if min_triples_size\
    \ == max_triples_size {\n        0\n    } else {\n        min_triples_size + 1\n\
    \    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpit4l52qe.rs:12:35\n   |\n\
    12 |     let mut min_triples = vec![0; n];\n   |                             \
    \      ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut min_triples = vec![0; n.try_into().unwrap()];\n   |                    \
    \                ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpit4l52qe.rs:13:35\n   |\n13 |     let mut max_triples = vec![0; n];\n\
    \   |                                   ^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     let mut max_triples = vec![0; n.try_into().unwrap()];\n\
    \   |                                    ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpit4l52qe.rs:23:29\n\
    \   |\n23 | ...                   min_triples[i] = i;\n   |                  \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpit4l52qe.rs:24:29\n\
    \   |\n24 | ...                   min_triples[j] = j;\n   |                  \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpit4l52qe.rs:25:29\n\
    \   |\n25 | ...                   min_triples[k] = k;\n   |                  \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a: Vec<_> = vec![0;\
    \ n];\n    for &i in a.iter_mut() {\n        *i = i * i - i + 1;\n    }\n    for\
    \ i in 0..n - 1 {\n        for j in i + 1..n {\n            for k in j + 1..n\
    \ {\n                if is_triple(a[i], a[j], a[k]) && (j != k) {\n          \
    \          a[k] = a[j] + a[k];\n                }\n            }\n        }\n\
    \    }\n    a.iter().filter(|&x| x % 3 == 0).count()\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_triple` in this scope\n  --> /tmp/tmpmhph00lr.rs:22:20\n\
    \   |\n22 |                 if is_triple(a[i], a[j], a[k]) && (j != k) {\n   |\
    \                    ^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmhph00lr.rs:15:33\n   |\n15 |     let mut a: Vec<_> = vec![0;\
    \ n];\n   |                                 ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |     let mut a: Vec<_> = vec![0; n.try_into().unwrap()];\n\
    \   |                                  ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmhph00lr.rs:16:9\n   |\n16 |     for &i in a.iter_mut()\
    \ {\n   |         ^^    ------------ this expression has type `Option<&mut {integer}>`\n\
    \   |         |\n   |         types differ in mutability\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note: expected mutable\
    \ reference `&mut {integer}`\n                      found reference `&_`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpmhph00lr.rs:22:30\n\
    \   |\n22 |                 if is_triple(a[i], a[j], a[k]) && (j != k) {\n   |\
    \                              ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpmhph00lr.rs:22:36\n   |\n22 |                 if is_triple(a[i],\
    \ a[j], a[k]) && (j != k) {\n   |                                    ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [(isize, isize, isize)] = vec![(0, 0, 0)];\n    for _ in 0..n\
    \ {\n        let mut j = 1;\n        while a[j].1 == 0 {\n            a[j].1 +=\
    \ 1;\n            j += 1;\n        }\n        a[j].0 += 1;\n    }\n    \n    for\
    \ x in a {\n        if x.1 < x.2 {\n            return x.0;\n        }\n     \
    \   if x.2 < x.3 {\n            return x.3;\n        }\n    }\n    0\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp76t4bwb9.rs:12:42\n   |\n\
    12 |     let mut a: [(isize, isize, isize)] = vec![(0, 0, 0)];\n   |         \
    \       -----------------------   ^^^^^^^^^^^^^^^ expected slice, found struct\
    \ `Vec`\n   |                |\n   |                expected due to this\n   |\n\
    \   = note: expected slice `[(isize, isize, isize)]`\n             found struct\
    \ `Vec<({integer}, {integer}, {integer})>`\n   = note: this error originates in\
    \ the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0277]: the size for values of type `[(isize, isize, isize)]` cannot be\
    \ known at compilation time\n  --> /tmp/tmp76t4bwb9.rs:12:9\n   |\n12 |     let\
    \ mut a: [(isize, isize, isize)] = vec![(0, 0, 0)];\n   |         ^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[(isize, isize, isize)]`\n   = note: all local variables must\
    \ have a statically known size\n   = help: unsized locals are gated as an unstable\
    \ feature\n\nerror[E0277]: the size for values of type `[(isize, isize, isize)]`\
    \ cannot be known at compilation time\n  --> /tmp/tmp76t4bwb9.rs:22:14\n   |\n\
    22 |     for x in a {\n   |              ^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[(isize, isize, isize)]: IntoIterator` is not\
    \ satisfied\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[(isize, isize, isize)]`\nhelp: consider borrowing here\n   |\n22 |   \
    \  for x in &a {\n   |              +\n22 |     for x in &mut a {\n   |      \
    \        ++++\n\nerror[E0277]: `[(isize, isize, isize)]` is not an iterator\n\
    \  --> /tmp/tmp76t4bwb9.rs:22:14\n   |\n22 |     for x in a {\n   |          \
    \    ^ expected an implementor of trait `IntoIterator`\n   |\n   = note: the trait\
    \ bound `[(isize, isize, isize)]: IntoIterator` is not satisfied\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `[(isize, isize,\
    \ isize)]`\nhelp: consider borrowing here\n   |\n22 |     for x in &a {\n   |\
    \              +\n22 |     for x in &mut a {\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max_triple = 0;\n    let mut triple = 0;\n    let mut sum = 0;\n\
    \    for _ in 0..n {\n        sum = sum + triple;\n        triple = triple + 1;\n\
    \        if sum % 3 != 0 {\n            if sum > max_triple {\n              \
    \  max_triple = sum;\n            }\n            triple = 0;\n            sum\
    \ = 0;\n        }\n    }\n    if sum > max_triple {\n        max_triple = sum;\n\
    \    }\n    return max_triple;\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpjaav40zw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 1..n {\n        for j in (i + 1) .. n\
    \ {\n            for k in (j + 1) .. n {\n                if i % j == 0 && i %\
    \ k == 0 && j % k == 0 {\n                    sum += 1;\n                }\n \
    \           }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpmiwedf9m.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut\
    \ j = 0;\n    let mut k = 0;\n    while j < n {\n        sum = (sum * 3) + j +\
    \ 1;\n        k += 1;\n        if sum == n + 1 {\n            break;\n       \
    \ }\n        j += 1;\n    }\n    return k;\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `1`', /tmp/tmp4zusoohz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0..i];\n    for i in a.iter_mut() {\n        *i = i\
    \ * i - i + 1;\n    }\n    a.iter().filter(|&i| i < n).count() * 3\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpmb1bf3wf.rs:12:25\n\
    \   |\n12 |     let mut a = vec![0..i];\n   |                         ^ help:\
    \ a local variable with a similar name exists: `n`\n\nerror[E0369]: cannot multiply\
    \ `&mut std::ops::Range<{integer}>` by `&mut std::ops::Range<{integer}>`\n  -->\
    \ /tmp/tmpmb1bf3wf.rs:14:16\n   |\n14 |         *i = i * i - i + 1;\n   |    \
    \          - ^ - &mut std::ops::Range<{integer}>\n   |              |\n   |  \
    \            &mut std::ops::Range<{integer}>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmb1bf3wf.rs:16:30\n   |\n16 |     a.iter().filter(|&i| i < n).count()\
    \ * 3\n   |                              ^\n   |                             \
    \ |\n   |                              expected reference, found `isize`\n   |\
    \                              help: consider borrowing here: `&n`\n   |\n   =\
    \ note: expected reference `&_`\n                   found type `isize`\n\nerror[E0369]:\
    \ binary operation `<` cannot be applied to type `&std::ops::Range<{integer}>`\n\
    \  --> /tmp/tmpmb1bf3wf.rs:16:28\n   |\n16 |     a.iter().filter(|&i| i < n).count()\
    \ * 3\n   |                          - ^ - &_\n   |                          |\n\
    \   |                          &std::ops::Range<{integer}>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmb1bf3wf.rs:16:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n...\n16 |     a.iter().filter(|&i| i < n).count() * 3\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     (a.iter().filter(|&i| i < n).count() * 3).try_into().unwrap()\n\
    \   |     +                                       +++++++++++++++++++++\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![n..];\n    for i in 0..n {\n        a[i] = i * i - i\
    \ + 1;\n    }\n\n    let mut count = 1;\n    for i in 1..n {\n        for j in\
    \ 0..i {\n            for k in 0..i {\n                if i != j && i != k &&\
    \ j != k {\n                    assert!(i != k);\n                    if a[i +\
    \ j + k] % 3 == 0 {\n                        count += 1;\n                   \
    \ }\n                }\n            }\n        }\n    }\n\n    count\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[RangeFrom<isize>]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpg9h2e07p.rs:14:9\n   |\n14 |         a[i] = i * i - i + 1;\n  \
    \ |         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[RangeFrom<isize>]>` is not implemented for\
    \ `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<RangeFrom<isize>>`\n\nerror[E0277]: the type `[RangeFrom<isize>]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpg9h2e07p.rs:23:24\n   |\n23 |         \
    \            if a[i + j + k] % 3 == 0 {\n   |                        ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[RangeFrom<isize>]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<RangeFrom<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => get_max_triples(n\
    \ - 1) + get_max_triples(n - 2)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `1`', /tmp/tmpv9hty_2k.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k = n - 1;\n    while\
    \ i < j && j < k && k < n {\n        if a::[i] > a::[j] {\n            j += 1;\n\
    \        }\n        if a::[j] > a::[k] {\n            k += 1;\n        }\n   \
    \     if a::[k] > a::[i] {\n            i += 1;\n        }\n    }\n    j\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `[`\n  --> /tmp/tmp590lnawj.rs:16:15\n\
    \   |\n16 |         if a::[i] > a::[j] {\n   |               ^ expected identifier\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 1;\n    let mut a = [0isize; n];\n    for i in 1..n {\n\
    \        for j in i..n {\n            for k in 0..n {\n                if i <\
    \ j && j < k && a[j] + a[k] == i * i - i + 1 {\n                    a[i] = j;\n\
    \                    a[j] = k;\n                    a[k] = i;\n              \
    \      count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpkyhcgw8o.rs:13:26\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ count = 1;\n13 |     let mut a = [0isize; n];\n   |                        \
    \  ^\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut triples = 0;\n\n    for i in 1..=n {\n\
    \        for j in (i..=n).rev() {\n            for k in (i..=n).rev() {\n    \
    \            sum += i * i * i - i * i + 1;\n                if sum == 3 {\n  \
    \                  triples += 1;\n                }\n            }\n        }\n\
    \    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpuzira28g.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n % 3 != 0 {\n        0\n    } else {\n        let mut ans = vec![(0,\
    \ 0, 0)];\n        for i in 1..n-1 {\n            for j in i + 1..n {\n      \
    \          for k in j + 1..n {\n                    let s = i * i * i + j * j\
    \ + k;\n                    if s == 0 {\n                        continue;\n \
    \                   }\n                    let mut triple_count = 0;\n       \
    \             for d in 0..3 {\n                        if s % d == 0 {\n     \
    \                       triple_count += 1;\n                        }\n      \
    \              }\n                    if triple_count > ans[0] {\n           \
    \             ans = vec![(0, 0, 0)];\n                    }\n                \
    \    ans[0] = triple_count;\n                    ans = ans.iter().cloned().collect::<Vec<_>>();\n\
    \                }\n            }\n        }\n        ans[0]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `{integer}` with `({integer}, {integer}, {integer})`\n\
    \  --> /tmp/tmps7brquld.rs:29:37\n   |\n29 |                     if triple_count\
    \ > ans[0] {\n   |                                     ^ no implementation for\
    \ `{integer} < ({integer}, {integer}, {integer})` and `{integer} > ({integer},\
    \ {integer}, {integer})`\n   |\n   = help: the trait `PartialOrd<({integer}, {integer},\
    \ {integer})>` is not implemented for `{integer}`\n   = help: the following other\
    \ types implement trait `PartialOrd<Rhs>`:\n             f32\n             f64\n\
    \             i128\n             i16\n             i32\n             i64\n   \
    \          i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps7brquld.rs:32:30\n   |\n32 |                     ans[0]\
    \ = triple_count;\n   |                     ------   ^^^^^^^^^^^^ expected tuple,\
    \ found integer\n   |                     |\n   |                     expected\
    \ due to the type of this binding\n   |\n   = note: expected tuple `({integer},\
    \ {integer}, {integer})`\n               found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps7brquld.rs:37:9\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n37 |         ans[0]\n   |         ^^^^^^ expected\
    \ `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found\
    \ tuple `({integer}, {integer}, {integer})`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    match n {\n        0 => 0,\n        1 => 1,\n        2 => 1,\n      \
    \  _ => {\n            let mut triples = Vec::<isize>::new();\n            for\
    \ i in 0..n - 1 {\n                triples.push(triple(i));\n            }\n \
    \           let mut result = 1;\n            for triple in triples {\n       \
    \         for i in 0..n - 2 {\n                    let a = triple(i); \n     \
    \               if a < i {\n                        break;\n                 \
    \   }\n                    for j in (i + 1)..n {\n                        if a\
    \ < triple(j) && triple(a) >= triple(a + j) { \n                            result\
    \ += 1;\n                            break;\n                        }\n     \
    \               }\n                }\n            }\n            result\n    \
    \    }\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `triple` in this scope\n  --> /tmp/tmp3zvk0ukl.rs:19:30\n\
    \   |\n19 |                 triples.push(triple(i));\n   |                   \
    \           ^^^^^^ help: a local variable with a similar name exists: `triples`\n\
    \nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmp3zvk0ukl.rs:24:29\n\
    \   |\n22 |             for triple in triples {\n   |                 ------ `triple`\
    \ has type `isize`\n23 |                 for i in 0..n - 2 {\n24 |           \
    \          let a = triple(i); \n   |                             ^^^^^^---\n \
    \  |                             |\n   |                             call expression\
    \ requires function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmp3zvk0ukl.rs:29:32\n\
    \   |\n22 |             for triple in triples {\n   |                 ------ `triple`\
    \ has type `isize`\n...\n29 |                         if a < triple(j) && triple(a)\
    \ >= triple(a + j) { \n   |                                ^^^^^^---\n   |   \
    \                             |\n   |                                call expression\
    \ requires function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmp3zvk0ukl.rs:29:45\n\
    \   |\n22 |             for triple in triples {\n   |                 ------ `triple`\
    \ has type `isize`\n...\n29 |                         if a < triple(j) && triple(a)\
    \ >= triple(a + j) { \n   |                                             ^^^^^^---\n\
    \   |                                             |\n   |                    \
    \                         call expression requires function\n\nerror[E0618]: expected\
    \ function, found `isize`\n  --> /tmp/tmp3zvk0ukl.rs:29:58\n   |\n22 |       \
    \      for triple in triples {\n   |                 ------ `triple` has type\
    \ `isize`\n...\n29 |                         if a < triple(j) && triple(a) >=\
    \ triple(a + j) { \n   |                                                     \
    \     ^^^^^^-------\n   |                                                    \
    \      |\n   |                                                          call expression\
    \ requires function\n\nerror: aborting due t"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert!(n);\n    (1..n).filter(|x| x * x - x + 1 == 0).count()\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdqucr7dn.rs:12:5\n   |\n\
    12 |     debug_assert!(n);\n   |     ^^^^^^^^^^^^^^^^ expected `bool`, found `isize`\n\
    \   |\n   = note: this error originates in the macro `debug_assert` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdqucr7dn.rs:13:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n12 |     debug_assert!(n);\n13 |     (1..n).filter(|x| x * x\
    \ - x + 1 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n13 |     (1..n).filter(|x|\
    \ x * x - x + 1 == 0).count().try_into().unwrap()\n   |                      \
    \                            ++++++++++++++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = Vec::new();\n    for _ in 0..n {\n        let n = i * i -\
    \ i + 1;\n        a.push(n);\n    }\n    a.sort();\n    let mut max_triple_cnt\
    \ = 0;\n    for i in 0..n {\n        let mut sum_of_triples = 0;\n        for\
    \ j in 0..n {\n            for k in 0..n {\n                sum_of_triples +=\
    \ a[i + j + k];\n            }\n        }\n        if sum_of_triples % 3 == 0\
    \ {\n            max_triple_cnt += 1;\n        }\n    }\n    max_triple_cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpm1iahtn8.rs:14:17\n\
    \   |\n14 |         let n = i * i - i + 1;\n   |                 ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find value\
    \ `i` in this scope\n  --> /tmp/tmpm1iahtn8.rs:14:21\n   |\n14 |         let n\
    \ = i * i - i + 1;\n   |                     ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror[E0425]: cannot find value `i` in this scope\n  -->\
    \ /tmp/tmpm1iahtn8.rs:14:25\n   |\n14 |         let n = i * i - i + 1;\n   | \
    \                        ^ help: a local variable with a similar name exists:\
    \ `a`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpm1iahtn8.rs:23:35\n\
    \   |\n23 |                 sum_of_triples += a[i + j + k];\n   |            \
    \                       ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut vec: Vec<i32> = Vec::new();\n    for _ in 0..n {\n        let\
    \ mut tmp: i32 = 0;\n        let mut found = false;\n        for _ in 0..n {\n\
    \            if !found {\n                tmp.push(tmp + 1);\n               \
    \ found = true;\n            }\n            tmp.push(tmp + 1);\n        }\n  \
    \      vec.push(tmp);\n    }\n    vec.sort_unstable();\n    for i in 0..n {\n\
    \        for j in (i + 1)..n {\n            let mut tmp = 0;\n            for\
    \ k in 0..n {\n                tmp = tmp + vec[i + j + k];\n            }\n  \
    \          if tmp == i * i + i + 1 {\n                return i + j + k;\n    \
    \        }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `k` in this scope\n   --> /tmp/tmpjj3pt0vt.rs:33:32\n\
    \    |\n33  |                 return i + j + k;\n    |                       \
    \         ^ help: a tuple variant with a similar name exists: `Ok`\n\nerror[E0599]:\
    \ no method named `push` found for type `i32` in the current scope\n  --> /tmp/tmpjj3pt0vt.rs:18:21\n\
    \   |\n18 |                 tmp.push(tmp + 1);\n   |                     ^^^^\
    \ method not found in `i32`\n\nerror[E0599]: no method named `push` found for\
    \ type `i32` in the current scope\n  --> /tmp/tmpjj3pt0vt.rs:21:17\n   |\n21 |\
    \             tmp.push(tmp + 1);\n   |                 ^^^^ method not found in\
    \ `i32`\n\nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpjj3pt0vt.rs:30:29\n   |\n30 |                 tmp = tmp + vec[i + j\
    \ + k];\n   |                             ^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // write your code here\n    \n    // return isize {\n    //     let\
    \ mut a = vec![0; n];\n    //     for i in 0..n {\n    //         a[i] = i * i\
    \ - i + 1;\n    //     }\n    //     a.iter().filter(|&i| i % 3 == 0).count()\n\
    \    // }\n    // let mut a = vec![0; n];\n    // for i in 0..n {\n    //    \
    \ a[i] = i * i - i + 1;\n    // }\n    // a.iter().filter(|&i| i % 3 == 0).count()\n\
    \    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().filter(|&i| i % 3 == 0).count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm3wckfp.rs:26:25\n   |\n\
    26 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n26 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgm3wckfp.rs:28:9\n\
    \   |\n28 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgm3wckfp.rs:30:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n30 |     a.iter().filter(|&i| i % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n30 |     a.iter().filter(|&i|\
    \ i % 3 == 0).count().try_into().unwrap()\n   |                              \
    \               ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<_> = vec![];\n    for i in 1..n {\n        a.push(i *\
    \ (i - 1) + (i + 1));\n    }\n    a.sort();\n    a.iter().filter(|&x| x * x ==\
    \ 2 * x.abs()).count()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp240y_kcm.rs:17:5\n   |\n\
    11 | fn get_max_triples(n: isize) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n17 |     a.iter().filter(|&x|\
    \ x * x == 2 * x.abs()).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |     a.iter().filter(|&x|\
    \ x * x == 2 * x.abs()).count().try_into().unwrap()\n   |                    \
    \                                   ++++++++++++++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Create a mutable vector of length n.\n    let mut a = vec![0; n];\n\
    \    for i in 1..n {\n        a[i] = i*i - i + 1;\n    }\n    \n    // Create\
    \ a list of all the possible triples and remove invalid ones.\n    let mut triples\
    \ = Vec::new();\n    for (i1, i2, i3) in a.iter().rev() {\n        let mut is_valid\
    \ = (a[i2] + a[i3]) == 0;\n        for i4 in i1..n {\n            let mut is_valid\
    \ = (is_valid && (a[i2] + a[i3] == a[i4]));\n            if is_valid {\n     \
    \           triples.push((i2, i3, i4));\n            }\n        }\n    }\n   \
    \ \n    // Return the length of this list as the answer.\n    triples.len()\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpb_6b35bq.rs:23:32\n\
    \   |\n23 |             let mut is_valid = (is_valid && (a[i2] + a[i3] == a[i4]));\n\
    \   |                                ^                                    ^\n\
    \   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n23 -             let mut is_valid = (is_valid && (a[i2] + a[i3] == a[i4]));\n\
    23 +             let mut is_valid = is_valid && (a[i2] + a[i3] == a[i4]);\n  \
    \ | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb_6b35bq.rs:13:25\n   |\n\
    13 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpb_6b35bq.rs:15:9\n\
    \   |\n15 |         a[i] = i*i - i + 1;\n   |         ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpb_6b35bq.rs:20:9\n   |\n20 |     for (i1, i2, i3) in a.iter().rev()\
    \ {\n   |         ^^^^^^^^^^^^    -------------- this expression has type `Option<&{integer}>`\n\
    \   |         |\n   |         expected integer, found tuple\n   |\n   = note:\
    \ expected type `{integer}`\n             found tuple `(_, _, _)`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpb_6b35bq.rs:23:63\n\
    \   |\n23 |             let mut is_valid = (is_valid && (a[i2] + a[i3] == a[i4]));\n\
    \   |                                                               ^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..=n).filter(|x| is_multiple_of_three(x).count() == 3).count()\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_multiple_of_three` in this scope\n\
    \  --> /tmp/tmpk0rdtk7y.rs:12:24\n   |\n12 |     (1..=n).filter(|x| is_multiple_of_three(x).count()\
    \ == 3).count()\n   |                        ^^^^^^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk0rdtk7y.rs:12:5\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n12 |     (1..=n).filter(|x|\
    \ is_multiple_of_three(x).count() == 3).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n12 |     (1..=n).filter(|x|\
    \ is_multiple_of_three(x).count() == 3).count().try_into().unwrap()\n   |    \
    \                                                                 ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![];\n    for i in 1..n {\n        a.push(vec![i, i, i\
    \ + 1]);\n    }\n\n    a.iter().filter(|&(i, j, k)| {\n        i <= j && j <=\
    \ k && i * i + j * j == k * k\n    }).count()\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpghiiwy_8.rs:17:23\n   |\n\
    17 |     a.iter().filter(|&(i, j, k)| {\n   |                       ^^^^^^^^-\n\
    \   |                       |       |\n   |                       |       expected\
    \ due to this\n   |                       expected struct `Vec`, found tuple\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found tuple `(_,\
    \ _, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpghiiwy_8.rs:17:5\n \
    \  |\n11 |   fn get_max_triples(n: isize) -> isize {\n   |                   \
    \                ----- expected `isize` because of return type\n...\n17 | /  \
    \   a.iter().filter(|&(i, j, k)| {\n18 | |         i <= j && j <= k && i * i +\
    \ j * j == k * k\n19 | |     }).count()\n   | |______________^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |     }).count().try_into().unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    for i in 1..n-1 {\n        for j in i+1..n-1 {\n        \
    \    for k in j+1..n-1 {\n                if a[i] < a[j] && a[i] < a[k] && a[j]\
    \ < a[k] && (a[i] + a[j] + a[k]) % 3 == 0 {\n                    return a.iter().position(|x|\
    \ x == 0).unwrap_or(n) as isize;\n                }\n            }\n        }\n\
    \    }\n    n\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmproz_98q3.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmproz_98q3.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmproz_98q3.rs:19:20\n   |\n19 |  \
    \               if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] && (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                    ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmproz_98q3.rs:19:27\n   |\n19 |  \
    \               if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] && (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                           ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmproz_98q3.rs:19:35\n   |\n19 |  \
    \               if a[i] < a[j]"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 || n <= 1 {\n        0\n    } else {\n        let mut a: Vec<i32>\
    \ = Vec::new();\n        for _ in 0..n-1 {\n            a.push(a.len() as i32);\n\
    \        }\n        let mut triples: usize = 0;\n        for i in 0..n-1 {\n \
    \           for j in i+1..n-1 {\n                for k in j+1..n-1 {\n       \
    \             let triple = a[i] + a[j] + a[k];\n                    if triple\
    \ % 3 == 0 {\n                        triples += 1;\n                    }\n \
    \               }\n            }\n        }\n        triples\n    }\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpsb86d15v.rs:23:34\n\
    \   |\n23 |                     let triple = a[i] + a[j] + a[k];\n   |       \
    \                           ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for\
    \ `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpsb86d15v.rs:23:41\n   |\n23 |                     let triple =\
    \ a[i] + a[j] + a[k];\n   |                                         ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[i32]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsb86d15v.rs:23:48\n   |\n23 |  \
    \                   let triple = a[i] + a[j] + a[k];\n   |                   \
    \                             ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<i32>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsb86d15v.rs:30:9\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n30 |       \
    \  triples\n   |         ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n30 |         triples.try_into().unwrap()\n   |                ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor "
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 {\n        return 0;\n    }\n    let mut a = vec![0; n + 1];\n\
    \    for _ in 0..n {\n        let mut sum = 0;\n        for _ in 0..n {\n    \
    \        sum += a[n];\n        }\n        a[n] = sum - sum - sum + 1;\n    }\n\
    \    a.iter().enumerate().filter(|(_, v)| v % 3 == 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphgyzpzeg.rs:15:25\n   |\n\
    15 |     let mut a = vec![0; n + 1];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     let mut a = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphgyzpzeg.rs:19:20\n\
    \   |\n19 |             sum += a[n];\n   |                    ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphgyzpzeg.rs:21:9\n   |\n21 |   \
    \      a[n] = sum - sum - sum + 1;\n   |         ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0369]: cannot mod `&&{integer}`\
    \ by `{integer}`\n  --> /tmp/tmphgyzpzeg.rs:23:44\n   |\n23 |     a.iter().enumerate().filter(|(_,\
    \ v)| v % 3 == 0).count()\n   |                                          - ^ -\
    \ {integer}\n   |                                          |\n   |           \
    \                               &&{integer}\n   |\nhelp: `%` can be used on `{integer}`,\
    \ you can dereference `v`\n   |\n23 |     a.iter().enumerate().filter(|(_, v)|\
    \ *v % 3 == 0).count()\n   |                                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphgyzpzeg.rs:23:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n23 |     a.iter"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for &(i, _, _) in &a {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    let mut res = 0;\n    for i in 0..n {\n        for\
    \ j in 0..n {\n            for k in 0..n {\n                if i >= j && j >=\
    \ k && (a[i] == a[j] && a[j] == a[k]) {\n                    let x = a[i] - a[j]\
    \ - a[k];\n                    res += (x % 3 == 0);\n                }\n     \
    \       }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpek1noxld.rs:22:28\n\
    \   |\n22 |                     res += (x % 3 == 0);\n   |                   \
    \         ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n22 -                     res += (x % 3 ==\
    \ 0);\n22 +                     res += x % 3 == 0;\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpek1noxld.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n\
    \   |                         ^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |      \
    \                    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpek1noxld.rs:13:10\n   |\n13 |     for &(i, _, _) in &a {\n   |\
    \          ^^^^^^^^^    -- this expression has type `Option<&{integer}>`\n   |\
    \          |\n   |          expected integer, found tuple\n   |\n   = note: expected\
    \ type `{integer}`\n             found tuple `(_, _, _)`\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpek1noxld.rs:20:41\n\
    \   |\n20 |                 if i >= j && j >= k && (a[i] == a[j] && a[j] == a[k])\
    \ {\n   |                                         ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpek1noxld.rs:20:49\n   |\n20 |  \
    \               if i >= j && j >= k && (a[i] == a[j] && a[j] == a[k]) {\n   |\
    \                                                 ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: requ"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Write your code here.\n    let mut a = [0; n];\n    \n    for i in\
    \ 1..n{\n        let mut j = i;\n        \n        while  j > 0 {\n          \
    \  let mut k = j - 1;\n            \n            while (k > 0) \n            {\n\
    \                let t = (i * a[k]) + (j * a[k-1]) + 1;\n                \n  \
    \              if  t % 3 == 0{\n                    a[k] = t;\n              \
    \      break;\n                }\n                k--;\n            }\n      \
    \      j--;\n        }\n    }\n    \n    a.len()\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpfr7qsy5u.rs:29:20\n\
    \   |\n29 |                 k--;\n   |                    ^ expected expression\n\
    \nerror: expected expression, found `;`\n  --> /tmp/tmpfr7qsy5u.rs:31:16\n   |\n\
    31 |             j--;\n   |                ^ expected expression\n\nerror[E0435]:\
    \ attempt to use a non-constant value in a constant\n  --> /tmp/tmpfr7qsy5u.rs:13:21\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |                    -\
    \ this would need to be a `const`\n12 |     // Write your code here.\n13 |   \
    \  let mut a = [0; n];\n   |                     ^\n\nwarning: unnecessary parentheses\
    \ around `while` condition\n  --> /tmp/tmpfr7qsy5u.rs:21:19\n   |\n21 |      \
    \       while (k > 0) \n   |                   ^     ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n21 -             while\
    \ (k > 0) \n21 +             while k > 0 \n   | \n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfr7qsy5u.rs:35:5\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n35 |     a.len()\n   |     ^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n35 |     a.len().try_into().unwrap()\n   |        \
    \    ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010659
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n <= 0 { return 0; }\n    let mut result: isize = 0;\n    for i in\
    \ 1..n {\n        for j in 1..n {\n            let k = (i + j + n - 1) % n;\n\
    \            if a[j] + a[k] + a[i] == 3 {\n                result += 1;\n    \
    \        }\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmp7pfhzq8o.rs:17:16\n\
    \   |\n17 |             if a[j] + a[k] + a[i] == 3 {\n   |                ^ help:\
    \ a local variable with a similar name exists: `i`\n\nerror[E0425]: cannot find\
    \ value `a` in this scope\n  --> /tmp/tmp7pfhzq8o.rs:17:23\n   |\n17 |       \
    \      if a[j] + a[k] + a[i] == 3 {\n   |                       ^ help: a local\
    \ variable with a similar name exists: `i`\n\nerror[E0425]: cannot find value\
    \ `a` in this scope\n  --> /tmp/tmp7pfhzq8o.rs:17:30\n   |\n17 |             if\
    \ a[j] + a[k] + a[i] == 3 {\n   |                              ^ help: a local\
    \ variable with a similar name exists: `i`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a : [isize; 3] = [0; 3];\n    for i in 1..n {\n        for j\
    \ in (i..n).rev() {\n            a[0] += i * i - i + 1;\n            a[j] += j\
    \ * (i - i) + (i + 1);\n            a[k] += k * (i - i) + (i + 1);\n        }\n\
    \    }\n    a[0] / 3\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `k` in this scope\n   --> /tmp/tmpcduntd4z.rs:17:15\n\
    \    |\n17  |             a[k] += k * (i - i) + (i + 1);\n    |              \
    \ ^ help: a tuple variant with a similar name exists: `Ok`\n\nerror[E0425]: cannot\
    \ find value `k` in this scope\n   --> /tmp/tmpcduntd4z.rs:17:21\n    |\n17  |\
    \             a[k] += k * (i - i) + (i + 1);\n    |                     ^ help:\
    \ a tuple variant with a similar name exists: `Ok`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpcduntd4z.rs:16:13\n   |\n16 |  \
    \           a[j] += j * (i - i) + (i + 1);\n   |             ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![1; n + 1];\n    \n    for i in 0..n {\n        a[i]\
    \ = i * i - i + 1;\n    }\n    \n    for i in 0..n {\n        for j in i+1..n\
    \ {\n            for k in j+1..n {\n                if a[i] < a[j] + a[k] {\n\
    \                    a[i] = a[j] + a[k];\n                }\n            }\n \
    \       }\n    }\n    \n    a.iter().filter(|&x| x > 3).count()\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4pez1h4j.rs:12:25\n   |\n\
    12 |     let mut a = vec![1; n + 1];\n   |                         ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     let mut a = vec![1;\
    \ (n + 1).try_into().unwrap()];\n   |                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4pez1h4j.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4pez1h4j.rs:21:20\n   |\n21 |  \
    \               if a[i] < a[j] + a[k] {\n   |                    ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4pez1h4j.rs:21:27\n   |\n21 |  \
    \               if a[i] < a[j] + a[k] {\n   |                           ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4pez1h4j.rs:21:34\n\
    \   |\n21 |                 if a[i] < a[j] + a[k] {\n   |                    \
    \              ^^^^ slice indices are of type `usize` or ra"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    match n {\n        0 => return 0,\n        _ => \n            for i in\
    \ 1..n {\n                for j in i + 1..n {\n                    for k in j\
    \ + 1..n {\n                        let triple = &[i; j k];\n                \
    \        if triple.iter().all(|&x| x > 3 && x > i)\n                        &&\
    \ (triple.iter().all(|&x| x > 3 && x > j) && triple.iter().all(|&x| x > 3 && x\
    \ > k))\n                        {\n                            return triple.iter().filter(|&x|\
    \ x > 3).count();\n                        }\n                    }\n        \
    \        }\n            }\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `?`, `]`, `{`, or an operator, found\
    \ `k`\n  --> /tmp/tmp5y3gudjs.rs:18:45\n   |\n18 |                         let\
    \ triple = &[i; j k];\n   |                                             ^ expected\
    \ one of 7 possible tokens\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5y3gudjs.rs:15:13\n\
    \   |\n11 |   fn get_max_triples(n: isize) -> isize {\n   |                  \
    \                 ----- expected `isize` because of return type\n...\n15 | / \
    \            for i in 1..n {\n16 | |                 for j in i + 1..n {\n17 |\
    \ |                     for k in j + 1..n {\n18 | |                         let\
    \ triple = &[i; j k];\n...  |\n25 | |                 }\n26 | |             }\n\
    \   | |_____________^ expected `isize`, found `()`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0; \n    for i in 1..n {\n        for j in 1..i {\n\
    \            for k in 1..j {\n                if i * i + j * j == k * k {\n  \
    \                  triples+=1;\n                }\n            }\n        }\n\
    \    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpz1jywqg4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 0 {\n        panic!(\"Invalid number\");\n    }\n\n    let mut\
    \ res = 0;\n    for i in 1..n {\n        for j in i..n {\n            for k in\
    \ i..n {\n                if a(i, j, k) % 3 == 0 {\n                    res +=\
    \ 1;\n                }\n            }\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `a` in this scope\n  --> /tmp/tmphu61dg33.rs:20:20\n\
    \   |\n20 |                 if a(i, j, k) % 3 == 0 {\n   |                   \
    \ ^ help: a local variable with a similar name exists: `i`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triplesCounter = 1;\n\n    for i in 1..n+1 {\n        for j in\
    \ i+1..n+1 {\n            if i + j + i != n {\n                continue;\n   \
    \         }\n            let k = j + 1;\n            let sum = i + j + i;\n  \
    \          while sum > 3 * k + 3 && triplesCounter != n {\n                triplesCounter\
    \ += 1;\n                sum += 2;\n            }\n            if sum % 3 == 0\
    \ {\n                triplesCounter += 1;\n            }\n        }\n    }\n \
    \   triplesCounter\n}\n\nfn main() {\n    let candidate = get_max_triples;\n \
    \   assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmp4pn_nk39.rs:23:17\n\
    \   |\n20 |             let sum = i + j + i;\n   |                 ---\n   | \
    \                |\n   |                 first assignment to `sum`\n   |     \
    \            help: consider making this binding mutable: `mut sum`\n...\n23 |\
    \                 sum += 2;\n   |                 ^^^^^^^^ cannot assign twice\
    \ to immutable variable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    n.checked_mul(3)\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgi855fx5.rs:12:5\n   |\n\
    11 | fn get_max_triples(n: isize) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n12 |     n.checked_mul(3)\n\
    \   |     ^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: -1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    loop {\n        if triples == n {\n       \
    \     break;\n        }\n        let mut triples = 0;\n        for i in 1..n-1\
    \ { \n            let j = i as isize;\n            if j > 0 {\n              \
    \  for k in 0..(j-1) {\n                    let k = k as isize;\n            \
    \        if k > 0 && triples + k + k + j < n {\n                        triples\
    \ += k + k + j;\n                    }\n                }\n            }\n   \
    \     }\n        triples += 1;\n    }\n    triples\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010665
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    for i in 0..(n-1){\n        for j in (i+1)..n{\n        \
    \    for k in (j+1)..n{\n                if a[i] < a[j] && a[i] < a[k] && a[j]\
    \ < a[k]\n                    && a[i] + a[j] + a[k] % 3 == 0\n               \
    \ {\n                    return i + 1;\n                }\n            }\n   \
    \     }\n    }\n    0\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpswdw4r6v.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpswdw4r6v.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpswdw4r6v.rs:19:20\n   |\n19 |  \
    \               if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n   |           \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpswdw4r6v.rs:19:27\n\
    \   |\n19 |                 if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\n   |\
    \                           ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpswdw4r6v.rs:19:35\n   |\n19 |                 if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k]\n   |                                 \
    \  "
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 { 0 }\n    else if n == 1 { 1 }\n    else {\n        let mut\
    \ res: Vec<isize> = vec![];\n        let mut sum = 0;\n        let mut a = vec![0;\
    \ n];\n        a[0] = 1;\n        a[1] = 2;\n        a[2] = 3;\n        a[3] =\
    \ 4;\n        a[4] = 3;\n        for &j in &a[0..n-1] {\n            sum += *j;\n\
    \            for &i in &a[j..n] {\n                res.push((i, j, *j + sum as\
    \ isize));\n            }\n        }\n        res.sort();\n        res[0].1\n\
    \    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptzmql692.rs:17:29\n   |\n\
    17 |         let mut a = vec![0; n];\n   |                             ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |         let mut a =\
    \ vec![0; n.try_into().unwrap()];\n   |                              ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmptzmql692.rs:23:20\n   |\n23 |         for &j in &a[0..n-1] {\n\
    \   |                    ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by\
    \ `std::ops::Range<isize>`\n  --> /tmp/tmptzmql692.rs:25:24\n   |\n25 |      \
    \       for &i in &a[j..n] {\n   |                        ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `std::ops::Range<isize>`\n   = help: the following other\
    \ types implement trait `SliceIndex<T>`:\n             <std::ops::Range<usize>\
    \ as SliceIndex<[T]>>\n             <std::ops::Range<usize> as SliceIndex<str>>\n\
    \   = note: required because of the requirements on the impl of `Index<std::ops::Range<isize>>`\
    \ for `Vec<{integer}>`\n\nerror[E0610]: `isize` is a primitive type and therefore\
    \ doesn't have fields\n  --> /tmp/tmptzmql692.rs:30:16\n   |\n30 |         res[0].1\n\
    \   |                ^\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0610.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let mut a_vec = [0; n];\n    for i in 1..n-1 {\n\
    \        for j in (i..n)&[i..n] {\n            for k in (i..n)&[i..n] {\n    \
    \            if *i + *j + *k % 3 == 0 {\n                    a_vec[i] = *i;\n\
    \                    a_vec[j] = *j;\n                    a_vec[k] = *k;\n    \
    \                res += 1;\n                }\n            }\n        }\n    }\n\
    \    return res;\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp1jderuid.rs:13:25\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ res = 0;\n13 |     let mut a_vec = [0; n];\n   |                         ^\n\
    \nerror[E0369]: no implementation for `std::ops::Range<isize> & [std::ops::Range<isize>;\
    \ 1]`\n  --> /tmp/tmp1jderuid.rs:15:24\n   |\n15 |         for j in (i..n)&[i..n]\
    \ {\n   |                  ------^------ [std::ops::Range<isize>; 1]\n   |   \
    \               |\n   |                  std::ops::Range<isize>\n\nerror[E0369]:\
    \ no implementation for `std::ops::Range<isize> & [std::ops::Range<isize>; 1]`\n\
    \  --> /tmp/tmp1jderuid.rs:16:28\n   |\n16 |             for k in (i..n)&[i..n]\
    \ {\n   |                      ------^------ [std::ops::Range<isize>; 1]\n   |\
    \                      |\n   |                      std::ops::Range<isize>\n\n\
    error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp1jderuid.rs:17:20\n\
    \   |\n17 |                 if *i + *j + *k % 3 == 0 {\n   |                 \
    \   ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp1jderuid.rs:18:32\n\
    \   |\n18 |                     a_vec[i] = *i;\n   |                         \
    \       ^^\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0369, E0435, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    fn is_triple(a: &[isize], i: isize, j: isize, k: isize) -> bool {\n \
    \       return a[i] > a[j] && a[j] > a[k] && a[i] < a[j] && a[a[j] + k] == a[i];\n\
    \    }\n    \n    if n < 3 {\n        return n;\n    }\n    let mut a: [isize;\
    \ 3] = vec![0; 3];\n    let mut triples = 0;\n    for i in 1..n {\n        for\
    \ j in (i + 1)..n {\n            for k in (i + 2)..n {\n                if is_triple(&a,\
    \ i, j, k) {\n                    triples++;\n                }\n            }\n\
    \        }\n    }\n    return triples;\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpzdslsv9g.rs:25:28\n\
    \   |\n25 |                     triples++;\n   |                            ^^\
    \ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n25 |   \
    \                  { let tmp = triples; triples += 1; tmp };\n   |           \
    \          +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n25 -                    \
    \ triples++;\n25 +                     triples += 1;\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzdslsv9g.rs:19:29\n   |\n19 |     let mut a: [isize; 3]\
    \ = vec![0; 3];\n   |                ----------   ^^^^^^^^^^ expected array `[isize;\
    \ 3]`, found struct `Vec`\n   |                |\n   |                expected\
    \ due to this\n   |\n   = note: expected array `[isize; 3]`\n             found\
    \ struct `Vec<{integer}>`\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdslsv9g.rs:13:16\n\
    \   |\n13 |         return a[i] > a[j] && a[j] > a[k] && a[i] < a[j] && a[a[j]\
    \ + k] == a[i];\n   |                ^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpzdslsv9g.rs:13:23\n   |\n13 |         return a[i] > a[j] && a[j]\
    \ > a[k] && a[i] < a[j] && a[a[j] + k] == a[i];\n   |                       ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzdslsv9g.rs:13:31\n\
    \   |\n13 |         return a[i] > a[j] "
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n % 3 == 0 {\n        // If n is divisible by 3, n will be even, so\
    \ it won't be triple. \n        return 1\n    }\n    if n == 0 {\n        // If\
    \ n is 0, there will be no triple. \n        return 1\n    }\n    let mut a: Vec<isize>\
    \ = Vec::new();\n    for a in 0..n {\n        // For each i\n        for i in\
    \ 0..n {\n            // For each j\n            for j in 0..n {\n           \
    \     // For each k\n                for k in 0..n {\n                    // If\
    \ i < j < k, then a[i] = i * i - i + 1, \n                    // and a[j] + a[k]\
    \ = i * i. \n                    // a[i], a[j], a[k] are all integers.\n     \
    \               // If a[i] + a[j] + a[k] % 3 == 0, then the triple exists and\
    \ we increment the counter.\n                    // Otherwise, we increment the\
    \ counter only for the first time this triplet exists.\n                    if\
    \ a[i] < a[j] || a[j] > a[k] {\n                        continue\n           \
    \         }\n                    if a[i] + a[j] + a[k] % 3 == 0 {\n          \
    \              return a.len() - 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return 0\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpxdxewbzx.rs:33:24\n\
    \   |\n33 |                     if a[i] < a[j] || a[j] > a[k] {\n   |        \
    \                ^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpxdxewbzx.rs:33:31\n   |\n33 |                     if a[i] < a[j]\
    \ || a[j] > a[k] {\n   |                               ^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpxdxewbzx.rs:33:39\n   |\n\
    33 |                     if a[i] < a[j] || a[j] > a[k] {\n   |               \
    \                        ^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpxdxewbzx.rs:33:46\n   |\n33 |                     if\
    \ a[i] < a[j] || a[j] > a[k] {\n   |                                         \
    \     ^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpxdxewbzx.rs:36:24\n\
    \   |\n36 |                     if a[i] + a[j] + a[k] % 3 == 0 {\n   |       \
    \                 ^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpxdxewbzx.rs:36:31\n   |\n36 |                     if a[i] + a[j]\
    \ + a[k] % 3 == 0 {\n   |                               ^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpxdxewbzx.rs:36:38\n\
    \   |\n36 |                     if a[i] + a[j] + a[k] % 3 == 0 {\n   |       \
    \                               ^^^^\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpxdxewbzx.rs:37:34\n   |\n\
    37 |                         return a.len() - 1\n   |                        \
    \          ^^^ method not found in `isize`\n\nerror: aborting due to 8 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [1isize; n];\n\n    for &i in &mut a {\n        *i = *i;\n\
    \    }\n\n    let mut max_triples = 0.;\n    for &i in &mut a {\n        for &j\
    \ in &mut a {\n            for &k in &mut a {\n                if *i + 3**j +\
    \ 7**k == 0 {\n                    *i + *j + *k += 1;\n                }\n   \
    \         }\n        }\n    }\n\n    for &i in &mut a {\n        if *i != 0 {\n\
    \            assert!(*i == 6*max_triples && i == 0);\n            max_triples\
    \ += *i;\n        }\n    }\n\n    match max_triples {\n        true => 0,\n  \
    \      false => max_triples,\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp_s_tfli4.rs:12:26\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [1isize; n];\n   |                          ^\n\nerror[E0067]: invalid left-hand\
    \ side of assignment\n  --> /tmp/tmp_s_tfli4.rs:23:34\n   |\n23 |            \
    \         *i + *j + *k += 1;\n   |                     ------------ ^^\n   | \
    \                    |\n   |                     cannot assign to this expression\n\
    \nerror[E0277]: cannot multiply `{integer}` by `{float}`\n  --> /tmp/tmp_s_tfli4.rs:31:28\n\
    \   |\n31 |             assert!(*i == 6*max_triples && i == 0);\n   |        \
    \                    ^ no implementation for `{integer} * {float}`\n   |\n   =\
    \ help: the trait `Mul<{float}>` is not implemented for `{integer}`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_s_tfli4.rs:37:9\n   |\n36 |     match max_triples {\n\
    \   |           ----------- this expression has type `{float}`\n37 |         true\
    \ => 0,\n   |         ^^^^ expected floating-point number, found `bool`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_s_tfli4.rs:38:9\n   |\n36 |     match max_triples\
    \ {\n   |           ----------- this expression has type `{float}`\n37 |     \
    \    true => 0,\n38 |         false => max_triples,\n   |         ^^^^^ expected\
    \ floating-point number, found `bool`\n\nerror[E0308]: `match` arms have incompatible\
    \ types\n  --> /tmp/tmp_s_tfli4.rs:38:18\n   |\n36 | /     match max_triples {\n\
    37 | |         true => 0,\n   | |                 - this is found to be of type\
    \ `isize`\n38 | |         false => max_triples,\n   | |                  ^^^^^^^^^^^\
    \ expected `isize`, found floating-"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    let mut max_triples = 1;\n\n    for i in 1..n\
    \ {\n        for j in 1..i {\n            for k in i..j {\n                if\
    \ i + j + k == i && i + j + k == j && i + j + k == k {\n                    a[i]\
    \ = a[i] + a[i - 1] + a[i - j - 1];\n                    max_triples = max(*max_triples,\
    \ *a[i]);\n                }\n            }\n        }\n    }\n\n    max_triples\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmptds4slj4.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0425]: cannot find function\
    \ `max` in this scope\n  --> /tmp/tmptds4slj4.rs:20:35\n   |\n20 |           \
    \          max_triples = max(*max_triples, *a[i]);\n   |                     \
    \              ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0614]: type `{integer}`\
    \ cannot be dereferenced\n  --> /tmp/tmptds4slj4.rs:20:39\n   |\n20 |        \
    \             max_triples = max(*max_triples, *a[i]);\n   |                  \
    \                     ^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0435, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![2..n+1];\n    a.sort();\n    let mut count = 0;\n  \
    \  for &i in &a {\n        for &j in &a where i < j {\n            if j == i {\n\
    \                continue;\n            }\n            for &k in &a where i <\
    \ j && j < k {\n                if j+k > i && i*i + j*j + k*k > 3*i*j {\n    \
    \                count += 1;\n                }\n            }\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found keyword `where`\n  --> /tmp/tmp38y3pitk.rs:16:22\n\
    \   |\n16 |         for &j in &a where i < j {\n   |                      ^^^^^\
    \ expected `{`\n\nerror[E0277]: the trait bound `std::ops::Range<isize>: Ord`\
    \ is not satisfied\n   --> /tmp/tmp38y3pitk.rs:13:7\n    |\n13  |     a.sort();\n\
    \    |       ^^^^ the trait `Ord` is not implemented for `std::ops::Range<isize>`\n\
    \    |\nnote: required by a bound in `slice::<impl [T]>::sort`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    fn max_triple(a: &[isize]) -> isize {\n        let mut max_triple = 0\
    \ as isize;\n        for i in 0..a.len() {\n            for j in i+1..a.len()\
    \ {\n                for k in j+1..a.len() {\n                    if a[i] - a[j]\
    \ + a[k] % 3 == 0 {\n                        if a[i] > max_triple {\n        \
    \                    max_triple = a[i];\n                        }\n         \
    \           }\n                }\n            }\n        }\n        return max_triple;\n\
    \    }\n\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i *\
    \ i - i + 1;\n    }\n    return max_triple(a);\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps1so46o5.rs:28:25\n   |\n\
    28 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n28 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmps1so46o5.rs:30:9\n\
    \   |\n30 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmps1so46o5.rs:32:23\n   |\n32 |     return max_triple(a);\n   |      \
    \                 ^\n   |                       |\n   |                      \
    \ expected `&[isize]`, found struct `Vec`\n   |                       help: consider\
    \ borrowing here: `&a`\n   |\n   = note: expected reference `&[isize]`\n     \
    \            found struct `Vec<{integer}>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for &i in a { i += i as isize };\n    let\
    \ mut triples = 0;\n    let mut i = 1;\n    while i <= n {\n        for &j in\
    \ &a { j += j as isize };\n        if i == *i { break; }\n        for &k in &a\
    \ { k += k as isize };\n        i += 1;\n        if i * i * i == *i {\n      \
    \      triples++;\n        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp7748zn78.rs:22:20\n\
    \   |\n22 |             triples++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |             { let tmp =\
    \ triples; triples += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    22 -             triples++;\n22 +             triples += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7748zn78.rs:12:25\n   |\n12 |     let mut a\
    \ = vec![0; n];\n   |                         ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7748zn78.rs:13:9\n   |\n13 |     for &i in a { i += i as\
    \ isize };\n   |         ^^    - this expression has type `Option<{integer}>`\n\
    \   |         |\n   |         expected integer, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `{integer}`\n           found reference `&_`\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp7748zn78.rs:18:17\n   |\n18 |        \
    \ if i == *i { break; }\n   |                 ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp7748zn78.rs:21:25\n   |\n21 |        \
    \ if i * i * i == *i {\n   |                         ^^\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // brute force check\n    // for i in 0..(n-1){\n    //     for j in\
    \ i+1..n{\n    //         for k in j+1..n{\n    //             if 3*(i+j+k) ==\
    \ n{\n    //                 return 1;\n    //             }\n    //         }\n\
    \    //     }\n    // }\n    // iterate and sort\n    // let mut count = 0;\n\
    \    // for i in 0..(n-1){\n    //     if i < (n-1){\n    //         let j = i+1;\n\
    \    //         while j < n{\n    //             let k = (j+1)%n;\n    //    \
    \         if 3*(i+j+k) == n{\n    //                 count += 1;\n    //     \
    \            break;\n    //             }\n    //             j += 1;\n    //\
    \         }\n    //     }\n    // }\n    // return count;\n\n    // sort and find\
    \ triple\n    let mut arr = vec![0; n];\n    arr.iter().enumerate().for_each(|(_,\
    \ v)| { arr.push(v); });\n    let mut min_len = n+1;\n    for i in 0..(n-1){\n\
    \        for j in i+1..n{\n            for k in j+1..n{\n                if 3*(i+j+k)\
    \ == n{\n                    min_len = i;\n                }\n            }\n\
    \        }\n    }\n    arr.iter().for_each(|x| match x {\n        0 => {}\n  \
    \      x => {\n            if x == min_len{\n                println!(\"{}\",\
    \ x);\n            }\n        }\n    });\n    return min_len;\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcba34k9k.rs:40:27\n   |\n\
    40 |     let mut arr = vec![0; n];\n   |                           ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n40 |     let mut arr = vec![0;\
    \ n.try_into().unwrap()];\n   |                            ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcba34k9k.rs:41:57\n   |\n41 |\
    \     arr.iter().enumerate().for_each(|(_, v)| { arr.push(v); });\n   |      \
    \                                                   ^ expected integer, found\
    \ `&{integer}`\n   |\nhelp: consider dereferencing the borrow\n   |\n41 |    \
    \ arr.iter().enumerate().for_each(|(_, v)| { arr.push(*v); });\n   |         \
    \                                                +\n\nerror[E0277]: can't compare\
    \ `&isize` with `isize`\n  --> /tmp/tmpcba34k9k.rs:55:18\n   |\n55 |         \
    \    if x == min_len{\n   |                  ^^ no implementation for `&isize\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // brute force + binary search\n    let mut a: Vec<_> = vec![0; n + 1];\n\
    \    a[0] = 2 * n - 3;\n    for i in 1..n {\n        a[i] = a[i - 1] + 2;\n  \
    \  }\n    let mut low = 1isize;\n    let mut high = n + 1isize;\n    while low\
    \ <= high {\n        let mid = low + (high - low) / 2;\n        if a[mid] == a[mid\
    \ + 1] + a[mid + 2] {\n            high = mid;\n        } else if a[mid] < a[mid\
    \ + 1] + a[mid + 2] {\n            low = mid + 1;\n        } else {\n        \
    \    low = mid + 1;\n        }\n    }\n    low\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp57_06cub.rs:13:33\n   |\n\
    13 |     let mut a: Vec<_> = vec![0; n + 1];\n   |                           \
    \      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n13 |     let\
    \ mut a: Vec<_> = vec![0; (n + 1).try_into().unwrap()];\n   |                \
    \                 +     +++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp57_06cub.rs:16:9\n   |\n16 |   \
    \      a[i] = a[i - 1] + 2;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp57_06cub.rs:16:16\n   |\n16 |         a[i]\
    \ = a[i - 1] + 2;\n   |                ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp57_06cub.rs:22:12\n   |\n22 |         if a[mid]\
    \ == a[mid + 1] + a[mid + 2] {\n   |            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp57_06cub.rs:22:22\n   |\n22 |         if a[mid]\
    \ == a[mid + 1] + a[mid + 2] {\n   |                      ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   ="
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for _i in 0..n {\n        a.push(isize::mul(isize::sub(7,\
    \ i), isize::sub(7, i)));\n    }\n    let mut max_triples = 0isize;\n    for (ai,\
    \ aj, ak) in a.iter().cloned() {\n        if (ai + aj + ak) == 0 {\n         \
    \   continue;\n        }\n        if (ai + aj + ak) % 3 == 0 {\n            max_triples\
    \ += 1;\n        }\n    }\n    return max_triples;\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpjn7wovs1.rs:14:41\n\
    \   |\n14 |         a.push(isize::mul(isize::sub(7, i), isize::sub(7, i)));\n\
    \   |                                         ^ help: a local variable with a\
    \ similar name exists: `_i`\n\nerror[E0425]: cannot find value `i` in this scope\n\
    \  --> /tmp/tmpjn7wovs1.rs:14:59\n   |\n14 |         a.push(isize::mul(isize::sub(7,\
    \ i), isize::sub(7, i)));\n   |                                              \
    \             ^ help: a local variable with a similar name exists: `_i`\n\nerror[E0599]:\
    \ no function or associated item named `mul` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpjn7wovs1.rs:14:23\n   |\n14 |         a.push(isize::mul(isize::sub(7,\
    \ i), isize::sub(7, i)));\n   |                       ^^^ function or associated\
    \ item not found in `isize`\n   |\n   = help: items from traits can only be used\
    \ if the trait is in scope\nhelp: the following trait is implemented but not in\
    \ scope; perhaps add a `use` for it:\n   |\n1  | use std::ops::Mul;\n   |\n\n\
    error[E0599]: no function or associated item named `sub` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpjn7wovs1.rs:14:34\n   |\n14 |         a.push(isize::mul(isize::sub(7,\
    \ i), isize::sub(7, i)));\n   |                                  ^^^ function\
    \ or associated item not found in `isize`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::ops::Sub;\n\
    \   |\n\nerror[E0599]: no function or associated item named `sub` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpjn7wovs1.rs:14:52\n   |\n14 |  \
    \       a.push(isize::mul(isize::sub(7, i), isize::sub(7, i)));\n   |        \
    \                                            ^^^ function or associated item not\
    \ found in `isize`\n   |\n   = help: items from traits can only be used if the\
    \ trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n   |\n1  | use std::ops::Sub;\n   |\n\nerror[E0308]:\
    \ m"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    \n    for _i in 0..n {\n        let mut\
    \ sum = 0;\n        for _j in 0..n {\n            if _i != _j {\n            \
    \    sum += a[_j] * a[_i] + 1;\n            }\n        }\n        if sum % 3 ==\
    \ 0 {\n            return 1;\n        }\n        a[_i] = sum;\n    }\n    0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwwwi5vkj.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwwwi5vkj.rs:18:24\n\
    \   |\n18 |                 sum += a[_j] * a[_i] + 1;\n   |                  \
    \      ^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwwwi5vkj.rs:18:32\n\
    \   |\n18 |                 sum += a[_j] * a[_i] + 1;\n   |                  \
    \              ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwwwi5vkj.rs:24:9\n\
    \   |\n24 |         a[_i] = sum;\n   |         ^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // O(n * n)\n    let mut a_vec: Vec<isize> = Vec::with_capacity(n);\n\
    \    for i in 1..=n {\n        let current_a = i * i - i + 1;\n        a_vec.push(current_a);\n\
    \    }\n\n    // O(n)\n    a_vec\n        .iter()\n        .filter(|x| x > 0 &&\
    \ x < n)\n        .filter(|x| x % 3 == 0)\n        .count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvnrr4vre.rs:13:52\n   |\n\
    13 |     let mut a_vec: Vec<isize> = Vec::with_capacity(n);\n   |            \
    \                                        ^ expected `usize`, found `isize`\n \
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     let mut a_vec: Vec<isize> = Vec::with_capacity(n.try_into().unwrap());\n\
    \   |                                                     ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvnrr4vre.rs:22:25\n   |\n22 |\
    \         .filter(|x| x > 0 && x < n)\n   |                         ^ expected\
    \ `&&isize`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvnrr4vre.rs:22:34\n\
    \   |\n22 |         .filter(|x| x > 0 && x < n)\n   |                        \
    \          ^ expected `&&isize`, found `isize`\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpvnrr4vre.rs:23:23\n   |\n23 |         .filter(|x|\
    \ x % 3 == 0)\n   |                     - ^ - {integer}\n   |                \
    \     |\n   |                     &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n23 |         .filter(|x| *x % 3 == 0)\n   | \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvnrr4vre.rs:20:5\n\
    \   |\n11 |   fn get_max_triples(n: isize) -> isize {\n   |                  \
    \                 ----- expected `isize` because of return type\n...\n20 | / \
    \    a_vec\n21 | |         .iter()\n22 | |         .filter(|x| x > 0 && x < n)\n\
    23 | |         .filter(|x| x % 3 == 0)\n24 | |         .count()\n   | |________________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n24 |         .count().try_into().unwrap()\n\
    \   |                 ++++++++++++++++++++\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Your code here\n    let mut a = [0; n];\n    for i in 1..n-1 {\n \
    \       a[i] = i * i - i + 1;\n    }\n    let mut j = 0;\n    let mut k = 0;\n\
    \    while j < n {\n        if a[k] == a[j] + a[k] {\n            k += 1;\n  \
    \      } else if a[k] < a[j] {\n            j += 1;\n        } else {\n      \
    \      k += 1;\n        }\n    }\n    match k {\n        0 => 0,\n        _ =>\
    \ 1,\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpr255hqme.rs:13:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     // Your\
    \ code here\n13 |     let mut a = [0; n];\n   |                     ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Sort a first\n    let mut a = vec![0; n];\n    for k in 0..n {\n \
    \       a[k] = k;\n    }\n    for i in 0..n {\n        for j in i+1..n {\n   \
    \         for k in j+1..n {\n                if a[k] > a[j] + a[i] {\n       \
    \             a[k] = a[j] + a[i];\n                }\n            }\n        }\n\
    \    }\n\n    // The first element in the sorted array is a multiple of 3\n  \
    \  let mut count = 1;\n    for v in 0..n {\n        if a[v] % 3 == 0 {\n     \
    \       count = v + 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn2r3f71p.rs:13:25\n   |\n\
    13 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn2r3f71p.rs:15:9\n\
    \   |\n15 |         a[k] = k;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpn2r3f71p.rs:20:20\n   |\n20 |  \
    \               if a[k] > a[j] + a[i] {\n   |                    ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpn2r3f71p.rs:20:27\n   |\n20 |  \
    \               if a[k] > a[j] + a[i] {\n   |                           ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn2r3f71p.rs:20:34\n\
    \   |\n20 |                 if a[k] > a[j] + a[i] {\n   |                    \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: "
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Your code here\n    let mut vec: Vec<isize> = vec![];\n    vec.resize(n);\n\
    \    for k in 0..n {\n        for i in 0..n {\n            for j in 0..n {\n \
    \               vec[k] = i + j + k + vec[k];\n            }\n        }\n     \
    \   if vec[k] % 3 == 0 {\n            vec.remove(k);\n        }\n    }\n    vec.len()\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp23hdwxjp.rs:14:9\n     |\n14   |     vec.resize(n);\n     | \
    \        ^^^^^^ - supplied 1 argument\n     |         |\n     |         expected\
    \ 2 arguments\n     |\nnote: associated function defined here\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp23hdwxjp.rs:18:17\n\
    \   |\n18 |                 vec[k] = i + j + k + vec[k];\n   |               \
    \  ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp23hdwxjp.rs:18:38\n\
    \   |\n18 |                 vec[k] = i + j + k + vec[k];\n   |               \
    \                       ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp23hdwxjp.rs:21:12\n   |\n21 |         if vec[k] % 3 == 0 {\n  \
    \ |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp23hdwxjp.rs:22:24\n   |\n22 |\
    \             vec.remove(k);\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n22 |             vec.remove(k.try_into().unwrap());\n\
    \   |                         +"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [isize; n + 1] = [0];\n    for i in 1..n {\n        for j\
    \ in (i + 1)..n {\n            let sum = a.iter().map(|&x| x * x).sum();\n   \
    \         if sum % 3 == 0 {\n                return i + j;\n            }\n  \
    \      }\n        a[i] = a[i] + (i * i - i + 1);\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpk5pt7z8h.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [isize; n + 1] = [0];\n   |                        ^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 { return 0; }\n\n    let mut a = Vec::with_capacity(n);\n \
    \   for _ in 0..n {\n        a.push((n * (n - 1)) / 2);\n    }\n\n    let mut\
    \ count = 0usize;\n    for i in 0..n {\n        for j in i + 1..n {\n        \
    \    for k in j + 1..n {\n                count += a[j] + a[k] == a[i] && (a[i]\
    \ % 3) == 0;\n            }\n        }\n    }\n\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_h4q7pcz.rs:14:36\n   |\n\
    14 |     let mut a = Vec::with_capacity(n);\n   |                            \
    \        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n14 |     let\
    \ mut a = Vec::with_capacity(n.try_into().unwrap());\n   |                   \
    \                  ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp_h4q7pcz.rs:23:26\n   |\n23 |         \
    \        count += a[j] + a[k] == a[i] && (a[i] % 3) == 0;\n   |              \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_h4q7pcz.rs:23:33\n\
    \   |\n23 |                 count += a[j] + a[k] == a[i] && (a[i] % 3) == 0;\n\
    \   |                                 ^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp_h4q7pcz.rs:23:41\n   |\n23 |                 count += a[j] + a[k]\
    \ == a[i] && (a[i] % 3) == 0;\n   |                                         ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_h4q7pcz.rs:23:50\n\
    \   |\n23 |         "
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut max_triple_value: isize = 0;\n    let\
    \ mut a = [1; n];\n    for i in a.iter_mut() {\n        *i = i * i - i + 1;\n\
    \        if *i % 3 == 0 && max_triple_value < *i {\n            max_triple_value\
    \ = *i;\n        }\n    }\n    for i in a.iter_mut() {\n        if *i % 3 == 0\
    \ && max_triple_value < *i {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp98e8f3w9.rs:14:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n...\n14 |    \
    \ let mut a = [1; n];\n   |                     ^\n\nerror[E0369]: cannot multiply\
    \ `&mut {integer}` by `&mut {integer}`\n  --> /tmp/tmp98e8f3w9.rs:16:16\n   |\n\
    16 |         *i = i * i - i + 1;\n   |              - ^ - &mut {integer}\n   |\
    \              |\n   |              &mut {integer}\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0369, E0435.\nFor\
    \ more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert_eq!(n < 10000, false);\n    let mut a: [usize; n + 1] =\
    \ Default::default();\n    for _ in 0..n {\n        a[0] += 1;\n        a[1] +=\
    \ 1;\n        a[2] += 1;\n    }\n    \n    for i in 2..n+1 {\n        for j in\
    \ 2..i+1 {\n            let k = i - j + 1;\n            if a[j] + a[k] > 2 * a[i]\
    \ {\n                a[j] = a[k];\n            }\n        }\n    }\n    a[n]\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpcumt3fc9.rs:13:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     debug_assert_eq!(n\
    \ < 10000, false);\n13 |     let mut a: [usize; n + 1] = Default::default();\n\
    \   |                        ^\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 1..=n {\n        for j in (i + 1)..n {\n\
    \            for k in (i + 2)..n {\n                let v = i * i - i + 1;\n \
    \               let v_j = j * j - j + 1;\n                let v_k = k * k - k\
    \ + 1;\n                let v_j_k = v_j * v_k - v_j * v_k;\n                let\
    \ mut triple = v_j + v_k + v_j_k;\n                if triple % 3 == 0 {\n    \
    \                sum += triple.checked_mul(3).unwrap();\n                }\n \
    \           }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpivorw0eb.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut res = 0;\n\n    for i in 0..n {\n\
    \        let mut tmp = 0;\n        for j in 0..n {\n            for k in 0..n\
    \ {\n                if i != j && i != k && j != k {\n                    tmp\
    \ += a[j] - a[k.wrapping_sub(j)];\n                }\n            }\n        }\n\
    \        if tmp % 3 == 0 {\n            res+=1;\n        }\n        a[i] = i *\
    \ i - i + 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcl217pom.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcl217pom.rs:20:28\n\
    \   |\n20 |                     tmp += a[j] - a[k.wrapping_sub(j)];\n   |    \
    \                        ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcl217pom.rs:20:35\n\
    \   |\n20 |                     tmp += a[j] - a[k.wrapping_sub(j)];\n   |    \
    \                               ^^^^^^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpcl217pom.rs:27:9\n   |\n27 |   \
    \      a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|i| {\n        (1..n).any(|j| {\n            (1..n).any(|k|\
    \ {\n                (i*i - i + 1) + (j*j + k) == (i*i + j*k) % 3\n          \
    \  })\n        })\n    })\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphsu_8fbp.rs:12:5\n   |\n\
    11 |   fn get_max_triples(n: isize) -> isize {\n   |                         \
    \          ----- expected `isize` because of return type\n12 | /     (1..n).filter(|i|\
    \ {\n13 | |         (1..n).any(|j| {\n14 | |             (1..n).any(|k| {\n15\
    \ | |                 (i*i - i + 1) + (j*j + k) == (i*i + j*k) % 3\n16 | |   \
    \          })\n17 | |         })\n18 | |     })\n   | |______^ expected `isize`,\
    \ found struct `Filter`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Filter<std::ops::Range<isize>, [closure@/tmp/tmphsu_8fbp.rs:12:19: 18:6]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return\
    \ 1\n    }\n\n    let mut a: Vec<isize> = vec![0; n];\n    for (i in 1..n) {\n\
    \        a[i] = i * i - i + 1;\n    }\n\n    let mut num_triples = 1;\n    let\
    \ mut j = 1;\n    let mut k = n - 1;\n\n    while j < k {\n        let m = (a[j]\
    \ + a[k]) % 3;\n        if m == 0 {\n            j += 1\n        } else {\n  \
    \          k += 1;\n            num_triples += 1;\n        }\n    }\n\n    num_triples\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  -->\
    \ /tmp/tmpqsnygoi_.rs:21:12\n   |\n21 |     for (i in 1..n) {\n   |          \
    \  ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding\
    \ `for` loop head\n  --> /tmp/tmpqsnygoi_.rs:21:9\n   |\n21 |     for (i in 1..n)\
    \ {\n   |         ^         ^\n   |\nhelp: remove parentheses in `for` loop\n\
    \   |\n21 -     for (i in 1..n) {\n21 +     for i in 1..n {\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqsnygoi_.rs:20:37\n   |\n20 |     let mut a:\
    \ Vec<isize> = vec![0; n];\n   |                                     ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     let mut a: Vec<isize>\
    \ = vec![0; n.try_into().unwrap()];\n   |                                    \
    \  ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpqsnygoi_.rs:22:9\n   |\n22 |         a[i] = i * i\
    \ - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqsnygoi_.rs:30:18\n\
    \   |\n30 |         let m = (a[j] + a[k]) % 3;\n   |                  ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqsnygoi_.rs:30:25\n   |\n30 |  \
    \       let m = (a[j] + a[k]) % 3;\n   |                         ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n\n    let mut sum_of_a = 0;\n\n    for j in 0..n\
    \ {\n        sum_of_a += j * j;\n        a[j] = j * j - i + 1;\n    }\n\n    for\
    \ j in 0..n {\n        if sum_of_a + a[j] > 3 {\n            continue;\n     \
    \   }\n\n        let mut sum_of_a2 = sum_of_a;\n        let mut a2 = a[j];\n\n\
    \        for i in 0..n {\n            a2 += a[i];\n        }\n\n        if a2\
    \ < sum_of_a2 {\n            sum_of_a2 = a2;\n        }\n    }\n\n    a[n]\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpgnvyf57u.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0425]: cannot find value `i`\
    \ in this scope\n  --> /tmp/tmpgnvyf57u.rs:18:24\n   |\n18 |         a[j] = j\
    \ * j - i + 1;\n   |                        ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0435.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    match (n, |x, y| y > x, |x, y| y > x) {\n        (|x, y| x > 0, |x, y|\
    \ x > 0) => {\n            let mut ans = 0;\n            let mut counter = 1;\n\
    \            for i in 1..n {\n                for j in i + 1..n {\n          \
    \          for k in j + 1..n {\n                        if counter == 3 {\n  \
    \                          break;\n                        }\n               \
    \         if i + j < k {\n                            continue;\n            \
    \            }\n                        if i + j > k {\n                     \
    \       continue;\n                        }\n                        if k + i\
    \ < j {\n                            continue;\n                        }\n  \
    \                      if k + i > j {\n                            continue;\n\
    \                        }\n                        if i + j + k == 0 {\n    \
    \                        ans += 1;\n                        }\n              \
    \          counter += 1;\n                    }\n                }\n         \
    \   }\n            ans\n        }\n        (|x, y| x < 0, |x, y| x < 0) => {\n\
    \            let mut ans = 0;\n            let mut counter = 1;\n            for\
    \ i in 1..n {\n                for j in i + 1..n {\n                    for k\
    \ in j + 1..n {\n                        if counter == 3 {\n                 \
    \           break;\n                        }\n                        if i +\
    \ j < k {\n                            continue;\n                        }\n\
    \                        if i + j > k {\n                            continue;\n\
    \                        }\n                        if k + i < j {\n         \
    \                   continue;\n                        }\n                   \
    \     if k + i > j {\n                            continue;\n                \
    \        }\n                        if i + j + k == 0 {\n                    \
    \        ans += 1;\n                        }\n                        counter\
    \ += 1;\n                    }\n                }\n            }\n           \
    \ ans\n        }\n        _ => {\n            let mut ans = 0;\n            let\
    \ mut counter = 1;\n            for i in 1..n {\n                for j in i +\
    \ 1..n {\n                    for k in j + 1..n {\n                        if\
    \ counter == 3 {\n                            break;\n                       \
    \ }\n                        if i + j < k {\n                            continue;\n\
    \                        }\n                        if i + j > k {\n         \
    \                   continue;\n                        }\n                   \
    \     if k + i < j {\n                            continue;\n                \
    \        }\n                        if k + i > j {\n                         \
    \   continue;\n                        }\n                        if i + j + k\
    \ == 0 {\n                            ans += 1;\n                        }\n \
    \                       counter += 1;\n                    }\n               \
    \ }\n            }\n            ans\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `@`, or `|`, found `>`\n  --> /tmp/tmp15h5s6fd.rs:13:19\n\
    \   |\n13 |         (|x, y| x > 0, |x, y| x > 0) => {\n   |                  \
    \ ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert!(n > 0);\n    let mut a = [0; n];\n    let mut cnt = 0;\n\
    \n    for i in 1..n {\n        let mut j = i;\n        let mut k = i;\n\n    \
    \    while j <= n && k < n {\n            if a[j] > a[k] {\n                a[j]\
    \ += 1;\n                a[k] += 1;\n            } else if a[j] < a[k] {\n   \
    \             a[j] += 1;\n            } else {\n                a[k] += 1;\n \
    \           }\n\n            j += 1;\n            k += 1;\n        }\n\n     \
    \   if a[i] == 0 {\n            cnt += 1;\n        }\n    }\n\n    cnt\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmps4tfxmj5.rs:13:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     debug_assert!(n\
    \ > 0);\n13 |     let mut a = [0; n];\n   |                     ^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    a[0] = 1;\n    for i in 1..(n-1) {\n       \
    \ a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for j in 1..(n-1) {\n\
    \        for k in 1..(n-1) {\n            let sum = i + j + k;\n            if\
    \ sum % 3 == 0 &&\n                (a[j] < k) && (a[k] < j) &&\n             \
    \   (a[i] < k) && (a[k] < i) &&\n                (a[i] < j) && (a[j] < i) {\n\
    \                cnt += 1;\n            }\n        }\n    }\n    cnt\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpi242_fop.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0425]: cannot find value `i`\
    \ in this scope\n  --> /tmp/tmpi242_fop.rs:20:23\n   |\n20 |             let sum\
    \ = i + j + k;\n   |                       ^ help: a local variable with a similar\
    \ name exists: `a`\n\nerror[E0425]: cannot find value `i` in this scope\n  -->\
    \ /tmp/tmpi242_fop.rs:23:20\n   |\n23 |                 (a[i] < k) && (a[k] <\
    \ i) &&\n   |                    ^ help: a local variable with a similar name\
    \ exists: `a`\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpi242_fop.rs:23:39\n\
    \   |\n23 |                 (a[i] < k) && (a[k] < i) &&\n   |                \
    \                       ^ help: a local variable with a similar name exists: `a`\n\
    \nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpi242_fop.rs:24:20\n\
    \   |\n24 |                 (a[i] < j) && (a[j] < i) {\n   |                 \
    \   ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `i` in this scope\n  --> /tmp/tmpi242_fop.rs:24:39\n   |\n\
    24 |                 (a[i] < j) && (a[j] < i) {\n   |                        \
    \               ^ help: a local variable with a similar name exists: `a`\n\nerror:\
    \ aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0435.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n\n    let mut cnt = 0;\n    for &i in &a [0..n] {\n        for &j\
    \ in &a[0..n] {\n            for &k in &a[0..n] {\n                if i + j +\
    \ k >= 3 {\n                    cnt += 1;\n                }\n            }\n\
    \        }\n    }\n\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpsk0lll5w.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a: [isize; 3] = Default::default();\n\
    \    a[0] = *std::mem::uninitialized();\n    a[1] = *std::mem::uninitialized();\n\
    \    a[2] = *std::mem::uninitialized();\n    a[0] = a[1] * a[2] - a[2] + 1 + 1;\n\
    \    for i in 1..n {\n        a[i] = a[i-1] * a[i-2] - a[i-2] + 1 + 1;\n    }\n\
    \    a.iter().position(|&x| x%3 == 0).count()\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit`\
    \ instead\n  --> /tmp/tmpq8t_8l37.rs:16:23\n   |\n16 |     a[0] = *std::mem::uninitialized();\n\
    \   |                       ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]`\
    \ on by default\n\nwarning: use of deprecated function `std::mem::uninitialized`:\
    \ use `mem::MaybeUninit` instead\n  --> /tmp/tmpq8t_8l37.rs:17:23\n   |\n17 |\
    \     a[1] = *std::mem::uninitialized();\n   |                       ^^^^^^^^^^^^^\n\
    \nwarning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit`\
    \ instead\n  --> /tmp/tmpq8t_8l37.rs:18:23\n   |\n18 |     a[2] = *std::mem::uninitialized();\n\
    \   |                       ^^^^^^^^^^^^^\n\nerror[E0282]: type annotations needed\n\
    \  --> /tmp/tmpq8t_8l37.rs:16:13\n   |\n16 |     a[0] = *std::mem::uninitialized();\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter\
    \ `T` declared on the function `uninitialized`\n   |\n   = note: type must be\
    \ known at this point\n\nerror[E0277]: the type `[isize]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpq8t_8l37.rs:21:9\n   |\n21 |         a[i] = a[i-1] *\
    \ a[i-2] - a[i-2] + 1 + 1;\n   |         ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq8t_8l37.rs:21:16\n   |\n21 |         a[i] = a[i-1]\
    \ * a[i-2] - a[i-2] + 1 + 1;\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq8t_8l37.rs:21:25\n   |\n21 |         a[i] "
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n == 0 || n == 1 {\n        return 0;\n    }\n    let mut triple_count\
    \ = 0;\n    let mut a = vec![0i32; n];\n    for i in 1..n {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    for i in 0..(n-1) { \n        for j in (i + 1)..n {\n\
    \            for k in (i + 2)..n {\n                if (a[i] == a[j] && a[j] ==\
    \ a[k]) && a[i] + a[j] + a[k] == 3 {\n                    triple_count += 1;\n\
    \                }\n            }\n        }\n    }\n    triple_count\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6rvblj1g.rs:16:28\n   |\n\
    16 |     let mut a = vec![0i32; n];\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |     let mut a = vec![0i32;\
    \ n.try_into().unwrap()];\n   |                             ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmp6rvblj1g.rs:18:9\n\
    \   |\n18 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp6rvblj1g.rs:23:21\n   |\n23 |                 if (a[i]\
    \ == a[j] && a[j] == a[k]) && a[i] + a[j] + a[k] == 3 {\n   |                \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[i32]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<i32>`\n\n\
    error[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmp6rvblj1g.rs:23:29\n\
    \   |\n23 |                 if (a[i] == a[j] && a[j] == a[k]) && a[i] + a[j] +\
    \ a[k] == 3 {\n   |                             ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i32>`\n\nerror[E0277]: the type `[i32]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp6rvblj1g.rs:23:37\n   |\n23 |                 if (a[i]\
    \ == a[j] && a[j] == a[k]) && a[i] + a[j] + a[k] == 3 {\n   |                \
    \          "
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = Vec::new();\n    for i in 0..n-1 {\n        a.push(i*i-1);\n\
    \    }\n    \n    a.sort();\n    a.iter().take(3).filter(|&x| x % 3 == 0).count()\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa2dl8rn1.rs:18:5\n   |\n\
    11 | fn get_max_triples(n: isize) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n18 |     a.iter().take(3).filter(|&x|\
    \ x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |     a.iter().take(3).filter(|&x|\
    \ x % 3 == 0).count().try_into().unwrap()\n   |                              \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n-1 {\n        for j in 0..n-1 {\n\
    \            for k in 0..n-1 {\n                if a[i] == i && a[j] == j && a[k]\
    \ == k {\n                    a[i] += 1;\n                }\n            }\n \
    \       }\n    }\n    a.iter().filter(|&x| x > 2).count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp8hm4o7m4.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8hm4o7m4.rs:22:30\n   |\n22 |     a.iter().filter(|&x| x > 2).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&2`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8hm4o7m4.rs:22:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n22 |     a.iter().filter(|&x| x > 2).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n22 |     a.iter().filter(|&x| x > 2).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n+1 {\n        a.push(i\
    \ * i - i + 1);\n    }\n    if a.iter().any(|&x| x == 3) {\n        let mut cnt\
    \ = 0;\n        for &i in &a { \n            cnt += i;\n        }\n        cnt\n\
    \    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `45`,\n right: `1`', /tmp/tmpnbx2whel.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    \n    let mut a = [0; n];\n    let mut i = 1;\n    while i < n {\n  \
    \      a[i] = i * i - i + 1;\n        i += 1;\n    }\n    let mut ans = 1;\n \
    \   let mut j = 1;\n    while j < n {\n        \n        if a[j] > 0 && a[j] <\
    \ n - 1 && a[j + 1] > 0 && a[j + 1] < a[j] + 1 {\n            ans += 1;\n    \
    \    }\n        j += 1;\n    }\n    ans\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpmnk4m1hl.rs:13:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     \n13\
    \ |     let mut a = [0; n];\n   |                     ^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0435`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![n*n-n+1];\n\n    for i in 0..n-1 {\n        a[i] = i\
    \ * i - i + 1;\n    }\n    a.iter().filter(|x| x % 3 != 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbzo4pk5.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmprbzo4pk5.rs:17:27\n   |\n17 |     a.iter().filter(|x| x % 3 !=\
    \ 0).count()\n   |                         - ^ - {integer}\n   |             \
    \            |\n   |                         &&isize\n   |\nhelp: `%` can be used\
    \ on `isize`, you can dereference `x`\n   |\n17 |     a.iter().filter(|x| *x %\
    \ 3 != 0).count()\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprbzo4pk5.rs:17:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n...\n17 |     a.iter().filter(|x| x % 3 != 0).count()\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     a.iter().filter(|x| x % 3 != 0).count().try_into().unwrap()\n\
    \   |                                            ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [isize; n + 1] = Array::new(n + 1);\n    a[1] = 1;\n    for\
    \ i in 2..n + 1 {\n        a[i] = i * i - i + 1;\n    }\n    a.iter().enumerate().filter(|(i,\
    \ el)| el % 3 != 0).count()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpogqxx7in.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [isize; n + 1] = Array::new(n + 1);\n   |                        ^\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Array`\n  --> /tmp/tmpogqxx7in.rs:12:33\n\
    \   |\n12 |     let mut a: [isize; n + 1] = Array::new(n + 1);\n   |         \
    \                        ^^^^^ use of undeclared type `Array`\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpogqxx7in.rs:17:46\n   |\n\
    17 |     a.iter().enumerate().filter(|(i, el)| el % 3 != 0).count()\n   |    \
    \                                       -- ^ - {integer}\n   |               \
    \                            |\n   |                                         \
    \  &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `el`\n\
    \   |\n17 |     a.iter().enumerate().filter(|(i, el)| *el % 3 != 0).count()\n\
    \   |                                           +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpogqxx7in.rs:17:5\n   |\n11 | fn get_max_triples(n: isize)\
    \ -> isize {\n   |                                 ----- expected `isize` because\
    \ of return type\n...\n17 |     a.iter().enumerate().filter(|(i, el)| el % 3 !=\
    \ 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |     a.iter().enumerate().filter(|(i,\
    \ el)| el % 3 != 0).count().try_into().unwrap()\n   |                        \
    \                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369,\
    \ E0433, E0435.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    debug_assert!(n > 0);\n\n    let mut total = 0;\n    for i in 0..n {\n\
    \        let j = i + 1;\n        for k in 0..n {\n            let total3 = total\
    \ + k + j;\n            if total3 % 3 == 0 {\n                return total;\n\
    \            }\n            total += j;\n        }\n    }\n    total\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpk5rs_y24.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (n * n - n * n + n) as isize\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `1`', /tmp/tmprdkxya1l.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![n;];\n    for _ in 0..n {\n        a.push(0);\n    }\n\
    \    for i in 1..n {\n        for j in i+1..n {\n            for k in j+1..n {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    return i+1;\n\
    \                }\n            }\n        }\n    }\n    0;\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected end of macro invocation\n  --> /tmp/tmpw_pywf_b.rs:12:24\n\
    \   |\n12 |     let mut a = vec![n;];\n   |                        ^ missing tokens\
    \ in macro arguments\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_pywf_b.rs:11:33\n\
    \   |\n11 | fn get_max_triples(n: isize) -> isize {\n   |    --------------- \
    \             ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n25 |     0;\n\
    \   |      - help: remove this semicolon\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    for i in 0..(n-1) { \n        for j in (i+1)..(n) { \n  \
    \          for k in (i+1)..(n) { \n                if i != j && j != k && a[i]\
    \ + a[j] + a[k] == 3 {\n                    return 1;\n                }\n   \
    \         }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp10aiwjvx.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp10aiwjvx.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp10aiwjvx.rs:19:40\n   |\n19 |  \
    \               if i != j && j != k && a[i] + a[j] + a[k] == 3 {\n   |       \
    \                                 ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp10aiwjvx.rs:19:47\n   |\n19 |                 if i\
    \ != j && j != k && a[i] + a[j] + a[k] == 3 {\n   |                          \
    \                     ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp10aiwjvx.rs:19:54\n\
    \   |\n19 |                 if i != j && j != k && a[i] + a[j] +"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = n - 1;\n    let mut max_sum = 0;\n    for _ in 1..n\
    \ {\n        max_sum = if max_sum == 0 { 1 } else { max_sum + 1 };\n        for\
    \ _ in 0..n {\n            let mut cur_sum = 0;\n            for _ in 0..n {\n\
    \                cur_sum += a[i];\n            }\n            if cur_sum % 3 ==\
    \ 0 {\n                result += 1;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmp8382fkq1.rs:19:28\n\
    \   |\n19 |                 cur_sum += a[i];\n   |                           \
    \ ^ help: a local variable with a similar name exists: `n`\n\nerror[E0425]: cannot\
    \ find value `i` in this scope\n  --> /tmp/tmp8382fkq1.rs:19:30\n   |\n19 |  \
    \               cur_sum += a[i];\n   |                              ^ help: a\
    \ local variable with a similar name exists: `n`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().enumerate().filter(|(_, i)| {\n        let a = a.iter().nth(i\
    \ + 1).unwrap();\n        a + a + a == 0\n    }).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpqujl6ar9.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0369]: cannot add `{integer}`\
    \ to `&&{integer}`\n  --> /tmp/tmpqujl6ar9.rs:17:32\n   |\n17 |         let a\
    \ = a.iter().nth(i + 1).unwrap();\n   |                              - ^ - {integer}\n\
    \   |                              |\n   |                              &&{integer}\n\
    \   |\nhelp: `+` can be used on `{integer}`, you can dereference `i`\n   |\n17\
    \ |         let a = a.iter().nth(*i + 1).unwrap();\n   |                     \
    \         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqujl6ar9.rs:16:5\n\
    \   |\n11 |   fn get_max_triples(n: isize) -> isize {\n   |                  \
    \                 ----- expected `isize` because of return type\n...\n16 | / \
    \    a.iter().enumerate().filter(|(_, i)| {\n17 | |         let a = a.iter().nth(i\
    \ + 1).unwrap();\n18 | |         a + a + a == 0\n19 | |     }).count()\n   | |______________^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n19 |     }).count().try_into().unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0435.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..(n-1){\n        a[i] = i * i - i\
    \ + 1;\n    }\n    a.iter().filter(|&i| i < (n-1)).count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp25xnvdhr.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp25xnvdhr.rs:16:30\n   |\n16 |     a.iter().filter(|&i| i < (n-1)).count()\n\
    \   |                              ^^^^^\n   |                              |\n\
    \   |                              expected reference, found `isize`\n   |   \
    \                           help: consider borrowing here: `&((n-1))`\n   |\n\
    \   = note: expected reference `&_`\n                   found type `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp25xnvdhr.rs:16:5\n   |\n11 | fn\
    \ get_max_triples(n: isize) -> isize {\n   |                                 -----\
    \ expected `isize` because of return type\n...\n16 |     a.iter().filter(|&i|\
    \ i < (n-1)).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |     a.iter().filter(|&i|\
    \ i < (n-1)).count().try_into().unwrap()\n   |                               \
    \             ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010660
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![n * (n - 1) / 2]; \n    \n    for i in 1..n {\n    \
    \    for j in 1..n {\n            let k = n - i - j;\n            let c = (a[i]\
    \ + a[j] + a[k]) % 3;\n            \n            if(c == 0 && a[j] > 0 && j <\
    \ i){\n                a.swap(i, j);\n            }\n        }\n    }\n    a.iter().filter(|&x|\
    \ x % 3 == 0).count()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp8vz0fnww.rs:19:15\n\
    \   |\n19 |             if(c == 0 && a[j] > 0 && j < i){\n   |               ^\
    \                           ^\n   |\n   = note: `#[warn(unused_parens)]` on by\
    \ default\nhelp: remove these parentheses\n   |\n19 -             if(c == 0 &&\
    \ a[j] > 0 && j < i){\n19 +             if c == 0 && a[j] > 0 && j < i {\n   |\
    \ \n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8vz0fnww.rs:17:22\n\
    \   |\n17 |             let c = (a[i] + a[j] + a[k]) % 3;\n   |              \
    \        ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8vz0fnww.rs:17:29\n\
    \   |\n17 |             let c = (a[i] + a[j] + a[k]) % 3;\n   |              \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8vz0fnww.rs:17:36\n\
    \   |\n17 |             let c = (a[i] + a[j] + a[k]) % 3;\n   |              \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8vz0fnww.rs:19:26\n\
    \   |\n19 |             if(c == 0 && a[j] > 0 && j < i){\n   |               \
    \           ^^^^ slice indices are of ty"
  stdout: ''
  timestamp: 1660010660
