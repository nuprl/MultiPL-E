language: rs
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwosewtzm.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        return strings;\n    }\n\n    let mut\
    \ index = -1;\n    while index < strings.len() && strings[index] == substring\
    \ {\n        index += 1; // Skip the original string\n    }\n\n    if index <\
    \ strings.len() {\n        return strings[index..].iter().cloned().collect();\n\
    \    }\n    vec![]\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp811rk55s.rs:11:21\n\
    \   |\n11 |     let mut index = -1;\n   |                     ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for s in strings.iter() {\n     \
    \   if s.contains(substring) {\n            filtered.push(s);\n        }\n   \
    \ }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0mbmgm3e.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0mbmgm3e.rs:13:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    13 |     filtered\n   |     ^^^^^^^^ expected struct `String`, found `&String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut string_iter = strings.iter().filter_map(|s| {\n        if s.contains(substring)\
    \ {\n            Some(s.clone())\n        } else {\n            None\n       \
    \ }\n    });\n    string_iter.cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsr5wo8_d.rs:8:23\n     |\n8    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0271]: type mismatch resolving `<[closure@/tmp/tmpsr5wo8_d.rs:7:53:\
    \ 13:6] as FnOnce<(&String,)>>::Output == Option<&_>`\n    --> /tmp/tmpsr5wo8_d.rs:14:17\n\
    \     |\n14   |     string_iter.cloned().collect()\n     |                 ^^^^^^\
    \ expected reference, found struct `String`\n     |\n     = note: expected enum\
    \ `Option<&_>`\n                found enum `Option<String>`\n     = note: required\
    \ because of the requirements on the impl of `Iterator` for `FilterMap<std::slice::Iter<'_,\
    \ String>, [closure@/tmp/tmpsr5wo8_d.rs:7:53: 13:6]>`\nnote: required by a bound\
    \ in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<FilterMap<std::slice::Iter<'_,\
    \ String>, [closure@/tmp/tmpsr5wo8_d.rs:7:53: 13:6]>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpsr5wo8_d.rs:14:26\n   |\n14 |        string_iter.cloned().collect()\n\
    \   |                             ^^^^^^^ method cannot be called on `Cloned<FilterMap<std::slice::Iter<'_,\
    \ String>, [closure@/tmp/tmpsr5wo8_d.rs:7:53: 13:6]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<FilterMap<std::slice::Iter<'_, String>, [closure@/tmp/tmpsr5wo8_d.rs:7:53:\
    \ 13:6]> as Iterator>::Item = &_`\n           which is required by `Cloned<FilterMap<std::slice::Iter<'_,\
    \ String>, [closure@/tmp/tmpsr5wo8_d.rs:7:53: 13:6]>>: Iterator`\n           `Cloned<FilterMap<std::s"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring).unwrap_or_else(true))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpp560lwek.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring).unwrap_or_else(true))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring).unwrap_or_else(true))\n\
    \     |                                    +\n\nerror[E0599]: no method named\
    \ `unwrap_or_else` found for type `bool` in the current scope\n --> /tmp/tmpp560lwek.rs:9:47\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring).unwrap_or_else(true))\n\
    \  |                                               ^^^^^^^^^^^^^^ method not found\
    \ in `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(&substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpf59200id.rs:16:10\n     |\n\
    16   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if let Some(substring) = substring.as_ref() {\n        let mut result\
    \ = vec![];\n        for s in strings {\n            if let Some(mut start_index\
    \ = s.find(substring)) {\n                let end_index = start_index + substring.length;\n\
    \                if start_index != end_index {\n                    result.push(s.chars().skip(start_index).take(end_index).collect::<String>());\n\
    \                }\n            }\n        }\n        result\n    } else {\n \
    \       strings\n    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp1svd58gm.rs:10:41\n\
    \   |\n10 |             if let Some(mut start_index = s.find(substring)) {\n \
    \  |                                         ^ expected one of `)`, `,`, `@`,\
    \ or `|`\n\nerror: expected `{`, found `)`\n  --> /tmp/tmp1svd58gm.rs:10:60\n\
    \   |\n10 |             if let Some(mut start_index = s.find(substring)) {\n \
    \  |             --                                             ^ expected `{`\n\
    \   |             |\n   |             this `if` expression has a condition, but\
    \ no block\n\nerror[E0277]: the trait bound `String: AsRef<Option<_>>` is not\
    \ satisfied\n --> /tmp/tmp1svd58gm.rs:7:40\n  |\n7 |     if let Some(substring)\
    \ = substring.as_ref() {\n  |                                        ^^^^^^ the\
    \ trait `AsRef<Option<_>>` is not implemented for `String`\n  |\n  = help: the\
    \ following other types implement trait `AsRef<T>`:\n            <String as AsRef<OsStr>>\n\
    \            <String as AsRef<Path>>\n            <String as AsRef<[u8]>>\n  \
    \          <String as AsRef<str>>\n            <str as AsRef<OsStr>>\n       \
    \     <str as AsRef<Path>>\n            <str as AsRef<[u8]>>\n            <str\
    \ as AsRef<str>>\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpudqt__gr.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter(|s| s.contains(substring))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplxxzfn1z.rs:8:32\n     |\n8    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmplxxzfn1z.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut s = String::new();\n    strings.into_iter().filter(|s| s.contains(substring)).for_each(|s|\
    \ {\n        s.to_string()\n            .bytes()\n            .iter()\n      \
    \      .filter(|c| c != b'\\0')\n            .for_each(|c| s.push(c));\n    });\n\
    \    s.to_string().into_bytes().to_vec()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpku5ll85v.rs:8:47\n     |\n8    |     strings.into_iter().filter(|s|\
    \ s.contains(substring)).for_each(|s| {\n     |                              \
    \        -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n \
    \    |                                      |\n     |                        \
    \              required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n8    |     strings.into_iter().filter(|s| s.contains(&substring)).for_each(|s|\
    \ {\n     |                                               +\n\nerror[E0599]: no\
    \ method named `iter` found for struct `std::str::Bytes` in the current scope\n\
    \  --> /tmp/tmpku5ll85v.rs:11:14\n   |\n11 |             .iter()\n   |       \
    \       ^^^^ method not found in `std::str::Bytes<'_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpku5ll85v.rs:15:5\n   |\n6  | fn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n   |                     \
    \                                               ----------- expected `Vec<String>`\
    \ because of return type\n...\n15 |     s.to_string().into_bytes().to_vec()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `u8`\n   |\n   = note: expected struct `Vec<String>`\n              found struct\
    \ `Vec<u8>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|s| s.contains(substring)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpuawanpo_.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpuawanpo_.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwosewtzm.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut found = false;\n    strings.into_iter().filter(move |s| {\n \
    \       if let Some(found) = s.contains(&substring) {\n            found = true;\n\
    \        }\n        found\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpizx85ow5.rs:9:16\n  |\n9 |\
    \         if let Some(found) = s.contains(&substring) {\n  |                ^^^^^^^^^^^\
    \   ---------------------- this expression has type `bool`\n  |              \
    \  |\n  |                expected `bool`, found enum `Option`\n  |\n  = note:\
    \ expected type `bool`\n             found enum `Option<_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|e| e.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmprf2rcb6q.rs:9:32\n     |\n9    |         .filter(|e| e.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|e| e.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmprf2rcb6q.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| {\n        if s.contains(substring) {\n\
    \            Some(s)\n        } else {\n            None\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpobatfn7w.rs:8:23\n     |\n8    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpobatfn7w.rs:7:5\n\
    \   |\n6  |   fn filter_by_substring(strings: Vec<String>, substring: String)\
    \ -> Vec<String> {\n   |                                                     \
    \                 ----------- expected `Vec<String>` because of return type\n\
    7  | /     strings.iter().filter_map(|s| {\n8  | |         if s.contains(substring)\
    \ {\n9  | |             Some(s)\n10 | |         } else {\n11 | |             None\n\
    12 | |         }\n13 | |     })\n   | |______^ expected struct `Vec`, found struct\
    \ `FilterMap`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `FilterMap<std::slice::Iter<'_, String>, [closure@/tmp/tmpobatfn7w.rs:7:31:\
    \ 13:6]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s.to_owned())\n            } else {\n              \
    \  None\n            }\n        })\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps3dx79nr.rs:9:27\n     |\n9    |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            s.contains(substring)\n\
    \                .unwrap_or(false)\n                .to_string()\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9aef4of6.rs:10:24\n     |\n10   |             s.contains(substring)\n\
    \     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |               |\n     |               required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n10   |             s.contains(&substring)\n\
    \     |                        +\n\nerror[E0599]: no method named `unwrap_or`\
    \ found for type `bool` in the current scope\n  --> /tmp/tmp9aef4of6.rs:11:18\n\
    \   |\n11 |                 .unwrap_or(false)\n   |                  ^^^^^^^^^\
    \ method not found in `bool`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut found: Vec<String> = Vec::new();\n    for str in strings {\n\
    \        if str.contains(substring) {\n            found.push(str);\n        }\n\
    \    }\n    found\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpiuscr2kw.rs:9:25\n     |\n9    |         if str.contains(substring)\
    \ {\n     |                -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if str.contains(&substring)\
    \ {\n     |                         +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        strings\n    } else {\n        let mut\
    \ found_strings = Vec::new();\n        for s in strings {\n            if s.contains(substring)\
    \ {\n                found_strings.push(s);\n            }\n        }\n      \
    \  found_strings\n    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpe3bjxzhr.rs:12:27\n     |\n12   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n12   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter(|s| s.contains(substring))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplxxzfn1z.rs:8:32\n     |\n8    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmplxxzfn1z.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut it = strings.iter();\n    let mut pos = 0;\n    let mut last_pos\
    \ = 0;\n    let mut found = false;\n    let mut substrings = Vec::new();\n\n \
    \   // Loop through all possible substrings to see if any of them are present\
    \ in the\n    // original strings. If so, add the current string to the list of\
    \ substrings and stop\n    // looking through other possible substrings.\n   \
    \ while pos < strings.get(&mut it).len() {\n        while pos < strings.get(&mut\
    \ it).len() && last_pos < substring.len() {\n            let mut sub = &substring[last_pos..pos];\n\
    \            while !sub.contains(&mut it) {\n                last_pos += 1;\n\
    \                pos += 1;\n                sub = &substring[last_pos..pos];\n\
    \            }\n            if sub.contains(&mut it) {\n                found\
    \ = true;\n                break;\n            }\n            pos += 1;\n    \
    \        last_pos += 1;\n        }\n\n        if !found {\n            substrings.push(strings.get(&mut\
    \ it).clone());\n            found = false;\n        }\n\n        pos = 0;\n \
    \       last_pos = 0;\n    }\n    substrings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[String]` cannot be indexed by `&mut std::slice::Iter<'_,\
    \ String>`\n   --> /tmp/tmp_app2yop.rs:16:29\n    |\n16  |     while pos < strings.get(&mut\
    \ it).len() {\n    |                         --- ^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n    |                         |\n    |  \
    \                       required by a bound introduced by this call\n    |\n \
    \   = help: the trait `SliceIndex<[String]>` is not implemented for `&mut std::slice::Iter<'_,\
    \ String>`\nnote: required by a bound in `core::slice::<impl [T]>::get`\n\nerror[E0599]:\
    \ no method named `len` found for enum `Option` in the current scope\n  --> /tmp/tmp_app2yop.rs:16:38\n\
    \   |\n16 |     while pos < strings.get(&mut it).len() {\n   |               \
    \                       ^^^ method not found in `Option<&_>`\n\nerror[E0277]:\
    \ the type `[String]` cannot be indexed by `&mut std::slice::Iter<'_, String>`\n\
    \   --> /tmp/tmp_app2yop.rs:17:33\n    |\n17  |         while pos < strings.get(&mut\
    \ it).len() && last_pos < substring.len() {\n    |                           \
    \  --- ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    | \
    \                            |\n    |                             required by\
    \ a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<[String]>`\
    \ is not implemented for `&mut std::slice::Iter<'_, String>`\nnote: required by\
    \ a bound in `core::slice::<impl [T]>::get`\n\nerror[E0599]: no method named `len`\
    \ found for enum `Option` in the current scope\n  --> /tmp/tmp_app2yop.rs:17:42\n\
    \   |\n17 |         while pos < strings.get(&mut it).len() && last_pos < substring.len()\
    \ {\n   |                                          ^^^ method not found in `Option<&_>`\n\
    \nerror[E0277]: expected a `FnMut<(char,)>` closure, found `std::slice::Iter<'_,\
    \ String>`\n    --> /tmp/tmp_app2yop.rs:19:33\n     |\n19   |             while\
    \ !sub.contains(&mut it) {\n     |                        -------- ^^^^^^^ expected\
    \ an `FnMut<(char,)>` closure, found `std::slice::Iter<'_, String>`\n     |  \
    \                      |\n     |                   "
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = strings.clone();\n    result.retain(|s| s.contains(substring));\n\
    \    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzr_ypgon.rs:8:34\n     |\n8    |     result.retain(|s| s.contains(substring));\n\
    \     |                         -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                         |\n     |              \
    \           required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n8    |     result.retain(|s| s.contains(&substring));\n     |\
    \                                  +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(&substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnsznb4kl.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.contains(&substring))\n  |                       \
    \  ^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n9 |         .filter_map(|s| Some(s.contains(&substring)))\n\
    \  |                         +++++                      +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        return vec![];\n    }\n\n    let mut\
    \ iter = strings.iter();\n    let mut index = strings.len();\n    let mut substring\
    \ = substring.to_string();\n    loop {\n        index -= 1;\n        let mut string\
    \ = iter.next();\n        if string.contains(&substring) {\n            strings.remove(&string);\n\
    \        }\n        if index == 0 {\n            break;\n        }\n    }\n  \
    \  strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: use of unstable library feature 'option_result_contains'\n\
    \  --> /tmp/tmpe0d_lk2k.rs:17:19\n   |\n17 |         if string.contains(&substring)\
    \ {\n   |                   ^^^^^^^^\n   |\n   = note: see issue #62358 <https://github.com/rust-lang/rust/issues/62358>\
    \ for more information\n\nerror[E0277]: can't compare `String` with `&String`\n\
    \    --> /tmp/tmpe0d_lk2k.rs:17:28\n     |\n17   |         if string.contains(&substring)\
    \ {\n     |                   -------- ^^^^^^^^^^ no implementation for `String\
    \ == &String`\n     |                   |\n     |                   required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ PartialEq<&String>` is not satisfied\n     = help: the trait `PartialEq<&String>`\
    \ is not implemented for `String`\n     = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n               <&'a str as PartialEq<OsString>>\n \
    \              <&'a str as PartialEq<String>>\n               <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n               <String as PartialEq<&'a str>>\n               <String\
    \ as PartialEq<Cow<'a, str>>>\n               <String as PartialEq<str>>\n   \
    \            <String as PartialEq>\n               <str as PartialEq<Cow<'a, str>>>\n\
    \             and 4 others\nnote: required by a bound in `Option::<T>::contains`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpe0d_lk2k.rs:18:28\n   |\n18 |\
    \             strings.remove(&string);\n   |                            ^^^^^^^\
    \ expected `usize`, found `&Option<&String>`\n   |\n   = note:   expected type\
    \ `usize`\n           found reference `&Option<&String>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0658.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvw51_9b0.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut output = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            output.push(string);\n        }\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmprzi35wc_.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 101
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = strings.clone();\n    for s in &result {\n        if\
    \ !s.contains(&substring) {\n            result.clear();\n            break;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"xxx\", \"xxxAAA\", \"xxx\"]`', /tmp/tmpvgqyfemr.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        return vec![];\n    }\n\n    let mut\
    \ strings_with_substring = vec![];\n    strings.into_iter().for_each(|s| {\n \
    \       if s.contains(substring) {\n            strings_with_substring.push(s);\n\
    \        }\n    });\n\n    strings_with_substring\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp6fdvgqf0.rs:13:23\n     |\n13   |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n13   |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|s| s.contains(substring))\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv0cbfd8s.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring))\n\
    \     |                                          +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpv0cbfd8s.rs:7:5\n  |\n6 | fn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n  |                      \
    \                                              ----------- expected `Vec<String>`\
    \ because of return type\n7 |     strings.iter().filter(|s| s.contains(substring))\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Filter`\n  |\n  = note: expected struct `Vec<String>`\n      \
    \       found struct `Filter<std::slice::Iter<'_, String>, [closure@/tmp/tmpv0cbfd8s.rs:7:27:\
    \ 7:52]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| {\n        if s.contains(substring) {\n\
    \            Some(s)\n        } else {\n            None\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp524xzdte.rs:8:23\n     |\n8    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp524xzdte.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut found = false;\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            found = true;\n            break;\n        }\n    }\n    if !found\
    \ {\n        strings\n    } else {\n        strings.iter().filter(|s| !s.contains(&substring))\n\
    \    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5zb1pl8y.rs:17:9\n   |\n\
    6  | fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n17 |         strings.iter().filter(|s|\
    \ !s.contains(&substring))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Filter`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Filter<std::slice::Iter<'_, String>,\
    \ [closure@/tmp/tmp5zb1pl8y.rs:17:31: 17:58]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for string in strings {\n       \
    \ if string.contains(substring) {\n            filtered.push(string);\n      \
    \  }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpumrkipkv.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut output = vec![];\n    strings.iter().for_each(|string| {\n  \
    \      if string.contains(substring) {\n            output.push(string);\n   \
    \     }\n    });\n    output\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpi5_a_2vq.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpi5_a_2vq.rs:13:5\n   |\n6  | fn filter_by_substring(strings: Vec<String>,\
    \ substring: String) -> Vec<String> {\n   |                                  \
    \                                  ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     output\n   |     ^^^^^^ expected struct `String`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter_map(|s| s.contains(substring))\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsel0q3ja.rs:8:36\n     |\n8    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n8    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpsel0q3ja.rs:8:25\n  |\n8 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n8 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwosewtzm.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|string| {\n          \
    \  if string.contains(substring) {\n                Some(string.to_string())\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpabmi31qn.rs:10:32\n     |\n10   |             if string.contains(substring)\
    \ {\n     |                       -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                       |\n     |                \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n10   |             if string.contains(&substring) {\n     |         \
    \                       +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        return Vec::new();\n    }\n\n    let\
    \ mut result = vec![];\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpolsy8d8q.rs:13:23\n     |\n13   |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n13   |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|e| e.contains(substring)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpt5y5aotq.rs:7:42\n     |\n7    |     strings.iter().filter(|e| e.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|e| e.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpt5y5aotq.rs:7:54\n     |\n7    |     strings.iter().filter(|e|\
    \ e.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(&substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnsznb4kl.rs:9:25\n  |\n9 |\
    \         .filter_map(|s| s.contains(&substring))\n  |                       \
    \  ^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n9 |         .filter_map(|s| Some(s.contains(&substring)))\n\
    \  |                         +++++                      +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(Some(s))\n            } else {\n                Some(None)\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpg8w8t2fz.rs:9:27\n     |\n9    |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `Option<&String>`\n    --> /tmp/tmpg8w8t2fz.rs:15:10\n     |\n15   |\
    \         .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=Option<&String>>`\n     |\n     = help:\
    \ the trait `FromIterator<Option<&String>>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| if s.contains(substring)\
    \ => Some(s) else None)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `=>`\n --> /tmp/tmpznb17bnd.rs:9:50\n  |\n9\
    \ |         .filter_map(|s| if s.contains(substring) => Some(s) else None)\n \
    \ |                         --                       ^^ expected `{`\n  |    \
    \                     |\n  |                         this `if` expression has\
    \ a condition, but no block\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(s);\n     \
    \   }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp87pu5yof.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    strings.iter().for_each(|s| {\n   \
    \     if s.contains(substring) {\n            result.push(s);\n        }\n   \
    \ });\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpo4redczu.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo4redczu.rs:13:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    13 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| s.contains(substring)).collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpz7ji2vil.rs:7:46\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \  -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n7    |     strings.iter().filter_map(|s| s.contains(&substring)).collect()\n\
    \     |                                              +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpz7ji2vil.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.contains(substring))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut string_map = StringMap::new();\n    for string in strings {\n\
    \        if string_map.contains_key(&string) {\n            string_map.insert(&string,\
    \ StringMapValue::new(true));\n        }\n        else {\n            string_map.insert(&string,\
    \ StringMapValue::new(false));\n        }\n    }\n    let mut result_vec = vec![];\n\
    \    for (key, value) in string_map {\n        if value.is_match() && key.contains(substring)\
    \ {\n            result_vec.push(key);\n        }\n    }\n    result_vec\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `StringMap`\n -->\
    \ /tmp/tmprj6eyo4i.rs:7:26\n  |\n7 |     let mut string_map = StringMap::new();\n\
    \  |                          ^^^^^^^^^ use of undeclared type `StringMap`\n\n\
    error[E0433]: failed to resolve: use of undeclared type `StringMapValue`\n  -->\
    \ /tmp/tmprj6eyo4i.rs:10:40\n   |\n10 |             string_map.insert(&string,\
    \ StringMapValue::new(true));\n   |                                        ^^^^^^^^^^^^^^\
    \ use of undeclared type `StringMapValue`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `StringMapValue`\n  --> /tmp/tmprj6eyo4i.rs:13:40\n \
    \  |\n13 |             string_map.insert(&string, StringMapValue::new(false));\n\
    \   |                                        ^^^^^^^^^^^^^^ use of undeclared\
    \ type `StringMapValue`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut string = String::with_capacity(strings.len());\n    strings.iter().filter(|s|\
    \ s.contains(substring)).map(|s| {\n        string.push_str(s);\n        string.into_owned()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpr3f41anw.rs:8:42\n     |\n8    |     strings.iter().filter(|s| s.contains(substring)).map(|s|\
    \ {\n     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |     strings.iter().filter(|s| s.contains(&substring)).map(|s|\
    \ {\n     |                                          +\n\nerror[E0599]: no method\
    \ named `into_owned` found for struct `String` in the current scope\n  --> /tmp/tmpr3f41anw.rs:10:16\n\
    \   |\n10 |         string.into_owned()\n   |                ^^^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|x| x.contains(substring)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpqcu2is8y.rs:7:42\n     |\n7    |     strings.iter().filter(|x| x.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|x| x.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpqcu2is8y.rs:7:54\n     |\n7    |     strings.iter().filter(|x|\
    \ x.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = vec![];\n    for string in strings {\n   \
    \     if string.contains(substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    return filtered_strings;\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp7wnawozs.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut strings_iter = strings.iter();\n    let mut substring_iter =\
    \ substring.chars().skip_while(|&&c| !c.is_alphanumeric()).collect::<Vec<_>>();\n\
    \    loop {\n        let mut next_string = substring_iter.next();\n        if\
    \ next_string.is_some() {\n            let mut found_string = next_string.unwrap();\n\
    \            loop {\n                if !strings_iter.contains(&found_string)\
    \ {\n                    strings_iter.next();\n                    found_string\
    \ = substring_iter.next();\n                } else {\n                    break;\n\
    \                }\n            }\n        }\n        if !next_string.is_some()\
    \ {\n            break;\n        }\n    }\n    strings_iter.filter_map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi8i8s1u4.rs:8:61\n  |\n8 |\
    \     let mut substring_iter = substring.chars().skip_while(|&&c| !c.is_alphanumeric()).collect::<Vec<_>>();\n\
    \  |                                                             ^-\n  |     \
    \                                                        ||\n  |             \
    \                                                |expected due to this\n  |  \
    \                                                           expected `char`, found\
    \ reference\n  |                                                             help:\
    \ you can probably remove the explicit borrow: `c`\n  |\n  = note:   expected\
    \ type `char`\n          found reference `&_`\n\nerror[E0599]: no method named\
    \ `next` found for struct `Vec<char>` in the current scope\n  --> /tmp/tmpi8i8s1u4.rs:10:46\n\
    \   |\n10 |         let mut next_string = substring_iter.next();\n   |       \
    \                                       ^^^^ method not found in `Vec<char>`\n\
    \nerror[E0599]: no method named `contains` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpi8i8s1u4.rs:14:34\n   |\n14 |          \
    \       if !strings_iter.contains(&found_string) {\n   |                     \
    \             ^^^^^^^^ method not found in `std::slice::Iter<'_, String>`\n\n\
    error[E0599]: no method named `next` found for struct `Vec<char>` in the current\
    \ scope\n  --> /tmp/tmpi8i8s1u4.rs:16:51\n   |\n16 |                     found_string\
    \ = substring_iter.next();\n   |                                             \
    \      ^^^^ method not found in `Vec<char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi8i8s1u4.rs:26:33\n   |\n26 |     strings_iter.filter_map(|s| s.to_string()).collect()\n\
    \   |                                 ^^^^^^^^^^^^^ expected enum `Option`, found\
    \ struct `String`\n   |\n   = note: expected enum `Option<_>`\n            found\
    \ struct `String`\nhelp: try wrapping the expression in `Some`\n   |\n26 |   \
    \  strings_iter.filter_map(|s| Some(s.to_string())).collect()\n   |          \
    \                       +++++             +\n\nerror: aborting due to 5 previous\
    \ errors\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplkd5942b.rs:9:27\n     |\n9    |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmplkd5942b.rs:15:10\n     |\n15   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplkd5942b.rs:9:27\n     |\n9    |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmplkd5942b.rs:15:10\n     |\n15   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|x| x.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpeqls95hv.rs:9:32\n     |\n9    |         .filter(|x| x.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|x| x.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpeqls95hv.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut results: Vec<String> = vec![];\n    for string in strings {\n\
    \        if string.contains(&substring) {\n            results.push(string);\n\
    \        }\n    }\n    results\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if let Some(pos) = strings.iter().position(|s| s.contains(substring))\
    \ {\n        strings.split_at(pos)\n    } else {\n        strings\n    }\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmphezehncv.rs:7:63\n     |\n7    |     if let Some(pos) = strings.iter().position(|s|\
    \ s.contains(substring)) {\n     |                                           \
    \           -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                      |\n     |       \
    \                                               required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n7    |     if let Some(pos)\
    \ = strings.iter().position(|s| s.contains(&substring)) {\n     |            \
    \                                                   +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphezehncv.rs:8:9\n  |\n6 | fn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n  |                      \
    \                                              ----------- expected `Vec<String>`\
    \ because of return type\n7 |     if let Some(pos) = strings.iter().position(|s|\
    \ s.contains(substring)) {\n8 |         strings.split_at(pos)\n  |         ^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found tuple\n  |\n  = note: expected struct `Vec<String>`\n\
    \              found tuple `(&[String], &[String])`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            s.contains(substring)\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmps15i6aa5.rs:10:24\n     |\n10   |             s.contains(substring)\n\
    \     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |               |\n     |               required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n10   |             s.contains(&substring)\n\
    \     |                        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps15i6aa5.rs:10:13\n\
    \   |\n10 |             s.contains(substring)\n   |             ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n10 |             Some(s.contains(substring))\n   |             +++++  \
    \                   +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|x| {\n        x.contains(substring).unwrap_or(false)\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpd25ntl07.rs:8:20\n     |\n8    |         x.contains(substring).unwrap_or(false)\n\
    \     |           -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |           |\n     |           required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         x.contains(&substring).unwrap_or(false)\n\
    \     |                    +\n\nerror[E0599]: no method named `unwrap_or` found\
    \ for type `bool` in the current scope\n --> /tmp/tmpd25ntl07.rs:8:31\n  |\n8\
    \ |         x.contains(substring).unwrap_or(false)\n  |                      \
    \         ^^^^^^^^^ method not found in `bool`\n\nerror[E0277]: a value of type\
    \ `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpd25ntl07.rs:9:8\n     |\n9    |     }).collect()\n     |    \
    \    ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if substring.contains(s) {\n            filtered_strings.push(s);\n     \
    \   }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpmveqj57v.rs:9:31\n     |\n9    |         if substring.contains(s)\
    \ {\n     |                      -------- ^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                      |\n     |                      required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if substring.contains(&s)\
    \ {\n     |                               +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut results: Vec<String> = Vec::new();\n    for s in strings {\n\
    \        if s.contains(substring) {\n            results.push(s);\n        }\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp43ej1ax1.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxty_zu15.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpxty_zu15.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxty_zu15.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpxty_zu15.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|&v| v.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbqbtdxx_.rs:9:33\n     |\n9    |         .filter(|&v| v.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|&v| v.contains(&substring))\n     |         \
    \                        +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpbqbtdxx_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|e| e.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwrtsqb8s.rs:9:32\n     |\n9    |         .filter(|e| e.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|e| e.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| {\n        if substring.find(s) == Some(0)\
    \ {\n            Some(s)\n        } else {\n            None\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpl8_lvl7g.rs:13:8\n     |\n\
    13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpirkfvx3l.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpirkfvx3l.rs:10:10\n     |\n10   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| {\n        if let Some(index) = (strings.iter().position(|s|\
    \ s == substring)).map(|i| i + 1) {\n            Some(s)\n        } else {\n \
    \           None\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&String` with `String`\n --> /tmp/tmp80_0x884.rs:8:61\n\
    \  |\n8 |         if let Some(index) = (strings.iter().position(|s| s == substring)).map(|i|\
    \ i + 1) {\n  |                                                             ^^\
    \ no implementation for `&String == String`\n  |\n  = help: the trait `PartialEq<String>`\
    \ is not implemented for `&String`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n    \
    \        <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a,\
    \ str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n\
    \            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmp80_0x884.rs:13:8\n     |\n13   |     }).collect()\n\
    \     |        ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        return vec![];\n    }\n    let mut filtered_strings\
    \ = strings;\n    let start_index = filtered_strings.iter().position(|s| s.contains(substring)).unwrap();\n\
    \    let end_index = start_index + substring.len();\n    filtered_strings.retain(|s|\
    \ s.contains(substring));\n    filtered_strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9s1jw76q.rs:11:71\n     |\n11   |     let start_index = filtered_strings.iter().position(|s|\
    \ s.contains(substring)).unwrap();\n     |                                   \
    \                           -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                                                      \
    \        |\n     |                                                           \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n11   |     let start_index = filtered_strings.iter().position(|s| s.contains(&substring)).unwrap();\n\
    \     |                                                                      \
    \ +\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9s1jw76q.rs:13:44\n     |\n13   |     filtered_strings.retain(|s|\
    \ s.contains(substring));\n     |                                   -------- ^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |                     \
    \              |\n     |                                   required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n13   |     filtered_strings.retain(|s|\
    \ s.contains(&substring));\n     |                                           \
    \ +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            let\
    \ index = s.find(substring);\n            if index == Some(0) {\n            \
    \    None\n            } else {\n                Some(s[index..])\n          \
    \  }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpbpwgg7cx.rs:10:32\n     |\n10   |             let index = s.find(substring);\n\
    \     |                           ---- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                           |\n     |                  \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::find`\nhelp: consider borrowing here\n\
    \     |\n10   |             let index = s.find(&substring);\n     |          \
    \                      +\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `RangeFrom<Option<usize>>`\n  --> /tmp/tmpbpwgg7cx.rs:14:22\n   |\n14 | \
    \                Some(s[index..])\n   |                      ^^^^^^^^^^ `String`\
    \ cannot be indexed by `RangeFrom<Option<usize>>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<Option<usize>>>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmptul2hk5o.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n   --> /tmp/tmptul2hk5o.rs:10:35\n\
    \    |\n10  |             filtered_strings.push(*s);\n    |                  \
    \            ---- ^^ doesn't have a size known at compile-time\n    |        \
    \                      |\n    |                              required by a bound\
    \ introduced by this call\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmptul2hk5o.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str`\
    \ cannot be known at compilation time\n   --> /tmp/tmptul2hk5o.rs:7:32\n    |\n\
    7   |     let mut filtered_strings = Vec::new();\n    |                      \
    \          ^^^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptul2hk5o.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                    "
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmputlol2r3.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter_map(|s| {\n            s.contains(substring)\n\
    \                .unwrap_or(false)\n                .map(|b| {\n             \
    \       if !b {\n                        None\n                    } else {\n\
    \                        Some(s)\n                    }\n                })\n\
    \                .unwrap_or(None)\n        })\n        .collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplim22_zr.rs:9:24\n     |\n9    |             s.contains(substring)\n\
    \     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |               |\n     |               required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |             s.contains(&substring)\n\
    \     |                        +\n\nerror[E0599]: no method named `unwrap_or`\
    \ found for type `bool` in the current scope\n  --> /tmp/tmplim22_zr.rs:10:18\n\
    \   |\n10 |                 .unwrap_or(false)\n   |                  ^^^^^^^^^\
    \ method not found in `bool`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut strings_slice = strings.to_vec();\n    let mut len = strings_slice.len();\n\
    \n    while len > 0 {\n        let mut count = 0;\n        let mut index = strings_slice.iter().position(|s|\
    \ s.contains(substring));\n        while index != strings_slice.len() {\n    \
    \        if count == 0 {\n                strings_slice.remove(0);\n         \
    \       len -= 1;\n            } else {\n                count += 1;\n       \
    \     }\n            index = strings_slice.iter().position(|s| s.contains(substring),\
    \ &index);\n        }\n    }\n    strings_slice\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1xfvqi16.rs:12:70\n     |\n12   |         let mut index = strings_slice.iter().position(|s|\
    \ s.contains(substring));\n     |                                            \
    \                 -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                             |\n     |\
    \                                                             required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n12   |         let mut\
    \ index = strings_slice.iter().position(|s| s.contains(&substring));\n     | \
    \                                                                     +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1xfvqi16.rs:13:24\n   |\n13 |         while\
    \ index != strings_slice.len() {\n   |                        ^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `usize`\n   |\n   = note: expected enum `Option<usize>`\n\
    \              found type `usize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |         while index != Some(strings_slice.len()) {\n   |         \
    \               +++++                   +\n\nerror[E0061]: this function takes\
    \ 1 argument but 2 arguments were supplied\n    --> /tmp/tmp1xfvqi16.rs:20:42\n\
    \     |\n20   |             index = strings_slice.iter().position(|s| s.contains(substring),\
    \ &index);\n     |                                          ^^^^^^^^ -------------------------\
    \  ------ supplied 2 arguments\n     |                                       \
    \   |\n     |                                          expected 1 argument\n \
    \    |\nnote: associated function defined here\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered = vec![];\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            filtered.push(str);\n        }\n    }\n    filtered\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpajlokqpg.rs:9:25\n     |\n9    |         if str.contains(substring)\
    \ {\n     |                -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if str.contains(&substring)\
    \ {\n     |                         +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter(|s| s.contains(substring))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplxxzfn1z.rs:8:32\n     |\n8    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmplxxzfn1z.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = strings.clone();\n    filtered_strings.retain(|&s|\
    \ s.contains(substring));\n    filtered_strings\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmplwf8y1ta.rs:8:45\n     |\n8    |     filtered_strings.retain(|&s|\
    \ s.contains(substring));\n     |                                    --------\
    \ ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |           \
    \                         |\n     |                                    required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n8    |     filtered_strings.retain(|&s|\
    \ s.contains(&substring));\n     |                                           \
    \  +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|x| {\n            x.contains(substring)\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsveqpuod.rs:10:24\n     |\n10   |             x.contains(substring)\n\
    \     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |               |\n     |               required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n10   |             x.contains(&substring)\n\
    \     |                        +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmpsveqpuod.rs:12:10\n\
    \     |\n12   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut matches = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            matches.push(s)\n        }\n    }\n    matches\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmphe37bqrr.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpirkfvx3l.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpirkfvx3l.rs:10:10\n     |\n10   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.filter(|s| {\n        s.find(substring) != String::npos\n   \
    \ })\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmprlas9xs9.rs:7:13\n\
    \    |\n7   |       strings.filter(|s| {\n    |               ^^^^^^ `Vec<String>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<String>: Iterator`\n            which is required by `&mut Vec<String>:\
    \ Iterator`\n            `[String]: Iterator`\n            which is required by\
    \ `&mut [String]: Iterator`\n\nerror[E0599]: no function or associated item named\
    \ `npos` found for struct `String` in the current scope\n --> /tmp/tmprlas9xs9.rs:8:38\n\
    \  |\n8 |         s.find(substring) != String::npos\n  |                     \
    \                 ^^^^ function or associated item not found in `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut found = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            found.push(s);\n        }\n    }\n    found\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|&s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpoz5nfgnt.rs:9:33\n     |\n9    |         .filter(|&s| s.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|&s| s.contains(&substring))\n     |         \
    \                        +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpoz5nfgnt.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if substring.is_empty() {\n        strings\n    } else {\n        strings\n\
    \            .iter()\n            .filter_map(|s| {\n                if s.contains(substring)\
    \ {\n                    Some(s.to_string())\n                } else {\n     \
    \               None\n                }\n            })\n            .collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpexbyn77i.rs:13:31\n     |\n13   |                 if s.contains(substring)\
    \ {\n     |                      -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                      |\n     |                 \
    \     required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n13   |                 if s.contains(&substring) {\n     |          \
    \                     +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    strings\n        .iter()\n      \
    \  .filter_map(|string| {\n            if string.contains(substring) {\n     \
    \           Some(string)\n            } else {\n                None\n       \
    \     }\n        })\n        .filter(|string| string.len() > 0)\n        .collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_kcx7j6o.rs:11:32\n     |\n11   |             if string.contains(substring)\
    \ {\n     |                       -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                       |\n     |                \
    \       required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n11   |             if string.contains(&substring) {\n     |         \
    \                       +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp_kcx7j6o.rs:18:10\n\
    \     |\n18   |         .collect::<Vec<String>>()\n     |          ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwosewtzm.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut found_substring = false;\n\n    for s in strings {\n        if\
    \ !found_substring {\n            if s.contains(substring) {\n               \
    \ found_substring = true;\n            }\n        } else {\n            if !s.contains(substring)\
    \ {\n                found_substring = false;\n            }\n        }\n    }\n\
    \n    strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp95e9epqe.rs:11:27\n     |\n11   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n11   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp95e9epqe.rs:15:28\n\
    \     |\n15   |             if !s.contains(substring) {\n     |              \
    \     -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n    \
    \ |                   |\n     |                   required by a bound introduced\
    \ by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n15   |             if\
    \ !s.contains(&substring) {\n     |                            +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if substring.is_empty() {\n        strings\n    } else {\n        let\
    \ mut string = String::from(\"\");\n        strings.iter().for_each(|s| {\n  \
    \          string = string.push_str(&s).unwrap_or(&s);\n            if string.contains(&substring)\
    \ {\n                string = string.push_str(&s).unwrap_or(&s);\n           \
    \ }\n        });\n        strings.iter().filter(|s| !string.contains(&s)).collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for unit type `()` in the\
    \ current scope\n  --> /tmp/tmpyyqvdv9f.rs:12:42\n   |\n12 |             string\
    \ = string.push_str(&s).unwrap_or(&s);\n   |                                 \
    \         ^^^^^^^^^ method not found in `()`\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for unit type `()` in the current scope\n  --> /tmp/tmpyyqvdv9f.rs:14:46\n\
    \   |\n14 |                 string = string.push_str(&s).unwrap_or(&s);\n   |\
    \                                              ^^^^^^^^^ method not found in `()`\n\
    \nerror[E0277]: expected a `Fn<(char,)>` closure, found `String`\n    --> /tmp/tmpyyqvdv9f.rs:17:52\n\
    \     |\n17   |         strings.iter().filter(|s| !string.contains(&s)).collect()\n\
    \     |                                           -------- ^^\n     |        \
    \                                   |        |\n     |                       \
    \                    |        expected an `Fn<(char,)>` closure, found `String`\n\
    \     |                                           |        help: consider dereferencing\
    \ here: `&**s`\n     |                                           required by a\
    \ bound introduced by this call\n     |\n     = help: the trait `Fn<(char,)>`\
    \ is not implemented for `String`\n     = note: required because of the requirements\
    \ on the impl of `FnOnce<(char,)>` for `&String`\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `&&&String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpyyqvdv9f.rs:17:57\n     |\n17   |         strings.iter().filter(|s|\
    \ !string.contains(&s)).collect()\n     |                                    \
    \                     ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `coll"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if substring.is_empty() {\n        return strings;\n    }\n\n    let\
    \ mut result: Vec<String> = Vec::new();\n    for str in strings {\n        if\
    \ str.contains(substring) {\n            result.push(str);\n        }\n    }\n\
    \n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpkwq_qtrl.rs:13:25\n     |\n13   |         if str.contains(substring)\
    \ {\n     |                -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                |\n     |                required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n13   |         if str.contains(&substring)\
    \ {\n     |                         +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| {\n        if s.contains(substring) {\n\
    \            Some(s)\n        } else {\n            None\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp524xzdte.rs:8:23\n     |\n8    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n8    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&String`\n    --> /tmp/tmp524xzdte.rs:13:8\n\
    \     |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_81_hx63.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp_81_hx63.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut new_strings = vec![];\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            new_strings.push(s);\n        }\n    }\n    new_strings\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxp9o686o.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s.to_string())\n            } else {\n             \
    \   None\n            }\n        })\n        .collect()\n}\n\nfn main() {\n  \
    \  let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpx0c3y7om.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings.iter() {\n       \
    \ if s.contains(&substring) {\n            result.push(s);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmyi8qaor.rs:13:5\n   |\n\
    6  | fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found `&String`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&String>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        return Vec::new();\n    }\n\n    let\
    \ mut result = Vec::with_capacity(strings.len());\n    for s in strings.iter()\
    \ {\n        if s.contains(substring) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxsqr0cud.rs:13:23\n     |\n13   |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n13   |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxsqr0cud.rs:17:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxty_zu15.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpxty_zu15.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| if s.contains(substring)\
    \ {\n            Some(s)\n        } else {\n            None\n        })\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmprks1lusi.rs:9:39\n     |\n9    |         .filter_map(|s| if s.contains(substring)\
    \ {\n     |                              -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                              |\n     |      \
    \                        required by a bound introduced by this call\n     |\n\
    \     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `core::str::<impl str>::contains`\nhelp: consider\
    \ borrowing here\n     |\n9    |         .filter_map(|s| if s.contains(&substring)\
    \ {\n     |                                       +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmprks1lusi.rs:14:10\n     |\n14   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if let Some(i) = strings.iter().position(|s| s.contains(substring)) {\n\
    \        strings.iter()\n            .enumerate()\n            .filter(|(_, s)|\
    \ !s.contains(substring))\n            .map(|(_, i)| strings[i..i + 1])\n    \
    \        .collect()\n    } else {\n        strings\n    }\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp9frcey1u.rs:7:61\n     |\n7    |     if let Some(i) = strings.iter().position(|s|\
    \ s.contains(substring)) {\n     |                                           \
    \         -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                                    |\n     |         \
    \                                           required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     if let Some(i) = strings.iter().position(|s|\
    \ s.contains(&substring)) {\n     |                                          \
    \                   +\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found\
    \ `String`\n    --> /tmp/tmp9frcey1u.rs:10:42\n     |\n10   |             .filter(|(_,\
    \ s)| !s.contains(substring))\n     |                                 --------\
    \ ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |           \
    \                      |\n     |                                 required by a\
    \ bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             .filter(|(_,\
    \ s)| !s.contains(&substring))\n     |                                       \
    \   +\n\nerror[E0369]: cannot add `{integer}` to `&String`\n  --> /tmp/tmp9frcey1u.rs:11:40\n\
    \   |\n11 |             .map(|(_, i)| strings[i..i + 1])\n   |               \
    \                       - ^ - {integer}\n   |                                \
    \      |\n   |                                      &String\n\nerror[E0277]: the\
    \ type `[String]` cannot be indexed by `std::ops::Range<&String>`\n  --> /tm"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if substring.is_empty() {\n        return strings;\n    }\n\n    let\
    \ mut strings_iter = strings.iter();\n    let mut current_substring = substring;\n\
    \n    // iterate over all the strings and collect all the strings which have substring\
    \ somewhere\n    loop {\n        match strings_iter.next() {\n            Some(element)\
    \ => {\n                if current_substring == element {\n                  \
    \  return Vec::new();\n                }\n                if current_substring.ends_with(element)\
    \ {\n                    return Vec::new();\n                }\n             \
    \   if current_substring.contains(element) {\n                    current_substring\
    \ = current_substring.clone();\n                }\n            }\n           \
    \ None => return Vec::new(),\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `&String`\n  --> /tmp/tmpuue16_3l.rs:18:38\n\
    \   |\n18 |                 if current_substring == element {\n   |          \
    \                            ^^ no implementation for `String == &String`\n  \
    \ |\n   = help: the trait `PartialEq<&String>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut found = false;\n    strings.into_iter().filter(|s| {\n      \
    \  found = true;\n        let mut found_substring = false;\n        for s in s.chars().filter(|c|\
    \ {\n            if c.as_str().contains(&substring) {\n                found_substring\
    \ = true;\n            }\n            found_substring\n        }) {\n        \
    \    found = false;\n        }\n        found\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_str` found for reference `&char` in the\
    \ current scope\n  --> /tmp/tmpy5lki0bv.rs:12:18\n   |\n12 |             if c.as_str().contains(&substring)\
    \ {\n   |                  ^^^^^^ method not found in `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s.clone())\n            } else {\n                None\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpe6bniswm.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    // use regex to find all occurrences of substring in all strings in vec\n\
    \    let mut pattern = regex::Regex::new(\".*\" + substring.to_owned()).unwrap();\n\
    \    strings.into_iter().filter(|s| {\n        match pattern.find(s) {\n     \
    \       Ok(_) => true,\n            Err(_) => false,\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `regex`\n\
    \ --> /tmp/tmpk1h0s_w9.rs:8:23\n  |\n8 |     let mut pattern = regex::Regex::new(\"\
    .*\" + substring.to_owned()).unwrap();\n  |                       ^^^^^ use of\
    \ undeclared crate or module `regex`\n\nerror[E0369]: cannot add `String` to `&str`\n\
    \ --> /tmp/tmpk1h0s_w9.rs:8:46\n  |\n8 |     let mut pattern = regex::Regex::new(\"\
    .*\" + substring.to_owned()).unwrap();\n  |                                  \
    \       ---- ^ -------------------- String\n  |                              \
    \           |    |\n  |                                         |    `+` cannot\
    \ be used to concatenate a `&str` with a `String`\n  |                       \
    \                  &str\n  |\nhelp: create an owned `String` on the left and add\
    \ a borrow on the right\n  |\n8 |     let mut pattern = regex::Regex::new(\".*\"\
    .to_owned() + &substring.to_owned()).unwrap();\n  |                          \
    \                   +++++++++++   +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0369, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut index = strings.len();\n    while index > 0 {\n        index\
    \ -= 1;\n        let substring_start = strings.len() - index.min(1).unwrap();\n\
    \        let mut substring_end = 0;\n        for (i, s) in strings.iter().rev().zip(strings.iter().cloned()).take(index\
    \ + 1) {\n            if s.contains(&substring[..]) {\n                substring_end\
    \ = i;\n                break;\n            }\n        }\n        if substring_end\
    \ != 0 {\n            strings.remove(&strings[substring_start..substring_end]);\n\
    \        }\n    }\n    strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpcamenh22.rs:10:60\n   |\n10 |         let substring_start\
    \ = strings.len() - index.min(1).unwrap();\n   |                             \
    \                               ^^^^^^ method not found in `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcamenh22.rs:14:33\n   |\n11 |         let mut\
    \ substring_end = 0;\n   |                                 - expected due to this\
    \ value\n...\n14 |                 substring_end = i;\n   |                  \
    \               ^ expected integer, found `&String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcamenh22.rs:19:28\n   |\n19 |             strings.remove(&strings[substring_start..substring_end]);\n\
    \   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `usize`, found `&[String]`\n   |\n   = note:   expected type `usize`\n     \
    \      found reference `&[String]`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpudqt__gr.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmputlol2r3.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result: Vec<String> = Vec::new();\n    for s in strings {\n \
    \       if s.contains(substring) {\n            result.push(s);\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpsoiuvxjl.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|&s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpoz5nfgnt.rs:9:33\n     |\n9    |         .filter(|&s| s.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|&s| s.contains(&substring))\n     |         \
    \                        +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpoz5nfgnt.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpvw51_9b0.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result: Vec<String> = Vec::new();\n    for (index, &s) in strings.iter().enumerate()\
    \ {\n        if index == 0 {\n            if s.contains(&substring) {\n      \
    \          result.push(s);\n            }\n        } else {\n            let mut\
    \ i = index;\n            loop {\n                if s[..i].contains(&substring)\
    \ {\n                    result.push(s[..i]);\n                    break;\n  \
    \              }\n                i += 1;\n            }\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuq07fnh3.rs:17:33\n   |\n\
    17 |                     result.push(s[..i]);\n   |                          \
    \       ^^^^^^- help: try using a conversion method: `.to_string()`\n   |    \
    \                             |\n   |                                 expected\
    \ struct `String`, found `str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut res = strings.clone();\n    res.retain(|s| s.contains(substring));\n\
    \    res\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzcwf2933.rs:8:31\n     |\n8    |     res.retain(|s| s.contains(substring));\n\
    \     |                      -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                      |\n     |                      required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n8    |     res.retain(|s|\
    \ s.contains(&substring));\n     |                               +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|&x| x.contains(&substring)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp5n8qk5x1.rs:7:56\n     |\n\
    7    |     strings.iter().filter(|&x| x.contains(&substring)).collect()\n    \
    \ |                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n   \
    \  |\n     = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|s| s.contains(substring)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpuawanpo_.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpuawanpo_.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter()\n        .filter(|&x| x.contains(substring))\n       \
    \ .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpznq16e9j.rs:8:33\n     |\n8    |         .filter(|&x| x.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n8    |         .filter(|&x| x.contains(&substring))\n     |         \
    \                        +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpznq16e9j.rs:9:10\n\
    \     |\n9    |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 101
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for s in strings {\n        if substring.contains(&s)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"xxx\", \"xxx\"]`,\n right: `[\"xxx\", \"xxxAAA\", \"xxx\"]`', /tmp/tmpa4ummjhx.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpzor1nzxv.rs:9:46\n     |\n9    |         .filter_map(|string| string.contains(substring))\n\
    \     |                                     -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                     |\n     |\
    \                                     required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter_map(|string| string.contains(&substring))\n\
    \     |                                              +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzor1nzxv.rs:9:30\n  |\n9 |         .filter_map(|string|\
    \ string.contains(substring))\n  |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n9 |         .filter_map(|string| Some(string.contains(substring)))\n  |\
    \                              +++++                          +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|s| s.contains(substring)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpuawanpo_.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring)).collect()\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpuawanpo_.rs:7:54\n     |\n7    |     strings.iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \                   ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(s);\n     \
    \   }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp87pu5yof.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s|\n            s.contains(substring)\n\
    \                .map(|e| {\n                    let start = s.find(substring);\n\
    \                    let end = start + substring.length();\n                 \
    \   if end > s.len() {\n                        None\n                    } else\
    \ {\n                        Some(s.chars()\n                            .skip(start)\n\
    \                            .take(end - start)\n                            .collect::<String>())\n\
    \                    }\n                }))\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp7e3f8e_i.rs:10:24\n     |\n10   |             s.contains(substring)\n\
    \     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |               |\n     |               required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n10   |             s.contains(&substring)\n\
    \     |                        +\n\nerror[E0599]: `bool` is not an iterator\n\
    \  --> /tmp/tmp7e3f8e_i.rs:11:18\n   |\n11 |                 .map(|e| {\n   |\
    \                  ^^^ `bool` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `bool: Iterator`\n           which\
    \ is required by `&mut bool: Iterator`\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n    --> /tmp/tmp7e3f8e_i.rs:12:40\n     |\n12   | \
    \                    let start = s.find(substring);\n     |                  \
    \                 ---- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |                                   |\n     |                          \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::find`\nhelp: consider borrowing here\n\
    \     |\n12   |                     let start = s.find(&substring);\n     |  \
    \                                      +\n\nerror[E0599]: no method named `length`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp7e3f8e_i.rs:13:49\n\
    \   |\n13 |                     let end = start + substring.length();\n   |  \
    \                                               ^^^^^^ help: there is an associated\
    \ function with a similar name: `len"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring).unwrap_or_else(||\
    \ false))\n        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpg59024qd.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring).unwrap_or_else(||\
    \ false))\n     |                           -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                           |\n     |         \
    \                  required by a bound introduced by this call\n     |\n     =\
    \ note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring).unwrap_or_else(||\
    \ false))\n     |                                    +\n\nerror[E0599]: no method\
    \ named `unwrap_or_else` found for type `bool` in the current scope\n --> /tmp/tmpg59024qd.rs:9:47\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring).unwrap_or_else(|| false))\n\
    \  |                                               ^^^^^^^^^^^^^^ method not found\
    \ in `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut matches = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(substring) {\n            matches.push(string);\n        }\n\
    \    }\n    matches\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpgycepwzg.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(&substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpf59200id.rs:16:10\n     |\n\
    16   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpxty_zu15.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring))\n     |\
    \                                    +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpxty_zu15.rs:9:25\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `bool`\n  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\
    help: try wrapping the expression in `Some`\n  |\n9 |         .filter_map(|s|\
    \ Some(s.contains(substring)))\n  |                         +++++            \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    // First we collect all substrings\n    let mut substrings: Vec<String>\
    \ = Vec::new();\n    strings\n        .into_iter()\n        .filter(|s| s.contains(&substring))\n\
    \        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.contains(substring)).collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpr6shhykf.rs:7:47\n     |\n7    |     strings.into_iter().filter(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \   -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |\
    \                                      |\n     |                             \
    \         required by a bound introduced by this call\n     |\n     = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n7    |     strings.into_iter().filter(|s| s.contains(&substring)).collect()\n\
    \     |                                               +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|&s| s.contains(substring))\n\
    \        .cloned()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpyhinoxap.rs:9:33\n     |\n9    |         .filter(|&s| s.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|&s| s.contains(&substring))\n     |         \
    \                        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyhinoxap.rs:7:5\n\
    \   |\n6  |   fn filter_by_substring(strings: Vec<String>, substring: String)\
    \ -> Vec<String> {\n   |                                                     \
    \                 ----------- expected `Vec<String>` because of return type\n\
    7  | /     strings\n8  | |         .iter()\n9  | |         .filter(|&s| s.contains(substring))\n\
    10 | |         .cloned()\n   | |_________________^ expected struct `Vec`, found\
    \ struct `Cloned`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `Cloned<Filter<std::slice::Iter<'_, String>, [closure@/tmp/tmpyhinoxap.rs:9:17:\
    \ 9:43]>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut out = Vec::new();\n    for (i, s) in strings.iter().enumerate()\
    \ {\n        if s.contains(substring) {\n            out.push(i);\n        }\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpulgroap5.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpulgroap5.rs:13:5\n\
    \   |\n6  | fn filter_by_substring(strings: Vec<String>, substring: String) ->\
    \ Vec<String> {\n   |                                                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    13 |     out\n   |     ^^^ expected struct `String`, found `usize`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|string| string.contains(&substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp76mngdez.rs:10:10\n     |\n\
    10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpwosewtzm.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp0hcxna2f.rs:9:36\n     |\n9    |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n\
    \     |                           -------- ^^^^^^^^^ expected an implementor of\
    \ trait `Pattern<'_>`\n     |                           |\n     |            \
    \               required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing\
    \ here\n     |\n9    |         .filter_map(|s| s.contains(&substring).unwrap_or(false))\n\
    \     |                                    +\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `bool` in the current scope\n --> /tmp/tmp0hcxna2f.rs:9:47\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring).unwrap_or(false))\n  |\
    \                                               ^^^^^^^^^ method not found in\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    if strings.is_empty() {\n        return vec![];\n    }\n    let substring\
    \ = substring.to_lowercase();\n    let mut matched: Vec<String> = vec![];\n  \
    \  for s in strings {\n        if s.contains(&substring) {\n            matched.push(s);\n\
    \        }\n    }\n    matched\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter(|s| s.contains(substring))\n}\n\nfn main() {\n\
    \    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpv0cbfd8s.rs:7:42\n     |\n7    |     strings.iter().filter(|s| s.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n7    |     strings.iter().filter(|s| s.contains(&substring))\n\
    \     |                                          +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpv0cbfd8s.rs:7:5\n  |\n6 | fn filter_by_substring(strings:\
    \ Vec<String>, substring: String) -> Vec<String> {\n  |                      \
    \                                              ----------- expected `Vec<String>`\
    \ because of return type\n7 |     strings.iter().filter(|s| s.contains(substring))\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Filter`\n  |\n  = note: expected struct `Vec<String>`\n      \
    \       found struct `Filter<std::slice::Iter<'_, String>, [closure@/tmp/tmpv0cbfd8s.rs:7:27:\
    \ 7:52]>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|&x| x.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1xl11js6.rs:9:33\n     |\n9    |         .filter(|&x| x.contains(substring))\n\
    \     |                        -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                        |\n     |                     \
    \   required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|&x| x.contains(&substring))\n     |         \
    \                        +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmp1xl11js6.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| {\n        if let Ok(index) = s.find((substring.as_str(),\
    \ 0)) {\n            Some(s.split_at(index))\n        } else {\n            None\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `(&str, {integer})`\n\
    \    --> /tmp/tmp_sovx5pa.rs:8:35\n     |\n8    |         if let Ok(index) = s.find((substring.as_str(),\
    \ 0)) {\n     |                              ---- ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ an `FnMut<(char,)>` closure, found `(&str, {integer})`\n     |             \
    \                 |\n     |                              required by a bound introduced\
    \ by this call\n     |\n     = help: the trait `FnMut<(char,)>` is not implemented\
    \ for `(&str, {integer})`\n     = help: the following other types implement trait\
    \ `Pattern<'a>`:\n               &'b String\n               &'b [char; N]\n  \
    \             &'b [char]\n               &'b str\n               &'c &'b str\n\
    \               [char; N]\n               char\n               pattern::MultiCharEqPattern<C>\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `(&str, {integer})`\nnote: required by a bound in `core::str::<impl str>::find`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp_sovx5pa.rs:8:16\n  |\n8 |    \
    \     if let Ok(index) = s.find((substring.as_str(), 0)) {\n  |              \
    \  ^^^^^^^^^   ------------------------------- this expression has type `Option<usize>`\n\
    \  |                |\n  |                expected enum `Option`, found enum `Result`\n\
    \  |\n  = note: expected enum `Option<usize>`\n             found enum `Result<_,\
    \ _>`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `(&str, &str)`\n    --> /tmp/tmp_sovx5pa.rs:13:8\n   \
    \  |\n13   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=(&str, &str)>`\n     |\n    \
    \ = help: the trait `FromIterator<(&str, &str)>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut found = vec![];\n    for s in strings {\n        if !s.contains(substring)\
    \ {\n            continue;\n        }\n\n        found.push(s);\n    }\n\n   \
    \ found\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmppsd4iitf.rs:9:24\n     |\n9    |         if !s.contains(substring)\
    \ {\n     |               -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if !s.contains(&substring)\
    \ {\n     |                        +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = strings.clone();\n    for s in strings.iter()\
    \ {\n        if s.contains(substring) {\n            filtered_strings.remove(s);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmphx9ubbz5.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphx9ubbz5.rs:10:37\n\
    \   |\n10 |             filtered_strings.remove(s);\n   |                    \
    \                 ^ expected `usize`, found `&String`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|x| {\n            if x.contains(&substring)\
    \ {\n                Some(x)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmpguicol9d.rs:16:10\n     |\n\
    16   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .into_iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp2f_681cn.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if !s.contains(substring) {\n            continue;\n        }\n        filtered_strings.push(s);\n\
    \    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp75611o0h.rs:9:24\n     |\n9    |         if !s.contains(substring)\
    \ {\n     |               -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |               |\n     |               required by a bound\
    \ introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n     = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if !s.contains(&substring)\
    \ {\n     |                        +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpb3_ws50e.rs:10:27\n     |\n10   |             if s.contains(substring)\
    \ {\n     |                  -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                  |\n     |                  required by\
    \ a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n10   |             if\
    \ s.contains(&substring) {\n     |                           +\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n    --> /tmp/tmpb3_ws50e.rs:16:10\n     |\n16   |       \
    \  .collect()\n     |          ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=&String>`\n     |\n     = help: the trait `FromIterator<&String>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = vec![];\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpnz7mtn0l.rs:9:23\n     |\n9    |         if s.contains(substring)\
    \ {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |              |\n     |              required by a bound introduced by\
    \ this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n     = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         if s.contains(&substring)\
    \ {\n     |                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|string| string.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpirkfvx3l.rs:9:42\n     |\n9    |         .filter(|string| string.contains(substring))\n\
    \     |                                 -------- ^^^^^^^^^ expected an implementor\
    \ of trait `Pattern<'_>`\n     |                                 |\n     |   \
    \                              required by a bound introduced by this call\n \
    \    |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\n\
    help: consider borrowing here\n     |\n9    |         .filter(|string| string.contains(&substring))\n\
    \     |                                          +\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&String`\n\
    \    --> /tmp/tmpirkfvx3l.rs:10:10\n     |\n10   |         .collect()\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 0
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    // TODO: Find a better way of doing this\n    let mut filtered_strings\
    \ = vec![];\n    for s in strings {\n        if s.contains(&substring) {\n   \
    \         filtered_strings.push(s);\n        }\n    }\n    filtered_strings\n\
    }\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpf_fz1hp_.rs:9:32\n     |\n9    |         .filter(|s| s.contains(substring))\n\
    \     |                       -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n9    |         .filter(|s| s.contains(&substring))\n     |          \
    \                      +\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&String`\n    --> /tmp/tmpf_fz1hp_.rs:10:10\n\
    \     |\n10   |         .collect()\n     |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n     |\n     = help:\
    \ the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n   \
    \  = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result: Vec<String> = Vec::new();\n    for string in strings\
    \ {\n        if string.contains(substring) {\n            result.push(string);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp8it9fphb.rs:9:28\n     |\n9    |         if string.contains(substring)\
    \ {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                   |\n     |                   required\
    \ by a bound introduced by this call\n     |\n     = note: the trait bound `String:\
    \ Pattern<'_>` is not satisfied\n     = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl\
    \ str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring)\
    \ {\n     |                            +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976156
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings.iter().filter_map(|s| s.contains(substring)).collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpz7ji2vil.rs:7:46\n     |\n7    |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n     |                                   \
    \  -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     | \
    \                                    |\n     |                               \
    \      required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n\
    \     |\n7    |     strings.iter().filter_map(|s| s.contains(&substring)).collect()\n\
    \     |                                              +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpz7ji2vil.rs:7:35\n  |\n7 |     strings.iter().filter_map(|s|\
    \ s.contains(substring)).collect()\n  |                                   ^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |     strings.iter().filter_map(|s| Some(s.contains(substring))).collect()\n\
    \  |                                   +++++                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976155
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut string = String::from(\"\");\n    strings.sort_unstable_by_key(|s|\
    \ {\n        s.len()\n    });\n    for s in strings {\n        let index = s.find(substring);\n\
    \        if index == Some(0) {\n            continue;\n        }\n        string\
    \ = string.push_str(s).to_string();\n    }\n    let mut vector = Vec::new();\n\
    \    for s in strings.into_iter().rev() {\n        if string == s.to_string()\
    \ {\n            vector.push(s);\n        }\n    }\n    vector\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp1r6dux0d.rs:12:28\n     |\n12   |         let index = s.find(substring);\n\
    \     |                       ---- ^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n     |                       |\n     |                      \
    \ required by a bound introduced by this call\n     |\n     = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n     = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required\
    \ by a bound in `core::str::<impl str>::find`\nhelp: consider borrowing here\n\
    \     |\n12   |         let index = s.find(&substring);\n     |              \
    \              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1r6dux0d.rs:16:34\n\
    \   |\n16 |         string = string.push_str(s).to_string();\n   |           \
    \                       ^\n   |                                  |\n   |     \
    \                             expected `&str`, found struct `String`\n   |   \
    \                               help: consider borrowing here: `&s`\n\nerror[E0599]:\
    \ `()` doesn't implement `std::fmt::Display`\n  --> /tmp/tmp1r6dux0d.rs:16:37\n\
    \   |\n16 |         string = string.push_str(s).to_string();\n   |           \
    \                          ^^^^^^^^^ `()` cannot be formatted with the default\
    \ formatter\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `(): std::fmt::Display`\n           which is required by `(): ToString`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976156
