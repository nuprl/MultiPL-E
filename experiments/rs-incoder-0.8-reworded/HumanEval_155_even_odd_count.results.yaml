language: rs
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = 0;\n    let mut even = 0;\n    let mut odd = 0;\n\
    \    while num != 0 {\n        match num % 10 {\n            0 => { even++; },\n\
    \            1 => { odd++; },\n            _ => {},\n        }\n        count\
    \ += 1;\n        num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpun4ebwa_.rs:13:24\n\
    \   |\n13 |             0 => { even++; },\n   |                        ^^ not\
    \ a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n13 |       \
    \      0 => { { let tmp = even; even += 1; tmp }; },\n   |                   \
    \ +++++++++++     ~~~~~~~~~~~~~~~~~~\n13 -             0 => { even++; },\n13 +\
    \             0 => { even += 1; },\n   | \n\nerror: Rust has no postfix increment\
    \ operator\n  --> /tmp/tmpun4ebwa_.rs:14:23\n   |\n14 |             1 => { odd++;\
    \ },\n   |                       ^^ not a valid postfix operator\n   |\nhelp:\
    \ use `+= 1` instead\n   |\n14 |             1 => { { let tmp = odd; odd += 1;\
    \ tmp }; },\n   |                    +++++++++++    ~~~~~~~~~~~~~~~~~\n14 -  \
    \           1 => { odd++; },\n14 +             1 => { odd += 1; },\n   | \n\n\
    error: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut result: (isize, isize) = (1, 1);\n    let mut num: isize\
    \ = num;\n    while num > 0 {\n        if num % 2 == 0 {\n            result +=\
    \ (num, 1);\n        } else {\n            result += (num - 1, 2);\n        }\n\
    \        num /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `(isize, isize)`\n  --> /tmp/tmp3qysf03n.rs:12:13\n   |\n12 |             result\
    \ += (num, 1);\n   |             ------^^^^^^^^^^^^\n   |             |\n   |\
    \             cannot use `+=` on type `(isize, isize)`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `(isize, isize)`\n  -->\
    \ /tmp/tmp3qysf03n.rs:14:13\n   |\n14 |             result += (num - 1, 2);\n\
    \   |             ------^^^^^^^^^^^^^^^^\n   |             |\n   |           \
    \  cannot use `+=` on type `(isize, isize)`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num_even = 0;\n    let mut num_odd = 0;\n    for i in\
    \ num {\n        if i % 2 == 0 {\n            num_even += 1;\n        } else {\n\
    \            num_odd += 1;\n        }\n    }\n    (num_even, num_odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpbq90fm2p.rs:10:14\n\
    \   |\n10 |     for i in num {\n   |              ^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2 == 0, num % 3 == 0)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:6\n  |\n8 |\
    \     (num % 2 == 0, num % 3 == 0)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:20\n  |\n\
    8 |     (num % 2 == 0, num % 3 == 0)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_counter = 0;\n    let mut odd_counter = 0;\n\n  \
    \  let mut i = 1;\n    while i <= num {\n        if num % i == 0 {\n         \
    \   even_counter += 1;\n        } else {\n            odd_counter += 1;\n    \
    \    }\n        i += 1;\n    }\n    (even_counter, odd_counter)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(2, 5)`,\n right: `(0, 1)`', /tmp/tmpl_vpahn2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut n = 0;\n    let mut i = 0;\n\n    while n > 0 {\n    \
    \    if num % 2 == 0 {\n            i += 1;\n        }\n\n        n /= 2;\n  \
    \  }\n\n    (i, num)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 7)`,\n right: `(0, 1)`', /tmp/tmppmr95xrp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0 as isize;\n    let mut odd_count = 0 as\
    \ isize;\n    if num <= 0 {\n        (even_count, odd_count) = (0, 0);\n    }\
    \ else {\n        let mut digits = num.to_digits();\n        let mut remainder\
    \ = digits.next_back();\n        let mut last = 0;\n        let mut i = 0;\n \
    \       while i < digits.len() {\n            if remainder % 2 == 0 {\n      \
    \          even_count += 1;\n                i += 1;\n            } else {\n \
    \               odd_count += 1;\n                i += 1;\n            }\n    \
    \        last = remainder;\n            remainder = remainder / 10;\n        }\n\
    \    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp79kvxz65.rs:13:30\n   |\n13 |         let mut digits\
    \ = num.to_digits();\n   |                              ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // first check if number is negative\n    if num < 0 {\n     \
    \   return (num, 0, 1);\n    }\n\n    let mut counts = vec![];\n\n    let mut\
    \ odd = 1;\n    let mut even = 1;\n\n    for i in 2..=num {\n        if i % 2\
    \ == 1 {\n            odd += 1;\n        } else {\n            even += 1;\n  \
    \      }\n        counts.push(odd.clone(), even.clone());\n    }\n\n    (odd.clone(),\
    \ even.clone())\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryg_aicc.rs:10:16\n   |\n\
    7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \                 -------------- expected `(isize, isize)` because of return type\n\
    ...\n10 |         return (num, 0, 1);\n   |                ^^^^^^^^^^^ expected\
    \ a tuple with 2 elements, found one with 3 elements\n   |\n   = note: expected\
    \ tuple `(isize, isize)`\n              found tuple `(isize, isize, {integer})`\n\
    \nerror[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpryg_aicc.rs:24:16\n     |\n24   |         counts.push(odd.clone(),\
    \ even.clone());\n     |                ^^^^ -----------  ------------ supplied\
    \ 2 arguments\n     |                |\n     |                expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n\n    let mut num: i32\
    \ = num;\n    while num > 0 {\n        num -= 10;\n        even += 1;\n    }\n\
    \    while num > 0 {\n        num -= 1;\n        odd += 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprmjdf0y9.rs:11:24\n   |\n\
    11 |     let mut num: i32 = num;\n   |                  ---   ^^^ expected `i32`,\
    \ found `isize`\n   |                  |\n   |                  expected due to\
    \ this\n   |\nhelp: you can convert an `isize` to an `i32` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     let mut num: i32 = num.try_into().unwrap();\n\
    \   |                           ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        return (num, 0);\n    }\n    if num < 10\
    \ {\n        return (num, 0);\n    }\n    let mut count = 0;\n    let mut nums\
    \ = String::from(\"1\");\n    let mut num = num;\n    while num < 10 {\n     \
    \   if num % 2 == 0 {\n            count++;\n        }\n        nums.push_str(&num.to_string());\n\
    \        num /= 10;\n    }\n    (count, nums.len())\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp2h9g3vlx.rs:19:18\n\
    \   |\n19 |             count++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n19 |             { let tmp =\
    \ count; count += 1; tmp };\n   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    19 -             count++;\n19 +             count += 1;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2h9g3vlx.rs:24:13\n   |\n24 |     (count, nums.len())\n\
    \   |             ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |     (count, nums.len().try_into().unwrap())\n   |          \
    \             ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut n = 0;\n    let mut odd = 0;\n    while num > 0 {\n  \
    \      match num % 10 {\n            0 => {},\n            _ => {\n          \
    \      n += 1;\n                if num / 10 == 0 {\n                    odd +=\
    \ 1;\n                }\n            }\n        }\n        num = num / 10;\n \
    \   }\n    (n, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n \
    \   assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpewk5dy9u.rs:20:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n20 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0;\n    loop {\n        if num % 2 ==\
    \ 0 {\n            even = even+1;\n        }\n        else {\n            odd\
    \ = odd+1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp_w8cghya.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 1;\n    let mut even = 1;\n    for c in &num {\n\
    \        if c == '0' {\n            even += 1;\n        } else if c == '1' {\n\
    \            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n  --> /tmp/tmp6nipnh9v.rs:10:14\n\
    \   |\n10 |     for c in &num {\n   |              ^^^^ `&isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `&isize`\n   = note:\
    \ required because of the requirements on the impl of `IntoIterator` for `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = (0, 0);\n\n    for n in num.iter() {\n       \
    \ count = if n % 2 == 0 {\n            (count[0] + 1, count[1] + 1)\n        }\
    \ else {\n            (count[0], count[1] + 1)\n        };\n    }\n\n    count\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpged7j4du.rs:10:18\n   |\n10 |     for n in num.iter() {\n\
    \   |                  ^^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `({integer}, {integer})`\n  --> /tmp/tmpged7j4du.rs:12:14\n\
    \   |\n12 |             (count[0] + 1, count[1] + 1)\n   |              ^^^^^^^^\
    \ help: to access tuple elements, use: `count.0`\n\nerror[E0608]: cannot index\
    \ into a value of type `({integer}, {integer})`\n  --> /tmp/tmpged7j4du.rs:12:28\n\
    \   |\n12 |             (count[0] + 1, count[1] + 1)\n   |                   \
    \         ^^^^^^^^ help: to access tuple elements, use: `count.1`\n\nerror[E0608]:\
    \ cannot index into a value of type `({integer}, {integer})`\n  --> /tmp/tmpged7j4du.rs:14:14\n\
    \   |\n14 |             (count[0], count[1] + 1)\n   |              ^^^^^^^^ help:\
    \ to access tuple elements, use: `count.0`\n\nerror[E0608]: cannot index into\
    \ a value of type `({integer}, {integer})`\n  --> /tmp/tmpged7j4du.rs:14:24\n\
    \   |\n14 |             (count[0], count[1] + 1)\n   |                       \
    \ ^^^^^^^^ help: to access tuple elements, use: `count.1`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num % 2 == 0 {\n        (num / 2, num / 2)\n    } else {\n\
    \        (num / 2, num / 2 + 1)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 4)`,\n right: `(0, 1)`', /tmp/tmp48ak8m5b.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 1;\n    let mut even = 1;\n\n    while num > 0 {\n\
    \        if num % 2 != 0 {\n            even *= num % 2;\n        }\n        num\
    \ /= 2;\n    }\n\n    while num != 0 {\n        if num % 2 == 0 {\n          \
    \  odd *= num % 2;\n        }\n        num /= 2;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp2c152hxm.rs:15:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp2c152hxm.rs:22:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n22 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n\n    for i in num.digits().clone()\
    \ {\n        if i % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpajncx5v6.rs:11:18\n   |\n11 |     for i in num.digits().clone()\
    \ {\n   |                  ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2 == 0, num % 3 == 0)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:6\n  |\n8 |\
    \     (num % 2 == 0, num % 3 == 0)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:20\n  |\n\
    8 |     (num % 2 == 0, num % 3 == 0)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0;\n    for d in num.digits() {\n    \
    \    if d % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp3a9lirll.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 1;\n    let mut even = 1;\n    while num >= 0 {\n\
    \        let digit = num % 10;\n        if digit > 0 {\n            even *= digit;\n\
    \        } else {\n            odd *= digit;\n        }\n        num /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpkmdegrft.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (even_odd_count(-num).1, even_odd_count(-num).0)\n\
    \    } else {\n        ((num % 2) * 2, (num / 2) * 2)\n    }\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(2, 6)`,\n right: `(0, 1)`', /tmp/tmplgm3cn3g.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num_even = 0, num_odd = 0;\n    for n in num.abs() {\n\
    \        if n % 2 == 0 {\n            num_even += 1;\n        } else {\n     \
    \       num_odd += 1;\n        }\n    }\n    (num_even, num_odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpusnfplvo.rs:8:25\n  |\n8 |     let mut num_even = 0, num_odd = 0;\n\
    \  |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmpkljq_wh7.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    while num != 0 {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        num = (num / 2);\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp_x7w10bj.rs:16:15\n\
    \   |\n16 |         num = (num / 2);\n   |               ^       ^\n   |\n   =\
    \ note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n16 -         num = (num / 2);\n16 +         num = num / 2;\n   | \n\nerror[E0384]:\
    \ cannot assign to immutable argument `num`\n  --> /tmp/tmp_x7w10bj.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num = (num / 2);\n   |         ^^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd: isize = 0;\n    let mut even: isize = 0;\n\n    for\
    \ d in num.digits().filter(|c| c % 2 == 0) {\n        even += 1;\n    }\n    for\
    \ d in num.digits().filter(|c| c % 2 != 0) {\n        odd += 1;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6vi9ybc7.rs:11:18\n   |\n11 |     for d in num.digits().filter(|c|\
    \ c % 2 == 0) {\n   |                  ^^^^^^ method not found in `isize`\n\n\
    error[E0599]: no method named `digits` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp6vi9ybc7.rs:14:18\n   |\n14 |     for d in num.digits().filter(|c|\
    \ c % 2 != 0) {\n   |                  ^^^^^^ method not found in `isize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 0;\n    let mut odds = 0;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            evens\
    \ += 1;\n        } else {\n            odds += 1;\n        }\n        num /= 10;\n\
    \    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp329pck89.rs:17:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n17 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num: isize = num;\n    let mut odd_digit_count: isize\
    \ = 0;\n    let mut even_digit_count: isize = 0;\n    while num > 0 {\n      \
    \  let mut digit = num % 10;\n        odd_digit_count += digit % 2 == 1;\n   \
    \     even_digit_count += digit % 2 == 0;\n        num /= 10;\n    }\n    (even_digit_count,\
    \ odd_digit_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `isize`\n  --> /tmp/tmp5j875tt1.rs:13:25\n\
    \   |\n13 |         odd_digit_count += digit % 2 == 1;\n   |                 \
    \        ^^ no implementation for `isize += bool`\n   |\n   = help: the trait\
    \ `AddAssign<bool>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `bool` to `isize`\n  --> /tmp/tmp5j875tt1.rs:14:26\n   |\n14 |         even_digit_count\
    \ += digit % 2 == 0;\n   |                          ^^ no implementation for `isize\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        panic!(\"Negative numbers are not supported.\"\
    );\n    }\n\n    let mut count = 0;\n    let mut odd = num % 2;\n    for i in\
    \ num.divs(&mut odd) {\n        count += 1;\n    }\n    (count, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `divs` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp2bqj12fw.rs:14:18\n   |\n14 |     for i in num.divs(&mut\
    \ odd) {\n   |                  ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = (0, 0);\n    let mut digit = 0;\n    while num\
    \ > 0 {\n        digit = num % 10;\n        num = num / 10;\n        if digit\
    \ % 2 == 0 {\n            count += (1, 0);\n        } else {\n            count\
    \ += (0, 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `({integer}, {integer})`\n  --> /tmp/tmpxvtspbsl.rs:14:13\n   |\n14 |      \
    \       count += (1, 0);\n   |             -----^^^^^^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `({integer}, {integer})`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `({integer}, {integer})`\n\
    \  --> /tmp/tmpxvtspbsl.rs:16:13\n   |\n16 |             count += (0, 1);\n  \
    \ |             -----^^^^^^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `({integer}, {integer})`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num > 0);\n    let mut even_count = even_count(num);\n\
    \    let mut odd_count = odd_count(num);\n    if even_count > odd_count {\n  \
    \      (even_count, odd_count)\n    } else {\n        (odd_count, even_count)\n\
    \    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `even_count` in this scope\n --> /tmp/tmpl0djocy1.rs:9:26\n\
    \  |\n9 |     let mut even_count = even_count(num);\n  |                     \
    \     ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `odd_count` in this scope\n  --> /tmp/tmpl0djocy1.rs:10:25\n   |\n10 |     let\
    \ mut odd_count = odd_count(num);\n   |                         ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ = even + 1;\n        } else {\n            odd = odd + 1;\n        }\n     \
    \   num = num / 10;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpvcua67rj.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let digit = num % 10;\n    if digit % 2 == 0 {\n        (digit\
    \ / 2, 1)\n    } else {\n        (digit / 2, 0)\n    }\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 0)`,\n right: `(0, 1)`', /tmp/tmp5a6v1vu3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = (num / 10_isize).floor() as isize;\n    let remain\
    \ = num % 10_isize;\n    if remain == 0 {\n        count = count+1;\n    }\n \
    \   (count, remain)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n \
    \   assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpxsqj0dem.rs:8:38\n  |\n8 |     let mut count = (num / 10_isize).floor()\
    \ as isize;\n  |                                      ^^^^^ help: there is an\
    \ associated function with a similar name: `div_floor`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut nums = num.to_digits();\n    (\n        nums[nums.len()\
    \ - 1] % 2 != 0,\n        nums[nums.len() - 1] / 2 as isize,\n    )\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpv1uona9u.rs:8:24\n  |\n8 |     let mut nums = num.to_digits();\n\
    \  |                        ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv1uona9u.rs:10:9\n   |\n10 |         nums[nums.len()\
    \ - 1] % 2 != 0,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut sum = 0;\n    let mut even = 0;\n    let mut odd = 0;\n\
    \n    while num != 0 {\n        sum += num % 10;\n        num /= 10;\n       \
    \ if num % 2 == 0 {\n            even = even + 1;\n        }\n        else {\n\
    \            odd = odd + 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `sum` is assigned to, but never used\n --> /tmp/tmpav3mi9lv.rs:8:13\n\
    \  |\n8 |     let mut sum = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_sum` instead\n\nerror[E0384]: cannot\
    \ assign to immutable argument `num`\n  --> /tmp/tmpav3mi9lv.rs:14:9\n   |\n7\
    \  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \  --- help: consider making this binding mutable: `mut num`\n...\n14 |      \
    \   num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num > 0);\n    if num < 0 {\n        (num, -num)\n   \
    \ } else {\n        (\n            (num as f64).truncate_from_mantissa(64) as\
    \ isize,\n            (num as f64).truncate_from_mantissa(64 + 1) as isize,\n\
    \        )\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n   \
    \ assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `truncate_from_mantissa` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmpltqyg9v7.rs:13:26\n   |\n13 |          \
    \   (num as f64).truncate_from_mantissa(64) as isize,\n   |                  \
    \        ^^^^^^^^^^^^^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]: no\
    \ method named `truncate_from_mantissa` found for type `f64` in the current scope\n\
    \  --> /tmp/tmpltqyg9v7.rs:14:26\n   |\n14 |             (num as f64).truncate_from_mantissa(64\
    \ + 1) as isize,\n   |                          ^^^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = num / 2;\n    let mut odd = num % 2;\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmpmme8337x.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!((num % 2) == 0);\n    assert!(num <= i64::MAX);\n    let\
    \ mut odd_digits: isize = 0;\n    let mut even_digits: isize = 0;\n    for i in\
    \ num {\n        if i % 2 == 0 {\n            even_digits += 1;\n        } else\
    \ {\n            odd_digits += 1;\n        }\n    }\n    (even_digits, odd_digits)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8dv9r58x.rs:9:20\n  |\n9 |\
    \     assert!(num <= i64::MAX);\n  |                    ^^^^^^^^ expected `isize`,\
    \ found `i64`\n  |\nhelp: you can convert an `i64` to an `isize` and panic if\
    \ the converted value doesn't fit\n  |\n9 |     assert!(num <= i64::MAX.try_into().unwrap());\n\
    \  |                            ++++++++++++++++++++\n\nerror[E0277]: `isize`\
    \ is not an iterator\n  --> /tmp/tmp8dv9r58x.rs:12:14\n   |\n12 |     for i in\
    \ num {\n   |              ^^^ `isize` is not an iterator\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `isize`\n   = note: if you want to iterate\
    \ between `start` until a value `end`, use the exclusive range syntax `start..end`\
    \ or the inclusive range syntax `start..=end`\n   = note: required because of\
    \ the requirements on the impl of `IntoIterator` for `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    debug_assert!(num > 0);\n    let mut even = 0, odd = 0, digit\
    \ = 0;\n    for d in num {\n        if d % 2 == 0 {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n        digit += 1;\n   \
    \ }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmprby_d3pg.rs:9:21\n  |\n9 |     let mut even = 0, odd = 0, digit\
    \ = 0;\n  |                     ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let\
    \ mut remainder = num;\n\n    while remainder > 0 {\n        let remainder: isize\
    \ = remainder % 10;\n        remainder /= 10;\n        if remainder % 2 == 0 {\n\
    \            even += 1;\n        } else {\n            odd += 1;\n        }\n\
    \    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpmx5rd5ie.rs:10:9\n\
    \   |\n10 |     let mut remainder = num;\n   |         ----^^^^^^^^^\n   |   \
    \      |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign twice to immutable variable `remainder`\n\
    \  --> /tmp/tmpmx5rd5ie.rs:14:9\n   |\n13 |         let remainder: isize = remainder\
    \ % 10;\n   |             ---------\n   |             |\n   |             first\
    \ assignment to `remainder`\n   |             help: consider making this binding\
    \ mutable: `mut remainder`\n14 |         remainder /= 10;\n   |         ^^^^^^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num >= 0);\n    let mut even_digit_count = 0i32;\n   \
    \ let mut odd_digit_count = 0i32;\n    for n in num.digits() {\n        if n %\
    \ 2 == 0 {\n            even_digit_count += 1;\n        } else {\n           \
    \ odd_digit_count += 1;\n        }\n    }\n    (even_digit_count, odd_digit_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5c4okzc9.rs:11:18\n   |\n11 |     for n in num.digits()\
    \ {\n   |                  ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5c4okzc9.rs:18:6\n   |\n18 |     (even_digit_count,\
    \ odd_digit_count)\n   |      ^^^^^^^^^^^^^^^^ expected `isize`, found `i32`\n\
    \   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n18 |     (even_digit_count.try_into().unwrap(), odd_digit_count)\n\
    \   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5c4okzc9.rs:18:24\n   |\n18 |     (even_digit_count, odd_digit_count)\n\
    \   |                        ^^^^^^^^^^^^^^^ expected `isize`, found `i32`\n \
    \  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n18 |     (even_digit_count, odd_digit_count.try_into().unwrap())\n\
    \   |                                       ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits != 0 {\n        if digits % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        digits /=\
    \ 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 0)`', /tmp/tmp_vc74yf7.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // Use a variable to store the result of odd/even check and then\
    \ return the value.\n    let mut num_odd = num;\n    let mut num_even = num;\n\
    \    while num_odd % 2 == 0 {\n        num_odd /= 2;\n    }\n    while num_even\
    \ % 2 == 0 {\n        num_even /= 2;\n    }\n    (num_even, num_odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmp2610l99y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (0, num)\n    } else {\n        (num % 2\
    \ == 0, (num >> 1).clone())\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp80hym71p.rs:11:10\n   |\n\
    11 |         (num % 2 == 0, (num >> 1).clone())\n   |          ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (num * -1, 0)\n    } else {\n        (num\
    \ / 2, num % 2)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmp5b_akkck.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut nums = num.to_digits();\n    let mut evens = 0;\n    let\
    \ mut odds = 0;\n    while let Some(digit) = nums.pop() {\n        if digit %\
    \ 2 == 0 {\n            evens += 1;\n        } else {\n            odds += 1;\n\
    \        }\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp9wca2y83.rs:8:24\n  |\n8 |     let mut nums = num.to_digits();\n\
    \  |                        ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2 == 0, num % 3 == 0)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:6\n  |\n8 |\
    \     (num % 2 == 0, num % 3 == 0)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:20\n  |\n\
    8 |     (num % 2 == 0, num % 3 == 0)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num >= 0);\n    let mut odd = 0;\n    let mut even = 0;\n\
    \    let mut tens = num / 10;\n    while tens != 0 {\n        if num % 10 == 0\
    \ {\n            even += 1;\n        } else {\n            odd += 1;\n       \
    \ }\n        num /= 10;\n        tens = num / 10;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpritbj2ob.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = 0;\n    let mut odd = false;\n    for i in num.to_str()\
    \ {\n        if i % 2 == 0 {\n            count++;\n            if i != 0 {\n\
    \                odd = true;\n            }\n        } else {\n            odd\
    \ = false;\n        }\n    }\n    (count, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp_ygugezb.rs:12:18\n\
    \   |\n12 |             count++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n12 |             { let tmp =\
    \ count; count += 1; tmp };\n   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    12 -             count++;\n12 +             count += 1;\n   | \n\nerror[E0599]:\
    \ no method named `to_str` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp_ygugezb.rs:10:18\n   |\n10 |     for i in num.to_str() {\n   |    \
    \              ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_ygugezb.rs:20:13\n   |\n20 |     (count, odd)\n   |  \
    \           ^^^ expected `isize`, found `bool`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (even_odd_count(-num), even_odd_count(-num))\n\
    \    } else {\n        (even_odd_count(num % 10), even_odd_count(num % 10))\n\
    \    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1nj5xhpt.rs:9:10\n  |\n9 |\
    \         (even_odd_count(-num), even_odd_count(-num))\n  |          ^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1nj5xhpt.rs:9:32\n\
    \  |\n9 |         (even_odd_count(-num), even_odd_count(-num))\n  |          \
    \                      ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n  |\n\
    \  = note: expected type `isize`\n            found tuple `(isize, isize)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1nj5xhpt.rs:11:10\n   |\n11 |  \
    \       (even_odd_count(num % 10), even_odd_count(num % 10))\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n    \
    \         found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1nj5xhpt.rs:11:36\n   |\n11 |         (even_odd_count(num % 10), even_odd_count(num\
    \ % 10))\n   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found\
    \ tuple `(isize, isize)`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 0, odds = 0, remainder = num;\n    while remainder\
    \ > 0 {\n        let mut temp = remainder;\n        remainder = remain.mod_u128();\n\
    \        if remainder % 2 == 0 {\n            evens += 1;\n        }\n       \
    \ else {\n            odds += 1;\n        }\n    }\n    (evens, odds)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp8xbth_t1.rs:8:22\n  |\n8 |     let mut evens = 0, odds = 0, remainder\
    \ = num;\n  |                      ^ expected one of `.`, `;`, `?`, `else`, or\
    \ an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2, num % 3 as isize)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 1)`,\n right: `(0, 1)`', /tmp/tmpfgv4qj8r.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_digit = 0;\n    let mut odd_digit = 0;\n\n    for\
    \ i in num.digits() {\n        if i % 2 == 0 {\n            even_digit += 1;\n\
    \        } else {\n            odd_digit += 1;\n        }\n    }\n\n    (even_digit,\
    \ odd_digit)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp9wxqli3q.rs:11:18\n   |\n11 |     for i in num.digits()\
    \ {\n   |                  ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // Calculate the number of digits (including minus sign)\n   \
    \ let mut count = (num as f64).trunc().log10() as isize;\n\n    if count <= 0\
    \ {\n        return (0, 0);\n    }\n\n    // Count the number of even digits\n\
    \    let mut even = 0;\n    while count % 2 == 0 {\n        count /= 2;\n    \
    \    even += 1;\n    }\n\n    // Count the number of odd digits\n    let mut odd\
    \ = 0;\n    while count % 2 != 0 {\n        count /= 2;\n        odd += 1;\n \
    \   }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpkgtcsr3u.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 0;\n    let mut odds = 0;\n    while num > 0 {\n\
    \        evens += (num % 2) as isize;\n        odds += (num - evens as isize)\
    \ as isize;\n        num /= 2;\n    }\n    (evens, odds)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp2fmiuqbm.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for i\
    \ in num {\n        if i % 2 == 0 {\n            even_count += 1;\n        } else\
    \ if i % 2 == 1 {\n            odd_count += 1;\n        }\n    }\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmp_w_mh5zh.rs:10:14\n\
    \   |\n10 |     for i in num {\n   |              ^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd: isize = 0;\n    let mut even: isize = 0;\n    for\
    \ i in 0..num {\n        if i % 2 == 1 {\n            even = even * 10 + i as\
    \ isize;\n        } else {\n            odd = odd * 10 + i as isize;\n       \
    \ }\n    }\n    (odd, even)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(246, 135)`,\n right: `(0, 1)`', /tmp/tmpjrn5dly4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (num as usize, 0)\n    } else {\n      \
    \  (num / 2, num % 2 as usize)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsrw8xd3a.rs:9:10\n  |\n9 |\
    \         (num as usize, 0)\n  |          ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n9 |         ((num as usize).try_into().unwrap(),\
    \ 0)\n  |          +            +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsrw8xd3a.rs:11:25\n   |\n11 |         (num / 2, num % 2\
    \ as usize)\n   |                         ^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmpsrw8xd3a.rs:11:23\n\
    \   |\n11 |         (num / 2, num % 2 as usize)\n   |                       ^\
    \ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // Find how many times each digit is repeated\n    let mut counters\
    \ = [0; 10];\n    for x in num {\n        counters[x % 10] += 1;\n    }\n\n  \
    \  // Find the even and odd numbers\n    let even: isize = 0;\n    let odd: isize\
    \ = 1;\n    for i in 0..10 {\n        if counters[i] > 0 && counters[i] != 0 {\n\
    \            even *= 10;\n            even += i;\n        } else {\n         \
    \   odd *= 10;\n            odd += i;\n        }\n    }\n\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpnlhfvfct.rs:10:14\n\
    \   |\n10 |     for x in num {\n   |              ^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnlhfvfct.rs:20:21\n\
    \   |\n20 |             even += i;\n   |                     ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpnlhfvfct.rs:20:18\n\
    \   |\n20 |             even += i;\n   |                  ^^ no implementation\
    \ for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnlhfvfct.rs:23:20\n\
    \   |\n23 |             odd += i;\n   |                    ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpnlhfvfct.rs:23:17\n\
    \   |\n23 |             odd += i;\n   |                 ^^ no implementation for\
    \ `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 0;\n    let mut odds = 0;\n    let mut count =\
    \ 1;\n    while count < num {\n        if num % 10 == 0 {\n            evens +=\
    \ 1;\n            count += 1;\n        } else if num % 10 != 0 {\n           \
    \ odds += 1;\n            count += 1;\n        }\n    }\n    (evens, odds)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 6)`,\n right: `(0, 1)`', /tmp/tmpvlw6rhbs.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 1;\n    let mut even = 1;\n\n    for i in num.digits()\
    \ - 1 {\n        if i.is_odd() {\n            odd += 1;\n        } else {\n  \
    \          even += 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmphc6pq0dx.rs:11:18\n   |\n11 |     for i in num.digits()\
    \ - 1 {\n   |                  ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    debug_assert!(num >= 0);\n\n    let mut even = num % 2 == 0;\n\
    \    let mut odd = !even;\n\n    if even == true {\n        even = 0;\n    }\n\
    \n    if even == true {\n        even = 1;\n    }\n\n    if odd == false {\n \
    \       odd = 0;\n    }\n\n    if odd == true {\n        odd = 1;\n    }\n\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2s8sje90.rs:14:16\n   |\n\
    10 |     let mut even = num % 2 == 0;\n   |                    ------------ expected\
    \ due to this value\n...\n14 |         even = 0;\n   |                ^ expected\
    \ `bool`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2s8sje90.rs:18:16\n\
    \   |\n10 |     let mut even = num % 2 == 0;\n   |                    ------------\
    \ expected due to this value\n...\n18 |         even = 1;\n   |              \
    \  ^ expected `bool`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2s8sje90.rs:22:15\n\
    \   |\n11 |     let mut odd = !even;\n   |                   ----- expected due\
    \ to this value\n...\n22 |         odd = 0;\n   |               ^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2s8sje90.rs:26:15\n\
    \   |\n11 |     let mut odd = !even;\n   |                   ----- expected due\
    \ to this value\n...\n26 |         odd = 1;\n   |               ^ expected `bool`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2s8sje90.rs:29:6\n\
    \   |\n29 |     (even, odd)\n   |      ^^^^ expected `isize`, found `bool`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp2s8sje90.rs:29:12\n   |\n29 |  \
    \   (even, odd)\n   |            ^^^ expected `isize`, found `bool`\n\nerror:\
    \ aborting due to 6 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num_even_digits = 0;\n    let mut num_odd_digits = 0;\n\
    \    for digit in num.digits() {\n        if digit % 2 == 0 {\n            num_even_digits\
    \ += 1;\n        } else {\n            num_odd_digits += 1;\n        }\n    }\n\
    \    (num_even_digits, num_odd_digits)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmprouwk5ek.rs:10:22\n   |\n10 |     for digit in num.digits()\
    \ {\n   |                      ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num as usize).to_digits(10).filter_map(|x| x.is_odd()).count();\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `usize` in the\
    \ current scope\n --> /tmp/tmpmqvnjvol.rs:8:20\n  |\n8 |     (num as usize).to_digits(10).filter_map(|x|\
    \ x.is_odd()).count();\n  |                    ^^^^^^^^^ method not found in `usize`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpmqvnjvol.rs:7:34\n  |\n7 | fn even_odd_count(num:\
    \ isize) -> (isize, isize) {\n  |    --------------                ^^^^^^^^^^^^^^\
    \ expected tuple, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n  |\n  = note:  expected tuple `(isize,\
    \ isize)`\n          found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even, odd: isize = (1, 1);\n    for &n in &num {\n   \
    \     if n % 2 == 0 {\n            even += 1;\n        }\n        if n % 2 ==\
    \ 1 {\n            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n --> /tmp/tmpcw4ocglj.rs:8:17\n  |\n\
    8 |     let mut even, odd: isize = (1, 1);\n  |                 ^\n  |\nhelp:\
    \ try adding parentheses to match on a tuple\n  |\n8 |     let (mut even, odd):\
    \ isize = (1, 1);\n  |         +             +\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (\n        (num >> 4).count(|n| n % 2 == 0),\n        (num >>\
    \ 1).count(|n| n % 2 == 0),\n    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n --> /tmp/tmp5n8r623_.rs:9:20\n\
    \  |\n9 |         (num >> 4).count(|n| n % 2 == 0),\n  |                    ^^^^^\
    \ `isize` is not an iterator\n  |\n  = note: the following trait bounds were not\
    \ satisfied:\n          `isize: Iterator`\n          which is required by `&mut\
    \ isize: Iterator`\n\nerror[E0599]: `isize` is not an iterator\n  --> /tmp/tmp5n8r623_.rs:10:20\n\
    \   |\n10 |         (num >> 1).count(|n| n % 2 == 0),\n   |                  \
    \  ^^^^^ `isize` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `isize: Iterator`\n           which is required\
    \ by `&mut isize: Iterator`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut num = 0;\n\
    \    let mut max: isize = 0;\n    while num != 0 {\n        max = num;\n     \
    \   even = even * 10 + num % 10;\n        odd = odd * 10 + num % 10;\n       \
    \ num = num / 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmp3tpkyvoc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 10, num / 10).ok_or(ErrorKind::OddAndEvenCountError)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmpg9tlx1py.rs:8:32\n  |\n8 |     (num % 10, num / 10).ok_or(ErrorKind::OddAndEvenCountError)\n\
    \  |                                ^^^^^^^^^ use of undeclared type `ErrorKind`\n\
    \nerror[E0599]: no method named `ok_or` found for tuple `(isize, isize)` in the\
    \ current scope\n --> /tmp/tmpg9tlx1py.rs:8:26\n  |\n8 |     (num % 10, num /\
    \ 10).ok_or(ErrorKind::OddAndEvenCountError)\n  |                          ^^^^^\
    \ method not found in `(isize, isize)`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (even_odd_count(-num), even_odd_count(-num))\n\
    \    } else {\n        let mut even_cnt = 0;\n        let mut odd_cnt = 0;\n \
    \       for i in 0..=num {\n            if i % 2 == 0 {\n                even_cnt\
    \ += 1;\n            } else {\n                odd_cnt += 1;\n            }\n\
    \        }\n        (even_cnt, odd_cnt)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpztwfqv2x.rs:9:10\n  |\n9 |\
    \         (even_odd_count(-num), even_odd_count(-num))\n  |          ^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpztwfqv2x.rs:9:32\n\
    \  |\n9 |         (even_odd_count(-num), even_odd_count(-num))\n  |          \
    \                      ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n  |\n\
    \  = note: expected type `isize`\n            found tuple `(isize, isize)`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // Even digits:\n    let mut even = num;\n    let mut odd = num;\n\
    \    while even % 2 == 0 {\n        even /= 2;\n        odd++;\n    }\n    //\
    \ Odd digits:\n    while odd % 2 == 1 {\n        odd /= 2;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpjt1ctxjd.rs:13:12\n\
    \   |\n13 |         odd++;\n   |            ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n13 |         { let tmp = odd; odd += 1;\
    \ tmp };\n   |         +++++++++++    ~~~~~~~~~~~~~~~~~\n13 -         odd++;\n\
    13 +         odd += 1;\n   | \n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in 0..(num\
    \ / 10) {\n        if num % 10 == 0 {\n            even = even + 1;\n        }\n\
    \        else {\n            odd = odd + 1;\n        }\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(0, 1)`', /tmp/tmpix6n81zs.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num, num / 2) if num % 2 == 0\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found keyword\
    \ `if`\n --> /tmp/tmpoayeakn2.rs:8:20\n  |\n8 |     (num, num / 2) if num % 2\
    \ == 0\n  |                    ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 1;\n    let mut remain = num;\n    while\
    \ remain > 0 {\n        if remain % 2 == 0 {\n            even += 1;\n       \
    \ } else {\n            odd += 1;\n        }\n        remain /= 10;\n    }\n \
    \   (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp82hfivqt.rs:8:21\n  |\n8 |     let mut even = 0, odd = 1;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // The number is negative, so we get 0 even-odd digits for it.\n\
    \    // If the number is positive, then we get the negative number's number of\
    \ even-odd digits.\n    let (even, odd) = if num < 0 {\n        (num % 10, num\
    \ % 10)\n    } else {\n        (num % 10, num % 10)\n    };\n\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmpp381mm8i.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        return (num, 0)\n    }\n\n    let mut evens\
    \ = 0;\n    let mut odds = 0;\n    while num > 0 {\n        let mut temp = num\
    \ % 10;\n        if temp % 2 == 0 {\n            evens += 1;\n        } else {\n\
    \            odds += 1;\n        }\n        num = num / 10;\n    }\n    (evens,\
    \ odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpxcu_kvbh.rs:15:13\n\
    \   |\n15 |         let mut temp = num % 10;\n   |             ----^^^^\n   |\
    \             |\n   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `num`\n \
    \ --> /tmp/tmpxcu_kvbh.rs:21:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n   |                   --- help: consider making this binding mutable:\
    \ `mut num`\n...\n21 |         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 1;\n    let mut even = 1;\n    while num > 0 {\n\
    \        odd += num & 1 != 0;\n        even += num & 1 == 0;\n        num >>=\
    \ 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmprsd8ubtj.rs:11:13\n\
    \   |\n11 |         odd += num & 1 != 0;\n   |             ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmprsd8ubtj.rs:12:14\n   |\n12 |         even += num & 1 == 0;\n \
    \  |              ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = num / 2;\n    let mut odd = num % 2;\n\n    if\
    \ even % 2 == 0 {\n        even = even * 2;\n        odd++;\n    }\n\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpxcrho_id.rs:13:12\n\
    \   |\n13 |         odd++;\n   |            ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n13 |         { let tmp = odd; odd += 1;\
    \ tmp };\n   |         +++++++++++    ~~~~~~~~~~~~~~~~~\n13 -         odd++;\n\
    13 +         odd += 1;\n   | \n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let num = num % 10;\n    let even = num as i32 / 2;\n    let odd\
    \ = num % 2;\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplzqrcmm5.rs:11:6\n   |\n\
    11 |     (even, odd)\n   |      ^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     (even.try_into().unwrap(), odd)\n   |          ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_sum = 0;\n    let mut odd_sum = 0;\n\n    let mut\
    \ num_bits = num.to_bits();\n\n    while num_bits != 0 {\n        if num_bits\
    \ % 2 == 0 {\n            odd_sum += num_bits as isize;\n        } else {\n  \
    \          even_sum += num_bits as isize;\n        }\n\n        num_bits >>= 1;\n\
    \    }\n\n    (even_sum, odd_sum)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_bits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5ahhkhjn.rs:11:28\n   |\n11 |     let mut num_bits = num.to_bits();\n\
    \   |                            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `to_be`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    while\
    \ num != 0 {\n        let digit = num % 10;\n        num = num / 10;\n\n     \
    \   if digit % 2 == 0 {\n            even_count += 1;\n        } else {\n    \
    \        odd_count += 1;\n        }\n    }\n\n    (even_count, odd_count)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp1a21exsj.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // initialize number of evens and odds\n    let mut evens, odds:\
    \ isize = 0, 0;\n    // loop over each digit\n    for i in 0..num {\n        //\
    \ if the digit is even\n        if num % 2 == 0 {\n            evens += 1;\n \
    \       } else {\n            odds += 1;\n        }\n    }\n    (evens, odds)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n --> /tmp/tmp2kbag80n.rs:9:18\n  |\n\
    9 |     let mut evens, odds: isize = 0, 0;\n  |                  ^\n  |\nhelp:\
    \ try adding parentheses to match on a tuple\n  |\n9 |     let (mut evens, odds):\
    \ isize = 0, 0;\n  |         +               +\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_digits = 0.;\n    let mut odd_digits = 0.;\n\n  \
    \  for i in 0..num {\n        if i % 2 == 0 {\n            even_digits += i;\n\
    \        } else {\n            odd_digits += i;\n        }\n    }\n\n    (even_digits,\
    \ odd_digits)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmph1xg_t32.rs:13:25\n\
    \   |\n13 |             even_digits += i;\n   |                         ^^ no\
    \ implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmph1xg_t32.rs:15:24\n   |\n15 |             odd_digits += i;\n  \
    \ |                        ^^ no implementation for `{float} += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `AddAssign<Rhs>`:\n      \
    \       <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n          \
    \   <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph1xg_t32.rs:19:6\n   |\n19 | \
    \    (even_digits, odd_digits)\n   |      ^^^^^^^^^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph1xg_t32.rs:19:19\n\
    \   |\n19 |     (even_digits, odd_digits)\n   |                   ^^^^^^^^^^ expected\
    \ `isize`, found floating-point number\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 1;\n    let mut even = 1;\n    let mut rem_num =\
    \ num;\n    while rem_num != 0 {\n        if rem_num % 2 == 0 {\n            even\
    \ *= rem_num / 2;\n        } else {\n            odd *= rem_num / 2;\n       \
    \ }\n        rem_num /= 10;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 3)`,\n right: `(0, 1)`', /tmp/tmpqwbtj2w3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    let mut\
    \ digits = 0;\n    let mut max_digit = num / 10; // num / 10 will always be positive\n\
    \    while max_digit != 0 {\n        digits++;\n        if max_digit % 2 == 0\
    \ {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n        max_digit /= 10;\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpq4s8qjsy.rs:13:15\n\
    \   |\n13 |         digits++;\n   |               ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n13 |         { let tmp = digits; digits\
    \ += 1; tmp };\n   |         +++++++++++       ~~~~~~~~~~~~~~~~~~~~\n13 -    \
    \     digits++;\n13 +         digits += 1;\n   | \n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num > 0);\n    let mut odd = 1;\n    let mut even = 1;\n\
    \    for i in 2..num {\n        match i {\n            0 => (),\n            1\
    \ => (),\n            2 => {\n                even = even + 1;\n            },\n\
    \            3 => {\n                odd = odd + 1;\n            },\n        \
    \    _ => {\n                even = even + 1;\n                odd = odd + 1;\n\
    \            }\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(5, 5)`,\n right: `(0, 1)`', /tmp/tmpqrcgmn3y.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let num_str = num.to_string();\n    let even = num_str.chars().filter(|c|\
    \ c % 2 == 0).count();\n    let odd = num_str.chars().filter(|c| c % 2 == 1).count();\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&char` by `{integer}`\n --> /tmp/tmpaew8t9z6.rs:9:45\n\
    \  |\n9 |     let even = num_str.chars().filter(|c| c % 2 == 0).count();\n  |\
    \                                           - ^ - {integer}\n  |             \
    \                              |\n  |                                        \
    \   &char\n\nerror[E0369]: cannot mod `&char` by `{integer}`\n  --> /tmp/tmpaew8t9z6.rs:10:44\n\
    \   |\n10 |     let odd = num_str.chars().filter(|c| c % 2 == 1).count();\n  \
    \ |                                          - ^ - {integer}\n   |           \
    \                               |\n   |                                      \
    \    &char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaew8t9z6.rs:11:6\n\
    \   |\n11 |     (even, odd)\n   |      ^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     (even.try_into().unwrap(), odd)\n   |    \
    \      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaew8t9z6.rs:11:12\n\
    \   |\n11 |     (even, odd)\n   |            ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     (even, odd.try_into().unwrap())\n   |    \
    \           ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        return (num / 2, num % 2)\n    }\n    let\
    \ mut odd_count = 0 as usize;\n    let mut even_count = 0 as usize;\n    let mut\
    \ digit_sum = 0;\n    let mut digit = num;\n    loop {\n        digit_sum += digit\
    \ % 10;\n        if digit < 0 {\n            return ((even_count, odd_count),\
    \ digit_sum);\n        }\n        digit = digit / 10;\n        even_count += 1;\n\
    \        odd_count += digit_sum % 2 == 0;\n        digit_sum = 0;\n    }\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp15o0q903.rs:18:21\n   |\n\
    18 |             return ((even_count, odd_count), digit_sum);\n   |          \
    \           ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n   |\n   =\
    \ note: expected type `isize`\n             found tuple `(usize, usize)`\n\nerror[E0277]:\
    \ cannot add-assign `bool` to `usize`\n  --> /tmp/tmp15o0q903.rs:22:19\n   |\n\
    22 |         odd_count += digit_sum % 2 == 0;\n   |                   ^^ no implementation\
    \ for `usize += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut nums = Vec::new();\n    let mut odd_nums: Vec<isize> =\
    \ Vec::new();\n    let mut even_nums: Vec<isize> = Vec::new();\n    while num\
    \ != 0 {\n        let digit = num % 10;\n        if digit % 2 == 0 {\n       \
    \     even_nums.push(digit);\n        } else {\n            odd_nums.push(digit);\n\
    \        }\n        num /= 10;\n    }\n    (even_nums.len(), odd_nums.len())\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpba99bbpz.rs:20:6\n   |\n\
    20 |     (even_nums.len(), odd_nums.len())\n   |      ^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n20 |     (even_nums.len().try_into().unwrap(),\
    \ odd_nums.len())\n   |                     ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpba99bbpz.rs:20:23\n   |\n20 |     (even_nums.len(),\
    \ odd_nums.len())\n   |                       ^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     (even_nums.len(), odd_nums.len().try_into().unwrap())\n\
    \   |                                     ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 1;\n    let mut odds = 1;\n    let mut digit =\
    \ num % 10;\n    loop {\n        match digit {\n            0 => break,\n    \
    \        _ => odds *= 2,\n        };\n        digit /= 10;\n        evens *= 2,\n\
    \    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n\
    \  --> /tmp/tmprxg3h0ql.rs:17:19\n   |\n17 |         evens *= 2,\n   |       \
    \            ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (0..num).filter(|x| x.is_even()).count() as (isize, isize)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpt18kdjbr.rs:8:27\n  |\n8 |     (0..num).filter(|x|\
    \ x.is_even()).count() as (isize, isize)\n  |                           ^^^^^^^\
    \ method not found in `&isize`\n\nerror[E0605]: non-primitive cast: `usize` as\
    \ `(isize, isize)`\n --> /tmp/tmpt18kdjbr.rs:8:5\n  |\n8 |     (0..num).filter(|x|\
    \ x.is_even()).count() as (isize, isize)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0isize;\n    let mut odd = 0isize;\n\n    while\
    \ num > 0 {\n        let digit = num % 10;\n        num = num / 10;\n        if\
    \ digit % 2 == 0 {\n            even += 1;\n        } else {\n            odd\
    \ += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpwlh_re0a.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut counter = 0;\n    while num > 0 {\n        if num % 2\
    \ == 0 {\n            counter += 1;\n        }\n        num /= 2;\n    }\n   \
    \ (counter, (counter - 1))\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp98vqw8z7.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n\n    let\
    \ mut i = num;\n    while i >= 10 {\n        i += num % 10;\n        if i % 2\
    \ == 0 {\n            even = even + 1;\n        } else {\n            odd = odd\
    \ + 1;\n        }\n        num = (num - i) / 10;\n    }\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpyrmfpgcc.rs:19:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n19 |\
    \         num = (num - i) / 10;\n   |         ^^^^^^^^^^^^^^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut c = 0;\n    let mut n = 0;\n    while num >= 0 {\n   \
    \     c += 1;\n        if num % 2 == 0 {\n            n += 1;\n        }\n   \
    \     num /= 10;\n    }\n    (c, n - c / 2)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgd9yh3ht.rs:15:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    fn is_even_digits(digits: usize) -> bool {\n        if digits\
    \ % 2 == 0 {\n            true\n        } else {\n            false\n        }\n\
    \    }\n    fn is_odd_digits(digits: usize) -> bool {\n        if digits % 2 ==\
    \ 1 {\n            true\n        } else {\n            false\n        }\n    }\n\
    \    let mut even_digits = num / 2;\n    let mut odd_digits = num % 2;\n    (\n\
    \        even_digits,\n        odd_digits,\n    )\n        .iter()\n        .filter(|x|\
    \ is_even_digits(x))\n        .filter(|x| !is_odd_digits(x))\n        .cloned()\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = even_odd_count;\n \
    \   assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpo7rqgg8e.rs:28:10\n   |\n28 |         .iter()\n\
    \   |          ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 1;\n    let mut odds = 1;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            evens\
    \ += 1;\n        }\n        else {\n            odds += 1;\n        }\n      \
    \  num = num / 10;\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpamakeiet.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut result = (num % 2, num % 2);\n    let mut i = 1;\n   \
    \ while i <= num / 2 {\n        if i % 2 == 0 {\n            (*result, 2) = (*result,\
    \ 2);\n        } else {\n            (*result, 1) = (*result, 1);\n        }\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `(isize, isize)` cannot be dereferenced\n  --> /tmp/tmp8s9pe05_.rs:12:29\n\
    \   |\n12 |             (*result, 2) = (*result, 2);\n   |                   \
    \          ^^^^^^^\n\nerror[E0614]: type `(isize, isize)` cannot be dereferenced\n\
    \  --> /tmp/tmp8s9pe05_.rs:12:14\n   |\n12 |             (*result, 2) = (*result,\
    \ 2);\n   |              ^^^^^^^\n\nerror[E0070]: invalid left-hand side of assignment\n\
    \  --> /tmp/tmp8s9pe05_.rs:12:26\n   |\n12 |             (*result, 2) = (*result,\
    \ 2);\n   |                       -  ^\n   |                       |\n   |   \
    \                    cannot assign to this expression\n\nerror[E0614]: type `(isize,\
    \ isize)` cannot be dereferenced\n  --> /tmp/tmp8s9pe05_.rs:14:29\n   |\n14 |\
    \             (*result, 1) = (*result, 1);\n   |                             ^^^^^^^\n\
    \nerror[E0614]: type `(isize, isize)` cannot be dereferenced\n  --> /tmp/tmp8s9pe05_.rs:14:14\n\
    \   |\n14 |             (*result, 1) = (*result, 1);\n   |              ^^^^^^^\n\
    \nerror[E0070]: invalid left-hand side of assignment\n  --> /tmp/tmp8s9pe05_.rs:14:26\n\
    \   |\n14 |             (*result, 1) = (*result, 1);\n   |                   \
    \    -  ^\n   |                       |\n   |                       cannot assign\
    \ to this expression\n\nerror: aborting due to 6 previous errors\n\nSome errors\
    \ have detailed explanations: E0070, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0070`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        return (0, 0);\n    }\n    let mut even\
    \ = 0;\n    let mut odd = 0;\n    while num != 0 {\n        num = num / 10;\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmphvkdi_r0.rs:14:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n14 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    even: let mut even = num as isize;\n    odd: let mut odd = num\
    \ as isize;\n\n    while even > 0 {\n        if even % 2 == 0 {\n            even\
    \ /= 2;\n            even += 1;\n        } else {\n            even -= 1;\n  \
    \          odd += 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `let`\n --> /tmp/tmpqosbay1z.rs:8:11\n\
    \  |\n8 |     even: let mut even = num as isize;\n  |           ^^^ expected identifier,\
    \ found keyword\n\nerror: expected type, found keyword `let`\n --> /tmp/tmpqosbay1z.rs:8:11\n\
    \  |\n8 |     even: let mut even = num as isize;\n  |         - ^^^ expected type\n\
    \  |         |\n  |         tried to parse a type due to this\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num >= 0);\n    assert!(num < 10);\n\n    if num < 2 {\n\
    \        return (0, 0);\n    }\n\n    let mut even = num;\n    let mut odd = num;\n\
    \n    // Even number\n    while even % 2 == 0 {\n        even /= 2;\n        even++;\n\
    \    }\n\n    // Odd number\n    while odd % 2 == 0 {\n        odd /= 2;\n   \
    \     odd++;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpw6yaof1p.rs:21:13\n\
    \   |\n21 |         even++;\n   |             ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n21 |         { let tmp = even; even +=\
    \ 1; tmp };\n   |         +++++++++++     ~~~~~~~~~~~~~~~~~~\n21 -         even++;\n\
    21 +         even += 1;\n   | \n\nerror: Rust has no postfix increment operator\n\
    \  --> /tmp/tmpw6yaof1p.rs:27:12\n   |\n27 |         odd++;\n   |            ^^\
    \ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n27 |   \
    \      { let tmp = odd; odd += 1; tmp };\n   |         +++++++++++    ~~~~~~~~~~~~~~~~~\n\
    27 -         odd++;\n27 +         odd += 1;\n   | \n\nerror: aborting due to 2\
    \ previous errors\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count: isize = 0;\n    let mut odd_count: isize =\
    \ 0;\n    for i in num.abs() {\n        if i % 2 == 0 {\n            even_count\
    \ = even_count+1;\n        } else {\n            odd_count = odd_count + 1;\n\
    \        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpiwrd4ehl.rs:10:14\n\
    \   |\n10 |     for i in num.abs() {\n   |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `isize`\n\
    \   = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    debug_assert!(num > 0);\n\n    let mut odd = num as isize;\n \
    \   let mut even = num as isize;\n\n    while even > 0 {\n        even /= 10;\n\
    \        odd += 1;\n    }\n    (odd, even)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(8, 0)`,\n right: `(0, 1)`', /tmp/tmp3hqd44pq.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 1;\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n            num = num / 2;\n        } else\
    \ {\n            odd += 1;\n            num = num / 2;\n        }\n    }\n   \
    \ (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpuu8g07xp.rs:8:21\n  |\n8 |     let mut even = 0, odd = 1;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0;\n    for i in num.abs() {\n       \
    \ if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd +=\
    \ 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpm6c1ypbv.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0;\n    for i in 0..=num {\n        if\
    \ i % 2 == 0 {\n            even++;\n        } else {\n            odd++;\n  \
    \      }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpoefi2ype.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 10, num / 10).ok_or(ErrorKind::DivideByZero)?\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmp0ubld7dh.rs:8:32\n  |\n8 |     (num % 10, num / 10).ok_or(ErrorKind::DivideByZero)?\n\
    \  |                                ^^^^^^^^^ use of undeclared type `ErrorKind`\n\
    \nerror[E0599]: no method named `ok_or` found for tuple `(isize, isize)` in the\
    \ current scope\n --> /tmp/tmp0ubld7dh.rs:8:26\n  |\n8 |     (num % 10, num /\
    \ 10).ok_or(ErrorKind::DivideByZero)?\n  |                          ^^^^^ method\
    \ not found in `(isize, isize)`\n\nerror[E0277]: the `?` operator can only be\
    \ used in a function that returns `Result` or `Option` (or another type that implements\
    \ `FromResidual`)\n --> /tmp/tmp0ubld7dh.rs:8:56\n  |\n7 | / fn even_odd_count(num:\
    \ isize) -> (isize, isize) {\n8 | |     (num % 10, num / 10).ok_or(ErrorKind::DivideByZero)?\n\
    \  | |                                                        ^ cannot use the\
    \ `?` operator in a function that returns `(isize, isize)`\n9 | | }\n  | |_- this\
    \ function should return `Result` or `Option` to accept `?`\n  |\n  = help: the\
    \ trait `FromResidual<_>` is not implemented for `(isize, isize)`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0433,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0, mut digit = 0;\n    while num > 0 {\n\
    \        digit += num % 10;\n        num = num / 10;\n        if digit % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmppnu6a9ti.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0, mut digit\
    \ = 0;\n  |                     ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 1;\n    let mut odds = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            evens += 1;\n        } else {\n      \
    \      odds += 1;\n        }\n        num /= 2;\n    }\n    (evens, odds)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpi32p49re.rs:16:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n16 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num, num / 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 3)`,\n right: `(0, 1)`', /tmp/tmpgka_uw7y.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0;\n    let mut i = 0;\n    while i <\
    \ num {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        i += 1;\n    }\n    (even, odd)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpksu670o9.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = 0;\n    let mut odd = 0;\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            count += 1;\n        }\n        odd +=\
    \ 1;\n        num /= 10;\n    }\n    (count, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp6s06fjxd.rs:15:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \         num /= 10;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // Write your code here\n    let mut even: isize = 0;\n    let\
    \ mut odd: isize = 0;\n    for i in 0..num {\n        if num % 2 == 0 {\n    \
    \        even = even+1;\n        } else {\n            odd = odd+1;\n        }\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 7)`,\n right: `(0, 1)`', /tmp/tmp55p0qahp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        panic!(\"Input must be positive\")\n   \
    \ }\n\n    let mut num_digits = num;\n    let mut even = 0;\n    let mut odd =\
    \ 0;\n\n    loop {\n        num_digits %= 10;\n\n        if num_digits == 0 {\n\
    \            break;\n        }\n\n        even += 1;\n        num_digits /= 10;\n\
    \    }\n\n    loop {\n        num_digits %= 10;\n\n        if num_digits == 0\
    \ {\n            break;\n        }\n\n        odd += 1;\n        num_digits /=\
    \ 10;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(1, 0)`,\n right: `(0, 1)`', /tmp/tmpyafkkv99.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // find the number of digits to count evens and odds\n    let\
    \ mut num_digits = num.len();\n    while num_digits > 0 {\n        num_digits\
    \ -= 1;\n        if num % 10 == 0 {\n            num_digits += 1;\n        }\n\
    \        num /= 10;\n    }\n    let num_digits = num_digits as isize;\n\n    (num_digits\
    \ - num_digits % 2, num_digits % 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp4t44cplo.rs:9:30\n  |\n9 |     let mut num_digits = num.len();\n\
    \  |                              ^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut i = 0;\n    let mut num1 = num;\n    let mut num2 = num;\n\
    \    let mut odd_digits = 0;\n\n    while num2 > 0 {\n        let digit = num1\
    \ % 10;\n        let digit2 = num2 % 10;\n\n        if digit != digit2 {\n   \
    \         return (i + odd_digits, i + 1 + odd_digits);\n        }\n\n        num1\
    \ /= 10;\n        num2 /= 10;\n\n        i += 1;\n        odd_digits += 1;\n \
    \   }\n\n    (i + odd_digits, i + 1 + odd_digits)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(2, 3)`,\n right: `(0, 1)`', /tmp/tmpo0wenceq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (even_odd_count(-num), even_odd_count(-num))\n\
    \    } else if num == 0 {\n        (even_odd_count(0), 0)\n    } else {\n    \
    \    let mut count = 1;\n        let mut sum = 0;\n        while num >= 0 {\n\
    \            let digit = num % 10;\n            sum += digit;\n            num\
    \ /= 10;\n            count += if digit % 2 == 0 { 1 } else { 0 };\n        }\n\
    \        (sum, count)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy372z0ga.rs:9:10\n  |\n9 |\
    \         (even_odd_count(-num), even_odd_count(-num))\n  |          ^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy372z0ga.rs:9:32\n\
    \  |\n9 |         (even_odd_count(-num), even_odd_count(-num))\n  |          \
    \                      ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n  |\n\
    \  = note: expected type `isize`\n            found tuple `(isize, isize)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpy372z0ga.rs:11:10\n   |\n11 |  \
    \       (even_odd_count(0), 0)\n   |          ^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(isize, isize)`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = num % 10;\n    let mut even = num / 10;\n    (odd,\
    \ even)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 0)`,\n right: `(0, 1)`', /tmp/tmp75fhi13a.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num1 = num;\n    let mut num2 = 0;\n    while num1 !=\
    \ 0 {\n        num1 /= 10;\n        num2 *= 10;\n    }\n    if num2 % 2 == 0 {\n\
    \        (num2, num2 + 1)\n    } else {\n        (num2, num2 + 2)\n    }\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 1)`,\n right: `(1, 1)`', /tmp/tmpxcjtpq16.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2 == 0, num % 2 == 1)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbv9tbwvb.rs:8:6\n  |\n8 |\
    \     (num % 2 == 0, num % 2 == 1)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbv9tbwvb.rs:8:20\n  |\n\
    8 |     (num % 2 == 0, num % 2 == 1)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    even_odd_count_helper(num, num - num % 2, 0)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `even_odd_count_helper` in this scope\n\
    \ --> /tmp/tmpi7nx4pfw.rs:8:5\n  |\n8 |     even_odd_count_helper(num, num - num\
    \ % 2, 0)\n  |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut n = 0;\n    let mut odd = 0;\n    let mut even = 0;\n\n\
    \    while num != 0 {\n        n += 1;\n        if num % 2 == 0 {\n          \
    \  even += 1;\n        } else {\n            odd += 1;\n        }\n        num\
    \ = num / 2;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate =\
    \ even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `n` is assigned to, but never used\n --> /tmp/tmpd7szynh1.rs:8:13\n\
    \  |\n8 |     let mut n = 0;\n  |             ^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_n` instead\n\nerror[E0384]: cannot\
    \ assign to immutable argument `num`\n  --> /tmp/tmpd7szynh1.rs:19:9\n   |\n7\
    \  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \  --- help: consider making this binding mutable: `mut num`\n...\n19 |      \
    \   num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        return (num, 0);\n    }\n    let mut evens\
    \ = 0;\n    let mut odds = 0;\n    for i in 2..num {\n        if num % i == 0\
    \ {\n            evens += 1;\n        } else {\n            odds += 1;\n     \
    \   }\n    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 5)`,\n right: `(0, 1)`', /tmp/tmp2u3p0jei.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = 0;\n    let mut odd = 0;\n    for n in num.abs()\
    \ {\n        if n % 2 == 0 {\n            count += 1;\n        } else {\n    \
    \        odd += 1;\n        }\n    }\n    (count, odd)\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpbisnmn9r.rs:10:14\n\
    \   |\n10 |     for n in num.abs() {\n   |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `isize`\n\
    \   = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    fn helper(num: isize, even: isize, odd: isize) -> isize {\n  \
    \      if num % 2 == 0 {\n            even\n        } else {\n            odd\n\
    \        }\n    }\n\n    let even = helper(num, 0, 0);\n    let odd = helper(num,\
    \ 0, 1);\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpsj4ydh0i.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n\n    for _ in 0..(num\
    \ / 2) {\n        even += 1;\n        num = num / 2;\n    }\n\n    for _ in 0..(num\
    \ % 2) {\n        odd += 1;\n        num = num % 2;\n    }\n\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp_nbqg5y9.rs:13:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n13 |\
    \         num = num / 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp_nbqg5y9.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num % 2;\n   |         ^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n\n    for digit in num.to_string().chars().map(|&x|\
    \ x.to_string()) {\n        if x.is_digit() {\n            if x.is_digit(2) {\n\
    \                even += 1;\n            } else {\n                odd += 1;\n\
    \            }\n        } else {\n            even = even.saturating_add((digit).parse::<isize>().unwrap());\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpuyydr1m6.rs:12:12\n\
    \   |\n12 |         if x.is_digit() {\n   |            ^ not found in this scope\n\
    \nerror[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpuyydr1m6.rs:13:16\n\
    \   |\n13 |             if x.is_digit(2) {\n   |                ^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuyydr1m6.rs:11:47\n\
    \   |\n11 |     for digit in num.to_string().chars().map(|&x| x.to_string()) {\n\
    \   |                                               ^--\n   |                \
    \                               ||\n   |                                     \
    \          |expected due to this\n   |                                       \
    \        expected `char`, found reference\n   |                              \
    \                 help: did you mean `x`: `&char`\n   |\n   = note:   expected\
    \ type `char`\n           found reference `&_`\n\nerror[E0689]: can't call method\
    \ `saturating_add` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpuyydr1m6.rs:19:25\n\
    \   |\n19 |             even = even.saturating_add((digit).parse::<isize>().unwrap());\n\
    \   |                         ^^^^^^^^^^^^^^\n   |\nhelp: you must specify a type\
    \ for this binding, like `i32`\n   |\n8  |     let mut even: i32 = 0;\n   |  \
    \       ~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd_digit_count = 0;\n    let mut even_digit_count = 0;\n\
    \    while num > 0 {\n        let remaining = num % 10;\n        if remaining\
    \ % 2 == 0 {\n            even_digit_count += 1;\n        }\n        else {\n\
    \            odd_digit_count += 1;\n        }\n        num = num / 10;\n    }\n\
    \    (even_digit_count, odd_digit_count)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp73b_p51o.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num, num / 2) as ((), ())\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk076cmog.rs:8:5\n  |\n7 |\
    \ fn even_odd_count(num: isize) -> (isize, isize) {\n  |                     \
    \             -------------- expected `(isize, isize)` because of return type\n\
    8 |     (num, num / 2) as ((), ())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `()`\n  |\n  = note: expected tuple `(isize, isize)`\n      \
    \       found tuple `((), ())`\n\nerror[E0605]: non-primitive cast: `(isize, isize)`\
    \ as `((), ())`\n --> /tmp/tmpk076cmog.rs:8:5\n  |\n8 |     (num, num / 2) as\
    \ ((), ())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be\
    \ used to convert between primitive types or to coerce to a specific trait object\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0605.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n\n    loop {\n      \
    \  let tmp = num % 10;\n        if tmp == 0 {\n            even = even + 1;\n\
    \        } else {\n            odd = odd + 1;\n        }\n        num = num /\
    \ 10;\n        if num == 0 {\n            break (even, odd);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpgxypfd98.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count: isize = 0;\n    let mut odd_count: isize =\
    \ 0;\n\n    for n in num.iter() {\n        if n % 2 == 0 {\n            even_count\
    \ += 1;\n        } else {\n            odd_count += 1;\n        }\n    }\n   \
    \ (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpq6_81ub5.rs:11:18\n   |\n11 |     for n in num.iter() {\n\
    \   |                  ^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num / 10, num % 10).map(|&x| x % 2).unwrap_or(0, 0)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `(isize, isize)` is not an iterator\n --> /tmp/tmps45pre4y.rs:8:26\n\
    \  |\n8 |     (num / 10, num % 10).map(|&x| x % 2).unwrap_or(0, 0)\n  |      \
    \                    ^^^ `(isize, isize)` is not an iterator\n  |\n  = note: the\
    \ following trait bounds were not satisfied:\n          `(isize, isize): Iterator`\n\
    \          which is required by `&mut (isize, isize): Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = 0;\n    let mut odd = 0;\n    let mut even = 0;\n\
    \    let mut digit = 0;\n    let mut ten = 0;\n    while num > 0 {\n        digit\
    \ = num % 10;\n        if digit % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd += 1;\n        }\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `count`\n --> /tmp/tmpcrz7za4g.rs:8:13\n  |\n\
    8 |     let mut count = 0;\n  |             ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_count`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: value assigned to `digit` is never read\n  --> /tmp/tmpcrz7za4g.rs:11:13\n\
    \   |\n11 |     let mut digit = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ unused variable: `ten`\n  --> /tmp/tmpcrz7za4g.rs:12:13\n   |\n12 |     let\
    \ mut ten = 0;\n   |             ^^^ help: if this is intentional, prefix it with\
    \ an underscore: `_ten`\n\nwarning: variable does not need to be mutable\n -->\
    \ /tmp/tmpcrz7za4g.rs:8:9\n  |\n8 |     let mut count = 0;\n  |         ----^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpcrz7za4g.rs:12:9\n\
    \   |\n12 |     let mut ten = 0;\n   |         ----^^^\n   |         |\n   | \
    \        help: remove this `mut`\n\nerror[E0384]: cannot assign to immutable argument\
    \ `num`\n  --> /tmp/tmpcrz7za4g.rs:20:9\n   |\n7  | fn even_odd_count(num: isize)\
    \ -> (isize, isize) {\n   |                   --- help: consider making this binding\
    \ mutable: `mut num`\n...\n20 |         num /= 10;\n   |         ^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 5 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0 as isize;\n    let mut odd_count = 0 as\
    \ isize;\n    if num < 0 {\n        return (1, 0);\n    }\n    while num > 0 {\n\
    \        if num % 2 == 0 {\n            even_count += 1;\n        }\n        if\
    \ num % 2 != 0 {\n            odd_count += 1;\n        }\n        num /= 2;\n\
    \    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp50bt6ttb.rs:20:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n20 |\
    \         num /= 2;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    even_odd_count_rec(num, |n, c| if c % 2 == 0 { n + 1 } else {\
    \ n })\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `even_odd_count_rec` in this scope\n\
    \ --> /tmp/tmpo8099nx7.rs:8:5\n  |\n8 |     even_odd_count_rec(num, |n, c| if\
    \ c % 2 == 0 { n + 1 } else { n })\n  |     ^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = 0;\n    let mut odds = 0;\n    let mut temp =\
    \ num;\n    while temp > 0 {\n        if temp % 2 == 0 {\n            evens +=\
    \ 1;\n        } else {\n            odds += 1;\n        }\n        temp /= 10;\n\
    \    }\n    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 0)`,\n right: `(1, 1)`', /tmp/tmpweuntff5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut num_even = 0;\n    let mut num_odd = 0;\n\n    for i in\
    \ num.abs() {\n        match i % 10 {\n            0 => num_even += 1,\n     \
    \       1 => num_odd += 1,\n            _ => continue,\n        }\n    }\n\n \
    \   (num_even, num_odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpnxj7v8_b.rs:11:14\n\
    \   |\n11 |     for i in num.abs() {\n   |              ^^^^^^^^^ `isize` is not\
    \ an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `isize`\n\
    \   = note: if you want to iterate between `start` until a value `end`, use the\
    \ exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 1;\n    let mut number =\
    \ num;\n    while number > 0 {\n        number %= 10;\n        even = even * 10\
    \ + number;\n        number /= 10;\n        odd = odd * 10 + number;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 10)`,\n right: `(0, 1)`', /tmp/tmp46y8yw5j.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut result = (0, 0);\n    for n in num.to_digits().iter()\
    \ {\n        if n % 2 == 0 {\n            result += (1, 0);\n        } else {\n\
    \            result += (0, 1);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmppfdyyqmq.rs:9:18\n  |\n9 |     for n in num.to_digits().iter()\
    \ {\n  |                  ^^^^^^^^^ method not found in `isize`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `({integer}, {integer})`\n\
    \  --> /tmp/tmppfdyyqmq.rs:11:13\n   |\n11 |             result += (1, 0);\n \
    \  |             ------^^^^^^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `({integer}, {integer})`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `({integer}, {integer})`\n  --> /tmp/tmppfdyyqmq.rs:13:13\n\
    \   |\n13 |             result += (0, 1);\n   |             ------^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `({integer}, {integer})`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0599.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 1;\n    let mut even = num;\n    while even % 2\
    \ == 0 {\n        even /= 2;\n        odd++;\n    }\n    while even % 2 == 1 {\n\
    \        even /= 2;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpfnne62pm.rs:12:12\n\
    \   |\n12 |         odd++;\n   |            ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n12 |         { let tmp = odd; odd += 1;\
    \ tmp };\n   |         +++++++++++    ~~~~~~~~~~~~~~~~~\n12 -         odd++;\n\
    12 +         odd += 1;\n   | \n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = num;\n    let mut odd = num;\n    while even >\
    \ 0 {\n        even %= 10;\n        odd *= 10;\n        odd += even;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmpm6ijcsvc.rs:12:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = num / 10;\n    let mut odd = num % 10;\n    let\
    \ mut even1 = even;\n    while even1 != 0 {\n        even1 = even1 >> 1;\n   \
    \     even = even + even1;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 7)`,\n right: `(0, 1)`', /tmp/tmpbw49esbj.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (\n        if num < 0 {\n            0\n        } else {\n   \
    \         std::cmp::max(std::cmp::gcd(num, 2), 0)\n        },\n        (\n   \
    \         if num < 0 {\n                1\n            } else {\n            \
    \    std::cmp::min(std::cmp::gcd(num, 2), 1)\n            },\n        ),\n   \
    \ )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `gcd` in module `std::cmp`\n  --> /tmp/tmpncttvfzq.rs:12:37\n\
    \   |\n12 |             std::cmp::max(std::cmp::gcd(num, 2), 0)\n   |        \
    \                             ^^^ not found in `std::cmp`\n\nerror[E0425]: cannot\
    \ find function `gcd` in module `std::cmp`\n  --> /tmp/tmpncttvfzq.rs:18:41\n\
    \   |\n18 |                 std::cmp::min(std::cmp::gcd(num, 2), 1)\n   |    \
    \                                     ^^^ not found in `std::cmp`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (num % 2, 1)\n    } else if num < 2 {\n\
    \        (num % 2, 0)\n    } else {\n        (even_odd_count(num / 2), num % 2)\n\
    \    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdosde52n.rs:13:10\n   |\n\
    13 |         (even_odd_count(num / 2), num % 2)\n   |          ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n    \
    \         found tuple `(isize, isize)`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        num = num\
    \ / 10;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpir8du_z8.rs:18:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in num {\n\
    \        if i % 2 == 0 {\n            even += 1;\n        }\n        else {\n\
    \            odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmp6hvhmj0t.rs:10:14\n\
    \   |\n10 |     for i in num {\n   |              ^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0;\n    let mut temp = num;\n    while\
    \ temp > 0 {\n        temp %= 10;\n        if temp % 2 == 0 {\n            even\
    \ += 1;\n        } else {\n            odd += 1;\n        }\n        temp /= 10;\n\
    \    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpwiied4i2.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let num_to_be_even = if num < 0 {\n        abs(num)\n    } else\
    \ {\n        num\n    };\n    let mut even, odd = 1, 0;\n\n    while num_to_be_even\
    \ % 10 == 0 {\n        num_to_be_even /= 10;\n        even *= 10;\n    }\n   \
    \ while num_to_be_even % 10 != 0 {\n        even += 1;\n        num_to_be_even\
    \ /= 10;\n    }\n    while num_to_be_odd % 10 == 0 {\n        num_to_be_odd /=\
    \ 10;\n        odd *= 10;\n    }\n    while num_to_be_odd % 10 != 0 {\n      \
    \  odd += 1;\n        num_to_be_odd /= 10;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpij16t9fn.rs:13:17\n   |\n\
    13 |     let mut even, odd = 1, 0;\n   |                 ^\n   |\nhelp: try adding\
    \ parentheses to match on a tuple\n   |\n13 |     let (mut even, odd) = 1, 0;\n\
    \   |         +             +\n\nerror[E0425]: cannot find function `abs` in this\
    \ scope\n --> /tmp/tmpij16t9fn.rs:9:9\n  |\n9 |         abs(num)\n  |        \
    \ ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    for n in num {\n\
    \        if n % 2 == 0 {\n            even += 1;\n        } else {\n         \
    \   odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmph_c5v57i.rs:10:14\n\
    \   |\n10 |     for n in num {\n   |              ^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut evens = evens::<isize>(num);\n    let mut odds = odds::<isize>(num);\n\
    \    evens = evens - (odds % evens);\n    odds = odds + (evens % odds);\n    evens\
    \ /= 2;\n    odds /= 2;\n    (evens, odds)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `evens` in this scope\n --> /tmp/tmppez7o0mf.rs:8:21\n\
    \  |\n8 |     let mut evens = evens::<isize>(num);\n  |                     ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `odds` in this\
    \ scope\n --> /tmp/tmppez7o0mf.rs:9:20\n  |\n9 |     let mut odds = odds::<isize>(num);\n\
    \  |                    ^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 1;\n    let mut num = num;\n    while\
    \ num > 0 {\n        if num % 2 == 0 {\n            even += 1;\n        }\n  \
    \      else {\n            odd += 1;\n        }\n        num = num / 2;\n    }\n\
    \    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmppwqm7rsi.rs:8:21\n  |\n8 |     let mut even = 0, odd = 1;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        panic!(\"`even_odd_count` takes positive\
    \ integer\")\n    }\n\n    let mut even = num / 2;\n    let mut odd = num - even;\n\
    \n    if even % 2 == 0 {\n        even = even + 1;\n    } else {\n        even\
    \ = even;\n    }\n\n    if odd % 2 == 0 {\n        odd = odd + 1;\n    } else\
    \ {\n        odd = odd;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 5)`,\n right: `(0, 1)`', /tmp/tmpycmds97n.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut n = num;\n    let mut counter = std::mem::zeroed();\n\n\
    \    while n > 0 {\n        counter += n & 1;\n        n >>= 1;\n    }\n\n   \
    \ (counter as isize, num.saturating_sub(counter) as isize)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0133]: call to unsafe function is unsafe and requires unsafe function\
    \ or block\n --> /tmp/tmp3etcmr09.rs:9:23\n  |\n9 |     let mut counter = std::mem::zeroed();\n\
    \  |                       ^^^^^^^^^^^^^^^^^^ call to unsafe function\n  |\n \
    \ = note: consult the function's documentation for information on how to avoid\
    \ undefined behavior\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0133`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2 == 0, num % 3 == 0)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:6\n  |\n8 |\
    \     (num % 2 == 0, num % 3 == 0)\n  |      ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu6d5er4x.rs:8:20\n  |\n\
    8 |     (num % 2 == 0, num % 3 == 0)\n  |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num > 0);\n    if num % 2 == 0 {\n        (num / 2, 1)\n\
    \    } else {\n        (num / 2, 0)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 0)`,\n right: `(0, 1)`', /tmp/tmpuw6tuyby.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // Find the number of even digits\n    let num_even_digits = num.count_digits(|x|\
    \ {\n        x.checked_sll(2).is_some()\n    });\n    // Find the number of odd\
    \ digits\n    let num_odd_digits = num.count_digits(|x| {\n        x.checked_sll(2).is_none()\n\
    \    });\n    (num_even_digits, num_odd_digits)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `count_digits` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp4j5o4gp3.rs:9:31\n  |\n9 |     let num_even_digits\
    \ = num.count_digits(|x| {\n  |                               ^^^^^^^^^^^^ help:\
    \ there is an associated function with a similar name: `count_ones`\n\nerror[E0599]:\
    \ no method named `count_digits` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp4j5o4gp3.rs:13:30\n   |\n13 |     let num_odd_digits = num.count_digits(|x|\
    \ {\n   |                              ^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `count_ones`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut sum = 0;\n    let mut count = 1;\n    let mut last = 0;\n\
    \    for &x in num.to_digits() {\n        if &x == '1' {\n            sum += 1;\n\
    \        } else {\n            sum += count * last;\n            count *= 2;\n\
    \            last = x == '1' ? 1 : 0;\n        }\n    }\n    (sum, count)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpgm312ofm.rs:17:31\n   |\n17 |             last = x == '1' ? 1 :\
    \ 0;\n   |                               ^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nerror[E0599]: no method named `to_digits` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpgm312ofm.rs:11:19\n   |\n11 |     for &x\
    \ in num.to_digits() {\n   |                   ^^^^^^^^^ method not found in `isize`\n\
    \nerror[E0277]: can't compare `&_` with `char`\n  --> /tmp/tmpgm312ofm.rs:12:15\n\
    \   |\n12 |         if &x == '1' {\n   |               ^^ no implementation for\
    \ `&_ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0, c = 0, d = 0, e = 0;\n    while num\
    \ != 0 {\n        if num % 2 == 0 {\n            even = even + 1;\n          \
    \  c += 1;\n        }\n        else {\n            odd = odd + 1;\n          \
    \  d += 1;\n        }\n        num /= 10;\n    }\n    (even, odd, c, d, e)\n}\n\
    \nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp_vkdahee.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0, c = 0,\
    \ d = 0, e = 0;\n  |                     ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digit_count\
    \ = 0;\n\n    for i in num.digits().cloned() {\n        if i % 2 == 0 {\n    \
    \        even += 1;\n        } else {\n            odd += 1;\n        }\n\n  \
    \      if even > odd {\n            digit_count += 1;\n        }\n    }\n\n  \
    \  (even, odd, digit_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpsgg8oce7.rs:12:18\n   |\n12 |     for i in num.digits().cloned()\
    \ {\n   |                  ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsgg8oce7.rs:24:5\n   |\n7  | fn even_odd_count(num:\
    \ isize) -> (isize, isize) {\n   |                                  --------------\
    \ expected `(isize, isize)` because of return type\n...\n24 |     (even, odd,\
    \ digit_count)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements,\
    \ found one with 3 elements\n   |\n   = note: expected tuple `(isize, isize)`\n\
    \              found tuple `(isize, isize, {integer})`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 10, num % 10 - num % 10) / 2\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot divide `(isize, isize)` by `{integer}`\n --> /tmp/tmp1x4uesdo.rs:8:37\n\
    \  |\n8 |     (num % 10, num % 10 - num % 10) / 2\n  |     -------------------------------\
    \ ^ - {integer}\n  |     |\n  |     (isize, isize)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 1;\n    let mut tmp = num;\n    while\
    \ tmp > 0 {\n        if tmp % 2 == 0 {\n            even += 1;\n        }\n  \
    \      odd += 1;\n        tmp = tmp / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmpiylq69r2.rs:8:21\n  |\n8 |     let mut even = 0, odd = 1;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    // Count the number of even digits\n    let mut even: usize =\
    \ 0;\n    let mut odd: usize = 0;\n    for d in num.to_digits(10) {\n        if\
    \ *d % 2 == 0 {\n            even += 1;\n        } else {\n            odd +=\
    \ 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp58jo6wwh.rs:11:18\n   |\n11 |     for d in num.to_digits(10)\
    \ {\n   |                  ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp58jo6wwh.rs:19:6\n   |\n19 |     (even, odd)\n\
    \   |      ^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n19\
    \ |     (even.try_into().unwrap(), odd)\n   |          ++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp58jo6wwh.rs:19:12\n   |\n19 |  \
    \   (even, odd)\n   |            ^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     (even, odd.try_into().unwrap())\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut temp = num;\n\
    \    while num != 0 {\n        let digit = num % 10;\n        num = num / 10;\n\
    \        if digit % 2 == 0 {\n            even += 1;\n        } else {\n     \
    \       odd += 1;\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `temp`\n  --> /tmp/tmplopdtkj_.rs:10:13\n   |\n\
    10 |     let mut temp = num;\n   |             ^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_temp`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmplopdtkj_.rs:10:9\n\
    \   |\n10 |     let mut temp = num;\n   |         ----^^^^\n   |         |\n \
    \  |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on\
    \ by default\n\nerror[E0384]: cannot assign to immutable argument `num`\n  -->\
    \ /tmp/tmplopdtkj_.rs:13:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n   |                   --- help: consider making this binding mutable:\
    \ `mut num`\n...\n13 |         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut odd = 0;\n    let mut even = 0;\n\n    while num > 0 {\n\
    \        let tmp = num % 10;\n        if tmp % 2 == 0 {\n            even += 1;\n\
    \            num /= 10;\n        } else {\n            odd += 1;\n           \
    \ num /= 10;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpfgdrzigk.rs:15:13\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n15 |\
    \             num /= 10;\n   |             ^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmpfgdrzigk.rs:18:13\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n18 |\
    \             num /= 10;\n   |             ^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    debug_assert!(num >= 0);\n    let mut count = isize::abs(num);\n\
    \    let mut even = isize::abs(num % 10);\n    let mut odd = isize::abs(num %\
    \ 20);\n    // If even, we have no idea how many odd digits are in the number.\n\
    \    if even > 0 {\n        odd = 0;\n    }\n    (count, even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmuqh88gi.rs:16:5\n   |\n\
    7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \                 -------------- expected `(isize, isize)` because of return type\n\
    ...\n16 |     (count, even, odd)\n   |     ^^^^^^^^^^^^^^^^^^ expected a tuple\
    \ with 2 elements, found one with 3 elements\n   |\n   = note: expected tuple\
    \ `(isize, isize)`\n              found tuple `(isize, isize, isize)`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (even_odd_count(-num).0, even_odd_count(-num).1\
    \ - (-num) as isize)\n    } else {\n        let mut counter = num as isize;\n\
    \        (counter, counter - (counter - 1) % 2)\n    }\n}\n\nfn main() {\n   \
    \ let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n   \
    \ assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 7)`,\n right: `(0, 1)`', /tmp/tmp41ea37kv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    fn odd_digits(n: isize) -> isize {\n        (n as isize) - n.leading_zeros()\
    \ as isize\n    }\n\n    fn even_digits(n: isize) -> isize {\n        (n as isize).leading_zeros()\
    \ as isize\n    }\n\n    if num < 0 {\n        (even_digits(-num), odd_digits(-num))\n\
    \    } else if num < 10 {\n        (even_digits(num), odd_digits(num))\n    }\
    \ else {\n        (even_digits(num), odd_digits(num))\n    }\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(61, -54)`,\n right: `(0, 1)`', /tmp/tmp0yrpi1m0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: -1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = num;\n    let mut odd = num;\n\n    while even\
    \ > 0 {\n        if even % 2 == 0 {\n            even = even / 2;\n          \
    \  even = (even as isize) * 2;\n        } else {\n            even = even - 1;\n\
    \        }\n    }\n\n    while odd > 0 {\n        if odd % 2 == 0 {\n        \
    \    odd = odd / 2;\n            odd = 3 * (odd as isize);\n        } else {\n\
    \            odd = odd - 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010640
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut counter = std::i32::MAX;\n    let mut even = std::i32::MAX;\n\
    \    let mut odd = std::i32::MAX;\n    for i in 0..num {\n        if num % 2 ==\
    \ 0 {\n            even += 1;\n        }\n        else {\n            odd += 1;\n\
    \        }\n        if counter == std::i32::MAX {\n            counter = i;\n\
    \        }\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkspw9nrp.rs:19:23\n   |\n\
    8  |     let mut counter = std::i32::MAX;\n   |                       -------------\
    \ expected due to this value\n...\n19 |             counter = i;\n   |       \
    \                ^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkspw9nrp.rs:22:6\n   |\n22 |     (even, odd)\n   |      ^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n22 |     (even.try_into().unwrap(),\
    \ odd)\n   |          ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkspw9nrp.rs:22:12\n   |\n22 |     (even, odd)\n   |           \
    \ ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n22 |     (even,\
    \ odd.try_into().unwrap())\n   |               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0, remainder = 0;\n    while num > 0 {\n\
    \        remainder = (num % 10) as u8;\n        even += (remainder % 2) as isize;\n\
    \        odd += (remainder % 2) as isize;\n        num /= 10;\n    }\n    (even,\
    \ odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp7phve72z.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0, remainder\
    \ = 0;\n  |                     ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    let\
    \ mut temp = 1;\n    let mut power = 1;\n\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even_count += 1;\n            temp *= num;\n       \
    \ }\n        else {\n            odd_count += 1;\n            temp /= num;\n \
    \       }\n        num -= 1;\n        power = power * 10;\n    }\n\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `temp` is assigned to, but never used\n  --> /tmp/tmpg750no1n.rs:11:13\n\
    \   |\n11 |     let mut temp = 1;\n   |             ^^^^\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n   = note: consider using `_temp` instead\n\nerror[E0384]: cannot\
    \ assign to immutable argument `num`\n  --> /tmp/tmpg750no1n.rs:23:9\n   |\n7\
    \  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |                 \
    \  --- help: consider making this binding mutable: `mut num`\n...\n23 |      \
    \   num -= 1;\n   |         ^^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even: usize = 0;\n    let mut odd: usize = 0;\n    let\
    \ mut n = num as usize;\n    while n > 0 {\n        if n % 2 == 0 {\n        \
    \    even += 1;\n        } else {\n            odd += 1;\n        }\n        n\
    \ /= 2;\n    }\n    (even, odd)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa_p3wpci.rs:19:6\n   |\n\
    19 |     (even, odd)\n   |      ^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     (even.try_into().unwrap(), odd)\n   |          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa_p3wpci.rs:19:12\n   |\n19 |\
    \     (even, odd)\n   |            ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n19 |     (even, odd.try_into().unwrap())\n   |          \
    \     ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num, num / 2 % 2)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 1)`,\n right: `(0, 1)`', /tmp/tmpbsowxn4p.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n\n    for\
    \ i in 0..num {\n        if num % 2 == 0 {\n            even_count += 1;\n   \
    \     } else {\n            odd_count += 1;\n        }\n    }\n\n    (even_count,\
    \ odd_count)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 7)`,\n right: `(0, 1)`', /tmp/tmp29jlg8v2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0, carry: isize = 0;\n\n    for d in &num\
    \ {\n        if d >= 10 {\n            carry += 10 - d;\n        } else {\n  \
    \          carry = d;\n        }\n\n        if carry > 0 {\n            even =\
    \ even * 10 + carry;\n        } else {\n            even = even + carry;\n   \
    \     }\n\n        carry = even / 10;\n        even %= 10;\n\n        odd = odd\
    \ * 10 + carry;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmppxern4nl.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0, carry:\
    \ isize = 0;\n  |                     ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (\n        num % 10 as isize,\n        num.div_rem(10).unwrap()\
    \ as isize,\n    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `div_rem` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp885u4yen.rs:10:13\n   |\n10 |         num.div_rem(10).unwrap()\
    \ as isize,\n   |             ^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0;\n    let mut odd_count = 0;\n    for d\
    \ in num {\n        if d % 2 == 0 {\n            even_count += 1;\n        } else\
    \ {\n            odd_count += 1;\n        }\n    }\n    (even_count, odd_count)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpcoq3lsr7.rs:10:14\n\
    \   |\n10 |     for d in num {\n   |              ^^^ `isize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `isize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (0, num as isize)\n    } else {\n      \
    \  let mut even = 0;\n        let mut odd = 1;\n        let mut remainder = num;\n\
    \        let mut max_digit = num;\n        let mut digits = 1;\n        while\
    \ remainder > 0 {\n            let rem = remainder % 10;\n            remainder\
    \ = (remainder / 10).unwrap();\n            if rem % 2 == 0 {\n              \
    \  even += 1;\n                digits += 1;\n            }\n            if rem\
    \ % 2 != 0 {\n                odd += 1;\n                digits += 1;\n      \
    \      }\n            max_digit = digits;\n            digits += 1;\n        }\n\
    \        (even, odd)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpf3lck4pf.rs:18:42\n   |\n18 |             remainder = (remainder\
    \ / 10).unwrap();\n   |                                          ^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_count = 0 as usize;\n    let mut odd_count = 0 as\
    \ usize;\n    while num > 0 {\n        num = num / 10;\n        if num % 2 ==\
    \ 0 {\n            even_count += 1;\n        } else {\n            odd_count +=\
    \ 1;\n        }\n    }\n    (even_count, odd_count)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpot23pm97.rs:18:6\n   |\n\
    18 |     (even_count, odd_count)\n   |      ^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n18 |     (even_count.try_into().unwrap(),\
    \ odd_count)\n   |                ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpot23pm97.rs:18:18\n   |\n18 |     (even_count, odd_count)\n\
    \   |                  ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     (even_count, odd_count.try_into().unwrap())\n   |      \
    \                     ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    debug_assert!(num >= 0);\n    let mut count = (0, 0);\n    for\
    \ i in num.digits().iter() {\n        if i % 2 == 0 {\n            count.0++;\n\
    \        } else {\n            count.1++;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp8whc5n7k.rs:12:20\n\
    \   |\n12 |             count.0++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n12 |             { let tmp =\
    \ count.0; count.0 += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    12 -             count.0++;\n12 +             count.0 += 1;\n   | \n\nerror: Rust\
    \ has no postfix increment operator\n  --> /tmp/tmp8whc5n7k.rs:14:20\n   |\n14\
    \ |             count.1++;\n   |                    ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n14 |             { let tmp = count.1; count.1\
    \ += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n14\
    \ -             count.1++;\n14 +             count.1 += 1;\n   | \n\nerror[E0599]:\
    \ no method named `digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp8whc5n7k.rs:10:18\n   |\n10 |     for i in num.digits().iter() {\n \
    \  |                  ^^^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut digits =\
    \ num;\n    while digits > 0 {\n        even += digits % 2 == 0;\n        odd\
    \ += digits % 2 != 0;\n        digits /= 10;\n    }\n    (even, odd)\n}\n\nfn\
    \ main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp7oq58t9p.rs:12:14\n\
    \   |\n12 |         even += digits % 2 == 0;\n   |              ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmp7oq58t9p.rs:13:13\n   |\n13 |         odd += digits % 2 != 0;\n\
    \   |             ^^ no implementation for `{integer} += bool`\n   |\n   = help:\
    \ the trait `AddAssign<bool>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = num;\n    let mut odd = num;\n    while even %\
    \ 2 != 0 {\n        even /= 2;\n        even += 1;\n    }\n    while odd % 2 !=\
    \ 0 {\n        odd /= 2;\n        odd += 1;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(4, 4)`,\n right: `(0, 1)`', /tmp/tmpn9_5mzg_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even_counter = 0;\n    let mut odd_counter = 0;\n\n  \
    \  if num < 0 {\n        return (0, 0);\n    }\n\n    for i in 0..num {\n    \
    \    let digit = num % 10;\n\n        if digit % 2 == 0 {\n            even_counter\
    \ += 1;\n        } else {\n            odd_counter += 1;\n        }\n\n      \
    \  num /= 10;\n    }\n\n    (even_counter, odd_counter)\n}\n\nfn main() {\n  \
    \  let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n  \
    \  assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmpmmsjfqxt.rs:15:9\n   |\n15\
    \ |     for i in 0..num {\n   |         ^ help: if this is intentional, prefix\
    \ it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on\
    \ by default\n\nerror[E0384]: cannot assign to immutable argument `num`\n  -->\
    \ /tmp/tmpmmsjfqxt.rs:24:9\n   |\n7  | fn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n   |                   --- help: consider making this binding mutable:\
    \ `mut num`\n...\n24 |         num /= 10;\n   |         ^^^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = 0;\n    let mut odd = 1;\n    let mut even = 0;\n\
    \n    while num > 0 {\n        let digit = num % 10;\n        if digit % 2 ==\
    \ 0 {\n            even += 1;\n        } else {\n            odd += 1;\n     \
    \   }\n\n        num = num / 10;\n    }\n\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `count`\n --> /tmp/tmp2glzoj6t.rs:8:13\n  |\n\
    8 |     let mut count = 0;\n  |             ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_count`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n --> /tmp/tmp2glzoj6t.rs:8:9\n\
    \  |\n8 |     let mut count = 0;\n  |         ----^^^^^\n  |         |\n  |  \
    \       help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `num`\n  --> /tmp/tmp2glzoj6t.rs:20:9\n\
    \   |\n7  | fn even_odd_count(num: isize) -> (isize, isize) {\n   |          \
    \         --- help: consider making this binding mutable: `mut num`\n...\n20 |\
    \         num = num / 10;\n   |         ^^^^^^^^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = 0;\n    let mut even = 1;\n    let mut odd = 1;\n\
    \    loop {\n        if num % 2 == 0 {\n            even += 1;\n            count\
    \ += even;\n        } else {\n            odd += 1;\n            count += odd;\n\
    \        }\n        num /= 10;\n    }\n    (count, even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unreachable expression\n  --> /tmp/tmpb51jmk_9.rs:21:5\n   |\n\
    11 | /     loop {\n12 | |         if num % 2 == 0 {\n13 | |             even +=\
    \ 1;\n14 | |             count += even;\n...  |\n19 | |         num /= 10;\n20\
    \ | |     }\n   | |_____- any code following this expression is unreachable\n\
    21 |       (count, even, odd)\n   |       ^^^^^^^^^^^^^^^^^^ unreachable expression\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb51jmk_9.rs:21:5\n   |\n7  | fn even_odd_count(num: isize)\
    \ -> (isize, isize) {\n   |                                  -------------- expected\
    \ `(isize, isize)` because of return type\n...\n21 |     (count, even, odd)\n\
    \   |     ^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements, found one with\
    \ 3 elements\n   |\n   = note: expected tuple `(isize, isize)`\n             \
    \ found tuple `(isize, isize, isize)`\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0;\n    let mut odd = 1;\n\n    for i in 0..num\
    \ {\n        if num % 2 == 0 {\n            even += 1;\n        } else {\n   \
    \         odd += 1;\n        }\n    }\n\n    (even, odd)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(0, 8)`,\n right: `(0, 1)`', /tmp/tmpb31__vss.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (even_odd_count(-num as i32), even_odd_count(-num\
    \ as i32))\n    } else {\n        let mut odd_count = 0;\n        let mut even_count\
    \ = 0;\n        while num > 0 {\n            if num % 2 == 0 {\n             \
    \   even_count += 1;\n                num -= 2;\n            } else {\n      \
    \          odd_count += 1;\n                num -= 1;\n            }\n       \
    \ }\n        (even_count, odd_count)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjy47qw94.rs:9:25\n  |\n9 |\
    \         (even_odd_count(-num as i32), even_odd_count(-num as i32))\n  |    \
    \                     ^^^^^^^^^^^ expected `isize`, found `i32`\n  |\nhelp: you\
    \ can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |         (even_odd_count((-num as i32).try_into().unwrap()), even_odd_count(-num\
    \ as i32))\n  |                         +           +++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpjy47qw94.rs:9:10\n  |\n9 |      \
    \   (even_odd_count(-num as i32), even_odd_count(-num as i32))\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected type `isize`\n      \
    \      found tuple `(isize, isize)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjy47qw94.rs:9:54\n\
    \  |\n9 |         (even_odd_count(-num as i32), even_odd_count(-num as i32))\n\
    \  |                                                      ^^^^^^^^^^^ expected\
    \ `isize`, found `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |         (even_odd_count(-num\
    \ as i32), even_odd_count((-num as i32).try_into().unwrap()))\n  |           \
    \                                           +           +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpjy47qw94.rs:9:39\n  |\n9 |    \
    \     (even_odd_count(-num as i32), even_odd_count(-num as i32))\n  |        \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found tuple\n  |\n  = note: expected type `isize`\n            found tuple `(isize,\
    \ isize)`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0;\n    while num > 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1;\n        }\n        else {\n            odd\
    \ += 1;\n        }\n        num = num / 2;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp14o99f8b.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 10, num % 5) as (size, size)\n}\n\nfn main() {\n    let\
    \ candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `size` in this scope\n --> /tmp/tmp_qluuyyu.rs:8:29\n\
    \  |\n8 |     (num % 10, num % 5) as (size, size)\n  |                       \
    \      ^^^^ help: a builtin type with a similar name exists: `isize`\n\nerror[E0412]:\
    \ cannot find type `size` in this scope\n --> /tmp/tmp_qluuyyu.rs:8:35\n  |\n\
    8 |     (num % 10, num % 5) as (size, size)\n  |                             \
    \      ^^^^ help: a builtin type with a similar name exists: `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let num_str = num.to_string();\n    let even = num_str.chars().filter(|c|\
    \ c >= '0' && c <= '9').filter(|c| c % 2 == 0).count();\n    let odd = num_str.chars().filter(|c|\
    \ c >= '0' && c <= '9').filter(|c| c % 2 == 1).count();\n    (even, odd)\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5z5q9_14.rs:9:48\n  |\n9 |\
    \     let even = num_str.chars().filter(|c| c >= '0' && c <= '9').filter(|c| c\
    \ % 2 == 0).count();\n  |                                                ^^^\n\
    \  |                                                |\n  |                   \
    \                             expected `&char`, found `char`\n  |            \
    \                                    help: consider borrowing here: `&'0'`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp5z5q9_14.rs:9:60\n  |\n9 |     let\
    \ even = num_str.chars().filter(|c| c >= '0' && c <= '9').filter(|c| c % 2 ==\
    \ 0).count();\n  |                                                           \
    \ ^^^\n  |                                                            |\n  | \
    \                                                           expected `&char`,\
    \ found `char`\n  |                                                          \
    \  help: consider borrowing here: `&'9'`\n\nerror[E0369]: cannot mod `&char` by\
    \ `{integer}`\n --> /tmp/tmp5z5q9_14.rs:9:78\n  |\n9 |     let even = num_str.chars().filter(|c|\
    \ c >= '0' && c <= '9').filter(|c| c % 2 == 0).count();\n  |                 \
    \                                                           - ^ - {integer}\n\
    \  |                                                                         \
    \   |\n  |                                                                   \
    \         &char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5z5q9_14.rs:10:47\n\
    \   |\n10 |     let odd = num_str.chars().filter(|c| c >= '0' && c <= '9').filter(|c|\
    \ c % 2 == 1).count();\n   |                                               ^^^\n\
    \   |                                               |\n   |                  \
    \                             expected `&char`, found `char`\n   |           \
    \                                    help: consider borrowing here: `&'0'`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5z5q9_14.rs:10:59\n   |\n10 |  \
    \   let odd = num_str.chars().filter(|c| c >= '0' && c <= '9').filter(|c| c %\
    \ 2 == 1).count();\n   |                                              "
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (\n        if num % 2 == 0 {\n            1 + even_odd_count(num\
    \ / 2)\n        } else {\n            1 + even_odd_count(num / 2)\n        }\n\
    \    )\n}\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmp929dvdtx.rs:8:5\n\
    \   |\n8  | /     (\n9  | |         if num % 2 == 0 {\n   | |________^\n...\n\
    13 |           }\n   |  __________^\n14 | |     )\n   | |_____^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    8  ~     if num % 2 == 0 {\n9  |             1 + even_odd_count(num / 2)\n10 |\
    \         } else {\n11 |             1 + even_odd_count(num / 2)\n12 ~       \
    \  }\n   |\n\nerror[E0277]: cannot add `(isize, isize)` to `{integer}`\n  -->\
    \ /tmp/tmp929dvdtx.rs:10:15\n   |\n10 |             1 + even_odd_count(num / 2)\n\
    \   |               ^ no implementation for `{integer} + (isize, isize)`\n   |\n\
    \   = help: the trait `Add<(isize, isize)>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `(isize, isize)` to `{integer}`\n  --> /tmp/tmp929dvdtx.rs:12:15\n\
    \   |\n12 |             1 + even_odd_count(num / 2)\n   |               ^ no implementation\
    \ for `{integer} + (isize, isize)`\n   |\n   = help: the trait `Add<(isize, isize)>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 2 previous errors; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (num % 2 == 0) as (isize, isize)\n}\n\nfn main() {\n    let candidate\
    \ = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78),\
    \ (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211),\
    \ (3, 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `bool` as `(isize, isize)`\n --> /tmp/tmp3g2bkbsu.rs:8:5\n\
    \  |\n8 |     (num % 2 == 0) as (isize, isize)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        return (0, 0);\n    }\n\n    let mut nums\
    \ = num.abs();\n\n    let mut evens = 0;\n    let mut odds = 0;\n\n    while nums.is_positive()\
    \ {\n        let mut digit = nums.remain();\n        odds += digit.mod_mul(10).unwrap();\n\
    \        evens += digit.mod_mul(2).unwrap();\n        nums -= digit;\n    }\n\
    \    (evens, odds)\n}\n\nfn main() {\n    let candidate = even_odd_count;\n  \
    \  assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remain` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvew79zuj.rs:18:30\n   |\n18 |         let mut digit = nums.remain();\n\
    \   |                              ^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        panic!(\"negative number: {}\", num);\n\
    \    }\n    let mut even = Even::zero();\n    let mut odd = Odd::zero();\n   \
    \ let mut mut i = 1;\n    while i <= num {\n        if i % 2 == 0 {\n        \
    \    even = even.union_update(i, 1);\n        } else {\n            odd = odd.union_update(i,\
    \ 1);\n        }\n        i += 1;\n    }\n    (even, odd)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: `mut` on a binding may not be repeated\n  --> /tmp/tmp2b693945.rs:13:13\n\
    \   |\n13 |     let mut mut i = 1;\n   |             ^^^ help: remove the additional\
    \ `mut`s\n\nerror[E0433]: failed to resolve: use of undeclared type `Even`\n \
    \ --> /tmp/tmp2b693945.rs:11:20\n   |\n11 |     let mut even = Even::zero();\n\
    \   |                    ^^^^ use of undeclared type `Even`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Odd`\n  --> /tmp/tmp2b693945.rs:12:19\n\
    \   |\n12 |     let mut odd = Odd::zero();\n   |                   ^^^ use of\
    \ undeclared type `Odd`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    if num < 0 {\n        (num % 2, num % 2)\n    } else {\n     \
    \   (num / 2, num % 2)\n    }\n}\n\nfn main() {\n    let candidate = even_odd_count;\n\
    \    assert_eq!(candidate(7), (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n\
    \    assert_eq!(candidate(3452), (2, 2));\n    assert_eq!(candidate(346211), (3,\
    \ 3));\n    assert_eq!(candidate(-345821), (3, 3));\n    assert_eq!(candidate(-2),\
    \ (1, 0));\n    assert_eq!(candidate(-45347), (2, 3));\n    assert_eq!(candidate(0),\
    \ (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(3, 1)`,\n right: `(0, 1)`', /tmp/tmpmccbfvlg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut counter = 0;\n    let mut even = 0;\n    let mut odd =\
    \ 0;\n    while num > 0 {\n        counter += 1;\n        num -= (num % (*2));\n\
    \        *even = even * 10;\n        *odd += *even;\n    }\n    (even, odd)\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp41u49ds5.rs:13:16\n\
    \   |\n13 |         num -= (num % (*2));\n   |                ^          ^\n \
    \  |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n13 -         num -= (num % (*2));\n13 +         num -= num % (*2);\n  \
    \ | \n\nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp41u49ds5.rs:13:23\n\
    \   |\n13 |         num -= (num % (*2));\n   |                       ^^^^\n\n\
    error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp41u49ds5.rs:14:9\n\
    \   |\n14 |         *even = even * 10;\n   |         ^^^^^\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmp41u49ds5.rs:15:9\n   |\n15\
    \ |         *odd += *even;\n   |         ^^^^\n\nerror[E0614]: type `{integer}`\
    \ cannot be dereferenced\n  --> /tmp/tmp41u49ds5.rs:15:17\n   |\n15 |        \
    \ *odd += *even;\n   |                 ^^^^^\n\nerror: aborting due to 4 previous\
    \ errors; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 0, mut i = 0;\n    while i <= num {\n\
    \        if num % 2 == 0 {\n            even += 1;\n        } else {\n       \
    \     odd += 1;\n        }\n        i += 1;\n    }\n    (even, odd)\n}\n\nfn main()\
    \ {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp2_vwsdwg.rs:8:21\n  |\n8 |     let mut even = 0, odd = 0, mut i\
    \ = 0;\n  |                     ^ expected one of `.`, `;`, `?`, `else`, or an\
    \ operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010634
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    assert!(num > 0);\n    (num / 10, num % 10).ok_or(Error::NegativeInput)?\n\
    }\n\nfn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n --> /tmp/tmppav1f_1x.rs:9:32\n\
    \  |\n9 |     (num / 10, num % 10).ok_or(Error::NegativeInput)?\n  |         \
    \                       ^^^^^ use of undeclared type `Error`\n\nerror[E0599]:\
    \ no method named `ok_or` found for tuple `(isize, isize)` in the current scope\n\
    \ --> /tmp/tmppav1f_1x.rs:9:26\n  |\n9 |     (num / 10, num % 10).ok_or(Error::NegativeInput)?\n\
    \  |                          ^^^^^ method not found in `(isize, isize)`\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n  --> /tmp/tmppav1f_1x.rs:9:53\n\
    \   |\n7  | / fn even_odd_count(num: isize) -> (isize, isize) {\n8  | |     assert!(num\
    \ > 0);\n9  | |     (num / 10, num % 10).ok_or(Error::NegativeInput)?\n   | |\
    \                                                     ^ cannot use the `?` operator\
    \ in a function that returns `(isize, isize)`\n10 | | }\n   | |_- this function\
    \ should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait\
    \ `FromResidual<_>` is not implemented for `(isize, isize)`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0433,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    (\n        num % 10 // 10 is 0\n            + num / 10 - num /\
    \ 10 % 10 as isize,\n        num / 10 - num / 10 % 10 as isize,\n    )\n}\n\n\
    fn main() {\n    let candidate = even_odd_count;\n    assert_eq!(candidate(7),\
    \ (0, 1));\n    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452),\
    \ (2, 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 0)`,\n right: `(0, 1)`', /tmp/tmp7db1usv8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 1
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut even = 0, odd = 1;\n    for i in num.to_digits().iter()\
    \ {\n        match i {\n            0 => even,\n            1 => odd,\n      \
    \      _ => continue,\n        }\n    }\n    (even, odd)\n}\n\nfn main() {\n \
    \   let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n \
    \   assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2, 2));\n\
    \    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `,`\n\
    \ --> /tmp/tmp4k3i1np6.rs:8:21\n  |\n8 |     let mut even = 0, odd = 1;\n  | \
    \                    ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660010635
- exit_code: 101
  program: "/// Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n/// Example:\n/// >>> even_odd_count(-12)\n/// (1, 1)\n\
    /// >>> even_odd_count(123)\n/// (1, 2)\nfn even_odd_count(num: isize) -> (isize,\
    \ isize) {\n    let mut count = num;\n\n    (num, num / 2)\n}\n\nfn main() {\n\
    \    let candidate = even_odd_count;\n    assert_eq!(candidate(7), (0, 1));\n\
    \    assert_eq!(candidate(-78), (1, 1));\n    assert_eq!(candidate(3452), (2,\
    \ 2));\n    assert_eq!(candidate(346211), (3, 3));\n    assert_eq!(candidate(-345821),\
    \ (3, 3));\n    assert_eq!(candidate(-2), (1, 0));\n    assert_eq!(candidate(-45347),\
    \ (2, 3));\n    assert_eq!(candidate(0), (1, 0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `(7, 3)`,\n right: `(0, 1)`', /tmp/tmpi7q8ni7c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010635
