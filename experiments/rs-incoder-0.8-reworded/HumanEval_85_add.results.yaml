language: rs
name: HumanEval_85_add
results:
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() <= 1 {\n        return 0;\n\
    \    }\n    let mut evens = 0;\n    for &x in lst {\n        if x % 2 == 0 {\n\
    \            evens += x;\n        }\n    }\n    evens\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp_kfsdn8.rs:10:9\n   |\n\
    10 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut num = 0;\n\
    \    for elem in lst {\n        if elem % 2 == 1 {\n            sum += elem;\n\
    \        }\n        else {\n            num = num + elem;\n        }\n    }\n\
    \    if num > 0 {\n        sum += num;\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpz22nb8s9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x| *x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp27ydt38y.rs:6:31\n  |\n6 |\
    \     lst.iter().filter_map(|x| *x % 2 == 0).sum()\n  |                      \
    \         ^^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note: expected\
    \ enum `Option<_>`\n             found type `bool`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n6 |     lst.iter().filter_map(|x| Some(*x % 2 == 0)).sum()\n\
    \  |                               +++++           +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst\n        .into_iter()\n        .filter(|&x|\
    \ x % 2 == 0)\n        .cloned()\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Filter<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpzq6gh2pz.rs:8:17: 8:32]> as Iterator>::Item == &_`\n    -->\
    \ /tmp/tmpzq6gh2pz.rs:9:10\n     |\n9    |         .cloned()\n     |         \
    \ ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected reference\
    \ `&_`\n                     found type `isize`\nnote: required by a bound in\
    \ `cloned`\n\nerror[E0599]: the method `sum` exists for struct `Cloned<Filter<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpzq6gh2pz.rs:8:17: 8:32]>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpzq6gh2pz.rs:10:10\n   |\n10 |            .sum()\n   |         \
    \    ^^^ method cannot be called on `Cloned<Filter<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpzq6gh2pz.rs:8:17: 8:32]>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Filter<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpzq6gh2pz.rs:8:17: 8:32]> as Iterator>::Item = &_`\n       \
    \    which is required by `Cloned<Filter<std::vec::IntoIter<isize>, [closure@/tmp/tmpzq6gh2pz.rs:8:17:\
    \ 8:32]>>: Iterator`\n           `Cloned<Filter<std::vec::IntoIter<isize>, [closure@/tmp/tmpzq6gh2pz.rs:8:17:\
    \ 8:32]>>: Iterator`\n           which is required by `&mut Cloned<Filter<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpzq6gh2pz.rs:8:17: 8:32]>>: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n\
    \    }\n\n    if lst.len() % 2 == 1 {\n        // If there are an odd number of\
    \ elements, add only the last element\n        let last_element = lst.last();\n\
    \        lst.pop();\n        return last_element;\n    }\n\n    // If there are\
    \ an even number of elements, add all the evens\n    let mut sum = 0;\n    for\
    \ n in lst {\n        if n % 2 == 0 {\n            sum += n;\n        }\n    }\n\
    \    return sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6lmpexpi.rs:14:16\n   |\n\
    5  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n14 |         return last_element;\n\
    \   |                ^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum_even = 0;\n    let mut sum_odd\
    \ = 0;\n\n    for &n in lst {\n        if n % 2 == 0 {\n            sum_even +=\
    \ n;\n        } else {\n            sum_odd += n;\n        }\n    }\n\n    sum_even\
    \ + sum_odd\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppsev19w8.rs:9:9\n  |\n9 |\
    \     for &n in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .enumerate()\n   \
    \     .filter(|(_, x)| x % 2 == 0)\n        .map(|(_, x)| x)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp4lzoh1b6.rs:8:28\n\
    \  |\n8 |         .filter(|(_, x)| x % 2 == 0)\n  |                          -\
    \ ^ - {integer}\n  |                          |\n  |                         \
    \ &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n  |\n\
    8 |         .filter(|(_, x)| *x % 2 == 0)\n  |                          +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n    for &i in lst\
    \ {\n        if i % 2 == 0 {\n            total += i;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ypeuliu.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut ret = 0;\n    for i in lst {\n\
    \        if i % 2 == 0 {\n            ret += i;\n        }\n    }\n    ret\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxcaxf6ag.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n        .skip_while(|&i|\
    \ i % 2 == 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpp35q7bzw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n        return 0;\n\
    \    }\n    if lst.len() == 1 {\n        return lst[0] as isize;\n    }\n    let\
    \ even = add(lst.into_iter().filter(|&i| i % 2 == 0)).unwrap();\n    let odd =\
    \ add(lst.into_iter().filter(|&i| i % 2 != 0)).unwrap();\n    (even + odd) as\
    \ isize\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjf_07bi_.rs:12:20\n   |\n\
    12 |     let even = add(lst.into_iter().filter(|&i| i % 2 == 0)).unwrap();\n \
    \  |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `Filter`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Filter<std::vec::IntoIter<isize>, [closure@/tmp/tmpjf_07bi_.rs:12:43:\
    \ 12:58]>`\n\nerror[E0599]: no method named `unwrap` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpjf_07bi_.rs:12:61\n   |\n12 |     let even\
    \ = add(lst.into_iter().filter(|&i| i % 2 == 0)).unwrap();\n   |             \
    \                                                ^^^^^^ method not found in `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjf_07bi_.rs:13:19\n   |\n13 |\
    \     let odd = add(lst.into_iter().filter(|&i| i % 2 != 0)).unwrap();\n   | \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Filter`\n   |\n   = note: expected struct `Vec<isize>`\n     \
    \         found struct `Filter<std::vec::IntoIter<isize>, [closure@/tmp/tmpjf_07bi_.rs:13:42:\
    \ 13:57]>`\n\nerror[E0599]: no method named `unwrap` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpjf_07bi_.rs:13:60\n   |\n13 |     let odd =\
    \ add(lst.into_iter().filter(|&i| i % 2 != 0)).unwrap();\n   |               \
    \                                             ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even: usize = 0;\n    let mut\
    \ odd: usize = 0;\n    let mut sum: isize = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            even = even * 2 + x;\n        } else\
    \ {\n            odd = odd * 2 + x;\n        }\n    }\n    if even % 2 != 0 {\n\
    \        sum += even;\n    }\n    if odd % 2 != 0 {\n        sum += odd;\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp04pdj83n.rs:11:31\n   |\n\
    11 |             even = even * 2 + x;\n   |                               ^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `&isize` to `usize`\n  -->\
    \ /tmp/tmp04pdj83n.rs:11:29\n   |\n11 |             even = even * 2 + x;\n   |\
    \                             ^ no implementation for `usize + &isize`\n   |\n\
    \   = help: the trait `Add<&isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp04pdj83n.rs:13:29\n   |\n13 |             odd = odd * 2\
    \ + x;\n   |                             ^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot add `&isize` to `usize`\n  --> /tmp/tmp04pdj83n.rs:13:27\n\
    \   |\n13 |             odd = odd * 2 + x;\n   |                           ^ no\
    \ implementation for `usize + &isize`\n   |\n   = help: the trait `Add<&isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04pdj83n.rs:17:16\n\
    \   |\n17 |         sum += even;\n   |                ^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmp04pdj83n.rs:17:13\n\
    \   |\n17 |         sum += even;\n   |             ^^ no implementation for `isize\
    \ += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the followin"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().enumerate().filter(|(i,\
    \ el)| i % 2 == 0).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<(usize, isize)>` is not satisfied\n\
    \    --> /tmp/tmpr5eki0u3.rs:6:66\n     |\n6    |     lst.iter().cloned().enumerate().filter(|(i,\
    \ el)| i % 2 == 0).sum()\n     |                                             \
    \                     ^^^ the trait `Sum<(usize, isize)>` is not implemented for\
    \ `isize`\n     |\n     = help: the following other types implement trait `Sum<A>`:\n\
    \               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n         \
    \      <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.reduce(|a, b| {\n        // a += b\
    \ + b // this does not work because b is not an isize\n        // a += b - b //\
    \ this does not work because b is not an isize\n        a += (b % 2 == 0);\n \
    \       a\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n --> /tmp/tmpvc2_lemv.rs:9:14\n\
    \  |\n9 |         a += (b % 2 == 0);\n  |              ^          ^\n  |\n  =\
    \ note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \  |\n9 -         a += (b % 2 == 0);\n9 +         a += b % 2 == 0;\n  | \n\nerror[E0599]:\
    \ `Vec<isize>` is not an iterator\n   --> /tmp/tmpvc2_lemv.rs:6:9\n    |\n6  \
    \ |       lst.reduce(|a, b| {\n    |           ^^^^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    let mut i = 0;\n\
    \    loop {\n        if i % 2 == 0 {\n            res += lst[i];\n           \
    \ i += 1;\n        } else {\n            i += 1;\n        }\n        if i == lst.len()\
    \ {\n            break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpkgwsgf1s.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().zip(lst.iter().skip(1)).take_while(|&(ev,\
    \ odd)| odd % 2 == 0).count()\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd9jfx_qj.rs:6:5\n  |\n5 |\
    \ fn add(lst: Vec<isize>) -> isize {\n  |                            ----- expected\
    \ `isize` because of return type\n6 |     lst.iter().zip(lst.iter().skip(1)).take_while(|&(ev,\
    \ odd)| odd % 2 == 0).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n6 |     lst.iter().zip(lst.iter().skip(1)).take_while(|&(ev,\
    \ odd)| odd % 2 == 0).count().try_into().unwrap()\n  |                       \
    \                                                              ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut new_lst = lst.clone();\n    new_lst.iter().for_each(|x|\
    \ {\n        if x % 2 == 0 {\n            new_lst.push(x);\n        }\n    });\n\
    \    new_lst.into_iter().sum()\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw7088gnu.rs:9:26\n  |\n9 |\
    \             new_lst.push(x);\n  |                          ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \        new_lst.push(*x);\n  |                          +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst[0u] % 2\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error: invalid suffix `u` for number literal\n --> /tmp/tmp0w2jsixm.rs:6:9\n\
    \  |\n6 |     lst[0u] % 2\n  |         ^^ invalid suffix `u`\n  |\n  = help: the\
    \ suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for i in lst.iter().filter(|&i| i % 2\
    \ == 0) {\n        lst.push(i);\n    }\n    lst.pop()\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7yor6qtc.rs:7:18\n  |\n7 |\
    \         lst.push(i);\n  |                  ^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n7 |         lst.push(*i);\n\
    \  |                  +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7yor6qtc.rs:9:5\n\
    \  |\n5 | fn add(lst: Vec<isize>) -> isize {\n  |                            -----\
    \ expected `isize` because of return type\n...\n9 |     lst.pop()\n  |     ^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut even = true;\n\
    \    for x in lst {\n        if even {\n            sum += x;\n        }\n   \
    \     if x%2 == 0 {\n            even = true;\n        } else {\n            even\
    \ = false;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp5gwvmupa.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = 0;\n    for &i in lst\
    \ {\n        if i % 2 == 0 {\n            result += i;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpugiha6c8.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n\n    for &i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            total += i;\n        }\n    }\n\n  \
    \  total\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptfvukqv2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .enumerate()\n   \
    \     .filter(|&(e, x)| e % 2 == 0)\n        .filter(|&(_, x)| x % 2 == 1)\n \
    \       .fold(0, |x, y| x + y)\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `(usize, &isize)` to `isize`\n  --> /tmp/tmp94lvwyet.rs:10:27\n\
    \   |\n10 |         .fold(0, |x, y| x + y)\n   |                           ^ no\
    \ implementation for `isize + (usize, &isize)`\n   |\n   = help: the trait `Add<(usize,\
    \ &isize)>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n          \
    \   <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n            \
    \ <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a\
    \ i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize\
    \ as Add<isize>>\n           and 48 others\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut s = 0; // sum of even elements\n\
    \    for i in lst {\n        if i % 2 == 0 {\n            s += i;\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpr995r_r1.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n\
    \        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpj1c73kzh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().position(|x| x % 2).unwrap()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4hqfjb3t.rs:6:29\n  |\n6 |\
    \     lst.iter().position(|x| x % 2).unwrap()\n  |                           \
    \  ^^^^^ expected `bool`, found `isize`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp4hqfjb3t.rs:6:5\n  |\n5 | fn add(lst: Vec<isize>) -> isize {\n  |  \
    \                          ----- expected `isize` because of return type\n6 |\
    \     lst.iter().position(|x| x % 2).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n6 |     lst.iter().position(|x|\
    \ x % 2).unwrap().try_into().unwrap()\n  |                                   \
    \         ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        0\n    }\
    \ else {\n        let mut sum: usize = 0;\n        for i in lst.iter().skip(1)\
    \ {\n            sum += i;\n        }\n        sum\n    }\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9utk_gm9.rs:11:20\n   |\n\
    11 |             sum += i;\n   |                    ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add-assign `&isize` to `usize`\n  --> /tmp/tmp9utk_gm9.rs:11:17\n\
    \   |\n11 |             sum += i;\n   |                 ^^ no implementation for\
    \ `usize += &isize`\n   |\n   = help: the trait `AddAssign<&isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9utk_gm9.rs:13:9\n\
    \   |\n5  | fn add(lst: Vec<isize>) -> isize {\n   |                         \
    \   ----- expected `isize` because of return type\n...\n13 |         sum\n   |\
    \         ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n13 |     \
    \    sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpwqp128u_.rs:6:29\n\
    \  |\n6 |     lst.iter().filter(|x| x % 2 == 0).sum::<isize>()\n  |          \
    \                 - ^ - {integer}\n  |                           |\n  |      \
    \                     &&isize\n  |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `x`\n  |\n6 |     lst.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n\
    \  |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().map(|&x| if x % 2\
    \ == 1 { x + 1 }).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_teqwgyl.rs:6:30\n  |\n6 |\
    \     lst.iter().cloned().map(|&x| if x % 2 == 1 { x + 1 }).sum()\n  |       \
    \                       ^--\n  |                              ||\n  |        \
    \                      |expected due to this\n  |                            \
    \  expected `isize`, found reference\n  |                              help: did\
    \ you mean `x`: `&isize`\n  |\n  = note:   expected type `isize`\n          found\
    \ reference `&_`\n\nerror[E0277]: the trait bound `isize: Sum<()>` is not satisfied\n\
    \    --> /tmp/tmp_teqwgyl.rs:6:59\n     |\n6    |     lst.iter().cloned().map(|&x|\
    \ if x % 2 == 1 { x + 1 }).sum()\n     |                                     \
    \                      ^^^ the trait `Sum<()>` is not implemented for `isize`\n\
    \     |\n     = help: the following other types implement trait `Sum<A>`:\n  \
    \             <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n           \
    \    <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128\
    \ as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for &ele in lst\
    \ {\n        if ele % 2 == 0 {\n            even += ele;\n        }\n    }\n \
    \   even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyk6ch_sm.rs:7:9\n  |\n7 |\
    \     for &ele in lst {\n  |         ^^^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `ele`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = lst[0];\n    for elem\
    \ in lst.iter().skip(1) {\n        if elem % 2 == 0 {\n            result += elem;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpl4bi99im.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n\n    for value in\
    \ lst {\n        if value % 2 == 0 {\n            even += value;\n        }\n\
    \    }\n\n    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpejztr7xh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n    for &i in\
    \ lst {\n        if i % 2 == 0 {\n            evens.push(i);\n        }\n    }\n\
    \    return evens.iter().sum();\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkuch13sy.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpnqltt1ib.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjqpdl9k3.rs:6:31\n  |\n6 |\
    \     lst.iter().filter_map(|x| x % 2 == 0).sum()\n  |                       \
    \        ^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note: expected\
    \ enum `Option<_>`\n             found type `bool`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n6 |     lst.iter().filter_map(|x| Some(x % 2 == 0)).sum()\n\
    \  |                               +++++          +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, value)\
    \ in lst.iter().enumerate().skip(1) {\n        if index % 2 == 0 {\n         \
    \   result += value;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmph9eu4p_v.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpg3j_846u.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvcynaxhk.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n\
    \    for e in lst {\n        if e % 2 == 0 {\n            even += e;\n       \
    \ }\n        else {\n            odd += e;\n        }\n    }\n    even + odd\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp23xm9jpz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for &i in lst {\n\
    \        if i % 2 == 0 {\n            res += i;\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphup075nz.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = 0;\n    for &i in lst\
    \ {\n        if i % 2 == 0 {\n            result += i;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpugiha6c8.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut even_idx\
    \ = lst.len() - 1;\n    loop {\n        if even_idx >= 0 {\n            sum +=\
    \ lst[even_idx];\n        }\n        if even_idx == 0 {\n            break;\n\
    \        }\n        even_idx -= 2;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmplivltpg5.rs:15:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            even += i;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpfns302xr.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            even += *i;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpgto3nmcw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n\
    \        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_2ryglef.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < lst.len()\
    \ {\n        if i % 2 == 0 {\n            i += 2;\n        }\n        else {\n\
    \            i += 1;\n        }\n    }\n    return i - 1;\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpehrz1aeu.rs:15:12\n   |\n\
    5  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n15 |     return i - 1;\n   | \
    \           ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     return (i - 1).try_into().unwrap();\n   |            +     +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n\
    \    }\n    let mut evens = 0;\n    for i in 1..lst.len() {\n        if lst[i]\
    \ % 2 == 0 {\n            evens += lst[i];\n        }\n    }\n    evens\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmpqr8h2dp7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    debug_assert!(lst\n        .iter()\n \
    \       .any(|&a| a % 2 == 0)\n        && lst\n        .iter()\n        .filter(|&a|\
    \ a % 2 == 0)\n        .all(|a| a % 2 != 0)\n        && lst\n        .iter()\n\
    \        .filter(|&a| a % 2 != 0)\n        .all(|a| a % 2 == 0));\n    debug_assert!(lst\n\
    \        .iter()\n        .filter(|&a| a % 2 != 0)\n        .all(|a| a % 2 !=\
    \ 0));\n    let mut sum = 0;\n    for &a in lst {\n        if a % 2 == 0 {\n \
    \           sum += a;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbpnsrbt_.rs:22:9\n   |\n\
    22 |     for &a in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `a`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even: usize = 0;\n    for &index\
    \ in lst.iter().enumerate() {\n        if *index % 2 == 0 {\n            even\
    \ = even + 1;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpioepss3m.rs:7:9\n  |\n7 |\
    \     for &index in lst.iter().enumerate() {\n  |         ^^^^^^    ----------------------\
    \ this expression has type `Option<(usize, &isize)>`\n  |         |\n  |     \
    \    expected tuple, found reference\n  |         help: you can probably remove\
    \ the explicit borrow: `index`\n  |\n  = note:  expected tuple `(usize, &isize)`\n\
    \          found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpioepss3m.rs:12:5\n\
    \   |\n5  | fn add(lst: Vec<isize>) -> isize {\n   |                         \
    \   ----- expected `isize` because of return type\n...\n12 |     even\n   |  \
    \   ^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n12 |     even.try_into().unwrap()\n\
    \   |         ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut n = 0;\n    for &i in lst {\n\
    \        if i % 2 == 0 {\n            n += i;\n        }\n    }\n    n\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp5s32sd3.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens: Vec<isize> = Vec::new();\n\
    \    for el in lst.iter() {\n        if el % 2 == 0 {\n            evens.push(el);\n\
    \        }\n    }\n    evens\n        .iter()\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf973au3o.rs:9:24\n  |\n9 |\
    \             evens.push(el);\n  |                        ^^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |     \
    \        evens.push(*el);\n  |                        +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    use std::cmp::Ordering;\n    let mut even\
    \ = Vec::new();\n    let mut odd = Vec::new();\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            even.push(i);\n        } else {\n            odd.push(i);\n\
    \        }\n    }\n    if even.len() > odd.len() {\n        even.iter().cloned().collect::<Vec<_>>().into_iter().zip(&odd).filter_map(|v|\
    \ v.ok()).map(|(even, odd)| even+odd).collect::<Vec<_>>().into_iter().cloned().collect::<Vec<_>>()\n\
    \    } else {\n        odd.iter().cloned().collect::<Vec<_>>().into_iter().zip(&even).filter_map(|v|\
    \ v.ok()).map(|(even, odd)| even+odd).collect::<Vec<_>>().into_iter().cloned().collect::<Vec<_>>()\n\
    \    }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmp8gkm6gdx.rs:6:9\n\
    \  |\n6 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method named\
    \ `ok` found for tuple `(isize, &isize)` in the current scope\n  --> /tmp/tmp8gkm6gdx.rs:17:89\n\
    \   |\n17 | ...   even.iter().cloned().collect::<Vec<_>>().into_iter().zip(&odd).filter_map(|v|\
    \ v.ok()).map(|(even, odd)| even+odd).collect::<Vec<_>>...\n   |             \
    \                                                                          ^^\
    \ method not found in `(isize, &isize)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8gkm6gdx.rs:17:9\n   |\n5  | ...d(lst: Vec<isize>) -> isize {\n   |\
    \                          ----- expected `isize` because of return type\n...\n\
    17 | ...   even.iter().cloned().collect::<Vec<_>>().into_iter().zip(&odd).filter_map(|v|\
    \ v.ok()).map(|(even, odd)| even+odd).collect::<Vec<_>>().into_iter().cloned().collect::<Vec<_>>()\n\
    \   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n\
    \            found struct `Vec<_>`\n\nerror[E0599]: no method named `ok` found\
    \ for tuple `(isize, &isize)` in the current scope\n  --> /tmp/tmp8gkm6gdx.rs:19:89\n\
    \   |\n19 | ...   odd.iter().cloned().collect::<Vec<_>>().into_iter().zip(&even).filter_map(|v|\
    \ v.ok()).map(|(even, odd)| even+odd).collect::<Vec<_>>...\n   |             \
    \                                                                          ^^\
    \ method not found in `(isize, &isize)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8gkm6gdx.rs:19:9\n   |\n5  | ...d(lst: Vec<isize>) -> isize {\n   |\
    \                          ----- expected `isize` because of return type\n...\n\
    19 | ...   odd.iter().cloned().collect::<Vec<_>>().into_iter().zip(&even).filter_map(|v|\
    \ v.ok()).map(|(even, odd)| even+odd).collect::<Vec<_>>().into_iter().cloned().collect::<Vec<_>>()\n\
    \  "
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvcynaxhk.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for i in lst.iter().filter(|x| x % 2 ==\
    \ 1).enumerate() {\n        lst[i.0] += 2;\n    }\n    lst[0]\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpggd7rzsi.rs:6:38\n\
    \  |\n6 |     for i in lst.iter().filter(|x| x % 2 == 1).enumerate() {\n  |  \
    \                                  - ^ - {integer}\n  |                      \
    \              |\n  |                                    &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n6 |     for i in lst.iter().filter(|x|\
    \ *x % 2 == 1).enumerate() {\n  |                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp3fge48r5.rs:6:29\n\
    \  |\n6 |     lst.iter().filter(|x| x % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n6 |     lst.iter().filter(|x| *x % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &v in lst.iter()\
    \ {\n        sum += if v & 1 == 1 {\n            v >> 1\n        } else {\n  \
    \          0\n        };\n    }\n    return sum\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp_268y4gc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&n| n % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpuwd12iay.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even: usize = 0;\n    let mut\
    \ odd: usize = 0;\n    for elt in lst {\n        if elt % 2 == 0 {\n         \
    \   even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n  \
    \  even + odd\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp16vcqaez.rs:15:5\n   |\n\
    5  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n15 |     even + odd\n   |    \
    \ ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n15 |     (even\
    \ + odd).try_into().unwrap()\n   |     +          +++++++++++++++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| *x % 2).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphz1vsss7.rs:6:28\n  |\n6 |\
    \     lst.iter().filter(|&x| *x % 2).sum::<isize>()\n  |                     \
    \       ^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        panic!(\"\
    List must have at least 1 element\")\n    }\n\n    if lst.len() > 1 {\n      \
    \  let mut even = 0;\n        let mut odd = 0;\n        for &i in lst {\n    \
    \        if i % 2 == 0 {\n                even += i;\n            } else {\n \
    \               odd += i;\n            }\n        }\n\n        even + odd\n  \
    \  } else {\n        lst[0]\n    }\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwgyrwhw3.rs:13:13\n   |\n\
    13 |         for &i in lst {\n   |             ^^    --- this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `i`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n    for elem in lst\
    \ {\n        if elem % 2 == 0 {\n            total += elem;\n        }\n    }\n\
    \    total\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpm063zk7j.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for el in lst.iter()\
    \ {\n        if el & 1usize > 0 {\n            sum += el;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1av2y2l5.rs:8:17\n  |\n8 |\
    \         if el & 1usize > 0 {\n  |                 ^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: no implementation for `&isize & usize`\n --> /tmp/tmp1av2y2l5.rs:8:15\n\
    \  |\n8 |         if el & 1usize > 0 {\n  |               ^ no implementation\
    \ for `&isize & usize`\n  |\n  = help: the trait `BitAnd<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `BitAnd<Rhs>`:\n\
    \            <&'a i128 as BitAnd<i128>>\n            <&'a i16 as BitAnd<i16>>\n\
    \            <&'a i32 as BitAnd<i32>>\n            <&'a i64 as BitAnd<i64>>\n\
    \            <&'a i8 as BitAnd<i8>>\n            <&'a isize as BitAnd<isize>>\n\
    \            <&'a u128 as BitAnd<u128>>\n            <&'a u16 as BitAnd<u16>>\n\
    \          and 40 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n\
    \    }\n    let mut evens = 0;\n    let mut odds = 0;\n\n    for &v in lst {\n\
    \        if v % 2 == 0 {\n            evens += v;\n        } else {\n        \
    \    odds += v;\n        }\n    }\n    if evens > odds {\n        return evens;\n\
    \    } else {\n        return odds;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdu4_hau8.rs:12:9\n   |\n\
    12 |     for &v in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `v`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens = 0;\n    let mut odds =\
    \ 0;\n    for ele in lst {\n        if ele % 2 == 0 {\n            evens += ele;\n\
    \        } else {\n            odds += ele;\n        }\n    }\n    odds + evens\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcb_eid8y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = Vec::new();\n    for elt\
    \ in lst.iter().cloned() {\n        if elt % 2 == 0 {\n            even.push(elt);\n\
    \        }\n    }\n    let mut sum = 0;\n    for element in even {\n        sum\
    \ += element;\n    }\n    return sum\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4bf9eku7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n\
    \    }\n    let mut i = 0;\n    while i < lst.len() {\n        if lst[i] % 2 !=\
    \ 0 {\n            i += 1;\n        } else {\n            lst[i] += 1;\n     \
    \   }\n    }\n    lst[..]\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgyh4n5h8.rs:17:5\n   |\n\
    5  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n17 |     lst[..]\n   |     ^^^^^^^\
    \ expected `isize`, found slice `[isize]`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpswfiga_q.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n\
    \    }\n\n    let mut even = 0;\n    for i in lst.iter().filter(|&x| x % 2 !=\
    \ 0) {\n        even = i + even;\n    }\n\n    even\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpm36k1ick.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n\
    \        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp6trhrhi8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n\
    \    }\n    let even = lst.iter().filter(|&x| x % 2 == 0).collect::<Vec<isize>>();\n\
    \    let odd = lst.iter().filter(|&x| x % 2 == 1).collect::<Vec<isize>>();\n \
    \   if even.len() == odd.len() {\n        return even.iter().sum::<isize>() +\
    \ (odd.iter().sum::<isize>() - even.iter().sum::<isize>());\n    }\n    odd\n\
    \        .iter()\n        .zip(even.iter())\n        .map(|(&n, &m)| n * m + n).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpypruq82f.rs:9:51\n     |\n9\
    \    |     let even = lst.iter().filter(|&x| x % 2 == 0).collect::<Vec<isize>>();\n\
    \     |                                                   ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpypruq82f.rs:10:50\n\
    \     |\n10   |     let odd = lst.iter().filter(|&x| x % 2 == 1).collect::<Vec<isize>>();\n\
    \     |                                                  ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n\
    \     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens = Vec::new();\n    let mut\
    \ odd_indices = Vec::new();\n    for index in lst.iter().skip(1) {\n        if\
    \ index % 2 == 0 {\n            evens.push(index);\n        } else {\n       \
    \     odd_indices.push(index);\n        }\n    }\n\n    let evens_sum: isize =\
    \ evens.iter().fold(0, |sum, el| sum + el);\n    let odd_indices_sum: isize =\
    \ odd_indices.iter().fold(0, |sum, el| sum + el);\n\n    evens_sum + odd_indices_sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&&isize` to `isize`\n  --> /tmp/tmp0sjg3gi2.rs:16:63\n\
    \   |\n16 |     let evens_sum: isize = evens.iter().fold(0, |sum, el| sum + el);\n\
    \   |                                                               ^ no implementation\
    \ for `isize + &&isize`\n   |\n   = help: the trait `Add<&&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `&&isize` to `isize`\n  --> /tmp/tmp0sjg3gi2.rs:17:75\n\
    \   |\n17 |     let odd_indices_sum: isize = odd_indices.iter().fold(0, |sum,\
    \ el| sum + el);\n   |                                                       \
    \                    ^ no implementation for `isize + &&isize`\n   |\n   = help:\
    \ the trait `Add<&&isize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            even += x;\n       \
    \ } else {\n            odd += x;\n        }\n    }\n    (even + odd) / 2\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `46`,\n right: `88`', /tmp/tmp110lts1y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() <= 2 {\n        return 0;\n\
    \    }\n    let mut evens: usize = 0;\n    let mut odds: usize = 0;\n    let mut\
    \ i: usize = lst.len() - 1;\n    while i >= 0 {\n        odds += 1;\n        i\
    \ -= 1;\n    }\n\n    for v in lst.iter().rev() {\n        evens += v % 2 == 0;\n\
    \    }\n\n    odds + (evens * 2)\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `usize`\n  --> /tmp/tmp37m3f9s_.rs:18:15\n\
    \   |\n18 |         evens += v % 2 == 0;\n   |               ^^ no implementation\
    \ for `usize += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp37m3f9s_.rs:21:5\n\
    \   |\n5  | fn add(lst: Vec<isize>) -> isize {\n   |                         \
    \   ----- expected `isize` because of return type\n...\n21 |     odds + (evens\
    \ * 2)\n   |     ^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |     (odds + (evens * 2)).try_into().unwrap()\n   |     +   \
    \               +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n        .filter(|i|\
    \ i % 2 == 0)\n        .sum::<isize>()\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpd01am6f3.rs:8:23\n\
    \  |\n8 |         .filter(|i| i % 2 == 0)\n  |                     - ^ - {integer}\n\
    \  |                     |\n  |                     &&isize\n  |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `i`\n  |\n8 |         .filter(|i| *i\
    \ % 2 == 0)\n  |                     +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    for (idx,\
    \ v) in lst.iter().enumerate().filter(|(_, v)| *v % 2 == 0).enumerate() {\n  \
    \      even += v as isize;\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `(usize, &isize)` as `isize`\n --> /tmp/tmpg0spcnds.rs:8:17\n\
    \  |\n8 |         even += v as isize;\n  |                 ^^^^^^^^^^ an `as`\
    \ expression can only be used to convert between primitive types or to coerce\
    \ to a specific trait object\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n\n    for i in lst\
    \ {\n        if i % 2 == 0 {\n            total += i;\n        }\n    }\n\n  \
    \  return total;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp9r5h2y_b.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n    for i in lst {\n\
    \        if i % 2 == 0 {\n            total += i;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp4ka9wmqx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for v in lst {\n\
    \        if v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp_0753s_f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpisqgvrl4.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0usize;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            even += 1;\n        }\n    }\n    even\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpebmri6v0.rs:12:5\n   |\n\
    5  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n12 |     even\n   |     ^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     even.try_into().unwrap()\n\
    \   |         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, &val)\
    \ in lst.iter().enumerate().take_while(|&(_, x)| x % 2 == 1) {\n        sum +=\
    \ val;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp69zxp2h4.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxyq96eum.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().filter(|x| {\n   \
    \     x % 2 == 0\n    }).sum()\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp8saktld_.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = 0.0;\n    let mut i =\
    \ 0;\n    loop {\n        if i >= lst.len() {\n            break;\n        }\n\
    \        if lst[i] % 2 == 0 {\n            result += lst[i];\n        }\n    \
    \    i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpsdml6oh7.rs:13:20\n\
    \   |\n13 |             result += lst[i];\n   |                    ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsdml6oh7.rs:17:5\n\
    \   |\n5  | fn add(lst: Vec<isize>) -> isize {\n   |                         \
    \   ----- expected `isize` because of return type\n...\n17 |     result\n   |\
    \     ^^^^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n\
    \    }\n\n    for i in lst.iter_mut() {\n        if i % 2 == 0 {\n           \
    \ *i += 1;\n        }\n    }\n    lst.reduce(0, |a, b| a + b)\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp_nklaj0j.rs:11:14\n\
    \   |\n11 |         if i % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `i`\n   |\n11 |         if *i % 2 == 0 {\n   |         \
    \   +\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp_nklaj0j.rs:15:9\n\
    \    |\n15  |       lst.reduce(0, |a, b| a + b)\n    |           ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0369, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().filter_map(|x| {\n\
    \        if x % 2 == 0 {\n            Some(x)\n        } else {\n            None\n\
    \        }\n    }).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp80z6pqwf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 1).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpsl7t7l5w.rs:6:29\n\
    \  |\n6 |     lst.iter().filter(|x| x % 2 == 1).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n6 |     lst.iter().filter(|x| *x % 2 == 1).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for e in lst {\n\
    \        if e % 2 == 0 {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpv8hss17d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|&i| {\n       \
    \ if i & 1 == 0 {\n            Some(i / 2)\n        } else {\n            None\n\
    \        }\n    }).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `46`,\n right: `88`', /tmp/tmpfq37bv24.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for i in lst.iter_mut().enumerate().filter_map(|(i,\
    \ elem)| {\n        if i % 2 == 0 {\n            Some(elem)\n        } else {\n\
    \            None\n        }\n    }).map(|(_, elem)| elem).sum() {\n        *i\n\
    \    }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp84ju40p1.rs:12:13\n   |\n\
    12 |     }).map(|(_, elem)| elem).sum() {\n   |             ^^^^^^^^-\n   |  \
    \           |       |\n   |             |       expected due to this\n   |   \
    \          expected `isize`, found tuple\n   |\n   = note: expected type `isize`\n\
    \             found tuple `(_, _)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84ju40p1.rs:6:5\n\
    \   |\n5  |   fn add(lst: Vec<isize>) -> isize {\n   |                       \
    \       ----- expected `isize` because of return type\n6  | /     for i in lst.iter_mut().enumerate().filter_map(|(i,\
    \ elem)| {\n7  | |         if i % 2 == 0 {\n8  | |             Some(elem)\n9 \
    \ | |         } else {\n...  |\n13 | |         *i\n14 | |     }\n   | |_____^\
    \ expected `isize`, found `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < lst.len()\
    \ {\n        if lst[i] % 2 == 0 {\n            i += 1;\n        } else {\n   \
    \         lst[i] += 1;\n        }\n    }\n    lst[0]\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpz27wtkgm.rs:11:13\n   |\n5  | fn add(lst: Vec<isize>)\
    \ -> isize {\n   |        --- help: consider changing this to be mutable: `mut\
    \ lst`\n...\n11 |             lst[i] += 1;\n   |             ^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut s = lst[0];\n\n    for &n in lst.iter().skip(1)\
    \ {\n        if n % 2 == 0 {\n            s += n;\n        }\n    }\n\n    s\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptptt9ijz.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n\
    \    for &item in lst.iter() {\n        match item % 2 {\n            0 => even\
    \ += item,\n            _ => odd += item,\n        }\n    }\n    even + odd\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpblvjtf9v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp0iodhtpx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for i in lst.iter().skip_while(|&i| i\
    \ % 2 != 0) {\n        lst.insert(i, 0);\n    }\n    let mut result = lst.clone();\n\
    \    for (i, &e) in lst.iter().enumerate() {\n        if e % 2 == 0 {\n      \
    \      result -= vec![e];\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp408p1m2l.rs:7:20\n  |\n7 |\
    \         lst.insert(i, 0);\n  |                    ^ expected `usize`, found\
    \ `&isize`\n\nerror[E0368]: binary assignment operation `-=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmp408p1m2l.rs:12:13\n   |\n12 |          \
    \   result -= vec![e];\n   |             ------^^^^^^^^^^^\n   |             |\n\
    \   |             cannot use `-=` on type `Vec<isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for val in lst\
    \ {\n        if val % 2 == 0 {\n            even += val;\n        }\n    }\n \
    \   even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpgy05ozk8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().enumerate().filter_map(|(i,\
    \ v)| {\n        if i%2 == 0 {\n            sum += v;\n        }\n        Some(true)\n\
    \    }) {\n        sum += i1.0;\n    }\n    return sum;\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i1` in this scope\n  --> /tmp/tmpljpz4ykb.rs:13:16\n\
    \   |\n13 |         sum += i1.0;\n   |                ^^ help: a local variable\
    \ with a similar name exists: `i`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() % 2 == 1 {\n        lst.iter().skip(1).reduce(|acc,\
    \ val| acc + val)\n    } else {\n        lst.iter().filter(|&x| x % 2 == 0).sum()\n\
    \    }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn_2uk6ma.rs:7:46\n  |\n7 |\
    \         lst.iter().skip(1).reduce(|acc, val| acc + val)\n  |               \
    \                               ^^^^^^^^^\n  |                               \
    \               |\n  |                                              expected `&isize`,\
    \ found `isize`\n  |                                              help: consider\
    \ borrowing here: `&(acc + val)`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn_2uk6ma.rs:7:9\n\
    \  |\n5 | fn add(lst: Vec<isize>) -> isize {\n  |                            -----\
    \ expected `isize` because of return type\n6 |     if lst.len() % 2 == 1 {\n7\
    \ |         lst.iter().skip(1).reduce(|acc, val| acc + val)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n        .filter(|i|\
    \ i % 2 == 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpoil7_5ii.rs:8:23\n\
    \  |\n8 |         .filter(|i| i % 2 == 0)\n  |                     - ^ - {integer}\n\
    \  |                     |\n  |                     &&isize\n  |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `i`\n  |\n8 |         .filter(|i| *i\
    \ % 2 == 0)\n  |                     +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().filter(|&x| x % 2\
    \ == 0).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp81x_9c_w.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() > 0 {\n        if lst.len()\
    \ % 2 != 0 {\n            lst[lst.len() - 1] + *(lst[lst.len() - 1] + 1)\n   \
    \     } else {\n            lst[lst.len() - 1]\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp16b_evb5.rs:8:34\n\
    \  |\n8 |             lst[lst.len() - 1] + *(lst[lst.len() - 1] + 1)\n  |    \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even_positions = vec![false; lst.len()];\n\
    \    for i in 0..lst.len() {\n        if lst[i] % 2 == 0 {\n            even_positions[i]\
    \ = true;\n        }\n    }\n    for i in 0..lst.len() {\n        if !even_positions[i]\
    \ {\n            return lst[i] + 2;\n        }\n    }\n    0\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpd9tnw5p9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst\n        .iter()\n        .filter(|x|\
    \ x.is_odd())\n        .filter(|x| x.is_even())\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&isize` in\
    \ the current scope\n --> /tmp/tmpvmmh_o5n.rs:8:23\n  |\n8 |         .filter(|x|\
    \ x.is_odd())\n  |                       ^^^^^^ method not found in `&&isize`\n\
    \nerror[E0599]: no method named `is_even` found for reference `&&isize` in the\
    \ current scope\n --> /tmp/tmpvmmh_o5n.rs:9:23\n  |\n9 |         .filter(|x| x.is_even())\n\
    \  |                       ^^^^^^^ method not found in `&&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    add(lst, 0, 1)\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 3 arguments were supplied\n\
    \ --> /tmp/tmp2m6g9b1p.rs:6:5\n  |\n6 |     add(lst, 0, 1)\n  |     ^^^ ---  -\
    \  - supplied 3 arguments\n  |     |\n  |     expected 1 argument\n  |\nnote:\
    \ function defined here\n --> /tmp/tmp2m6g9b1p.rs:5:4\n  |\n5 | fn add(lst: Vec<isize>)\
    \ -> isize {\n  |    ^^^ ---------------\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut s = 0;\n    for i in lst {\n \
    \       if i % 2 == 1 {\n            s += i;\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpg18czmfy.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvcynaxhk.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x| if x % 2 ==\
    \ 1 { Some(x * 2) } else { None }).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpssk6cn04.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut\
    \ odd: isize = 0;\n\n    for idx in lst.iter().enumerate() {\n        if idx %\
    \ 2 == 0 {\n            even += idx;\n        } else {\n            odd += idx;\n\
    \        }\n    }\n\n    if even % 2 != 0 {\n        even += 1;\n    }\n\n   \
    \ odd\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `(usize, &isize)` by `{integer}`\n  --> /tmp/tmp1iwh5t0b.rs:10:16\n\
    \   |\n10 |         if idx % 2 == 0 {\n   |            --- ^ - {integer}\n   |\
    \            |\n   |            (usize, &isize)\n\nerror[E0277]: cannot add-assign\
    \ `(usize, &isize)` to `isize`\n  --> /tmp/tmp1iwh5t0b.rs:11:18\n   |\n11 |  \
    \           even += idx;\n   |                  ^^ no implementation for `isize\
    \ += (usize, &isize)`\n   |\n   = help: the trait `AddAssign<(usize, &isize)>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `(usize, &isize)`\
    \ to `isize`\n  --> /tmp/tmp1iwh5t0b.rs:13:17\n   |\n13 |             odd += idx;\n\
    \   |                 ^^ no implementation for `isize += (usize, &isize)`\n  \
    \ |\n   = help: the trait `AddAssign<(usize, &isize)>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for val in lst.iter_mut()\
    \ {\n        if *val % 2 != 0 {\n            *val += 1;\n        }\n        sum\
    \ += *val as isize;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmp8u9d67l_.rs:7:16\n  |\n5 | fn add(lst: Vec<isize>) ->\
    \ isize {\n  |        --- help: consider changing this to be mutable: `mut lst`\n\
    6 |     let mut sum = 0;\n7 |     for val in lst.iter_mut() {\n  |           \
    \     ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp3fge48r5.rs:6:29\n\
    \  |\n6 |     lst.iter().filter(|x| x % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n6 |     lst.iter().filter(|x| *x % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvcynaxhk.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut i = 1;\n\
    \    while i <= lst.len() {\n        if lst[i - 2] % 2 == 0 && lst[i - 1] % 2\
    \ != 0 {\n            sum += lst[i - 1];\n            i += 1;\n        }\n   \
    \     i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpjy3s79l1.rs:9:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut res = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 1 {\n            res += lst[i];\n        }\n    }\n \
    \   return res;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprts9xg6g.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp2pu0nv2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().filter(|&x| x % 2\
    \ == 1).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp9v3yykpg.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for idx in 0..lst.len() {\n        if\
    \ idx % 2 == 0 {\n            lst[idx - 2] as isize + lst[idx - 1] as isize\n\
    \        } else {\n            lst[idx - 1] as isize\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx_1ah2bv.rs:8:13\n   |\n\
    7  | /         if idx % 2 == 0 {\n8  | |             lst[idx - 2] as isize + lst[idx\
    \ - 1] as isize\n   | |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n9  | |         } else {\n10 | |             lst[idx\
    \ - 1] as isize\n11 | |         }\n   | |_________- expected this to be `()`\n\
    \   |\nhelp: consider using a semicolon here\n   |\n11 |         };\n   |    \
    \      +\nhelp: you might have meant to return this value\n   |\n8  |        \
    \     return lst[idx - 2] as isize + lst[idx - 1] as isize;\n   |            \
    \ ++++++                                              +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx_1ah2bv.rs:10:13\n   |\n7  | /         if idx % 2 == 0\
    \ {\n8  | |             lst[idx - 2] as isize + lst[idx - 1] as isize\n9  | |\
    \         } else {\n10 | |             lst[idx - 1] as isize\n   | |         \
    \    ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n11 | |         }\n  \
    \ | |_________- expected this to be `()`\n   |\nhelp: you might have meant to\
    \ return this value\n   |\n10 |             return lst[idx - 1] as isize;\n  \
    \ |             ++++++                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx_1ah2bv.rs:6:5\n   |\n5  |   fn add(lst: Vec<isize>) -> isize\
    \ {\n   |                              ----- expected `isize` because of return\
    \ type\n6  | /     for idx in 0..lst.len() {\n7  | |         if idx % 2 == 0 {\n\
    8  | |             lst[idx - 2] as isize + lst[idx - 1] as isize\n9  | |     \
    \    } else {\n10 | |             lst[idx - 1] as isize\n11 | |         }\n12\
    \ | |     }\n   | |_____^ expected `isize`, found `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpxyq96eum.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .enumerate()\n   \
    \     .filter(|(_, elem)| elem % 2 == 0)\n        .fold(0, |a, b| a + b)\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp7c_8v9g2.rs:8:34\n\
    \  |\n8 |         .filter(|(_, elem)| elem % 2 == 0)\n  |                    \
    \         ---- ^ - {integer}\n  |                             |\n  |         \
    \                    &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `elem`\n  |\n8 |         .filter(|(_, elem)| *elem % 2 == 0)\n  |          \
    \                   +\n\nerror[E0277]: cannot add `(usize, &isize)` to `isize`\n\
    \ --> /tmp/tmp7c_8v9g2.rs:9:27\n  |\n9 |         .fold(0, |a, b| a + b)\n  | \
    \                          ^ no implementation for `isize + (usize, &isize)`\n\
    \  |\n  = help: the trait `Add<(usize, &isize)>` is not implemented for `isize`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0369.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut ans = 0;\n    for (i, elt) in\
    \ lst.into_iter().enumerate() {\n        if i % 2 == 0 {\n            ans += elt;\n\
    \        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp5dxj7qpp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in lst {\n\
    \        if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpljz5c1fy.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 1 {\n            even = i + even;\n        }\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpzh26mzrh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<(usize, isize)>` is not satisfied\n\
    \    --> /tmp/tmp94pos2y3.rs:6:66\n     |\n6    |     lst.iter().cloned().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).sum::<isize>()\n     |                                     \
    \                             ^^^ the trait `Sum<(usize, isize)>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = 0;\n    for n in lst\
    \ {\n        if n % 2 == 0 {\n            result += n;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpybuwvohq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for i in lst {\n        if i % 2 == 0\
    \ {\n            return i;\n        }\n    }\n    0\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp6cmlsh1e.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let evens = lst\n        .iter()\n   \
    \     .filter(|x| x % 2 == 0)\n        .cloned()\n        .collect();\n\n    let\
    \ evens_len = evens.len();\n    let mut i = 0;\n    for (index, val) in evens.into_iter().zip(lst.iter().cloned())\
    \ {\n        if index % 2 == 0 {\n            i += val;\n        }\n    }\n\n\
    \    i\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpwi0cbbci.rs:8:23\n\
    \  |\n8 |         .filter(|x| x % 2 == 0)\n  |                     - ^ - {integer}\n\
    \  |                     |\n  |                     &&isize\n  |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `x`\n  |\n8 |         .filter(|x| *x\
    \ % 2 == 0)\n  |                     +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut s = 0;\n    for val in lst {\n\
    \        if val % 2 == 0 {\n            s += val;\n        }\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmph_8onilz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp2pu0nv2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp2pu0nv2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpvcynaxhk.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823166
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 1;\n\
    \    for i in lst.iter() {\n        if i % 2 == 0 {\n            even = even +\
    \ i;\n        } else {\n            odd += i;\n        }\n    }\n    even\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmponyke1cy.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmptoy9jjsz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut result = lst[0] as isize;\n\n\
    \    for &i in lst {\n        if i % 2 == 0 {\n            result += i;\n    \
    \    }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5wcwv2pi.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &n in lst {\n\
    \        if n % 2 == 0 {\n            sum += n;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp867u75j4.rs:7:9\n  |\n7 |\
    \     for &n in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `n`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens: Vec<isize>;\n    let mut\
    \ odd: Vec<isize>;\n    evens = lst.iter().filter(|&i| i % 2 == 0).collect();\n\
    \    odd = lst.iter().filter(|&i| i % 2 != 0).collect();\n\n    evens.iter().fold(0,\
    \ |acc, _| acc + odd.last());\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp8do_48fe.rs:8:48\n     |\n8\
    \    |     evens = lst.iter().filter(|&i| i % 2 == 0).collect();\n     |     \
    \                                           ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp8do_48fe.rs:9:46\n\
    \     |\n9    |     odd = lst.iter().filter(|&i| i % 2 != 0).collect();\n    \
    \ |                                              ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: cannot add `Option<&isize>` to `{integer}`\n\
    \  --> /tmp/tmp8do_48fe.rs:11:39\n   |\n11 |     evens.iter().fold(0, |acc, _|\
    \ acc + odd.last());\n   |                                       ^ no implementation\
    \ for `{integer} + Option<&isize>`\n   |\n   = help: the trait `Add<Option<&isize>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8do_48fe.rs:5:28\n\
    \   |\n5  | fn add(lst: Vec<isize>) -> isize {\n   |    ---                  \
    \   ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no t"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 1).fold(0,\
    \ |acc, &x| acc + x)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpou5mkjtp.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n\
    \        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkz5eeh57.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() % 2 != 0 {\n        0\n \
    \   } else {\n        lst.iter().skip(1).fold(0, |x, y| x + y)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `142`,\n right: `122`', /tmp/tmp_p4vr6v5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().zip(lst.iter().skip(1)).filter(|&(even,\
    \ odd)| even % 2).sum::<isize>()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqr984ws1.rs:6:62\n  |\n6 |\
    \     lst.iter().zip(lst.iter().skip(1)).filter(|&(even, odd)| even % 2).sum::<isize>()\n\
    \  |                                                              ^^^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror[E0277]: the trait bound `isize: Sum<(&isize,\
    \ &isize)>` is not satisfied\n    --> /tmp/tmpqr984ws1.rs:6:72\n     |\n6    |\
    \     lst.iter().zip(lst.iter().skip(1)).filter(|&(even, odd)| even % 2).sum::<isize>()\n\
    \     |                                                                      \
    \  ^^^ the trait `Sum<(&isize, &isize)>` is not implemented for `isize`\n    \
    \ |\n     = help: the following other types implement trait `Sum<A>`:\n      \
    \         <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64\
    \ as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for i in lst.iter().filter_map(|&x|\
    \ {\n        if x % 2 == 0 {\n            even+=x;\n            Some(x)\n    \
    \    } else {\n            None\n        }\n    }) {\n        even+=i;\n    }\n\
    \    even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0503]: cannot use `even` because it was mutably borrowed\n  -->\
    \ /tmp/tmpe40rpx18.rs:15:9\n   |\n7  |       for i in lst.iter().filter_map(|&x|\
    \ {\n   |                -                     ---- borrow of `even` occurs here\n\
    \   |  ______________|\n   | |\n8  | |         if x % 2 == 0 {\n9  | |       \
    \      even+=x;\n   | |             ---- borrow occurs due to use of `even` in\
    \ closure\n10 | |             Some(x)\n...  |\n13 | |         }\n14 | |     })\
    \ {\n   | |______- borrow later used here\n15 |           even+=i;\n   |     \
    \      ^^^^^^^ use of borrowed `even`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0503`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n\
    \n    for v in lst.iter().enumerate() {\n        if v % 2 == 0 {\n           \
    \ even += v;\n        } else {\n            odd += v;\n        }\n    }\n\n  \
    \  return even + odd;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `(usize, &isize)` by `{integer}`\n  --> /tmp/tmpllte1e7h.rs:10:14\n\
    \   |\n10 |         if v % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            (usize, &isize)\n\nerror[E0277]: cannot add-assign\
    \ `(usize, &isize)` to `{integer}`\n  --> /tmp/tmpllte1e7h.rs:11:18\n   |\n11\
    \ |             even += v;\n   |                  ^^ no implementation for `{integer}\
    \ += (usize, &isize)`\n   |\n   = help: the trait `AddAssign<(usize, &isize)>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror[E0277]: cannot add-assign `(usize, &isize)`\
    \ to `{integer}`\n  --> /tmp/tmpllte1e7h.rs:13:17\n   |\n13 |             odd\
    \ += v;\n   |                 ^^ no implementation for `{integer} += (usize, &isize)`\n\
    \   |\n   = help: the trait `AddAssign<(usize, &isize)>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.reduce(|x, y| x + y) / 2\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmp33ryeajk.rs:6:9\n\
    \    |\n6   |       lst.reduce(|x, y| x + y) / 2\n    |           ^^^^^^ `Vec<isize>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for &index in lst.iter().rev() {\n   \
    \     if index & 1 == 0 {\n            return index;\n        }\n    }\n    0\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `0`', /tmp/tmpusfbjwq5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp2pu0nv2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|e| e % 2 == 1).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmphjxjeyti.rs:6:29\n\
    \  |\n6 |     lst.iter().filter(|e| e % 2 == 1).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `e`\n  |\n6 |     lst.iter().filter(|e| *e % 2 == 1).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even_index = 0;\n    let mut odd_index\
    \ = 0;\n    let mut sum = 0;\n    while even_index < lst.len() && odd_index <\
    \ lst.len() {\n        if lst[even_index] % 2 == 0 {\n            sum += lst[even_index];\n\
    \            even_index += 1;\n        } else {\n            sum += lst[odd_index];\n\
    \            odd_index += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp3d9e4w0f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0;\n\
    \    }\n    if lst.len() == 1 {\n        return lst[0] + lst[0];\n    }\n    if\
    \ lst.len() == 2 {\n        return lst[0] + lst[1] + lst[0];\n    }\n    if lst.len()\
    \ == 3 {\n        return lst[0] + lst[1] + lst[2] + lst[0];\n    }\n    if lst.len()\
    \ == 4 {\n        return lst[0] + lst[1] + lst[2] + lst[3] + lst[0];\n    }\n\
    \    if lst.len() == 5 {\n        return lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\
    \ + lst[0];\n    }\n    if lst.len() == 6 {\n        return lst[0] + lst[1] +\
    \ lst[2] + lst[3] + lst[4] + lst[5] + lst[0];\n    }\n    if lst.len() == 7 {\n\
    \        return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] +\
    \ lst[0];\n    }\n    if lst.len() == 8 {\n        return lst[0] + lst[1] + lst[2]\
    \ + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[0];\n    }\n    if lst.len()\
    \ == 9 {\n        return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] +\
    \ lst[6] + lst[7] + lst[8] + lst[0];\n    }\n    if lst.len() == 10 {\n      \
    \  return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\
    \ + lst[8] + lst[9] + lst[0];\n    }\n    if lst.len() == 11 {\n        return\
    \ lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8]\
    \ + lst[9] + lst[10] + lst[0];\n    }\n    if lst.len() == 12 {\n        return\
    \ lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8]\
    \ + lst[9] + lst[10] + lst[11] + lst[0];\n    }\n    if lst.len() == 13 {\n  \
    \      return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\
    \ + lst[8] + lst[9] + lst[10] + lst[11] + lst[12] + lst[0];\n    }\n    if lst.len()\
    \ == 14 {\n        return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\
    \ + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11] + lst[12] + lst[13]\
    \ + lst[0];\n    }\n    if lst.len() == 15 {\n        return lst[0] + lst[1] +\
    \ lst[2] + \n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpuhk933k_.rs:61:3\n\
    \   |\n5  | fn add(lst: Vec<isize>) -> isize {\n   |                         \
    \         - unclosed delimiter\n...\n51 |     if lst.len() == 15 {\n   |     \
    \                   - this delimiter might not be properly closed...\n52 |   \
    \      return lst[0] + lst[1] + lst[2] + \n53 | }\n   | - ...as it matches this\
    \ but it has different indentation\n...\n61 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmpuhk933k_.rs:53:1\n   |\n53 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpuhk933k_.rs:5:28\n  |\n5 | fn add(lst:\
    \ Vec<isize>) -> isize {\n  |    ---                     ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &v in lst {\n\
    \        if v & 1 == 1 {\n            sum += v;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu1o1xu4d.rs:7:9\n  |\n7 |\
    \     for &v in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `v`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens = 0;\n    for i in lst.iter().skip(1).enumerate().filter(|&(_,\
    \ x)| x % 2 == 0) {\n        evens += i?;\n    }\n    evens\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the `?` operator can only be applied to values that implement\
    \ `Try`\n --> /tmp/tmp2l3pbitx.rs:8:18\n  |\n8 |         evens += i?;\n  |   \
    \               ^^ the `?` operator cannot be applied to type `(usize, &isize)`\n\
    \  |\n  = help: the trait `Try` is not implemented for `(usize, &isize)`\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n  --> /tmp/tmp2l3pbitx.rs:8:19\n\
    \   |\n5  | / fn add(lst: Vec<isize>) -> isize {\n6  | |     let mut evens = 0;\n\
    7  | |     for i in lst.iter().skip(1).enumerate().filter(|&(_, x)| x % 2 == 0)\
    \ {\n8  | |         evens += i?;\n   | |                   ^ cannot use the `?`\
    \ operator in a function that returns `isize`\n9  | |     }\n10 | |     evens\n\
    11 | | }\n   | |_- this function should return `Result` or `Option` to accept\
    \ `?`\n   |\n   = help: the trait `FromResidual<_>` is not implemented for `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() <= 1 {\n        return 0;\n\
    \    }\n\n    let mut even = 0;\n    let mut odd = 1;\n    for i in 1..lst.len()\
    \ {\n        if odd == lst.len() {\n            break;\n        }\n        if\
    \ lst[odd] % 2 == 0 {\n            even = even + 1;\n        } else {\n      \
    \      odd += 1;\n        }\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `88`', /tmp/tmphi05ujx6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = lst.get(0);\n    let mut\
    \ odd = lst.get(1);\n    for i in 2..lst.len() {\n        if even % 2 == 0 &&\
    \ odd % 2 == 1 {\n            even += lst[i];\n            odd = lst[i];\n   \
    \     } else {\n            break;\n        }\n    }\n    even\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `Option<&isize>` by `{integer}`\n --> /tmp/tmp9qytr2vs.rs:9:17\n\
    \  |\n9 |         if even % 2 == 0 && odd % 2 == 1 {\n  |            ---- ^ -\
    \ {integer}\n  |            |\n  |            Option<&isize>\n\nerror[E0369]:\
    \ cannot mod `Option<&isize>` by `{integer}`\n --> /tmp/tmp9qytr2vs.rs:9:33\n\
    \  |\n9 |         if even % 2 == 0 && odd % 2 == 1 {\n  |                    \
    \         --- ^ - {integer}\n  |                             |\n  |          \
    \                   Option<&isize>\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Option<&isize>`\n  --> /tmp/tmp9qytr2vs.rs:10:13\n\
    \   |\n10 |             even += lst[i];\n   |             ----^^^^^^^^^^\n   |\
    \             |\n   |             cannot use `+=` on type `Option<&isize>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9qytr2vs.rs:11:19\n   |\n7  |  \
    \   let mut odd = lst.get(1);\n   |                   ---------- expected due\
    \ to this value\n...\n11 |             odd = lst[i];\n   |                   ^^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9qytr2vs.rs:16:5\n\
    \   |\n5  | fn add(lst: Vec<isize>) -> isize {\n   |                         \
    \   ----- expected `isize` because of return type\n...\n16 |     even\n   |  \
    \   ^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected type\
    \ `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0368, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        0\n    } else\
    \ {\n        let mut sum = 0;\n        for v in lst {\n            if v % 2 ==\
    \ 0 {\n                sum += v;\n            }\n        }\n        sum\n    }\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpq08z74w8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for n in lst.iter().rev() {\n        if\
    \ n % 2 == 0 {\n            return n;\n        }\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq5yurzxb.rs:8:20\n  |\n8 |\
    \             return n;\n  |                    ^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n8 |             return *n;\n\
    \  |                    +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst.iter().rev()\
    \ {\n        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp0iodhtpx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpngec4iih.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = lst.len();\n\
    \    while odd > 0 {\n        if lst.len() % 2 != 0 {\n            even += lst.len()\
    \ / 2;\n        }\n        odd /= 2;\n    }\n    even\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuxsbslw2.rs:14:5\n   |\n\
    5  | fn add(lst: Vec<isize>) -> isize {\n   |                            -----\
    \ expected `isize` because of return type\n...\n14 |     even\n   |     ^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n14 |     even.try_into().unwrap()\n\
    \   |         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            total += i;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpa_6d8062.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().filter(|&x|\
    \ x % 2 == 1) {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp412t7ehb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|&i| {\n       \
    \ i % 2 != 0 // Filtering odd and even elements\n    }).sum() // Summing even\
    \ elements in the vector\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp04kvya4k.rs:7:9\n  |\n7 |\
    \         i % 2 != 0 // Filtering odd and even elements\n  |         ^^^^^^^^^^\
    \ expected enum `Option`, found `bool`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n7 |         Some(i % 2 != 0) // Filtering odd and even elements\n  |   \
    \      +++++          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in lst {\n\
    \        if x.is_even() {\n            sum += x;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp58893hum.rs:8:14\n  |\n8 |         if x.is_even() {\n  |\
    \              ^^^^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() > 0 {\n        let even_indices\
    \ = lst.iter().filter(|x| x % 2 == 0).collect::<Vec<isize>>();\n        let even\
    \ = even_indices.iter().fold(0, |a, i| a + i);\n        let odd_indices = lst.iter().filter(|x|\
    \ x % 2 != 0).collect::<Vec<isize>>();\n        let mut odd = odd_indices.iter().fold(0,\
    \ |a, i| a + i);\n        let result = even.max(odd);\n        result\n    }\n\
    \    else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp5mb1gzhr.rs:7:52\n\
    \  |\n7 |         let even_indices = lst.iter().filter(|x| x % 2 == 0).collect::<Vec<isize>>();\n\
    \  |                                                  - ^ - {integer}\n  |   \
    \                                               |\n  |                       \
    \                           &&isize\n  |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `x`\n  |\n7 |         let even_indices = lst.iter().filter(|x|\
    \ *x % 2 == 0).collect::<Vec<isize>>();\n  |                                 \
    \                 +\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built\
    \ from an iterator over elements of type `&isize`\n    --> /tmp/tmp5mb1gzhr.rs:7:62\n\
    \     |\n7    |         let even_indices = lst.iter().filter(|x| x % 2 == 0).collect::<Vec<isize>>();\n\
    \     |                                                              ^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror[E0369]: cannot mod `&&isize` by\
    \ `{integer}`\n --> /tmp/tmp5mb1gzhr.rs:9:51\n  |\n9 |         let odd_indices\
    \ = lst.iter().filter(|x| x % 2 != 0).collect::<Vec<isize>>();\n  |          \
    \                                       - ^ - {integer}\n  |                 \
    \                                |\n  |                                      \
    \           &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n9 |         let odd_indices = lst.iter().filter(|x| *x % 2 != 0).collect::<Vec<isize>>();\n\
    \  |                                                 +\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmp5mb1gzhr.rs:9:61\n     |\n9    |         let odd_indices\
    \ = lst.iter().filter(|x| x % 2 != 0).collect::<Vec<isize>>();\n     |       \
    \                                                      ^^^^^^^"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for i in 0..lst.len() {\n        if i\
    \ % 2 == 1 {\n            lst[i] += 1;\n        }\n    }\n    lst[0]\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmp44e0h1xl.rs:8:13\n  |\n5 | fn add(lst: Vec<isize>) ->\
    \ isize {\n  |        --- help: consider changing this to be mutable: `mut lst`\n\
    ...\n8 |             lst[i] += 1;\n  |             ^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.is_empty() {\n        0\n    }\
    \ else {\n        let mut even = 0;\n        let mut odd = 0;\n        for (i,\
    \ el) in lst.iter().enumerate() {\n            if i % 2 == 0 {\n             \
    \   even += el;\n            } else {\n                odd += el;\n          \
    \  }\n        }\n        even + odd\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp30a8d_4h.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for ele in lst\
    \ {\n        if ele % 2 == 0 {\n            even += ele;\n        }\n    }\n \
    \   even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpyc8j4a1r.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even_index = 0usize;\n    let\
    \ mut odd_index = 0usize;\n\n    for &i in lst {\n        if i & 1 != 0 {\n  \
    \          odd_index += 1;\n        }\n\n        even_index += 1;\n    }\n\n \
    \   odd_index - even_index + 1\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6hk1zcof.rs:9:9\n  |\n9 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6hk1zcof.rs:17:5\n   |\n5  | fn add(lst: Vec<isize>) -> isize {\n\
    \   |                            ----- expected `isize` because of return type\n\
    ...\n17 |     odd_index - even_index + 1\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n17 |     (odd_index\
    \ - even_index + 1).try_into().unwrap()\n   |     +                          +++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().fold(0, |a, &b| if b % 2 !=\
    \ 0 { a + b })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n --> /tmp/tmppux43pfn.rs:6:32\n\
    \  |\n6 |     lst.iter().fold(0, |a, &b| if b % 2 != 0 { a + b })\n  |       \
    \                         ^^^^^^^^^^^^^^^^-----^^\n  |                       \
    \         |               |\n  |                                |            \
    \   found here\n  |                                expected `()`, found `isize`\n\
    \  |\n  = note: `if` expressions without `else` evaluate to `()`\n  = help: consider\
    \ adding an `else` block that evaluates to the expected type\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0317`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() == 0 {\n        return 0\n\
    \    }\n    if lst.len() == 1 {\n        return lst[0]\n    }\n\n    let even\
    \ = add(lst.subvec(0, lst.len() / 2))\n    let odd = add(lst.subvec(lst.len()\
    \ / 2, lst.len()))\n    even + odd\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4ip817hc.rs:13:49\n\
    \   |\n13 |     let even = add(lst.subvec(0, lst.len() / 2))\n   |           \
    \                                      ^ help: add `;` here\n14 |     let odd\
    \ = add(lst.subvec(lst.len() / 2, lst.len()))\n   |     --- unexpected token\n\
    \nerror: expected `;`, found `even`\n  --> /tmp/tmp4ip817hc.rs:14:56\n   |\n14\
    \ |     let odd = add(lst.subvec(lst.len() / 2, lst.len()))\n   |            \
    \                                            ^ help: add `;` here\n15 |     even\
    \ + odd\n   |     ---- unexpected token\n\nerror[E0599]: no method named `subvec`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp4ip817hc.rs:13:24\n\
    \   |\n13 |     let even = add(lst.subvec(0, lst.len() / 2))\n   |           \
    \             ^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method\
    \ named `subvec` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp4ip817hc.rs:14:23\n\
    \   |\n14 |     let odd = add(lst.subvec(lst.len() / 2, lst.len()))\n   |    \
    \                   ^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n\n    for &i in lst\
    \ {\n        if i % 2 == 0 {\n            even += i;\n        }\n    }\n\n   \
    \ even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphcii_99p.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even = 0;\n    for val in lst\
    \ {\n        if val % 2 == 0 {\n            even += val;\n        }\n    }\n \
    \   even\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpgy05ozk8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|i| i % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpjge87pvf.rs:6:29\n\
    \  |\n6 |     lst.iter().filter(|i| i % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `i`\n  |\n6 |     lst.iter().filter(|i| *i % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n\
    \        if i % 2 != 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpb_bcc4vo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() <= 1 {\n        return 0;\n\
    \    }\n    for i in 2..lst.len() {\n        if lst[i] - lst[i - 1] % 2 == 0 {\n\
    \            return lst[i] - lst[i - 1];\n        }\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpjqoqt23e.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    if lst.len() < 2 {\n        return 0;\n\
    \    }\n\n    let mut sum = 0;\n    for index in 0..lst.len() - 1 {\n        if\
    \ index % 2 == 0 {\n            sum += lst[index];\n        }\n    }\n\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpiz9bu270.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp2pu0nv2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| *x % 2 == 0).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpswfiga_q.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in lst {\n\
    \        if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjpetahxz.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter()\n        .filter(|x| x % 2\
    \ == 0)\n        .map(|x| x % 2 == 1 ? x + 1 : x)\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `x`\n\
    \ --> /tmp/tmped1oxtn3.rs:8:31\n  |\n8 |         .map(|x| x % 2 == 1 ? x + 1 :\
    \ x)\n  |                              -^ expected one of `)`, `,`, `.`, `?`,\
    \ or an operator\n  |                              |\n  |                    \
    \          help: missing `,`\n\nerror[E0425]: cannot find value `x` in this scope\n\
    \ --> /tmp/tmped1oxtn3.rs:8:31\n  |\n8 |         .map(|x| x % 2 == 1 ? x + 1 :\
    \ x)\n  |                               ^ not found in this scope\n\nerror[E0412]:\
    \ cannot find type `x` in this scope\n --> /tmp/tmped1oxtn3.rs:8:39\n  |\n8 |\
    \         .map(|x| x % 2 == 1 ? x + 1 : x)\n  |                              \
    \         ^ expecting a type here because of type ascription\n\nerror[E0369]:\
    \ cannot mod `&&isize` by `{integer}`\n --> /tmp/tmped1oxtn3.rs:7:23\n  |\n7 |\
    \         .filter(|x| x % 2 == 0)\n  |                     - ^ - {integer}\n \
    \ |                     |\n  |                     &&isize\n  |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `x`\n  |\n7 |         .filter(|x| *x\
    \ % 2 == 0)\n  |                     +\n\nerror[E0277]: the `?` operator can only\
    \ be applied to values that implement `Try`\n --> /tmp/tmped1oxtn3.rs:8:27\n \
    \ |\n8 |         .map(|x| x % 2 == 1 ? x + 1 : x)\n  |                       \
    \    ^^^ the `?` operator cannot be applied to type `{integer}`\n  |\n  = help:\
    \ the trait `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?`\
    \ operator can only be used in a closure that returns `Result` or `Option` (or\
    \ another type that implements `FromResidual`)\n --> /tmp/tmped1oxtn3.rs:8:29\n\
    \  |\n8 |         .map(|x| x % 2 == 1 ? x + 1 : x)\n  |              ---------------^\n\
    \  |              |              |\n  |              |              cannot use\
    \ the `?` operator in a closure that returns `bool`\n  |              this function\
    \ should return `Result` or `Option` to accept `?`\n  |\n  = help: the trait `FromResidual<_>`\
    \ is not implemented for `bool`\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n   --> /tmp/tmped1oxtn3.rs:8:10\n    |\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().filter(|&i|\
    \ i % 2 == 0) {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpr9chs70z.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even_index = 0;\n    let mut odd_index\
    \ = 0;\n\n    for i in lst.iter() {\n        if i % 2 == 0 {\n            even_index\
    \ += i;\n        } else {\n            odd_index += i;\n        }\n    }\n\n \
    \   even_index\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpqolcjc_9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut cnt = 0;\n\n    for &i in lst.iter().skip(1)\
    \ {\n        if i % 2 == 0 {\n            cnt += i;\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmp2owkuu0t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut total = 0;\n    for x in lst {\n\
    \        if x % 2 == 1 {\n            total += x;\n        }\n    }\n    return\
    \ total\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpoql49rq_.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|&x| if x % 2 ==\
    \ 0 {Some(x)} else {None}).sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpq8e1vlwt.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter_mut()\
    \ {\n        if i % 2 == 0 {\n            *i += 1;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n --> /tmp/tmp16s2ahoy.rs:8:14\n\
    \  |\n8 |         if i % 2 == 0 {\n  |            - ^ - {integer}\n  |       \
    \     |\n  |            &mut isize\n  |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `i`\n  |\n8 |         if *i % 2 == 0 {\n  |            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens = 0;\n\n    for i in lst.iter()\
    \ {\n        if i % 2 == 0 {\n            evens += i;\n        }\n    }\n\n  \
    \  evens\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpdmf7s7c5.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens = 0;\n    let mut odds =\
    \ 0;\n\n    for v in lst {\n        if v % 2 == 0 {\n            evens += v;\n\
    \        } else {\n            odds += v;\n        }\n    }\n    evens + odds\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmprc76vz4g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter().enumerate().skip(1).filter(|(_,\
    \ elem)| elem % 2 == 1) {\n        sum += *i;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpjj0yp9x5.rs:7:69\n\
    \  |\n7 |     for i in lst.iter().enumerate().skip(1).filter(|(_, elem)| elem\
    \ % 2 == 1) {\n  |                                                           \
    \     ---- ^ - {integer}\n  |                                                \
    \                |\n  |                                                      \
    \          &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `elem`\n  |\n7 |     for i in lst.iter().enumerate().skip(1).filter(|(_, elem)|\
    \ *elem % 2 == 1) {\n  |                                                     \
    \           +\n\nerror[E0614]: type `(usize, &isize)` cannot be dereferenced\n\
    \ --> /tmp/tmpjj0yp9x5.rs:8:16\n  |\n8 |         sum += *i;\n  |             \
    \   ^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0369, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|n| n % 2 == 1).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6csvbat1.rs:6:31\n  |\n6 |\
    \     lst.iter().filter_map(|n| n % 2 == 1).sum::<isize>()\n  |              \
    \                 ^^^^^^^^^^ expected enum `Option`, found `bool`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\nhelp: try wrapping\
    \ the expression in `Some`\n  |\n6 |     lst.iter().filter_map(|n| Some(n % 2\
    \ == 1)).sum::<isize>()\n  |                               +++++          +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for val in lst {\n\
    \        if val % 2 == 0 {\n            sum += val;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpc9gs156g.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for v in lst {\n\
    \        if v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp38vt7qln.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst.iter_mut()\
    \ {\n        if *i %2 != 0 {\n            *i += 1;\n        }\n    }\n    for\
    \ v in lst.iter() {\n        *v += 1;\n    }\n    for v in lst.iter() {\n    \
    \    if *v % 2 == 0 {\n            sum += *v;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `lst` as mutable, as it is not declared as\
    \ mutable\n --> /tmp/tmpd51k4lia.rs:7:14\n  |\n5 | fn add(lst: Vec<isize>) ->\
    \ isize {\n  |        --- help: consider changing this to be mutable: `mut lst`\n\
    6 |     let mut sum = 0;\n7 |     for i in lst.iter_mut() {\n  |             \
    \ ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0594]: cannot assign to `*v`,\
    \ which is behind a `&` reference\n  --> /tmp/tmpd51k4lia.rs:13:9\n   |\n12 |\
    \     for v in lst.iter() {\n   |              ---------- this iterator yields\
    \ `&` references\n13 |         *v += 1;\n   |         ^^^^^^^ `v` is a `&` reference,\
    \ so the data it refers to cannot be written\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0594, E0596.\nFor more information\
    \ about an error, try `rustc --explain E0594`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst[0] + lst[1]\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmp1lc83329.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i| i % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpp2pu0nv2.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut even: Vec<isize> = Vec::new();\n\
    \    for i in 0..(lst.len() - 1) {\n        if i % 2 == 0 {\n            even.push(lst[i]);\n\
    \        }\n    }\n    even.iter().sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp9ejim8ww.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().map(|&x| x % 2).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp8lzyw6n4.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| *x % 2 != 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpwzp1j4_p.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut evens = vec![];\n    for e in\
    \ lst {\n        if e%2 == 0 {\n            evens.push(e);\n        }\n    }\n\
    \    evens.iter().fold(0, |sum, n| sum + n)\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpi9swgl9d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 101
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n\
    \        if i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmplpyff94c.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.remove(0)\n        .iter()\n     \
    \   .fold(0, |acc, n| acc + n)\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpbii89tfe.rs:7:10\n  |\n7 |         .iter()\n  |        \
    \  ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x| x % 2).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk5dkjdpx.rs:6:31\n  |\n6 |\
    \     lst.iter().filter_map(|x| x % 2).sum::<isize>()\n  |                   \
    \            ^^^^^ expected enum `Option`, found `isize`\n  |\n  = note: expected\
    \ enum `Option<_>`\n             found type `isize`\nhelp: try wrapping the expression\
    \ in `Some`\n  |\n6 |     lst.iter().filter_map(|x| Some(x % 2)).sum::<isize>()\n\
    \  |                               +++++     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976518
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x| x % 2 == 0).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmp3fge48r5.rs:6:29\n\
    \  |\n6 |     lst.iter().filter(|x| x % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n6 |     lst.iter().filter(|x| *x % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976517
- exit_code: 1
  program: "/// Given a non-empty vector of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(vec![4, 2, 6, 7])\n/// 2\n\
    fn add(lst: Vec<isize>) -> isize {\n    for i in lst.iter_mut() {\n        if\
    \ i % 2 == 0 {\n            *i += 1;\n        }\n    }\n    lst[0]\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n --> /tmp/tmpyw6id2h1.rs:7:14\n\
    \  |\n7 |         if i % 2 == 0 {\n  |            - ^ - {integer}\n  |       \
    \     |\n  |            &mut isize\n  |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `i`\n  |\n7 |         if *i % 2 == 0 {\n  |            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976518
