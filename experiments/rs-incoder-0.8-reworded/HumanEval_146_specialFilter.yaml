name: HumanEval_146_specialFilter
language: rs
prompt: "/// Write a function that takes a vector of numbers as input and returns\
  \ \n/// the number of elements in the vector that are greater than 10 and both \n\
  /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
  /// >>> specialFilter(vec![15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(vec![33,\
  \ -2, -3, 45, 21, 109])\n/// 2\nfn specialFilter(nums: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
  \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
  \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121,\
  \ 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n   \
  \ assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n}\n"
completions: ["    let mut cnt = 0;\n    for &n in nums {\n        if n >= 10 {\n\
    \            if n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n\
    \ % 10 == 9 {\n                if n == (n % 10).checked_mul(10).unwrap() {\n \
    \                   if n % 2 == 1 {\n                        cnt += 1;\n     \
    \               }\n                }\n            }\n        }\n    }\n    cnt",
  "    if nums.len() == 0 {\n        return 0;\n    }\n    let mut num: isize = nums[0];\n\
    \    for i in 1..=nums.len() {\n        if num % 2 == 1 && num % 100 == 1 && num\
    \ % 100 == 0 {\n            return i;\n        }\n        num = num / 2;\n   \
    \ }\n    num", "    let mut i = 0;\n    let mut j = 0;\n    let mut c = 0;\n \
    \   while i < nums.len() {\n        while j < nums.len() && nums[i] > 10 {\n \
    \           i += 1;\n            j += 1;\n        }\n        if j < nums.len()\
    \ && nums[i] % 2 != 0 && nums[i] > 10 {\n            c += 1;\n        }\n    \
    \    i += 1;\n        j = 0;\n    }\n    c", "    \n    let mut count: isize =\
    \ 0;\n    for n in nums {\n        match n.checked_mul(10) {\n            Some(v)\
    \ => match v.checked_mul(10) {\n                Some(v) => if v%2 == 0 && v.checked_and(v.checked_add(1).unwrap().unwrap())%2\
    \ == 1 {\n                    count = count+1;\n                }\n          \
    \      _ => {}\n            },\n            None => {}\n        }\n    }\n   \
    \ \n    return count;", "    \n    let mut count = nums.iter().filter(|n| { n\
    \ % 10 > 0 }).filter(|n| {\n        n % 10 == 0 &&\n        n % 2 == 0 &&\n  \
    \      n % 1 == 0 \n    }).count();\n\n    for n in nums {\n        if n % 10\
    \ > 0 {\n            count += 1;\n        }\n\n        if n % 10 == 2 && n % 1\
    \ == 0 {\n            count += 1;\n        }\n\n        if n % 10 == 1 && n %\
    \ 1 == 1 {\n            count += 1;\n        }\n    }\n\n    count", "    // Write\
    \ a function that takes a vector of numbers as input and returns \n    // the\
    \ number of elements in the vector that are greater than 10 and both \n    //\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n\n    // Solution\
    \ here\n    // FILL IN HERE", '    nums.iter().filter(|x| x > 10).filter(|x| x
    % 2 == 1 && x % 3 == 0).count()', "    let mut sum: isize = 0;\n    for i in nums.iter()\
    \ {\n        match i {\n            0 => continue,\n            _ => sum += i\
    \ / 2,\n        };\n    }\n    sum", '    nums.iter().filter(|&i| i >= 10 && i
    % 2 != 0).count()', "    let mut counter = 0usize;\n    for i in nums {\n    \
    \    let num = (i / 10) as isize;\n        counter += if num % 2 == 1 && num %\
    \ 3 == 1 && num % 5 == 1 && num % 7 == 1 && num % 9 == 1 { 1 } else { 0 };\n \
    \   }\n    counter", '    nums.iter().filter(|n| n > 10).count(|n| n % 2 == 1
    && n % 3 == 1).count()', "    let mut count = 0;\n    let mut i = 0;\n    while\
    \ i < nums.len() {\n        if nums[i] > 10 {\n            if nums[i - 1] % 2\
    \ == 0 && nums[i + 1] % 2 == 1 {\n                count += 1;\n            }\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    for i in nums.iter() {\n        if i\
    \ > 10 {\n            match i % 2 {\n                0 => count++,\n         \
    \       _ => {}\n            }\n        }\n    }\n    count", '    nums.iter().filter(|&x|
    x > 10 && x % 2 == 1 && x % 3 == 1).count() as isize', "    let mut n = 0;\n \
    \   for num in nums.iter() {\n        if num > 10 {\n            if num % 2 ==\
    \ 0 && num % 2 == 1 {\n                n += 1;\n            }\n        }\n   \
    \ }\n    n", "    let len = nums.len();\n    for idx in (0..len).filter(|&i| i\
    \ > 10) {\n        let digit = nums[idx];\n        if idx % 2 == 1 && digit %\
    \ 2 == 1 {\n            return idx;\n        }\n    }\n    len", "    let mut\
    \ n = nums.len();\n    for i in 0..n {\n        if nums[i] > 10 && nums[i] % 2\
    \ == 1 && nums[i] % 3 == 0 {\n            n -= 1;\n        }\n    }\n    n", " \
    \   for i in 0..nums.len() {\n        if nums[i] > 10 &&\n            (nums[i]\
    \ % 2 == 1 && nums[i] % 3 != 0 || nums[i] % 3 == 1 && nums[i] % 2 != 0) {\n  \
    \          return i;\n        }\n    }\n    return nums.len();", '    nums.iter().filter(|x|
    x > 10 && ((x%2)==1 || x%3)==1).count()', "    let mut odd = 0;\n    let mut even\
    \ = 0;\n    let mut nums = nums.into_iter();\n    loop {\n        let x = nums.next();\n\
    \        if x.is_none() {\n            break;\n        }\n        let a = x.unwrap()\
    \ as isize;\n        match a % 10 {\n            1 => even = even + 1,\n     \
    \       3 => odd = odd + 1,\n            _ => {}\n        }\n    }\n    odd +\
    \ even", "    let mut nums_iter = nums.iter();\n    nums_iter.next();\n    nums_iter.next();\n\
    \    nums_iter.next();\n    nums_iter.next();\n    nums_iter.next();\n    let\
    \ mut count = 0;\n    for num in nums_iter {\n        if num > 10 && nums_iter.last().unwrap()\
    \ % 2 == 1 {\n            count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|n|
    n > 10 && n % 2 == 1 && n % 2 != 0).count()', "    let mut result = nums.len();\n\
    \    for i in 0..nums.len() {\n        if nums[i] > 10 {\n            if nums[i]\
    \ & 1 == 0 && nums[i] % 2 == 1 {\n                if nums[i+1] == nums[i] + 1\
    \ && nums[i+1] % 2 == 1 {\n                    result--;\n                }\n\
    \            }\n        }\n    }\n    result", '    nums.iter().filter(|num| num
    > 10 && (num % 10) as usize % 2 == 1).count()', '    nums.iter().filter(|x| x
    > 10 && nums[x as usize - 1] % 2 != 0).count()', "    // initialize number of\
    \ elements that are greater than 10\n    let n = nums.iter().filter(|x| *x > 10).count();\n\
    \n    // initialize number of elements that are both odd first and odd last\n\
    \    let m = nums.iter().filter(|x| *x % 2 == 1).filter(|x| *x % 3 == 0).count();\n\
    \n    // return number of elements that are greater than 10 and are odd first\
    \ and odd last\n    n + (n * m)", "    if nums.len() == 0 {\n        return 0;\n\
    \    }\n\n    let mut sum: isize = 0;\n    let mut max_digits = nums[0].checked_digit().unwrap();\n\
    \    let mut first_digit = nums[0].checked_digit().unwrap();\n\n    for n in nums\
    \ {\n        let digit = n.checked_digit().unwrap();\n        if digit > max_digits\
    \ {\n            sum += 1;\n            max_digits = digit;\n        }\n     \
    \   if digit % 2 == 0 && digit % 2 == 1 {\n            sum += 1;\n        }\n\
    \        if digit > 10 && digit % 2 == 1 {\n            sum += 1;\n        }\n\
    \    }\n\n    sum", "    let mut count = 0;\n    for i in nums {\n        if i\
    \ > 10 {\n            if i % 2 == 1 {\n                if nums[0] % 2 == 1 {\n\
    \                    count = count + 1;\n                }\n                if\
    \ nums[-1] % 2 == 1 {\n                    count = count + 1;\n              \
    \  }\n            }\n        }\n    }\n    count", '    nums.iter().filter(|x|
    x > 10 && x % 2 != 0).count()', "    let mut nums = nums;\n    nums.sort_unstable();\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n  \
    \  let mut count = 0;\n    let mut last = 0;\n    let mut first = nums[0];\n \
    \   for &num in nums {\n        if num > 10 {\n            sum += 1;\n       \
    \     count += 1;\n            if last % 2 == 0 {\n                last = num;\n\
    \            } else {\n                if num < first {\n                    first\
    \ = num;\n                }\n            }\n        }\n    }\n    sum += count;\n\
    \    if first % 2 == 0 {\n        return sum;\n    } else {\n        return sum\
    \ + 2;\n    }", '    nums.iter().filter(|x| x > 10).filter(|x| x.is_odd()).filter(|x|
    x.is_odd()).count() ', "    if nums.is_empty() {\n        return 0;\n    }\n\n\
    \    let mut count = 0;\n    let mut first = 0;\n    let mut last = nums.len();\n\
    \    let mut curr = nums.first();\n\n    while last > first + 1 {\n        //\
    \ First digit\n        if curr == 0 {\n            curr += 1;\n            first\
    \ += 1;\n        }\n\n        // Last digit\n        if last == nums.len() {\n\
    \            curr += 1;\n            last -= 1;\n        }\n\n        // Odd first\
    \ and last digits\n        if curr % 2 != 0 && last % 2 != 0 {\n            count\
    \ += 1;\n        }\n\n        curr /= 10;\n        last /= 10;\n    }\n\n    count",
  "    let len = nums.len();\n    for i in 0..len {\n        if nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[len-1 - i] % 2 == 1 {\n            return i;\n        }\n \
    \   }\n    0", "    let mut sum = 0;\n    for n in nums {\n        if n % 2 ==\
    \ 0 {\n            sum += n;\n        } else {\n            sum += 2*n;\n    \
    \    }\n    }\n    if sum < 10 {\n        0\n    } else {\n        sum as isize\n\
    \    }", "    if nums.is_empty() {\n        0\n    } else {\n        if nums[0]\
    \ % 2 == 0 {\n            if nums[0] > 10 {\n                if nums[0] % 2 ==\
    \ 1 {\n                    if nums[0] % 3 == 1 {\n                        if nums[0]\
    \ % 5 == 1 {\n                            return 1\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   0", '    nums.iter().filter(|x| x > 10 && x % 2 == 1).count() + nums.iter().filter(|x|
    x > 10 && x % 2 == 0).count()', '    nums.iter().filter(|x| x > 10 && (x % 2)
    != 0).count()', '    nums.iter().filter(|x| x > 10 && (x % 2 == 0 || x % 3 ==
    0)).count()', "    let mut odd = 0;\n    let mut first_odd = -1;\n    let mut\
    \ last_odd = -1;\n    let mut count = 0;\n    for &n in nums.iter() {\n      \
    \  if n > 10 {\n            count += 1;\n        }\n        if n % 2 == 1 {\n\
    \            odd += 1;\n        }\n        if n % 2 == 0 {\n            if n /\
    \ 2 % 2 == 1 {\n                first_odd += 1;\n            }\n            if\
    \ n / 2 % 2 == 0 {\n                last_odd += 1;\n            }\n        }\n\
    \    }\n    if odd > 0 && first_odd > 0 && last_odd > 0 {\n        count += 1;\n\
    \    }\n    count", "    let len = nums.len();\n    let mut sum = 0;\n    let\
    \ mut count = 0;\n    for i in 0..len {\n        if nums[i] >= 10 {\n        \
    \    sum += nums[i];\n            if nums[i] % 2 != 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    sum", "    let mut sum = 0;\n  \
    \  for i in nums {\n        if i > 10 {\n            sum += 1;\n        }\n  \
    \      if i.is_odd() && nums.len() > 1 && nums.last().is_odd() {\n           \
    \ sum += 1;\n        }\n    }\n    sum", "    debug_assert_eq!(nums.len(), 2);\n\
    \    let first = nums[0].leading_digits().unwrap();\n    let last = nums[1].leading_digits().unwrap();\n\
    \    if let Some(digit) = nums[0] % 10 {\n        debug_assert_eq!(digit, 1);\n\
    \        return nums.iter().filter(|x| x > 10).count() >= 2 && nums[0] % 2 ==\
    \ 0;\n    } else if nums[0] % 2 == 0 && nums[1] % 2 == 0 && nums[0] % 10 == 0\
    \ && nums[1] % 10 == 0 {\n        return nums.iter().filter(|x| x > 10).count()\
    \ >= 2 && nums[0] % 2 == 0 && nums[1] % 2 == 0;\n    } else {\n        nums.iter().filter(|x|\
    \ x > 10).count() >= 2 && nums[0] % 2 == 0 && nums[1] % 2 == 0 && nums[0] % 10\
    \ == 0 && nums[1] % 10 == 0\n    }", "    if nums.is_empty() {\n        return\
    \ 0;\n    }\n    let mut cnt = 0;\n    let mut num = nums.iter().next();\n   \
    \ while num != 0 {\n        if num % 10 > 10 || num % 10 < 1 || num % 10 > 9 {\n\
    \            break;\n        }\n        num = num / 10;\n        cnt += 1;\n \
    \   }\n    return cnt;", "    if nums.len() < 1 {\n        return 0;\n    }\n\
    \    let mut first = 0;\n    let mut last = 0;\n    let mut cnt = 0;\n    for\
    \ (i, n) in nums.iter().enumerate() {\n        if n % 2 == 0 {\n            cnt\
    \ += 1;\n            if i < nums.len() - 1 {\n                if nums[i+1] % 2\
    \ == 0 {\n                    cnt += 1;\n                    i += 1;\n       \
    \         }\n            }\n            if first == 0 && last == 0 {\n       \
    \         first = n;\n            } else if n > 10 {\n                last = n;\n\
    \            }\n        }\n    }\n    cnt", "    let mut num: isize = 0;\n   \
    \ let mut odds = 0;\n    for (i, &num) in nums.iter().enumerate() {\n        if\
    \ num % 2 == 0 {\n            if num % 10 == 1 && num % 10 == 3 && num % 10 ==\
    \ 7 && num % 10 == 9 {\n                odds += 1;\n            } else {\n   \
    \             num += 1;\n            }\n        } else {\n            num += 1;\n\
    \        }\n    }\n    return num - odds;", "    for i in nums {\n        if i\
    \ % 2 == 1 && i / 2 % 2 == 1 {\n            return i;\n        }\n    }\n    0",
  "    let mut count = 0\n    let mut first = 1;\n    let mut last = 1;\n    let mut\
    \ prev = 0;\n\n    for x in nums {\n        if x % 10 > 10 {\n            last\
    \ = last + 1;\n        } else {\n            count = count + 1;\n            first\
    \ = first + 1;\n        }\n        if x % 10 < 0 {\n            prev = x + 1;\n\
    \        } else {\n            first = first - 1;\n        }\n    }\n\n    if\
    \ prev % 10 == 1 {\n        count = count + 1;\n    }\n\n    if last % 2 == 1\
    \ {\n        count = count + 1;\n    }\n\n    if first % 2 == 1 {\n        count\
    \ = count + 1;\n    }\n\n    if count > 2 {\n        count - 2;\n    } else {\n\
    \        0\n    }", '    specialFilter_loop(nums, 1)', "    nums\n        .iter()\n\
    \        .filter(|n| {\n            let digits = n.to_string();\n            digits.chars().filter(|c|\
    \ c.is_numeric()).count() != 0\n        })\n        .count()", '    nums.iter().filter(|x|
    x > 10 && x % 2 == 1 && x % 2 != 0).count()', "    let mut odds = 0;\n    let\
    \ mut evens = 0;\n    for i in nums.iter() {\n        if i % 2 == 0 {\n      \
    \      evens += 1;\n        } else if i % 2 == 1 {\n            odds += 1;\n \
    \       }\n    }\n    if odds == 0 && evens == 0 {\n        return 0;\n    } else\
    \ if odds == 1 {\n        return evens;\n    } else if evens == 1 {\n        return\
    \ odds;\n    } else {\n        return odds + evens;\n    }", "    if nums.is_empty()\
    \ { return 0; }\n    \n    let mut lower = nums[0] % 10;\n    let mut higher =\
    \ nums[0] % 10;\n    for i in 1..nums.len() {\n        let x = nums[i] % 10;\n\
    \        if x < 10 && lower == x {\n            lower = x;\n        } else if\
    \ x > 10 && higher == x {\n            higher = x;\n        } else if x >= 10\
    \ && x < 10 {\n            lower = x;\n            higher = x;\n        }\n  \
    \  }\n    if lower % 2 != higher%2 {\n        nums.iter().filter(|x|x%2==0).count()\n\
    \    } else {\n        nums.iter().filter(|x|x%2==0).count() + nums.iter().filter(|x|x%2==1).count()\n\
    \    }", "    let mut cnt = 0;\n    for n in nums {\n        if n % 2 == 0 {\n\
    \            if n / 10 % 2 == 1 {\n                if n % 10 == 1 && n % 100 !=\
    \ 11 {\n                    cnt += 1;\n                }\n            }\n    \
    \    }\n    }\n    cnt", "    let len = nums.len();\n    if len < 2 {\n      \
    \  return 0;\n    }\n\n    let mut count = 0;\n\n    for i in 0..len {\n     \
    \   let n = nums[i];\n\n        if n % 2 == 1 {\n            count += 1;\n   \
    \     }\n        \n        if i >= 1 {\n            let m = nums[i - 1];\n\n \
    \           if n % 2 == 1 && m % 2 == 1 {\n                count += 1;\n     \
    \       }\n        }\n    }\n\n    count", "    let mut cnt = 0;\n    for i in\
    \ nums.iter() {\n        if i > 10 && nums.len() - i <= 2 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt", "    let len = nums.len();\n    if len <= 0\
    \ { 0 }\n    else if len == 1 { nums[0] % 2 }\n    else { nums[len - 1] % 2 }",
  '    nums.iter().filter(|x| x >= 10 && x % 2 == 0 && x % 3 == 0).count()', "   \
    \ let evens = nums.filter(|&i| i % 2 == 0);\n    let odds = nums.filter(|&i| i\
    \ % 2 != 0);\n    evens.iter().filter(|&i| {\n        let mut i = i;\n       \
    \ let mut last = i;\n        while i > 10 {\n            last = i / 10;\n    \
    \        i -= last * 10;\n        }\n        last % 2 == 1\n    }).count() + odds.iter().filter(|&i|\
    \ {\n        let mut i = i;\n        let mut last = i;\n        while i > 10 {\n\
    \            last = i / 10;\n            i -= last * 10;\n        }\n        last\
    \ % 2 == 1\n    }).count()", "    if nums.len() == 0 {\n        return 0;\n  \
    \  }\n\n    if nums.len() == 1 {\n        if nums[0] % 2 == 0 {\n            return\
    \ 1;\n        }\n\n        return 0;\n    }\n\n    let first = nums[0] % 10;\n\
    \    let last = nums.last().unwrap() % 10;\n    let mut count = 0;\n\n    for\
    \ n in nums.iter() {\n        if n % 10 > last && n % 10 % 2 != first % 2 {\n\
    \            count += 1;\n        }\n    }\n\n    count", "    let mut nums_iter\
    \ = nums.iter();\n    loop {\n        let n = nums_iter.next().unwrap();\n   \
    \     if n % 10 == 1 && n % 100 != 11 && n % 100 != 7 {\n            loop {\n\
    \                let m = nums_iter.next().unwrap();\n                if m % 10\
    \ == 1 && m % 100 != 11 && m % 100 != 7 {\n                    break;\n      \
    \          }\n            }\n        }\n        if n < 10 {\n            break;\n\
    \        }\n    }\n    match nums_iter.next() {\n        Some(x) => x,\n     \
    \   None => 0\n    }", "    for i in nums.iter() {\n        if i % 2 == 0 && i\
    \ % 5 == 1 {\n            return i;\n        }\n    }\n    0", "    let mut cnt:\
    \ isize = 0;\n    for n in nums {\n        if n >= 10 && (n % 10) != 0 && n %\
    \ 2 != 0 {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 {\n            if nums[0] % 2 ==\
    \ 0 && nums[nums.len() - 1] % 2 == 1 {\n                count += 1;\n        \
    \    }\n        }\n    }\n    count", '    nums.iter().filter(|x| x > 10).count(|x|
    x.parity() && (x.is_odd() || x.is_even())).unwrap()', "    let nums = nums.iter().filter(|x|\
    \ x > 10).collect::<Vec<_>>();\n    let mut count = 0;\n    for num in nums.iter().cloned()\
    \ {\n        if num % 2 == 1 {\n            count += 1;\n        }\n        if\
    \ num % 2 == 0 && num != 11 && num != 10 {\n            count += 1;\n        }\n\
    \    }\n    count", "    nums.iter().filter(|x| {\n        x > 10 &&\n       \
    \ (x % 2 != 0 && x % 4 != 0)\n    }).count()", "    \n    for n in nums.iter()\
    \ {\n        if n % 10 == 1 {\n            if n % 100 == 0 {\n               \
    \ if n % 1000 == 0 {\n                    return n;\n                }\n     \
    \       }\n        }\n    }\n    \n    0", "    if nums.len() == 0 {\n       \
    \ return 0;\n    }\n    let mut count = 0;\n    let mut lastNum: isize = 0;\n\
    \    let mut firstNum: isize = 0;\n    for num in nums {\n        if num > 10\
    \ {\n            count += 1;\n            lastNum = num;\n        } else if num\
    \ < -10 {\n            count += 1;\n            firstNum = num;\n        }\n \
    \   }\n    if count > 2 {\n        if lastNum % 2 == 1 && firstNum % 2 == 1 {\n\
    \            return count as isize;\n        }\n    }\n    count as isize", " \
    \   let mut count = 0;\n    for n in nums {\n        if n > 10 && n % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    return count;", "    let mut cnt\
    \ = 0;\n    for i in nums.iter() {\n        if i > 10 {\n            cnt += 1;\n\
    \        } else if i % 2 == 1 {\n            cnt += 1;\n        } else if i !=\
    \ nums.last() && i % 2 == 0 {\n            cnt += 1;\n        }\n    }\n    cnt",
  "    let mut n = 0;\n    for &n in nums {\n        if nums.iter().take_while(|&i|\
    \ *i != 0 && nums.iter().last() != i).count() > 0 {\n            continue;\n \
    \       }\n        if nums.iter().take_while(|&i| *i != 0 && nums.iter().last()\
    \ != i && nums.iter().next() != i).count() > 0 {\n            continue;\n    \
    \    }\n        if nums.iter().take_while(|&i| *i != 0 && *i != i && nums.iter().next()\
    \ != i && nums.iter().last() != i).count() > 0 {\n            continue;\n    \
    \    }\n        n += 1;\n    }\n    n", "    let mut num_odd = 0;\n    for &num\
    \ in nums {\n        if num % 2 != 0 {\n            num_odd += 1;\n        }\n\
    \        if num % 2 != 0 && num / 2 % 2 != 0 {\n            num_odd += 1;\n  \
    \      }\n    }\n    return num_odd;", "    let mut evens = 0;\n    for num in\
    \ nums {\n        if num % 2 == 0 {\n            evens += 1;\n        }\n    }\n\
    \    let mut firstEven: Option<isize> = None;\n    for num in nums {\n       \
    \ if num % 2 == 0 {\n            firstEven = Some(num);\n        }\n    }\n  \
    \  let mut lastEven: Option<isize> = None;\n    for num in nums {\n        if\
    \ num % 2 == 0 {\n            lastEven = Some(num);\n        }\n    }\n\n    if\
    \ evens == 1 && firstEven.is_some() && lastEven.is_some() {\n        nums.len()\n\
    \    } else {\n        nums.len() + nums.len()\n    }", "    let mut oddCount\
    \ = 0;\n    for num in nums {\n        if num > 10 {\n            let div = num\
    \ / 10;\n            if num % 10 == 1 {\n                if div % 2 == 1 {\n \
    \                   oddCount += 1;\n                }\n            }\n       \
    \ }\n    }\n    oddCount", "    let mut count = 0;\n    for i in nums {\n    \
    \    if i >= 10 && i & 1 != 0 && i & 2 != 0 {\n            count += 1;\n     \
    \   }\n    }\n    count", '    specialFilter(nums.iter().cloned().collect::<Vec<isize>>())',
  "    nums\n        .iter()\n        .filter(|num| *num > 10)\n        .filter(|num|\
    \ *num % 2 != 0 && num % 2 != 1)\n        .count()", "    let even = nums.filter(|&x|\
    \ x % 2 == 0).count();\n    let odd = nums.filter(|&x| x % 2 != 0).count();\n\
    \    if even == 1 && odd == 1 {\n        return nums.len();\n    }\n    if even\
    \ > 10 && odd > 10 {\n        return even;\n    }\n    if even > 10 && odd ==\
    \ 10 {\n        return odd;\n    }\n    if even == 10 && odd == 10 {\n       \
    \ return even;\n    }\n    0", "    let mut count = 0;\n    for i in nums {\n\
    \        if i > 10 {\n            if ((i mod 10) % 2) == 1 {\n               \
    \ count += 1;\n            }\n        } else {\n            count += 1;\n    \
    \    }\n    }\n    count", "    let mut numsCopy = nums;\n    let len = nums.len();\n\
    \    if numsCopy.len() == 0 {\n        return 0;\n    }\n    let lastNum = numsCopy[len\
    \ - 1];\n    let mut count = 0;\n    for i in 0..(len - 1) {\n        if nums[i]\
    \ < 10 {\n            count++;\n            continue;\n        }\n        let\
    \ mut firstOddCount = 0;\n        let mut lastOddCount = 0;\n        if i > 0)\
    \ {\n            let prevNum = nums[i - 1];\n            if prevNum % 2 == 0 &&\
    \ prevNum % 10 != 0 {\n                firstOddCount++;\n            }\n     \
    \   }\n        if i < len - 1 {\n            let nextNum = nums[i + 1];\n    \
    \        if nextNum % 2 == 0 && nextNum % 10 != 0 {\n                lastOddCount++;\n\
    \            }\n        }\n        if firstOddCount > 0 && lastOddCount > 0 {\n\
    \            count++;\n        }\n    }\n    count", "    if nums.len() == 0 {\n\
    \        return 0;\n    }\n    let mut sum = 0;\n    for i in nums.iter() {\n\
    \        if i > 10 {\n            return sum;\n        }\n        if i & 1 ==\
    \ 1 {\n            return sum + 1;\n        }\n        sum += i;\n    }\n    return\
    \ sum;", "    let mut num_odd = 0;\n    let mut num_even = 0;\n    for i in nums\
    \ {\n        if i % 2 == 0 {\n            num_even += 1;\n        } else {\n \
    \           num_odd += 1;\n        }\n    }\n    if num_even + num_odd <= 1 {\n\
    \        return 0;\n    }\n    let mut num_odd = 0;\n    for i in nums {\n   \
    \     if i % 2 == 1 {\n            num_odd += 1;\n        }\n    }\n    if num_odd\
    \ <= 1 {\n        return 0;\n    }\n    num_even", "    let mut even = 0;\n  \
    \  let mut odd = 0;\n    for x in nums {\n        if x < 10 {\n            even\
    \ += 1;\n        } else if x >= 10 {\n            odd = 1;\n        } else {\n\
    \            if odd && x % 2 == 1 {\n                even += 1;\n            }\n\
    \        }\n    }\n    even", "    if nums.is_empty() {\n        return 0;\n \
    \   }\n    \n    let mut count = 0 as isize;\n    \n    for n in nums.iter() {\n\
    \        if n % 10 == 1 && n % 10 == 3 && n % 10 == 7 && n % 10 == 9 {\n     \
    \       count += 1;\n        }\n    }\n    \n    return count;", "    let mut\
    \ cnt = 0;\n\n    for n in nums {\n        cnt += if n % 2 == 0 && n % 10 == 1\
    \ && n % 11 != 9 { 1 } else { 0 };\n    }\n\n    cnt", "    for i in nums {\n\
    \        if i > 10 && (nums[0] % 2 == 1 && nums[nums.len() - 1] % 2 == 1) {\n\
    \            return i;\n        }\n    }\n    0", "    let mut count = 0;\n  \
    \  for (idx, num) in nums.iter().enumerate() {\n        if num > 10 {\n      \
    \      if num % 2 == 1 {\n                count += idx;\n            }\n     \
    \       if idx > 0 {\n                if nums[idx - 1] % 2 == 1 {\n          \
    \          count += idx;\n                }\n            }\n        }\n    }\n\
    \    count", '    nums.iter().filter(|&n| n >= 10 && n % 2 == 1 && n % 2 != 0).count()',
  "    let mut count = 0;\n    for i in nums.iter() {\n        if i > 10 && nums.len()\
    \ > 1 {\n            if nums[0] % 2 == 1 && nums[1] % 2 == 1 {\n             \
    \   count+=1;\n            }\n        }\n    }\n    count", "    let mut cnt =\
    \ 0;\n    for n in nums {\n        if n >= 10 && n % 2 == 1 {\n            if\
    \ n % 10 == 0 {\n                cnt += 1;\n            }\n        }\n    }\n\
    \    cnt", '    nums.iter().filter(|&n| n > 10 && (n % 10) % 2 != 0).count()',
  "    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n        \
    \    if num % 2 == 0 {\n                count += 1;\n            }\n         \
    \   if num % 2 == 1 && num != 9 {\n                count += 1;\n            }\n\
    \            if num % 2 == 1 && num == 9 {\n                count += 1;\n    \
    \        }\n            if num % 2 != 0 {\n                count += 1;\n     \
    \       }\n        }\n    }\n    count", "    let mut counter = 0;\n    for num\
    \ in nums {\n        if num % 10 == 1 && num % 10 == 3 && num % 10 == 5 && num\
    \ % 10 == 7 && num % 10 == 9 {\n            counter += 1;\n        }\n       \
    \ if num % 10 == 1 && num % 10 == 3 && num % 10 == 5 && num % 10 == 7 && num %\
    \ 10 == 9 {\n            counter += 1;\n        }\n        if num % 10 == 1 &&\
    \ num % 10 == 3 && num % 10 == 5 && num % 10 == 7 && num % 10 == 9 {\n       \
    \     counter += 1;\n        }\n        if num % 10 == 1 && num % 10 == 3 && num\
    \ % 10 == 5 && num % 10 == 7 && num % 10 == 9 {\n            counter += 1;\n \
    \       }\n        if num % 10 == 1 && num % 10 == 3 && num % 10 == 5 && num %\
    \ 10 == 7 && num % 10 == 9 {\n            counter += 1;\n        }\n    }\n  \
    \  counter as isize", "    let len = nums.len();\n    let mut cnt = 0;\n    for\
    \ i in 0..len {\n        if nums[i] > 10 && (nums[i] & 1) != (nums[len-i-1] &\
    \ 1) {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut sum =\
    \ 0;\n    for i in nums {\n        if i >= 10 && i % 2 != 0 {\n            sum\
    \ += 1;\n        }\n    }\n    return sum;", "    nums\n        .iter()\n    \
    \    .filter(|x| x > 10)\n        .filter(|x| {\n            ((x % 10) % 2) ==\
    \ 1\n        })\n        .filter(|x| {\n            ((x % 10) % 2) == 0\n    \
    \    })\n        .count()", "    let mut sum = 0;\n    for n in nums {\n     \
    \   if n == 0 {\n            continue;\n        }\n        if n > 10 && n % 10\
    \ == 1 && n % 2 == 1 {\n            sum += 1;\n        }\n    }\n    sum", " \
    \   let mut counter = 0;\n    for i in nums.iter() {\n        if i > 10 && i %\
    \ 2 == 0 {\n            if i % 2 == 1 {\n                counter += 1;\n     \
    \       }\n        } else {\n            counter += 0;\n        }\n    }\n   \
    \ counter", "    if nums.len() <= 1 {\n        nums.len()\n    }\n    else {\n\
    \        if nums[0] > 10 && (nums[0] % 2 != 0 || nums[0] % 2 != 1) {\n       \
    \     nums.iter().filter(|num| num > 10).count()\n        }\n        else {\n\
    \            0\n        }\n    }", '    nums.iter().filter(|n| n > 10 && n % 2
    == 1 && n % 3 == 1).count()', '    nums.iter().filter(|&x| x > 10).filter(|&x|
    x.is_odd()).count()', '    nums.iter().filter(|&x| x > 10 && x % 2 == 1 && x %
    3 == 0).count()', "    let mut count = 0;\n    for n in nums {\n        if n %\
    \ 10 > 10 {\n            count += 1;\n        }\n        if n % 10 < 10 && (n\
    \ % 10 % 2 != 0) {\n            count += 1;\n        }\n    }\n    return count;",
  "    let mut count = 0\n    for n in nums {\n        if n % 10 != 0 {\n        \
    \    continue;\n        }\n        if ((n % 100) < 10 || (n % 100) > 20) {\n \
    \           continue;\n        }\n        if ((n % 1000) < 10 || (n % 1000) >\
    \ 20) {\n            continue;\n        }\n        if ((n % 10000) < 10 || (n\
    \ % 10000) > 20) {\n            continue;\n        }\n        if n % 1000000 >\
    \ 10 {\n            continue;\n        }\n        count += 1;\n    }\n    count",
  "    \n    let mut sum = 0;\n    \n    for i in nums.iter(){\n        if i > 10{\n\
    \            sum += 1;\n        }\n        if i % 2 == 0 && i % 3 != 0{\n    \
    \        sum += 1;\n        }\n    }\n    \n    sum", "    nums.iter().filter(|&x|\
    \ x > 10 &&\n                               (x % 2 != 0 || x % 2 != 1)).count();",
  "    \n    \n    let mut n = 0;\n    for n in nums.iter() {\n        if n % 10 >\
    \ 9 {\n            break;\n        }\n        if n % 10 == 1 && n % 2 == 0 {\n\
    \            break;\n        }\n    }\n    \n    return n;", '    nums.iter().filter(|&x|
    x > 10 && x % 2 == 1 && x % 3 == 1).count()', "    let mut cnt = 0;\n    for i\
    \ in nums {\n        if i.is_multiple_of(10) && i.is_odd() && i.is_odd() {\n \
    \           cnt += 1;\n        }\n    }\n    cnt", "    let mut cnt = 0;\n   \
    \ for num in nums {\n        if num > 10 && num % 2 == 0 && num > floor(num /\
    \ 2) {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut count\
    \ = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num % 3\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ cnt = 0;\n    for num in nums {\n        if num % 10 == 1 && num % 100 == 1\
    \ && num % 1000 == 1 && (num % 10000 % 2 == 1 || num % 1000000 % 2 == 1) {\n \
    \           cnt += 1;\n        }\n    }\n    cnt", "    let mut count = nums.len();\n\
    \    let mut first = 1;\n    let mut last = 0;\n    for n in nums {\n        if\
    \ n >= 10 && first % 2 == 1 && last % 2 == 1 {\n            count -= 1;\n    \
    \    }\n        first += n;\n        last += n;\n    }\n    count", "    let mut\
    \ evens = nums.filter(|&x| x % 2 == 0);\n    let mut odds = nums.filter(|&x| x\
    \ % 2 != 0);\n    evens.sort();\n    odds.sort();\n    if evens.len() == 0 &&\
    \ odds.len() == 0 {\n        nums.len()\n    } else if evens.len() == 1 {\n  \
    \      evens.iter().find(|&x| x > 10) && odds.iter().find(|&x| x > 10) && x ==\
    \ evens.last().unwrap()\n    } else if evens.len() == 2 {\n        evens.iter().find(|&x|\
    \ x > 10) && odds.iter().find(|&x| x > 10) && x == evens.last().unwrap() && x\
    \ % 2 == 1\n    } else {\n        evens.iter().find(|&x| x > 10) && odds.iter().find(|&x|\
    \ x > 10) && x == evens.last().unwrap() && x > 10\n    }", "    let mut nums_copy\
    \ = nums;\n    for &i in nums_copy.iter() {\n        if i > 10 &&\n          \
    \  (i % 2 != 1 && i % 3 != 1 && i % 5 != 1 && i % 7 != 1 && i % 9 != 1) {\n  \
    \          nums_copy.remove(i);\n        }\n    }\n    nums_copy.len()", "   \
    \ let mut counter = 0;\n    for n in nums {\n        if n > 10 && (n % 2 == 0\
    \ || n % 3 == 0) {\n            counter += 1;\n        }\n    }\n    counter",
  "    let mut i = nums.len();\n    while i != 0 {\n        if nums[i - 1] % 2 ==\
    \ 1 && nums[i] % 2 == 1 && nums[i - 1] != nums[i] {\n            return i;\n \
    \       }\n        i -= 1;\n    }\n    0", "    let mut count = 0\n    for x in\
    \ nums {\n        if x > 10 {\n            let first_odd = nums.iter().find(|x|\
    \ *x % 2 == 0).unwrap();\n            let last_odd = nums.iter().find(|x| *x %\
    \ 2 == 1).unwrap();\n            if first_odd && last_odd && first_odd % 2 ==\
    \ 0 && last_odd % 2 == 1 {\n                count += 1;\n            }\n     \
    \   }\n    }\n    count", "    let mut i = 0; // Initialize i\n    for n in nums.iter()\
    \ {\n        if n % 10 > 0 && n % 10 != 1 && (n - n % 10) % 2 == 0 {\n       \
    \     i += 1;\n        }\n    }\n    i", "    let mut count = 0; \n    for i in\
    \ nums.iter() {\n        if i > 10 && (i % 2 == 1 && i % 3 != 1 || i % 5 == 1)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut sum =\
    \ 0;\n    for n in nums.iter() {\n        if n > 10 && n % 2 == 1 && n % 4 ==\
    \ 1 {\n            sum += 1;\n        }\n    }\n    sum", "    let mut nums =\
    \ nums.clone();\n    let n = nums.len();\n    if n > 1 {\n        let mut i =\
    \ 0;\n        while i < n {\n            if nums[i] % 2 == 1 &&\n            \
    \    ((nums[i-1] % 2 != 0 && nums[i-1] % 2 == 1) && (nums[i+1] % 2 != 0 && nums[i+1]\
    \ % 2 == 1)) {\n                i += 1;\n            } else {\n              \
    \  i += 1;\n            }\n        }\n    }\n    nums[0]", "    if nums.is_empty()\
    \ {\n        return 0;\n    }\n\n    // Create a vector of bools with length the\
    \ number of elements in `nums`.\n    // It will store `true` for each element\
    \ that is odd and all are even.\n    let mut odd_bools = Vec::with_capacity(nums.len());\n\
    \    for i in 0..nums.len() {\n        if nums[i] % 2 == 1 {\n            odd_bools.push(true);\n\
    \        } else {\n            odd_bools.push(false);\n        }\n    }\n    \n\
    \    // Count the number of elements that are greater than 10 and all are odd.\n\
    \    let mut odd_bool_count = 0;\n    for i in 0..nums.len() {\n        if nums[i]\
    \ > 10 && odd_bools[i] && odd_bools[i - 1] {\n            odd_bool_count += 1;\n\
    \        }\n    }\n    \n    return odd_bool_count;", "    if nums.len() == 0\
    \ {\n        return 0;\n    }\n    let mut count = 0;\n    for n in nums {\n \
    \       if n > 10 {\n            continue;\n        }\n        if n % 2 == 1 {\n\
    \            count += 1;\n        }\n        if n % 2 == 0 {\n            if n\
    \ % 12 == 1 {\n                count += 1;\n            }\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    for num in nums.iter() {\n        count\
    \ = if num > 10 && num % 2 == 1 && num % 2 == 1 &&\n            ((num / 10) %\
    \ 2 == 1 && (num / 10) % 2 == 0) ||\n            (num % 2 == 0 && (num / 10) %\
    \ 2 == 0) {\n            count + 1;\n        }\n    }\n    count", '    nums.iter().filter(|&x|
    x > 10).count();', "    nums\n        .iter()\n        .filter(|num| num > 10\
    \ && num % 2 == 0 && num % 4 != 0)\n        .count()", '    nums.iter().filter(|x|
    x > 10 && (x % 10) != 1 && (x % 10) != 5).count()', "    let mut n = 0usize;\n\
    \    for num in nums {\n        if num >= 10 && num % 2 == 1 && num % 100 == 1\
    \ {\n            n += 1;\n        }\n    }\n    n", "    let mut cnt = 0;\n  \
    \  for n in nums {\n        cnt += if n % 10 > 10 && n % 10 == 9 && *n % 10 ==\
    \ 1 {\n            1\n        } else {\n            0\n        };\n    }\n   \
    \ cnt", '    nums.iter().filter2(|x| x > 10).count(|&x| x > 10 && x % 2 != 0)',
  "    let mut counter: isize = 0;\n    for i in nums.iter() {\n        if i > 10\
    \ {\n            counter += 1;\n            if i.is_odd() && nums[counter-1] %\
    \ 2 == 1 {\n                counter += 1;\n            }\n        }\n    }\n \
    \   counter", '    specialFilterImpl(nums).unwrap()', "    let even = nums.filter(|x|\
    \ x % 2 == 0);\n    let odd = nums.filter(|x| x % 2 != 0);\n\n    even.filter(|x|\
    \ {\n        let (first, last) = x.to_string().split_last_mut();\n        last.last().unwrap()\n\
    \    }).count() as isize", "    let mut cnt = 0;\n    for n in nums {\n      \
    \  if n % 10 > 0 && n % 10 != 1 && n % 10 != 9 {\n            cnt += 1;\n    \
    \    }\n    }\n    cnt", "    let mut nums = nums.clone();\n    let mut cnt =\
    \ 0;\n    while nums.len() > 0 {\n        cnt += 1;\n        if nums[0] % 2 ==\
    \ 0 && nums[0] % 2 != nums[0] / 2 {\n            cnt += 1;\n        }\n      \
    \  if nums.len() == 1 {\n            break;\n        }\n        let first_odd\
    \ = nums[0] % 2;\n        for v in &nums[1..] {\n            if v % 2 == 1 &&\
    \ v % 2 != v / 2 {\n                cnt += 1;\n            }\n        }\n    \
    \    if first_odd != nums[0] / 2 {\n            cnt += 1;\n        }\n       \
    \ nums = nums[1..];\n    }\n    cnt", "    nums.iter()\n        .filter_map(|&n|\
    \ {\n            if n % 2 == 1 {\n                if n % 2 == 0 {\n          \
    \          if n % 8 == 0 {\n                        true\n                   \
    \ } else {\n                        false\n                    }\n           \
    \     } else {\n                    true\n                }\n            } else\
    \ {\n                false\n            }\n        })\n        .count()", '    specialFilterImpl(nums,
    vec![]).unwrap()', "    let mut i = 0;\n    while i < nums.len() {\n        if\
    \ nums[i] > 10 {\n            let first = nums[i] % 10;\n            let last\
    \ = nums[i + 1] % 10;\n            if first % 2 != last % 2 {\n              \
    \  return i;\n            }\n        }\n        i += 1;\n    }\n    nums.len()",
  "    let mut numsCopy = nums.iter().cloned().collect::<Vec<isize>>();\n    let len\
    \ = nums.len();\n    \n    numsCopy.sort_unstable();\n    for num in numsCopy\
    \ {\n        if num % 2 == 1 && num % 3 == 1 && num % 5 == 1 && num % 7 == 1 &&\
    \ num % 9 == 1 {\n            if num % 2 != 0 && num % 3 != 0 && num % 5 != 0\
    \ && num % 7 != 0 && num % 9 != 0 {\n                numsCopy.retain(|x| x > 10);\n\
    \                numsCopy.retain(|x| x > 9 && !(x % 2));\n                numsCopy.retain(|x|\
    \ x > 7 && !(x % 3));\n                numsCopy.retain(|x| x > 5 && !(x % 5));\n\
    \                numsCopy.retain(|x| x > 3 && !(x % 7));\n                numsCopy.retain(|x|\
    \ x > 1 && !(x % 9));\n                break;\n            }\n        }\n    }\n\
    \    numsCopy.len()", "    let mut result = nums.len();\n    for i in nums.iter()\
    \ {\n        if i > 10 && i % 2 != 0 && i / 10 % 2 != 0 {\n            result--;\n\
    \        }\n    }\n    result", "    if nums.is_empty() {\n        return 0;\n\
    \    }\n    let mut even = true;\n    let mut odd = 0;\n    for &num in nums {\n\
    \        if num % 2 == 0 {\n            even = true;\n            odd = num as\
    \ isize;\n        } else {\n            if even && odd % 2 == 1 {\n          \
    \      return num as isize;\n            }\n            even = false;\n      \
    \  }\n    }\n    0", "    let size = nums.len();\n    for i in 0..size {\n   \
    \     let num = nums[i];\n        if num > 10 &&\n            (((num % 10) as\
    \ i32) % 2 != 0) &&\n            (((num % 10) as i32) % 2 != 1) {\n          \
    \  return i + 1;\n        }\n    }\n    size", "    nums.iter()\n        .filter(|&num|\
    \ num > 10)\n        .filter(|&num| num % 2 != 0)\n        .filter(|&num| num\
    \ % 2 != 0 && num > 10)\n        .count()", '    nums.iter().filter(|&i| i >=
    10 && i % 2 == 1 && i % 3 != 1).count()', "    let len = nums.len();\n    let\
    \ mut nums_copy = nums.clone();\n    \n    for elem in nums_copy {\n        if\
    \ elem == 0 { continue; }\n        if elem > 10 {\n            if nums_copy.last()\
    \ > 0 {\n                if nums_copy.last().is_odd()  { \n                  \
    \  return len + 1;\n                }\n            }\n            if nums_copy.first()\
    \ > 0 {\n                if nums_copy.first().is_odd()  { \n                 \
    \   return len + 1;\n                }\n            }\n        }\n    }\n    \n\
    \    0", '    nums.iter().filter(|&x| x > 10 && x % 2 != 0).count()', "    if\
    \ nums.len() < 2 {\n        return 0;\n    }\n    let mut cnt = 0;\n    let mut\
    \ first = 1;\n    let mut last = 0;\n    for i in 0..nums.len() {\n        if\
    \ nums[i] > 10 {\n            if first % 2 == 1 {\n                cnt += 1;\n\
    \                last = 0;\n            }\n            first = 1;\n        } else\
    \ {\n            first = 0;\n        }\n        if last % 2 == 1 {\n         \
    \   cnt += 1;\n        }\n        last += 1;\n    }\n    cnt", "    let mut nums\
    \ = nums;\n    let mut sum = 0;\n    let mut odds = 0;\n\n    while nums.len()\
    \ > 0 {\n        sum += nums.remove(0).unwrap();\n        if sum > 10 && odds\
    \ % 2 == 1 {\n            odds += 1;\n        }\n    }\n    odds", "    let mut\
    \ sum = 0;\n    for &i in nums {\n        if i > 10 {\n            if i % 2 ==\
    \ 1 {\n                sum += 1;\n            }\n        } else {\n          \
    \  sum += 1;\n        }\n    }\n    return sum;", "    let mut result = nums.len();\n\
    \    for i in nums.iter() {\n        if nums.len() > 2 && i % 2 != 0 && nums[nums.len()-1]\
    \ % 2 != 0 {\n            if nums[i] < 10 {\n                result += 1;\n  \
    \          }\n        }\n    }\n    result", "    let mut sum = 0;\n    let mut\
    \ digits = 0;\n    for &num in nums {\n        if num % 2 == 1 {\n           \
    \ sum += num;\n            digits = 3;\n        } else {\n            if num >\
    \ 10 {\n                sum += num;\n                digits = 2;\n           \
    \ } else {\n                if digits > 2 {\n                    sum += num;\n\
    \                    digits += 1;\n                }\n            }\n        }\n\
    \    }\n    sum", "    let nums = nums.into_iter().map(|x| x % 2).collect::<Vec<bool>>();\n\
    \    \n    for i in nums.iter() {\n        if !nums.contains(&(i-1)) {\n     \
    \       break;\n        }\n        \n        if !nums.contains(&(i+1)) {\n   \
    \         break;\n        }\n    }\n    \n    nums.len()", '    nums.iter().filter(|x|
    x > 10 && x % 2 != 0 && x % 10 == 1).count()', "    let mut count = 0;\n    for\
    \ num in nums {\n        if num >= 10 && num % 2 == 1 && num % 5 == 1 && num %\
    \ 7 == 1 {\n            count += 1;\n        }\n    }\n    return count;", " \
    \   let mut sum = 0;\n    for x in nums {\n        if x > 10 {\n            if\
    \ x % 2 != 0 {\n                sum += x;\n            }\n        }\n    }\n \
    \   sum", '    nums.iter().filter(|x| x > 10 && &x % 2 == 1 || &x % 3 == 0).count()',
  "    let mut sum = 0;\n    let mut count = 0;\n    for n in nums {\n        if n\
    \ > 10 {\n            if n % 10 == 1 {\n                if n % 100 != 11 {\n \
    \                   sum += 1;\n                }\n            } else {\n     \
    \           if n % 10 == 1 {\n                    count += 1;\n              \
    \  }\n            }\n        }\n    }\n    count", '    nums.iter().filter(|x|
    x > 10 && x%2 != 0 && x%3 != 0).count()', "    let mut n = nums.len();\n    let\
    \ mut i = 0;\n    while i < n {\n        if nums[i] > 10 {\n            i += 1;\n\
    \            continue;\n        }\n        if nums[i] % 2 == 1 {\n           \
    \ i += 1;\n            continue;\n        }\n        if nums[i] % 3 == 1 {\n \
    \           i += 1;\n            continue;\n        }\n        if nums[i] % 5\
    \ == 1 {\n            i += 1;\n            continue;\n        }\n        if nums[i]\
    \ % 7 == 1 {\n            i += 1;\n            continue;\n        }\n        if\
    \ nums[i] % 9 == 1 {\n            i += 1;\n            continue;\n        }\n\
    \        break;\n    }\n    i - 1", '    specialFilter(nums, false, false)', " \
    \   nums.iter().filter(|&n| {\n        n < 10 && n % 2 != 0 && n % 3 != 0\n  \
    \  }).count()", "    let mut sum = 0;\n    for n in nums.iter() {\n        sum\
    \ += *n;\n    }\n    if sum > 10 && nums.iter().any(|x| x % 2 != 0) {\n      \
    \  let mut start = 0;\n        let mut end = nums.len();\n        let mut count\
    \ = 0;\n        while start < end {\n            count += 1;\n            let\
    \ mut curr = *start;\n            start += 1;\n            while curr < end &&\
    \ curr % 2 != 0 {\n                curr = curr * 10 + 1;\n            }\n    \
    \        end = curr;\n        }\n        count += 1;\n        count / 2\n    }\
    \ else {\n        0\n    }", '    specialFilterImpl(nums)', "    let mut count\
    \ = 0usize;\n\n    for i in nums.into_iter().rev() {\n        if *i & 1 == 1 &&\
    \ *i & 3 == 1 && *i & 5 == 1 && *i & 7 == 1 && *i & 9 == 1 {\n            count\
    \ += 1;\n        }\n    }\n\n    count", "    if nums.len() <= 0 {\n        return\
    \ 0;\n    }\n    let mut count = 0;\n    let mut x = nums.iter().sum();\n    while\
    \ x > 10 {\n        if x % 2 == 1 {\n            count = count + 1;\n        }\n\
    \        let last = nums.iter().last().unwrap();\n        if last%2 == 1 {\n \
    \           count = count + 1;\n        }\n        x = x / 2;\n    }\n    count",
  "    let mut n = 0;\n    for i in nums {\n        if i > 10 {\n            if i\
    \ % 2 != 0 {\n                n += 1;\n            }\n            if i % 2 !=\
    \ 0 {\n                n += 1;\n            }\n        }\n    }\n    n", "   \
    \ let mut i = 0;\n    for num in nums {\n        if num < 10 {\n            i\
    \ += 1;\n        }\n        if num % 2 == 1 {\n            i += 1;\n        }\n\
    \        if i > 0 && num % 2 == 0 {\n            i += 1;\n        }\n        if\
    \ num > 10 {\n            break;\n        }\n    }\n    i", "    let mut result\
    \ = 0;\n    for n in nums.iter() {\n        if n > 10 {\n            if n % 10\
    \ == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9 {\n       \
    \         if n % 2 == 1 {\n                    result += 1\n                }\n\
    \            }\n        }\n    }\n    return result;", "    let mut count = 0;\n\
    \    for num in nums {\n        if num % 2 == 0 {\n            count += 1;\n \
    \           if num % 2 != 0 {\n                if num % 4 == 0 {\n           \
    \         count += 1;\n                    if num % 8 == 0 {\n               \
    \         count += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count;", "    if nums.len() < 2 { return 0 }\n \
    \   let lower = &nums[..1];\n    let upper = &nums[1..];\n    for i in 0..nums.len()\
    \ {\n        if *lower %2!=0 && *upper%2!=0 { return i }\n    }\n    return nums.len()",
  '    nums.iter().filter(|x| x > 10 && x % 2 == 1).count()', "    // base case\n\
    \    if nums.len() == 0 {\n        return 0;\n    }\n\n    // recursive case\n\
    \    if nums.len() == 1 {\n        if nums[0] > 10 {\n            return 1;\n\
    \        }\n        return 0;\n    }\n\n    let even = nums.iter().filter(|x|\
    \ x % 2 == 0).count();\n    let odd = nums.iter().filter(|x| x % 2 != 0).count();\n\
    \n    if even > 0 && odd == 0 {\n        return even + 1;\n    }\n    if even\
    \ > 0 && odd > 0 && even % 2 == 0 {\n        return even + 1;\n    }\n    if even\
    \ > 0 && odd > 0 && even % 2 != 0 {\n        return even + 1;\n    }\n\n    if\
    \ odd > 0 && even > 0 && odd % 2 == 0 {\n        return odd + 1;\n    }\n    if\
    \ odd > 0 && even > 0 && odd % 2 != 0 {\n        return odd + 1;\n    }\n\n  \
    \  return nums.len();", '    nums.iter().filter(|num| num > 10 && (num % 2 !=
    0 || num % 3 != 0)).count()', "    if nums.len() == 0 {\n        return 0;\n \
    \   }\n    let mut count = 0;\n    for &i in nums {\n        if i > 10 && i %\
    \ 2 == 1 && i % 2 == 1 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut counter = 0;\n    for &n in nums {\n        if n % 10 == 1 && n % 100\
    \ != 11 && n % 100 != 71 && n % 100 != 91 {\n            counter += 1;\n     \
    \   }\n    }\n    counter", "    let mut count = 0;\n    for n in nums {\n   \
    \     if n > 10 && n % 2 == 1 && n % 3 == 1 {\n            count += 1;\n     \
    \   }\n    }\n    count", "    let mut cnt = 0;\n    for num in nums {\n     \
    \   if num > 10 {\n            if num % 10 == 1 && num % 100 != 11 {\n       \
    \         cnt += 1;\n            } else if num % 10 == 3 && num % 100 != 12 {\n\
    \                cnt += 1;\n            } else if num % 10 == 5 && num % 100 !=\
    \ 13 {\n                cnt += 1;\n            } else if num % 10 == 7 && num\
    \ % 100 != 14 {\n                cnt += 1;\n            } else if num % 10 ==\
    \ 9 && num % 100 != 15 {\n                cnt += 1;\n            }\n        }\n\
    \    }\n    cnt", "    if nums.len() < 2 {\n        return 0;\n    }\n\n    let\
    \ mut numsCopy = nums.clone();\n    let mut sum = 0;\n    for &x in numsCopy {\n\
    \        if x > 10 && numsCopy.len() > 1 {\n            if numsCopy.len() > 2\
    \ && numsCopy[0] == numsCopy[1] {\n                sum += x;\n               \
    \ numsCopy.pop();\n            }\n        } else {\n            sum += x;\n  \
    \      }\n    }\n    sum", "    nums.iter().filter(|n|\n        n % 10 == 1 &&\
    \ n % 100 !=11 && n % 1000 !=1001\n    ).count()", "    let mut n = 0;\n    for\
    \ &x in nums {\n        if x < 10 {\n            if x&1 != 0 {\n             \
    \   n++;\n            }\n        }\n        if x > 10 {\n            if x&1 !=\
    \ 0 {\n                n++;\n            }\n            if x&3 != 0 {\n      \
    \          n++;\n            }\n            if x&5 != 0 {\n                n++;\n\
    \            }\n            if x&7 != 0 {\n                n++;\n            }\n\
    \            if x&9 != 0 {\n                n++;\n            }\n        }\n \
    \   }\n    n", "    let len = nums.len();\n    let mut even = 1;\n    let mut\
    \ odd = 1;\n    for i in 0..(len - 1) {\n        if nums[i] > 10 {\n         \
    \   if nums[i] % 2 == 0 {\n                even++;\n            } else {\n   \
    \             odd++;\n            }\n        }\n    }\n\n    return even * odd;",
  "    let mut n = 0;\n    for n in nums {\n        let digit = nums.nth(n);\n   \
    \     if (digit > 10) && (digit % 2 != 0) &&\n            (nums.first(n) % 2 !=\
    \ 0) &&\n            (nums.last(n) % 2 != 0)\n        {\n            n = nums.iter().nth(n+1).unwrap();\n\
    \        }\n    }\n    n", "    nums.iter()\n        .filter(|n| n > 10)\n   \
    \     .filter(|n| n % 2 != 0)\n        .filter(|n| n % 3 != 0)\n        .filter(|n|\
    \ n % 5 != 0)\n        .filter(|n| n % 7 != 0)\n        .filter(|n| n % 9 != 0)\n\
    \        .count()", "    let mut counter = 1;\n    for num in nums {\n       \
    \ let first_even = num % 2 == 0;\n        let last_odd = num % 2 != 0;\n     \
    \   if first_even && last_odd {\n            counter += 1;\n        }\n    }\n\
    \    counter", "    let mut nums_copy = nums.clone();\n    let mut cnt = 0;\n\
    \    for i in nums_copy {\n        if i > 10 && i / 2 % 2 == 1 {\n           \
    \ cnt += 1;\n        }\n    }\n    cnt", "    let len = nums.len();\n    let mut\
    \ total = 0;\n    for i in 0..len {\n        if nums[i] > 10 && nums[i] % 2 ==\
    \ 1 && nums[i] % 2 == 0 {\n            total += 1;\n        }\n    }\n    return\
    \ total;", "    let mut cnt = 0;\n\n    for n in nums {\n        if n % 2 == 1\
    \ {\n            let mut m = n;\n            while m > 0 {\n                if\
    \ m % 2 == 1 {\n                    break;\n                }\n              \
    \  m /= 2;\n            }\n            cnt += m == 1;\n        }\n    }\n\n  \
    \  cnt", "    let mut cnt = 0;\n    for n in nums {\n        if n > 10 && n %\
    \ 2 != 0 {\n            if n % 100 == 0 {\n                cnt += 1;\n       \
    \     }\n        }\n    }\n    cnt", "    let mut count = 0;\n    for num in nums\
    \ {\n        if num > 10 {\n            if num % 2 == 1 {\n                if\
    \ num % 3 != 1 {\n                    if num % 5 != 1 {\n                    \
    \    if num % 7 != 1 {\n                            if num % 9 != 1 {\n      \
    \                          count += 1;\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    count", '    nums.iter().filter(|x| x > 10 && x % 2 ==
    1 && x % 3 != 0).count()', "    let len = nums.len();\n    for i in 0..len {\n\
    \        if nums[i] > 10 && nums[i] % 2 != 0 && nums[i] != 0 && nums[i] != nums[len\
    \ - i - 1] {\n            return i;\n        }\n    }\n    0", "    nums.iter().filter(|x|\
    \ x > 10).count(|x| {\n        (x % 10) % 2 != 0\n            && (x % 100) % 2\
    \ != 0\n            && (x % 1000) % 2 != 0\n    })", "    let mut num = 0;\n \
    \   for n in nums {\n        if n % 2 == 0 {\n            num += 1\n        }\n\
    \        if num == 1 && n % 2 != 0 {\n            num += 1;\n        }\n    }\n\
    \    num", "    let mut count = 0;\n    for x in nums {\n        if x > 10 &&\
    \ x % 2 == 1 && x % 3 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut num_good = 0;\n    let mut num_odd_first = 0;\n    let mut num_odd_last\
    \ = 0;\n\n    for num in nums {\n        if num > 10 {\n            if num % 10\
    \ == 1 && num / 10 != 1 {\n                num_good++;\n            }\n      \
    \      if num % 10 == 3 && num / 10 != 3 {\n                num_good++;\n    \
    \        }\n            if num % 10 == 5 && num / 10 != 5 {\n                num_good++;\n\
    \            }\n            if num % 10 == 7 && num / 10 != 7 {\n            \
    \    num_good++;\n            }\n            if num % 10 == 9 && num / 10 != 9\
    \ {\n                num_good++;\n            }\n        } else {\n          \
    \  if num % 10 == 1 && (num / 10 == 1 || num / 10 == 3 || num / 10 == 5 || num\
    \ / 10 == 7 || num / 10 == 9) {\n                num_good++;\n            }\n\
    \            if num % 10 == 3 && (num / 10 == 1 || num / 10 == 3 || num / 10 ==\
    \ 5 || num / 10 == 7 || num / 10 == 9) {\n                num_good++;\n      \
    \      }\n            if num % 10 == 5 && num / 10 != 5 {\n                num_good++;\n\
    \            }\n            if num % 10 == 7 && num / 10 != 7 {\n            \
    \    num_good++;\n            }\n            if num % 10 == 9 && num / 10 != 9\
    \ {\n                num_good++;\n            }\n            if num % 10 == 1\
    \ {\n                num_odd_first++;\n            }\n            if num % 10\
    \ == 3 {\n                num_odd_last++;\n            }\n            if num %\
    \ 10 == 5 || num % 10 == 7 {\n                num_odd_first++;\n             \
    \   num_odd_last++;\n            }\n            if num % 10 == 9 {\n         \
    \       num_odd_first++;\n                num_odd_last++;\n                num_odd_last++;\n\
    \            }\n        }\n    }\n\n    (num_good, num_odd_first, num_odd_last)",
  "    let mut count = 0;\n    for &i in nums.iter() {\n        if i > 10 {\n    \
    \        if i % 2 == 1 {\n                if i != 9 {\n                    count\
    \ += 1;\n                }\n            } else {\n                if i != 1 {\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    count", '    nums.iter().filter(|&x| x > 10 && x % 2 == 0).filter(|&x|
    x % 2 == 1).count()', '    nums.iter().filter(|x| x > 10 && x > nums[0] % 2 &&
    x > nums.last().unwrap() % 2).count()', "    nums.iter().filter(|num| num > 10).filter(|num|\
    \ {\n        num % 2 == 1 && (num % 2 == 1 || num % 2 == 3)\n    }).count()"]
stop_tokens:
- "\n}"
