language: rs
name: HumanEval_53_add
results:
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut sum = x;\n  \
    \  sum += y;\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let res = x + y;\n  \
    \  assert_eq!(res.wrapping_add(x), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(y),\
    \ \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&x + &y), \"wrapping_add\"\
    );\n    assert_eq!(res.wrapping_add(&y as isize), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&y\
    \ as f64), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x * y) as isize),\
    \ \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x * y) as f64), \"wrapping_add\"\
    );\n    assert_eq!(res.wrapping_add(&(x % y) as isize), \"wrapping_add\");\n \
    \   assert_eq!(res.wrapping_add(&(x % y) as f64), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&((x\
    \ % y) as usize) as isize), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&((x\
    \ % y) as usize) as f64), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&((x\
    \ % y) as f64), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x % y) as\
    \ isize), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x % y) as f64),\
    \ \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x % y) as isize), \"wrapping_add\"\
    );\n    assert_eq!(res.wrapping_add(&(x % y) as f64), \"wrapping_add\");\n   \
    \ assert_eq!(res.wrapping_add(&(x % y) as isize), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x\
    \ % y) as f64), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x - y as\
    \ isize), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x - y as f64),\
    \ \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x - &y as isize), \"wrapping_add\"\
    );\n    assert_eq!(res.wrapping_add(&(x - &y as f64), \"wrapping_add\");\n   \
    \ assert_eq!(res.wrapping_add(&(x - &y as isize), \"wrapping_add\");\n    assert_eq!(res.wrapping_add(&(x\
    \ - &y as f64), \"wrapping_add\");\n    assert_\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpcwh695z4.rs:31:15\n\
    \   |\n6  | fn add(x: isize, y: isize) -> isize {\n   |                      \
    \               - closing delimiter possibly meant for this\n...\n31 |     assert_eq!(res.wrapping_add(&(x\
    \ - &y as f64), \"wrapping_add\");\n   |               ^ unclosed delimiter\n\
    32 |     assert_\n33 | }\n   | ^ mismatched closing delimiter\n\nerror: no rules\
    \ expected the token `;`\n  --> /tmp/tmpcwh695z4.rs:19:67\n   |\n19 |     assert_eq!(res.wrapping_add(&((x\
    \ % y) as f64), \"wrapping_add\");\n   |                                     \
    \                              ^ no rules expected this token in macro call\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpcwh695z4.rs:8:5\n  |\n8 |     assert_eq!(res.wrapping_add(x),\
    \ \"wrapping_add\");\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&str`\n  |\n  = note: this error originates in the\
    \ macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpcwh695z4.rs:9:5\n  |\n9 |     assert_eq!(res.wrapping_add(y),\
    \ \"wrapping_add\");\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&str`\n  |\n  = note: this error originates in the\
    \ macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcwh695z4.rs:10:5\n   |\n10 | \
    \    assert_eq!(res.wrapping_add(&x + &y), \"wrapping_add\");\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&str`\n   |\n   = note: this error originates in the\
    \ macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcwh695z4.rs:11:5\n   |\n11 | \
    \    assert_eq!(res.wrapping_add(&y as isize), \"wrapping_add\");\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&str`\n   |\n   = note: this error originates in the\
    \ macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0308]: mismatc"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let sum = x + y;\n  \
    \  if sum < 0 {\n        sum + 2 * 2\n    } else {\n        sum + 2\n    }\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmphnqaymms.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: -1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut r = x + y;\n\
    \    loop {\n        if r < 0 {\n            r += 10;\n        }\n        if r\
    \ > 9 {\n            r -= 10;\n        }\n        if r == 0 {\n            break;\n\
    \        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976077
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x < y { x + y } else\
    \ { y + x }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut z = x;\n    z\
    \ += y;\n    z\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x >= 0 {\n       \
    \ if y >= 0 {\n            x + y\n        } else {\n            -x\n        }\n\
    \    } else {\n        if y >= 0 {\n            -x\n        } else {\n       \
    \     x + y\n        }\n    }\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2,\
    \ 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5),\
    \ 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x < y {\n        x\
    \ + y\n    } else {\n        y + x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let res = x + y;\n  \
    \  trace!(\"add: x={}, y={}, result={}\", x, y, res);\n    res\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `trace` in this scope\n --> /tmp/tmp6xxhbi8v.rs:8:5\n\
    \  |\n8 |     trace!(\"add: x={}, y={}, result={}\", x, y, res);\n  |     ^^^^^\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x < y {\n        x\
    \ + y\n    } else {\n        x + y + 1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprprdb2k0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n  \
    \  assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5,\
    \ 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let res = x + y;\n  \
    \  res as isize\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x > y {\n        x\
    \ + y\n    } else {\n        x + y + 1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpl9ykm6hi.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut carry: isize\
    \ = 0;\n    let mut sum: isize = 0;\n    while y != 0 {\n        sum = sum + x\
    \ % y;\n        carry = x / y;\n        x = y;\n        y = carry;\n    }\n  \
    \  sum + x + carry\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpph2lbqac.rs:12:9\n\
    \   |\n6  | fn add(x: isize, y: isize) -> isize {\n   |        - help: consider\
    \ making this binding mutable: `mut x`\n...\n12 |         x = y;\n   |       \
    \  ^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to\
    \ immutable argument `y`\n  --> /tmp/tmpph2lbqac.rs:13:9\n   |\n6  | fn add(x:\
    \ isize, y: isize) -> isize {\n   |                  - help: consider making this\
    \ binding mutable: `mut y`\n...\n13 |         y = carry;\n   |         ^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut sum = 0;\n  \
    \  for i in 0 .. x {\n        sum += i;\n    }\n    for i in 0 .. y {\n      \
    \  sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n   \
    \ assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2,\
    \ 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5),\
    \ 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7c0b0_u_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut sum = x;\n  \
    \  sum += y;\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    assert!(x >= 0);\n  \
    \  assert!(y >= 0);\n    assert!(x < y);\n    let result = (x + y) as isize;\n\
    \    if result > MAX_SIZE as isize {\n        return MAX_SIZE as isize;\n    }\n\
    \    result as isize\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MAX_SIZE` in this scope\n  --> /tmp/tmpzfpl0ofv.rs:11:17\n\
    \   |\n11 |     if result > MAX_SIZE as isize {\n   |                 ^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `MAX_SIZE` in this\
    \ scope\n  --> /tmp/tmpzfpl0ofv.rs:12:16\n   |\n12 |         return MAX_SIZE as\
    \ isize;\n   |                ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let sum = x + y;\n  \
    \  debug_assert!(\n        sum < std::isize::MAX,\n        \"Arithmetic overflow,\
    \ addition overflows the integer type\",\n    );\n    return sum as isize\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x < y { x + y } else\
    \ { y + x }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x == y {\n       \
    \ x\n    } else {\n        x + y\n    }\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n\
    \    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n \
    \   assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) as isize\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let x_signed = if x <\
    \ 0 {\n        -x + 1\n    } else {\n        x + 1\n    };\n    let y_signed =\
    \ if y < 0 {\n        -y + 1\n    } else {\n        y + 1\n    };\n\n    let x_unsigned\
    \ = if x < 0 {\n        x_signed - 1\n    } else {\n        x_signed + 1\n   \
    \ };\n    let y_unsigned = if y < 0 {\n        y_signed - 1\n    } else {\n  \
    \      y_signed + 1\n    };\n\n    if x_unsigned < y_unsigned {\n        x_unsigned\n\
    \    } else {\n        y_unsigned\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjn4c75sc.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n  \
    \  assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5,\
    \ 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if y > x {\n        x\
    \ + y\n    } else {\n        y - x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `1`', /tmp/tmpqci4z_li.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) as isize\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x > y {\n        let\
    \ tmp = y;\n        y = x;\n        x = tmp;\n    }\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `y`\n --> /tmp/tmpjqb89ivg.rs:9:9\n\
    \  |\n6 | fn add(x: isize, y: isize) -> isize {\n  |                  - help:\
    \ consider making this binding mutable: `mut y`\n...\n9 |         y = x;\n  |\
    \         ^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `x`\n  --> /tmp/tmpjqb89ivg.rs:10:9\n   |\n6  | fn add(x:\
    \ isize, y: isize) -> isize {\n   |        - help: consider making this binding\
    \ mutable: `mut x`\n...\n10 |         x = tmp;\n   |         ^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if y < x {\n        return\
    \ x + y;\n    }\n    \n    return x + y;\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x + y == 0 {\n   \
    \     x\n    } else {\n        x + y\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x > y {\n        x\
    \ + y\n    } else {\n        x + y\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x < y { x + y } else\
    \ { y - x }\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `1`', /tmp/tmpcafr68q4.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n  \
    \  assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5,\
    \ 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut result = 0;\n\
    \    while x > 0 {\n        result += (x % 10) + (y % 10);\n        y /= 10;\n\
    \        x /= 10;\n    }\n    while y > 0 {\n        result += x % 10;\n     \
    \   y /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n  \
    \  assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n   \
    \ assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpmd9uhhwn.rs:10:9\n\
    \   |\n6  | fn add(x: isize, y: isize) -> isize {\n   |                  - help:\
    \ consider making this binding mutable: `mut y`\n...\n10 |         y /= 10;\n\
    \   |         ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot\
    \ assign to immutable argument `x`\n  --> /tmp/tmpmd9uhhwn.rs:11:9\n   |\n6  |\
    \ fn add(x: isize, y: isize) -> isize {\n   |        - help: consider making this\
    \ binding mutable: `mut x`\n...\n11 |         x /= 10;\n   |         ^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror[E0384]: cannot assign to immutable argument\
    \ `y`\n  --> /tmp/tmpmd9uhhwn.rs:15:9\n   |\n6  | fn add(x: isize, y: isize) ->\
    \ isize {\n   |                  - help: consider making this binding mutable:\
    \ `mut y`\n...\n15 |         y /= 10;\n   |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let sum = x + y;\n  \
    \  if sum < 0 {\n        sum + 2\n    } else {\n        sum\n    }\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    // The casting here to\
    \ u64 allows us to use add on numbers up to u64::max_value\n    // https://doc.rust-lang.org/std/primitive.u64.html#method.max_value\n\
    \    // If we don't use u64::max_value, we'll see an error \"can't add u128 to\
    \ u64\"\n    // because u128 + u64 = u128 + u128 == u128\n    x + y.into()\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0284]: type annotations needed: cannot satisfy `<isize as Add<_>>::Output\
    \ == isize`\n  --> /tmp/tmpoee89q4m.rs:11:7\n   |\n11 |     x + y.into()\n   |\
    \       ^ cannot satisfy `<isize as Add<_>>::Output == isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0284`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) as isize\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) - (x + y)\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpm568vv1u.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut sum = 0;\n  \
    \  for i in 0..x {\n        sum += y;\n    }\n    for i in 0..y {\n        sum\
    \ += x;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmph3bku84h.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let result = (x + y);\n\
    \    assert_eq!(result, 15);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `15`', /tmp/tmp4w8zw4ow.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) as isize\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let sum = x + y;\n  \
    \  if sum > 0 { sum } else { -sum };\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n  \
    \  assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n   \
    \ assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmq5ir0q9.rs:6:31\n  |\n6 |\
    \ fn add(x: isize, y: isize) -> isize {\n  |    ---                        ^^^^^\
    \ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n7 |     let sum = x + y;\n8 |     if\
    \ sum > 0 { sum } else { -sum };\n  |                                     - help:\
    \ remove this semicolon\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let z = x + y;\n    if\
    \ z < 0 {\n        z += 1000;\n    }\n    z\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmprl9fbh4w.rs:9:9\n\
    \  |\n7 |     let z = x + y;\n  |         -\n  |         |\n  |         first\
    \ assignment to `z`\n  |         help: consider making this binding mutable: `mut\
    \ z`\n8 |     if z < 0 {\n9 |         z += 1000;\n  |         ^^^^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut res = x;\n  \
    \  res += y;\n    res\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n\tx + y\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let z = x + y;\n    if\
    \ z > 2147483647 {\n        z %= 2147483647;\n        z = z + (z / 2147483646)\
    \ * 2147483646;\n    }\n    z\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2,\
    \ 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5),\
    \ 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `z`\n --> /tmp/tmpp_6aj28i.rs:9:9\n\
    \  |\n7 |     let z = x + y;\n  |         -\n  |         |\n  |         first\
    \ assignment to `z`\n  |         help: consider making this binding mutable: `mut\
    \ z`\n8 |     if z > 2147483647 {\n9 |         z %= 2147483647;\n  |         ^^^^^^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice\
    \ to immutable variable `z`\n  --> /tmp/tmpp_6aj28i.rs:10:9\n   |\n7  |     let\
    \ z = x + y;\n   |         -\n   |         |\n   |         first assignment to\
    \ `z`\n   |         help: consider making this binding mutable: `mut z`\n...\n\
    10 |         z = z + (z / 2147483646) * 2147483646;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n\tx + y\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut result = x;\n\
    \    result += y;\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2,\
    \ 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5),\
    \ 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x + y == 0 {\n   \
    \     x\n    } else {\n        x + y\n    }\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    // Add x\n    x + y\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) - (x + y)\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpm568vv1u.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut sum = x + y;\n\
    \    if sum < 0 {\n        sum *= -1;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let mut s = x + y;\n\
    \    if s > 0 {\n        s -= 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1, 0),\
    \ 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7), 12);\n\
    \    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpypsqmziq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 101
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let z = x + y;\n    if\
    \ z < x {\n        return z;\n    }\n    return y;\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpor8jx5sz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    let res = x + y;\n  \
    \  ensure!(\n        res.is_positive(),\n        \"add: x + y is negative\",\n\
    \        false,\n        \"add: x + y is negative\",\n        false,\n       \
    \ false\n    );\n    res\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0,\
    \ 1), 1);\n    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3),\
    \ 5);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n\
    }\n"
  status: SyntaxError
  stderr: "error: cannot find macro `ensure` in this scope\n --> /tmp/tmpeade00zg.rs:8:5\n\
    \  |\n8 |     ensure!(\n  |     ^^^^^^\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    return x + y;\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) as isize\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x + y <= 0 {\n   \
    \     return 0;\n    } else {\n        return (x + y) as isize;\n    }\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n \
    \   assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n   \
    \ assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 1
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    if x == 0 || y == 0 {\n\
    \        return 0;\n    }\n    let mut sum = 0;\n    while y < x {\n        sum\
    \ += y;\n        y += 1;\n    }\n    sum += x;\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpd_8nqbau.rs:13:9\n\
    \   |\n6  | fn add(x: isize, y: isize) -> isize {\n   |                  - help:\
    \ consider making this binding mutable: `mut y`\n...\n13 |         y += 1;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    (x + y) as isize\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n\
    \    assert_eq!(candidate(1, 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n  \
    \  assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976072
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
- exit_code: 0
  program: "/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfn add(x: isize, y: isize) -> isize {\n    x + y\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(0, 1), 1);\n    assert_eq!(candidate(1,\
    \ 0), 1);\n    assert_eq!(candidate(2, 3), 5);\n    assert_eq!(candidate(5, 7),\
    \ 12);\n    assert_eq!(candidate(7, 5), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822421
