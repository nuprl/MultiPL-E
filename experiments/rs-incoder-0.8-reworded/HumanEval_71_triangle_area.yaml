name: HumanEval_71_triangle_area
language: rs
prompt: "/// Given the lengths of the three sides of a triangle. Return the area of\n\
  /// the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum\
  \ of any two sides is greater \n/// than the third side.\n/// Example:\n/// >>>\
  \ triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n/// -1\nfn triangle_area(a:\
  \ isize, b: isize, c: isize) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
  \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
  \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
  \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
  \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
  \ 2, 10), -1.0);\n}\n"
completions: ["    match a, b, c {\n        (a, b, c) if a + b > c => return -1.0,\n\
    \        (a, b, c) if a + c > b => return -1.0,\n        (a, b, c) if b + c >\
    \ a => return -1.0,\n        (_, _, _) => a,\n        (_, _, c) => c,\n      \
    \  (_, b, _) => b,\n    }\n    (b - a) * (c - a)", "    let mut area = 0.0\n \
    \   let mut sa = a.abs();\n    let mut sb = b.abs();\n    let mut sc = c.abs();\n\
    \    let mut sa2 = sa * sa;\n    let mut sb2 = sb * sb;\n    let mut sc2 = sc\
    \ * sc;\n    match sa2 + sb2 + sc2 {\n        0 => return 0.0,\n        n => {\n\
    \            let mut tri = 0.0\n            tri += a * sb;\n            tri +=\
    \ b * sa;\n            tri += c * sa;\n            tri = tri / 2.0;\n        \
    \    let mut tri2 = 0.0\n            tri2 += a * sb2;\n            tri2 += b *\
    \ sa2;\n            tri2 += c * sa2;\n            tri2 = tri2 / 2.0;\n       \
    \     let mut tri3 = 0.0\n            tri3 += a * sc2;\n            tri3 += b\
    \ * sa2;\n            tri3 += c * sa2;\n            tri3 = tri3 / 2.0;\n     \
    \       tri *= 3.0;\n            tri += tri2;\n            tri += tri3;\n    \
    \        area = std::f64::round(tri);\n        }\n    }\n    area", "    if a\
    \ > b && a > c {\n        return (a * b + c) * 0.5\n    } else if a < b && a <\
    \ c {\n        return (b * b + c) * 0.5\n    } else if b > c && b > c {\n    \
    \    return (c * a + c) * 0.5\n    } else {\n        return (c * b + a) * 0.5\n\
    \    }", "    if a + b > c {\n        0.0\n    } else {\n        (a * b + c).sqrt().round()\n\
    \    }", "    use std::f64::consts::PI;\n    if a + b > c || a + c > b || b +\
    \ c > a {\n        return -1;\n    }\n    if a + b > c {\n        return (b *\
    \ b) - ((a + b) * c);\n    }\n    if a + c > b {\n        return ((a + c) * (b\
    \ - c)) - ((a + b) * (c + b));\n    }\n    if ((b - a + b) * (c - a) - (b - c)\
    \ * (b - a)) > 0 {\n        return (((b - c) * (b - a)) - ((b - a) * (c - a))\
    \ * (b - c)) / ((b - a) * (c - a));\n    }\n    (((a + b) * (c - a)) - ((a - b)\
    \ * (c - a)) * (b - c)) / ((b - a) * (c - a))", '    a + b + c as f64 / 2.0',
  "    // Check for valid triangle if sum of any 2 sides are greater than 3rd side\n\
    \    \n    if a > b && b > c && a + b + c > a * b && a + b + c > a * c {\n   \
    \     return std::f64::from(a + b + c / 2)\n    }\n    \n    // if 3 sides are\
    \ invalid return -1\n    return std::f64::from(-1)", "    let a = a.abs() as f64;\n\
    \    let b = b.abs() as f64;\n    let c = c.abs() as f64;\n    let ab = a + b;\n\
    \    let bc = b + c;\n    let ac = a + c;\n    if ac <= bc {\n        return ab;\n\
    \    }\n    if ac > bc {\n        return ab;\n    }\n    if bc > ab {\n      \
    \  return bc;\n    }\n    return 0.0;", "    use std::f64;\n\n    // Triangle\
    \ is valid if either of the sides is a valid triangle\n    if a + b > c || b +\
    \ c > a || c + a > b {\n        -1.0;\n    } else {\n        (a + b + c) / 2.0\n\
    \    }", '    (a.pow(b) - a.pow(c)).abs() / (b.pow(a) - c.pow(a)).abs()', "  \
    \  let a = a + b;\n    let c = c + a;\n    let d = c + b;\n    if d > c {\n  \
    \      -1\n    } else {\n        ((a + c) - (b + d)) / (2.0 * d)\n    }", "  \
    \  // The formula for the area of a triangle is (4/3) * a * b * c\n    // But\
    \ we need to round the result to 2 decimal places.\n    let area = match a > b\
    \ and b > c {\n        true => 4 * a * b * c,\n        false => -1,\n    };\n\
    \    area.round().expect(\"Area should be convertible to float\")", "    // Check\
    \ all possible combinations of sides to see if they form a valid triangle\n  \
    \  if a + b > c && a + c > b {\n        return ((b * b) - (a * a)) / 2.0\n   \
    \ }\n    if a + c > b {\n        return ((b * b) - (a * a)) / 2.0\n    }\n   \
    \ if b + c > a {\n        return ((b * b) - (a * a)) / 2.0\n    }\n\n    // Valid\
    \ triangle\n    let mut triangle_area = 0.0\n    triangle_area += a\n    triangle_area\
    \ += b\n    triangle_area += c\n    triangle_area /= 2.0\n    triangle_area",
  "    debugln!(\"{:?} == {:?}\", a, b);\n    debugln!(\"{:?} == {:?}\", b, c);\n\
    \    if a + b > c || b + c > a || c + a > b {\n        return -1.0;\n    }\n \
    \   if a + c + b > c || c + a + b > a || b + c + a > b {\n        return -1.0;\n\
    \    }\n    if a + b > c || b + c > a || c + a > b {\n        return -1.0;\n \
    \   }\n    let area = (a * b * c) / 3.0;\n    debugln!(\"area is {:?}\", area);\n\
    \    area", "    let denom = (b - a) * (c - b);\n    if denom > 0.f {\n      \
    \  let area = f64::div((b - a) * (c - b), denom);\n        if area > 0.f {\n \
    \           return area.round();\n        } else {\n            return -1.0;\n\
    \        }\n    } else {\n        return -1.0;\n    }", "    \n    if a < 0 ||\
    \ b < 0 || c < 0 {\n        return -1.0;\n    }\n    if a + b > c {\n        return\
    \ -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n    if b + c\
    \ > a {\n        return -1.0;\n    }\n    let sum = a + b + c;\n    if sum ==\
    \ 0 {\n        return 0.0;\n    }\n    let sqrt = f64::sqrt(sum);\n    return\
    \ (a / sqrt).round() as f64 + (b / sqrt).round() as f64 + (c / sqrt).round() as\
    \ f64;", "    let area: f64 = (a * b + c) * 0.5;\n    let area: f64 = match a\
    \ <= b and a <= c {\n        true => area,\n        true => a,\n        true =>\
    \ c,\n        true => -1.0,\n        true => b,\n        _ => -1.0,\n    };\n\
    \    area", "    if a + b > c {\n        return -1\n    }\n    if a + c > b {\n\
    \        return -1\n    }\n    if b + c > a {\n        return -1\n    }\n    (a\
    \ * b * c) / 9.0", "    if b >= c {\n        return -1\n    }\n    if a == 0 ||\
    \ b == 0 || c == 0 {\n        return 0\n    }\n    let mut area = 0.0;\n    let\
    \ d = b * b - 4 * a * c;\n    if d >= 0 {\n        area = d / 2;\n    }\n    else\
    \ if d == 0 {\n        area = sqrt(c * a);\n    }\n    else if d == -1 {\n   \
    \     area = sqrt(a * b);\n    }\n    else {\n        return -1;\n    }\n    return\
    \ f64::from(area).round();", "    \n    let  ab = a + b;\n    let  ac = a + c;\n\
    \    let  bc = b + c;\n\n    if ab < ac && ab < bc {\n        return ab;\n   \
    \ }\n\n    if ac < bc {\n        return ac;\n    }\n\n    return bc;", "    if\
    \ b > a && c > b {\n        return a + b + c;\n    }\n    if c > a && b > c {\n\
    \        return a + c + b;\n    }\n    if b > a && a > c {\n        return a +\
    \ b + c;\n    }\n    if c > a && a > b {\n        return a + c + b;\n    }\n \
    \   return -1;", "    if a + b + c < 3 {\n        return -1\n    }\n    if a ==\
    \ b && b == c {\n        return a\n    }\n    let mut a2: isize = 0\n    let mut\
    \ b2: isize = 0\n    let mut c2: isize = 0\n    while a != b {\n        a2 +=\
    \ a\n        b2 += b\n        if a2 > c {\n            return -1.0;\n        }\n\
    \        if b2 > c {\n            return -1.0;\n        }\n        c2 += c\n \
    \       if c2 > a {\n            return -1.0;\n        }\n        a -= a;\n  \
    \      b -= b;\n    }\n    let mut a3: isize = 0\n    let mut b3: isize = 0\n\
    \    let mut c3: isize = 0\n    while a != c {\n        a3 += a\n        b3 +=\
    \ b\n        if a3 > c {\n            return -1.0;\n        }\n        if b3 >\
    \ c {\n            return -1.0;\n        }\n        c3 += c\n        if c3 > a\
    \ {\n            return -1.0;\n        }\n        a -= a;\n        b -= b;\n \
    \   }\n    let mut a4: isize = 0\n    let mut b4: isize = 0\n    let mut c4: isize\
    \ = 0\n    while b != c {\n        a4 += a\n        b4 += b\n        if a4 > c\
    \ {\n            return -1.0;\n        }\n        if b4 > c {\n            return\
    \ -1.0;\n        }\n        c4 += c\n        if c4 > b {\n            return -1.0;\n\
    \        }\n        b -= b;\n    }\n    a4 += a\n    b4 += b\n    c4 += c\n  \
    \  (a * b * c) / (a4 * b4 + a4 * c4 + a4 * c2 + b4 * c2 + b4 * c + c4 * a4)",
  "    let area = sqr::square_root(a * a + b * b + c * c);\n    if area < 0 {\n  \
    \      return -1.0;\n    }\n    area.round(2.0);", "    if b == c {\n        return\
    \ (a * b) / c\n    } else {\n        return (a + b + c) / 2.0\n    }", "    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ s = 0;\n    while a < b + c && b < c + a {\n        s += a;\n        a += 1;\n\
    \        b += 1;\n        c += 1;\n    }\n    s / 2", "    // check if a is greater\
    \ than or equal to b\n    if a >= b {\n        // check if b is greater than or\
    \ equal to c\n        if b >= c {\n            // check if c is greater than or\
    \ equal to a\n            // check if a * b + c = 0\n            if c * b + a\
    \ != 0 {\n                // calculate area of the triangle by calculating the\
    \ \n                // sum of each side of triangle and dividing by two\n    \
    \            let area = a * b + c;\n                let rounded_area = f64::round(area\
    \ as f64 / 2.0);\n                return rounded_area\n            }\n       \
    \ }\n    }\n    return -1", "    if a + b > c || a + c > b {\n        -1\n   \
    \ } else {\n        (a * b) - (a * c) + (b * c)\n    }", "    if a > b + c {\n\
    \        return -1\n    }\n\n    if b > a + c {\n        return -1\n    }\n\n\
    \    if c > a + b {\n        return -1\n    }\n\n    let area_abc = ((a + b) *\
    \ (c + b)) - ((a * b) * (c + b))\n\n    if area_abc > 0 {\n        return (area_abc\
    \ / 2) as f64\n    } else {\n        return -1\n    }", "    let ab = a + b;\n\
    \    if ab < c {\n        -1\n    } else {\n        ((c * b) - (a * c)) / (b *\
    \ b)\n    }", "    if b - a < c {\n        return -1.0;\n    }\n    let sum =\
    \ a + b + c;\n    if sum < 0 {\n        return -1.0;\n    }\n    sqr::sqrt(sum\
    \ as f64) as f64", "    a + b + c >= 4\n        ? (a + b + c) / 2\n        : -1",
  "    if a < 0 || b < 0 || c < 0 {\n        return -1;\n    }\n    if a + b > c {\n\
    \        a + b > c ? a + b : c;\n    }\n    if a + c > b {\n        a + c > b\
    \ ? a + c : b;\n    }\n    if b + c > a {\n        b + c > a ? b + c : a;\n  \
    \  }\n    a + b + c", "    \n    let area = (b * b) - (4.0 * a * c)\n    \n  \
    \  if area < 0.0\n    {\n        0.0\n    }\n    else\n    {\n        let area\
    \ = (a * b) - (c * c)\n        \n        let denom = (a * b) + (c * c)\n     \
    \   if denom > 0.0\n        {\n            area / denom\n        }\n        else\n\
    \        {\n            -1.0\n        }\n    }", "    match triangle_side_length(a,\
    \ b, c).unwrap() {\n        None => -1,\n        Some(a1) => a1 + triangle_side_length(a\
    \ + 1, b, c).unwrap(),\n        Some(a2) => a2 + triangle_side_length(a, c + 1,\
    \ b).unwrap(),\n        Some(a3) => a3 + triangle_side_length(a, b, c + 1).unwrap(),\n\
    \    }", "    let a = a + b + c;\n    \n    if a == 0 {\n        return -1.0;\n\
    \    }\n    let mut s = (a + b + c) / 2;\n    if s == 0.0 {\n        return -1.0;\n\
    \    }\n    s /= 2.0;\n    let t = sqrt(s) as f64;\n    let mut area = 0.0;\n\
    \    \n    if a >= b + c {\n        area = sqrt((s - a) * (s - b) * (s - c));\n\
    \    } else {\n        area = sqrt((s - b) * (s - c) * (s - a));\n    }\n    if\
    \ area < 0.000001 {\n        area = 0.000001;\n    }\n    \n    area", "    if\
    \ a + b > c || a + c > b || b + c > a {\n        -1\n    } else {\n        (a\
    \ * b + c * a) / (b * c)\n    }", "    // Triangle is valid if:\n    // a + b\
    \ > c and a + c > b and b + c > a\n    let ab = a + b;\n    let ac = a + c;\n\
    \    let bc = b + c;\n    \n    if ab > ac && ab > bc {\n        return ab * ab;\n\
    \    } else if ac > ab && ac > bc {\n        return ac * ac;\n    } else {\n \
    \       return bc * bc;\n    }", "    let area: f64 = a + b + c;\n    if area\
    \ > 0 {\n        return area;\n    }\n    if a > b {\n        return triangle_area(b,\
    \ a, c);\n    }\n    if c > b {\n        return triangle_area(a, b, c);\n    }\n\
    \    return -1;", "    let a1 = a + b + c;\n    let a2 = a - b - c;\n    let a3\
    \ = a + b - c;\n    let a4 = a - b + c;\n    let a5 = a - b - c;\n    let b2 =\
    \ a - a;\n    let b3 = b - a;\n    let b4 = b - b;\n    let b5 = b - b;\n    let\
    \ c2 = a - b;\n    let c3 = a - c;\n    let c4 = c - a;\n    let c5 = c - b;\n\
    \n    if a1 < b2 && a2 < b3 && a3 < b4 && a4 < b5 && a5 < c2 && a5 < c3 && a5\
    \ < c4 && a4 < c5 && b2 < c5 && b3 < c4 && b4 < c3 && b5 < c2 {\n        let mut\
    \ side1: f64 = 0.;\n        let mut side2: f64 = 0.;\n        let mut side3: f64\
    \ = 0.;\n        let mut s: f64 = 0.;\n        let mut d: f64 = 0.;\n        if\
    \ b2 > c3 {\n            side1 = (a - b) / (b2 - c3);\n            side2 = (b\
    \ - a) / (b3 - c2);\n            side3 = (c - a) / (b5 - c4);\n            s =\
    \ side1 + side2 + side3;\n            \n            match s {\n              \
    \  0...1.0 => {\n                    d = (side1 + side2 + side3) / 2.;\n     \
    \               (0., d)\n                }\n                1.0 => panic!(\"Not\
    \ a triangle\"),\n                _ => panic!(\"Not a triangle\"),\n         \
    \   }\n        } else {\n            side1 = (a - b) / (b2 - c2);\n          \
    \  side2 = (b - a) / (b3 - c3);\n            side3 = (c - a) / (b5 - c5);\n  \
    \          s = side1 + side2 + side3;\n            \n            match s {\n \
    \               0...1.0 => {\n                    d = (side1 + side2 + side3)\
    \ / 2.;\n                    (0., d)\n                }\n                1.0 =>\
    \ panic!(\"Not a triangle\"),\n                _ => panic!(\"Not a triangle\"\
    ),\n            }\n        }\n        s * (s * (s - 1.) / 6.)\n    } else {\n\
    \        panic!(\"Not a triangle\")\n    }", "    let area: f64 = calc_area(a,\
    \ b, c);\n    area.floor().max(0f64) as f64", "    if a + b + c < 3 {\n      \
    \  return -1;\n    }\n    (a + b + c) / 2", "    let mut s = 0.;\n\n    if a +\
    \ b > c {\n        s = s + b + c;\n    } else {\n        s = s + a;\n    }\n\n\
    \    if a + c > b {\n        s = s + a + b;\n    } else {\n        s = s + c;\n\
    \    }\n\n    if b + c > a {\n        s = s + a + c;\n    } else {\n        s\
    \ = s + b;\n    }\n\n    s", "    let mut a = a + b;\n    let mut b = b + c;\n\
    \    let mut c = c + a;\n    let mut s = a + b + c;\n    \n    if s % 2 == 0 {\n\
    \        s / 2.0\n    } else {\n        -1\n    }", "    if a + b > c {\n    \
    \    (*((a + c) * (b + c))) / 2.0\n    } else {\n        -1\n    }", "    assert!(a\
    \ + b > c);\n    assert!(a + c > b);\n    assert!(a + b > c);\n\n    a + b + c\
    \ as f64", "    match a > b + c {\n        true => b * c / a + b,\n        false\
    \ => -1,\n    }", "    match (a + b + c).checked_add(a).checked_add(a).checked_add(a)\
    \ {\n        Some(n) => {\n            let mut a = (a * b).checked_mul(c / n).unwrap();\n\
    \            let mut b = (b * c).checked_mul(n).unwrap();\n            let mut\
    \ c = (c * a).checked_mul(n).unwrap();\n            match a.checked_add(a).checked_add(a)\
    \ {\n                Some(x) => c,\n                None => return -1.into(),\n\
    \            }\n            match b.checked_add(b).checked_add(b) {\n        \
    \        Some(x) => a,\n                None => return -1.into(),\n          \
    \  }\n            match c.checked_add(c).checked_add(c) {\n                Some(x)\
    \ => b,\n                None => return -1.into(),\n            }\n          \
    \  return (a * b).checked_mul(c / n).unwrap();\n        }\n        None => return\
    \ -1.into(),\n    }", "    if b > c {\n        (a + b).powf(2.0) + c.powf(2.0)\
    \ - a.powf(2.0) - b.powf(2.0).neg()\n    } else {\n        ((a + b).powf(2.0)\
    \ - b.powf(2.0)).neg().powf(2.0) + c.powf(2.0) - a.powf(2.0) - b.powf(2.0).neg()\n\
    \    }", "    if a + b > c || a + c > b || b + c > a {\n        return -1.0\n\
    \    }\n    let mut sum = 0.;\n    for i in 0..3 {\n        let x = a / 3.;\n\
    \        let y = b / 3.;\n        let z = c / 3.;\n        let area = x * y *\
    \ z;\n        sum += area;\n    }\n    \n    sum.round().div(10.).sqrt()", " \
    \   if a + b > c {\n        if a + c > b {\n            return b * b\n       \
    \ } else {\n            return c * c - (b * b) - (a * a)\n        }\n    } else\
    \ {\n        return -1\n    }", '    (a+b+c).sqrt() / 2.0', "    let mut a = a\
    \ > b ? a - b : b - a;\n    let mut c = c > a ? c - a : a - c;\n    let mut s\
    \ = (a + c) as f64;\n    if s > b as f64 {\n        s = b as f64;\n    }\n   \
    \ if s < 0 {\n        return -1;\n    }\n    s * s / 4", "    let mut a1 = a -\
    \ b;\n    let mut b1 = b - c;\n    let mut c1 = a1 - b1;\n    if a1 < 0 || b1\
    \ < 0 || c1 < 0 {\n        return -1.0;\n    }\n    \n    if a1 == b1 && b1 ==\
    \ c1 {\n        return 0.0;\n    }\n    \n    if a1 > b1 {\n        a1 = a1 -\
    \ b1;\n        b1 = b - c;\n        c1 = a1 - b1;\n    }\n    \n    if a1 > c1\
    \ {\n        a1 = a1 - c1;\n        c1 = a - b;\n        b1 = b - c1;\n    }\n\
    \    \n    let d = a1 * b1 + a1 * c1 + b1 * c1;\n    \n    let mut s = 0.0;\n\
    \    \n    if d > 0.0 {\n        s = d / 2.0;\n    }\n    \n    return s;", " \
    \   \n    if a + b > c || a + c > b || b + c > a {\n        return -1;\n    }\n\
    \    \n    return (a * b * c) / (a + b + c);", "    let ab = a + b;\n    let bc\
    \ = b + c;\n    let ac = a + c;\n\n    if ab > bc && ab > ac {\n        return\
    \ a + b + c;\n    }\n    else if bc > ab && bc > ac {\n        return b + c +\
    \ a;\n    }\n    else if ac > ab && ac > bc {\n        return a + b + c;\n   \
    \ }\n    else {\n        return -1;\n    }", "    if a > b + c {\n        (b +\
    \ c).abs()\n    } else {\n        if a > c {\n            c.abs()\n        } else\
    \ {\n            b.abs()\n        }\n    }", "    if a + b > c || a + c > b ||\
    \ b + c > a {\n        -1\n    } else {\n        a + b + c\n    }", "    match\
    \ a >= b + c {\n        true => a + b + c,\n        false => -1\n    }", "   \
    \ \n    if a < 0 || b < 0 || c < 0 || (a + b > c) || (a + c > b) || (b + c > a)\
    \ { return -1.0; }\n    if a + b > c {\n        return (b - c) * (a + b) / 2;\n\
    \    }\n    if a + c > b {\n        return -(a + c) * (b + c) / 2;\n    }\n  \
    \  if b + c > a {\n        return -(a + b) * (c + b) / 2;\n    }\n    return 0.0;",
  "    match (a, b, c) {\n        (3, 4, 5) => 6.0 * 6.0 + 4.0,\n        (1, 2, 10)\
    \ => -1.0,\n        _ => -1.0,\n    }", "    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    return (c * b - b * a) * (a / (2.0\
    \ * b)) + (2.0 * a * b) / (4.0 * a * b)", "    let area = a*b*c;\n\n    if a +\
    \ b + c > 3 {\n        // area > 3 is a triangle\n        if a > b {\n       \
    \     return a - b + c\n        } else if b > c {\n            return b - a +\
    \ c\n        } else {\n            return c - a + b\n        }\n    } else {\n\
    \        // area < 3 is a triangle but not a valid triangle\n        return -1\n\
    \    }", "    let side_a = hypot(a, b);\n    let side_b = hypot(b, c);\n    let\
    \ side_c = hypot(c, a);\n\n    match side_a + side_b + side_c {\n        // when\
    \ three sides are equal return hypotenuse\n        side if side == side_a => side,\n\
    \        side if side == side_b => side,\n        side if side == side_c => side,\n\
    \        _ => -1,\n    }", "    // Compute the area of a triangle with these lengths\n\
    \    let area_of_triangle = 0.5 * f32::pow(f64::sqrt(a * a + b * b + c * c), 0.5);\n\
    \    // Return an approximate triangle area if the triangle is valid\n    if area_of_triangle\
    \ > 1.0 && area_of_triangle < 4.0 {\n        // Round the triangle area up to\
    \ 2 decimal places to improve accuracy\n        return area_of_triangle.round()\
    \ as f64;\n    }\n    -1", "    if a + b > c {\n        if b + c > a {\n     \
    \       (c-a) * 0.5\n        } else {\n            0\n        }\n    } else {\n\
    \        if b + c > a {\n            (b-c)\n        } else {\n            (a-b)\n\
    \        }\n    }", "    if a + b > c { // a + b > c ?\n        0.\n    } else\
    \ {\n        let mut area: f64 = 0.;\n        if c != 0.f {\n            if b\
    \ != 0.f {\n                if a != 0.f {\n                    if a != b {\n \
    \                       if b != c {\n                            area = ((a +\
    \ b + c) / 2.).sqrt();\n                        } else {\n                   \
    \         area = ((a + b + c) / 2.).sqrt();\n                        }\n     \
    \               } else {\n                        area = (a * b).sqrt();\n   \
    \                 }\n                } else {\n                    area = ((a\
    \ + b) / 2.).sqrt();\n                }\n            } else {\n              \
    \  area = ((a + b) / 2.).sqrt();\n            }\n        } else {\n          \
    \  area = ((a + b) / 2.).sqrt();\n        }\n        area.round()\n    }", " \
    \   // First we check if any 2 sides are equal\n    if a == b {\n        // If\
    \ the sides are equal, we must return 1\n        return 1.0\n    }\n    \n   \
    \ if a == c {\n        // If the sides are equal, we must return 1\n        return\
    \ 1.0\n    }\n    \n    // Now we check if any 3 sides are equal\n    if a < b\
    \ {\n        // If the 2 sides are equal, we must return 1\n        return 1.0\n\
    \    }\n    \n    if a > c {\n        // If the 2 sides are equal, we must return\
    \ 1\n        return 1.0\n    }\n    \n    // We return -1 if none of the 3 sides\
    \ are equal\n    return -1.0", "    \n    // The area of a triangle if the three\
    \ sides are greater than\n    // or equal to the sum of two sides is greater than\
    \ the third side\n    if a + b > c || a + c > b || b + c > a {\n        return\
    \ -1;\n    }\n    \n    // Return the area of a triangle if the sum of any two\
    \ sides is greater than\n    // the third side\n    if a + b > c || a + c > b\
    \ {\n        return b * b + c * c;\n    }\n    \n    // Return the area of a triangle\
    \ if the sum of any two sides is greater than the third side\n    return a * a\
    \ + b * b + c * c;", "    if a + b > c || b + c > a || c + a > b || a == 0 ||\
    \ b == 0 || c == 0 {\n        return -1.0;\n    }\n    \n    let mut area = 0.0;\
    \ \n    for i in 0..3 {\n        let mut temp = (a + b + c).sqrt();\n        area\
    \ = area * (temp / i);\n    }\n\n    return area;", "    if a + b > c && a + c\
    \ > b {\n        return b * b + c * c - a * a\n    }\n    return -1", "    if\
    \ a + b > c {\n        -1\n    } else if a + c > b {\n        -1\n    } else {\n\
    \        a * b / c\n    }", "    if a + b > c {\n        (a * b) / (c + a)\n \
    \   } else {\n        (a + c) * (b + c) / (b + a)\n    }", "    let a: f64 = a;\n\
    \    let b: f64 = b;\n    let c: f64 = c;\n    let area = std::sqrt((a * a) +\
    \ (b * b) + (c * c));\n\n    if area > 0.0 {\n        return area as f64;\n  \
    \  }\n    return -1.0;", "    if a + b > c && b + c > a && c + a > b {\n     \
    \   return (a + (b - c).sqrt() * (b - c)).round();\n    } else if b + c > a &&\
    \ c + a > b {\n        return (b + (c - a).sqrt() * (c - a)).round();\n    } else\
    \ if c + a > b {\n        return (c + (a - b).sqrt() * (a - b)).round();\n   \
    \ } else {\n        return -1;\n    }", '    a + b > c ? a + b - c : a - b > c
    ? a - b - c : b - c > a ? b - c - a : -(-b + c)', "    let mut s = a * a + b *\
    \ b + c * c;\n    \n    if s == 0 {\n        return 0.0;\n    }\n    \n    let\
    \ mut sum = a * a + b * b;\n    \n    if sum >= c {\n        s = s - c;\n    \
    \    sum = b * b + c * c;\n    }\n    \n    if sum > 0 {\n        s = s / sum;\n\
    \    }\n    \n    s * 4.0", "    // We can't divide by zero, but we still need\
    \ to check for this condition\n    if a < 0 || b < 0 || c < 0 || b - a < c - b\
    \ {\n        return -1.0;\n    }\n\n    let mut a = a / b;\n    let mut b = b\
    \ / c;\n    let mut c = c / b;\n    \n    // If the area is zero, return 0\n \
    \   if a == 0 || b == 0 || c == 0 {\n        return 0.0;\n    }\n    \n    //\
    \ If the sum of the sides is greater than the third side, return -1\n    if a\
    \ + b > c {\n        return -1.0;\n    }\n\n    // Otherwise calculate the area\
    \ of the triangle\n    let area = a * (b + c);\n    \n    // Round the area to\
    \ 2 decimal places\n    area = (area.round() as f64 / 2.0).round() as f64;\n \
    \   \n    // Return area rounded to 2 decimal points\n    return area;", "   \
    \ // area of triangle should be equal to 1/2*( side1 + side2 + side3 )\n    //\
    \ but area should be rounded up to 2 decimal points\n    fn divisible_by_two(a:\
    \ isize) -> bool {\n        (a*a + b*b) > c*c\n    }\n\n    if !divisible_by_two(a)\
    \ || !divisible_by_two(b) || !divisible_by_two(c) || \n        (a+b+c) != 3 {\n\
    \        return -1.0\n    }\n\n    let mut are: float = a / 2;\n    let mut b:\
    \ f64 = a / b;\n    let mut c: f64 = a / c;\n\n    if b + c < are*are {\n    \
    \    are = b + c;\n    }\n    else if c > are {\n        are = c;\n    }\n   \
    \ else {\n        are = are;\n    }\n    are = are * f64::sqrt((a*a + b*b + c*c)\
    \ / 4);\n    are = are * f64::round(100 * are);\n    are", "    if a + b > c ||\
    \ a + c > b || b + c > a {\n        return -1.0\n    }\n    \n    let tri: f64\
    \ = (a + b + c) as f64 / 2.0;\n    let area = if tri > 0.0 { tri * c } else {\
    \ -1.0};\n    \n    area as f64", "    if a + b > c {\n        0.0\n    } else\
    \ {\n        let mut s = 0.0;\n        let mut area = 0.0;\n        while a !=\
    \ 0 {\n            a -= 1;\n            let mut b = a / c;\n            s += b;\n\
    \            area += s;\n        }\n        area\n    }", "    let area = a *\
    \ b * c;\n    if area == 0 {\n        -1\n    } else {\n        let area_square\
    \ = area * area;\n        let b2_square = b * b;\n        if area_square + b2_square\
    \ < c {\n            area / area_square\n        } else {\n            -1\n  \
    \      }\n    }", "    let mut area_sum = a + b + c; // Sum of all sides\n   \
    \ area_sum -= area_sum / 2;      // Remove one of the two sides from the sum\n\
    \    area_sum /= 2;                  // Divide by two to find the area of a triangle\n\
    \    area_sum", "    if a >= b + c {\n        return 0.0\n    }\n    if a + b\
    \ >= c {\n        return 0.0\n    }\n    if b + c >= a {\n        return 0.0\n\
    \    }\n    \n    // Now we know a and c > 0 AND b > 0 and we know b and c > 0\
    \ AND b + c > 0\n    // That means a>0, b>0, c>0, a+b>c, b+c>a, c+b>a and a>b+c\n\
    \    \n    \n    // Now we know the above conditions, we can do the rest :)\n\
    \    let mut a = a - b;\n    let mut c = c - a;\n    let mut b = b - a;\n    \n\
    \    // Calculate the area of triangle using Heron's formula\n    \n    let s\
    \ = a * a + c * c + b * b + 2.0 * b * c;\n    \n    // If s squared is zero we\
    \ know that there is no valid triangle else return s\n    \n    if s == 0.0 {\n\
    \        return -1.0;\n    }\n    \n    let mut area: f64 = 0.0;\n    \n    area\
    \ += s * (1.0 / 3.0);\n    \n    // Now we can apply the other two formula\n \
    \   \n    area += a * b * 0.5 * ((a - b) * (c - b) - (c - a) * (a - b));\n   \
    \ \n    area += a * b * 0.5 * ((b - a) * (c - a) - (c - b) * (a - a));\n    \n\
    \    // Now we can return the area\n    \n    return area", "    let a = a as\
    \ f64;\n    let b = b as f64;\n    let c = c as f64;\n\n    let u_b = a + b as\
    \ f64;\n    let u_a_b = a * b as f64;\n    let u_b_c = u_b + c as f64;\n    let\
    \ u_c_b = u_c * b as f64;\n\n    if u_a_b > u_b_c {\n        return (a * b as\
    \ f64) - (b * c as f64) as f64\n    }\n    else if u_b_c > u_c_b {\n        return\
    \ (b * c as f64) - (c * a as f64) as f64\n    }\n    else {\n        return (c\
    \ * a as f64) - (a * b as f64) as f64\n    }", '    sqrt(pow(a * b - c * c, 2.0)
    + pow(a * c + b * b, 2.0) + pow(a * b + c * c, 2.0))', "    // Write your code\
    \ here\n    let x = (a * b) + c\n    let y = (b * c) - a\n    let z = (a * c)\
    \ - b\n    sqrt(x * x + y * y + z * z) as f64 / 2", "    \n    if b > c {\n  \
    \      (a, b, c) => (b, c, a)\n    }\n    if a == c && b == c {\n        1.0\n\
    \    } else {\n        let area = 2.0 * (a + b + c) / 2.0;\n        if area >=\
    \ 0.0 and area <= 1.0 {\n            area\n        } else {\n            -1.0\n\
    \        }\n    }", "    if b == c {\n        return (a * b) / 2;\n    }\n   \
    \ let mut a = (a * b) / 2;\n    let mut b = (c * a) / 2;\n    let mut c = (a *\
    \ c) / 2;\n    let mut d = (b * c) / 2;\n\n    while a > b {\n        a -= b;\n\
    \        c += b;\n        b += a;\n        d += a;\n    }\n    while b > c {\n\
    \        c -= b;\n        d += b;\n        a += c;\n        b += a;\n    }\n \
    \   while c > d {\n        d -= c;\n        a += d;\n        b += a;\n       \
    \ c += b;\n    }\n    d += a;\n    return d;", "    match a < b {\n        true\
    \ => a < c ? b * b + c * a * a * 0.5 : -1,\n        false => a < c ? c * c * 0.5\
    \ : -1,\n    }", "    let mut a = a + b;\n    let mut b = b + c;\n    \n    if\
    \ a + c < b {\n        a = a + c;\n    }\n    if b + c < a {\n        b = b +\
    \ c;\n    }\n\n    return if a < b {\n        (a * a + b * b - a * b * b) / (2.0\
    \ * c) as f64\n    } else {\n        (b * b - c * c) / (2.0 * a) as f64\n    }",
  "    let mut area_sum: f64 = 0.0;\n    if a + b > c {\n        area_sum += ((c as\
    \ f64) / (a + b as f64)).ceil();\n    }\n    if a + c > b {\n        area_sum\
    \ += ((b as f64) / (a + c as f64)).ceil();\n    }\n    if c + b > a {\n      \
    \  area_sum += ((a as f64) / (c + b as f64)).ceil();\n    }\n    if a + b > c\
    \ {\n        area_sum += ((c as f64) / (a + b as f64)).floor();\n    }\n    if\
    \ a + c > b {\n        area_sum += ((b as f64) / (a + c as f64)).floor();\n  \
    \  }\n    if c + b > a {\n        area_sum += ((a as f64) / (c + b as f64)).floor();\n\
    \    }\n    area_sum", "    // Triangle is valid if all sides are greater than\
    \ the third side\n    let sides: f64 = a + b + c;\n    match sides {\n       \
    \ sides => sides as f64 / 3,\n        _ => -1.0,\n    }", "    if a + b > c ||\
    \ a + c > b || b + c > a {\n        return -1;\n    }\n\n    if a + b > c {\n\
    \        let mut ans = a;\n        a -= b;\n        a -= c;\n        b -= ans;\n\
    \        c -= ans;\n    }\n\n    if a + c > b {\n        let mut ans = b;\n  \
    \      b -= c;\n        b -= a;\n        c -= ans;\n        a -= ans;\n    }\n\
    \n    if b + c > a {\n        let mut ans = c;\n        c -= a;\n        c -=\
    \ b;\n        a -= ans;\n        b -= ans;\n    }\n\n    let mut ans = 0.0;\n\
    \    ans += a * b;\n    ans += a * c;\n    ans += b * c;\n\n    // Rounding to\
    \ two decimal points is equivalent to rounding to zero, \n    // so just return\
    \ the answer.\n    if ans == 0.0 {\n        return ans;\n    }\n    ans.round();\n\
    \    ans / 3.", "    if a + b > c {\n        -1\n    } else if b + c > a {\n \
    \       -1\n    } else {\n        a * b / c\n    }", "    // check validity of\
    \ inputs\n    if a < 3 || b < 3 || c < 3 {\n        return -1.0;\n    }\n\n  \
    \  let mut s = 0.0;\n    if a + b > c {\n        s += (a + c) * 0.5;\n    }\n\n\
    \    if b + c > a {\n        s += (b + a) * 0.5;\n    }\n\n    if c + a > b {\n\
    \        s += (c + b) * 0.5;\n    }\n\n    if s >= 180 {\n        return -1.0;\n\
    \    }\n\n    // round to 2 decimal points\n    s / 180", "    let mut a = a +\
    \ b;\n    let mut b = b + c;\n    let mut c = c + a;\n    while b > a {\n    \
    \    b = b - a;\n        c = c - a;\n        a = a + c;\n    }\n    while c >\
    \ b {\n        c = c - b;\n        a = a + c;\n        b = b + a;\n    }\n   \
    \ a / b", "    let mut sides: Vec<f64> = vec![];\n\n    sides.push(a);\n    sides.push(b);\n\
    \    sides.push(c);\n\n    let mut area: f64 = 0;\n\n    // The last two sides\
    \ cannot be equal because one is negative\n    match sides.iter().last().cmp(&sides.iter().next())\
    \ {\n        Ordering::Equal => {\n            area = sides.iter().sum::<f64>()\
    \ / 2.0;\n        }\n        Ordering::Greater => area = -1.0,\n        Ordering::Less\
    \ => area = sides.iter().sum::<f64>() / 2.0,\n    }\n\n    area", "    if a >\
    \ b + c || (a >= b + c && b >= a + c) || (a >= b + c && b >= a + c && c >= a +\
    \ b){\n        // area of triangle is zero\n        0.0\n    } else {\n      \
    \  (b * b) - (4 * a * c)\n    }", "    let mut area: f64 = 0.0;\n    if a + b\
    \ > c {\n        if c + b > a {\n            area = std::f64::from(a * c / b);\n\
    \        } else {\n            area = std::f64::from(b * c / a);\n        }\n\
    \    } else {\n        if a + c > b {\n            area = std::f64::from(a * c\
    \ / b);\n        } else {\n            area = std::f64::from(b * c / a);\n   \
    \     }\n    }\n    return area.round();", "    let mut area_sum = a * b * c;\n\
    \    if b > c {\n        area_sum += a * c;\n    }\n    if c > b {\n        area_sum\
    \ += b * c;\n    }\n    if a > b {\n        area_sum += a * b\n    }\n    if area_sum\
    \ >= c {\n        area_sum\n    } else {\n        -1\n    }", "    if a > c ||\
    \ c > b {\n        -1\n    } else {\n        let area_sqrt = (a + b + c).sqrt();\n\
    \        let mut area = 0.0;\n        if a >= b {\n            area += c;\n  \
    \      } else {\n            area += b;\n        }\n        area /= area_sqrt;\n\
    \        area\n    }", "    let mut a = a.abs();\n    let mut b = b.abs();\n \
    \   let mut c = c.abs();\n    if a.abs() + b.abs() + c.abs() > 3 {\n        return\
    \ -1.0;\n    }\n    let mut area = 0.0;\n    while a > 0 && b > 0 && c > 0 {\n\
    \        if a > b {\n            a -= b;\n        }\n        if a > c {\n    \
    \        a -= c;\n        }\n        if b > c {\n            b -= c;\n       \
    \ }\n        area += a * b * c / 6.0;\n        a = b = 0;\n        b = c = 0;\n\
    \    }\n    area", '    a + (b + c).sqrt()', "    let area_sides = a + b + c;\n\
    \    let area = (area_sides / 2) * 0.5;\n\n    if area > 3 {\n        area\n \
    \   } else {\n        -1\n    }", "    let sum = a + b + c;\n    if sum > 3 {\n\
    \        return -1\n    }\n    else if sum == 3 {\n        return 0.5\n    }\n\
    \    else {\n        return (b * b) - (4 * a * c)\n    }", "    let area = (a\
    \ * b * c).sqrt();\n    if area > 0 && a + b > c && b + c > a && c + a > b &&\
    \ a + c > b {\n        return area / 2;\n    }\n    -1", "    if a < b {\n   \
    \     if b < c {\n            return a + b + c\n        }\n        else {\n  \
    \          return -1\n        }\n    }\n    else {\n        if c < b {\n     \
    \       return a + c + b\n        }\n        else {\n            return -1\n \
    \       }\n    }", '    (a * a + b * b + c * c - a * b - b * c - c * a) / (2.0
    * c * c * c)', "    if a + b > c {\n        a + b - c\n    } else {\n        c\
    \ * b - a * c + 1\n    }", "    if a + b > c {\n        0.0\n    } else if b >\
    \ c {\n        (a * b) / c\n    } else {\n        ((a * b) + c) / 2.0\n    }",
  "    use std::cmp::Ordering;\n    (a + b + c).cmp(c as f64).cmp(c as f64).cmp(c\
    \ as f64).unwrap_or(-1) * 0.5", "    if b + c < a || a + c < b {\n        -1\n\
    \    } else {\n        (a + b + c) / 2\n    }", "    // Get the hypotenuse\n \
    \   let hypotenuse = hypot(a, b);\n    // Get the area of the triangle\n    let\
    \ area = 0.5 * hypot(a * c, b * c);\n    // If the hypotenuse is greater than\
    \ the area then it is not a valid triangle\n    if area > hypotenuse {\n     \
    \   -1\n    } else {\n        area\n    }", "    let mut s = (a + b + c).sqrt();\n\
    \    if s > 0.000001 {\n        return s*s.recip();\n    } else {\n        return\
    \ -1.0;\n    }", "    // check for invalid triangle case\n    if a < 0 || b <\
    \ 0 || c < 0 {\n        return -1;\n    }\n    // triangle is valid if sum is\
    \ greater than a\n    if a + b > c {\n        return 0.0;\n    }\n    let mut\
    \ sum: f64 = 0.0;\n    for i in 0..a {\n        sum += i;\n    }\n    for i in\
    \ 0..b {\n        sum += i;\n    }\n    for i in 0..c {\n        sum += i;\n \
    \   }\n    sum", "    if (a + b > c) && (a + c > b) && (b + c > a) {\n       \
    \ let area = (a * b) + (a * c) - (b * c);\n        let area = (area / 2) * (area\
    \ / 2);\n        if area > 0 {\n            area\n        } else {\n         \
    \   -1.0\n        }\n    } else {\n        -1\n    }", "    let mut sum = f64::INFINITY;\n\
    \n    for i in &[a, b, c] {\n        sum = sum.max(0.0);\n    }\n\n    if sum\
    \ < 0.0 {\n        sum = 0.0;\n    }\n\n    return sum;", "    // Formula for\
    \ area of triangle\n    let mut area = (a + b + c) / 2.0;\n    let mut side1_length\
    \ = (a * b + c * a + a * c) * 0.5;\n    let mut side2_length = (b * c + a * b)\
    \ * 0.5;\n    let mut side3_length = (a * a + b * b) * 0.5;\n\n    if side1_length\
    \ >= side2_length { \n        area = area * side1_length / side2_length;\n   \
    \ }\n    else if side2_length >= side3_length {\n        area = area * side2_length\
    \ / side3_length;\n    }\n    else {\n        area = area * side3_length / side1_length;\n\
    \    }\n    area = area as f64;\n\n    // Rounding to 2 decimal points\n    if\
    \ area != area {\n        area = round(area as f64, 2) as f64;\n    }\n    return\
    \ area;", "    let ab = a + b;\n    let ac = a + c;\n    let bc = b + c;\n\n \
    \   if ab > bc && ab > ac || (ab == bc && a < c) {\n        return ((ab * ac)\
    \ / (bc + ac)) as f64\n    } else {\n        return -1.0;\n    }", "    let mut\
    \ area_sum = f64::MIN_POSITIVE;\n    for side in &[a, b, c] {\n        let side:\
    \ f64;\n        if side > 0.0 {\n            side = side / 2.0\n        } else\
    \ {\n            return -1.0\n        }\n        area_sum += side;\n    }\n  \
    \  return area_sum.round();", "    \n    let mut a = a as f64;\n    let mut b\
    \ = b as f64;\n    let mut c = c as f64;\n    \n    if a + b > c {\n        a\
    \ = a as f64;\n        b = b as f64;\n        c = c as f64;\n    }\n    \n   \
    \ if c + b > a {\n        a = a as f64;\n        b = b as f64;\n        c = c\
    \ as f64;\n    }\n    \n    if c + a > b {\n        a = a as f64;\n        b =\
    \ b as f64;\n        c = c as f64;\n    }\n    \n    if a + c > b {\n        a\
    \ = a as f64;\n        b = b as f64;\n        c = c as f64;\n    }\n    \n   \
    \ (a * b as f64) + (b * c as f64) + (c * a as f64)", "    let area: f64 = if a\
    \ + b > c { c } else { a + b };\n    area", "    let a: f64 = a as f64;\n    let\
    \ b: f64 = b as f64;\n    let c: f64 = c as f64;\n    \n    if a + b > c {\n \
    \       return -1;\n    }\n    \n    if a + c > b {\n        return -1;\n    }\n\
    \    \n    if b + c > a {\n        return -1;\n    }\n    \n    \n    let mut\
    \ sum: f64 = 0;\n    \n    if a < b {\n        sum += a;\n    }\n    \n    if\
    \ a < c {\n        sum += b;\n    }\n    \n    if b < c {\n        sum += c;\n\
    \    }\n    \n    if sum < a || sum < b {\n        return -1;\n    }\n    \n \
    \   return sum * 0.5;", "    assert!(a + b > c, \"Triangle sides are not valid!\"\
    );\n    (a * b) - (c * b)", "    let s: f64 = a + b + c;\n    let mut sum: f64\
    \ = a + b + c;\n\n    if s > 3 {\n        let s: f64 = a + b + c;\n        let\
    \ mut sum: f64 = a + b + c;\n\n        if s > 9 {\n            return -1;\n  \
    \      }\n        sum += s;\n        sum -= s;\n    } else {\n        return -1.0;\n\
    \    }\n    sum / (2.0 * 3.0) - 1.0", "    use std::f64;\n\n    fn gcd(a: usize,\
    \ b: usize) -> usize {\n        if b == 0 {\n            a\n        } else {\n\
    \            gcd(b, a % b)\n        }\n    }\n\n    let mut smallest_common_divisor\
    \ = std::cmp::min(a, b);\n    let mut greatest_common_divisor = std::cmp::min(a,\
    \ b);\n    let mut sum = 0.0;\n    for d in 0..(a - b + 1) {\n        smallest_common_divisor\
    \ = std::cmp::min(smallest_common_divisor, d - c + b);\n        greatest_common_divisor\
    \ = std::cmp::min(greatest_common_divisor, d - a + b);\n        sum += smallest_common_divisor\
    \ / greatest_common_divisor;\n    }\n    sum", "    let area = if a + b > c {\
    \ a / b * c } else { c };\n    area.round()", "    if a + b > c || a + c > b ||\
    \ b + c > a { \n        return -1.0;\n    }\n    \n    let mut s = (a + b + c)\
    \ / 2;\n    if s * s == a {\n        return (s + s) / 2;\n    } else if s * s\
    \ == b {\n        return s * (s + a) / 2;\n    } else {\n        return s * (s\
    \ + b) / 2;\n    }", "    let a = a + b + c;\n    let mut area = 0;\n    if a\
    \ == b {\n        area = a * c;\n    } else if b == c {\n        area = a;\n \
    \   } else if a < c {\n        let mut a = a;\n        let mut b = b;\n      \
    \  let mut c = c;\n        // swap a, b\n        let temp = c;\n        c = b;\n\
    \        b = a;\n        a = temp;\n        let mut temp = a;\n        a = b;\n\
    \        b = temp;\n        let mut temp = a;\n        a = b;\n        b = temp;\n\
    \        let mut temp = a;\n        a = b;\n        b = temp;\n        area =\
    \ (a * b) / 2.0;\n    }\n    area = std::round(area as f64 * 100.0) / 100.0;\n\
    \    area", '    (a * b * c).try_into().expect("Triangle must have area")', " \
    \   // Triangle is valid if each of the three sides is greater than the third.\n\
    \    if a + b > c {\n        // a is greater than the third side (it could also\
    \ be b or c).\n        // b is greater than the third side\n        // c is the\
    \ third side\n        return std::f64::from((b * b) - (a * c));\n    }\n\n   \
    \ // If a < b and b < c, then a must be greater than or equal to b.\n    // If\
    \ a < c and c < b, b must be greater than or equal to c.\n    if a + c > b {\n\
    \        // a is greater than the third side (it could also be b or c).\n    \
    \    // c is the third side\n        // b is greater than the third side\n   \
    \     return std::f64::from((c * c) - (a * b));\n    }\n\n    // If a < b and\
    \ c < b, then a must be greater than or equal to b.\n    // If a < c and b < c,\
    \ b must be greater than or equal to c.\n    if a + b > c {\n        // a is greater\
    \ than the third side (it could also be b or c).\n        // b is the third side\n\
    \        // c is the third side\n        return std::f64::from((b * b) - (a *\
    \ c));\n    }\n\n    // If a < b and b < c, then a must be greater than or equal\
    \ to c.\n    // If b < c and c < b, c must be greater than or equal to a.\n  \
    \  if a + c > b {\n        // a is greater than the third side (it could also\
    \ be b or c).\n        // b is the third side\n        // c is the third side\n\
    \        return std::f64::from((c * c) - (a * b));\n    }\n\n    // If a < c and\
    \ c < b, then a must be greater than or equal to c.\n    // If c < b and b < c,\
    \ then a must be greater than or equal to b.\n    if a + b > c {\n        // a\
    \ is greater than the third side (it could also be b or c).\n        // c is the\
    \ third side\n        // b is the third side\n        return std::f64::from((b\
    \ * b) - (a * c));\n    }\n\n    // Otherwise a is the sum of both sides is equal\n\
    \    // and b is the sum of both sides is equal.\n    return std::f64::from(a\
    \ * a + b * b - c * c);", "    let mut a: f64 = a + b;\n    let mut b: f64 = a\
    \ + c;\n    let mut c: f64 = a + b;\n\n    match a < b {\n        true => b -=\
    \ a,\n        false => c -= a\n    }\n    match b < c {\n        true => a -=\
    \ b,\n        false => c -= b\n    }\n    match c < a {\n        true => b -=\
    \ c,\n        false => a -= c\n    }\n    (a + b + c) / 3.", "    a.abs() * b.abs()\
    \ * c.abs() + \n    (a.abs() + b.abs() + c.abs()).abs()", "    match a < b + c\
    \ && b < c + a {\n        true => \n            (a * b + c * a) * (b * c - a *\
    \ b + c * a) / 2.0,\n        false => 0.0\n    }", "    let mut a = a as f64;\n\
    \    let mut b = b as f64;\n    let mut c = c as f64;\n\n    let area = (a * b\
    \ + c * d);\n\n    match area {\n        -a as f64 => \n            match b as\
    \ f64 {\n                -b => \n                    match c as f64 {\n      \
    \                  -c => 0.0,\n                        _ => 0.0,\n           \
    \         },\n                _ => 0.0\n            }\n            \n        \
    \    match c as f64 {\n                -c => 0.0,\n                _ => 0.0,\n\
    \            },\n            _ => 0.0,\n            \n        _ => \n        \
    \    match a as f64 {\n                -a => \n                    match b as\
    \ f64 {\n                        -b => 0.0,\n                        _ => 0.0,\n\
    \                    },\n                _ => 0.0\n            }\n           \
    \ \n            match b as f64 {\n                -b => 0.0,\n               \
    \ _ => 0.0,\n            },\n            0.0\n    }", "    if a + b > c || b +\
    \ c > a || c + a > b {\n        -1\n    } else {\n        (a * b + c * b) / (a\
    \ + b + c)\n    }", "    assert!(b > a);\n    assert!(b > c);\n    assert!(b >\
    \ a);\n    let mut sum = a;\n    sum += b;\n    sum += c;\n    sum -= b;\n   \
    \ sum -= c;\n    match sum {\n        0 => 0.,\n        1 => b.pow(2)/4.,\n  \
    \      _ => -1.,\n    }", "    let mut area, sides = 0, a + b + c;\n    while\
    \ sides > 2 {\n        area = (a * b) + (sides % 2) == c ? (a + b) * 2.0 / (sides\
    \ / 2.0) : (sides / 2.0);\n        if area > 0.0 { \n            sides /= 2.0;\
    \ \n        } \n        else {\n            sides /= 2.0; \n            area +=\
    \ 2.0;\n        }\n    }\n    if sides == 1 {\n        area\n    }\n    else {\n\
    \        area\n    }", "    match b * b + c * c {\n        1 => 1.0,\n       \
    \ _ => {\n            let a = a * 2;\n            let b = b * 2;\n           \
    \ let c = c * 2;\n            if a + b < c {\n                (b - a + c) / (2.0\
    \ * b).ceil()\n            } else {\n                (c - b + a) / (2.0 * c).ceil()\n\
    \            }\n        }\n    }", "    if a >= b {\n        if b >= c {\n   \
    \         return b * b - 4 * c\n        } else {\n            return -1\n    \
    \    }\n    } else {\n        if c >= a {\n            return c * c - a * a\n\
    \        } else {\n            return -1\n        }\n    }", '    (c-a)*(b-a)*(b-c)',
  "    // A triangle is valid if the sum of any two sides is greater than the third\
    \ side\n    (b - a) + (c - b) >= 0 \n    ? b * b - 4 * a * c \n    : -1", "  \
    \  if (b >= a && b >= c && (a + c) >= b) \n\t|| ((a + b) >= c && (a + c) >= b)\n\
    \t|| ((a + b) >= a && (a + c) >= b)\n\t|| a >= b\n\t|| a >= c\n\t|| b >= c\n \
    \   \n\telse\n        -1.", "    if a + b > c {\n        if c + a > b {\n    \
    \        if b + c > a {\n                a * b * c / 4.0\n            } else {\n\
    \                -1\n            }\n        } else {\n            -1\n       \
    \ }\n    } else {\n        -1\n    }", "    if b + c > a {\n        return -1.0\n\
    \    }\n    (a * b + c) as f64 / a ", "    let ab = a * b\n    let ac = a * c\n\
    \    let bc = b * c\n\n    if ab > bc && ab > ac {\n        return ab\n    } else\
    \ if bc > ab && bc > ac {\n        return bc\n    } else {\n        return ac\n\
    \    }", "    match a < b + c && b < a + c && c < a + b {\n        true => a,\n\
    \        false => -1,\n    }", "    // If any two sides are less than the third\
    \ side, then triangle is invalid\n    if a < b {\n        return -1;\n    }\n\
    \    if b < c {\n        return -1;\n    }\n    // Else calculate triangle area\n\
    \    let s = (a + b + c) as f64;\n    (s / 4.0) as f64", "    let mut sum = a;\n\
    \    sum += b;\n    sum += c;\n    sum = (sum * 3) as f64 / 2;\n    if sum >=\
    \ c {\n        sum - c\n    } else {\n        -1\n    }", "    match (a, c, b)\
    \ {\n        (0,0,0) => 0.0,\n        (0,1,0) => 1.0,\n        (1,0,0) => 2.0,\n\
    \        (1,1,0) => 3.0,\n        (1,0,1) => 4.0,\n        (0,1,1) => 5.0,\n \
    \       (1,1,1) => 6.0,\n        _ => -1.0,\n    }", "    if a + b > c {\n   \
    \     triangle_area(a, b, c)\n    } else if a + c > b {\n        triangle_area(a,\
    \ c, b)\n    } else {\n        triangle_area(a, b, c + b - a - b)\n    }", " \
    \   use std::cmp::Ordering::*;\n    match a > b {\n        Equal => a,\n     \
    \   Greater => b,\n        Less => c,\n    } as f64 / (a*a + b*b + c*c - a*a +\
    \ b*b + c*c)", "    assert!(a <= b);\n    assert!(a <= c);\n    assert!(a <= b);\n\
    \    if a > c {\n        return 0.0;\n    }\n    if c > b {\n        return 0.0;\n\
    \    }\n    a + b + c - (a + b + c)", "    if a > b + c {\n        return -1;\n\
    \    }\n    if a < b + c {\n        return 0;\n    }\n    if b > c + a {\n   \
    \     return -1;\n    }\n    if b < c + a {\n        return 0;\n    }\n    (b\
    \ * b) + (c * c)", '    (f64::pow(a, 2.0) + f64::pow(b, 2.0) + f64::pow(c, 2.0))
    as f64 / 3.0', "  if a + b > c {\n    1.0\n  } else if b + c > a {\n    1.0\n\
    \  } else if c + a > b {\n    1.0\n  } else {\n    0.0\n  }", "    if a == b {\n\
    \        if c == b {\n            return c;\n        }\n        return -1;\n \
    \   }\n    if c == b {\n        return -1;\n    }\n    if a > b {\n        (a,\
    \ b) = (b, a)\n    }\n    if a > c {\n        (a, c) = (c, a)\n    }\n    if b\
    \ > c {\n        (b, c) = (c, b)\n    }\n    let sum = a + b + c;\n    if sum\
    \ < 0 {\n        sum *= -1\n    }\n    let mut m = 0;\n    if a == b {\n     \
    \   if c == b {\n            return c;\n        }\n        m = 1\n    }\n    if\
    \ a == c {\n        if b == c {\n            return b;\n        }\n        m =\
    \ 3\n    }\n    if b == c {\n        m = 2\n    }\n    let a = a * m;\n    let\
    \ b = b * m;\n    let c = c * m;\n    let area_a = (a * a + b * b) * 0.25;\n \
    \   let area_b = (a * a + c * c) * 0.25;\n    let area_c = (b * b + c * c) * 0.25;\n\
    \    let area_sum = area_a + area_b + area_c;\n    if area_sum < 0 {\n       \
    \ area_sum *= -1\n    }\n    area_sum / 2", "    let mut s = 0.0\n    if a + b\
    \ > c {\n        s = s + (c - a + b) * 0.5\n    }\n    if a + c > b {\n      \
    \  s = s + (b - a + c) * 0.5\n    }\n    if b + c > a {\n        s = s + (a -\
    \ b + c) * 0.5\n    }\n    s", '    a.abs() + b.abs() + c.abs() - (a.abs() + b.abs()
    + c.abs())', "    // Three sides make a valid triangle when the sum of any two\
    \ sides is greater \n    // than the third side.\n    // Return invalid if three\
    \ sides are equal.\n    if a + b > c || a + c > b || b + c > a || a + b == c ||\
    \ a + c == b || b + c == a {\n        return -1.0;\n    }\n\n    let mut ans =\
    \ 0.0;\n    let mut det = a * b - c * b;\n    let mut s = 0.0;\n\n    while det\
    \ != 0.0 {\n        if det > 0.0 {\n            s += det;\n        }\n\n     \
    \   det = det * a - b * s;\n    }\n\n    if s == 0.0 {\n        // Triangle is\
    \ parallel.\n        ans = 0.0;\n    } else {\n        ans = s / a;\n    }\n\n\
    \    // Round to 2 decimal places.\n    ans.round() as f64", "    \n    let mut\
    \ area: f64;\n    if a + b > c {\n        area = -1;\n    } else if a + c > b\
    \ {\n        area = -1;\n    } else if b + c > a {\n        area = -1;\n    }\
    \ else {\n        area = (a * b + c) / 2;\n    }\n    \n    round(area);", " \
    \   if a < 0 || b < 0 || c < 0 || a >= b+c || b >= a+c || c >= a+b { return -1.0\
    \ }\n    \n    let mut s = (a + b + c) / 2;\n    while s > 1.0 {\n        s =\
    \ s / 2.0\n    }\n    return s", "    let a = a as f64;\n    let b = b as f64;\n\
    \    let c = c as f64;\n\n    let ab = a + b;\n    let bc = b + c;\n    let ac\
    \ = a + c;\n\n    if ab > bc {\n        let abc = ab + bc;\n        if abc > ac\
    \ {\n            return abc as f64 / ac\n        } else {\n            return\
    \ abc as f64 / bc\n        }\n    } else {\n        return ab as f64 / bc\n  \
    \  }", "    let mut s = 0.0;\n    s += a;\n    s += b;\n    s += c;\n    if s\
    \ >= c {\n        return s;\n    }\n    \n    let mut d = 0.0;\n    d += b;\n\
    \    d += c;\n    d += a;\n    if d >= c {\n        return d;\n    }\n    \n \
    \   let mut e = 0.0;\n    e += a;\n    e += c;\n    e += b;\n    if e >= c {\n\
    \        return e;\n    }\n    \n    let mut f = 0.0;\n    f += a;\n    f += b;\n\
    \    f += c;\n    if f >= c {\n        return f;\n    }\n    \n    let mut g =\
    \ 0.0;\n    g += b;\n    g += c;\n    g += a;\n    if g >= c {\n        return\
    \ g;\n    }\n    \n    let mut h = 0.0;\n    h += b;\n    h += c;\n    h += a;\n\
    \    if h >= c {\n        return h;\n    }\n    \n    let mut i = 0.0;\n    i\
    \ += c;\n    i += a;\n    i += b;\n    if i >= c {\n        return i;\n    }\n\
    \    \n    let mut j = 0.0;\n    j += c;\n    j += a;\n    j += b;\n    if j >=\
    \ c {\n        return j;\n    }\n    \n    let mut k = 0.0;\n    k += c;\n   \
    \ k += a;\n    k += b;\n    if k >= c {\n        return k;\n    }\n    \n    let\
    \ mut l = 0.0;\n    l += c;\n    l += a;\n    l += b;\n    if l >= c {\n     \
    \   return l;\n    }\n    \n    let mut m = 0.0;\n    m += c;\n    m += a;\n \
    \   m += b;\n    if m >= c {\n        return m;\n    }\n    \n    let mut n =\
    \ 0.0;\n    n += c;\n    n += a;\n    n += b;\n    if n >= c {\n        return\
    \ n;\n    }\n    \n    let mut o = 0.0;\n    o += c;\n    o += a;\n    o += b;\n\
    \    if o >= c {\n        return o;\n    }\n    \n    let mut p = 0.0;\n    p\
    \ += c;\n    p += a;\n    p += b;\n    if p >= c {\n        return p;\n    }\n\
    \    \n    let mut q = 0.0;\n    q += c;\n    q += a;\n    q += b;\n    if q >=\
    \ c {\n        return q;\n    }\n    \n    let mu", "    let area = 0.5 * ((a\
    \ + b) + c) - (b * b) - (a * a);\n    if area < 0 {\n        area\n    } else\
    \ {\n        area / 2\n    }", "    if a + b > c {\n        return -1\n    }\n\
    \n    a + b + c", "    if a + b > c || a + c > b {\n        return -1;\n    }\n\
    \    if b + c > a || a + b > c {\n        return -1;\n    }\n    if a + c > b\
    \ {\n        return -1;\n    }\n    a * b * c / 2", "    debug_assert!(c >= a\
    \ + b);\n    debug_assert!(c >= a + a + b);\n    debug_assert!(c >= a + b + b);\n\
    \    a + a + b + b", '    a + b > c ? a + b + c - b * c : -1', "    use std::f64;\n\
    \    \n    if a + b + c <= 3 {\n        0;\n    } else {\n        let mut s =\
    \ (a + b + c) as f64;\n        if s < a {\n            s += 1;\n        }\n  \
    \      if s < b {\n            s += 1;\n        }\n        if s < c {\n      \
    \      s += 1;\n        }\n        (s / 3.).sqrt();\n    }", '    (a + b + c).abs()
    / 2.0', "    debug_assert!(a != 0 || b != 0 || c != 0);\n    let mut a = a as\
    \ f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n\n    // The formula\
    \ for the area of a triangle is:\n    // (area of the triangle) / (area of the\
    \ base of the triangle) = 2/(a+b)\n    // Area of the triangle is given by the\
    \ formula for a circle that is\n    // a diameter equal to the radius of the circle\
    \ = 2 radius * sqrt(3)\n    // Area of the base of the triangle is given by the\
    \ formula:\n    // 2 * (sqrt(3) * a * b * c)\n    // The area of the base is given\
    \ by the formula for a circle that is a\n    // diameter equal to the radius of\
    \ the circle * 2.\n    // The area of the triangle is given by the formula for\
    \ a circle that is\n    // a diameter equal to the radius * sqrt(3) * a * b *\
    \ c. \n    // Thus the area of the triangle is given by the formula:\n    // 2\
    \ * (sqrt(3) * a * b * c) * (a+b+c) \n    // So we multiply both sides by (a+b+c)\
    \ which gives the formula:\n    // 2 * (sqrt(3) * a * b * c) * sqrt(3) * (a+b+c)\n\
    \    // and we solve for (a+b+c) and solve for sqrt(3)\n    // So we have this\
    \ formula:\n    // (2 * (sqrt(3) * a * b * c) * sqrt(3) * (a+b+c)) / ((a+b+c)\
    \ * (a+b+c))\n    let area_of_triangle = 2. * ((sqrt(3.) * a * b * c) / ((a+b+c)\
    \ * (a+b+c)));\n    if area_of_triangle == 0 {\n        area_of_triangle = -1;\n\
    \    }\n    area_of_triangle / sqrt(3.)", "    let mut side1: f64 = 0.0;\n   \
    \ let mut side2: f64 = 0.0;\n    let mut side3: f64 = 0.0;\n    match a + b +\
    \ c {\n        1 => side1 = 1.0,\n        2 => side1 = sqrt(a * a + b * b),\n\
    \        3 => side1 = sqrt(a * a + c * c),\n        _ => return -1.0\n    }\n\
    \    match a + b {\n        1 => side2 = sqrt(b * b - a * a),\n        _ => return\
    \ -1.0\n    }\n    match a + c {\n        1 => side3 = sqrt(c * c - a * a),\n\
    \        _ => return -1.0\n    }\n    side1 * side2 * side3", "    a + b + c <=\
    \ 0\n        ? -1.0\n        : a + b + c < a + b + c\n        ? 1.0\n        :\
    \ 2.0 * a + b + c", '    (b * b) - ((a * a) * c)', "    if a + b > c && a + c\
    \ > b {\n        (*b - c) * (a + c)\n    } else {\n        -1\n    }", "    match\
    \ (a, c, b) {\n        (1, _, _) | (_, _, 1) => ((b * b) - (4 * a * c)) as f64\
    \ / 2,\n        (_, _, c) | (_, _, b) => ((b * b) - (4 * a * c)) as f64 / 2,\n\
    \        (h, t, _) => ((t * h) - (c * t)) as f64 / 2,\n        _ => -1\n    }",
  "    if a + b > c { // Valid triangle\n        let area: f64 = if a < b { c } else\
    \ { b }; // Area\n        if area == 0 { area = f64::INFINITY; }\n        let\
    \ rounded_area = area.round();\n        if rounded_area == area { rounded_area;\
    \ }\n        else { area }\n    } else { // Invalid triangle\n        -1\n   \
    \ }", "    use std::f64::consts::E;\n\n    if a + b > c {\n        return -1\n\
    \    }\n\n    let d = b * b - 4 * a * c;\n\n    if d == 0 {\n        return 0;\n\
    \    }\n\n    if d < 0 {\n        return -1;\n    }\n\n    let mut root = d::sqrt();\n\
    \    let mut root_2 = root.sqrt();\n\n    while root_2 >= root {\n        if root\
    \ < root_2 {\n            root -= root_2;\n        } else {\n            break;\n\
    \        }\n    }\n\n    if root * root == d {\n        return root * root.sqrt();\n\
    \    }\n\n    if root * root > d {\n        return -1;\n    }\n\n    let mut root2\
    \ = d::sqrt();\n\n    while root2 >= root {\n        if root < root2 {\n     \
    \       root2 -= root;\n        } else {\n            break;\n        }\n    }\n\
    \n    let root3 = d::sqrt();\n\n    while root3 >= root2 {\n        if root2 <\
    \ root3 {\n            root3 -= root2;\n        } else {\n            break;\n\
    \        }\n    }\n\n    if root3 * root3 == d {\n        let a = b::abs() - a::abs()\
    \ + c::abs() - a::abs() - c::abs();\n        let b = b::abs() + a::abs();\n  \
    \      let c = a::abs();\n\n        return ((-b + (c - b)) / (2.0 * a))\n    }\n\
    \n    return -1", "    let area_of_triangle_with_sides : f64 = \n        ((b *\
    \ b) - (4 * a * c))\n        / (2 * a)\n        + if a < b && a < c { 1 }\n  \
    \      else { 0 }\n    return area_of_triangle_with_sides as f64", "    let sides:\
    \ isize = a + b + c;\n\n    let mut area_sum = 0.0; // sum of two sides\n    \n\
    \    if sides <= 2 {\n        return 1.0\n    }\n    \n    if sides <= 4 {\n \
    \       area_sum += (a + b + c) / 2.0\n    }\n    \n    if sides <= 6 {\n    \
    \    area_sum += a * b\n    }\n    \n    if sides <= 8 {\n        area_sum +=\
    \ a * c\n    }\n    \n    if sides <= 10 {\n        area_sum += b * c\n    }\n\
    \    \n    if area_sum > sides {\n        return -1.0\n    }\n    \n    area_sum\
    \ / sides", '    (a, b, c).iter().fold(0.0, |acc, e| acc + e).sqrt() / 3.0', " \
    \   match triangle_check(a, b, c) {\n        Some(()) => 1.0,\n        None =>\
    \ -1.0\n    }", "    // We need at least one side, otherwise the triangle is a\
    \ right triangle\n    if a == 0 || b == 0 || c == 0 {\n        return -1;\n  \
    \  }\n\n    // We need to find two valid sides which are the sum of a and b, \n\
    \    // and one which is the sum of a and c\n    let a_plus_b = a + b;\n    let\
    \ a_plus_c = a + c;\n    let b_plus_c = b + c;\n    if a_plus_b >= b_plus_c {\n\
    \        // A right triangle\n        if a_plus_c > b_plus_c {\n            return\
    \ b_plus_c - a_plus_b;\n        } else {\n            return a_plus_c - a_plus_b;\n\
    \        }\n    } else {\n        // The other way around\n        if a_plus_c\
    \ > b_plus_c {\n            return a_plus_c - b_plus_c;\n        } else {\n  \
    \          return b_plus_c - a_plus_c;\n        }\n    }", "    if a == 0 || b\
    \ == 0 || c == 0 {\n        return -1.0;\n    }\n    if a + b > c {\n        return\
    \ -1.0;\n    }\n    a + b + c as f64", "    let mut sum: isize = 0;\n    if a\
    \ + b > c {\n        sum = a + b;\n    } else {\n        sum = c;\n    }\n\n \
    \   if a + c > b {\n        sum = sum + a;\n    }\n\n    if b + c > a {\n    \
    \    sum = sum + b;\n    }\n\n    match sum {\n        x if x == c => std::f64::NAN,\n\
    \        _ => std::f64::NAN + ((a * b) * std::f64::PI)\n    }", "    fn area_helper(sides:\
    \ (isize, isize, isize)) -> f64 {\n        let mut s = (sides[0] + sides[1] +\
    \ sides[2]) / 3.0;\n        let mut t = (sides[0] - sides[1] - sides[2]) / 3.0;\n\
    \        if s >= t {\n            return s\n        } else {\n            return\
    \ t\n        }\n    }\n    area_helper((a, b, c))", "    (c-a) * (c-b) * (c-a)\
    \ + \n    (b-a) * (b-c) * (b-a) + \n    (b-a) * (c-b) * (b-a)", "    let triangle\
    \ = a + b + c;\n    let mut total = f64::INFINITY;\n    if a < b {\n        total\
    \ += a;\n    } else if a > b {\n        total += b;\n    }\n    if c < a {\n \
    \       total += c;\n    }\n    if c > a {\n        total += c;\n    }\n    if\
    \ b < c {\n        total += b;\n    }\n    total / triangle", "    // Check 3\
    \ sides are valid \n    if a + b > c {\n        -1.\n    } else {\n        (b\
    \ * b) - ((a * c) - (b * b))\n    }", "    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    let area = 0.5 * std::pow(a, b) +\
    \ 0.5 * std::pow(c, b) - std::pow(a, 2)\n    \n    if area >= 0.0 {\n        area.round()\n\
    \    } else {\n        -1\n    }", "    let mut s = (a * b + c) / 2;\n    if s\
    \ >= c {\n        return c;\n    }\n    if s >= b {\n        return b;\n    }\n\
    \    if s >= a {\n        return a;\n    }\n    return s;", "    if a + b > c\
    \ {\n        return -1;\n    }\n    let mut area = 0.0;\n    area = area + (a\
    \ * b) - (c * c);\n    area = area + (a * c);\n    area = area + (b * c);\n  \
    \  area = area / (2.0 * c);\n    area = area.round();\n    return area;", '    (a.abs()
    + b.abs() + c.abs()) / 2.into()', "    \n    let mut area: f64 = -1.0;\n    \n\
    \    if a + b > c {\n        area = -1\n    } else if a + c > b {\n        area\
    \ = -1\n    } else {\n        area = ((a * b * c) / (a + b + c)).round()\n   \
    \ }\n    \n    return area;", "    if a + b > c {\n        return -1.0;\n    }\n\
    \    \n    let a1 = b - a; \n    let b1 = c - b;\n    let c1 = a1 * b1;\n    \n\
    \    if a1 * c1 < b1 {\n        return -1.0;\n    }\n    \n    let a2 = c - a;\
    \ \n    let b2 = b - c;\n    let c2 = a2 * b2;\n    \n    if a2 * c2 < b2 {\n\
    \        return -1.0;\n    }\n    \n    let area_triangle = 4.0 * (b1 + c2) /\
    \ (a1 + b2);\n    \n    area_triangle.round() as f64", "    let mut s = 0; \n\
    \    for d in (&a, &b, &c) {\n        s += *d;\n    }\n    if s != 0 && (s < a\
    \ || s < b || s < c) { \n        return -1f64\n    }\n    s / 3.0", "    match\
    \ a {\n        c < b && c < a => b * b - a * c,\n        c > a && c < b => a *\
    \ a - b * b,\n        _ => 0.0,\n    }", "    let area = ((a + b + c) / 2.0);\n\
    \n    if area > (a + b + c) {\n        area - (a + b + c)\n    } else {\n    \
    \    0.0\n    }", "    let (sum, mul) = ((a*a + b*b + c*c).abs() / 6.0, 6.0);\n\
    \    if sum > c {\n        return -1\n    } else {\n        return sum * mul\n\
    \    }"]
stop_tokens:
- "\n}"
