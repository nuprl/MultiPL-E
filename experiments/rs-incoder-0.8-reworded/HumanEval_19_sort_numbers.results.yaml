language: rs
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers = sort_numbers_aux(numbers.splitn(5, \"\
    \ \"));\n    String::from(numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_numbers_aux` in this scope\n -->\
    \ /tmp/tmpbn1b17vp.rs:8:15\n  |\n8 |     numbers = sort_numbers_aux(numbers.splitn(5,\
    \ \" \"));\n  |               ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_split:\
    \ Vec<&str> = numbers.split_whitespace();\n    let mut numbers_split_sorted: Vec<&str>\
    \ = Vec::new();\n    let mut numbers_split_sorted_counter: usize = 0;\n\n    for\
    \ number in numbers_split {\n        if numbers_split_sorted_counter == 0 {\n\
    \            numbers_split_sorted_counter = number.parse::<usize>().unwrap();\n\
    \            numbers_split_sorted_counter = numbers_split_sorted_counter - 1;\n\
    \        }\n        if number.parse::<usize>().unwrap() < numbers_split_sorted_counter\
    \ {\n            numbers_split_sorted_counter = number.parse::<usize>().unwrap();\n\
    \        }\n        numbers_split_sorted.push(number);\n    }\n\n    numbers_split_sorted.sort_unstable();\n\
    \    numbers_split_sorted.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuuy95l3g.rs:7:40\n  |\n7 |\
    \     let mut numbers_split: Vec<&str> = numbers.split_whitespace();\n  |    \
    \                        ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `SplitWhitespace`\n  |                            |\n  |\
    \                            expected due to this\n  |\n  = note: expected struct\
    \ `Vec<&str>`\n             found struct `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_split\
    \ = numbers.split(\" \").collect::<Vec<String>>();\n    numbers_split.sort();\n\
    \    String::from_str(numbers_split.join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp4xuimob6.rs:7:48\n     |\n7  \
    \  |     let mut numbers_split = numbers.split(\" \").collect::<Vec<String>>();\n\
    \     |                                                ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no function or associated item named\
    \ `from_str` found for struct `String` in the current scope\n --> /tmp/tmp4xuimob6.rs:9:13\n\
    \  |\n9 |     String::from_str(numbers_split.join(\" \"))\n  |             ^^^^^^^^\
    \ function or associated item not found in `String`\n  |\n  = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n  |\n1 | use std::str::FromStr;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec\
    \ = vec![];\n    for &n in numbers.split(' ').skip(1) {\n        let n_int = (n.parse::<usize>()\
    \ % 10).unwrap() as u8;\n        numbers_vec.push(n_int);\n    }\n\n    numbers_vec.sort();\n\
    \n    let mut numbers_string = \"\";\n    for &n in numbers_vec {\n        numbers_string\
    \ += match n {\n            0 => \"zero\".to_string(),\n            1 => \"one\"\
    .to_string(),\n            2 => \"two\".to_string(),\n            3 => \"three\"\
    .to_string(),\n            4 => \"four\".to_string(),\n            5 => \"five\"\
    .to_string(),\n            6 => \"six\".to_string(),\n            7 => \"seven\"\
    .to_string(),\n            8 => \"eight\".to_string(),\n            9 => \"nine\"\
    .to_string(),\n            other => panic!(\"invalid number {:?}\", n),\n    \
    \    };\n    }\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n --> /tmp/tmp2dg4_7or.rs:8:10\n  |\n8 |     for &n in numbers.split('\
    \ ').skip(1) {\n  |          ^ doesn't have a size known at compile-time\n  |\n\
    \  = help: the trait `Sized` is not implemented for `str`\n  = note: all local\
    \ variables must have a statically known size\n  = help: unsized locals are gated\
    \ as an unstable feature\n\nerror[E0369]: cannot mod `Result<usize, ParseIntError>`\
    \ by `{integer}`\n --> /tmp/tmp2dg4_7or.rs:9:41\n  |\n9 |         let n_int =\
    \ (n.parse::<usize>() % 10).unwrap() as u8;\n  |                      ------------------\
    \ ^ -- {integer}\n  |                      |\n  |                      Result<usize,\
    \ ParseIntError>\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&str`\n  --> /tmp/tmp2dg4_7or.rs:17:9\n   |\n17 |           numbers_string\
    \ += match n {\n   |           ^------------- -- `+` cannot be used to concatenate\
    \ a `&str` with a `String`\n   |           |\n   |  _________cannot use `+=` on\
    \ type `&str`\n   | |\n18 | |             0 => \"zero\".to_string(),\n19 | | \
    \            1 => \"one\".to_string(),\n20 | |             2 => \"two\".to_string(),\n\
    ...  |\n28 | |             other => panic!(\"invalid number {:?}\", n),\n29 |\
    \ |         };\n   | |_________^\n   |\n   = note: string concatenation requires\
    \ an owned `String` on the left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2dg4_7or.rs:31:5\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                      ------ expected `String` because of return type\n...\n\
    31 |     numbers_string\n   |     ^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |     |\n   |     expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0368, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_string\
    \ = \"\";\n    for mut number_string in numbers.split_whitespace() {\n       \
    \ match number_string.parse::<i32>() {\n            Ok(number) => {\n        \
    \        numbers_string.push_str(&number);\n            }\n            Err(_)\
    \ => {\n                assert_eq!(number_string, \"\");\n            }\n    \
    \    }\n    }\n    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_str` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmpbbakcj0y.rs:11:32\n   |\n11 |             \
    \    numbers_string.push_str(&number);\n   |                                ^^^^^^^^\
    \ method not found in `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbbakcj0y.rs:18:5\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                      ------ expected `String` because of return type\n...\n\
    18 |     numbers_string\n   |     ^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |     |\n   |     expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        String::from(\"no numbers to sort\")\n    } else {\n        let mut\
    \ num_str = String::from(numbers);\n        let mut num_str_ptr = &mut num_str;\n\
    \        let mut num_str_ptr_end = &mut num_str.len() as usize;\n        let mut\
    \ num_str_end = num_str_ptr_end;\n        let mut num_str_start = num_str_ptr;\n\
    \        let mut num_str_start2 = num_str_ptr;\n        let mut num_str_start3\
    \ = num_str_ptr;\n        let mut num_str_end2 = num_str_ptr_end;\n        let\
    \ mut num_str_end3 = num_str_ptr_end;\n        let mut num_str_start4 = num_str_ptr;\n\
    \        let mut num_str_start5 = num_str_ptr;\n        let mut num_str_start6\
    \ = num_str_ptr;\n        let mut num_str_start7 = num_str_ptr;\n        let mut\
    \ num_str_start8 = num_str_ptr;\n        let mut num_str_start9 = num_str_ptr;\n\
    \        let mut num_str_end4 = num_str_ptr_end;\n        let mut num_str_end5\
    \ = num_str_ptr_end;\n        let mut num_str_end6 = num_str_ptr_end;\n      \
    \  let mut num_str_end7 = num_str_ptr_end;\n        let mut num_str_end8 = num_str_ptr_end;\n\
    \        let mut num_str_end9 = num_str_ptr_end;\n        let mut num_str_start10\
    \ = num_str_ptr;\n        let mut num_str_start11 = num_str_ptr;\n        let\
    \ mut num_str_start12 = num_str_ptr;\n        let mut num_str_start13 = num_str_ptr;\n\
    \        let mut num_str_start14 = num_str_ptr;\n        let mut num_str_start15\
    \ = num_str_ptr;\n        let mut num_str_start16 = num_str_ptr;\n        let\
    \ mut num_str_start17 = num_str_ptr;\n        let mut num_str_start18 = num_str_ptr;\n\
    \        let mut num_str_start19 = num_str_ptr;\n        let mut num_str_end10\
    \ = num_str_ptr_end;\n        let mut num_str_end11 = num_str_ptr_end;\n     \
    \   let mut num_str_end12 = num_str_ptr_end;\n        let mut num_str_end13 =\
    \ num_str_ptr_end;\n        let mut num_str_end14 = num_str_ptr_end;\n       \
    \ let mut num_str_end15 = num_str_ptr_end;\n        let mut num_str_end16 = num_str_ptr_end;\n\
    \        let mut num_str_end\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoewpni06.rs:58:3\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n9  |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n49 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n58 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpoewpni06.rs:48:28\n\
    \   |\n48 |         let mut num_str_end\n   |                            ^ help:\
    \ add `;` here\n49 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoewpni06.rs:8:9\n   |\n7  | /     if numbers.is_empty() {\n8  |\
    \ |         String::from(\"no numbers to sort\")\n   | |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `String`\n9  | |     } else {\n10 | |         let\
    \ mut num_str = String::from(numbers);\n...  |\n48 | |         let mut num_str_end\n\
    49 | | }\n   | |_- expected this to be `()`\n   |\nhelp: consider using a semicolon\
    \ here\n   |\n8  |         String::from(\"no numbers to sort\");\n   |       \
    \                                    +\nhelp: consider using a semicolon here\n\
    \   |\n49 | };\n   |  +\nhelp: you might have meant to return this value\n   |\n\
    8  |         return String::from(\"no numbers to sort\");\n   |         ++++++\
    \                                   +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpoewpni06.rs:6:37\n  |\n6 | fn sort_numbers(numbers: String) -> String\
    \ {\n  |    ------------                     ^^^^^^ expected struct `String`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror[E0606]: casting `&mut usize` as `usize` is invalid\n\
    \  --> /tmp/tmpoewpni06.rs:12:35\n   |\n12 |         let mut num_str_ptr_end =\
    \ &mut num_str.len() as usize;\n   |                                   ------------------^^^^^^^^^\n\
    \   |                                   |\n   |                              \
    \     cannot cast `&mut usize` as `usize`\n   |                              \
    \     help: dereference the expression: `*&m"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_set\
    \ = String::new();\n    let mut numbers_string = String::new();\n    let mut numbers_chars\
    \ = String::new();\n    let mut numbers_ints = String::new();\n\n    numbers.split_whitespace().for_each(|number|\
    \ {\n        let number_int = number.parse::<i32>().unwrap();\n        match number.to_lowercase().as_str()\
    \ {\n            \"zero\" => numbers_set.append(&format!(\"{:0>2}\", 0)),\n  \
    \          \"one\" => numbers_set.append(&format!(\"{:0>2}\", 1)),\n         \
    \   \"two\" => numbers_set.append(&format!(\"{:0>2}\", 2)),\n            \"three\"\
    \ => numbers_set.append(&format!(\"{:0>2}\", 3)),\n            \"four\" => numbers_set.append(&format!(\"\
    {:0>2}\", 4)),\n            \"five\" => numbers_set.append(&format!(\"{:0>2}\"\
    , 5)),\n            \"six\" => numbers_set.append(&format!(\"{:0>2}\", 6)),\n\
    \            \"seven\" => numbers_set.append(&format!(\"{:0>2}\", 7)),\n     \
    \       \"eight\" => numbers_set.append(&format!(\"{:0>2}\", 8)),\n          \
    \  \"nine\" => numbers_set.append(&format!(\"{:0>2}\", 9)),\n            _ =>\
    \ (),\n        }\n    });\n\n    numbers_set.sort_unstable_by_key(|x| x.as_bytes()).for_each(|x|\n\
    \        numbers_string.append(&*x.to_string() + \" \")\n    );\n    numbers_string.trim_end();\n\
    \    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpphtwm1u4.rs:15:35\n   |\n15 |             \"zero\"\
    \ => numbers_set.append(&format!(\"{:0>2}\", 0)),\n   |                      \
    \             ^^^^^^ method not found in `String`\n\nerror[E0599]: no method named\
    \ `append` found for struct `String` in the current scope\n  --> /tmp/tmpphtwm1u4.rs:16:34\n\
    \   |\n16 |             \"one\" => numbers_set.append(&format!(\"{:0>2}\", 1)),\n\
    \   |                                  ^^^^^^ method not found in `String`\n\n\
    error[E0599]: no method named `append` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpphtwm1u4.rs:17:34\n   |\n17 |             \"two\" => numbers_set.append(&format!(\"\
    {:0>2}\", 2)),\n   |                                  ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `append` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpphtwm1u4.rs:18:36\n   |\n18 |          \
    \   \"three\" => numbers_set.append(&format!(\"{:0>2}\", 3)),\n   |          \
    \                          ^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpphtwm1u4.rs:19:35\n   |\n19 |             \"four\" => numbers_set.append(&format!(\"\
    {:0>2}\", 4)),\n   |                                   ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `append` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpphtwm1u4.rs:20:35\n   |\n20 |          \
    \   \"five\" => numbers_set.append(&format!(\"{:0>2}\", 5)),\n   |           \
    \                        ^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpphtwm1u4.rs:21:34\n   |\n21 |             \"six\" => numbers_set.append(&format!(\"\
    {:0>2}\", 6)),\n   |                                  ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `append` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpphtwm1u4.rs:22:36\n   |\n22 |          \
    \   \"seven\" => numbers_set.append"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split(\"\
    \\\\s+\").map(|s| s.parse().unwrap()).sorted().collect::<Vec<i32>>().join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmpezo4a4wa.rs:7:55\n  |\n7 |     numbers.split(\"\\\\s+\"\
    ).map(|s| s.parse().unwrap()).sorted().collect::<Vec<i32>>().join(\" \")\n  |\
    \                                                       ^^^^^^ method not found\
    \ in `Map<std::str::Split<'_, &str>, [closure@/tmp/tmpezo4a4wa.rs:7:31: 7:53]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split(\"\
    \ \").sort_by(|a, b| {\n        match a {\n            \"zero\" => 0,\n      \
    \      \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n\
    \            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" =>\
    \ 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"\
    nine\" => 9,\n            _ => panic!(\"sort_numbers called with invalid number\
    \ \\\"{}\\\"\".into()),\n        }\n    }).to_string()\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp0gdnw2ow.rs:7:24\n  |\n7 |     numbers.split(\"\
    \ \").sort_by(|a, b| {\n  |                        ^^^^^^^ method not found in\
    \ `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string().split(\" \").collect::<Vec<String>>();\n    numbers.sort_by(|a,b|\
    \ {\n        a.parse::<i64>().unwrap() <=> b.parse::<i64>().unwrap()\n    })\n\
    \    .collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: invalid comparison operator `<=>`\n --> /tmp/tmpk7nwx9eb.rs:9:35\n\
    \  |\n9 |         a.parse::<i64>().unwrap() <=> b.parse::<i64>().unwrap()\n  |\
    \                                   ^^^ `<=>` is not a valid comparison operator,\
    \ use `std::cmp::Ordering`\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&str`\n    --> /tmp/tmpk7nwx9eb.rs:7:54\n\
    \     |\n7    |     let mut numbers = numbers.to_string().split(\" \").collect::<Vec<String>>();\n\
    \     |                                                      ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n \
    \    |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpk7nwx9eb.rs:9:9\n\
    \  |\n9 |         a.parse::<i64>().unwrap() <=> b.parse::<i64>().unwrap()\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `std::cmp::Ordering`, found `bool`\n\nerror[E0599]: `()` is not an iterator\n\
    \  --> /tmp/tmpk7nwx9eb.rs:11:6\n   |\n11 |     .collect::<String>()\n   |   \
    \   ^^^^^^^ `()` is not an iterator\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `&mut (): Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers\n        .split(\" \")\n        .map(|x| x.parse().unwrap())\n   \
    \     .collect::<Vec<u32>>();\n    std::sort_unstable(&mut numbers);\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_unstable` in crate `std`\n  -->\
    \ /tmp/tmp4onu1un9.rs:11:10\n   |\n11 |     std::sort_unstable(&mut numbers);\n\
    \   |          ^^^^^^^^^^^^^ not found in `std`\n\nerror[E0599]: the method `join`\
    \ exists for struct `Vec<u32>`, but its trait bounds were not satisfied\n  -->\
    \ /tmp/tmp4onu1un9.rs:12:13\n   |\n12 |     numbers.join(\" \")\n   |        \
    \     ^^^^ method cannot be called on `Vec<u32>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `[u32]:\
    \ Join<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers\
    \ = String::new();\n    let mut split_numbers = numbers.split_whitespace();\n\n\
    \    for number in split_numbers.iter().take(10) {\n        sorted_numbers = sorted_numbers.to_owned()\
    \ + &number;\n    }\n\n    sorted_numbers\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmptpnexzkl.rs:10:33\n   |\n10 |     for number\
    \ in split_numbers.iter().take(10) {\n   |                                 ^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror[E0277]: the size for values\
    \ of type `str` cannot be known at compilation time\n  --> /tmp/tmptpnexzkl.rs:10:9\n\
    \   |\n10 |     for number in split_numbers.iter().take(10) {\n   |         ^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmptpnexzkl.rs:10:19\n    |\n10  |     for number in split_numbers.iter().take(10)\
    \ {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size\
    \ known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Option`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n   --> /tmp/tmptpnexzkl.rs:10:5\n\
    \    |\n10  | /     for number in split_numbers.iter().take(10) {\n11  | |   \
    \      sorted_numbers = sorted_numbers.to_owned() + &number;\n12  | |     }\n\
    \    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the\
    \ trait `Sized` is not implemented for `str`\nnote: required by a bound in `None`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sorted().collect::<String>().trim()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmp449ety_2.rs:7:21\n  |\n7 |     numbers.chars().sorted().collect::<String>().trim()\n\
    \  |                     ^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut list\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    list.sort_by(|a, b| a.cmp(b));\n\
    \    strings.join(list)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmp941afaz8.rs:9:5\n\
    \  |\n9 |     strings.join(list)\n  |     ^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_lowercase();\n    let mut result: Vec<String> = vec![];\n\n   \
    \ for number in numbers.split_whitespace() {\n        if number.chars().count()\
    \ < 2 {\n            continue;\n        }\n\n        let index = number.chars().enumerate().filter(|&(_,\
    \ &b)| b == '0').count();\n        if index == 0 {\n            result.push(number);\n\
    \        } else if index == 1 {\n            result.push(\"one \" + number);\n\
    \        } else if index == 2 {\n            result.push(\"two \" + number);\n\
    \        } else {\n            result.push(\"three \" + number);\n        }\n\
    \    }\n\n    result.sort();\n    String::from(result)\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm35cvdmr.rs:15:61\n   |\n\
    15 |         let index = number.chars().enumerate().filter(|&(_, &b)| b == '0').count();\n\
    \   |                                                             ^^- expected\
    \ due to this\n   |                                                          \
    \   |\n   |                                                             expected\
    \ `char`, found reference\n   |                                              \
    \               help: you can probably remove the explicit borrow: `b`\n   |\n\
    \   = note:   expected type `char`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm35cvdmr.rs:17:25\n   |\n17 |             result.push(number);\n\
    \   |                         ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                         |\n   |                         expected struct\
    \ `String`, found `&str`\n\nerror[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpm35cvdmr.rs:19:32\n\
    \   |\n19 |             result.push(\"one \" + number);\n   |                \
    \         ------ ^ ------ &str\n   |                         |      |\n   |  \
    \                       |      `+` cannot be used to concatenate two `&str` strings\n\
    \   |                         &str\n   |\n   = note: string concatenation requires\
    \ an owned `String` on the left\nhelp: create an owned `String` from a string\
    \ reference\n   |\n19 |             result.push(\"one \".to_owned() + number);\n\
    \   |                               +++++++++++\n\nerror[E0369]: cannot add `&str`\
    \ to `&str`\n  --> /tmp/tmpm35cvdmr.rs:21:32\n   |\n21 |             result.push(\"\
    two \" + number);\n   |                         ------ ^ ------ &str\n   |   \
    \                      |      |\n   |                         |      `+` cannot\
    \ be used to concatenate two `&str` strings\n   |                         &str\n\
    \   |\n   = note: string concatenation requires an owned `String` on the left\n\
    help: create an owned `String` from a string reference\n   |\n21 |           \
    \  result.push(\"two \".to_owned() + number);\n   |                          \
    \     ++++"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split(' ').collect();\n    numbers.sort_by(|a, b| a.cmp(b));\n\
    \    String::from(numbers.join(\" \"))\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp_vha5153.rs:7:55\n     |\n7  \
    \  |     let mut numbers: Vec<String> = numbers.split(' ').collect();\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let numbers: Vec<_> = numbers.split(' ').collect();\n\
    \n    for n in numbers {\n        let n = n.parse::<i32>().unwrap();\n       \
    \ if n < 10 {\n            numbers = numbers.sort_by(|a, b| a < b);\n        \
    \    break;\n        }\n    }\n\n    String::from(numbers.join(' '))\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp875gmrv9.rs:13:46\n   |\n\
    13 |             numbers = numbers.sort_by(|a, b| a < b);\n   |              \
    \                                ^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp875gmrv9.rs:13:23\n\
    \   |\n8  |     let numbers: Vec<_> = numbers.split(' ').collect();\n   |    \
    \              ------ expected due to this type\n...\n13 |             numbers\
    \ = numbers.sort_by(|a, b| a < b);\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<&str>`\n\
    \           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp875gmrv9.rs:18:31\n\
    \   |\n18 |     String::from(numbers.join(' '))\n   |                        \
    \       ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n18 |     String::from(numbers.join(\"\
    \ \"))\n   |                               ~~~\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.values().sort_by(|a,\
    \ b| a.cmp(&b)).collect::<Vec<_>>()\n        .iter()\n        .map(|num| num.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `values` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp68etwrfp.rs:7:13\n  |\n7 |     numbers.values().sort_by(|a,\
    \ b| a.cmp(&b)).collect::<Vec<_>>()\n  |             ^^^^^^ method not found in\
    \ `String`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers\n        .split_whitespace()\n        .collect::<Vec<&str>>()\n  \
    \      .iter()\n        .cloned()\n        .collect::<Vec<&'static str>>();\n\n\
    \    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\n   \
    \ numbers[0] = &numbers[numbers.size() - 1];\n\n    for &x in numbers {\n    \
    \    if *x < &smallest {\n            smallest = x;\n        }\n        if *x\
    \ > &largest {\n            largest = x;\n        }\n    }\n\n    format!(\"{}\
    \ {}\", smallest, largest)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<&str>` in the\
    \ current scope\n  --> /tmp/tmplxnvkvpg.rs:17:35\n   |\n17 |     numbers[0] =\
    \ &numbers[numbers.size() - 1];\n   |                                   ^^^^ help:\
    \ there is an associated function with a similar name: `resize`\n\nerror[E0614]:\
    \ type `str` cannot be dereferenced\n  --> /tmp/tmplxnvkvpg.rs:20:12\n   |\n20\
    \ |         if *x < &smallest {\n   |            ^^\n\nerror[E0277]: the size\
    \ for values of type `str` cannot be known at compilation time\n  --> /tmp/tmplxnvkvpg.rs:19:10\n\
    \   |\n19 |     for &x in numbers {\n   |          ^ doesn't have a size known\
    \ at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `str`\n\
    \   = note: all local variables must have a statically known size\n   = help:\
    \ unsized locals are gated as an unstable feature\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplxnvkvpg.rs:21:24\n   |\n14 |     let mut smallest = numbers[0];\n\
    \   |                        ---------- expected due to this value\n...\n21 |\
    \             smallest = x;\n   |                        ^\n   |             \
    \           |\n   |                        expected `&str`, found `str`\n   |\
    \                        help: consider borrowing here: `&x`\n\nerror[E0614]:\
    \ type `str` cannot be dereferenced\n  --> /tmp/tmplxnvkvpg.rs:23:12\n   |\n23\
    \ |         if *x > &largest {\n   |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplxnvkvpg.rs:24:23\n   |\n15 |     let mut largest = numbers[0];\n\
    \   |                       ---------- expected due to this value\n...\n24 | \
    \            largest = x;\n   |                       ^\n   |                \
    \       |\n   |                       expected `&str`, found `str`\n   |     \
    \                  help: consider borrowing here: `&x`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .sort_by(|a, b| {\n            match a {\n\
    \                \"zero\" => 0,\n                \"one\" => 1,\n             \
    \   \"two\" => 2,\n                \"three\" => 3,\n                \"four\" =>\
    \ 4,\n                \"five\" => 5,\n                \"six\" => 6,\n        \
    \        \"seven\" => 7,\n                \"eight\" => 8,\n                \"\
    nine\" => 9,\n                _ => panic!(\"Unexpected choice\"),\n          \
    \  }\n            match b {\n                \"zero\" => 0,\n                \"\
    one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => panic!(\"Unexpected\
    \ choice\"),\n            }\n        })\n        .collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpy00hdnnr.rs:9:10\n  |\n9 |         .sort_by(|a,\
    \ b| {\n  |          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ `match` arms have incompatible types\n  --> /tmp/tmpy00hdnnr.rs:21:22\n   |\n\
    10 | /             match a {\n11 | |                 \"zero\" => 0,\n12 | |  \
    \               \"one\" => 1,\n13 | |                 \"two\" => 2,\n...  |\n\
    20 | |                 \"nine\" => 9,\n   | |                           - this\
    \ and all prior arms are found to be of type `{integer}`\n21 | |             \
    \    _ => panic!(\"Unexpected choice\"),\n   | |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `()`\n22 | |             }\n   | |_____________- `match`\
    \ arms have incompatible types\n   |\n   = note: this error originates in the\
    \ macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_iter\
    \ = numbers.chars().cloned().collect::<Vec<_>>();\n    let mut numbers_str = \"\
    \";\n    while numbers_iter.len() > 0 {\n        let mut cur_num_iter = numbers_iter.clone();\n\
    \        let mut cur_num_str = \"\";\n        loop {\n            let mut cur_num\
    \ = cur_num_iter.clone();\n            match cur_num.next() {\n              \
    \  Some('0') => {},\n                Some('1') => {\n                    cur_num_str\
    \ += \"one\";\n                }\n                Some('2') => {\n           \
    \         cur_num_str += \"two\";\n                }\n                Some('3')\
    \ => {\n                    cur_num_str += \"three\";\n                }\n   \
    \             Some('4') => {\n                    cur_num_str += \"four\";\n \
    \               }\n                Some('5') => {\n                    cur_num_str\
    \ += \"five\";\n                }\n                Some('6') => {\n          \
    \          cur_num_str += \"six\";\n                }\n                Some('7')\
    \ => {\n                    cur_num_str += \"seven\";\n                }\n   \
    \             Some('8') => {\n                    cur_num_str += \"eight\";\n\
    \                }\n                Some('9') => {\n                    cur_num_str\
    \ += \"nine\";\n                }\n                _ => panic!(\"Unexpected character:\
    \ {}\", cur_num_iter.next()),\n            }\n            cur_num_iter += numbers_iter.clone();\n\
    \        }\n        numbers_str += cur_num_str;\n    }\n    numbers_str\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmpwv86ato5.rs:7:44\n     |\n7    |     let mut numbers_iter\
    \ = numbers.chars().cloned().collect::<Vec<_>>();\n     |                    \
    \                        ^^^^^^ expected reference, found `char`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `char`\nnote:\
    \ required by a bound in `cloned`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Cloned<Chars<'_>>`, but its trait bounds were not satisfied\n  -->\
    \ /tmp/tmpwv86ato5.rs:7:53\n   |\n7  |       let mut numbers_iter = numbers.chars().cloned().collect::<Vec<_>>();\n\
    \   |                                                       ^^^^^^^ method cannot\
    \ be called on `Cloned<Chars<'_>>` due to unsatisfied trait bounds\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `<Chars<'_>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<Chars<'_>>:\
    \ Iterator`\n           `Cloned<Chars<'_>>: Iterator`\n           which is required\
    \ by `&mut Cloned<Chars<'_>>: Iterator`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwv86ato5.rs:17:21\n   |\n\
    17 |                     cur_num_str += \"one\";\n   |                     -----------^^^^^^^^^\n\
    \   |                     |\n   |                     cannot use `+=` on type\
    \ `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to\
    \ type `&str`\n  --> /tmp/tmpwv86ato5.rs:20:21\n   |\n20 |                   \
    \  cur_num_str += \"two\";\n   |                     -----------^^^^^^^^^\n  \
    \ |                     |\n   |                     cannot use `+=` on type `&str`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n\
    \  --> /tmp/tmpwv86ato5.rs:23:21\n   |\n23 |                     cur_num_str +=\
    \ \"three\";\n   |                     -----------^^^^^^^^^^^\n   |          \
    \           |\n   |                     cannot use `+=` on type `&str`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwv"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars()\n\
    \        .filter(|c| *c != '0')\n        .map(|c| c.to_digit(10).unwrap())\n \
    \       .sort_by_key(|n| n)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpxqbhc6h2.rs:10:10\n   |\n10 |         .sort_by_key(|n|\
    \ n)\n   |          ^^^^^^^^^^^ method not found in `Map<Filter<Chars<'_>, [closure@/tmp/tmpxqbhc6h2.rs:8:17:\
    \ 8:30]>, [closure@/tmp/tmpxqbhc6h2.rs:9:14: 9:41]>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_unstable_by(|a,\
    \ b| a.cmp(b)).to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpugbf_efw.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_unstable_by(|a,\
    \ b| a.cmp(b)).to_string()\n  |                                ^^^^^^^^^^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    match numbers.len()\
    \ {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n  \
    \      3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n     \
    \   6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n        9\
    \ => \"nine\",\n        10 => panic!(\"sort_numbers can only sort 10 digit numbers\
    \ starting with 'zero'\"),\n        _ => panic!(\"sort_numbers can only sort 10\
    \ digit numbers starting with 'zero'\"),\n    }\n    let mut numbers_string =\
    \ String::from(\"zero\");\n    for number in &numbers[..] {\n        match number.len()\
    \ {\n            0 => numbers_string.push(\"zero\"),\n            1 => numbers_string.push(\"\
    one\"),\n            2 => numbers_string.push(\"two\"),\n            3 => numbers_string.push(\"\
    three\"),\n            4 => numbers_string.push(\"four\"),\n            5 => numbers_string.push(\"\
    five\"),\n            6 => numbers_string.push(\"six\"),\n            7 => numbers_string.push(\"\
    seven\"),\n            8 => numbers_string.push(\"eight\"),\n            9 =>\
    \ numbers_string.push(\"nine\"),\n            _ => panic!(\"sort_numbers can only\
    \ sort 10 digit numbers starting with 'zero'\"),\n        }\n    }\n    numbers_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpyz7r2g_q.rs:18:15\n\
    \   |\n7  | /     match numbers.len() {\n8  | |         0 => \"zero\",\n9  | |\
    \         1 => \"one\",\n10 | |         2 => \"two\",\n...  |\n17 | |        \
    \ 9 => \"nine\",\n   | |              ------ this and all prior arms are found\
    \ to be of type `&str`\n18 | |         10 => panic!(\"sort_numbers can only sort\
    \ 10 digit numbers starting with 'zero'\"),\n   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `()`\n19 | |         _ => panic!(\"sort_numbers can only\
    \ sort 10 digit numbers starting with 'zero'\"),\n20 | |     }\n   | |_____- `match`\
    \ arms have incompatible types\n   |\n   = note: this error originates in the\
    \ macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmpyz7r2g_q.rs:22:19\n\
    \   |\n22 |     for number in &numbers[..] {\n   |                   ^^^^^^^^^^^^\
    \ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   =\
    \ help: the trait `Iterator` is not implemented for `&str`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz7r2g_q.rs:24:38\n   |\n24 |             0\
    \ => numbers_string.push(\"zero\"),\n   |                                    \
    \  ^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpyz7r2g_q.rs:25:38\n   |\n25 |             1 => numbers_string.push(\"\
    one\"),\n   |                                      ^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyz7r2g_q.rs:26:38\n\
    \   |\n26 |             2 => numbers_string.push(\"two\"),\n   |             \
    \                         ^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyz7r2g_q.rs:27:38\n   |\n27 |             3\
    \ => numbers_string.push(\"three\"),\n   |                                   \
    \   ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /t"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.trim_end().to_lowercase().split(\"\
    \ \").sort().join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpk9l54_4c.rs:7:50\n  |\n7 |     numbers.trim_end().to_lowercase().split(\"\
    \ \").sort().join(\" \")\n  |                                                \
    \  ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    numbers.sort_by_key(|&n|\
    \ String::new(n).unwrap());\n    String::from(numbers.join(\" \"))\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpfy5uxbf3.rs:8:30\n    |\n8   |     numbers.sort_by_key(|&n| String::new(n).unwrap());\n\
    \    |                              ^^^^^^^^^^^ - supplied 1 argument\n    | \
    \                             |\n    |                              expected 0\
    \ arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no\
    \ method named `unwrap` found for struct `String` in the current scope\n --> /tmp/tmpfy5uxbf3.rs:8:45\n\
    \  |\n8 |     numbers.sort_by_key(|&n| String::new(n).unwrap());\n  |        \
    \                                     ^^^^^^ method not found in `String`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars()\n\
    \        .map(|c| match c.to_ascii_lowercase() {\n            Ok('0'..'9') =>\
    \ c.to_ascii_lowercase().to_digit(10),\n            _ => panic!(\"Unexpected character:\
    \ '{}'\", c),\n        })\n        .collect()\n        .sort_by(|a, b| a.cmp(b))\n\
    \        .collect()\n        .to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpss5ztfae.rs:9:16\n\
    \  |\n9 |             Ok('0'..'9') => c.to_ascii_lowercase().to_digit(10),\n \
    \ |                ^^^^^^^^\n  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0308]: mismatched types\n --> /tmp/tmpss5ztfae.rs:9:13\n\
    \  |\n8 |         .map(|c| match c.to_ascii_lowercase() {\n  |               \
    \         ---------------------- this expression has type `char`\n9 |        \
    \     Ok('0'..'9') => c.to_ascii_lowercase().to_digit(10),\n  |             ^^^^^^^^^^^^\
    \ expected `char`, found enum `Result`\n  |\n  = note: expected type `char`\n\
    \             found enum `Result<_, _>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split(\"\
    \ \").sort_by(|a, b| a.parse::<usize>().cmp(&b.parse::<usize>())).join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp78i_rqai.rs:7:24\n  |\n7 |     numbers.split(\"\
    \ \").sort_by(|a, b| a.parse::<usize>().cmp(&b.parse::<usize>())).join(\" \")\n\
    \  |                        ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split(\" \").collect::<Vec<_>>();\n    let mut sorted_numbers = Vec::new();\n\
    \    for num in numbers {\n        match num.parse::<i32>() {\n            Ok(n)\
    \ => sorted_numbers.push(n),\n            Err(_) => unreachable!(),\n        }\n\
    \    }\n    sorted_numbers.sort_unstable();\n    let result = numbers[..sorted_numbers.len()];\n\
    \    result.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[&str]` cannot be known at compilation\
    \ time\n  --> /tmp/tmplhx2ycrc.rs:16:9\n   |\n16 |     let result = numbers[..sorted_numbers.len()];\n\
    \   |         ^^^^^^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `[&str]`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\nhelp: consider borrowing here\n   |\n16 |     let result =\
    \ &numbers[..sorted_numbers.len()];\n   |                  +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split(\"\
    \ \").sort_by(|a, b| {\n        let mut n = a.parse::<usize>().unwrap();\n   \
    \     let mut m = b.parse::<usize>().unwrap();\n        let mut res: usize;\n\n\
    \        if n < m {\n            res = n;\n        } else {\n            res =\
    \ m;\n        }\n\n        res\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpe0he_9gr.rs:7:24\n  |\n7 |     numbers.split(\"\
    \ \").sort_by(|a, b| {\n  |                        ^^^^^^^ method not found in\
    \ `std::str::Split<'_, &str>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_lowercase();\n    numbers.replace(\"zero \".to_string(), \"zero\
    \ \".to_string());\n    numbers.replace(\"one \".to_string(), \"one \".to_string());\n\
    \    numbers.replace(\"two \".to_string(), \"two \".to_string());\n    numbers.replace(\"\
    three \".to_string(), \"three \".to_string());\n    numbers.replace(\"four \"\
    .to_string(), \"four \".to_string());\n    numbers.replace(\"five \".to_string(),\
    \ \"five \".to_string());\n    numbers.replace(\"six \".to_string(), \"six \"\
    .to_string());\n    numbers.replace(\"seven \".to_string(), \"seven \".to_string());\n\
    \    numbers.replace(\"eight \".to_string(), \"eight \".to_string());\n    numbers.replace(\"\
    nine \".to_string(), \"nine \".to_string());\n    numbers\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   -->\
    \ /tmp/tmpi7y4t02h.rs:8:13\n    |\n8   |     numbers.replace(\"zero \".to_string(),\
    \ \"zero \".to_string());\n    |             ^^^^^^^ expected an `FnMut<(char,)>`\
    \ closure, found `String`\n    |\n    = help: the trait `FnMut<(char,)>` is not\
    \ implemented for `String`\n    = help: the following other types implement trait\
    \ `Pattern<'a>`:\n              &'b String\n              &'b str\n          \
    \    &'c &'b str\n    = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nnote: required by a bound in `str::<impl str>::replace`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpi7y4t02h.rs:8:42\n  |\n8 |    \
    \ numbers.replace(\"zero \".to_string(), \"zero \".to_string());\n  |        \
    \                                  ^^^^^^^^^^^^^^^^^^^\n  |                  \
    \                        |\n  |                                          expected\
    \ `&str`, found struct `String`\n  |                                         \
    \ help: consider borrowing here: `&\"zero \".to_string()`\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n   --> /tmp/tmpi7y4t02h.rs:9:13\n\
    \    |\n9   |     numbers.replace(\"one \".to_string(), \"one \".to_string());\n\
    \    |             ^^^^^^^ expected an `FnMut<(char,)>` closure, found `String`\n\
    \    |\n    = help: the trait `FnMut<(char,)>` is not implemented for `String`\n\
    \    = help: the following other types implement trait `Pattern<'a>`:\n      \
    \        &'b String\n              &'b str\n              &'c &'b str\n    = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    note: required by a bound in `str::<impl str>::replace`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpi7y4t02h.rs:9:41\n  |\n9 |     numbers.replace(\"one \"\
    .to_string(), \"one \".to_string());\n  |                                    \
    \     ^^^^^^^^^^^^^^^^^^\n  |                                         |\n  | \
    \                                        expected `&str`, found struct `String`\n\
    \  |                                         help: consider bor"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // split\
    \ the string on spaces and return a slice\n    let numbers_slice = numbers.split_whitespace().collect();\n\
    \    // convert the slice to an array and sort\n    let numbers_array = numbers_slice.to_vec().sorted();\n\
    \    // join the array into a String\n    numbers_array.iter().cloned().collect::<String>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpyxb0v34g.rs:10:25\n\
    \   |\n8  |     let numbers_slice = numbers.split_whitespace().collect();\n  \
    \ |         ------------- consider giving `numbers_slice` a type\n9  |     //\
    \ convert the slice to an array and sort\n10 |     let numbers_array = numbers_slice.to_vec().sorted();\n\
    \   |                         ^^^^^^^^^^^^^ cannot infer type\n   |\n   = note:\
    \ type must be known at this point\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers\
    \ = numbers.split_whitespace().sort();\n    String::from_utf8(sorted_numbers.iter().map(|n|\
    \ n.to_owned()).collect::<Vec<_>>()).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpyk18nnar.rs:7:57\n  |\n7 |     let mut sorted_numbers\
    \ = numbers.split_whitespace().sort();\n  |                                  \
    \                       ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_array\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    numbers_array.sort_by_key(|x|\
    \ x.parse().unwrap());\n    String::from_utf8_lossy(&numbers_array).to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnlrer0r_.rs:9:29\n  |\n9 |\
    \     String::from_utf8_lossy(&numbers_array).to_string()\n  |               \
    \              ^^^^^^^^^^^^^^ expected slice `[u8]`, found struct `Vec`\n  |\n\
    \  = note: expected reference `&[u8]`\n             found reference `&Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split(\" \")\n        .map(|number| number.parse::<i32>().ok())\n  \
    \      .sort_unstable()\n        .collect::<Vec<_>>()\n        .into_iter()\n\
    \        .map(|number| number.to_string())\n        .collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `Map` in\
    \ the current scope\n  --> /tmp/tmp7gup_blo.rs:10:10\n   |\n10 |         .sort_unstable()\n\
    \   |          ^^^^^^^^^^^^^ method not found in `Map<std::str::Split<'_, &str>,\
    \ [closure@/tmp/tmp7gup_blo.rs:9:14: 9:49]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // TODO:\
    \ make this code more efficient\n    numbers\n        .split_whitespace()\n  \
    \      .sort_by(|x, y| x.cmp(y))\n        .collect()\n        .iter()\n      \
    \  .map(|x| x.to_string())\n        .collect::<String>() + String::from(\"\")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpn70odih4.rs:10:10\n   |\n10 |         .sort_by(|x,\
    \ y| x.cmp(y))\n   |          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut string\
    \ = String::new();\n    let mut numbers = numbers.to_string().split(' ').collect::<Vec<&str>>();\n\
    \n    for number in numbers {\n        let number = number.to_owned();\n     \
    \   if number != \"nine\" {\n            string.push((number as u32).to_string());\n\
    \        } else {\n            string.push(\"nine\".to_string());\n        }\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7jxwxmn.rs:13:25\n   |\n\
    13 |             string.push((number as u32).to_string());\n   |             \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz7jxwxmn.rs:15:25\n   |\n15 |\
    \             string.push(\"nine\".to_string());\n   |                       \
    \  ^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0605]:\
    \ non-primitive cast: `String` as `u32`\n  --> /tmp/tmpz7jxwxmn.rs:13:25\n   |\n\
    13 |             string.push((number as u32).to_string());\n   |             \
    \            ^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0605.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut list\
    \ = numbers.chars().collect::<Vec<&str>>();\n    list.sort_by_key(|x| x.parse::<usize>().unwrap());\n\
    \    String::from_utf8(list.join(\"\").to_vec()).unwrap()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmptzynuoaf.rs:7:36\n     |\n7  \
    \  |     let mut list = numbers.chars().collect::<Vec<&str>>();\n     |      \
    \                              ^^^^^^^ value of type `Vec<&str>` cannot be built\
    \ from `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<&str>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0599]:\
    \ no method named `to_vec` found for struct `String` in the current scope\n -->\
    \ /tmp/tmptzynuoaf.rs:9:37\n  |\n9 |     String::from_utf8(list.join(\"\").to_vec()).unwrap()\n\
    \  |                                     ^^^^^^ method not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_as_str:\
    \ Vec<String> = numbers\n        .split_whitespace()\n        .map(|x| x.to_string())\n\
    \        .collect();\n\n    numbers_as_str.sort();\n\n    let mut numbers_as_string:\
    \ String = numbers_as_str\n        .iter()\n        .map(|x| x.to_string())\n\
    \        .collect();\n\n    numbers_as_string\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"fiveninethree\"`,\n right: `\"three five nine\"`', /tmp/tmpepj040xu.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .chars()\n        .map(|c| match c {\n            '0' => 0,\n       \
    \     '1' => 1,\n            '2' => 2,\n            '3' => 3,\n            '4'\
    \ => 4,\n            '5' => 5,\n            '6' => 6,\n            '7' => 7,\n\
    \            '8' => 8,\n            '9' => 9,\n            _ => panic!(\"Unexpected\
    \ character '{}'\", c)\n        })\n        .collect()\n        .sorted()\n  \
    \      .collect()\n        .to_string()\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpaoszgl4h.rs:22:10\n\
    \   |\n22 |         .collect()\n   |          ^^^^^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `collect`\n   |\n   = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n22 |         .collect::<B>()\n   |               \
    \  +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return String::from(\"\");\n    }\n\n    let mut numbers = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    numbers.sort_unstable();\n    let mut result = String::from(\"\");\n    for\
    \ (i, s) in numbers.into_iter().enumerate() {\n        if i != 0 {\n         \
    \   result.push_str(\" \");\n        }\n        result.push_str(s);\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp453bwix9.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"and\");\n    let mut numbers_split\
    \ = numbers.split(' ');\n    numbers_split.sort_by_key(|n| n.to_string());\n \
    \   numbers_split.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmpcbj4pg9p.rs:10:19\n   |\n10 |     numbers_split.sort_by_key(|n|\
    \ n.to_string());\n   |                   ^^^^^^^^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror[E0599]: no method named `join` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmpcbj4pg9p.rs:11:19\n   |\n11 |     numbers_split.join(\"\
    \ \")\n   |                   ^^^^ method not found in `std::str::Split<'_, char>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .lines()\n        .filter(|x| x.chars().all(|c| c.digit() >= '0' && c.digit()\
    \ <= '9'))\n        .collect()\n        .sort_by(|a, b| a.cmp(b).reverse())\n\
    \        .collect()\n        .join();\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digit` found for type `char` in the current\
    \ scope\n --> /tmp/tmprdyw6ylr.rs:9:41\n  |\n9 |         .filter(|x| x.chars().all(|c|\
    \ c.digit() >= '0' && c.digit() <= '9'))\n  |                                \
    \         ^^^^^ help: there is an associated function with a similar name: `is_digit`\n\
    \nerror[E0599]: no method named `digit` found for type `char` in the current scope\n\
    \ --> /tmp/tmprdyw6ylr.rs:9:61\n  |\n9 |         .filter(|x| x.chars().all(|c|\
    \ c.digit() >= '0' && c.digit() <= '9'))\n  |                                \
    \                             ^^^^^ help: there is an associated function with\
    \ a similar name: `is_digit`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprdyw6ylr.rs:6:37\n\
    \  |\n6 | fn sort_numbers(numbers: String) -> String {\n  |    ------------  \
    \                   ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split('\
    \ ').sort_by(|a, b| b.cmp(a))\n        .iter()\n        .map(String::from)\n \
    \       .collect::<Vec<_>>()\n        .join(' ')\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpu9rdv1zl.rs:7:24\n  |\n7 |     numbers.split('\
    \ ').sort_by(|a, b| b.cmp(a))\n  |                        ^^^^^^^ method not found\
    \ in `std::str::Split<'_, char>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_ascii_lowercase();\n    let mut index = 0;\n\n    for digits in\
    \ numbers.split_whitespace() {\n        if digits.is_digit() {\n            digits\
    \ = digits.to_ascii_lowercase();\n        }\n\n        let pos = index\n     \
    \       .iter()\n            .position(|x| x != digits.to_ascii_lowercase().to_ascii_lowercase().to_digit())\n\
    \            .unwrap();\n\n        if pos == 0 {\n            continue;\n    \
    \    }\n\n        if pos == 2 {\n            index += 1;\n            pos += 1;\n\
    \        }\n\n        if pos == 3 {\n            index += 1;\n            pos\
    \ += 1;\n        }\n\n        if pos == 4 {\n            index += 1;\n       \
    \     pos += 1;\n        }\n\n        if pos == 5 {\n            index += 1;\n\
    \            pos += 1;\n        }\n\n        if pos == 6 {\n            index\
    \ += 1;\n            pos += 1;\n        }\n\n        if pos == 7 {\n         \
    \   index += 1;\n            pos += 1;\n        }\n\n        if pos == 8 {\n \
    \           index += 1;\n            pos += 1;\n        }\n\n        if pos ==\
    \ 9 {\n            index += 1;\n            pos += 1;\n        }\n\n        if\
    \ pos == 10 {\n            index += 1;\n            pos += 1;\n        }\n\n \
    \       if pos == 11 {\n            index += 1;\n            pos += 1;\n     \
    \   }\n\n        if pos == 12 {\n            index += 1;\n            pos += 1;\n\
    \        }\n\n        if pos == 13 {\n            index += 1;\n            pos\
    \ += 1;\n        }\n\n        if pos == 14 {\n            index += 1;\n      \
    \      pos += 1;\n        }\n\n        if pos == 15 {\n            index += 1;\n\
    \            pos += 1;\n        }\n\n        if pos == 16 {\n            index\
    \ += 1;\n            pos += 1;\n        }\n\n        if pos == 17 {\n        \
    \    index += 1;\n            pos += 1;\n        }\n\n        if pos == 18 {\n\
    \            index += 1;\n            pos += 1;\n        }\n\n        if pos ==\
    \ 19 {\n            index += 1;\n            pos += 1;\n        }\n\n        if\
    \ pos == 20 {\n            index += 1;\n            pos += 1;\n        }\n\n \
    \       if pos == 21 && numbers.starts_with(digits) {\n            index += 1;\n\
    \            pos += 1;\n        }\n\n        if pos == 22 && numbers.ends_with(digits)\
    \ {\n            index += 1;\n            pos += 1;\n        }\n\n        if pos\
    \ == len(numbers) {\n            index += 1;\n        }\n\n        index += 1;\n\
    \    }\n\n    String::from(\n        numbers\n            .split_whitespace()\n\
    \            .sort_by(|x, y| {\n                x.to_digit(radix: 10).cmp(y.to_digit(radix:\
    \ 10))\n            })\n            \n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmp3mc6l1s1.rs:136:17\n\
    \    |\n6   | fn sort_numbers(numbers: String) -> String {\n    |            \
    \                                - closing delimiter possibly meant for this\n\
    ...\n136 |     String::from(\n    |                 ^ unclosed delimiter\n...\n\
    143 | }\n    | ^ mismatched closing delimiter\n\nerror: expected type, found `10`\n\
    \   --> /tmp/tmp3mc6l1s1.rs:140:35\n    |\n140 |                 x.to_digit(radix:\
    \ 10).cmp(y.to_digit(radix: 10))\n    |                                 - ^^ expected\
    \ type\n    |                                 |\n    |                       \
    \          tried to parse a type due to this\n\nerror[E0425]: cannot find function\
    \ `len` in this scope\n   --> /tmp/tmp3mc6l1s1.rs:129:19\n    |\n129 |       \
    \  if pos == len(numbers) {\n    |                   ^^^ not found in this scope\n\
    \nerror[E0599]: no method named `is_digit` found for reference `&str` in the current\
    \ scope\n  --> /tmp/tmp3mc6l1s1.rs:11:19\n   |\n11 |         if digits.is_digit()\
    \ {\n   |                   ^^^^^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3mc6l1s1.rs:12:22\n   |\n10 |     for digits\
    \ in numbers.split_whitespace() {\n   |         ------ expected due to the type\
    \ of this binding\n11 |         if digits.is_digit() {\n12 |             digits\
    \ = digits.to_ascii_lowercase();\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                      |\n   |                      expected `&str`, found\
    \ struct `String`\n   |                      help: consider borrowing here: `&digits.to_ascii_lowercase()`\n\
    \nerror[E0599]: no method named `iter` found for type `{integer}` in the current\
    \ scope\n  --> /tmp/tmp3mc6l1s1.rs:16:14\n   |\n16 |             .iter()\n   |\
    \              ^^^^ method not found in `{integer}`\n\nerror[E0599]: no method\
    \ named `to_digit` found for struct `String` in the current scope\n  --> /tmp/tmp3mc6l1s1.rs:17:81\n\
    \   |\n17 |             .position(|x| x != digits.to_ascii_lowercase().to_ascii_lowercase().to_digit())\n\
    \   |                                          "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut s\
    \ = String::from(\"zero one two three four five six seven eight nine\");\n   \
    \ for num in numbers.split_whitespace() {\n        if num.is_empty() {\n     \
    \       continue;\n        }\n        let index = match num.parse::<usize>() {\n\
    \            Ok(num) => num,\n            Err(_) => {\n                return\
    \ Err(format_err!(\"Invalid number {} found on line {}\", num, 1));\n        \
    \    }\n        };\n        // Sort smallest to largest\n        if index == 0\
    \ {\n            continue;\n        }\n        if s.len() < index {\n        \
    \    return s;\n        }\n        s.swap(index, s.len());\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `format_err` in this scope\n   --> /tmp/tmp69lnrodv.rs:15:28\n\
    \    |\n15  |                   return Err(format_err!(\"Invalid number {} found\
    \ on line {}\", num, 1));\n    |                              ^^^^^^^^^^ help:\
    \ a macro with a similar name exists: `format_args`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp69lnrodv.rs:15:24\n   |\n15 |                 return Err(format_err!(\"\
    Invalid number {} found on line {}\", num, 1));\n   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Result`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Result<_, _>`\n\nerror[E0599]: no method\
    \ named `swap` found for struct `String` in the current scope\n  --> /tmp/tmp69lnrodv.rs:25:11\n\
    \   |\n25 |         s.swap(index, s.len());\n   |           ^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    match numbers.chars().take(numbers.len()\
    \ - 1) {\n        0 => String::from(\"zero\"),\n        1 => String::from(\"one\"\
    ),\n        2 => String::from(\"two\"),\n        3 => String::from(\"three\"),\n\
    \        4 => String::from(\"four\"),\n        5 => String::from(\"five\"),\n\
    \        6 => String::from(\"six\"),\n        7 => String::from(\"seven\"),\n\
    \        8 => String::from(\"eight\"),\n        9 => String::from(\"nine\"),\n\
    \        _ => unimplemented!(),\n    }\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfpvzh805.rs:8:9\n  |\n7 |\
    \     match numbers.chars().take(numbers.len() - 1) {\n  |           ---------------------------------------\
    \ this expression has type `std::iter::Take<Chars<'_>>`\n8 |         0 => String::from(\"\
    zero\"),\n  |         ^ expected struct `std::iter::Take`, found integer\n  |\n\
    \  = note: expected struct `std::iter::Take<Chars<'_>>`\n               found\
    \ type `{integer}`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfpvzh805.rs:9:9\n\
    \  |\n7 |     match numbers.chars().take(numbers.len() - 1) {\n  |           ---------------------------------------\
    \ this expression has type `std::iter::Take<Chars<'_>>`\n8 |         0 => String::from(\"\
    zero\"),\n9 |         1 => String::from(\"one\"),\n  |         ^ expected struct\
    \ `std::iter::Take`, found integer\n  |\n  = note: expected struct `std::iter::Take<Chars<'_>>`\n\
    \               found type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfpvzh805.rs:10:9\n   |\n7  |     match numbers.chars().take(numbers.len()\
    \ - 1) {\n   |           --------------------------------------- this expression\
    \ has type `std::iter::Take<Chars<'_>>`\n...\n10 |         2 => String::from(\"\
    two\"),\n   |         ^ expected struct `std::iter::Take`, found integer\n   |\n\
    \   = note: expected struct `std::iter::Take<Chars<'_>>`\n                found\
    \ type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfpvzh805.rs:11:9\n\
    \   |\n7  |     match numbers.chars().take(numbers.len() - 1) {\n   |        \
    \   --------------------------------------- this expression has type `std::iter::Take<Chars<'_>>`\n\
    ...\n11 |         3 => String::from(\"three\"),\n   |         ^ expected struct\
    \ `std::iter::Take`, found integer\n   |\n   = note: expected struct `std::iter::Take<Chars<'_>>`\n\
    \                found type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfpvzh805.rs:12:9\n   |\n7  |     match numbers.chars().take(numbers.len()\
    \ - 1) {\n   |           --------------------------------------- this expression\
    \ has type `std::iter::Take<Chars<'_>>`\n...\n12 |         4 => String::from(\"\
    f"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.replace(\"\
    zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\"\
    , \"3\").replace(\"four\", \"4\")\n        .replace(\"five\", \"5\").replace(\"\
    six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\"\
    , \"9\")\n        .split(' ')\n        .sort_by(|&a, b| a.parse::<usize>().cmp(&b.parse::<usize>()))\n\
    \        .collect::<Vec<String>>()\n        .join(' ')\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmpxwjwrx3h.rs:10:10\n   |\n10 |         .sort_by(|&a,\
    \ b| a.parse::<usize>().cmp(&b.parse::<usize>()))\n   |          ^^^^^^^ method\
    \ not found in `std::str::Split<'_, char>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \"\");\n    numbers.replace(\"\
    \ \", \"\");\n    numbers.chars().sort(|a, b| a.cmp(b));\n    numbers\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmppqcl4o1n.rs:10:21\n   |\n10 |     numbers.chars().sort(|a,\
    \ b| a.cmp(b));\n   |                     ^^^^ method not found in `Chars<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp0suwq0y5.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n  |                                ^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_string\
    \ = numbers.to_string();\n    let mut numbers_split_string = numbers_string.split_whitespace();\n\
    \    numbers_split_string.sort();\n    let mut sorted_numbers = String::new();\n\
    \    sorted_numbers.push_str(numbers_split_string);\n    sorted_numbers\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpgufmyoxb.rs:9:26\n  |\n9 |     numbers_split_string.sort();\n\
    \  |                          ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgufmyoxb.rs:11:29\n   |\n11 |\
    \     sorted_numbers.push_str(numbers_split_string);\n   |                   \
    \          ^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct `SplitWhitespace`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    let mut result = String::new();\n\
    \n    for num in numbers_vec.iter() {\n        match num.to_digit(10) {\n    \
    \        Some(num) => {\n                result.push((num as u32).to_string());\n\
    \            }\n            None => {\n                panic!(\n             \
    \       \"Input is not a sequence of numbers, \\\n                     please\
    \ input a sequence of numbers \\\n                     from zero to nine\"\n \
    \               );\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for reference `&&str` in\
    \ the current scope\n  --> /tmp/tmphejlcz_v.rs:11:19\n   |\n11 |         match\
    \ num.to_digit(10) {\n   |                   ^^^^^^^^ method not found in `&&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphejlcz_v.rs:13:29\n   |\n13 |\
    \                 result.push((num as u32).to_string());\n   |               \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split(\"\
    \ \").sort_by(|a, b| a.parse().unwrap().cmp(&b.parse().unwrap()))\n        .collect::<Vec<_>>()\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp1iutc1kr.rs:7:24\n  |\n7 |     numbers.split(\"\
    \ \").sort_by(|a, b| a.parse().unwrap().cmp(&b.parse().unwrap()))\n  |       \
    \                 ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    strings.sort_by(|a,\
    \ b| b.cmp(a))\n        .map(|s| s.to_string())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmp3bnpx4ll.rs:7:5\n\
    \  |\n7 |     strings.sort_by(|a, b| b.cmp(a))\n  |     ^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return numbers;\n    }\n\n    let mut numbers = numbers.to_string();\n\
    \    numbers.split_whitespace().sort_by(|a, b| a.cmp(b)).collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpkmia9598.rs:12:32\n   |\n12 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<Vec<_>>().join(\" \")\n   |                         \
    \       ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut s\
    \ = String::from(\"zero one two three four five six seven eight nine\");\n   \
    \ s.push_str(numbers);\n    s\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp336ts_uu.rs:8:16\n  |\n8 |\
    \     s.push_str(numbers);\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&str`, found struct `String`\n  |              \
    \  help: consider borrowing here: `&numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    numbers.sort_by(|a, b|\
    \ {\n        match a.chars().nth(0) {\n            '0' => {\n                let\
    \ n = a.chars().nth(1).unwrap();\n                n as i32 - n as i32\n      \
    \      }\n            '1' => {\n                let n = b.chars().nth(1).unwrap();\n\
    \                n as i32 - n as i32\n            }\n            '2' => {\n  \
    \              let n = b.chars().nth(1).unwrap();\n                n as i32 -\
    \ n as i32\n            }\n            '3' => {\n                let n = a.chars().nth(1).unwrap();\n\
    \                n as i32 - n as i32\n            }\n            '4' => {\n  \
    \              let n = a.chars().nth(1).unwrap();\n                n as i32 -\
    \ n as i32\n            }\n            '5' => {\n                let n = b.chars().nth(1).unwrap();\n\
    \                n as i32 - n as i32\n            }\n            '6' => {\n  \
    \              let n = b.chars().nth(1).unwrap();\n                n as i32 -\
    \ n as i32\n            }\n            '7' => {\n                let n = a.chars().nth(1).unwrap();\n\
    \                n as i32 - n as i32\n            }\n            '8' => {\n  \
    \              let n = a.chars().nth(1).unwrap();\n                n as i32 -\
    \ n as i32\n            }\n            '9' => {\n                let n = b.chars().nth(1).unwrap();\n\
    \                n as i32 - n as i32\n            }\n            _ => {\n    \
    \            println!(\"Invalid input: {}\", a);\n                0\n        \
    \    }\n        }\n    });\n    String::from_utf8(numbers)\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptmoel0uh.rs:10:13\n   |\n\
    9  |         match a.chars().nth(0) {\n   |               ---------------- this\
    \ expression has type `Option<char>`\n10 |             '0' => {\n   |        \
    \     ^^^ expected enum `Option`, found `char`\n   |\n   = note: expected enum\
    \ `Option<char>`\n              found type `char`\nhelp: try wrapping the pattern\
    \ in `Some`\n   |\n10 |             Some('0') => {\n   |             +++++   +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptmoel0uh.rs:14:13\n   |\n9  |\
    \         match a.chars().nth(0) {\n   |               ---------------- this expression\
    \ has type `Option<char>`\n...\n14 |             '1' => {\n   |             ^^^\
    \ expected enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the pattern in `Some`\n \
    \  |\n14 |             Some('1') => {\n   |             +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptmoel0uh.rs:18:13\n   |\n9  |         match\
    \ a.chars().nth(0) {\n   |               ---------------- this expression has\
    \ type `Option<char>`\n...\n18 |             '2' => {\n   |             ^^^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the pattern in `Some`\n \
    \  |\n18 |             Some('2') => {\n   |             +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptmoel0uh.rs:22:13\n   |\n9  |         match\
    \ a.chars().nth(0) {\n   |               ---------------- this expression has\
    \ type `Option<char>`\n...\n22 |             '3' => {\n   |             ^^^ expected\
    \ enum `Option`, found `char`\n   |\n   = note: expected enum `Option<char>`\n\
    \              found type `char`\nhelp: try wrapping the pattern in `Some`\n \
    \  |\n22 |             Some('3') => {\n   |             +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptmoel0uh.rs:26:13\n   |\n9  |         match\
    \ a.chars().nth(0) {\n   |               ---------------- this expression has\
    \ type `Option<char>`\n...\n26 |             '4' => {\n   |             ^^^ expecte"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n    let mut numbers_string = \"\";\n    for (i,\
    \ number) in numbers.iter().enumerate() {\n        let number_string = number.to_string();\n\
    \        // Convert the number from a string to an integer\n        let number_int\
    \ = (number.parse::<i32>().unwrap() as u32).to_string();\n        numbers_string.push_str(&number_string);\n\
    \        if i < numbers.len() - 1 {\n            numbers_string.push_str(\" \"\
    );\n        }\n    }\n    numbers_string.trim();\n    numbers_string\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpxz1h135z.rs:9:32\n  |\n9 |     for (i, number)\
    \ in numbers.iter().enumerate() {\n  |                                ^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `push_str`\
    \ found for reference `&str` in the current scope\n  --> /tmp/tmpxz1h135z.rs:13:24\n\
    \   |\n13 |         numbers_string.push_str(&number_string);\n   |           \
    \             ^^^^^^^^ method not found in `&str`\n\nerror[E0599]: no method named\
    \ `len` found for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpxz1h135z.rs:14:24\n\
    \   |\n14 |         if i < numbers.len() - 1 {\n   |                        ^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `push_str`\
    \ found for reference `&str` in the current scope\n  --> /tmp/tmpxz1h135z.rs:15:28\n\
    \   |\n15 |             numbers_string.push_str(\" \");\n   |                \
    \            ^^^^^^^^ method not found in `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxz1h135z.rs:19:5\n   |\n6  | fn sort_numbers(numbers: String) ->\
    \ String {\n   |                                     ------ expected `String`\
    \ because of return type\n...\n19 |     numbers_string\n   |     ^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |     |\n   |     expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_array\
    \ = numbers.split_whitespace();\n\n    // Find the smallest number\n    let smallest_num\
    \ = numbers_array.iter().map(|num| num.parse().unwrap_or(0)).collect::<Vec<i32>>().min();\n\
    \n    // Find the largest number\n    let largest_num = numbers_array.iter().map(|num|\
    \ num.parse().unwrap_or(0)).collect::<Vec<i32>>().max();\n\n    // Sort numbers\
    \ in order of the smallest number to the largest number\n    for num in numbers_array.iter().cloned()\
    \ {\n        if num > smallest_num {\n            numbers_array.remove(&num);\n\
    \        }\n    }\n\n    for num in numbers_array.iter().cloned() {\n        if\
    \ num > largest_num {\n            numbers_array.remove(&num);\n        }\n  \
    \  }\n\n    numbers_array.iter().cloned().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmphcrvd3aj.rs:10:38\n   |\n10 |     let smallest_num\
    \ = numbers_array.iter().map(|num| num.parse().unwrap_or(0)).collect::<Vec<i32>>().min();\n\
    \   |                                      ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `iter` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmphcrvd3aj.rs:13:37\n   |\n13 |     let largest_num\
    \ = numbers_array.iter().map(|num| num.parse().unwrap_or(0)).collect::<Vec<i32>>().max();\n\
    \   |                                     ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `iter` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmphcrvd3aj.rs:16:30\n   |\n16 |     for num in numbers_array.iter().cloned()\
    \ {\n   |                              ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `remove` found for struct `SplitWhitespace` in\
    \ the current scope\n  --> /tmp/tmphcrvd3aj.rs:18:27\n   |\n18 |             numbers_array.remove(&num);\n\
    \   |                           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `iter` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmphcrvd3aj.rs:22:30\n   |\n22 |     for num in numbers_array.iter().cloned()\
    \ {\n   |                              ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `remove` found for struct `SplitWhitespace` in\
    \ the current scope\n  --> /tmp/tmphcrvd3aj.rs:24:27\n   |\n24 |             numbers_array.remove(&num);\n\
    \   |                           ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `iter` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmphcrvd3aj.rs:28:19\n   |\n28 |     numbers_array.iter().cloned().collect::<String>()\n\
    \   |                   ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this erro"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.replace(\",\", \" \");\n    numbers.replace(\"\
    ,\", \" \").split_whitespace().sort_by(|a, b| a.cmp(b)).collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpu709bv4e.rs:9:50\n  |\n9 |     numbers.replace(\"\
    ,\", \" \").split_whitespace().sort_by(|a, b| a.cmp(b)).collect::<Vec<_>>()\n\
    \  |                                                  ^^^^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().collect::<Vec<_>>()\n\
    \        .sort_by_key(|number| {\n            if let Some(&prefix) = (&number.chars()[1])[..]\
    \ {\n                if prefix >= '0' && prefix <= '9' {\n                   \
    \ Ok(Some(number))\n                } else {\n                    Err(format!(\"\
    Invalid number '{}'\", number))\n                }\n            } else {\n   \
    \             Ok(None)\n            }\n        })\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `Chars<'_>`\n --> /tmp/tmpvqmpyt8q.rs:9:38\n\
    \  |\n9 |             if let Some(&prefix) = (&number.chars()[1])[..] {\n  | \
    \                                     ^^^^^^^^^^^^^^^^^\n\nerror[E0599]: `()`\
    \ is not an iterator\n  --> /tmp/tmpvqmpyt8q.rs:19:10\n   |\n19 |         .collect::<String>()\n\
    \   |          ^^^^^^^ `()` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `(): Iterator`\n           which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = numbers.clone();\n    numbers_sorted.sort_unstable();\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpgr1qmsa7.rs:8:20\n  |\n8 |     numbers_sorted.sort_unstable();\n\
    \  |                    ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().enumerate().map(|(_,\
    \ digit)| digit - '0').collect::<Vec<_>>().sort_by(|a, b| a.cmp(b)).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n --> /tmp/tmp90hoqmrm.rs:7:56\n\
    \  |\n7 |     numbers.chars().enumerate().map(|(_, digit)| digit - '0').collect::<Vec<_>>().sort_by(|a,\
    \ b| a.cmp(b)).collect::<String>()\n  |                                      \
    \            ----- ^ --- char\n  |                                           \
    \       |\n  |                                                  char\n\nerror[E0599]:\
    \ `()` is not an iterator\n --> /tmp/tmp90hoqmrm.rs:7:108\n  |\n7 |     numbers.chars().enumerate().map(|(_,\
    \ digit)| digit - '0').collect::<Vec<_>>().sort_by(|a, b| a.cmp(b)).collect::<String>()\n\
    \  |                                                                         \
    \                                   ^^^^^^^ `()` is not an iterator\n  |\n  =\
    \ note: the following trait bounds were not satisfied:\n          `(): Iterator`\n\
    \          which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers\
    \ = numbers;\n    sorted_numbers.sort_unstable_by_key(|&x| x.to_ascii_lowercase().rfind('0'));\n\
    \    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable_by_key` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpsup3zef4.rs:8:20\n  |\n8 |     sorted_numbers.sort_unstable_by_key(|&x|\
    \ x.to_ascii_lowercase().rfind('0'));\n  |                    ^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut num_list\
    \ = numbers.split(' ').collect::<Vec<String>>();\n    num_list.sort_by_key(|x|\
    \ x.parse::<u8>().unwrap());\n    num_list.join().to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp8gga44dy.rs:7:43\n     |\n7  \
    \  |     let mut num_list = numbers.split(' ').collect::<Vec<String>>();\n   \
    \  |                                           ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0061]: this function takes 1 argument but\
    \ 0 arguments were supplied\n   --> /tmp/tmp8gga44dy.rs:9:14\n    |\n9   |   \
    \  num_list.join().to_string()\n    |              ^^^^- supplied 0 arguments\n\
    \    |              |\n    |              expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0277.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_string\
    \ = numbers.clone();\n    numbers_string.sort();\n    numbers_string\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `String` in the current\
    \ scope\n --> /tmp/tmptgdgh3_k.rs:8:20\n  |\n8 |     numbers_string.sort();\n\
    \  |                    ^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ a.cmp(b));\n    String::from_utf8_lossy(numbers)\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpis5pnoh9.rs:9:29\n  |\n9 |\
    \     String::from_utf8_lossy(numbers)\n  |                             ^^^^^^^\
    \ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected reference `&[u8]`\n\
    \                found struct `Vec<&str>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpis5pnoh9.rs:9:5\n  |\n6 | fn sort_numbers(numbers: String) -> String\
    \ {\n  |                                     ------ expected `String` because\
    \ of return type\n...\n9 |     String::from_utf8_lossy(numbers)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |     |\n  |     expected\
    \ struct `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n\
    \               found enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers\
    \ = numbers.to_owned();\n    let mut numbers = numbers.split_whitespace();\n \
    \   let mut numbers = numbers\n        .into_iter()\n        .filter_map(|&x|\
    \ {\n            if x.is_digit() {\n                Some(x.parse().unwrap())\n\
    \            } else {\n                None\n            }\n        })\n     \
    \   .collect::<Vec<_>>();\n    numbers.sort_by_key(|&x| {\n        match x {\n\
    \            '0' => 1,\n            '1' => 2,\n            '2' => 3,\n       \
    \     '3' => 4,\n            '4' => 5,\n            '5' => 6,\n            '6'\
    \ => 7,\n            '7' => 8,\n            '8' => 9,\n            '9' => 10,\n\
    \            _ => x,\n        }\n    });\n    String::from_vec(numbers)\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_digit` found for type `str` in the current\
    \ scope\n  --> /tmp/tmpk3mkp1ox.rs:12:18\n   |\n12 |             if x.is_digit()\
    \ {\n   |                  ^^^^^^^^ method not found in `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpk3mkp1ox.rs:11:23\n   |\n11 |         .filter_map(|&x| {\n   |     \
    \                  ^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `str`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\n\nerror[E0308]: `match` arms have incompatible types\n  -->\
    \ /tmp/tmpk3mkp1ox.rs:31:18\n   |\n20 | /         match x {\n21 | |          \
    \   '0' => 1,\n22 | |             '1' => 2,\n23 | |             '2' => 3,\n...\
    \  |\n30 | |             '9' => 10,\n   | |                    -- this and all\
    \ prior arms are found to be of type `{integer}`\n31 | |             _ => x,\n\
    \   | |                  ^ expected integer, found `char`\n32 | |         }\n\
    \   | |_________- `match` arms have incompatible types\n\nerror[E0599]: no function\
    \ or associated item named `from_vec` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpk3mkp1ox.rs:34:13\n   |\n34 |     String::from_vec(numbers)\n\
    \   |             ^^^^^^^^ function or associated item not found in `String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut parts\
    \ = numbers.split(\" \").collect::<Vec<String>>();\n    parts.sort_by_key(|x|\
    \ x.parse().unwrap());\n    parts.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpakyceoxo.rs:7:40\n     |\n7  \
    \  |     let mut parts = numbers.split(\" \").collect::<Vec<String>>();\n    \
    \ |                                        ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n        .to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpkmjsxspi.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                                ^^^^^^^ method not\
    \ found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut input\
    \ = numbers.to_string();\n    let mut output = String::from(\"one\");\n    while\
    \ !input.is_empty() {\n        let pos = input.find(' ');\n        if pos > 0\
    \ {\n            let input = &input[..pos];\n            let mut output = String::from(\"\
    one\");\n            let mut is_next = true;\n            while is_next {\n  \
    \              let digit = input.chars().fold(0, |a, b| a + (b as u32));\n   \
    \             if digit < 10 {\n                    output = format!(\"{}{}\",\
    \ output, &input[digit]);\n                    is_next = false;\n            \
    \    } else {\n                    output = format!(\"{} {}\", output, &input[digit\
    \ - 10]);\n                    is_next = true;\n                }\n          \
    \  }\n            output = output.trim().to_string();\n        } else {\n    \
    \        output = String::from(input);\n        }\n        input = &input[pos..];\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0xxi23db.rs:11:18\n   |\n\
    11 |         if pos > 0 {\n   |                  ^ expected enum `Option`, found\
    \ integer\n   |\n   = note: expected enum `Option<usize>`\n              found\
    \ type `{integer}`\nhelp: try wrapping the expression in `Some`\n   |\n11 |  \
    \       if pos > Some(0) {\n   |                  +++++ +\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `RangeTo<Option<usize>>`\n  --> /tmp/tmp0xxi23db.rs:12:26\n\
    \   |\n12 |             let input = &input[..pos];\n   |                     \
    \     ^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<Option<usize>>`\n  \
    \ |\n   = help: the trait `Index<RangeTo<Option<usize>>>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<Option<usize>>`\n\
    \  --> /tmp/tmp0xxi23db.rs:29:18\n   |\n29 |         input = &input[pos..];\n\
    \   |                  ^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<Option<usize>>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<Option<usize>>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0xxi23db.rs:29:17\n\
    \   |\n7  |     let mut input = numbers.to_string();\n   |                   \
    \  ------------------- expected due to this value\n...\n29 |         input "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.parse().unwrap()\n\
    \        .into_iter()\n        .map(|number| number.to_string())\n        .collect()\n\
    \        .sort_unstable()\n        .collect()\n        .unwrap_or(numbers)\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpl4yr2t4j.rs:7:21\n\
    \  |\n7 |     numbers.parse().unwrap()\n  |                     ^^^^^^ cannot\
    \ infer type for type parameter `T`\n  |\n  = note: type must be known at this\
    \ point\nhelp: consider specifying the type argument in the method call\n  |\n\
    7 |     numbers.parse::<F>().unwrap()\n  |                  +++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\" \");\n    numbers.push_str(\"\
    nine eight seven six five four three two one\");\n    let mut numbers = numbers.to_string();\n\
    \    let mut counter = 0;\n    while let Some(ref mut number) = get_next_number(&mut\
    \ numbers, &mut counter) {\n        numbers.push_str(&number);\n        numbers.push_str(\"\
    \ \");\n    }\n    numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_next_number` in this scope\n  -->\
    \ /tmp/tmpxagkg_n2.rs:12:38\n   |\n12 |     while let Some(ref mut number) = get_next_number(&mut\
    \ numbers, &mut counter) {\n   |                                      ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpxagkg_n2.rs:12:15\n    |\n12  |\
    \     while let Some(ref mut number) = get_next_number(&mut numbers, &mut counter)\
    \ {\n    |               ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Some`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .map(|x| x.parse().expect(\"Failed to parse\
    \ number!\"))\n        .sort_by(|a, b| a.cmp(b))\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpz8njqca5.rs:10:10\n   |\n10 |         .sort_by(|a, b| a.cmp(b))\n\
    \   |          ^^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmpz8njqca5.rs:9:14:\
    \ 9:61]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.to_lowercase().split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpzdwxsybl.rs:7:47\n  |\n7 |     numbers.to_lowercase().split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                               ^^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n    numbers = numbers.sort_by_key(|x| x.to_string());\n\
    \    String::from_utf8(numbers.join(\" \"))\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmphavlcb4p.rs:8:23\n  |\n8 |     numbers =\
    \ numbers.sort_by_key(|x| x.to_string());\n  |                       ^^^^^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `join`\
    \ found for struct `SplitWhitespace` in the current scope\n --> /tmp/tmphavlcb4p.rs:9:31\n\
    \  |\n9 |     String::from_utf8(numbers.join(\" \"))\n  |                    \
    \           ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphavlcb4p.rs:9:5\n  |\n6 | fn sort_numbers(numbers: String)\
    \ -> String {\n  |                                     ------ expected `String`\
    \ because of return type\n...\n9 |     String::from_utf8(numbers.join(\" \"))\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ enum `Result`\n  |\n  = note: expected struct `String`\n               found\
    \ enum `Result<String, FromUtf8Error>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.to_owned()\n\
    \        .split(' ')\n        .sort_unstable_by_key(|&s| s.parse().unwrap())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable_by_key` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpsgb78tlk.rs:9:10\n  |\n9 |         .sort_unstable_by_key(|&s|\
    \ s.parse().unwrap())\n  |          ^^^^^^^^^^^^^^^^^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.trim().split_whitespace();\n    numbers.sort_by_key(|&x| match x.to_ascii_lowercase().as_str()\
    \ {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n  \
    \      \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n     \
    \   \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"\
    nine\" => 9,\n        _ => panic!(\"invalid input: {}\", x),\n    });\n    numbers\
    \ = numbers.join(\" \").to_string();\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpi5dzfsv7.rs:8:13\n  |\n8 |     numbers.sort_by_key(|&x|\
    \ match x.to_ascii_lowercase().as_str() {\n  |             ^^^^^^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `join` found\
    \ for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpi5dzfsv7.rs:21:23\n\
    \   |\n21 |     numbers = numbers.join(\" \").to_string();\n   |             \
    \          ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi5dzfsv7.rs:22:5\n   |\n6  | fn sort_numbers(numbers: String)\
    \ -> String {\n   |                                     ------ expected `String`\
    \ because of return type\n...\n22 |     numbers\n   |     ^^^^^^^ expected struct\
    \ `String`, found struct `SplitWhitespace`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec\
    \ = numbers.split_whitespace();\n    let mut num_len = numbers_vec.len();\n  \
    \  let mut num_chars = numbers.len();\n    let mut num_str = String::new();\n\
    \    while num_len > 0 {\n        let mut new_num_str = String::new();\n     \
    \   for num in &mut numbers_vec {\n            if *num >= '0' && *num <= '9' {\n\
    \                new_num_str.push_str(*num);\n                num_chars -= 1;\n\
    \            } else {\n                num_str.push_str(num);\n              \
    \  num_chars += 1;\n                break;\n            }\n        }\n       \
    \ numbers_vec.clear();\n        num_len = new_num_str.len();\n        num_str\
    \ = new_num_str;\n    }\n    num_str\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp7z6i2knk.rs:8:35\n  |\n8 |     let mut num_len\
    \ = numbers_vec.len();\n  |                                   ^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7z6i2knk.rs:14:24\n\
    \   |\n14 |             if *num >= '0' && *num <= '9' {\n   |                \
    \        ^^^ expected `str`, found `char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7z6i2knk.rs:14:39\n   |\n14 |             if *num >= '0' && *num\
    \ <= '9' {\n   |                                       ^^^ expected `str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7z6i2knk.rs:15:38\n\
    \   |\n15 |                 new_num_str.push_str(*num);\n   |                \
    \                      ^^^^\n   |                                      |\n   |\
    \                                      expected `&str`, found `str`\n   |    \
    \                                  help: consider borrowing here: `&*num`\n\n\
    error[E0599]: no method named `clear` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmp7z6i2knk.rs:23:21\n   |\n23 |         numbers_vec.clear();\n\
    \   |                     ^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.trim_left_matches(\"\
    zero\")\n        .replace(r\"one\", \"1\")\n        .replace(r\"two\", \"2\")\n\
    \        .replace(r\"three\", \"3\")\n        .replace(r\"four\", \"4\")\n   \
    \     .replace(r\"five\", \"5\")\n        .replace(r\"six\", \"6\")\n        .replace(r\"\
    seven\", \"7\")\n        .replace(r\"eight\", \"8\")\n        .replace(r\"nine\"\
    , \"9\")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpmn57c8q9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_array\
    \ = numbers.split(\" \").collect::<Vec<_>>();\n    numbers_array.sort();\n   \
    \ let mut sorted_numbers = \"\";\n    for num in numbers_array {\n        sorted_numbers\
    \ = sorted_numbers.to_string() + num;\n    }\n    sorted_numbers\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf1k_n7y7.rs:11:26\n   |\n\
    9  |     let mut sorted_numbers = \"\";\n   |                              --\
    \ expected due to this value\n10 |     for num in numbers_array {\n11 |      \
    \   sorted_numbers = sorted_numbers.to_string() + num;\n   |                 \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                          |\n\
    \   |                          expected `&str`, found struct `String`\n   |  \
    \                        help: consider borrowing here: `&(sorted_numbers.to_string()\
    \ + num)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf1k_n7y7.rs:13:5\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                      ------ expected `String` because of return type\n...\n\
    13 |     sorted_numbers\n   |     ^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |     |\n   |     expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut string:\
    \ String = \"\";\n    let mut numbers_vec: Vec<i32> = numbers\n        .split_whitespace()\n\
    \        .map(|num| match num.parse() {\n            Ok(num) => num,\n       \
    \     Err(_) => return Err(format!(\"Couldn't parse number: {}\", num)),\n   \
    \     })\n        .collect();\n    numbers_vec.sort();\n    for (index, num) in\
    \ numbers_vec.into_iter().enumerate() {\n        if index != 0 {\n           \
    \ string = string+\" \";\n        }\n        string = string+num.to_string();\n\
    \    }\n    return string;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe5wes2mk.rs:7:30\n  |\n7 |\
    \     let mut string: String = \"\";\n  |                     ------   ^^- help:\
    \ try using a conversion method: `.to_string()`\n  |                     |   \
    \     |\n  |                     |        expected struct `String`, found `&str`\n\
    \  |                     expected due to this\n\nerror[E0277]: the trait bound\
    \ `Result<_, String>: FromStr` is not satisfied\n    --> /tmp/tmpe5wes2mk.rs:10:30\n\
    \     |\n10   |         .map(|num| match num.parse() {\n     |               \
    \               ^^^^^ the trait `FromStr` is not implemented for `Result<_, String>`\n\
    \     |\n     = help: the following other types implement trait `FromStr`:\n \
    \              IpAddr\n               Ipv4Addr\n               Ipv6Addr\n    \
    \           NonZeroI128\n               NonZeroI16\n               NonZeroI32\n\
    \               NonZeroI64\n               NonZeroI8\n             and 29 others\n\
    note: required by a bound in `core::str::<impl str>::parse`\n\nerror[E0277]: a\
    \ value of type `Vec<i32>` cannot be built from an iterator over elements of type\
    \ `Result<_, String>`\n    --> /tmp/tmpe5wes2mk.rs:14:10\n     |\n14   |     \
    \    .collect();\n     |          ^^^^^^^ value of type `Vec<i32>` cannot be built\
    \ from `std::iter::Iterator<Item=Result<_, String>>`\n     |\n     = help: the\
    \ trait `FromIterator<Result<_, String>>` is not implemented for `Vec<i32>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe5wes2mk.rs:20:25\n\
    \   |\n20 |         string = string+num.to_string();\n   |                   \
    \      ^^^^^^^^^^^^^^^\n   |                         |\n   |                 \
    \        expected `&str`, found struct `String`\n   |                        \
    \ help: consider borrowing here: `&num.to_string()`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = String::new();\n    for n in numbers.chars().map(|c| match c {\n        '0'\
    \ | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => c.to_string(),\n  \
    \      _ => panic!(\"Invalid number\")\n    }) {\n        if result.is_empty()\
    \ {\n            result.push_str(n);\n        } else if result.chars().any(|c|\
    \ c.to_string() == n) {\n            result.push_str(n);\n        } else {\n \
    \           let mut last = 0;\n            let mut i = 0;\n            let mut\
    \ current = 0;\n            while i < result.len() {\n                if last\
    \ < i && current == i {\n                    result.swap(i, last);\n         \
    \           break;\n                }\n                if current == i {\n   \
    \                 last = i;\n                    current = i;\n              \
    \      i += 1;\n                }\n                i += 1;\n            }\n  \
    \          result.push_str(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv8i_zu18.rs:13:29\n   |\n\
    13 |             result.push_str(n);\n   |                             ^\n   |\
    \                             |\n   |                             expected `&str`,\
    \ found struct `String`\n   |                             help: consider borrowing\
    \ here: `&n`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv8i_zu18.rs:15:29\n\
    \   |\n15 |             result.push_str(n);\n   |                            \
    \ ^\n   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&n`\n\nerror[E0599]: no method named `swap` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpv8i_zu18.rs:22:28\n   |\n22 | \
    \                    result.swap(i, last);\n   |                            ^^^^\
    \ method not found in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv8i_zu18.rs:32:29\n\
    \   |\n32 |             result.push_str(n);\n   |                            \
    \ ^\n   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&n`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().filter_map(|c|\
    \ match c {\n        'z' .. '9' => Some(c.to_string()),\n        _ => None,\n\
    \    }).collect::<Vec<_>>().sort().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: exclusive range pattern syntax is experimental\n --> /tmp/tmpjdrd6na0.rs:8:9\n\
    \  |\n8 |         'z' .. '9' => Some(c.to_string()),\n  |         ^^^^^^^^^^\n\
    \  |\n  = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854>\
    \ for more information\n\nerror[E0599]: no method named `join` found for unit\
    \ type `()` in the current scope\n  --> /tmp/tmpjdrd6na0.rs:10:35\n   |\n10 |\
    \     }).collect::<Vec<_>>().sort().join(\" \")\n   |                        \
    \           ^^^^ method not found in `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0658.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers\
    \ = String::new();\n    let mut numbers = numbers.split_whitespace();\n    for\
    \ i in numbers.iter() {\n        match i {\n            \"zero\" => sorted_numbers.push(\"\
    0\"),\n            \"one\" => sorted_numbers.push(\"1\"),\n            \"two\"\
    \ => sorted_numbers.push(\"2\"),\n            \"three\" => sorted_numbers.push(\"\
    3\"),\n            \"four\" => sorted_numbers.push(\"4\"),\n            \"five\"\
    \ => sorted_numbers.push(\"5\"),\n            \"six\" => sorted_numbers.push(\"\
    6\"),\n            \"seven\" => sorted_numbers.push(\"7\"),\n            \"eight\"\
    \ => sorted_numbers.push(\"8\"),\n            \"nine\" => sorted_numbers.push(\"\
    9\"),\n            _ => panic!(\"Not a valid number: {:?}\", i),\n        }\n\
    \    }\n    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpiz_813pm.rs:9:22\n  |\n9 |     for i in numbers.iter()\
    \ {\n  |                      ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpiz_813pm.rs:11:43\n   |\n11 |\
    \             \"zero\" => sorted_numbers.push(\"0\"),\n   |                  \
    \                         ^^^ expected `char`, found `&str`\n   |\nhelp: if you\
    \ meant to write a `char` literal, use single quotes\n   |\n11 |             \"\
    zero\" => sorted_numbers.push('0'),\n   |                                    \
    \       ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiz_813pm.rs:12:42\n\
    \   |\n12 |             \"one\" => sorted_numbers.push(\"1\"),\n   |         \
    \                                 ^^^ expected `char`, found `&str`\n   |\nhelp:\
    \ if you meant to write a `char` literal, use single quotes\n   |\n12 |      \
    \       \"one\" => sorted_numbers.push('1'),\n   |                           \
    \               ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiz_813pm.rs:13:42\n\
    \   |\n13 |             \"two\" => sorted_numbers.push(\"2\"),\n   |         \
    \                                 ^^^ expected `char`, found `&str`\n   |\nhelp:\
    \ if you meant to write a `char` literal, use single quotes\n   |\n13 |      \
    \       \"two\" => sorted_numbers.push('2'),\n   |                           \
    \               ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiz_813pm.rs:14:44\n\
    \   |\n14 |             \"three\" => sorted_numbers.push(\"3\"),\n   |       \
    \                                     ^^^ expected `char`, found `&str`\n   |\n\
    help: if you meant to write a `char` literal, use single quotes\n   |\n14 |  \
    \           \"three\" => sorted_numbers.push('3'),\n   |                     \
    \                       ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiz_813pm.rs:15:43\n\
    \   |\n15 |             \"four\" => sorted_numbers.push(\"4\"),\n   |        \
    \                                   ^^^ expected `char`, found `&str`\n   |\n\
    help: if you meant to write a `char` literal, use single quotes\n   |\n15 |  \
    \           \""
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<i32> = numbers.split_whitespace().map(|n| n.parse().unwrap()).collect();\n\
    \    let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n   \
    \ std::sort_copy(numbers.iter().cloned(), numbers.iter().cloned().rev(), |a, b|\
    \ {\n        let a_num = *a;\n        let b_num = *b;\n        let cmp = a_num.cmp(&b_num);\n\
    \        if cmp < 0 {\n            -1\n        } else if cmp > 0 {\n         \
    \   1\n        } else {\n            0\n        }\n    });\n    numbers.clone().into_iter().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_copy` in crate `std`\n --> /tmp/tmp95lg3e_s.rs:9:10\n\
    \  |\n9 |     std::sort_copy(numbers.iter().cloned(), numbers.iter().cloned().rev(),\
    \ |a, b| {\n  |          ^^^^^^^^^ not found in `std`\n\nerror[E0271]: type mismatch\
    \ resolving `<std::vec::IntoIter<i32> as Iterator>::Item == &_`\n    --> /tmp/tmp95lg3e_s.rs:8:43\n\
    \     |\n8    |     let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n\
    \     |                                           ^^^^^^ expected reference, found\
    \ `i32`\n     |\n     = note: expected reference `&_`\n                     found\
    \ type `i32`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<std::vec::IntoIter<i32>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmp95lg3e_s.rs:8:52\n   |\n8  |      \
    \ let mut numbers = numbers.into_iter().cloned().collect::<Vec<_>>();\n   |  \
    \                                                    ^^^^^^^ method cannot be\
    \ called on `Cloned<std::vec::IntoIter<i32>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<i32>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<i32>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<i32>>: Iterator`\n        \
    \   which is required by `&mut Cloned<std::vec::IntoIter<i32>>: Iterator`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpnpxleo_g.rs:7:21\n  |\n7 |     numbers.chars().sort_by(|a,\
    \ b| a.cmp(b)).collect()\n  |                     ^^^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_unstable().collect()\n\
    \        .join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp22_75v64.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_unstable().collect()\n\
    \  |                                ^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return String::new();\n    }\n    let mut string = \"\";\n    for\
    \ number in numbers.split_whitespace() {\n        match number.chars().nth(0)\
    \ {\n            None => return String::new(),\n            Some('0') => string\
    \ = string.to_owned() + &String::from(\"0\".to_owned()),\n            Some('1')\
    \ => string = string.to_owned() + &String::from(\"1\".to_owned()),\n         \
    \   Some('2') => string = string.to_owned() + &String::from(\"2\".to_owned()),\n\
    \            Some('3') => string = string.to_owned() + &String::from(\"3\".to_owned()),\n\
    \            Some('4') => string = string.to_owned() + &String::from(\"4\".to_owned()),\n\
    \            Some('5') => string = string.to_owned() + &String::from(\"5\".to_owned()),\n\
    \            Some('6') => string = string.to_owned() + &String::from(\"6\".to_owned()),\n\
    \            Some('7') => string = string.to_owned() + &String::from(\"7\".to_owned()),\n\
    \            Some('8') => string = string.to_owned() + &String::from(\"8\".to_owned()),\n\
    \            Some('9') => string = string.to_owned() + &String::from(\"9\".to_owned()),\n\
    \            _ => {\n                string = string.to_owned() + &String::from(number);\n\
    \            }\n        }\n    }\n    string\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7jwkgei_.rs:14:35\n   |\n\
    10 |     let mut string = \"\";\n   |                      -- expected due to\
    \ this value\n...\n14 |             Some('0') => string = string.to_owned() +\
    \ &String::from(\"0\".to_owned()),\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                   |\n   |                              \
    \     expected `&str`, found struct `String`\n   |                           \
    \        help: consider borrowing here: `&(string.to_owned() + &String::from(\"\
    0\".to_owned()))`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jwkgei_.rs:15:35\n\
    \   |\n10 |     let mut string = \"\";\n   |                      -- expected\
    \ due to this value\n...\n15 |             Some('1') => string = string.to_owned()\
    \ + &String::from(\"1\".to_owned()),\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                   |\n   |                              \
    \     expected `&str`, found struct `String`\n   |                           \
    \        help: consider borrowing here: `&(string.to_owned() + &String::from(\"\
    1\".to_owned()))`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jwkgei_.rs:16:35\n\
    \   |\n10 |     let mut string = \"\";\n   |                      -- expected\
    \ due to this value\n...\n16 |             Some('2') => string = string.to_owned()\
    \ + &String::from(\"2\".to_owned()),\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                   |\n   |                              \
    \     expected `&str`, found struct `String`\n   |                           \
    \        help: consider borrowing here: `&(string.to_owned() + &String::from(\"\
    2\".to_owned()))`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jwkgei_.rs:17:35\n\
    \   |\n10 |     let mut string = \"\";\n   |                      -- expected\
    \ due to this value\n...\n17 |             Some('3') => string = string.to_owned()\
    \ + &String::from(\"3\".to_owned()),\n   |                                   ^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut buffer\
    \ = String::new();\n    for n in numbers.split(\" \") {\n        let n = n.parse::<u8>().unwrap();\n\
    \        let mut buffer = buffer.clone();\n        buffer.push((n as u8).to_string());\n\
    \    }\n    buffer.clone()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwx969nlp.rs:11:21\n   |\n\
    11 |         buffer.push((n as u8).to_string());\n   |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers_rev(numbers).to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numbers_rev` in this scope\n --> /tmp/tmpyjqa8o9s.rs:7:5\n\
    \  |\n7 |     numbers_rev(numbers).to_string()\n  |     ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n\n    let mut numbers_sorted\
    \ = numbers_arr.clone();\n    numbers_sorted.sort_by(|a, b| {\n        let a_digit\
    \ = match a.chars().nth(0) {\n            Some(x) => x.to_digit(10).unwrap(),\n\
    \            None => 0,\n        };\n        let b_digit = match b.chars().nth(0)\
    \ {\n            Some(x) => x.to_digit(10).unwrap(),\n            None => 0,\n\
    \        };\n        if a_digit > b_digit {\n            1\n        } else {\n\
    \            -1\n        }\n    });\n\n    numbers_arr.iter().fold(String::new(),\
    \ |mut acc, x| {\n        acc.push_str(&x).push_str(\"  \");\n        acc\n  \
    \  })\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpybeb08xa.rs:20:13\n   |\n\
    20 |             1\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpybeb08xa.rs:22:13\n\
    \   |\n22 |             -1\n   |             ^^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0599]: no method named `push_str` found for unit type\
    \ `()` in the current scope\n  --> /tmp/tmpybeb08xa.rs:27:26\n   |\n27 |     \
    \    acc.push_str(&x).push_str(\"  \");\n   |                          ^^^^^^^^\
    \ method not found in `()`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Your code\
    \ here\n    let numbers: Vec<&str> = numbers.split_whitespace().collect();\n \
    \   let numbers_sorted = numbers.sort_by(|a, b| a.cmp(b));\n    let mut result\
    \ = String::new();\n    for number in &numbers_sorted {\n        result += number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&()` is not an iterator\n  --> /tmp/tmp5oftcrly.rs:11:19\n\
    \   |\n11 |     for number in &numbers_sorted {\n   |                   ^^^^^^^^^^^^^^^\
    \ `&()` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `&()`\n   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&()`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = String::from(\"\");\n    let mut numbers_arr = numbers.split_whitespace();\n\
    \    let mut i = 0;\n    while i < numbers_arr.len() {\n        if numbers_arr[i]\
    \ != \"zero\" && numbers_arr[i] != \"one\" && numbers_arr[i] != \"two\" && numbers_arr[i]\
    \ != \"three\" &&\n            numbers_arr[i] != \"four\" && numbers_arr[i] !=\
    \ \"five\" && numbers_arr[i] != \"six\" && numbers_arr[i] != \"seven\" &&\n  \
    \          numbers_arr[i] != \"eight\" && numbers_arr[i] != \"nine\" {\n     \
    \       result.push_str(&numbers_arr[i]);\n            result.push(' ');\n   \
    \     }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp64ny8x5y.rs:10:27\n   |\n10 |     while\
    \ i < numbers_arr.len() {\n   |                           ^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0608]: cannot index into a value of type\
    \ `SplitWhitespace<'_>`\n  --> /tmp/tmp64ny8x5y.rs:11:12\n   |\n11 |         if\
    \ numbers_arr[i] != \"zero\" && numbers_arr[i] != \"one\" && numbers_arr[i] !=\
    \ \"two\" && numbers_arr[i] != \"three\" &&\n   |            ^^^^^^^^^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmp64ny8x5y.rs:11:40\n\
    \   |\n11 |         if numbers_arr[i] != \"zero\" && numbers_arr[i] != \"one\"\
    \ && numbers_arr[i] != \"two\" && numbers_arr[i] != \"three\" &&\n   |       \
    \                                 ^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index\
    \ into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmp64ny8x5y.rs:11:67\n\
    \   |\n11 |         if numbers_arr[i] != \"zero\" && numbers_arr[i] != \"one\"\
    \ && numbers_arr[i] != \"two\" && numbers_arr[i] != \"three\" &&\n   |       \
    \                                                            ^^^^^^^^^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  --> /tmp/tmp64ny8x5y.rs:11:94\n\
    \   |\n11 |         if numbers_arr[i] != \"zero\" && numbers_arr[i] != \"one\"\
    \ && numbers_arr[i] != \"two\" && numbers_arr[i] != \"three\" &&\n   |       \
    \                                                                            \
    \           ^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `SplitWhitespace<'_>`\n  --> /tmp/tmp64ny8x5y.rs:12:13\n   |\n12 |         \
    \    numbers_arr[i] != \"four\" && numbers_arr[i] != \"five\" && numbers_arr[i]\
    \ != \"six\" && numbers_arr[i] != \"seven\" &&\n   |             ^^^^^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  -->\
    \ /tmp/tmp64ny8x5y.rs:12:41\n   |\n12 |             numbers_arr[i] != \"four\"\
    \ && numbers_arr[i] != \"five\" && numbers_arr[i] != \"six\" && numbers_arr[i]\
    \ != \"seven\" &&\n   |                                         ^^^^^^^^^^^^^^\n\
    \nerror[E"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split_whitespace();\n\n    nums.sort_by_key(|x| x.to_owned());\n\n\
    \    nums\n        .iter()\n        .map(|x| x.to_owned())\n        .collect()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpmyskns1s.rs:9:10\n  |\n9 |     nums.sort_by_key(|x|\
    \ x.to_owned());\n  |          ^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `iter` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmpmyskns1s.rs:12:10\n   |\n12 |         .iter()\n\
    \   |          ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .trim()\n        .split_whitespace()\n        .sort_by_key(|x| {\n  \
    \          let y: String = x.parse()?;\n            y.parse::<usize>().unwrap()\n\
    \        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpa8x4m7qi.rs:10:10\n   |\n10 |         .sort_by_key(|x|\
    \ {\n   |          ^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0277]:\
    \ the `?` operator can only be used in a closure that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n  --> /tmp/tmpa8x4m7qi.rs:11:38\n\
    \   |\n10 |           .sort_by_key(|x| {\n   |  ______________________-\n11 |\
    \ |             let y: String = x.parse()?;\n   | |                          \
    \            ^ cannot use the `?` operator in a closure that returns `usize`\n\
    12 | |             y.parse::<usize>().unwrap()\n13 | |         })\n   | |_________-\
    \ this function should return `Result` or `Option` to accept `?`\n   |\n   = help:\
    \ the trait `FromResidual<_>` is not implemented for `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.trim().split(\"\
    \\\\s+\").sort_by(|a, b| a.cmp(b)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp8chj0nhk.rs:7:34\n  |\n7 |     numbers.trim().split(\"\
    \\\\s+\").sort_by(|a, b| a.cmp(b)).collect()\n  |                            \
    \      ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers\
    \ = numbers.split_whitespace();\n    let mut numbers_sorted = Vec::new();\n  \
    \  let mut number = String::new();\n    loop {\n        for n in numbers {\n \
    \           if n.parse().is_err() {\n                break;\n            }\n \
    \           number.push_str(&n);\n            if n == numbers[numbers.len() -\
    \ 1] {\n                numbers_sorted.push(number);\n                break;\n\
    \            }\n            number.clear();\n        }\n        if number.is_empty()\
    \ {\n            break;\n        }\n    }\n    numbers_sorted\n        .into_iter()\n\
    \        .collect::<Vec<_>>()\n        .sort_unstable()\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpjo_ngon2.rs:16:37\n   |\n16 |          \
    \   if n == numbers[numbers.len() - 1] {\n   |                               \
    \      ^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]: `()` is\
    \ not an iterator\n  --> /tmp/tmpjo_ngon2.rs:30:10\n   |\n30 |         .collect::<String>()\n\
    \   |          ^^^^^^^ `()` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `(): Iterator`\n           which\
    \ is required by `&mut (): Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n        .into_iter()\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp6m1nawfb.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    strings.sort_by_key(|&number|\
    \ match number.to_digit(10) {\n        Some(digit) => match digit.to_string()\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        },\n        _ => unreachable!(),\n    })\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `strings` in this scope\n --> /tmp/tmpa_83howm.rs:7:5\n\
    \  |\n7 |     strings.sort_by_key(|&number| match number.to_digit(10) {\n  | \
    \    ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    let mut numbers = numbers.split_whitespace();\n\
    \    let mut numbers = numbers.collect::<Vec<&str>>();\n    numbers.sort();\n\
    \    let mut numbers = numbers.collect::<Vec<String>>();\n    numbers = numbers.into_iter().collect::<Vec<String>>();\n\
    \    let numbers = numbers[..numbers.len() - 1];\n    numbers.insert(0, \" \"\
    );\n    numbers.insert(0, \" \");\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `collect` exists for struct `Vec<&str>`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp9xrko7y_.rs:11:31\n    |\n11\
    \  |       let mut numbers = numbers.collect::<Vec<String>>();\n    |        \
    \                         ^^^^^^^\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<&str>: Iterator`\n            which is\
    \ required by `&mut Vec<&str>: Iterator`\n            `[&str]: Iterator`\n   \
    \         which is required by `&mut [&str]: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut digits\
    \ = numbers.chars();\n    let mut buffer = String::new();\n    let mut index =\
    \ 0;\n    let mut num_zeros = 1;\n    let mut num_ones = 0;\n    let mut num_twos\
    \ = 0;\n    while index < digits.len() {\n        let c = digits[index].unwrap();\n\
    \        let is_zero = num_zeros > 0;\n        let is_one = num_ones > 0;\n  \
    \      let is_two = num_twos > 0;\n        if c == ' ' {\n            num_zeros\
    \ += is_zero || num_ones == 0 || num_twos == 0;\n            num_ones += is_one\
    \ || num_zeros == 0 || num_twos == 0;\n            num_twos += is_two || num_zeros\
    \ == 0 || num_ones == 0;\n        } else if c >= '0' && c <= '9' {\n         \
    \   if num_zeros == 0 {\n                buffer.push_str(&format!(\"{}\", c -\
    \ '0'));\n                num_zeros += 1;\n            } else if num_ones == 0\
    \ {\n                buffer.push_str(&format!(\"{} {}\", c - '0', num_zeros));\n\
    \                num_ones += 1;\n            } else if num_twos == 0 {\n     \
    \           buffer.push_str(&format!(\"{} {} {}\", c - '0', num_zeros, num_ones));\n\
    \                num_twos += 1;\n            } else {\n                buffer.push_str(&format!(\"\
    {} {} {} {}\", c - '0', num_zeros, num_ones, num_twos));\n                num_zeros\
    \ += 1;\n                num_ones += 1;\n                num_twos += 1;\n    \
    \        }\n        } else {\n            if num_zeros > 0 {\n               \
    \ buffer.push_str(&format!(\"{}\", num_zeros));\n                num_zeros = 0;\n\
    \            }\n            if num_ones > 0 {\n                buffer.push_str(&format!(\"\
    {} {}\", num_ones, num_zeros));\n                num_ones = 0;\n            }\n\
    \            if num_twos > 0 {\n                buffer.push_str(&format!(\"{}\
    \ {} {}\", num_twos, num_zeros, num_ones));\n                num_twos = 0;\n \
    \           }\n            buffer.push_str(&format!(\"{}\", c));\n        }\n\
    \        index += 1\n    }\n    buffer\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmprqr611ek.rs:13:26\n   |\n13 |     while index < digits.len()\
    \ {\n   |                          ^^^ method not found in `Chars<'_>`\n\nerror[E0608]:\
    \ cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmprqr611ek.rs:14:17\n\
    \   |\n14 |         let c = digits[index].unwrap();\n   |                 ^^^^^^^^^^^^^\n\
    \nerror[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmprqr611ek.rs:19:23\n\
    \   |\n19 |             num_zeros += is_zero || num_ones == 0 || num_twos == 0;\n\
    \   |                       ^^ no implementation for `{integer} += bool`\n   |\n\
    \   = help: the trait `AddAssign<bool>` is not implemented for `{integer}`\n \
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \        <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n         \
    \    <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmprqr611ek.rs:20:22\n\
    \   |\n20 |             num_ones += is_one || num_zeros == 0 || num_twos == 0;\n\
    \   |                      ^^ no implementation for `{integer} += bool`\n   |\n\
    \   = help: the trait `AddAssign<bool>` is not implemented for `{integer}`\n \
    \  = help: the following other types implement trait `AddAssign<Rhs>`:\n     \
    \        <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n         \
    \    <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128\
    \ as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as\
    \ AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmprqr611ek.rs:21:22\n\
    \   |\n21 |             num_twos += is_two || num_zeros == 0 || num_ones == 0;\n\
    \   |                      ^^ no implementation for `{integer} += bool`\n   |\n\
    \   = help: the trai"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut new_numbers\
    \ = numbers;\n    new_numbers.split_whitespace().sort_by(|a, b| a.cmp(b)).collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpv3clqi33.rs:8:36\n  |\n8 |     new_numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<Vec<_>>().join(\" \")\n  |                          \
    \          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .map(|item| match item.parse::<u32>() {\n\
    \            Ok(num) => num.to_string(),\n            Err(_) => item,\n      \
    \  })\n        .sort_by(|a, b| a.cmp(b))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpp1yuiec6.rs:11:23\n\
    \   |\n9  |           .map(|item| match item.parse::<u32>() {\n   |  _____________________-\n\
    10 | |             Ok(num) => num.to_string(),\n   | |                       \
    \ --------------- this is found to be of type `String`\n11 | |             Err(_)\
    \ => item,\n   | |                       ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   | |                       |\n   | |                     \
    \  expected struct `String`, found `&str`\n12 | |         })\n   | |_________-\
    \ `match` arms have incompatible types\n\nerror[E0599]: no method named `sort_by`\
    \ found for struct `Map` in the current scope\n  --> /tmp/tmpp1yuiec6.rs:13:10\n\
    \   |\n13 |         .sort_by(|a, b| a.cmp(b))\n   |          ^^^^^^^ method not\
    \ found in `Map<SplitWhitespace<'_>, _>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split(' ')\n        .iter()\n        .cloned()\n        .sort_by(|a,\
    \ b| a.cmp(b))\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpcscr8fiz.rs:9:10\n  |\n9 |         .iter()\n\
    \  |          ^^^^ method not found in `std::str::Split<'_, char>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut list\
    \ = Vec::new();\n    for num in numbers.split(' ').collect::<Vec<_>>() {\n   \
    \     list.push((num.parse::<usize>(), num.clone()));\n    }\n\n    list.sort_by_key(|(v,\
    \ &w)| {\n        *v < *w\n    });\n\n    let mut result = String::new();\n  \
    \  for v in list.iter() {\n        result.append(&*v).unwrap();\n    }\n\n   \
    \ result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp1x4u1813.rs:12:28\n   |\n12 |     list.sort_by_key(|(v,\
    \ &w)| {\n   |                            ^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n   = note: all\
    \ local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\n\nerror[E0614]: type `str` cannot be dereferenced\n\
    \  --> /tmp/tmp1x4u1813.rs:13:14\n   |\n13 |         *v < *w\n   |           \
    \   ^^\n\nerror[E0599]: no method named `append` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp1x4u1813.rs:18:16\n   |\n18 |         result.append(&*v).unwrap();\n\
    \   |                ^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .sort_by(|a, b| a.parse::<usize>().cmp(b.parse::<usize>()))\n\
    \        .collect()\n        .join(\"\\n\")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpekl64s39.rs:9:10\n  |\n9 |         .sort_by(|a,\
    \ b| a.parse::<usize>().cmp(b.parse::<usize>()))\n  |          ^^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.to_lowercase()\n\
    \        .split_whitespace()\n        .sorted()\n        .collect()\n        .join::<String>(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp6l98dupp.rs:9:10\n  |\n9 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers[..]\n\
    \        .iter()\n        .map(|x| x.to_digit(10))\n        .sort_by(|a, b| b.cmp(a))\n\
    \        .map(|x| x.to_string())\n        .collect::<String>(\"\")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `str` in the current\
    \ scope\n --> /tmp/tmpiu5cjvd2.rs:8:10\n  |\n8 |         .iter()\n  |        \
    \  ^^^^ method not found in `str`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n    let mut numbers = numbers.iter().cloned().enumerate().cloned();\n\
    \    let mut numbers = numbers.values();\n    numbers.sort_by_key(|&(i, &x)| x.parse().unwrap());\n\
    \    String::from_iter(numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Enumerate<Cloned<std::slice::Iter<'_,\
    \ &str>>> as Iterator>::Item == &_`\n    --> /tmp/tmpfvsjrutq.rs:8:59\n     |\n\
    8    |     let mut numbers = numbers.iter().cloned().enumerate().cloned();\n \
    \    |                                                           ^^^^^^ expected\
    \ reference, found tuple\n     |\n     = note: expected reference `&_`\n     \
    \               found tuple `(usize, _)`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: no method named `values` found for struct `Cloned` in the current\
    \ scope\n --> /tmp/tmpfvsjrutq.rs:9:31\n  |\n9 |     let mut numbers = numbers.values();\n\
    \  |                               ^^^^^^ method not found in `Cloned<Enumerate<Cloned<std::slice::Iter<'_,\
    \ &str>>>>`\n\nerror[E0599]: no function or associated item named `from_iter`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpfvsjrutq.rs:11:13\n\
    \   |\n11 |     String::from_iter(numbers)\n   |             ^^^^^^^^^ function\
    \ or associated item not found in `String`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n\
    \   |\nhelp: there is an associated function with a similar name\n   |\n11 | \
    \    String::from_utf8(numbers)\n   |             ~~~~~~~~~\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_string\
    \ = \"\";\n    let mut numbers_string_array = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \n    for number in numbers_string_array {\n        if numbers_string.len() >\
    \ 0 {\n            if numbers_string[numbers_string.len() - 1] != number.to_ascii_lowercase()\
    \ {\n                numbers_string += \" \";\n            }\n        }\n    \
    \    numbers_string += number.to_ascii_lowercase();\n    }\n\n    numbers_string.to_ascii_lowercase()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `str` cannot be indexed by `usize`\n  --> /tmp/tmpq881m908.rs:12:16\n\
    \   |\n12 |             if numbers_string[numbers_string.len() - 1] != number.to_ascii_lowercase()\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string indices\
    \ are ranges of `usize`\n   |\n   = help: the trait `SliceIndex<str>` is not implemented\
    \ for `usize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<usize>`\
    \ for `str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&str`\n  --> /tmp/tmpq881m908.rs:13:17\n   |\n13 |                \
    \ numbers_string += \" \";\n   |                 --------------^^^^^^^\n   | \
    \                |\n   |                 cannot use `+=` on type `&str`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpq881m908.rs:16:9\n\
    \   |\n16 |         numbers_string += number.to_ascii_lowercase();\n   |     \
    \    --------------^--^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |           \
    \   |\n   |         |              `+` cannot be used to concatenate a `&str`\
    \ with a `String`\n   |         cannot use `+=` on type `&str`\n   |\n   = note:\
    \ string concatenation requires an owned `String` on the left\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0368.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.len()\
    \ == 0 {\n        return numbers;\n    }\n    let mut numbers = String::from(numbers);\n\
    \    let mut numbers_iter = numbers.chars().enumerate().map(|(i, &c)| {\n    \
    \    if c.is_digit(10) {\n            c.to_string()\n        } else {\n      \
    \      match i {\n                0 => c.to_string(),\n                1 => c.to_string(),\n\
    \                2 => c.to_string(),\n                3 => c.to_string(),\n  \
    \              4 => c.to_string(),\n                5 => c.to_string(),\n    \
    \            6 => c.to_string(),\n                7 => c.to_string(),\n      \
    \          8 => c.to_string(),\n                9 => c.to_string(),\n        \
    \        10 => c.to_string(),\n                11 => c.to_string(),\n        \
    \        12 => c.to_string(),\n                13 => c.to_string(),\n        \
    \        14 => c.to_string(),\n                15 => c.to_string(),\n        \
    \        16 => c.to_string(),\n                17 => c.to_string(),\n        \
    \        18 => c.to_string(),\n                19 => c.to_string(),\n        \
    \        _ => c.to_string(),\n            }\n        }\n    });\n    if numbers_iter.any(|&(_,\
    \ i, _)| i != 0) {\n        numbers_iter.sort_by_key(|&(_, i, _)| i);\n    }\n\
    \    numbers_iter.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxzvous2c.rs:11:65\n   |\n\
    11 |     let mut numbers_iter = numbers.chars().enumerate().map(|(i, &c)| {\n\
    \   |                                                                 ^^- expected\
    \ due to this\n   |                                                          \
    \       |\n   |                                                              \
    \   expected `char`, found reference\n   |                                   \
    \                              help: you can probably remove the explicit borrow:\
    \ `c`\n   |\n   = note:   expected type `char`\n           found reference `&_`\n\
    \nerror[E0599]: no method named `sort_by_key` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpxzvous2c.rs:41:22\n   |\n41 |         numbers_iter.sort_by_key(|&(_,\
    \ i, _)| i);\n   |                      ^^^^^^^^^^^ method not found in `Map<Enumerate<Chars<'_>>,\
    \ _>`\n\nerror[E0599]: no method named `join` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpxzvous2c.rs:43:18\n   |\n43 |     numbers_iter.join(\"\
    \ \")\n   |                  ^^^^ method not found in `Map<Enumerate<Chars<'_>>,\
    \ _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n    let mut numbers_vec: Vec<i64> = Vec::new();\n\
    \    for num in numbers {\n        numbers_vec.push(num.parse().unwrap());\n \
    \   }\n    let mut sorted_numbers = Vec::new();\n    sorted_numbers.reserve(numbers_vec.len());\n\
    \    sorted_numbers.extend(numbers_vec.iter().cloned().sorted());\n    String::from_vec(sorted_numbers).unwrap()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpv_dnypub.rs:14:55\n   |\n14 |     sorted_numbers.extend(numbers_vec.iter().cloned().sorted());\n\
    \   |                                                       ^^^^^^ method not\
    \ found in `Cloned<std::slice::Iter<'_, i64>>`\n\nerror[E0599]: no function or\
    \ associated item named `from_vec` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpv_dnypub.rs:15:13\n   |\n15 |     String::from_vec(sorted_numbers).unwrap()\n\
    \   |             ^^^^^^^^ function or associated item not found in `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut output\
    \ = String::new();\n    let mut numbers_arr = String::new();\n    numbers_arr.push_str(numbers);\n\
    \n    for x in numbers_arr.chars() {\n        match x {\n            '0' => output.push_str(\"\
    zero\"),\n            '1' => output.push_str(\"one\"),\n            '2' => output.push_str(\"\
    two\"),\n            '3' => output.push_str(\"three\"),\n            '4' => output.push_str(\"\
    four\"),\n            '5' => output.push_str(\"five\"),\n            '6' => output.push_str(\"\
    six\"),\n            '7' => output.push_str(\"seven\"),\n            '8' => output.push_str(\"\
    eight\"),\n            '9' => output.push_str(\"nine\"),\n            _ => {}\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgd67itoq.rs:9:26\n  |\n9 |\
    \     numbers_arr.push_str(numbers);\n  |                          ^^^^^^^\n \
    \ |                          |\n  |                          expected `&str`,\
    \ found struct `String`\n  |                          help: consider borrowing\
    \ here: `&numbers`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut map\
    \ = HashMap::new();\n    for (i, digit) in numbers.chars().enumerate() {\n   \
    \     map.entry(digit).or_insert(i).unwrap().insert(digit.to_string());\n    }\n\
    \    let mut new_numbers = String::from(\"\");\n    for (i, digit) in map.iter().enumerate()\
    \ {\n        new_numbers.extend(digit.clone());\n        for d in &digit.clone().clone().rev()\
    \ {\n            new_numbers.push_str(d);\n        }\n        new_numbers.push_str(\"\
    \ \");\n    }\n    new_numbers[new_numbers.len() - 1]\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpfd70ou4b.rs:7:19\n  |\n7 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpfd70ou4b.rs:19:5\n\
    \   |\n19 |     new_numbers[new_numbers.len() - 1]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return String::from(\"zero\");\n    }\n\n    if numbers.starts_with(\"\
    zero\") {\n        return String::from(\"zero\");\n    }\n\n    let mut numbers_vec:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n\n    if numbers_vec.len()\
    \ < 2 {\n        return String::from(\"zero\");\n    }\n\n    let mut numbers_vec\
    \ =\n        numbers_vec\n            .iter()\n            .cloned()\n       \
    \     .map(|n| n.to_lowercase())\n            .collect();\n\n    // reverse it\
    \ so smallest to largest\n    numbers_vec.reverse();\n\n    numbers_vec\n    \
    \    .iter()\n        .cloned()\n        .fold(String::from(\"zero\"), |mut accum,\
    \ next| {\n            accum.append(next.to_string());\n\n            if accum\
    \ == \"one\" {\n                accum.append(\"two\");\n            }\n\n    \
    \        if accum == \"two\" {\n                accum.append(\"three\");\n   \
    \         }\n\n            if accum == \"three\" {\n                accum.append(\"\
    four\");\n            }\n\n            if accum == \"four\" {\n              \
    \  accum.append(\"five\");\n            }\n\n            if accum == \"five\"\
    \ {\n                accum.append(\"six\");\n            }\n\n            if accum\
    \ == \"six\" {\n                accum.append(\"seven\");\n            }\n\n  \
    \          if accum == \"seven\" {\n                accum.append(\"eight\");\n\
    \            }\n\n            if accum == \"eight\" {\n                accum.append(\"\
    nine\");\n            }\n\n            if accum == \"nine\" {\n              \
    \  accum.append(\"zero\");\n            }\n\n            accum\n        })\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp33sw6sv2.rs:29:5\n\
    \   |\n21 |     let mut numbers_vec =\n   |         --------------- consider giving\
    \ `numbers_vec` a type\n...\n29 |     numbers_vec.reverse();\n   |     ^^^^^^^^^^^\
    \ cannot infer type\n   |\n   = note: type must be known at this point\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut string_list\
    \ = Vec::new();\n    let mut numbers_array = numbers.split_whitespace().collect::<Vec<String>>();\n\
    \    let mut index = 0;\n    loop {\n        if index >= numbers_array.len() {\n\
    \            break;\n        }\n        let number = numbers_array[index];\n \
    \       if number == \"zero\" {\n            string_list.push(\"zero\");\n   \
    \     } else if number == \"one\" {\n            string_list.push(\"one\");\n\
    \        } else if number == \"two\" {\n            string_list.push(\"two\");\n\
    \        } else if number == \"three\" {\n            string_list.push(\"three\"\
    );\n        } else if number == \"four\" {\n            string_list.push(\"four\"\
    );\n        } else if number == \"five\" {\n            string_list.push(\"five\"\
    );\n        } else if number == \"six\" {\n            string_list.push(\"six\"\
    );\n        } else if number == \"seven\" {\n            string_list.push(\"seven\"\
    );\n        } else if number == \"eight\" {\n            string_list.push(\"eight\"\
    );\n        } else if number == \"nine\" {\n            string_list.push(\"nine\"\
    );\n        }\n        index += 1;\n    }\n    let mut index = 0;\n    let mut\
    \ numbers_array = numbers.split_whitespace().collect::<Vec<String>>();\n    loop\
    \ {\n        if index >= numbers_array.len() {\n            break;\n        }\n\
    \        let number = numbers_array[index];\n        let mut new_string = numbers_list.clone();\n\
    \        new_string.sort();\n        if number == \"zero\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"one\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"two\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"three\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"four\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"five\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"six\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"seven\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"eight\" {\n            string_list.push(new_string);\n\
    \        } else if number == \"nine\" {\n            string_list.push(new_string);\n\
    \        }\n        index += 1;\n    }\n    let mut string_list = string_list.iter().cloned().collect::<Vec<_>>();\n\
    \    string_list.\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpdf_fp2k_.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0425]: cannot find value `numbers_list` in this scope\n\
    \  --> /tmp/tmpdf_fp2k_.rs:45:30\n   |\n45 |         let mut new_string = numbers_list.clone();\n\
    \   |                              ^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&str`\n    --> /tmp/tmpdf_fp2k_.rs:8:56\n     |\n8    |     let mut\
    \ numbers_array = numbers.split_whitespace().collect::<Vec<String>>();\n     |\
    \                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: a value of type `Vec<String>` cannot\
    \ be built from an iterator over elements of type `&str`\n    --> /tmp/tmpdf_fp2k_.rs:39:56\n\
    \     |\n39   |     let mut numbers_array = numbers.split_whitespace().collect::<Vec<String>>();\n\
    \     |                                                        ^^^^^^^ value of\
    \ type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n \
    \    |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdf_fp2k_.rs:71:5\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                      ------ expected `String` because of return type\n...\n\
    71 |     string_list.\n   |     ^^^^^^^^^^^ expected struct `String`, found struct\
    \ `Vec`\n   |\n   = note: expected struct `String`\n              found struct\
    \ `Vec<&str>`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers_helper(numbers,\
    \ 0)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numbers_helper` in this scope\n -->\
    \ /tmp/tmpdonhl_4k.rs:7:5\n  |\n7 |     numbers_helper(numbers, 0)\n  |     ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n    numbers.sort_by(|a, b| a.cmp(b));\n    String::from_utf8_lossy(&numbers)\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpwu7jz8uu.rs:8:13\n  |\n8 |     numbers.sort_by(|a,\
    \ b| a.cmp(b));\n  |             ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpwu7jz8uu.rs:9:29\n  |\n9 |    \
    \ String::from_utf8_lossy(&numbers)\n  |                             ^^^^^^^^\
    \ expected slice `[u8]`, found struct `SplitWhitespace`\n  |\n  = note: expected\
    \ reference `&[u8]`\n             found reference `&SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpwu7jz8uu.rs:9:5\n  |\n6 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |                                     ------ expected\
    \ `String` because of return type\n...\n9 |     String::from_utf8_lossy(&numbers)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n  |     |\n  |     expected struct `String`, found enum `Cow`\n\
    \  |\n  = note: expected struct `String`\n               found enum `Cow<'_, str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|x,\
    \ y| x.cmp(y)).collect()\n        .iter().map(String::from).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmps7hfn8y3.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|x,\
    \ y| x.cmp(y)).collect()\n  |                                ^^^^^^^ method not\
    \ found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut number\
    \ = numbers.clone();\n    let mut numbers = Vec::new();\n    let mut next_number\
    \ = 0;\n    while number.len() > 0 {\n        let digit = number.pop().unwrap();\n\
    \        if digit == \"zero\" {\n            numbers.insert(0, next_number);\n\
    \            next_number = 1;\n        } else if digit == \"one\" {\n        \
    \    numbers.insert(0, next_number);\n            next_number = 2;\n        }\
    \ else if digit == \"two\" {\n            numbers.insert(0, next_number);\n  \
    \          next_number = 3;\n        } else if digit == \"three\" {\n        \
    \    numbers.insert(0, next_number);\n            next_number = 4;\n        }\
    \ else if digit == \"four\" {\n            numbers.insert(0, next_number);\n \
    \           next_number = 5;\n        } else if digit == \"five\" {\n        \
    \    numbers.insert(0, next_number);\n            next_number = 6;\n        }\
    \ else if digit == \"six\" {\n            numbers.insert(0, next_number);\n  \
    \          next_number = 7;\n        } else if digit == \"seven\" {\n        \
    \    numbers.insert(0, next_number);\n            next_number = 8;\n        }\
    \ else if digit == \"eight\" {\n            numbers.insert(0, next_number);\n\
    \            next_number = 9;\n        } else if digit == \"nine\" {\n       \
    \     numbers.insert(0, next_number);\n            next_number = 10;\n       \
    \ } else {\n            panic!(\"Invalid input for sort_numbers().\");\n     \
    \   }\n    }\n    numbers.into_iter().map(String::from).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7i5d6t5a.rs:12:21\n   |\n\
    12 |         if digit == \"zero\" {\n   |                     ^^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7i5d6t5a.rs:15:28\n\
    \   |\n15 |         } else if digit == \"one\" {\n   |                       \
    \     ^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7i5d6t5a.rs:18:28\n   |\n18 |         } else if digit == \"two\"\
    \ {\n   |                            ^^^^^ expected `char`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7i5d6t5a.rs:21:28\n   |\n21 |         } else\
    \ if digit == \"three\" {\n   |                            ^^^^^^^ expected `char`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7i5d6t5a.rs:24:28\n\
    \   |\n24 |         } else if digit == \"four\" {\n   |                      \
    \      ^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7i5d6t5a.rs:27:28\n   |\n27 |         } else if digit == \"five\"\
    \ {\n   |                            ^^^^^^ expected `char`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7i5d6t5a.rs:30:28\n   |\n30 |  \
    \       } else if digit == \"six\" {\n   |                            ^^^^^ expected\
    \ `char`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7i5d6t5a.rs:33:28\n\
    \   |\n33 |         } else if digit == \"seven\" {\n   |                     \
    \       ^^^^^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7i5d6t5a.rs:36:28\n   |\n36 |         } else if digit == \"eight\"\
    \ {\n   |                            ^^^^^^^ expected `char`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7i5d6t5a.rs:39:28\n   |\n39 |  \
    \       } else if digit == \"nine\" {\n   |                            ^^^^^^\
    \ expected `char`, found `&str`\n\nerror[E0277]: the trait bound `String: From<{integer}>`\
    \ is not satisfied\n  --> /tmp/tmp7i5d6t5a.rs:46:5\n   |\n46 |     numbers.into_iter().map(String::from).collect::<String>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<{integer}>` is\
    \ not implemented fo"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.to_ascii_lowercase().chars().filter_map(|x|\
    \ match x.to_digit(10) {\n        Some(d) => Some(d + x),\n        None => None,\n\
    \    })\n    .collect::<Vec<_>>()\n    .sort_unstable()\n    .map(|x| x.to_string())\n\
    \    .collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `char` to `u32`\n --> /tmp/tmpn9cmcrap.rs:8:27\n\
    \  |\n8 |         Some(d) => Some(d + x),\n  |                           ^ no\
    \ implementation for `u32 + char`\n  |\n  = help: the trait `Add<char>` is not\
    \ implemented for `u32`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpn9cmcrap.rs:13:6\n   |\n\
    13 |     .map(|x| x.to_string())\n   |      ^^^ `()` is not an iterator\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split(\"\
    \ \").sort_by(|a, b| a.parse::<u64>().unwrap().cmp(&b.parse::<u64>().unwrap()))\n\
    \        .collect()\n        .join().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpjndbfsgi.rs:7:24\n  |\n7 |     numbers.split(\"\
    \ \").sort_by(|a, b| a.parse::<u64>().unwrap().cmp(&b.parse::<u64>().unwrap()))\n\
    \  |                        ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // \"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"\n    let mut digits: Vec<i32> = numbers.chars().map(|c| match c {\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        _ => 0,\n    }).collect();\n  \
    \  digits.sort_unstable();\n    String::from_utf8(digits.iter().map(|i| i.to_ascii_lowercase()).collect()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_ascii_lowercase` found for reference\
    \ `&i32` in the current scope\n  --> /tmp/tmpj646bkmw.rs:22:47\n   |\n22 |   \
    \  String::from_utf8(digits.iter().map(|i| i.to_ascii_lowercase()).collect()).unwrap()\n\
    \   |                                               ^^^^^^^^^^^^^^^^^^ method\
    \ not found in `&i32`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by_key(|&x|\
    \ x.parse::<u32>().unwrap()).collect()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmptacip3uj.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by_key(|&x|\
    \ x.parse::<u32>().unwrap()).collect()\n  |                                ^^^^^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_sorted\
    \ = numbers.into_owned();\n    numbers_sorted.sort_by(|a, b| a.cmp(b));\n    numbers_sorted\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_owned` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpgehjmvl4.rs:7:34\n  |\n7 |     let numbers_sorted\
    \ = numbers.into_owned();\n  |                                  ^^^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.to_ascii_lowercase()\n\
    \        .split_whitespace()\n        .sort_by(|a, b| a.cmp(b))\n        .collect()\n\
    \        .to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpp4q95jzw.rs:9:10\n  |\n9 |         .sort_by(|a,\
    \ b| a.cmp(b))\n  |          ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut list\
    \ = numbers.chars().collect::<Vec<_>>();\n    list.sort_by(|a, b| {\n        match\
    \ a.to_digit(10).unwrap() as usize\n            >> b.to_digit(10).unwrap() as\
    \ usize {\n            0 => a.to_digit(10).unwrap() as usize,\n            x =>\
    \ b.to_digit(10).unwrap() as usize,\n        }\n    });\n\n    list\n        .iter()\n\
    \        .map(|c| c.to_digit(10).unwrap() as u8)\n        .collect::<String>()\n\
    \        .to_owned()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpne5obawo.rs:11:18\n   |\n\
    11 |             0 => a.to_digit(10).unwrap() as usize,\n   |                \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `usize`\n\nerror[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `u8`\n    --> /tmp/tmpne5obawo.rs:19:10\n     |\n19  \
    \ |         .collect::<String>()\n     |          ^^^^^^^ value of type `String`\
    \ cannot be built from `std::iter::Iterator<Item=u8>`\n     |\n     = help: the\
    \ trait `FromIterator<u8>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        String::from(\"\")\n    } else {\n        let numbers = numbers.split_whitespace();\n\
    \        let numbers = &numbers[..numbers.len()];\n        sort_numbers_impl(numbers,\
    \ numbers, numbers, numbers, numbers, numbers, numbers, numbers, numbers)\n  \
    \  }\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_numbers_impl` in this scope\n\
    \  --> /tmp/tmpf2_incwr.rs:12:9\n   |\n12 |         sort_numbers_impl(numbers,\
    \ numbers, numbers, numbers, numbers, numbers, numbers, numbers, numbers)\n  \
    \ |         ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `len` found for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmpf2_incwr.rs:11:42\n\
    \   |\n11 |         let numbers = &numbers[..numbers.len()];\n   |           \
    \                               ^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  -->\
    \ /tmp/tmpf2_incwr.rs:11:24\n   |\n11 |         let numbers = &numbers[..numbers.len()];\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .map(|s| s.parse::<i32>().unwrap())\n  \
    \      .sort_by(|a, b| a.cmp(b))\n        .collect()\n        .to_string()\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpwei6c8bq.rs:10:10\n   |\n10 |         .sort_by(|a, b| a.cmp(b))\n\
    \   |          ^^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmpwei6c8bq.rs:9:14:\
    \ 9:43]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|&num1,\
    \ &num2| num1.cmp(num2)).join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmp4ws70qd7.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|&num1,\
    \ &num2| num1.cmp(num2)).join(\" \")\n  |                                ^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_string();\n    numbers.push_str(\" \");\n    let mut numbers =\
    \ numbers.split_whitespace();\n\n    numbers.sort_by(|a, b| a.cmp(b));\n\n   \
    \ String::from(numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp8_uf82s6.rs:11:13\n   |\n11 |     numbers.sort_by(|a,\
    \ b| a.cmp(b));\n   |             ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0277]: the trait bound `String: From<SplitWhitespace<'_>>` is not satisfied\n\
    \  --> /tmp/tmp8_uf82s6.rs:13:5\n   |\n13 |     String::from(numbers)\n   |  \
    \   ^^^^^^^^^^^^ the trait `From<SplitWhitespace<'_>>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return numbers;\n    }\n\n    // Split out each number\n    let mut\
    \ numbers_vec = numbers.split_whitespace();\n\n    // Sort it\n    numbers_vec.sort_by_key(|x|\
    \ x.parse().unwrap());\n\n    // Join them back together\n    numbers_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpsawi4py3.rs:15:17\n   |\n15 |     numbers_vec.sort_by_key(|x|\
    \ x.parse().unwrap());\n   |                 ^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmpsawi4py3.rs:18:17\n   |\n18 |     numbers_vec.join(\"\
    \ \")\n   |                 ^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|x,\
    \ y| {\n        match x.to_owned().parse() {\n            Ok(n) => n.to_owned(),\n\
    \            Err(_) => return Ordering::Less,\n        }\n        match y.to_owned().parse()\
    \ {\n            Ok(n) => n.to_owned(),\n            Err(_) => return Ordering::Less,\n\
    \        }\n    }).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpukcbyary.rs:10:30\n   |\n10 |             Err(_) => return Ordering::Less,\n\
    \   |                              ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpukcbyary.rs:14:30\n\
    \   |\n14 |             Err(_) => return Ordering::Less,\n   |               \
    \               ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]: no\
    \ method named `sort_by` found for struct `SplitWhitespace` in the current scope\n\
    \ --> /tmp/tmpukcbyary.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|x,\
    \ y| {\n  |                                ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_string\
    \ = numbers;\n    let mut numbers_string_list = numbers_string.splitn(2, ' ').collect::<Vec<_>>();\n\
    \    let mut numbers_string_list: Vec<_> = numbers_string_list.iter().cloned().collect();\n\
    \    let mut sorted_numbers = Vec::<String>::new();\n    let mut number_string:\
    \ &str = numbers_string_list.pop();\n    let mut counter = 0;\n    let mut current_number:\
    \ String;\n\n    // Sorts list of numbers in ascending order\n    while let Some(number_string)\
    \ = numbers_string_list.pop() {\n        counter += 1;\n        match number_string.as_str()\
    \ {\n            \"one\" => sorted_numbers.push(number_string),\n            \"\
    two\" => sorted_numbers.push(number_string),\n            \"three\" => sorted_numbers.push(number_string),\n\
    \            \"four\" => sorted_numbers.push(number_string),\n            \"five\"\
    \ => sorted_numbers.push(number_string),\n            \"six\" => sorted_numbers.push(number_string),\n\
    \            \"seven\" => sorted_numbers.push(number_string),\n            \"\
    eight\" => sorted_numbers.push(number_string),\n            \"nine\" => sorted_numbers.push(number_string),\n\
    \            _ => {\n                // Add number to list of sorted numbers if\
    \ it is < current number then remove it\n                if counter < current_number.as_str().parse::<usize>().unwrap()\
    \ {\n                    sorted_numbers.push(number_string);\n               \
    \ }\n                current_number = number_string;\n            }\n        }\n\
    \    }\n    sorted_numbers.drain(..).collect::<String>()\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphhxttff6.rs:11:35\n   |\n\
    11 |     let mut number_string: &str = numbers_string_list.pop();\n   |      \
    \                      ----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ enum `Option`\n   |                            |\n   |                     \
    \       expected due to this\n   |\n   = note: expected reference `&str`\n   \
    \                found enum `Option<&str>`\n\nerror[E0599]: no method named `as_str`\
    \ found for reference `&str` in the current scope\n  --> /tmp/tmphhxttff6.rs:18:29\n\
    \   |\n18 |         match number_string.as_str() {\n   |                     \
    \       -^^^^^^-- help: remove this method call\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphhxttff6.rs:19:42\n   |\n19 |             \"one\" => sorted_numbers.push(number_string),\n\
    \   |                                          ^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                                  \
    \        |\n   |                                          expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphhxttff6.rs:20:42\n\
    \   |\n20 |             \"two\" => sorted_numbers.push(number_string),\n   | \
    \                                         ^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                          |\n  \
    \ |                                          expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphhxttff6.rs:21:44\n   |\n21 |\
    \             \"three\" => sorted_numbers.push(number_string),\n   |         \
    \                                   ^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                            |\n\
    \   |                                            expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphhxttff6.rs:22:43\n\
    \   |\n22 |             \"four\" => sorted_numbers.push(number_string),\n   |\
    \                                           ^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |        "
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_copy\
    \ = numbers;\n    for num in numbers_copy.chars() {\n        if num > 'n' || num\
    \ < '0' {\n            numbers_copy = numbers_copy.to_string();\n        }\n \
    \   }\n    let mut numbers_copy = numbers_copy.to_string();\n    let mut current_digit\
    \ = 'n';\n    let mut number_to_sort: String;\n    for num in numbers_copy.chars()\
    \ {\n        if num > '9' || num < '0' {\n            numbers_copy = numbers_copy.to_string();\n\
    \        }\n        number_to_sort = String::from(current_digit + ' ' + num);\n\
    \        current_digit = num;\n    }\n    number_to_sort\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `char` to `char`\n  --> /tmp/tmp4k5z4raw.rs:20:53\n\
    \   |\n20 |         number_to_sort = String::from(current_digit + ' ' + num);\n\
    \   |                                       ------------- ^ --- char\n   |   \
    \                                    |\n   |                                 \
    \      char\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut tokens\
    \ = numbers.split_whitespace();\n    let mut res = String::new();\n    let mut\
    \ last = 0;\n\n    while let Some(token) = tokens.next() {\n        if last <\
    \ token.get_ascii_digit(10) {\n            res.push_str(&tokens[last..]);\n  \
    \          last = token.get_ascii_digit(10);\n        } else {\n            res.push_str(&tokens[last..]);\n\
    \            last = token.get_ascii_digit(10);\n            res.push_str(&[\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"][token.get_ascii_digit(10)]);\n        }\n    }\n    res.push_str(&tokens[last..]);\n\
    \    res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `get_ascii_digit` found for reference `&str`\
    \ in the current scope\n  --> /tmp/tmp8wr2o3gy.rs:12:25\n   |\n12 |         if\
    \ last < token.get_ascii_digit(10) {\n   |                         ^^^^^^^^^^^^^^^\
    \ method not found in `&str`\n\nerror[E0608]: cannot index into a value of type\
    \ `SplitWhitespace<'_>`\n  --> /tmp/tmp8wr2o3gy.rs:13:27\n   |\n13 |         \
    \    res.push_str(&tokens[last..]);\n   |                           ^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `get_ascii_digit` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmp8wr2o3gy.rs:14:26\n   |\n14 |             last\
    \ = token.get_ascii_digit(10);\n   |                          ^^^^^^^^^^^^^^^\
    \ method not found in `&str`\n\nerror[E0608]: cannot index into a value of type\
    \ `SplitWhitespace<'_>`\n  --> /tmp/tmp8wr2o3gy.rs:16:27\n   |\n16 |         \
    \    res.push_str(&tokens[last..]);\n   |                           ^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `get_ascii_digit` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmp8wr2o3gy.rs:17:26\n   |\n17 |             last\
    \ = token.get_ascii_digit(10);\n   |                          ^^^^^^^^^^^^^^^\
    \ method not found in `&str`\n\nerror[E0599]: no method named `get_ascii_digit`\
    \ found for reference `&str` in the current scope\n  --> /tmp/tmp8wr2o3gy.rs:18:106\n\
    \   |\n18 |             res.push_str(&[\"one\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\", \"seven\", \"eight\", \"nine\"][token.get_ascii_digit(10)]);\n\
    \   |                                                                        \
    \                                  ^^^^^^^^^^^^^^^ method not found in `&str`\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  -->\
    \ /tmp/tmp8wr2o3gy.rs:21:19\n   |\n21 |     res.push_str(&tokens[last..]);\n \
    \  |                   ^^^^^^^^^^^^^^\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<&str> = numbers.split(' ').collect();\n    numbers_vec.sort_by(|a, b| a.parse::<u32>().cmp(&b.parse::<u32>()));\n\
    \    String::from_utf8_lossy(&numbers_vec.iter().map(|s| s.to_string()).collect())\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cmp` exists for enum `Result<u32, ParseIntError>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmp8nd0t0c6.rs:8:49\n \
    \   |\n8   |       numbers_vec.sort_by(|a, b| a.parse::<u32>().cmp(&b.parse::<u32>()));\n\
    \    |                                                   ^^^ method cannot be\
    \ called on `Result<u32, ParseIntError>` due to unsatisfied trait bounds\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `ParseIntError:\
    \ Ord`\n            which is required by `Result<u32, ParseIntError>: Ord`\n \
    \           `Result<u32, ParseIntError>: Iterator`\n            which is required\
    \ by `&mut Result<u32, ParseIntError>: Iterator`\n\nerror[E0277]: a value of type\
    \ `[u8]` cannot be built from an iterator over elements of type `String`\n   \
    \ --> /tmp/tmp8nd0t0c6.rs:9:29\n     |\n9    |     String::from_utf8_lossy(&numbers_vec.iter().map(|s|\
    \ s.to_string()).collect())\n     |     ----------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `[u8]` cannot be built from `std::iter::Iterator<Item=String>`\n\
    \     |     |\n     |     required by a bound introduced by this call\n     |\n\
    \     = help: the trait `FromIterator<String>` is not implemented for `[u8]`\n\
    note: required by a bound in `collect`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp8nd0t0c6.rs:9:5\n  |\n6 | fn sort_numbers(numbers: String) -> String\
    \ {\n  |                                     ------ expected `String` because\
    \ of return type\n...\n9 |     String::from_utf8_lossy(&numbers_vec.iter().map(|s|\
    \ s.to_string()).collect())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |     |\n  |     expected\
    \ struct `String`, found enum `Cow`\n  |\n  = note: expected struct `String`\n\
    \               found enum `Cow<'_, str>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n        .collect::<String>().into()\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpzv4bzxjk.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_ints\
    \ = Vec::new();\n\n    for number in numbers.split() {\n        let number = number.parse::<u32>().unwrap();\n\
    \        numbers_ints.push(number);\n    }\n\n    numbers_ints\n        .iter()\n\
    \        .sort_by_key(|num| num as u32)\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpac_yhj7i.rs:9:27\n     |\n9    |     for number in numbers.split()\
    \ {\n     |                           ^^^^^- supplied 0 arguments\n     |    \
    \                       |\n     |                           expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0599]: no method named\
    \ `sort_by_key` found for struct `std::slice::Iter` in the current scope\n  -->\
    \ /tmp/tmpac_yhj7i.rs:16:10\n   |\n16 |         .sort_by_key(|num| num as u32)\n\
    \   |          ^^^^^^^^^^^ method not found in `std::slice::Iter<'_, u32>`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split(\" \".to_owned())\n        .iter()\n        .map(|x| x.parse().unwrap())\n\
    \        .collect::<Vec<i32>>()\n        .sort_unstable()\n        .collect()\n\
    \        .to_owned()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmpu78k3fty.rs:8:16\n     |\n8    |         .split(\" \".to_owned())\n\
    \     |          ----- ^^^^^^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n\
    \     |          |\n     |          required by a bound introduced by this call\n\
    \     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\nnote: required by a bound in `core::str::<impl str>::split`\n\
    help: consider borrowing here\n     |\n8    |         .split(&\" \".to_owned())\n\
    \     |                +\n\nerror[E0599]: no method named `iter` found for struct\
    \ `std::str::Split` in the current scope\n --> /tmp/tmpu78k3fty.rs:9:10\n  |\n\
    9 |         .iter()\n  |          ^^^^ method not found in `std::str::Split<'_,\
    \ String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // get the\
    \ set of all valid numbers\n    let mut valid_numbers = String::new();\n    loop\
    \ {\n        let mut current_valid_number = String::new();\n        let mut current_number\
    \ = String::new();\n        numbers.chars().for_each(|c| {\n            // if\
    \ c is a number, append it to the current number\n            if c >= '0' && c\
    \ <= '9' {\n                current_number.push_str(&c.to_string());\n       \
    \     } else if c >= 'a' && c <= 'z' {\n                // if c is a lowercase\
    \ letter, convert it to an upper case letter\n                let mut converted\
    \ = String::new();\n                for b in c.as_bytes().iter() {\n         \
    \           converted.push((*b + ('A' as u32) as char) as char);\n           \
    \     }\n                current_number.push_str(&converted);\n            } else\
    \ {\n                // else add the current number to the set of valid numbers\n\
    \                valid_numbers.push_str(&current_number);\n                current_number.clear();\n\
    \            }\n        });\n        // if there are no more numbers, break\n\
    \        if !current_number.is_empty() {\n            valid_numbers.push_str(&current_number);\n\
    \            current_number.clear();\n        }\n        if valid_numbers.is_empty()\
    \ {\n            break;\n        }\n    }\n    // sort those numbers\n    valid_numbers.sort_unstable();\n\
    \    // convert those numbers to strings\n    valid_numbers.to_string()\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_bytes` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpwytmmq2z.rs:19:28\n   |\n19 |                 for b in\
    \ c.as_bytes().iter() {\n   |                            ^^^^^^^^ method not found\
    \ in `char`\n\nerror[E0599]: no method named `sort_unstable` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpwytmmq2z.rs:39:19\n   |\n39 | \
    \    valid_numbers.sort_unstable();\n   |                   ^^^^^^^^^^^^^ method\
    \ not found in `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not\
    \ `u32`\n  --> /tmp/tmpwytmmq2z.rs:20:42\n   |\n20 |                     converted.push((*b\
    \ + ('A' as u32) as char) as char);\n   |                                    \
    \      ^^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead\n\
    \  --> /tmp/tmpwytmmq2z.rs:20:42\n   |\n20 |                     converted.push((*b\
    \ + ('A' as u32) as char) as char);\n   |                                    \
    \      ^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0604.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.splitn(2, ' ').collect::<Vec<_>>();\n    numbers.sort_by(|a, b| a.to_owned()\
    \ < b.to_owned());\n    let mut result = String::new();\n    for num in numbers\
    \ {\n        result += num.to_owned();\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg94xqo9p.rs:8:28\n  |\n8 |\
    \     numbers.sort_by(|a, b| a.to_owned() < b.to_owned());\n  |              \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg94xqo9p.rs:11:19\n\
    \   |\n11 |         result += num.to_owned();\n   |                   ^^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&str`, found struct\
    \ `String`\n   |                   help: consider borrowing here: `&num.to_owned()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut buffer\
    \ = String::new();\n    numbers.split(\" \").sort_by(|&a, &b| a.cmp(&b)).for_each(|num|\
    \ buffer.push(num));\n    buffer\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp498qbcpw.rs:8:24\n  |\n8 |     numbers.split(\"\
    \ \").sort_by(|&a, &b| a.cmp(&b)).for_each(|num| buffer.push(num));\n  |     \
    \                   ^^^^^^^ method not found in `std::str::Split<'_, &str>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec\
    \ = Vec::new();\n    for number in numbers.split_whitespace() {\n        match\
    \ number.to_digit(10) {\n            Some(digit) => {\n                numbers_vec.push(digit);\n\
    \            }\n            None => return numbers,\n        }\n    }\n\n    let\
    \ mut numbers_sorted = numbers_vec\n        .iter()\n        .map(|x| *x)\n  \
    \      .sorted()\n        .collect::<Vec<usize>>()\n        .to_vec();\n    let\
    \ mut numbers_result = String::new();\n    for number in numbers_sorted {\n  \
    \      numbers_result.push_str(&format!(\"{}\", number));\n    }\n    return numbers_result;\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for reference `&str` in\
    \ the current scope\n --> /tmp/tmpd30rxwke.rs:9:22\n  |\n9 |         match number.to_digit(10)\
    \ {\n  |                      ^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `sorted` found for struct `Map` in the current scope\n  -->\
    \ /tmp/tmpd30rxwke.rs:20:10\n   |\n20 |         .sorted()\n   |          ^^^^^^\
    \ method not found in `Map<std::slice::Iter<'_, _>, [closure@/tmp/tmpd30rxwke.rs:19:14:\
    \ 19:20]>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_array\
    \ = numbers.split_whitespace();\n    numbers_array.sort_by_key(|i| {\n       \
    \ match i.chars().nth(3) {\n            '0' => 0,\n            '1' => 1,\n   \
    \         '2' => 2,\n            '3' => 3,\n            '4' => 4,\n          \
    \  '5' => 5,\n            '6' => 6,\n            '7' => 7,\n            '8' =>\
    \ 8,\n            '9' => 9,\n            _ => {\n                error!(\"invalid\
    \ input: {}\", numbers);\n                return -1;\n            }\n        }\n\
    \    });\n\n    let numbers_string = numbers_array.join(\" \");\n    numbers_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `error` in this scope\n  --> /tmp/tmp7ozfa2v3.rs:21:17\n\
    \   |\n21 |                 error!(\"invalid input: {}\", numbers);\n   |    \
    \             ^^^^^\n\nerror[E0599]: no method named `sort_by_key` found for struct\
    \ `SplitWhitespace` in the current scope\n --> /tmp/tmp7ozfa2v3.rs:8:19\n  |\n\
    8 |     numbers_array.sort_by_key(|i| {\n  |                   ^^^^^^^^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `join` found\
    \ for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmp7ozfa2v3.rs:27:40\n\
    \   |\n27 |     let numbers_string = numbers_array.join(\" \");\n   |        \
    \                                ^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpt8_csuu2.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b))\n  |                                ^^^^^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.splitn(2, ' ');\n    numbers.sort_by(|a, b| a.cmp(b).reverse());\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::SplitN`\
    \ in the current scope\n --> /tmp/tmp0zyr6x90.rs:8:13\n  |\n8 |     numbers.sort_by(|a,\
    \ b| a.cmp(b).reverse());\n  |             ^^^^^^^ method not found in `std::str::SplitN<'_,\
    \ char>`\n\nerror[E0599]: no method named `join` found for struct `std::str::SplitN`\
    \ in the current scope\n --> /tmp/tmp0zyr6x90.rs:9:13\n  |\n9 |     numbers.join(\"\
    \ \")\n  |             ^^^^ method not found in `std::str::SplitN<'_, char>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.to_lowercase().split('\
    \ ')\n        .sort_by_key(|s| s.parse().unwrap())\n        .collect::<Vec<_>>()\n\
    \        .join(' ')\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpk9hzzza6.rs:8:10\n  |\n8 |         .sort_by_key(|s|\
    \ s.parse().unwrap())\n  |          ^^^^^^^^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // The regex\
    \ to match is [zero|one|two|three|four|five|six|seven|eight|nine]+ \n    // The\
    \ (?i) at the start of the regex makes the match case-insensitive\n    numbers.replace(\"\
    (?i)zero\".to_string(), \"0\"to_string())\n            .replace(\"(?i)one\".to_string(),\
    \ \"1\"to_string())\n            .replace(\"(?i)two\".to_string(), \"2\"to_string())\n\
    \            .replace(\"(?i)three\".to_string(), \"3\"to_string())\n         \
    \   .replace(\"(?i)four\".to_string(), \"4\"to_string())\n            .replace(\"\
    (?i)five\".to_string(), \"5\"to_string())\n            .replace(\"(?i)six\".to_string(),\
    \ \"6\"to_string())\n            .replace(\"(?i)seven\".to_string(), \"7\"to_string())\n\
    \            .replace(\"(?i)eight\".to_string(), \"8\"to_string())\n         \
    \   .replace(\"(?i)nine\".to_string(), \"9\"to_string())\n            .to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: suffixes on a string literal are invalid\n --> /tmp/tmp7a9tkoha.rs:9:45\n\
    \  |\n9 |     numbers.replace(\"(?i)zero\".to_string(), \"0\"to_string())\n  |\
    \                                             ^^^^^^^^^^^^ invalid suffix `to_string`\n\
    \nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:10:45\n\
    \   |\n10 |             .replace(\"(?i)one\".to_string(), \"1\"to_string())\n\
    \   |                                             ^^^^^^^^^^^^ invalid suffix\
    \ `to_string`\n\nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:11:45\n\
    \   |\n11 |             .replace(\"(?i)two\".to_string(), \"2\"to_string())\n\
    \   |                                             ^^^^^^^^^^^^ invalid suffix\
    \ `to_string`\n\nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:12:47\n\
    \   |\n12 |             .replace(\"(?i)three\".to_string(), \"3\"to_string())\n\
    \   |                                               ^^^^^^^^^^^^ invalid suffix\
    \ `to_string`\n\nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:13:46\n\
    \   |\n13 |             .replace(\"(?i)four\".to_string(), \"4\"to_string())\n\
    \   |                                              ^^^^^^^^^^^^ invalid suffix\
    \ `to_string`\n\nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:14:46\n\
    \   |\n14 |             .replace(\"(?i)five\".to_string(), \"5\"to_string())\n\
    \   |                                              ^^^^^^^^^^^^ invalid suffix\
    \ `to_string`\n\nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:15:45\n\
    \   |\n15 |             .replace(\"(?i)six\".to_string(), \"6\"to_string())\n\
    \   |                                             ^^^^^^^^^^^^ invalid suffix\
    \ `to_string`\n\nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:16:47\n\
    \   |\n16 |             .replace(\"(?i)seven\".to_string(), \"7\"to_string())\n\
    \   |                                               ^^^^^^^^^^^^ invalid suffix\
    \ `to_string`\n\nerror: suffixes on a string literal are invalid\n  --> /tmp/tmp7a9tkoha.rs:17:47\n\
    \   |\n17 |             .replace(\"(?i)eight"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by_key(|x|\
    \ x.parse().unwrap()).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpkccj5a0_.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by_key(|x|\
    \ x.parse().unwrap()).collect::<Vec<_>>().join(\" \")\n  |                   \
    \             ^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Convert\
    \ all numbers from a string to a vector of characters\n    let mut numbers_characters\
    \ = numbers.chars().collect::<Vec<char>>();\n\n    // Sort the characters in place\
    \ from smallest to largest\n    std::slice::sort_slice(&mut numbers_characters);\n\
    \n    // Create the string from the sorted numbers\n    String::from_utf8_lossy(&numbers_characters).to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_slice` in module `std::slice`\n\
    \  --> /tmp/tmpsiowmj3o.rs:11:17\n   |\n11 |     std::slice::sort_slice(&mut numbers_characters);\n\
    \   |                 ^^^^^^^^^^ not found in `std::slice`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsiowmj3o.rs:14:29\n   |\n14 |     String::from_utf8_lossy(&numbers_characters).to_string()\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found\
    \ struct `Vec`\n   |\n   = note: expected reference `&[u8]`\n              found\
    \ reference `&Vec<char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return String::from(\"\");\n    }\n    let mut digits = numbers.split_whitespace().collect::<Vec<_>>();\n\
    \    sort_numbers_helper(&mut digits);\n    let mut result = String::from(\"zero\
    \ \");\n    for digit in digits {\n        result = result.concat(&digit);\n \
    \   }\n    result = result.concat(\" nine\");\n    return result;\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort_numbers_helper` in this scope\n\
    \  --> /tmp/tmp5ez_j5st.rs:11:5\n   |\n11 |     sort_numbers_helper(&mut digits);\n\
    \   |     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `concat` found for struct `String` in the current scope\n  --> /tmp/tmp5ez_j5st.rs:14:25\n\
    \   |\n14 |         result = result.concat(&digit);\n   |                    \
    \     ^^^^^^ method not found in `String`\n\nerror[E0599]: no method named `concat`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp5ez_j5st.rs:16:21\n\
    \   |\n16 |     result = result.concat(\" nine\");\n   |                     ^^^^^^\
    \ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n    numbers.sort_by_key(|x| match x.to_digit(10)\
    \ {\n        Some(x) => Some(x as u8),\n        _ => None,\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmplmdwauth.rs:8:13\n  |\n8 |     numbers.sort_by_key(|x|\
    \ match x.to_digit(10) {\n  |             ^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `join` found for struct `SplitWhitespace` in the\
    \ current scope\n  --> /tmp/tmplmdwauth.rs:12:13\n   |\n12 |     numbers.join(\"\
    \ \")\n   |             ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        String::from(\"zero\")\n    } else {\n        let mut number_list\
    \ = numbers.split_whitespace();\n        let mut numbers_str = String::with_capacity(numbers.len());\n\
    \        for number in number_list {\n            if number.chars().all(|c| c\
    \ >= '0' && c <= '9') {\n                numbers_str.push_str(number);\n     \
    \       } else {\n                break;\n            }\n        }\n        numbers_str.sort_by_key(|s|\
    \ s.chars().count());\n        numbers_str\n    }\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by_key` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpsjhdr8ip.rs:19:21\n   |\n19 |         numbers_str.sort_by_key(|s|\
    \ s.chars().count());\n   |                     ^^^^^^^^^^^ method not found in\
    \ `String`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers.sort();\n \
    \   String::from_utf8_lossy(numbers).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp0osr1vta.rs:7:63\n     |\n7  \
    \  |     let mut numbers: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                               ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0osr1vta.rs:9:29\n\
    \  |\n9 |     String::from_utf8_lossy(numbers).unwrap()\n  |                 \
    \            ^^^^^^^ expected `&[u8]`, found struct `Vec`\n  |\n  = note: expected\
    \ reference `&[u8]`\n                found struct `Vec<String>`\n\nerror[E0599]:\
    \ no method named `unwrap` found for enum `Cow<'_, str>` in the current scope\n\
    \ --> /tmp/tmp0osr1vta.rs:9:38\n  |\n9 |     String::from_utf8_lossy(numbers).unwrap()\n\
    \  |                                      ^^^^^^ method not found in `Cow<'_,\
    \ str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers\
    \ = numbers.split_whitespace().collect::<Vec<String>>();\n    let mut new_list\
    \ = Vec::new();\n    for num in numbers {\n        if num != \"zero\" && num !=\
    \ \"one\" && num != \"two\" && num != \"three\" && num != \"four\" && num != \"\
    five\" && num != \"six\" && num != \"seven\" && num != \"eight\" && num != \"\
    nine\" {\n            throw!(\n                NumberError::NoSuchNumber(\n  \
    \                  \"SortError\",\n                    \"sort_numbers: Not a valid\
    \ number. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\",\n                )\n            );\n       \
    \ }\n        let num = num.to_string();\n        if num == \"zero\" {\n      \
    \      new_list.push(\"zero\");\n        } else {\n            let mut new_num\
    \ = \"\";\n            let mut new_num2 = \"\";\n            let mut i = 2;\n\
    \            while i <= 10 {\n                if num[0..(i.to_string().len() -\
    \ 1)].to_string() == num {\n                    new_num += num;\n            \
    \        new_num2 += num;\n                    i += 1;\n                } else\
    \ {\n                    new_num += num;\n                    new_num2 += num;\n\
    \                }\n            }\n            new_num += new_num2;\n        \
    \    new_list.push(new_num);\n        }\n    }\n    new_list.sort_by_key(|a| a.parse().unwrap());\n\
    \    new_list.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `throw` in this scope\n  --> /tmp/tmplac25d9r.rs:11:13\n\
    \   |\n11 |             throw!(\n   |             ^^^^^\n\nerror[E0277]: a value\
    \ of type `Vec<String>` cannot be built from an iterator over elements of type\
    \ `&str`\n    --> /tmp/tmplac25d9r.rs:7:46\n     |\n7    |     let numbers = numbers.split_whitespace().collect::<Vec<String>>();\n\
    \     |                                              ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help:\
    \ the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&str`\n  --> /tmp/tmplac25d9r.rs:27:21\n   |\n27 |     \
    \                new_num += num;\n   |                     -------^--^^^^\n  \
    \ |                     |       |\n   |                     |       `+` cannot\
    \ be used to concatenate a `&str` with a `String`\n   |                     cannot\
    \ use `+=` on type `&str`\n   |\n   = note: string concatenation requires an owned\
    \ `String` on the left\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&str`\n  --> /tmp/tmplac25d9r.rs:28:21\n   |\n28 |     \
    \                new_num2 += num;\n   |                     --------^--^^^^\n\
    \   |                     |        |\n   |                     |        `+` cannot\
    \ be used to concatenate a `&str` with a `String`\n   |                     cannot\
    \ use `+=` on type `&str`\n   |\n   = note: string concatenation requires an owned\
    \ `String` on the left\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `&str`\n  --> /tmp/tmplac25d9r.rs:31:21\n   |\n31 |     \
    \                new_num += num;\n   |                     -------^--^^^^\n  \
    \ |                     |       |\n   |                     |       `+` cannot\
    \ be used to concatenate a `&str` with a `String`\n   |                     cannot\
    \ use `+=` on type `&str`\n   |\n   = note: string concatenation requires an ow"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Convert\
    \ the string to a set of numbers\n    let mut numbers_set = numbers.chars().collect::<HashSet<&'static\
    \ str>>();\n    // Sort the set and convert to a String\n    numbers_set\n   \
    \     .iter()\n        .map(|char| match char {\n            '0' => 0,\n     \
    \       '1' => 1,\n            '2' => 2,\n            '3' => 3,\n            '4'\
    \ => 4,\n            '5' => 5,\n            '6' => 6,\n            '7' => 7,\n\
    \            '8' => 8,\n            '9' => 9,\n            _ => unreachable!(),\n\
    \        })\n        .sorted()\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpdostry_t.rs:8:53\n\
    \  |\n8 |     let mut numbers_set = numbers.chars().collect::<HashSet<&'static\
    \ str>>();\n  |                                                     ^^^^^^^ not\
    \ found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use\
    \ std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n\n    let mut nums = String::from(\"zero\");\n\
    \    for num in numbers {\n        match num {\n            \"zero\" => nums.push_str(\"\
    one\"),\n            \"one\" => nums.push_str(\"two\"),\n            \"two\" =>\
    \ nums.push_str(\"three\"),\n            \"three\" => nums.push_str(\"four\"),\n\
    \            \"four\" => nums.push_str(\"five\"),\n            \"five\" => nums.push_str(\"\
    six\"),\n            \"six\" => nums.push_str(\"seven\"),\n            \"seven\"\
    \ => nums.push_str(\"eight\"),\n            \"eight\" => nums.push_str(\"nine\"\
    ),\n            _ => nums.push_str(num),\n        }\n    }\n    nums\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"zero\"`,\n right: `\"\"`', /tmp/tmpz8b29pxd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut string:\
    \ String = numbers;\n    string.sort_by(|a, b| a.cmp(b));\n    string\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp2b_mqfj6.rs:8:12\n  |\n8 |     string.sort_by(|a,\
    \ b| a.cmp(b));\n  |            ^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.trim_start_matches(\"\
    zero one two three four five six seven eight nine\".to_string()).trim_end_matches(\"\
    zero one two three four five six seven eight nine\".to_string())\n        .chars().sort_by(|&x,\
    \ &y| x.cmp(&y)).collect::<Vec<_>>().into_iter().collect::<String>().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   \
    \ --> /tmp/tmp4tfwt61g.rs:7:32\n     |\n7    |     numbers.trim_start_matches(\"\
    zero one two three four five six seven eight nine\".to_string()).trim_end_matches(\"\
    zero one two three four...\n     |             ------------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected an implementor of trait `Pattern<'_>`\n     |             |\n     |\
    \             required by a bound introduced by this call\n     |\n     = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\nnote:\
    \ required by a bound in `core::str::<impl str>::trim_start_matches`\nhelp: consider\
    \ borrowing here\n     |\n7    |     numbers.trim_start_matches(&\"zero one two\
    \ three four five six seven eight nine\".to_string()).trim_end_matches(\"zero\
    \ one two three four five six seven eight nine\".to_string())\n     |        \
    \                        +\n\nerror[E0277]: expected a `FnMut<(char,)>` closure,\
    \ found `String`\n --> /tmp/tmp4tfwt61g.rs:7:114\n  |\n7 | ...)).trim_end_matches(\"\
    zero one two three four five six seven eight nine\".to_string())\n  |       ----------------\
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an\
    \ implementor of trait `Pattern<'_>`\n  |       |\n  |       required by a bound\
    \ introduced by this call\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\nhelp: consider borrowing here\n  |\n7 |     numbers.trim_start_matches(\"\
    zero one two three four five six seven eight nine\".to_string()).trim_end_matches(&\"\
    zero one two three four five six seven eight nine\".to_string())\n  |        \
    \                                                                            \
    \                              +\n\nerror[E0599]: no method named `sort_by` found\
    \ for struct `Chars` in the current scope\n --> /tmp/tmp4tfwt61g.rs:8:18\n  |\n\
    8 |         .chars().sort_by(|&x, &y| x.cmp(&"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .sorted()\n        .collect()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpobxkw1se.rs:9:10\n  |\n9 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers\
    \ = String::new();\n\n    for number in numbers.split_whitespace() {\n       \
    \ if number != \"zero\" && number != \"one\" && number != \"two\" && number !=\
    \ \"three\" &&\n            number != \"four\" && number != \"five\" && number\
    \ != \"six\" && number != \"seven\" &&\n            number != \"eight\" && number\
    \ != \"nine\" {\n            return error!(\"Invalid number: '{}'\", number);\n\
    \        }\n\n        sorted_numbers.push_str(number);\n        sorted_numbers.push_str(\"\
    \ \");\n    }\n\n    sorted_numbers.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `error` in this scope\n  --> /tmp/tmp5nj5s4sz.rs:13:20\n\
    \   |\n13 |             return error!(\"Invalid number: '{}'\", number);\n   |\
    \                    ^^^^^\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return String::from(\"zero\");\n    }\n\n    let mut numbers_copy\
    \ = numbers.to_string();\n    numbers_copy.push_str(\"nine\");\n    numbers_copy.push_str(\"\
    \ \");\n    numbers_copy.push_str(\"zero\");\n    numbers_copy.push_str(\" \"\
    );\n\n    let mut i = 0;\n    let mut j = 0;\n    let mut number = String::from(\"\
    \");\n\n    for character in numbers_copy {\n        if character == \" \" {\n\
    \            if j == 0 {\n                i += 1;\n                j = 0;\n  \
    \              number.push_str(&numbers_copy[i..i + 1]);\n            }\n    \
    \    } else if character == \"nine\" {\n            j += 1;\n            number.push_str(\"\
    nine\");\n        }\n    }\n\n    if i == numbers_copy.len() {\n        number.push_str(&numbers_copy[i..i\
    \ + 1]);\n    }\n\n    return number;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmp35d0cx99.rs:21:22\n\
    \   |\n21 |     for character in numbers_copy {\n   |                      ^^^^^^^^^^^^\
    \ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `String`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split(\"\
    \\\\s\").sort_by(|a, b| a.cmp(b))\n        .map(|n| n.to_string())\n        .collect::<Vec<_>>()\n\
    \        .join(\"\\\\s\")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmp_tcer7uh.rs:7:26\n  |\n7 |     numbers.split(\"\
    \\\\s\").sort_by(|a, b| a.cmp(b))\n  |                          ^^^^^^^ method\
    \ not found in `std::str::Split<'_, &str>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // Split\
    \ the string into a list of strings\n    let mut numbers: Vec<String> = numbers\n\
    \        .split_whitespace()\n        .filter(|c| *c.to_lowercase() != 'z' &&\
    \ *c.to_lowercase() != 'n')\n        .collect();\n\n    // Sort the numbers list\n\
    \    numbers.sort_by_key(|s| s.to_lowercase());\n\n    // Join the numbers list\
    \ back into a string with spaces between each number\n    numbers = numbers.join(\"\
    \ \").to_string();\n    numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `str` with `char`\n  --> /tmp/tmpdeiu4l2i.rs:10:39\n\
    \   |\n10 |         .filter(|c| *c.to_lowercase() != 'z' && *c.to_lowercase()\
    \ != 'n')\n   |                                       ^^ no implementation for\
    \ `str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `str` with `char`\n  --> /tmp/tmpdeiu4l2i.rs:10:67\n   |\n10 |         .filter(|c|\
    \ *c.to_lowercase() != 'z' && *c.to_lowercase() != 'n')\n   |                \
    \                                                   ^^ no implementation for `str\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: a value of\
    \ type `Vec<String>` cannot be built from an iterator over elements of type `&str`\n\
    \    --> /tmp/tmpdeiu4l2i.rs:11:10\n     |\n11   |         .collect();\n     |\
    \          ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E03"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.len()\
    \ < 2 {\n        return numbers;\n    }\n\n    let mut numbers: Vec<&str> = numbers.split(\"\
    \ \").collect();\n    numbers.sort_by_key(|&x| x.parse().unwrap());\n    let mut\
    \ sorted_numbers = String::from(\"\");\n    sorted_numbers.extend(&numbers);\n\
    \n    for &x in &numbers {\n        sorted_numbers = x.to_string()\n         \
    \   .parse()\n            .unwrap()\n            .join(\" \")\n            .to_string()\n\
    \            .replace_suffix(\" \".to_string(), sorted_numbers);\n    }\n\n  \
    \  sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Extend<&&str>` is not satisfied\n\
    \  --> /tmp/tmpujbqhwff.rs:14:20\n   |\n14 |     sorted_numbers.extend(&numbers);\n\
    \   |                    ^^^^^^ the trait `Extend<&&str>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `Extend<A>`:\n\
    \             <String as Extend<&'a char>>\n             <String as Extend<&'a\
    \ str>>\n             <String as Extend<Box<str>>>\n             <String as Extend<Cow<'a,\
    \ str>>>\n             <String as Extend<String>>\n             <String as Extend<char>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .map(|x| x.parse().ok())\n        .sort_by(|x,\
    \ y| x.cmp(y))\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpr05qf6be.rs:10:10\n   |\n10 |         .sort_by(|x, y| x.cmp(y))\n\
    \   |          ^^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmpr05qf6be.rs:9:14:\
    \ 9:32]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_str\
    \ = \"\";\n    for number in numbers.split_whitespace() {\n        let number_value\
    \ = match number.as_str() {\n            \"zero\" => 0,\n            \"one\" =>\
    \ 1,\n            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => unreachable!(),\n        };\n\n        numbers_str = numbers_str\n\
    \            .to_owned()\n            .iter()\n            .map(|mut n| {\n  \
    \              match n {\n                    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\
    \ 8 | 9 => {\n                        n.swap();\n                        n\n \
    \                   }\n                    _ => n,\n                }\n      \
    \      })\n            .collect();\n\n        numbers_str = numbers_str\n    \
    \        .to_owned()\n            .iter()\n            .map(|mut n| {\n      \
    \          match n {\n                    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\
    \ 9 => n.swap(),\n                    _ => n,\n                }\n           \
    \ })\n            .collect();\n    }\n    numbers_str.to_owned()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_str` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpe1nq_pqc.rs:9:41\n  |\n9 |         let number_value\
    \ = match number.as_str() {\n  |                                        -^^^^^^--\
    \ help: remove this method call\n\nerror[E0599]: no method named `iter` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpe1nq_pqc.rs:25:14\n\
    \   |\n25 |             .iter()\n   |              ^^^^ method not found in `String`\n\
    \   |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator`\
    \ over each of its codepoint use method `chars`\n   |\n25 |             .chars()\n\
    \   |              ~~~~~\n\nerror[E0599]: no method named `swap` found for type\
    \ `{integer}` in the current scope\n  --> /tmp/tmpe1nq_pqc.rs:29:27\n   |\n29\
    \ |                         n.swap();\n   |                           ^^^^ method\
    \ not found in `{integer}`\n\nerror[E0599]: no method named `iter` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpe1nq_pqc.rs:39:14\n   |\n39 | \
    \            .iter()\n   |              ^^^^ method not found in `String`\n  \
    \ |\nhelp: because of the in-memory representation of `&str`, to obtain an `Iterator`\
    \ over each of its codepoint use method `chars`\n   |\n39 |             .chars()\n\
    \   |              ~~~~~\n\nerror[E0599]: no method named `swap` found for type\
    \ `{integer}` in the current scope\n  --> /tmp/tmpe1nq_pqc.rs:42:64\n   |\n42\
    \ |                     0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 => n.swap(),\n \
    \  |                                                                ^^^^ method\
    \ not found in `{integer}`\n\nerror: aborting due to 5 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.lines()\n\
    \        .map(|s| s.parse().unwrap())\n        .sorted()\n        .collect()\n\
    \        .map(|x| x.to_string())\n        .collect::<Vec<_>>()\n        .join(\"\
    \\n\")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmp1f8dtjc9.rs:9:10\n  |\n9 |         .sorted()\n  |      \
    \    ^^^^^^ method not found in `Map<std::str::Lines<'_>, [closure@/tmp/tmp1f8dtjc9.rs:8:14:\
    \ 8:36]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_arr\
    \ = numbers.split(\" \").collect::<Vec<_>>();\n    numbers_arr.sort_by(|a, b|\
    \ a.cmp(b));\n    String::from_iter(numbers_arr)\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n --> /tmp/tmps1jexyz7.rs:9:13\n  |\n9\
    \ |     String::from_iter(numbers_arr)\n  |             ^^^^^^^^^ function or\
    \ associated item not found in `String`\n  |\n  = help: items from traits can\
    \ only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n  |\n1 | use std::iter::FromIterator;\n\
    \  |\nhelp: there is an associated function with a similar name\n  |\n9 |    \
    \ String::from_utf8(numbers_arr)\n  |             ~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.len()\
    \ < 3 {\n        numbers\n    } else {\n        let mut numbers_string = numbers.to_string();\n\
    \        if numbers_string.len() > 2 {\n            let mut numbers_string_without_leading_zeros\
    \ = numbers_string.trim_start_matches(\"0\");\n            let mut numbers_string_without_leading_zeros_split\
    \ = numbers_string_without_leading_zeros.split_whitespace();\n            if numbers_string_without_leading_zeros_split.len()\
    \ <= 2 {\n                numbers_string_without_leading_zeros_split\n       \
    \             .sort_unstable()\n                    .map(|number| number.to_string())\n\
    \                    .collect::<Vec<_>>()\n                    .join(\" \")\n\
    \            } else {\n                numbers_string_without_leading_zeros_split\n\
    \                    .sort_unstable()\n                    .collect::<Vec<_>>()\n\
    \                    .join(\" \")\n                    .unwrap()\n           \
    \ }\n        } else {\n            numbers\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp_7z54039.rs:14:59\n   |\n14 |          \
    \   if numbers_string_without_leading_zeros_split.len() <= 2 {\n   |         \
    \                                                  ^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `sort_unstable` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp_7z54039.rs:16:22\n   |\n16 |          \
    \           .sort_unstable()\n   |                      ^^^^^^^^^^^^^ method not\
    \ found in `SplitWhitespace<'_>`\n\nerror[E0599]: no method named `sort_unstable`\
    \ found for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmp_7z54039.rs:22:22\n\
    \   |\n22 |                     .sort_unstable()\n   |                      ^^^^^^^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split('\
    \ ').sort_by(|a, b| b.parse().unwrap()).collect()\n        .collect::<Vec<_>>()\n\
    \        .into_iter()\n        .map(String::from)\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpo9y36bcm.rs:7:24\n  |\n7 |     numbers.split('\
    \ ').sort_by(|a, b| b.parse().unwrap()).collect()\n  |                       \
    \ ^^^^^^^ method not found in `std::str::Split<'_, char>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    // TODO:\
    \ add bounds checking\n    numbers\n        .split_whitespace()\n        .map(|n|\
    \ n.parse().unwrap())\n        .collect()\n        .sort_by(|a, b| b.cmp(a))\n\
    \        .collect()\n        .map(String::from)\n        .join(\", \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp9myh0bix.rs:11:10\n\
    \   |\n11 |         .collect()\n   |          ^^^^^^^ cannot infer type for type\
    \ parameter `B` declared on the associated function `collect`\n   |\n   = note:\
    \ type must be known at this point\nhelp: consider specifying the type argument\
    \ in the method call\n   |\n11 |         .collect::<B>()\n   |               \
    \  +++++\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    match numbers.trim().as_ref()\
    \ {\n        Some(numbers) => {\n            let numbers = numbers.split(\" \"\
    ).collect::<Vec<_>>();\n            numbers\n                .iter()\n       \
    \         .sort_by(|a, b| b.cmp(a))\n                .collect()\n            \
    \    .join(\" \")\n        }\n        None => String::new(),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `str: AsRef<Option<_>>` is not satisfied\n\
    \ --> /tmp/tmp7zpx6qku.rs:7:26\n  |\n7 |     match numbers.trim().as_ref() {\n\
    \  |                          ^^^^^^ the trait `AsRef<Option<_>>` is not implemented\
    \ for `str`\n  |\n  = help: the following other types implement trait `AsRef<T>`:\n\
    \            <String as AsRef<OsStr>>\n            <String as AsRef<Path>>\n \
    \           <String as AsRef<[u8]>>\n            <String as AsRef<str>>\n    \
    \        <str as AsRef<OsStr>>\n            <str as AsRef<Path>>\n           \
    \ <str as AsRef<[u8]>>\n            <str as AsRef<str>>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().filter(|c|\
    \ c.is_numeric()).map(|c| c.to_string()).collect::<Vec<_>>()\n        .sort_by(|a,b|\
    \ a.cmp(b)).collect::<Vec<_>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `()` is not an iterator\n --> /tmp/tmp8mvgz3v_.rs:8:34\n\
    \  |\n8 |         .sort_by(|a,b| a.cmp(b)).collect::<Vec<_>>().join(\" \")\n \
    \ |                                  ^^^^^^^ `()` is not an iterator\n  |\n  =\
    \ note: the following trait bounds were not satisfied:\n          `(): Iterator`\n\
    \          which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n    numbers.sort_unstable_by_key(|s| s.parse().unwrap());\n\
    \    String::from_utf8_lossy(&numbers)\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_unstable_by_key` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpdwmj9z19.rs:8:13\n  |\n8 |     numbers.sort_unstable_by_key(|s|\
    \ s.parse().unwrap());\n  |             ^^^^^^^^^^^^^^^^^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdwmj9z19.rs:9:29\n\
    \  |\n9 |     String::from_utf8_lossy(&numbers)\n  |                         \
    \    ^^^^^^^^ expected slice `[u8]`, found struct `SplitWhitespace`\n  |\n  =\
    \ note: expected reference `&[u8]`\n             found reference `&SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpdwmj9z19.rs:9:5\n  |\n6 | fn sort_numbers(numbers:\
    \ String) -> String {\n  |                                     ------ expected\
    \ `String` because of return type\n...\n9 |     String::from_utf8_lossy(&numbers)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n  |     |\n  |     expected struct `String`, found enum `Cow`\n\
    \  |\n  = note: expected struct `String`\n               found enum `Cow<'_, str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.trim_end().split(\"\
    \ \")\n        .sort_by(|a, b| a.cmp(b))\n        .iter()\n        .map(|s| s.to_string())\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::str::Split`\
    \ in the current scope\n --> /tmp/tmpcl8z075c.rs:8:10\n  |\n8 |         .sort_by(|a,\
    \ b| a.cmp(b))\n  |          ^^^^^^^ method not found in `std::str::Split<'_,\
    \ &str>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().filter(|c|\
    \ c.is_digit(10))\n        .collect::<Vec<_>>()\n        .sort::<i32>()\n    \
    \    .map(|n| n.to_string())\n        .collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0107]: this associated function takes 0 generic arguments but 1\
    \ generic argument was supplied\n --> /tmp/tmpy2n66cyp.rs:9:10\n  |\n9 |     \
    \    .sort::<i32>()\n  |          ^^^^------- help: remove these generics\n  |\
    \          |\n  |          expected 0 generic arguments\n\nerror[E0599]: `()`\
    \ is not an iterator\n  --> /tmp/tmpy2n66cyp.rs:10:10\n   |\n10 |         .map(|n|\
    \ n.to_string())\n   |          ^^^ `()` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `&mut (): Iterator`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0107, E0599.\n\
    For more information about an error, try `rustc --explain E0107`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_without_digits\
    \ = numbers\n        .chars()\n        .filter(|c| !c.is_numeric())\n        .collect::<Vec<_>>();\n\
    \    let mut numbers_ordered = numbers_without_digits.clone();\n    numbers_ordered.sort_unstable_by_key(|c|\
    \ c.to_digit(10).unwrap());\n    String::from_utf8(numbers_ordered)\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjhf1um2v.rs:13:23\n   |\n\
    13 |     String::from_utf8(numbers_ordered)\n   |                       ^^^^^^^^^^^^^^^\
    \ expected `u8`, found `char`\n   |\n   = note: expected struct `Vec<u8>`\n  \
    \            found struct `Vec<char>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjhf1um2v.rs:13:5\n   |\n6  | fn sort_numbers(numbers: String) -> String\
    \ {\n   |                                     ------ expected `String` because\
    \ of return type\n...\n13 |     String::from_utf8(numbers_ordered)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Result`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Result<String, FromUtf8Error>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers_split\
    \ = numbers.splitn(2, \" \").collect::<Vec<_>>();\n    numbers_split.sort_by(|n1,\
    \ n2| {\n        if n1 == \"zero\" && n2 == \"nine\" {\n            1\n      \
    \  } else {\n            if n1 == \"zero\" {\n                -1\n           \
    \ } else {\n                if n2 == \"nine\" {\n                    1\n     \
    \           } else {\n                    -1\n                }\n            }\n\
    \        }\n    });\n    numbers_split.join().to_string()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&str` with `str`\n --> /tmp/tmptdqb7hp8.rs:9:15\n\
    \  |\n9 |         if n1 == \"zero\" && n2 == \"nine\" {\n  |               ^^\
    \ no implementation for `&str == str`\n  |\n  = help: the trait `PartialEq<str>`\
    \ is not implemented for `&str`\n  = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n    \
    \        <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a,\
    \ str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n\
    \            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n  = note:\
    \ required because of the requirements on the impl of `PartialEq<&str>` for `&&str`\n\
    \nerror[E0277]: can't compare `&str` with `str`\n --> /tmp/tmptdqb7hp8.rs:9:31\n\
    \  |\n9 |         if n1 == \"zero\" && n2 == \"nine\" {\n  |                 \
    \              ^^ no implementation for `&str == str`\n  |\n  = help: the trait\
    \ `PartialEq<str>` is not implemented for `&str`\n  = help: the following other\
    \ types implement trait `PartialEq<Rhs>`:\n            <&'a str as PartialEq<OsString>>\n\
    \            <&'a str as PartialEq<String>>\n            <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n            <String as PartialEq<&'a str>>\n            <String as PartialEq<Cow<'a,\
    \ str>>>\n            <String as PartialEq<str>>\n            <String as PartialEq>\n\
    \            <str as PartialEq<Cow<'a, str>>>\n          and 4 others\n  = note:\
    \ required because of the requirements on the impl of `PartialEq<&str>` for `&&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptdqb7hp8.rs:10:13\n   |\n10 |\
    \             1\n   |             ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0277]: can't compare `&str` with `str`\n  --> /tmp/tmptdqb7hp8.rs:12:19\n\
    \   |\n12 |             if n1 == \"zero\" {\n   |                   ^^ no implementation\
    \ for `&str == str`\n   |\n   = help: the trait `PartialEq<str>` is not implemented\
    \ for `&str`\n   = help: the following other types implement tra"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    let mut numbers_vec:\
    \ Vec<String> = numbers_vec.sort();\n    String::from(numbers_vec.join(\" \"))\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp5c19eu7g.rs:7:67\n     |\n7  \
    \  |     let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \     |                                                                   ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5c19eu7g.rs:8:40\n\
    \  |\n8 |     let mut numbers_vec: Vec<String> = numbers_vec.sort();\n  |    \
    \                      -----------   ^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |                          |\n  |                          expected\
    \ due to this\n  |\n  = note: expected struct `Vec<String>`\n          found unit\
    \ type `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| {\n        fn num_to_char(n: u32) -> char {\n            match n.checked_sub(1)\n\
    \                .map(|i| String::from(\"0123456789\".to_string()[i]))\n     \
    \       {\n                None => return '*',\n                Some(i) => i,\n\
    \            }\n        }\n\n        num_to_char(a).cmp(num_to_char(b))\n    })\n\
    \    .collect::<Vec<_>>()\n    .join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmplg_smjyy.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| {\n  |                                ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplg_smjyy.rs:17:28\n   |\n17 |\
    \         num_to_char(a).cmp(num_to_char(b))\n   |                           \
    \ ^^^^^^^^^^^^^^\n   |                            |\n   |                    \
    \        expected `&char`, found `char`\n   |                            help:\
    \ consider borrowing here: `&num_to_char(b)`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `u32`\n  --> /tmp/tmplg_smjyy.rs:10:39\n   |\n10 |    \
    \             .map(|i| String::from(\"0123456789\".to_string()[i]))\n   |    \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `u32`\n   |\n   = help: the trait `Index<u32>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmplg_smjyy.rs:13:28\n\
    \   |\n9  | /             match n.checked_sub(1)\n10 | |                 .map(|i|\
    \ String::from(\"0123456789\".to_string()[i]))\n11 | |             {\n12 | | \
    \                None => return '*',\n   | |                         ----------\
    \ this is found to be of type `char`\n13 | |                 Some(i) => i,\n \
    \  | |                            ^ expected `char`, found struct `String`\n14\
    \ | |             }\n   | |_____________- `match` arms have incompatible types\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc "
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_owned();\n    let mut counter = 0;\n\n    for i in numbers.chars()\
    \ {\n        counter += match i {\n            c if c.is_numeric() => 0,\n   \
    \         c if c.is_alpha() => 1,\n            _ => 0,\n        };\n    }\n\n\
    \    numbers.sort_by(|a, b| {\n        match a {\n            '0' => 0,\n    \
    \        '1' => 1,\n            '2' => 2,\n            '3' => 3,\n           \
    \ '4' => 4,\n            '5' => 5,\n            '6' => 6,\n            '7' =>\
    \ 7,\n            '8' => 8,\n            '9' => 9,\n            _ => counter -\
    \ counter + b.cmp(a),\n        }\n    });\n\n    numbers.to_string()\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_alpha` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpx_b0azz5.rs:13:20\n   |\n13 |             c if c.is_alpha()\
    \ => 1,\n   |                    ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_alphabetic`\n\nerror[E0599]: no method named `sort_by`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpx_b0azz5.rs:18:13\n\
    \   |\n18 |     numbers.sort_by(|a, b| {\n   |             ^^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut nums\
    \ = numbers.split(\" \").collect::<Vec<_>>();\n    nums.sort_by(|a, b| a.cmp(b));\n\
    \    let mut out = String::with_capacity(nums.len());\n    for num in nums {\n\
    \        out.push_str(num.to_string());\n    }\n    out\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpypbmrg83.rs:11:22\n   |\n\
    11 |         out.push_str(num.to_string());\n   |                      ^^^^^^^^^^^^^^^\n\
    \   |                      |\n   |                      expected `&str`, found\
    \ struct `String`\n   |                      help: consider borrowing here: `&num.to_string()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers\n\
    \        .split_whitespace()\n        .sorted()\n        .collect::<Vec<_>>()\n\
    \        .into_iter()\n        .map(|number| number.parse::<usize>().unwrap())\n\
    \        .collect::<Vec<_>>()\n        .into_iter()\n        .map(|number| number.to_string())\n\
    \        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpx6rtqgac.rs:9:10\n  |\n9 |         .sorted()\n\
    \  |          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_str\
    \ = numbers.to_string();\n    let mut numbers_chars = numbers.chars();\n\n   \
    \ numbers_str.sort();\n    numbers_chars.sort();\n\n    numbers_str.to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmphpavkh1o.rs:10:17\n   |\n10 |     numbers_str.sort();\n\
    \   |                 ^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `sort` found for struct `Chars` in the current scope\n  --> /tmp/tmphpavkh1o.rs:11:19\n\
    \   |\n11 |     numbers_chars.sort();\n   |                   ^^^^ method not\
    \ found in `Chars<'_>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sorted().collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpd1b1z0ek.rs:7:32\n  |\n7 |     numbers.split_whitespace().sorted().collect::<Vec<_>>().join(\"\
    \ \")\n  |                                ^^^^^^ method not found in `SplitWhitespace<'_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|n| n.parse().unwrap())\n\
    \        .collect();\n    numbers.sort_unstable();\n    numbers.iter().map(|x|\
    \ x as char).collect::<String>()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&usize` as `char` is invalid\n  --> /tmp/tmp_jp4scgk.rs:12:28\n\
    \   |\n12 |     numbers.iter().map(|x| x as char).collect::<String>()\n   |  \
    \                          -^^^^^^^^\n   |                            |\n   |\
    \                            cannot cast `&usize` as `char`\n   |            \
    \                help: dereference the expression: `*x`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0606`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers\n        .split_whitespace()\n        .collect::<Vec<String>>()\n\
    \        .iter()\n        .cloned()\n        .map(|s| s.to_owned())\n        .collect();\n\
    \n    numbers.sort_by_key(|x| x.parse().unwrap());\n    numbers.dedup();\n\n \
    \   String::from(\n        numbers as &str\n            .into_iter()\n       \
    \     .map(|&n| match n {\n                \"zero\" => 0,\n                \"\
    one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => panic!(\"Number\
    \ '{}' is not a valid number!\", n),\n            })\n            .collect(),\n\
    \    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: casts cannot be followed by a method call\n  --> /tmp/tmprvzpfsrl.rs:19:9\n\
    \   |\n19 |         numbers as &str\n   |         ^^^^^^^^^^^^^^^\n   |\nhelp:\
    \ try surrounding the expression in parentheses\n   |\n19 |         (numbers as\
    \ &str)\n   |         +               +\n\nerror[E0277]: a value of type `Vec<String>`\
    \ cannot be built from an iterator over elements of type `&str`\n    --> /tmp/tmprvzpfsrl.rs:9:10\n\
    \     |\n9    |         .collect::<Vec<String>>()\n     |          ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let numbers:\
    \ Vec<_> = numbers.split(\" \").collect();\n    let mut numbers_vec: Vec<_> =\
    \ Vec::new();\n    for number in numbers {\n        let number = number.to_owned();\n\
    \        if number == \"zero\" {\n            numbers_vec.push(\"zero\");\n  \
    \      } else if number == \"one\" {\n            numbers_vec.push(\"one\");\n\
    \        } else if number == \"two\" {\n            numbers_vec.push(\"two\");\n\
    \        } else if number == \"three\" {\n            numbers_vec.push(\"three\"\
    );\n        } else if number == \"four\" {\n            numbers_vec.push(\"four\"\
    );\n        } else if number == \"five\" {\n            numbers_vec.push(\"five\"\
    );\n        } else if number == \"six\" {\n            numbers_vec.push(\"six\"\
    );\n        } else if number == \"seven\" {\n            numbers_vec.push(\"seven\"\
    );\n        } else if number == \"eight\" {\n            numbers_vec.push(\"eight\"\
    );\n        } else if number == \"nine\" {\n            numbers_vec.push(\"nine\"\
    );\n        } else {\n            println!(\"{}\", number);\n        }\n    }\n\
    \    String::from_utf8_lossy(&numbers_vec.iter().sort_by(|a, b| b.cmp(a)).collect::<Vec<_>>()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmphgmlu9pt.rs:35:49\n   |\n35 |     String::from_utf8_lossy(&numbers_vec.iter().sort_by(|a,\
    \ b| b.cmp(a)).collect::<Vec<_>>()).unwrap()\n   |                           \
    \                      ^^^^^^^ method not found in `std::slice::Iter<'_, &str>`\n\
    \nerror[E0599]: no method named `unwrap` found for enum `Cow<'_, str>` in the\
    \ current scope\n  --> /tmp/tmphgmlu9pt.rs:35:95\n   |\n35 |     String::from_utf8_lossy(&numbers_vec.iter().sort_by(|a,\
    \ b| b.cmp(a)).collect::<Vec<_>>()).unwrap()\n   |                           \
    \                                                                    ^^^^^^ method\
    \ not found in `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace().collect::<Vec<_>>();\n\n    numbers.sort_by_key(|n|\
    \ {\n        match n {\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"{} is not\
    \ a valid choice.\", n),\n        }\n    });\n\n    numbers = numbers.join(\"\
    \ \");\n    numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5jyp2j_n.rs:11:13\n   |\n\
    10 |         match n {\n   |               - this expression has type `&&str`\n\
    11 |             \"one\" => 1,\n   |             ^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note: expected reference `&&str`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jyp2j_n.rs:12:13\n\
    \   |\n10 |         match n {\n   |               - this expression has type `&&str`\n\
    11 |             \"one\" => 1,\n12 |             \"two\" => 2,\n   |         \
    \    ^^^^^ expected `&str`, found `str`\n   |\n   = note: expected reference `&&str`\n\
    \              found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5jyp2j_n.rs:13:13\n   |\n10 |         match n {\n   |         \
    \      - this expression has type `&&str`\n...\n13 |             \"three\" =>\
    \ 3,\n   |             ^^^^^^^ expected `&str`, found `str`\n   |\n   = note:\
    \ expected reference `&&str`\n              found reference `&'static str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5jyp2j_n.rs:14:13\n   |\n10 |  \
    \       match n {\n   |               - this expression has type `&&str`\n...\n\
    14 |             \"four\" => 4,\n   |             ^^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note: expected reference `&&str`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jyp2j_n.rs:15:13\n\
    \   |\n10 |         match n {\n   |               - this expression has type `&&str`\n\
    ...\n15 |             \"five\" => 5,\n   |             ^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jyp2j_n.rs:16:13\n\
    \   |\n10 |         match n {\n   |               - this expression has type `&&str`\n\
    ...\n16 |             \"six\" => 6,\n   |             ^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note: expected reference `&&str`\n              found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jyp2j_n.rs:17:13\n\
    \   |\n10 |         match n {\n   |          "
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        String::from(\"zero\")\n    } else {\n        let mut numbers_buf\
    \ = numbers[..].split_whitespace();\n        if numbers_buf.len() != 3 {\n   \
    \         assert!(false);\n        }\n        let mut numbers_buf = numbers_buf.map(|n|\
    \ n.parse().unwrap());\n        if numbers_buf.len() != 3 {\n            assert!(false);\n\
    \        }\n        numbers_buf.sort();\n        let mut numbers = \"\";\n   \
    \     for n in numbers_buf.iter() {\n            numbers = n.to_string();\n  \
    \      }\n        numbers\n    }\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp5cqd9swy.rs:11:24\n   |\n11 |         if\
    \ numbers_buf.len() != 3 {\n   |                        ^^^ method not found in\
    \ `SplitWhitespace<'_>`\n\nerror[E0599]: the method `len` exists for struct `Map<SplitWhitespace<'_>,\
    \ [closure@/tmp/tmp5cqd9swy.rs:14:47: 14:69]>`, but its trait bounds were not\
    \ satisfied\n    --> /tmp/tmp5cqd9swy.rs:15:24\n     |\n15   |           if numbers_buf.len()\
    \ != 3 {\n     |                          ^^^ method cannot be called on `Map<SplitWhitespace<'_>,\
    \ [closure@/tmp/tmp5cqd9swy.rs:14:47: 14:69]>` due to unsatisfied trait bounds\n\
    \     |\n     = note: the following trait bounds were not satisfied:\n       \
    \      `SplitWhitespace<'_>: ExactSizeIterator`\n             which is required\
    \ by `Map<SplitWhitespace<'_>, [closure@/tmp/tmp5cqd9swy.rs:14:47: 14:69]>: ExactSizeIterator`\n\
    \nerror[E0599]: no method named `sort` found for struct `Map` in the current scope\n\
    \  --> /tmp/tmp5cqd9swy.rs:18:21\n   |\n18 |         numbers_buf.sort();\n   |\
    \                     ^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmp5cqd9swy.rs:14:47:\
    \ 14:69]>`\n\nerror[E0599]: no method named `iter` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp5cqd9swy.rs:20:30\n   |\n20 |         for n in\
    \ numbers_buf.iter() {\n   |                              ^^^^ private field,\
    \ not a method\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5cqd9swy.rs:23:9\n\
    \   |\n6  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                      ------ expected `String` because of return type\n...\n\
    23 |         numbers\n   |         ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |         |\n   |         expected struct `String`, found\
    \ `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers_alphabetical(numbers)\n\
    \        .iter()\n        .map(|&x| x.to_string())\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| a.cmp(b))\n        .collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numbers_alphabetical` in this scope\n\
    \ --> /tmp/tmpigzig_w3.rs:7:5\n  |\n7 |     numbers_alphabetical(numbers)\n  |\
    \     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.to_owned();\n    let mut numbers_string = String::from(\"\");\n  \
    \  let mut numbers_chars = String::from(\"\");\n    let mut counter = 0;\n   \
    \ while numbers.len() > 0 {\n        if numbers[0] == \"zero\" {\n           \
    \ numbers_string += &\"0\";\n            numbers_chars += &\"0\";\n          \
    \  numbers.remove(0, 1);\n            counter += 1;\n        } else if numbers[0]\
    \ == \"one\" {\n            numbers_string += &\"1\";\n            numbers_chars\
    \ += &\"1\";\n            numbers.remove(0, 1);\n            counter += 1;\n \
    \       } else if numbers[0] == \"two\" {\n            numbers_string += &\"2\"\
    ;\n            numbers_chars += &\"2\";\n            numbers.remove(0, 1);\n \
    \           counter += 1;\n        } else if numbers[0] == \"three\" {\n     \
    \       numbers_string += &\"3\";\n            numbers_chars += &\"3\";\n    \
    \        numbers.remove(0, 1);\n            counter += 1;\n        } else if numbers[0]\
    \ == \"four\" {\n            numbers_string += &\"4\";\n            numbers_chars\
    \ += &\"4\";\n            numbers.remove(0, 1);\n            counter += 1;\n \
    \       } else if numbers[0] == \"five\" {\n            numbers_string += &\"\
    5\";\n            numbers_chars += &\"5\";\n            numbers.remove(0, 1);\n\
    \            counter += 1;\n        } else if numbers[0] == \"six\" {\n      \
    \      numbers_string += &\"6\";\n            numbers_chars += &\"6\";\n     \
    \       numbers.remove(0, 1);\n            counter += 1;\n        } else if numbers[0]\
    \ == \"seven\" {\n            numbers_string += &\"7\";\n            numbers_chars\
    \ += &\"7\";\n            numbers.remove(0, 1);\n            counter += 1;\n \
    \       } else if numbers[0] == \"eight\" {\n            numbers_string += &\"\
    8\";\n            numbers_chars += &\"8\";\n            numbers.remove(0, 1);\n\
    \            counter += 1;\n        } else if numbers[0] == \"nine\" {\n     \
    \       numbers_string += &\"9\";\n            numbers_chars += &\"9\";\n    \
    \        numbers.remove(0, 1);\n            counter += 1;\n        } else {\n\
    \            numbers_string += numbers[0];\n            numbers_chars += numbers[0];\n\
    \            numbers.remove(0, 1);\n            counter += 1;\n        }\n   \
    \ }\n    numbers_chars.to_owned()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpimk3fd7h.rs:12:12\n   |\n12 |         if numbers[0] == \"zero\" {\n\
    \   |            ^^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n\
    \   = help: the trait `Index<{integer}>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0061]: this function takes 1 argument but 2 arguments were\
    \ supplied\n    --> /tmp/tmpimk3fd7h.rs:15:21\n     |\n15   |             numbers.remove(0,\
    \ 1);\n     |                     ^^^^^^ -  - supplied 2 arguments\n     |   \
    \                  |\n     |                     expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `{integer}`\n  --> /tmp/tmpimk3fd7h.rs:17:19\n   |\n17 |     \
    \    } else if numbers[0] == \"one\" {\n   |                   ^^^^^^^^^^ `String`\
    \ cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0061]: this function takes 1 argument but 2 arguments were\
    \ supplied\n    --> /tmp/tmpimk3fd7h.rs:20:21\n     |\n20   |             numbers.remove(0,\
    \ 1);\n     |                     ^^^^^^ -  - supplied 2 arguments\n     |   \
    \                  |\n     |                     expected 1 argument\n     |\n\
    note: associated "
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers\
    \ = numbers.split_whitespace();\n    numbers.sort_by(|a, b| {\n        let amt:\
    \ i32 = a.parse().unwrap();\n        let bmt: i32 = b.parse().unwrap();\n    \
    \    amt.cmp(&bmt)\n    });\n    String::from_utf8_lossy(&numbers).into_owned()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpngirxzjk.rs:8:13\n  |\n8 |     numbers.sort_by(|a,\
    \ b| {\n  |             ^^^^^^^ method not found in `SplitWhitespace<'_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpngirxzjk.rs:13:29\n   |\n13 |  \
    \   String::from_utf8_lossy(&numbers).into_owned()\n   |                     \
    \        ^^^^^^^^ expected slice `[u8]`, found struct `SplitWhitespace`\n   |\n\
    \   = note: expected reference `&[u8]`\n              found reference `&SplitWhitespace<'_>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_sorted\
    \ = numbers.to_string();\n    let mut numbers_sorted = numbers_sorted.to_string();\n\
    \n    numbers_sorted.sort_by(|a, b| a.cmp(b));\n\n    numbers_sorted\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpn44kl5pe.rs:10:20\n   |\n10 |     numbers_sorted.sort_by(|a,\
    \ b| a.cmp(b));\n   |                    ^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<Vec<_>>()\n        .join(' ')\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpzvte614j.rs:7:32\n  |\n7 |     numbers.split_whitespace().sort_by(|a,\
    \ b| a.cmp(b)).collect::<Vec<_>>()\n  |                                ^^^^^^^\
    \ method not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.lines()\n\
    \        .map(|s| s.trim().parse().unwrap())\n        .sort_by(|x, y| x.cmp(y))\n\
    \        .collect::<Vec<_>>()\n        .into_iter()\n        .map(|x| format!(\"\
    {}\", x))\n        .collect::<Vec<_>>()\n        .join(\"\\n\")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmp8qsvnw_o.rs:9:10\n  |\n9 |         .sort_by(|x, y| x.cmp(y))\n\
    \  |          ^^^^^^^ method not found in `Map<std::str::Lines<'_>, [closure@/tmp/tmp8qsvnw_o.rs:8:14:\
    \ 8:43]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
    one three five\")\nfn sort_numbers(numbers: String) -> String {\n    numbers.chars().sort_by(|a,b|\
    \ a.to_digit() + '0' < b.to_digit()).collect()\n        .join(' ')\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmphez3f75o.rs:7:21\n  |\n7 |     numbers.chars().sort_by(|a,b|\
    \ a.to_digit() + '0' < b.to_digit()).collect()\n  |                     ^^^^^^^\
    \ method not found in `Chars<'_>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976141
