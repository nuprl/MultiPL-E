language: rs
name: HumanEval_46_fib4
results:
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `4`', /tmp/tmp6r2cttct.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     if n<0 {\n            return 0;\n        }\n        if n==0 {\n        \
    \    return 1;\n        }\n        if n==1 {\n            return 0;\n        }\n\
    \        if n==2 {\n            return 2;\n        }\n        if n==3 {\n    \
    \        return 0;\n        }\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmp4v5pw8bz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    (0..n).fold(0,\
    \ |a, b| {\n        (b + b + b + b).wrapping_add(b).wrapping_add(b).wrapping_add(b).wrapping_add(b)\n\
    \    })\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32`,\n right: `4`', /tmp/tmp04djc17l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    let mut result = 0;\n    let mut i = 4;\n    while i <= n {\n        if i\
    \ <= n {\n            result += i;\n        } else {\n            result -= i;\n\
    \            i += 1;\n        }\n    }\n    return result;\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976107
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"Negative Fibonacci number\")\n    }\n    if n == 0 {\n     \
    \   return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n\n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpe8h4ko45.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib:\
    \ isize = n;\n    fib += fib - fib + fib - fib;\n    fib\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpfz6owqrv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpjtom815f.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0; 4];\n\n    fib4[0] = fib4[1] = 0;\n    fib4[2] = fib4[3] = 1;\n\n\
    \    for i in 1..=n {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n\
    \    }\n\n    fib4[n]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvllvqg1.rs:17:15\n   |\n\
    17 |     fib4[0] = fib4[1] = 0;\n   |     -------   ^^^^^^^^^^^ expected integer,\
    \ found `()`\n   |     |\n   |     expected due to the type of this binding\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzvllvqg1.rs:18:15\n   |\n18 |  \
    \   fib4[2] = fib4[3] = 1;\n   |     -------   ^^^^^^^^^^^ expected integer, found\
    \ `()`\n   |     |\n   |     expected due to the type of this binding\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpzvllvqg1.rs:21:9\n\
    \   |\n21 |         fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n\
    \   |         ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpzvllvqg1.rs:21:19\n\
    \   |\n21 |         fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n\
    \   |                   ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpzvllvqg1.rs:21:31\n   |\n21 |         fib4[i] = fib4[i-1]\
    \ + fib4[i-2] + fib4[i-3] + fib4[i-4];\n   |                               ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tm"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 1;\n    }\n\
    \    let ret = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n    ret\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpp5_e59sh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n\
    \    }\n\n    use std::cmp::PartialOrd;\n    use std::cmp::Ordering::Greater;\n\
    \n    match n {\n        n when n < 4  => {\n            fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        }\n        n when n < 16 => {\n           \
    \ fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5) + fib4(n-6) + fib4(n-7) + fib4(n-8)\
    \ + fib4(n-9) + fib4(n-10) + fib4(n-11) + fib4(n-12) + fib4(n-13) + fib4(n-14)\
    \ + fib4(n-15) + fib4(n-16)\n        }\n        n when n < 26 => {\n         \
    \   fib4(n-3) + fib4(n-4) + fib4(n-5) + fib4(n-6) + fib4(n-7) + fib4(n-8) + fib4(n-9)\
    \ + fib4(n-10) + fib4(n-11) + fib4(n-12) + fib4(n-13) + fib4(n-14) + fib4(n-15)\
    \ + fib4(n-16) + fib4(n-17) + fib4(n-18) + fib4(n-19) + fib4(n-20) + fib4(n-21)\
    \ + fib4(n-22) + fib4(n-23) + fib4(n-24) + fib4(n-25) + fib4(n-26)\n        }\n\
    \        _ => {\n            fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5) + fib4(n-6)\
    \ + fib4(n-7) + fib4(n-8) + fib4(n-9) + fib4(n-10) + fib4(n-11) + fib4(n-12) +\
    \ fib4(n-13) + fib4(n-14) + fib4(n-15) + fib4(n-16) + fib4(n-17) + fib4(n-18)\
    \ + fib4(n-19) + fib4(n-20) + fib4(n-21) + fib4(n-22) + fib4(n-23) + fib4(n-24)\
    \ + fib4(n-25) + fib4(n-26) + fib4(n-27) + fib4(n-28) + fib4(n-29) + fib4(n-30)\
    \ + fib4(n-31) + fib4(n-32) + fib4(n-33) + fib4(n-34) + fib4(n-35) + fib4(n-36)\
    \ + fib4(n-37) + fib4(n-38\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpaa338onv.rs:47:3\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                            - unclosed\
    \ delimiter\n...\n27 |     match n {\n   |             - unclosed delimiter\n\
    ...\n37 |         _ => {\n   |              - this delimiter might not be properly\
    \ closed...\n38 |             fib4(n-2) + f...\n39 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n47 | }\n   |   ^\n\nerror: expected\
    \ one of `=>`, `@`, `if`, or `|`, found `when`\n  --> /tmp/tmpaa338onv.rs:28:11\n\
    \   |\n28 |         n when n < 4  => {\n   |           ^^^^ expected one of `=>`,\
    \ `@`, `if`, or `|`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpaa338onv.rs:38:477\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                            - closing\
    \ delimiter possibly meant for this\n...\n38 |             fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) + fib4(n-5) + fib4(n-6) + fib4(n-7) + fib4(n-8) + fib4(n-9) + fib4(n-10)\
    \ + fib4(n-11) + fib4(n-12) + fib4(n-13) + fib4(n-14) + fib4(n-15) + fib4(n-16)\
    \ + fib4(n-17) + fib4(n-18) + fib4(n-19) + fib4(n-20) + fib4(n-21) + fib4(n-22)\
    \ + fib4(n-23) + fib4(n-24) + fib4(n-25) + fib4(n-26) + fib4(n-27) + fib4(n-28)\
    \ + fib4(n-29) + fib4(n-30) + fib4(n-31) + fib4(n-32) + fib4(n-33) + fib4(n-34)\
    \ + fib4(n-35) + fib4(n-36) + fib4(n-37) + fib4(n...\n   |                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  ^ unclosed delimiter\n39 | }\n   | ^ mismatched closing delimiter\n\nwarning:\
    \ unused import: `std::cmp::Ordering`\n  --> /tmp/tmpaa338onv.rs:15:9\n   |\n\
    15 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n   =\
    \ note: `#[warn(unused_imports"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let fib4\
    \ = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n    return fib4\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpwwx9g40g.rs:21:69\n\
    \   |\n21 |     let fib4 = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n -\
    \ 1)\n   |                                                                   \
    \  ^ help: add `;` here\n22 |     return fib4\n   |     ------ unexpected token\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0 }\n    fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    let (left, right, sum) = fib3(n);\n\
    \    let mut result = sum;\n    let mut tmp = n;\n    while tmp != 0 {\n     \
    \   result += (right - left + 1) * (tmp % 4) + left;\n        tmp /= 4;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib3` in this scope\n  --> /tmp/tmprt742rpc.rs:18:30\n\
    \   |\n18 |     let (left, right, sum) = fib3(n);\n   |                      \
    \        ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // BASE CASE\n\
    \    if n == 0 || n == 1 || n == 2 {\n        return n;\n    }\n\n    // RECURSIVE\
    \ CASES\n    // The base case is when n = 0\n    match fib4(n-1) {\n        1\
    \ => 1,\n        2 => 2,\n        _ => match fib4(n-2) {\n            1 => 1,\n\
    \            2 => 2,\n            _ => match fib4(n-3) {\n                1 =>\
    \ 1,\n                2 => 2,\n                _ => match fib4(n-4) {\n      \
    \              1 => 1,\n                    2 => 2,\n                    _ =>\
    \ 4\n                }\n            }\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9qdxrfe5.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fib4_rec(n,\
    \ 0, 0, 0)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib4_rec` in this scope\n  --> /tmp/tmpbq3m_u20.rs:15:5\n\
    \   |\n15 |     fib4_rec(n, 0, 0, 0)\n   |     ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // write your\
    \ code\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3jq_9aj1.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 0\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpo309jsp0.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::iter::repeat;\n\
    \    iter::repeat(n - 4).fold(0, |mem1, n| mem1 + iter::repeat(n - 3).fold(0,\
    \ |mem2, n| mem2 + iter::repeat(n - 2).fold(0, |mem3, n| mem3 + iter::repeat(n\
    \ - 1).fold(0, |mem4, n| mem4 + n))));\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `iter`\n\
    \  --> /tmp/tmpowsyuojc.rs:16:5\n   |\n16 |     iter::repeat(n - 4).fold(0, |mem1,\
    \ n| mem1 + iter::repeat(n - 3).fold(0, |mem2, n| mem2 + iter::repeat(n - 2).fold(0,\
    \ |mem3, n| mem3 ...\n   |     ^^^^ use of undeclared crate or module `iter`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `iter`\n\
    \  --> /tmp/tmpowsyuojc.rs:16:50\n   |\n16 |     iter::repeat(n - 4).fold(0, |mem1,\
    \ n| mem1 + iter::repeat(n - 3).fold(0, |mem2, n| mem2 + iter::repeat(n - 2).fold(0,\
    \ |mem3, n| mem3 ...\n   |                                                  ^^^^\
    \ use of undeclared crate or module `iter`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `iter`\n  --> /tmp/tmpowsyuojc.rs:16:95\n\
    \   |\n16 | ...ter::repeat(n - 3).fold(0, |mem2, n| mem2 + iter::repeat(n - 2).fold(0,\
    \ |mem3, n| mem3 + iter::repeat(n - 1).fold(0, |mem4, n| mem4 + ...\n   |    \
    \                                            ^^^^ use of undeclared crate or module\
    \ `iter`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module\
    \ `iter`\n  --> /tmp/tmpowsyuojc.rs:16:140\n   |\n16 | ...ter::repeat(n - 2).fold(0,\
    \ |mem3, n| mem3 + iter::repeat(n - 1).fold(0, |mem4, n| mem4 + n))));\n   | \
    \                                               ^^^^ use of undeclared crate or\
    \ module `iter`\n\nwarning: unused import: `std::iter::repeat`\n  --> /tmp/tmpowsyuojc.rs:15:9\n\
    \   |\n15 |     use std::iter::repeat;\n   |         ^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpowsyuojc.rs:14:22\n   |\n14 | fn fib4(n: isize) -> isize\
    \ {\n   |    ----              ^^^^^ expected `isize`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 5 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0308, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    (0..=n).fold(0,\
    \ |mem, i| {\n        mem + i * fib(n - i - 1);\n    })\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpmlpnhkbo.rs:16:19\n\
    \   |\n16 |         mem + i * fib(n - i - 1);\n   |                   ^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmlpnhkbo.rs:15:30\n\
    \   |\n15 |       (0..=n).fold(0, |mem, i| {\n   |  ______________________________^\n\
    16 | |         mem + i * fib(n - i - 1);\n   | |                             \
    \    - help: remove this semicolon\n17 | |     })\n   | |_____^ expected `isize`,\
    \ found `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut temp1 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\
    \    temp1 = temp1 + temp1;\n    return temp1;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `4`', /tmp/tmp8r84qpnt.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4 argument {} is negative!\", n);\n    }\n    if n < 3 {\n\
    \        return n;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fib4 argument -1 is negative!'', /tmp/tmpn34wygql.rs:16:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >=\
    \ 0 && n < 4, \"fib4 number sequence out of bounds: {}\", n);\n    if n == 0 {\n\
    \        return 0;\n    } else if n == 1 {\n        return 1;\n    } else if n\
    \ == 2 {\n        return 2;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fib4 number sequence out of bounds: 5'',
    /tmp/tmp5mlxw8fo.rs:15:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  \
    \  }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp0mxse_sp.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => {\n            let prev = fib4(n - 3);\n            let curr = fib4(n - 2);\n\
    \            prev + curr + prev + curr;\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_1ct_42m.rs:20:14\n   |\n\
    20 |           _ => {\n   |  ______________^\n21 | |             let prev = fib4(n\
    \ - 3);\n22 | |             let curr = fib4(n - 2);\n23 | |             prev +\
    \ curr + prev + curr;\n   | |                                      - help: remove\
    \ this semicolon\n24 | |         }\n   | |_________^ expected `isize`, found `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for _ in 0..n {\n        result = result + 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp29avbwrg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n    let result = (fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4))\n    \n    return result;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmp9k_jcps7.rs:24:65\n\
    \   |\n24 |     let result = (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\
    \   |                                                                 ^ help:\
    \ add `;` here\n25 |     \n26 |     return result;\n   |     ------ unexpected\
    \ token\n\nwarning: unnecessary parentheses around assigned value\n  --> /tmp/tmp9k_jcps7.rs:24:18\n\
    \   |\n24 |     let result = (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\
    \   |                  ^                                             ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n24 -     let result = (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\
    24 +     let result = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   | \n\n\
    error: aborting due to previous error; 1 warning emitted\n\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        0\n    } else if n == 2 {\n      \
    \  2\n    } else if n == 3 {\n        0\n    } else {\n        let first = fib4(n\
    \ - 1);\n        let second = fib4(n - 2);\n        let third = fib4(n - 3);\n\
    \        first + second + third + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >=\
    \ 0, \"fib4 requires a positive number\");\n    assert!(n <= 4, \"fib4 requires\
    \ an integer number less than 4\");\n    let mut num = 0;\n    for _ in 0..n {\n\
    \        num += 1;\n    }\n    num\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fib4 requires an integer number less than
    4'', /tmp/tmp0854a6p9.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n   \
    \ }\n    if n == 3 {\n        return 1;\n    }\n    if n == 4 {\n        return\
    \ 1;\n    }\n    if n == 5 {\n        return 4;\n    }\n    return fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `25`,\n right: `28`', /tmp/tmp5_z0l7_4.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 ||\
    \ n >= 5 {\n        println!(\"fib4({}) error!\", n);\n        0\n    } else {\n\
    \        let mut fib4_num = 0;\n        if n <= 4 {\n            fib4_num += 1;\n\
    \        }\n        if n <= 3 {\n            fib4_num += 1;\n            fib4_num\
    \ += 1;\n        }\n        if n <= 2 {\n            fib4_num += 1;\n        \
    \    fib4_num += 1;\n            fib4_num += 1;\n        }\n        if n <= 1\
    \ {\n            fib4_num += 1;\n            fib4_num += 1;\n            fib4_num\
    \ += 1;\n            fib4_num += 1;\n        }\n        fib4_num\n    }\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpcsgvnsy1.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: 'fib4(5) error!

    '
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    (1..n).fold(0,\
    \ |a, x| {\n        (a + b + c + d)\n            .clone()\n            .map(|y|\
    \ {\n                ((x + y) as i32).wrapping_add(\n                    ((y +\
    \ a) as i32).wrapping_add(\n                        ((y + b) as i32).wrapping_add(\n\
    \                            ((y + c) as i32).wrapping_add(\n                \
    \                ((y + d) as i32).wrapping_add(\n                            \
    \        ((y + d) as i32).wrapping_mul(\n                                    \
    \    4\n                                    )\n                              \
    \  )\n                            )\n                        )\n             \
    \       )\n                )\n            })\n            .unwrap()\n    })\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `b` in this scope\n  --> /tmp/tmpj6du5kbc.rs:16:14\n\
    \   |\n16 |         (a + b + c + d)\n   |              ^ help: a local variable\
    \ with a similar name exists: `a`\n\nerror[E0425]: cannot find value `c` in this\
    \ scope\n  --> /tmp/tmpj6du5kbc.rs:16:18\n   |\n16 |         (a + b + c + d)\n\
    \   |                  ^ help: a local variable with a similar name exists: `a`\n\
    \nerror[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmpj6du5kbc.rs:16:22\n\
    \   |\n16 |         (a + b + c + d)\n   |                      ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror[E0425]: cannot find value\
    \ `b` in this scope\n  --> /tmp/tmpj6du5kbc.rs:21:31\n   |\n21 |             \
    \            ((y + b) as i32).wrapping_add(\n   |                            \
    \   ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `c` in this scope\n  --> /tmp/tmpj6du5kbc.rs:22:35\n   |\n\
    22 | ...                   ((y + c) as i32).wrapping_add(\n   |              \
    \               ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `d` in this scope\n  --> /tmp/tmpj6du5kbc.rs:23:39\n   |\n\
    23 | ...                   ((y + d) as i32).wrapping_add(\n   |              \
    \               ^ help: a local variable with a similar name exists: `a`\n\nerror[E0425]:\
    \ cannot find value `d` in this scope\n  --> /tmp/tmpj6du5kbc.rs:24:43\n   |\n\
    24 | ...                   ((y + d) as i32).wrapping_mul(\n   |              \
    \               ^ help: a local variable with a similar name exists: `a`\n\nerror[E0599]:\
    \ `isize` is not an iterator\n  --> /tmp/tmpj6du5kbc.rs:18:14\n   |\n18 |    \
    \         .map(|y| {\n   |              ^^^ `isize` is not an iterator\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `isize:\
    \ Iterator`\n           which is required by `&mut isize: Iterator`\n\nerror:\
    \ aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"negative number given to fib4: {}\", n)\n    }\n    \n    if\
    \ n == 0 {\n        return 0;\n    }\n    \n    if n == 1 {\n        return 0;\n\
    \    }\n    \n    if n == 2 {\n        return 2;\n    }\n    \n    if n == 3 {\n\
    \        return 0;\n    }\n    \n    if n == 4 {\n        return 1;\n    }\n \
    \   \n    if n == 5 {\n        return 4;\n    }\n    \n    if n == 6 {\n     \
    \   return 8;\n    }\n    \n    if n == 7 {\n        return 14;\n    }\n    \n\
    \    let result = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n   \
    \ \n    return result;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `28`', /tmp/tmpufeb1kyd.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0; n - 1];\n    for i in 0..n {\n        fib4[i] = fib4[i - 1] + fib4[i\
    \ - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n    fib4[n - 1]\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj0l98mj0.rs:15:28\n   |\n\
    15 |     let mut fib4 = vec![0; n - 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n15 |     let mut\
    \ fib4 = vec![0; (n - 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpj0l98mj0.rs:17:9\n   |\n17 |         fib4[i]\
    \ = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n   |         ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpj0l98mj0.rs:17:19\n\
    \   |\n17 |         fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i\
    \ - 4];\n   |                   ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpj0l98mj0.rs:17:33\n   |\n17 |  \
    \       fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n   |\
    \                                 ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpj0l98mj"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    use std::cmp::PartialOrd;\n    fn fib(n: isize) -> isize {\n        if n\
    \ < 2 {\n            1\n        } else if n < 5 {\n            fib(n-1) + fib(n-2)\n\
    \        } else if n < 10 {\n            fib(n-1) + fib(n-2) + fib(n-3)\n    \
    \    } else {\n            fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n       \
    \ }\n    }\n    fib(n)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpirz4b0k5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 1;\n    let mut c = 1;\n    let mut d = 1;\n    for i in\
    \ 1..n {\n        let c = a + b + c + d;\n        a = b;\n        b = c;\n   \
    \     c = d;\n        d = c;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmp849linfx.rs:19:9\n   |\n19\
    \ |     for i in 1..n {\n   |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp849linfx.rs:17:9\n\
    \   |\n17 |     let mut c = 1;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0384]: cannot assign twice to immutable variable `c`\n  --> /tmp/tmp849linfx.rs:23:9\n\
    \   |\n20 |         let c = a + b + c + d;\n   |             -\n   |         \
    \    |\n   |             first assignment to `c`\n   |             help: consider\
    \ making this binding mutable: `mut c`\n...\n23 |         c = d;\n   |       \
    \  ^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::mem;\n\
    \    use std::cmp::{Ordering};\n\n    if n == 0 {\n        0\n    } else if n\
    \ == 1 {\n        0\n    } else if n == 2 {\n        2\n    } else if n == 3 {\n\
    \        0\n    } else {\n        let a = fib4(n - 1);\n        let b = fib4(n\
    \ - 2);\n        let c = fib4(n - 3);\n        let d = fib4(n - 4);\n        mem::swap(a,\
    \ c);\n        mem::swap(b, d);\n        a + b + c + d\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: unused import: `Ordering`\n  --> /tmp/tmpd6yw48sf.rs:16:20\n \
    \  |\n16 |     use std::cmp::{Ordering};\n   |                    ^^^^^^^^\n \
    \  |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd6yw48sf.rs:31:19\n   |\n31 |         mem::swap(a, c);\n\
    \   |                   ^\n   |                   |\n   |                   expected\
    \ `&mut _`, found `isize`\n   |                   help: consider mutably borrowing\
    \ here: `&mut a`\n   |\n   = note: expected mutable reference `&mut _`\n     \
    \                      found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd6yw48sf.rs:31:22\n   |\n31 |         mem::swap(a, c);\n   |  \
    \                    ^\n   |                      |\n   |                    \
    \  expected `&mut _`, found `isize`\n   |                      help: consider\
    \ mutably borrowing here: `&mut c`\n   |\n   = note: expected mutable reference\
    \ `&mut _`\n                           found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd6yw48sf.rs:32:19\n   |\n32 |         mem::swap(b, d);\n\
    \   |                   ^\n   |                   |\n   |                   expected\
    \ `&mut _`, found `isize`\n   |                   help: consider mutably borrowing\
    \ here: `&mut b`\n   |\n   = note: expected mutable reference `&mut _`\n     \
    \                      found type `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd6yw48sf.rs:32:22\n   |\n32 |         mem::swap(b, d);\n   |  \
    \                    ^\n   |                      |\n   |                    \
    \  expected `&mut _`, found `isize`\n   |                      help: consider\
    \ mutably borrowing here: `&mut d`\n   |\n   = note: expected mutable reference\
    \ `&mut _`\n                           found type `isize`\n\nerror: aborting due\
    \ to 4 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 1 {\n\
    \        0\n    } else if n == 1 {\n        0\n    } else {\n        fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpdw60xku6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a: isize\
    \ = 0;\n    let mut b: isize = 1;\n    let mut c: isize = 2;\n    let mut d: isize\
    \ = 3;\n    for i in 1..n {\n        c = a + b + c + d;\n        a = b + d;\n\
    \        b = c;\n        d = a + b;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `754`,\n right: `4`', /tmp/tmpynhxo0ch.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return n;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976109
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else if n == 1 { 1 }\n    else { fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     let prev = n + 1;\n        let next = n - 1;\n        if next < 0 {\n  \
    \          break;\n        }\n        println!(\"fib4({}) = {}\", prev, fib4(next));\n\
    \    }\n    return 0;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: 'fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) = 0

    fib4(2) '
  timestamp: 1659976108
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match (n - 1)\
    \ % (4 * 7) {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 =>\
    \ 0,\n        _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n  \
    \  }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpf5x6r1kr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n   \
    \ if n == 2 {\n        return 2;\n    }\n\n    if n == 3 {\n        return 0;\n\
    \    }\n\n    if n == 4 {\n        return 4;\n    }\n\n    return fib4(n - 4)\
    \ + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpha700sbv.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"fib4() expects n to be non-negative\")\n    }\n\n    if n ==\
    \ 0 {\n        return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\
    \n    if n == 2 {\n        return 2;\n    }\n\n    if n == 3 {\n        return\
    \ 0;\n    }\n\n    if n == 4 {\n        return 0;\n    }\n\n    if n == 5 {\n\
    \        return 4;\n    }\n\n    if n == 6 {\n        return 8;\n    }\n\n   \
    \ if n == 7 {\n        return 14;\n    }\n\n    let fib4 = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n\n    fib4\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpb0ug8rbw.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match (n, 0)\
    \ {\n        (0, _) => 0,\n        (0, _) => 0,\n        (i, _) => i,\n      \
    \  (i, _) => i + fib4(i-1),\n        (i, _) => i + fib4(i-2) + fib4(i-3) + fib4(i-4)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpvojotr5y.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // TODO: Write\
    \ code here\n    let mut sum = 0;\n    let mut i = 1;\n    while i <= n {\n  \
    \      sum = sum + i;\n        i = i + 1;\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `4`', /tmp/tmpeddiqnyx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n   \
    \ }\n    if n == 3 {\n        return 2;\n    }\n    if n == 4 {\n        return\
    \ 0;\n    }\n    let rem = n % 4;\n    let result = if rem == 0 {\n        fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    } else {\n        fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(rem)\n    };\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp_0z7ry4r.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        n\
    \ => {\n            let m = fib4(n - 3) + fib4(n - 2) + fib4(n - 1) + fib4(n);\n\
    \            *\n        }\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpvig8c9ff.rs:23:9\n\
    \   |\n23 |         }\n   |         ^ expected expression\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else if n == 1 { 0 }\n    else { fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 1;\n    let mut c = 0;\n    for _ in 0..n {\n        let\
    \ d = a + b + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + \n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_q608d3h.rs:28:3\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                            - unclosed\
    \ delimiter\n...\n18 |     for _ in 0..n {\n   |                   - this delimiter\
    \ might not be properly closed...\n19 |         let d = a + b + c...\n20 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n28 | }\n\
    \   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmp_q608d3h.rs:20:1\n\
    \   |\n20 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_q608d3h.rs:14:22\n   |\n14 | fn fib4(n: isize) -> isize {\n  \
    \ |    ----              ^^^^^ expected `isize`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 4\n    }\n    if n > 4 {\n        return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpubq472rf.rs:30:5\n\
    \   |\n14 |   fn fib4(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of this return type\n...\n30 | /     if n > 4 {\n31\
    \ | |         return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n32\
    \ | |     }\n   | |_____^ expected `isize`, found `()`\n   |\n   = note: `if`\
    \ expressions without `else` evaluate to `()`\n   = help: consider adding an `else`\
    \ block that evaluates to the expected type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659976102
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => {\n            let mut fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n            fib4\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        4\
    \ => 0,\n        _ => {\n            let f = fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1);\n            f + f\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `96`,\n right: `28`', /tmp/tmprcj_gjlx.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0; n + 1];\n    for i in 0..=fib4.len() {\n        fib4[i] += fib4[i\
    \ - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n    fib4[n]\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps3uzncvt.rs:15:28\n   |\n\
    15 |     let mut fib4 = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n15 |     let mut\
    \ fib4 = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmps3uzncvt.rs:19:5\n   |\n19 |     fib4[n]\n\
    \   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 { return\
    \ 0; }\n\n    fn fibo(acc: isize, v: isize) -> isize {\n        if v < 4 { return\
    \ acc; }\n        fibo(acc + v, v - 4) + fibo(acc, v - 3) + fibo(acc + v, v -\
    \ 2) + fibo(acc + v, v - 1);\n    }\n    fibo(n, n - 4);\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv89g89gp.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n21 |     fibo(n, n - 4);\n   |                \
    \   - help: remove this semicolon\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv89g89gp.rs:17:38\n\
    \   |\n17 |     fn fibo(acc: isize, v: isize) -> isize {\n   |        ----   \
    \                       ^^^^^ expected `isize`, found `()`\n   |        |\n  \
    \ |        implicitly returns `()` as its body has no tail or `return` expression\n\
    18 |         if v < 4 { return acc; }\n19 |         fibo(acc + v, v - 4) + fibo(acc,\
    \ v - 3) + fibo(acc + v, v - 2) + fibo(acc + v, v - 1);\n   |                \
    \                                                                            \
    \  - help: remove this semicolon\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut res\
    \ = 0;\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return\
    \ 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n    \
    \    return 0;\n    }\n    for _ in 0..(n-4) {\n        res += 1;\n    }\n   \
    \ return res + fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpccsf_81v.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0; }\n    if n == 1 { return 1; }\n    if n == 2 { return 2; }\n    if\
    \ n == 3 { return 0; }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpw51ipgi2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 } else { fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4) }\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp15oqjx1f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    let f = fib4(n - 1);\n    let g = fib4(n\
    \ - 2);\n    let h = fib4(n - 3);\n    let i = fib4(n - 4);\n    f * g + h + i\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // assert(n\
    \ < 50);\n    if n <= 0 {\n        return 0;\n    }\n\n    let mut fib_number\
    \ = 1;\n    for _ in 0..n {\n        fib_number *= 4;\n    }\n    fib_number +=\
    \ 3;\n    fib_number\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1027`,\n right: `4`', /tmp/tmpg_mudxv4.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn next(n: isize)\
    \ -> isize {\n        if n == 0 || n == 1 {\n            return 0;\n        }\n\
    \        \n        let x = next(n-1) + next(n-2) + next(n-3) + next(n-4);\n  \
    \      \n        return x;\n    }\n    \n    let val = next(n-1);\n    \n    return\
    \ val\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    if n == 1 {\n        return 1;\n    }\n\n    if\
    \ n == 2 {\n        return 2;\n    }\n\n    let n3 = n - 3;\n    let n2 = n -\
    \ 2;\n    let n1 = n - 1;\n\n    return fib4(n1) + fib4(n2) + fib4(n3) + fib4(n4);\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `n4` in this scope\n  --> /tmp/tmpx0b4fyvi.rs:31:50\n\
    \   |\n31 |     return fib4(n1) + fib4(n2) + fib4(n3) + fib4(n4);\n   |      \
    \                                            ^^ help: a local variable with a\
    \ similar name exists: `n`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n\
    \    if n == 4 {\n        return 3;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpwnd6z9_h.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 1;\n    let mut b = 1;\n    let mut c = 1;\n    let mut d = 1;\n    while n\
    \ > 0 {\n        let tmp = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = tmp;\n        n = n - 1;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp8bykv4vl.rs:25:9\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |         - help: consider making\
    \ this binding mutable: `mut n`\n...\n25 |         n = n - 1;\n   |         ^^^^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    use std::mem::{size_of, transmute};\n\n    if n < 0 {\n        panic!(\"\
    fib4 numbers are defined for fib4(0) through fib4(n - 4)\")\n    }\n    if n <\
    \ 4 {\n        return 0;\n    }\n    let n = n - 4;\n    match size_of::<usize>()\
    \ {\n        4 => 4,\n        _ => panic!(\"fib4 numbers are defined for fib4(0)\
    \ through fib4(n - 4)\"),\n    }\n    let n = n - 4;\n    let a = transmute(vec![0;\
    \ 4]);\n    let b = transmute(vec![0; 4]);\n    let c = transmute(vec![0; 4]);\n\
    \    let d = transmute(vec![0; 4]);\n    for i in 0..4 {\n        let a[i] = n\n\
    \        + transmute(vec![0; 4]).iter().cloned()\n        .take(4).fold(0, |x,\
    \ y| x.checked_add(y).expect(\"error calculating fib4\"));\n        let b[i] =\
    \ n\n        + transmute(vec![0; 4]).iter().cloned()\n        .skip(4).fold(0,\
    \ |x, y| x.checked_add(y).expect(\"error calculating fib4\"));\n        let c[i]\
    \ = n\n        + transmute(vec![0; 4]).iter().cloned()\n        .skip(8).fold(0,\
    \ |x, y| x.checked_add(y).expect(\"error calculating fib4\"));\n        let d[i]\
    \ = n\n        + transmute(vec![0; 4]).iter().cloned()\n        .skip(12).fold(0,\
    \ |x, y| x.checked_add(y).expect(\"error calculating fib4\"));\n    }\n    let\
    \ mut fib4 = transmute(vec![0; 4]);\n    for i in 0..4 {\n        fib4[i] = a[i\
    \ as usize] + b[i as usize] + c[i as usize] + d[i as usize];\n    }\n    fib4[0]\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `:`, `;`, `=`, `@`, or `|`, found `[`\n  --> /tmp/tmp3r174085.rs:35:14\n\
    \   |\n35 |         let a[i] = n\n   |              ^ expected one of `:`, `;`,\
    \ `=`, `@`, or `|`\n\nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp3r174085.rs:15:9\n\
    \   |\n15 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: `match` arms\
    \ have incompatible types\n  --> /tmp/tmp3r174085.rs:27:14\n   |\n25 | /     match\
    \ size_of::<usize>() {\n26 | |         4 => 4,\n   | |              - this is\
    \ found to be of type `{integer}`\n27 | |         _ => panic!(\"fib4 numbers are\
    \ defined for fib4(0) through fib4(n - 4)\"),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `()`\n28 | |     }\n   | |_____- `match` arms have incompatible\
    \ types\n   |\n   = note: this error originates in the macro `$crate::panic::panic_2015`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpjr1wkmxw.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut a =\
    \ 0;\n    let mut b = 0;\n    let mut c = 0;\n    for _ in 0..n {\n        c =\
    \ a + b + c;\n        a = b;\n        b = c;\n    }\n    c\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpmfdt5l1w.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    let mut a = fib4(n - 2);\n    let mut\
    \ b = fib4(n - 3);\n    let mut c = fib4(n - 4);\n    let mut d = fib4(n - 5);\n\
    \    let result = a + b + c + d;\n    println!(\"{}\", result);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpph9acepu.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use core::fmt;\n\
    \n    if n == 0 || n == 1 {\n        return n;\n    }\n\n    let mut fib4: isize\
    \ = 0;\n    fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n \
    \   fib4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `core`\n  --> /tmp/tmpizhj6947.rs:15:9\n\
    \   |\n15 |     use core::fmt;\n   |         ^^^^ maybe a missing crate `core`?\n\
    \nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpizhj6947.rs:22:13\n\
    \   |\n21 |     let mut fib4: isize = 0;\n   |         -------- `fib4` has type\
    \ `isize`\n22 |     fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n   |             ^^^^-------\n   |             |\n   |             call\
    \ expression requires function\n\nerror[E0618]: expected function, found `isize`\n\
    \  --> /tmp/tmpizhj6947.rs:22:27\n   |\n21 |     let mut fib4: isize = 0;\n  \
    \ |         -------- `fib4` has type `isize`\n22 |     fib4 += fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n   |                           ^^^^-------\n\
    \   |                           |\n   |                           call expression\
    \ requires function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpizhj6947.rs:22:41\n\
    \   |\n21 |     let mut fib4: isize = 0;\n   |         -------- `fib4` has type\
    \ `isize`\n22 |     fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n   |                                         ^^^^-------\n   |        \
    \                                 |\n   |                                    \
    \     call expression requires function\n\nerror[E0618]: expected function, found\
    \ `isize`\n  --> /tmp/tmpizhj6947.rs:22:55\n   |\n21 |     let mut fib4: isize\
    \ = 0;\n   |         -------- `fib4` has type `isize`\n22 |     fib4 += fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n   |                      \
    \                                 ^^^^-------\n   |                          \
    \                             |\n   |                                        \
    \               call expression requires function\n\nerror: aborting due to 5\
    \ previous errors\n\nSome errors have detailed explanations: E0432, E0618.\nFor\
    \ more information about an error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        0\n    } else {\n        n + (fib4(n - 4) + fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1))\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `31`,\n right: `4`', /tmp/tmpuly01oza.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![];\n    fib4.push(i64::from(n));\n    for i in 1..=n-1 {\n        let\
    \ num = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        fib4.push(num);\n\
    \    }\n    fib4[n]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `i64: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpxpogq29w.rs:16:15\n   |\n16 |     fib4.push(i64::from(n));\n   |   \
    \            ^^^^^^^^^ the trait `From<isize>` is not implemented for `i64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0277]: the type `[i64]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxpogq29w.rs:18:19\n   |\n18 |  \
    \       let num = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n   |       \
    \            ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i64]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<i64>`\n\
    \nerror[E0277]: the type `[i64]` cannot be indexed by `isize`\n  --> /tmp/tmpxpogq29w.rs:18:31\n\
    \   |\n18 |         let num = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n\
    \   |                               ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[i64]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<i64>`\n\nerror[E0277]: the type `[i64]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpxpogq29w.rs:18:43\n   |\n18 |         let num = fib4[i-1]\
    \ + fib4[i-2] + fib4[i-3] + fib4[i-4];\n   |                                 \
    \          ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i64]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of "
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    let mut fib4 = 0; // Initialize fib4 variable\
    \ to 0\n\n    if n % 2 == 0 {\n        fib4 = fib4 + 1;\n    }\n    else {\n \
    \       fib4 = fib4 + fib4(n - 2);\n    }\n\n    if n % 3 == 0 {\n        fib4\
    \ = fib4 + 1;\n    }\n    else {\n        fib4 = fib4 + fib4(n - 3);\n    }\n\n\
    \    if n % 5 == 0 {\n        fib4 = fib4 + 1;\n    }\n    else {\n        fib4\
    \ = fib4 + fib4(n - 5);\n    }\n\n    fib4\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `{integer}`\n  --> /tmp/tmp8ys3qogg.rs:25:23\n\
    \   |\n19 |     let mut fib4 = 0; // Initialize fib4 variable to 0\n   |     \
    \    -------- `fib4` has type `{integer}`\n...\n25 |         fib4 = fib4 + fib4(n\
    \ - 2);\n   |                       ^^^^-------\n   |                       |\n\
    \   |                       call expression requires function\n\nerror[E0618]:\
    \ expected function, found `{integer}`\n  --> /tmp/tmp8ys3qogg.rs:32:23\n   |\n\
    19 |     let mut fib4 = 0; // Initialize fib4 variable to 0\n   |         --------\
    \ `fib4` has type `{integer}`\n...\n32 |         fib4 = fib4 + fib4(n - 3);\n\
    \   |                       ^^^^-------\n   |                       |\n   |  \
    \                     call expression requires function\n\nerror[E0618]: expected\
    \ function, found `{integer}`\n  --> /tmp/tmp8ys3qogg.rs:39:23\n   |\n19 |   \
    \  let mut fib4 = 0; // Initialize fib4 variable to 0\n   |         -------- `fib4`\
    \ has type `{integer}`\n...\n39 |         fib4 = fib4 + fib4(n - 5);\n   |   \
    \                    ^^^^-------\n   |                       |\n   |         \
    \              call expression requires function\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match (n, 0)\
    \ {\n        (0,0) => 0,\n        (0,_) => 1,\n        (1,_) => 1,\n        (2,_)\
    \ => 2,\n        (3,_) => 0,\n        (4,_) => 1,\n        (5,_) => 2,\n     \
    \   (6,_) => 0,\n        (7,_) => 1,\n        (8,_) => 2,\n        (9,_) => 3,\n\
    \        (10,_) => 0,\n        (11,_) => 1,\n        (12,_) => 2,\n        (13,_)\
    \ => 3,\n        (14,_) => 4,\n        (15,_) => 0,\n        _ => fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpjjbe1zs_.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return 0;\n    }\n    let f4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n    f4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp3pswdi3h.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\n\
    \        0\n    } else if n > 2 {\n        fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    } else {\n        n - 4\n    }\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp4w6jfdbw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // Base case\n\
    \    if n < 0 { return 0; }\n\n    // Recursive case\n    let mut a1 = 1;\n  \
    \  let mut a2 = 1;\n    let mut a3 = 1;\n    let mut a4 = 1;\n    let mut a5 =\
    \ a1;\n    let mut a6 = a2;\n    let mut a7 = a3;\n    let mut a8 = a4;\n    let\
    \ mut a9 = a1;\n    let mut b1 = a4;\n    let mut b2 = a5;\n    let mut b3 = a6;\n\
    \    let mut b4 = a7;\n    let mut b5 = a8;\n    let mut b6 = a9;\n\n    for i\
    \ in (0..n).step_by(n) {\n        let mut c = a1 + a2 + a3 + a4 + a5;\n      \
    \  b1 = a4;\n        b2 = a5;\n        b3 = a6;\n        b4 = a7;\n        b5\
    \ = a8;\n        b6 = a9;\n\n        a = b1;\n        b = b2;\n        c = b3\
    \ + b4;\n        d = b5 + b6;\n        e = b1 - b2;\n        f = b7 - b8;\n  \
    \      g = a1 + a2 - a3 + a4 + a5 - a6 - a7;\n        h = a1 - a2 + a3 - a4 +\
    \ a5 + a6 + a7 + a8;\n        i = (b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9\
    \ + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8) * -1;\n    }\n\n    return a as isize;\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `a` in this scope\n  --> /tmp/tmp3fuzu35o.rs:44:9\n\
    \   |\n44 |         a = b1;\n   |         ^ help: a local variable with a similar\
    \ name exists: `a1`\n\nerror[E0425]: cannot find value `b` in this scope\n  -->\
    \ /tmp/tmp3fuzu35o.rs:45:9\n   |\n45 |         b = b2;\n   |         ^ help: a\
    \ local variable with a similar name exists: `b1`\n\nerror[E0425]: cannot find\
    \ value `d` in this scope\n  --> /tmp/tmp3fuzu35o.rs:47:9\n   |\n47 |        \
    \ d = b5 + b6;\n   |         ^ help: a local variable with a similar name exists:\
    \ `c`\n\nerror[E0425]: cannot find value `e` in this scope\n  --> /tmp/tmp3fuzu35o.rs:48:9\n\
    \   |\n48 |         e = b1 - b2;\n   |         ^ help: a local variable with a\
    \ similar name exists: `c`\n\nerror[E0425]: cannot find value `f` in this scope\n\
    \  --> /tmp/tmp3fuzu35o.rs:49:9\n   |\n49 |         f = b7 - b8;\n   |       \
    \  ^ help: a local variable with a similar name exists: `c`\n\nerror[E0425]: cannot\
    \ find value `b7` in this scope\n  --> /tmp/tmp3fuzu35o.rs:49:13\n   |\n49 | \
    \        f = b7 - b8;\n   |             ^^ help: a local variable with a similar\
    \ name exists: `a7`\n\nerror[E0425]: cannot find value `b8` in this scope\n  -->\
    \ /tmp/tmp3fuzu35o.rs:49:18\n   |\n49 |         f = b7 - b8;\n   |           \
    \       ^^ help: a local variable with a similar name exists: `a8`\n\nerror[E0425]:\
    \ cannot find value `g` in this scope\n  --> /tmp/tmp3fuzu35o.rs:50:9\n   |\n\
    50 |         g = a1 + a2 - a3 + a4 + a5 - a6 - a7;\n   |         ^ help: a local\
    \ variable with a similar name exists: `c`\n\nerror[E0425]: cannot find value\
    \ `h` in this scope\n  --> /tmp/tmp3fuzu35o.rs:51:9\n   |\n51 |         h = a1\
    \ - a2 + a3 - a4 + a5 + a6 + a7 + a8;\n   |         ^ help: a local variable with\
    \ a similar name exists: `c`\n\nerror[E0425]: cannot find value `b7` in this scope\n\
    \  --> /tmp/tmp3fuzu35o.rs:52:44\n   |\n52 |         i = (b1 + b2 + b3 + b4 +\
    \ b5 + b6 + b7 + b8 + b9 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8) * -1;\n   |\
    \                                            ^^ help: a local variable with a\
    \ similar name exists: `a7`\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659976103
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    let mut a: i32 = fib4(n - 1);\n    let mut b:\
    \ i32 = fib4(n - 2);\n    let mut c: i32 = fib4(n - 3);\n    let mut d: i32 =\
    \ fib4(n - 4);\n\n    a += b;\n    b += c;\n    c += d;\n    d += a;\n\n    a\
    \ as isize\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj6x9fnft.rs:19:22\n   |\n\
    19 |     let mut a: i32 = fib4(n - 1);\n   |                ---   ^^^^^^^^^^^\
    \ expected `i32`, found `isize`\n   |                |\n   |                expected\
    \ due to this\n   |\nhelp: you can convert an `isize` to an `i32` and panic if\
    \ the converted value doesn't fit\n   |\n19 |     let mut a: i32 = fib4(n - 1).try_into().unwrap();\n\
    \   |                                 ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj6x9fnft.rs:20:22\n   |\n20 |     let mut b: i32 = fib4(n\
    \ - 2);\n   |                ---   ^^^^^^^^^^^ expected `i32`, found `isize`\n\
    \   |                |\n   |                expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `i32` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     let mut b: i32 = fib4(n - 2).try_into().unwrap();\n   |\
    \                                 ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj6x9fnft.rs:21:22\n   |\n21 |     let mut c: i32 = fib4(n\
    \ - 3);\n   |                ---   ^^^^^^^^^^^ expected `i32`, found `isize`\n\
    \   |                |\n   |                expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `i32` and panic if the converted value doesn't\
    \ fit\n   |\n21 |     let mut c: i32 = fib4(n - 3).try_into().unwrap();\n   |\
    \                                 ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj6x9fnft.rs:22:22\n   |\n22 |     let mut d: i32 = fib4(n\
    \ - 4);\n   |                ---   ^^^^^^^^^^^ expected `i32`, found `isize`\n\
    \   |                |\n   |                expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `i32` and panic if the converted value doesn't\
    \ fit\n   |\n22 |     let mut d: i32 = fib4(n - 4).try_into().unwrap();\n   |\
    \                                 ++++++++++++++++++++\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 {\n\
    \        return n;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpt3ol_w3z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        0\n    } else if n == 2 {\n      \
    \  2\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = vec![0; n + 1];\n    fib4[0] = 0;\n    for i in 1..=fib4.len() {\n       \
    \ fib4[i] = fib4[i - 1] + fib4[i - 2];\n    }\n    fib4[n]\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz91emjhh.rs:15:28\n   |\n\
    15 |     let mut fib4 = vec![0; n + 1];\n   |                            ^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n15 |     let mut\
    \ fib4 = vec![0; (n + 1).try_into().unwrap()];\n   |                         \
    \   +     +++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpz91emjhh.rs:20:5\n   |\n20 |     fib4[n]\n\
    \   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn fib_4(i:\
    \ isize) -> isize {\n        match i {\n            0 => 0,\n            1 =>\
    \ 0,\n            2 => 2,\n            3 => 0,\n            _ => fib_4(i - 1)\
    \ + fib_4(i - 2) + fib_4(i - 3) + fib_4(i - 4),\n        }\n    }\n    fib_4(n).to_i()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_i` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpcr0s3nka.rs:24:14\n   |\n24 |     fib_4(n).to_i()\n   |\
    \              ^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let fib41 = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n    fib41 + n\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `4`', /tmp/tmp19jm6y6a.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    if n == 4 {\n        return 0;\n    }\n\
    \    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpu849m7ah.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    if n == 1 {\n        return 1;\n    }\n\n   \
    \ if n == 2 {\n        return 2;\n    }\n\n    if n == 3 {\n        return 0;\n\
    \    }\n\n    let mut fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n\n    fib4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp9dbqjt5k.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else if n == 1 { 1 }\n    else { fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) + fib4(n - 5) }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976109
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822467
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 4 {\n\
    \        0\n    } else if n < 9 {\n        fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    } else {\n        fib4(n - 5) + fib4(n - 6) + fib4(n\
    \ - 7) + fib4(n - 8)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpfrp8eube.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fn fib_4(n:\
    \ isize) -> isize {\n        fn fib_4_loop(n: isize) -> isize {\n            if\
    \ n == 0 {\n                return 0;\n            }\n            if n == 1 {\n\
    \                return 1;\n            }\n            if n == 2 {\n         \
    \       return 1;\n            }\n            if n == 3 {\n                return\
    \ 2;\n            }\n            return fib_4_loop(n-1) + fib_4_loop(n-2) + fib_4_loop(n-3);\n\
    \        }\n        fib_4_loop(n)\n    }\n    fib_4(n)\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `4`', /tmp/tmpwm01813l.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        _ => fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 1 {\n\
    \        0\n    } else if n < 2 {\n        0\n    } else if n < 3 {\n        1\n\
    \    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `28`', /tmp/tmpwyllswhc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >=\
    \ 0 && n <= 4, \"fib4 must be between 0 and 4\");\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n    \
    \    return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fib4 must be between 0 and 4'', /tmp/tmpz0ok1sts.rs:15:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 1;\n    }\n    if n == 3 {\n        return 2;\n    }\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpx91scvdt.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        return -1;\n    }\n    let mut fib: isize = 0.;\n    fib += fib4(n -\
    \ 1) + (fib4(n - 2) + (fib4(n - 3) + fib4(n - 4)));\n    fib\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzz_gni2g.rs:18:26\n   |\n\
    18 |     let mut fib: isize = 0.;\n   |                  -----   ^^ expected `isize`,\
    \ found floating-point number\n   |                  |\n   |                 \
    \ expected due to this\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return n;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    let mut a = fib4(n - 1);\n    let mut b = fib4(n - 2);\n    let mut c = fib4(n\
    \ - 3);\n    let mut d = fib4(n - 4);\n    let mut total = a;\n    total += b;\n\
    \    total += c;\n    total += d;\n    return total;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut acc\
    \ = 1;\n    for i in 0..=n{\n        acc = acc + i;\n    }\n    acc\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `4`', /tmp/tmpxwbaujkh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >=\
    \ 0);\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n      \
    \  return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    if n ==\
    \ 3 {\n        return 0;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) +\
    \ fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    match n % 4 {\n        0 => 0,\n        1 => 0,\n\
    \        2 => 2,\n        3 => 0,\n        _ => 1 + fib4(n-2)+fib4(n-3)+fib4(n-4)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpq2ee7v12.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976109
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    let x = fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n    println!(\"fib4({}) = {}\", n, x);\n  \
    \  x\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp9885qtnn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: 'fib4(5) = 2

    '
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n    if n == 4 {\n        return\
    \ 1;\n    }\n\n    let left = fib4(n - 1);\n    let right = fib4(n - 2);\n   \
    \ let middle = fib4(n - 3);\n    let result = left + middle + right;\n\n    result\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp3592q_nw.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        0\n    } else if n < 3 {\n        0\n    } else if n < 4 {\n        2\n\
    \    } else if n < 5 {\n        0\n    } else {\n        fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpap8hweu5.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    let mut res = 0;\n    let mut i = 1;\n    while\
    \ i <= n {\n        res += i;\n        i += 2;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `4`', /tmp/tmpnn6twt64.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 3 {\n\
    \        0\n    } else {\n        let result = if n % 2 == 0 {\n            fib4(n\
    \ - 1) + fib4(n - 2)\n        } else {\n            fib4(n - 1) + fib4(n - 3)\
    \ + fib4(n - 4)\n        };\n        result\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9ckpgqor.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 {\n\
    \        panic!(\"n must be >= 0\");\n    }\n    loop {\n        match n {\n \
    \           0 => return 0,\n            _ => return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4),\n        }\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''n must be >= 0'', /tmp/tmpnbxr8j5q.rs:16:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut f4 =\
    \ 0.;\n    if n == 0 {\n        f4 = 0;\n    } else if n == 1 {\n        f4 =\
    \ 0;\n    } else if n == 2 {\n        f4 = 2;\n    } else if n == 3 {\n      \
    \  f4 = 0;\n    } else {\n        f4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    \    }\n    f4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2bs8j03s.rs:17:14\n   |\n\
    15 |     let mut f4 = 0.;\n   |                  -- expected due to this value\n\
    16 |     if n == 0 {\n17 |         f4 = 0;\n   |              ^ expected floating-point\
    \ number, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2bs8j03s.rs:19:14\n\
    \   |\n15 |     let mut f4 = 0.;\n   |                  -- expected due to this\
    \ value\n...\n19 |         f4 = 0;\n   |              ^ expected floating-point\
    \ number, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2bs8j03s.rs:21:14\n\
    \   |\n15 |     let mut f4 = 0.;\n   |                  -- expected due to this\
    \ value\n...\n21 |         f4 = 2;\n   |              ^ expected floating-point\
    \ number, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2bs8j03s.rs:23:14\n\
    \   |\n15 |     let mut f4 = 0.;\n   |                  -- expected due to this\
    \ value\n...\n23 |         f4 = 0;\n   |              ^ expected floating-point\
    \ number, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2bs8j03s.rs:25:14\n\
    \   |\n15 |     let mut f4 = 0.;\n   |                  -- expected due to this\
    \ value\n...\n25 |         f4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2bs8j03s.rs:27:5\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                      ----- expected\
    \ `isize` because of return type\n...\n27 |     f4\n   |     ^^ expected `isize`,\
    \ found floating-point number\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    fib5(n, 0).unwrap()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib5` in this scope\n  --> /tmp/tmp79ktfhye.rs:15:5\n\
    \   |\n15 |     fib5(n, 0).unwrap()\n   |     ^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpzgkydr9q.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0 }\n    if n == 1 { return 1 }\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 ||\
    \ n > 4 {\n        return -1;\n    }\n    let mut sum = 0;\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 1;\n    }\n\
    \    for i in 0..(n-3)+1 {\n        sum += fib4(n-3-i) + fib4(n-4-i);\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `4`', /tmp/tmp8mryab71.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 4 {\n\
    \        return n;\n    }\n\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmp_x6j2ize.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n   \
    \ if n == 2 {\n        return 2;\n    }\n\n    if n == 3 {\n        return 0;\n\
    \    }\n\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut val:\
    \ isize = 0;\n\n    for _ in 0..n {\n        val += 1;\n    }\n\n    val\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpqxvu3ust.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0\n    }\n    let fib4 = (0..(n+1)).fold(0, |acc, x| acc + x)\n\
    \    fib4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `fib4`\n  --> /tmp/tmpj2os0aob.rs:18:52\n  \
    \ |\n18 |     let fib4 = (0..(n+1)).fold(0, |acc, x| acc + x)\n   |          \
    \                                          ^ help: add `;` here\n19 |     fib4\n\
    \   |     ---- unexpected token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return n;\n    }\n    let mut num = 0;\n    for _ in 0..n {\n       \
    \ num += 4;\n    }\n    num\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `4`', /tmp/tmpp8od94ae.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 2 {\n\
    \        return n\n    }\n    fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n\
    \ - 1)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-6`,\n right: `4`', /tmp/tmpoduwmt1g.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n    let fib4_1 = fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    if n == fib4_1 {\n        return\
    \ n;\n    }\n    return fib4_1;\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\
    \ return 0; }\n    if n == 1 { return 0; }\n    if n == 2 { return 1; }\n    if\
    \ n == 3 { return 2; }\n    if n == 4 { return 3; }\n    if n == 5 { return 4;\
    \ }\n    if n == 6 { return 5; }\n    if n == 7 { return 6; }\n    if n == 8 {\
    \ return 7; }\n    if n == 9 { return 8; }\n    if n == 10 { return 9; }\n   \
    \ if n == 11 { return 10; }\n    if n == 12 { return 11; }\n    if n == 13 { return\
    \ 12; }\n    if n == 14 { return 13; }\n    if n == 15 { return 14; }\n    if\
    \ n == 16 { return 15; }\n    if n == 17 { return 16; }\n    if n == 18 { return\
    \ 17; }\n    if n == 19 { return 18; }\n    if n == 20 { return 19; }\n    if\
    \ n == 21 { return 20; }\n    if n == 22 { return 21; }\n    if n == 23 { return\
    \ 22; }\n    if n == 24 { return 23; }\n    if n == 25 { return 24; }\n    if\
    \ n == 26 { return 25; }\n    if n == 27 { return 26; }\n    if n == 28 { return\
    \ 27; }\n    if n == 29 { return 28; }\n    if n == 30 { return 29; }\n    if\
    \ n == 31 { return 30; }\n    if n == 32 { return 31; }\n    if n == 33 { return\
    \ 32; }\n    if n == 34 { return 33; }\n    if n == 35 { return 34; }\n    if\
    \ n == 36 { return 35; }\n    if n == 37 { return 36; }\n    if n == 38 { return\
    \ 37; }\n    if n == 39 { return 38; }\n    if n == 40 { return 39; }\n    if\
    \ n == 41 { return 40; }\n    if n == 42 { return 41; }\n    if n == 43 { return\
    \ 42; }\n    if n == 44 { return 43; }\n    if n == 45 { return 44; }\n    if\
    \ n == 46 { return 45; }\n    if n == 47 { return 46; }\n    if n == 48 { return\
    \ 47; }\n    if n == 49 { return 48; }\n    if n == 50 { return 49; }\n    if\
    \ n == 51 { return 50; }\n    if n == 52 { return 51; }\n    if n == 53 { return\
    \ 52; }\n    if n == 54 { return 53; }\n    if n == 55 { return 54; }\n    if\
    \ n == 56 { return 55; }\n    if n == 57 { return 56; }\n    if n == 58 { return\
    \ 57; }\n    if n == 59 { return 58; }\n    if n == 60 { return 59; }\n    if\
    \ n == 61 { return 60; }\n    if n == 62 { return 61; }\n    if n == 63 { return\
    \ 62; }\n    if n == 64 { return 63; }\n    if n == 65 { return 64; }\n    if\
    \ n == 66 { return 65; }\n    if n == 67 { return 66; }\n    if n == 68 { return\
    \ \n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgxb8k1qn.rs:92:3\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                            - unclosed\
    \ delimiter\n...\n83 |     if n == 68 { return \n   |                - this delimiter\
    \ might not be properly closed...\n84 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n92 | }\n   |   ^\n\nerror[E0069]: `return;`\
    \ in a function whose return type is not `()`\n  --> /tmp/tmpgxb8k1qn.rs:83:18\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |                      ----- expected\
    \ `isize` because of this return type\n...\n83 |     if n == 68 { return \n  \
    \ |                  ^^^^^^ return type is not `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgxb8k1qn.rs:14:22\n   |\n14 | fn fib4(n: isize) -> isize\
    \ {\n   |    ----              ^^^^^ expected `isize`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0069, E0308.\nFor more information about an error, try `rustc --explain E0069`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\n\
    \        0\n    } else if n == 3 {\n        0\n    } else if n == 4 {\n      \
    \  2\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpytwpnq9d.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    let mut x = 1;\n    let mut y = 1;\n\n    for\
    \ i in 1..(n-1) {\n        y = x + y;\n        x = y;\n    }\n\n    return x;\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpwsu7e0x7.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    if\
    \ n == 2 {\n        return 2\n    }\n\n    if n == 3 {\n        return 0\n   \
    \ }\n\n    if n == 4 {\n        return 1\n    }\n\n    fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpsaqtunp4.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => {\n            let (n1, n2, n3) = (1, 3, 5);\n            let result = (n1\
    \ * 10 + n2 * 4 + n3 * 2) + fib4(n - 1);\n            result\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `64`,\n right: `4`', /tmp/tmp2yw6nqlv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut nums:\
    \ Vec<isize> = vec![0; n + 1];\n    nums[0] = 0;\n    nums[1] = 0;\n    for &num\
    \ in &nums[2..] {\n        nums[num] = nums[num - 1] + nums[num - 2] + nums[num\
    \ - 3] + nums[num - 4];\n    }\n    nums[n]\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprdr4tziw.rs:15:40\n   |\n\
    15 |     let mut nums: Vec<isize> = vec![0; n + 1];\n   |                    \
    \                    ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n15 |     let mut nums: Vec<isize> = vec![0; (n + 1).try_into().unwrap()];\n\
    \   |                                        +     +++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprdr4tziw.rs:19:9\n\
    \   |\n19 |         nums[num] = nums[num - 1] + nums[num - 2] + nums[num - 3]\
    \ + nums[num - 4];\n   |         ^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmprdr4tziw.rs:19:21\n   |\n19 |         nums[num] = nums[num - 1]\
    \ + nums[num - 2] + nums[num - 3] + nums[num - 4];\n   |                     ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprdr4tziw.rs:19:37\n\
    \   |\n19 |         nums[num] = nums[num - 1] + nums[num - 2] + nums[num - 3]\
    \ + nums[num - 4];\n   |                                     ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` "
  stdout: ''
  timestamp: 1659976104
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else if n == 1 { 1 }\n    else { fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n    if n == 4 {\n        return\
    \ 1;\n    }\n    let fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n    return fib4;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp1exlgev0.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 1;\n    }\n    if n == 5 {\n        return 3;\n\
    \    }\n    if n == 6 {\n        return 5;\n    }\n    if n == 7 {\n        return\
    \ 7;\n    }\n    if n == 8 {\n        return 9;\n    }\n    if n == 9 {\n    \
    \    return 11;\n    }\n    if n == 10 {\n        return 13;\n    }\n    if n\
    \ == 11 {\n        return 15;\n    }\n    if n == 12 {\n        return 17;\n \
    \   }\n    if n == 13 {\n        return 19;\n    }\n    if n == 14 {\n       \
    \ return 21;\n    }\n    if n == 15 {\n        return 23;\n    }\n    if n ==\
    \ 16 {\n        return 25;\n    }\n    if n == 17 {\n        return 27;\n    }\n\
    \    if n == 18 {\n        return 29;\n    }\n    if n == 19 {\n        return\
    \ 31;\n    }\n    if n == 20 {\n        return 33;\n    }\n    if n == 21 {\n\
    \        return 35;\n    }\n    if n == 22 {\n        return 37;\n    }\n    if\
    \ n == 23 {\n        return 39;\n    }\n    if n == 24 {\n        return 41;\n\
    \    }\n    if n == 25 {\n        return 43;\n    }\n    if n == 26 {\n      \
    \  return 45;\n    }\n    if n == 27 {\n        return 47;\n    }\n    if n ==\
    \ 28 {\n        return 49;\n    }\n    if n == 29 {\n        return 51;\n    }\n\
    \    if n == 30 {\n        return 53;\n    }\n    if n == 31 {\n        return\
    \ 55;\n    }\n    if n == 32 {\n        return 57;\n    }\n    if n == 33 {\n\
    \        return 59;\n    }\n    if n == 34 {\n        return 61;\n    }\n    if\
    \ n == 35 {\n        return 63;\n    }\n    if n == 36 {\n        return 65;\n\
    \    }\n    if n == 37 {\n        return 67;\n    }\n    if n == 38 {\n      \
    \  return 69;\n    }\n    if n == 39 {\n        return 71;\n    }\n    if n ==\
    \ 40 {\n        return 73;\n    }\n    if n == 41 {\n        return 75;\n    }\n\
    \    if n == 42 {\n        return 77;\n    }\n    if n == 43 {\n        return\
    \ 79;\n    }\n    if n == 44 {\n        return 81;\n    }\n    if n == 45 {\n\
    \        return 83;\n    }\n    if n == 46 {\n        return 85;\n    }\n    if\
    \ n == 47 {\n        return 87;\n    }\n    if n == 48\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmptrnz2tp7.rs:160:1\n    |\n\
    159 |     if n == 48\n    |     -- this `if` expression has a condition, but no\
    \ block\n160 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    if\
    \ n == 2 {\n        return 2;\n    }\n\n    if n == 3 {\n        return 0;\n \
    \   }\n\n    if n == 4 {\n        return 0;\n    }\n\n    return fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmph636c55f.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    if n == 4 {\n        return 2\n\
    \    }\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        1 => 0,\n        2 => 1,\n        3 => 0,\n        4 => 2,\n        5\
    \ => 0,\n        6 => 3,\n        7 => 0,\n        _ => fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpnqbdg6vt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        return n;\n    }\n    let mut a: usize = 0;\n    let mut b: usize = 1;\n\
    \    let mut c: usize = n;\n    while c > 2 {\n        a = b;\n        b = c +\
    \ a;\n        c = b + c;\n    }\n    return b;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwc8jr4dr.rs:20:24\n   |\n\
    20 |     let mut c: usize = n;\n   |                -----   ^ expected `usize`,\
    \ found `isize`\n   |                |\n   |                expected due to this\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     let mut c: usize = n.try_into().unwrap();\n\
    \   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwc8jr4dr.rs:26:12\n   |\n14 | fn fib4(n: isize) -> isize\
    \ {\n   |                      ----- expected `isize` because of return type\n\
    ...\n26 |     return b;\n   |            ^ expected `isize`, found `usize`\n \
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n26 |     return b.try_into().unwrap();\n   |      \
    \       ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \n    let f_a = fib4(n - 1);\n    let f_b = fib4(n - 2);\n    let f_c = fib4(n\
    \ - 3);\n    let f_d = fib4(n - 4);\n\n    return (f_a + f_b + f_c + f_d) as isize;\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut res\
    \ = 0;\n    for i in 0..n {\n        res += i;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpv5cuwwao.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match (n, &n::isize)\
    \ {\n        (0, _) => 0,\n        (3, _) => 0,\n        (2, _) => 2,\n      \
    \  (1, _) => 0,\n        (2, _) => 0,\n        (4, _) => 4,\n        (3, _) =>\
    \ 0,\n        (n, &n::isize) => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `n`\n\
    \  --> /tmp/tmpcnue0eyx.rs:15:16\n   |\n15 |     match (n, &n::isize) {\n   |\
    \                ^ use of undeclared crate or module `n`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `n`\n  --> /tmp/tmpcnue0eyx.rs:23:14\n\
    \   |\n23 |         (n, &n::isize) => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n\
    \   |              ^ use of undeclared crate or module `n`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // base case\n\
    \    if n == 0 { 0 }\n    // recursive case\n    else { fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4) }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut s =\
    \ vec![];\n    for i in 0..n {\n        s.push(i);\n    }\n\n    let mut fib4\
    \ = s.clone();\n    fib4.push(fib4.last().unwrap());\n    let mut k = 1;\n   \
    \ let mut fib: isize = fib4.iter().cloned().map(|x| *x).sum();\n    while fib\
    \ > k {\n        fib -= k;\n        k += 2;\n        s.push(k);\n    }\n    fib4.reverse();\n\
    \    let mut fib_2 = fib4.iter().cloned().map(|x| *x).sum();\n    while fib_2\
    \ > k {\n        fib_2 -= k;\n        k += 2;\n        s.push(k);\n    }\n   \
    \ fib_2 += fib4.last().unwrap();\n    fib4.pop();\n    fib4.reverse();\n    fib4.pop();\n\
    \n    fib4.pop();\n    fib4.reverse();\n    fib4.pop();\n    fib4.reverse();\n\
    \    fib4.pop();\n    fib4.reverse();\n\n    let mut fib_3 = fib4.iter().cloned().map(|x|\
    \ *x).sum();\n    while fib_3 > k {\n        fib_3 -= k;\n        k += 2;\n  \
    \      s.push(k);\n    }\n    fib_3 += fib4.last().unwrap();\n    fib4.pop();\n\
    \n    fib4.pop();\n    fib4.reverse();\n    fib4.pop();\n    fib4.reverse();\n\
    \    fib4.pop();\n    fib4.reverse();\n\n    let mut fib_4 = fib4.iter().cloned().map(|x|\
    \ *x).sum();\n    while fib_4 > k {\n        fib_4 -= k;\n        k += 2;\n  \
    \      s.push(k);\n    }\n    fib_4 += fib4.last().unwrap();\n    fib4.pop();\n\
    \n    fib4.pop();\n    fib4.reverse();\n    fib4.pop();\n    fib4.reverse();\n\
    \    fib4.pop();\n    fib4.reverse();\n    fib4.pop();\n\n    let mut fib_5 =\
    \ fib4.iter().cloned().map(|x| *x).sum();\n    while fib_5 > k {\n        fib_5\
    \ -= k;\n        k += 2;\n        s.push(k);\n    }\n    fib_5 += fib4.last().unwrap();\n\
    \n    fib4.pop();\n    fib4.reverse();\n    fib4.pop();\n    fib4.reverse();\n\
    \    fib4.pop();\n    fib4.reverse();\n\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp41oy8j46.rs:21:15\n   |\n\
    21 |     fib4.push(fib4.last().unwrap());\n   |               ^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n21 |     fib4.push(*fib4.last().unwrap());\n   |               +\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp41oy8j46.rs:23:55\n   |\n\
    23 |     let mut fib: isize = fib4.iter().cloned().map(|x| *x).sum();\n   |  \
    \                                                     ^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmp41oy8j46.rs:30:50\n   |\n30 |\
    \     let mut fib_2 = fib4.iter().cloned().map(|x| *x).sum();\n   |          \
    \                                        ^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmp41oy8j46.rs:48:50\n   |\n48 |     let mut fib_3\
    \ = fib4.iter().cloned().map(|x| *x).sum();\n   |                            \
    \                      ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp41oy8j46.rs:64:50\n   |\n64 |     let mut fib_4 = fib4.iter().cloned().map(|x|\
    \ *x).sum();\n   |                                                  ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp41oy8j46.rs:81:50\n   |\n\
    81 |     let mut fib_5 = fib4.iter().cloned().map(|x| *x).sum();\n   |       \
    \                                           ^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp41oy8j46.rs:14:22\n   |\n14 | fn fib4(n: isize) -> isize {\n  \
    \ |    ----              ^^^^^ expected `isize`, found `()`\n   |    |\n   | \
    \   implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     match n % 4 {\n            0 => 0,\n            1 => 0,\n            2 =>\
    \ 2,\n            _ => 0\n        }\n        n -= 4\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4z8pya9.rs:16:9\n   |\n\
    16 | /         match n % 4 {\n17 | |             0 => 0,\n18 | |             1\
    \ => 0,\n19 | |             2 => 2,\n20 | |             _ => 0\n21 | |       \
    \  }\n   | |         ^- help: consider using a semicolon here\n   | |_________|\n\
    \   |           expected `()`, found integer\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    (0..n).fold(0,\
    \ |t, _| t + fib4(n - 2) + fib4(n - 3) + fib4(n - 4))\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9e7mb_d0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib4\
    \ = isize::one();\n    if n <= 3 {\n        fib4 = fib4;\n    } else {\n     \
    \   fib4 = fib4 + fib4 + fib4 + fib4;\n    }\n    fib4\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `one` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpa653uc4h.rs:15:27\n   |\n15 |  \
    \   let mut fib4 = isize::one();\n   |                           ^^^ function\
    \ or associated item not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        0\n    } else if n == 2 {\n      \
    \  2\n    } else if n == 3 {\n        0\n    } else {\n        fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpl1pw4aop.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    \n    if n == 0 || n == 1 {\n        0\n    } else if n == 2 {\n        1\n\
    \    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut fib:\
    \ usize = n;\n    for _ in 0..(fib - 1) {\n        fib = fib * 4 + fib - 1;\n\
    \    }\n    fib\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbt5ugscw.rs:15:26\n   |\n\
    15 |     let mut fib: usize = n;\n   |                  -----   ^ expected `usize`,\
    \ found `isize`\n   |                  |\n   |                  expected due to\
    \ this\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |     let mut fib: usize = n.try_into().unwrap();\n\
    \   |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbt5ugscw.rs:19:5\n   |\n14 | fn fib4(n: isize) -> isize\
    \ {\n   |                      ----- expected `isize` because of return type\n\
    ...\n19 |     fib\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     fib.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    // TODO: your\
    \ implementation here\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi9n34u64.rs:14:22\n   |\n\
    14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut curr\
    \ = 1;\n    for i in 1..n+1 {\n        curr = curr * i;\n    }\n    curr\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `120`,\n right: `4`', /tmp/tmpvy4_367c.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    let mut sum = 0;\n    let mut n = n;\n\
    \    while n > 0 {\n        sum += n;\n        n -= 4;\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpult15n9p.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut result\
    \ = 1isize;\n    for _ in 0..n {\n        result *= 2;\n        result += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `63`,\n right: `4`', /tmp/tmpn524clcx.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ let x = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    x\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `x`\n  --> /tmp/tmpikcf6j4_.rs:27:66\n   |\n\
    27 |     let x = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n28 |     x\n   |     - unexpected token\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 1 {\n\
    \        0\n    } else if n == 2 {\n        1\n    } else if n == 3 {\n      \
    \  0\n    } else {\n        fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n -\
    \ 1)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpcqsos0c8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    }\n    else if n == 1 {\n        0\n    }\n    else if n == 2\
    \ {\n        2\n    }\n    else if n == 3 {\n        0\n    }\n    else if n ==\
    \ 4 {\n        3\n    }\n    else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpawwd9p84.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4),\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n    if n == 4 {\n        return\
    \ 0;\n    }\n    if n % 2 == 0 {\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4);\n    }\n    if n % 3 == 0 {\n        return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3);\n    }\n    return fib4(n-1) + fib4(n-2);\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmph17rq7nv.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        4\
    \ => 0,\n        5 => 4,\n        6 => 0,\n        7 => 0,\n        _ => fib4(n\
    \ - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1),\n    }\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `28`', /tmp/tmpiek2btte.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    (1..n).fold(0,\
    \ |acc, n|\n        acc + fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpy0yant0e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    let\
    \ res : isize = (fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4));\n    if n\
    \ % 2 == 0 {\n        res = fibo4(n-1) + res;\n    }\n    return res;\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibo4` in this scope\n  --> /tmp/tmp2zzh2416.rs:21:24\n\
    \   |\n21 |     let res : isize = (fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4));\n\
    \   |                        ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `fibo4` in this scope\n  --> /tmp/tmp2zzh2416.rs:21:37\n   |\n\
    21 |     let res : isize = (fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4));\n\
    \   |                                     ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fibo4` in this scope\n  --> /tmp/tmp2zzh2416.rs:21:50\n\
    \   |\n21 |     let res : isize = (fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4));\n\
    \   |                                                  ^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `fibo4` in this scope\n  --> /tmp/tmp2zzh2416.rs:21:63\n\
    \   |\n21 |     let res : isize = (fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4));\n\
    \   |                                                               ^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `fibo4` in this scope\n\
    \  --> /tmp/tmp2zzh2416.rs:23:15\n   |\n23 |         res = fibo4(n-1) + res;\n\
    \   |               ^^^^^ not found in this scope\n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmp2zzh2416.rs:21:23\n   |\n21 |     let res\
    \ : isize = (fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4));\n   |       \
    \                ^                                                 ^\n   |\n \
    \  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n21 -     let res : isize = (fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4));\n\
    21 +     let res : isize = fibo4(n-1) + fibo4(n-2) + fibo4(n-3) + fibo4(n-4);\n\
    \   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976104
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    loop {\n   \
    \     match n {\n            0 => return 0,\n            1 => return 0,\n    \
    \        2 => return 2,\n            3 => return 0,\n            _ => return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4),\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976105
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    let mut s = n - 1;\n    match n {\n        1 => return 0,\n        2 => return\
    \ 1,\n        3 => return 2,\n        _ => {\n            let mut fib1 = fib4(n-1);\n\
    \            let mut fib2 = fib4(n-2);\n            let mut fib3 = fib4(n-3);\n\
    \            let mut fib4 = fib4(n-4);\n            fib4 = (fib1 + fib2 + fib3\
    \ + fib4).max(s);\n            fib4\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    assert!(n >\
    \ 0);\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return\
    \ 1;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let mut fib4: isize\
    \ = 0;\n    if n % 2 == 0 {\n        fib4 += fib4(n - 1);\n    }\n    fib4 +=\
    \ fib4(n - 3);\n    fib4 += fib4(n - 5);\n    return fib4;\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpcn7jx2rt.rs:27:17\n\
    \   |\n25 |     let mut fib4: isize = 0;\n   |         -------- `fib4` has type\
    \ `isize`\n26 |     if n % 2 == 0 {\n27 |         fib4 += fib4(n - 1);\n   | \
    \                ^^^^-------\n   |                 |\n   |                 call\
    \ expression requires function\n\nerror[E0618]: expected function, found `isize`\n\
    \  --> /tmp/tmpcn7jx2rt.rs:29:13\n   |\n25 |     let mut fib4: isize = 0;\n  \
    \ |         -------- `fib4` has type `isize`\n...\n29 |     fib4 += fib4(n - 3);\n\
    \   |             ^^^^-------\n   |             |\n   |             call expression\
    \ requires function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpcn7jx2rt.rs:30:13\n\
    \   |\n25 |     let mut fib4: isize = 0;\n   |         -------- `fib4` has type\
    \ `isize`\n...\n30 |     fib4 += fib4(n - 5);\n   |             ^^^^-------\n\
    \   |             |\n   |             call expression requires function\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    let mut fib4 = fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n    return fib4;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0; }\n    if n == 1 { return 1; }\n    if n == 2 { return 2; }\n    if\
    \ n == 3 { return 0; }\n\n    let fib4_1: isize = fib4(n - 1) + fib4(n - 2) +\
    \ fib4(n - 3) + fib4(n - 4);\n    let fib4_2: isize = fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1) + fib4(n - 4);\n    let fib4_3: isize = fib4(n - 4) + fib4(n -\
    \ 3) + fib4(n - 2) + fib4(n - 1);\n\n    return fib4_1 + fib4_2 + fib4_3;\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `4`', /tmp/tmp6n3nko20.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 1;\n    }\n    if n == 3 {\n        return 1;\n    }\n\
    \    if n == 4 {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpx0ir5qo8.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else if n == 1 { 1 }\n    else { fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4) }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976110
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut x: isize\
    \ = 0;\n    for _ in 0..n {\n        x = fibonacci_iteration(&mut x).unwrap();\n\
    \    }\n    x\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibonacci_iteration` in this scope\n\
    \  --> /tmp/tmpy4z44354.rs:17:13\n   |\n17 |         x = fibonacci_iteration(&mut\
    \ x).unwrap();\n   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        0\n    } else if n == 1 {\n        0\n    } else {\n        fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut i1 =\
    \ n-1;\n    let mut i2 = i1;\n    let mut i3 = i2;\n    let mut i4 = i3;\n   \
    \ let mut i5 = i4;\n    let mut i6 = i5;\n    i7 = i6;\n    let mut i8 = i7;\n\
    \    let mut i9 = i8;\n    let mut i10 = i9;\n    let mut i11 = i10;\n    let\
    \ mut i12 = i11;\n    let mut i13 = i12;\n    let mut i14 = i13;\n    let mut\
    \ i15 = i14;\n    i16 = i15;\n    i17 = i16;\n    let mut i18 = i17;\n    let\
    \ mut i19 = i18;\n    let mut i20 = i19;\n    let mut i21 = i20;\n    i22 = i21;\n\
    \    i23 = i22;\n    i24 = i23;\n    i25 = i24;\n    i26 = i25;\n    i27 = i26;\n\
    \    i28 = i27;\n    i29 = i28;\n    i30 = i29;\n    i31 = i30;\n    i32 = i31;\n\
    \    i33 = i32;\n    i34 = i33;\n    i35 = i34;\n    i36 = i35;\n    i37 = i36;\n\
    \    i38 = i37;\n    i39 = i38;\n    i40 = i39;\n    i41 = i40;\n    i42 = i41;\n\
    \    i43 = i42;\n    i44 = i43;\n    i45 = i44;\n    i46 = i45;\n    i47 = i46;\n\
    \    i48 = i47;\n    i49 = i48;\n    i50 = i49;\n    i51 = i50;\n    i52 = i51;\n\
    \    i53 = i52;\n    i54 = i53;\n    i55 = i54;\n    i56 = i55;\n    i57 = i56;\n\
    \    i58 = i57;\n    i59 = i58;\n    i60 = i59;\n    i61 = i60;\n    i62 = i61;\n\
    \    i63 = i62;\n    i64 = i63;\n    i65 = i64;\n    i66 = i65;\n    i67 = i66;\n\
    \    i68 = i67;\n    i69 = i68;\n    i70 = i69;\n    i71 = i7\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i7` in this scope\n  --> /tmp/tmpd1iflsnf.rs:21:5\n\
    \   |\n21 |     i7 = i6;\n   |     ^^ help: a local variable with a similar name\
    \ exists: `i1`\n\nerror[E0425]: cannot find value `i7` in this scope\n  --> /tmp/tmpd1iflsnf.rs:22:18\n\
    \   |\n22 |     let mut i8 = i7;\n   |                  ^^ help: a local variable\
    \ with a similar name exists: `i1`\n\nerror[E0423]: expected value, found builtin\
    \ type `i16`\n  --> /tmp/tmpd1iflsnf.rs:30:5\n   |\n30 |     i16 = i15;\n   |\
    \     ^^^ help: a local variable with a similar name exists: `i1`\n\nerror[E0425]:\
    \ cannot find value `i17` in this scope\n  --> /tmp/tmpd1iflsnf.rs:31:5\n   |\n\
    31 |     i17 = i16;\n   |     ^^^ help: a local variable with a similar name exists:\
    \ `i1`\n\nerror[E0423]: expected value, found builtin type `i16`\n  --> /tmp/tmpd1iflsnf.rs:31:11\n\
    \   |\n31 |     i17 = i16;\n   |           ^^^ help: a local variable with a similar\
    \ name exists: `i1`\n\nerror[E0425]: cannot find value `i17` in this scope\n \
    \ --> /tmp/tmpd1iflsnf.rs:32:19\n   |\n32 |     let mut i18 = i17;\n   |     \
    \              ^^^ help: a local variable with a similar name exists: `i1`\n\n\
    error[E0425]: cannot find value `i22` in this scope\n  --> /tmp/tmpd1iflsnf.rs:36:5\n\
    \   |\n36 |     i22 = i21;\n   |     ^^^ help: a local variable with a similar\
    \ name exists: `i12`\n\nerror[E0425]: cannot find value `i23` in this scope\n\
    \  --> /tmp/tmpd1iflsnf.rs:37:5\n   |\n37 |     i23 = i22;\n   |     ^^^ help:\
    \ a local variable with a similar name exists: `i13`\n\nerror[E0425]: cannot find\
    \ value `i22` in this scope\n  --> /tmp/tmpd1iflsnf.rs:37:11\n   |\n37 |     i23\
    \ = i22;\n   |           ^^^ help: a local variable with a similar name exists:\
    \ `i12`\n\nerror[E0425]: cannot find value `i24` in this scope\n  --> /tmp/tmpd1iflsnf.rs:38:5\n\
    \   |\n38 |     i24 = i23;\n   |     ^^^ help: a local variable with a similar\
    \ name exists: `i14`\n\nerror[E0425]: cannot find value `i23` in this scope\n\
    \  --> /tmp/tmpd1iflsnf.rs:38:11\n   |\n38 |     i24 = i23;\n   |           ^^^\
    \ help: a local variable with a similar name exists: `i13`\n\nerror[E0425]: cannot "
  stdout: ''
  timestamp: 1659976105
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::cmp::Ordering::*;\n\
    \    if n < 0 {\n        panic!(\"fib4 cannot handle negative input\");\n    }\n\
    \    fn fib(n: isize) -> isize {\n        if n == 0 {\n            return 0\n\
    \        }\n        if n == 1 {\n            return 1\n        }\n        fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n    }\n    fib(n).unwrap()\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering::*`\n  --> /tmp/tmpgiw92hfa.rs:15:9\n\
    \   |\n15 |     use std::cmp::Ordering::*;\n   |         ^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmpgiw92hfa.rs:28:12\n\
    \   |\n28 |     fib(n).unwrap()\n   |            ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        0\n    } else if n == 3 {\n        1\n    } else {\n        fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpvkdhbw7z.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 0 { panic!(\"\
    fib4 sequence cannot contain negative numbers\") }\n    match n {\n        0 =>\
    \ 0,\n        1 => 0,\n        2 => 2,\n        _ => fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fib4 sequence cannot contain negative numbers'',
    /tmp/tmpyenj223k.rs:15:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976105
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976103
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => {\n            let a = fib4(n - 1);\n            let b = fib4(n - 2);\n \
    \           let c = fib4(n - 3);\n            let d = fib4(n - 4);\n         \
    \   a * 4 + b * 4 + c * 4 + d\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `40`,\n right: `4`', /tmp/tmpdfmi7rnj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976106
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 3 {\n\
    \        0\n    } else {\n        fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpbbjkcf8v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976106
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\n\
    \        0\n    } else if n <= 3 {\n        0\n    } else {\n        let a = fib4(n\
    \ - 1);\n        let b = fib4(n - 2);\n        let c = fib4(n - 3);\n        let\
    \ d = fib4(n - 4);\n        a + b + c + d\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpvddfbxgl.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976106
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    (0..n).fold(0,\
    \ |acc, _| {\n        let next = fib(n - 1);\n        acc + next + fib(n - 2)\
    \ + fib(n - 3) + fib(n - 4)\n    })\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmp6766h2d_.rs:16:20\n\
    \   |\n16 |         let next = fib(n - 1);\n   |                    ^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `fib` in this scope\n  -->\
    \ /tmp/tmp6766h2d_.rs:17:22\n   |\n17 |         acc + next + fib(n - 2) + fib(n\
    \ - 3) + fib(n - 4)\n   |                      ^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmp6766h2d_.rs:17:35\n\
    \   |\n17 |         acc + next + fib(n - 2) + fib(n - 3) + fib(n - 4)\n   |  \
    \                                 ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib` in this scope\n  --> /tmp/tmp6766h2d_.rs:17:48\n\
    \   |\n17 |         acc + next + fib(n - 2) + fib(n - 3) + fib(n - 4)\n   |  \
    \                                              ^^^ not found in this scope\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976106
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpzzk0gfdn.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976107
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    let result = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n    return result + 4;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpv5eib7gs.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976107
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 1;\n    }\n\
    \    let mut n4 = fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1);\n   \
    \ n4 += 4;\n    n4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `4`', /tmp/tmpwr_l2gsf.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976107
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp2ek8zneb.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976108
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 3 {\n\
    \        return 0;\n    }\n\n    let mut fib3 = [0; 4];\n\n    for _ in 0..(n\
    \ - 1) {\n        let mut fib2 = fib3;\n\n        fib2[0] += fib2[2];\n      \
    \  fib2[0] += fib2[1];\n        fib2[0] += fib2[0];\n        fib2[1] += fib2[2];\n\
    \        fib2[1] += fib2[1];\n        fib2[1] += fib2[0];\n\n        fib2[2] +=\
    \ fib2[3];\n        fib2[2] += fib2[2];\n        fib2[2] += fib2[1];\n       \
    \ fib2[3] += fib2[3];\n        fib2[3] += fib2[2];\n        fib2[3] += fib2[1];\n\
    \n        fib2[2] += fib2[0];\n        fib2[3] += fib2[0];\n\n        fib3[0]\
    \ = fib2[0];\n        fib3[1] = fib2[1];\n        fib3[2] = fib2[2];\n       \
    \ fib3[3] = fib2[3];\n    }\n\n    return fib3[0];\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpkoembg9m.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976108
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 1 {\n\
    \        return 0;\n    }\n    if n < 2 {\n        return 1;\n    }\n    if n\
    \ < 3 {\n        return 2;\n    }\n    let mut f = fib4(n - 1);\n    let mut result\
    \ = f;\n    result += f;\n    result += f;\n    result += f;\n    result\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `128`,\n right: `4`', /tmp/tmpfw9bk0qf.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    use std::mem;\n\
    \n    if n == 0 {\n        0\n    }\n    else if n == 1 {\n        1\n    }\n\
    \    else if n == 2 {\n        2\n    }\n    else if n == 3 {\n        0\n   \
    \ }\n    else if n == 4 {\n        2\n    }\n    else if n == 5 {\n        3\n\
    \    }\n    else if n == 6 {\n        0\n    }\n    else if n == 7 {\n       \
    \ 1\n    }\n    else {\n        let mut n = mem::replace(&mut n, 0);\n       \
    \ n += mem::replace(&mut n, 0);\n        n += mem::replace(&mut n, 0);\n     \
    \   n += mem::replace(&mut n, 0);\n        n += mem::replace(&mut n, 0);\n   \
    \     n\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `n` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp9ebgy9i9.rs:42:34\n   |\n14 | fn fib4(n: isize) -> isize {\n  \
    \ |         - help: consider changing this to be mutable: `mut n`\n...\n42 | \
    \        let mut n = mem::replace(&mut n, 0);\n   |                          \
    \        ^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976108
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    let mut temp1 = fib4(n - 1);\n    let\
    \ mut temp2 = fib4(n - 2);\n    let mut temp3 = fib4(n - 3);\n    let mut temp4\
    \ = fib4(n - 4);\n    temp1 += temp2;\n    temp2 += temp3;\n    temp3 += temp4;\n\
    \    temp4 += temp1;\n    return temp4;\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        1 => 0,\n        2 => 0,\n        3 => 0,\n        _ => n,\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpnwre_rc0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976108
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 2 {\n\
    \        return n\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpmj0py4gn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976108
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return n;\n    }\n    let (left, right) = match n % 4 {\n\
    \        0 => (0, 1),\n        1 => (1, 0),\n        _ => (2, 3),\n    };\n  \
    \  let sum = left + right + fib4(n - left);\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ return 0; }\n    else if n == 1 { return 1; }\n    else if n == 2 { return 2;\
    \ }\n    else if n == 3 { return 3; }\n    else if n == 4 { return 4; }\n    else\
    \ if n == 5 {\n        let result = fib4(n-1);\n        let res = result + result;\n\
    \        let result = result + result;\n        res\n    }\n    else if n == 6\
    \ {\n        let result = fib4(n-2);\n        let res = result + result;\n   \
    \     let result = result + result;\n        res\n    }\n    else if n == 7 {\n\
    \        let result = fib4(n-3);\n        let res = result + result;\n       \
    \ let result = result + result;\n        res\n    }\n    else if n == 8 {\n  \
    \      let result = fib4(n-4);\n        let res = result + result;\n        let\
    \ result = result + result;\n        res\n    }\n    else {\n        let result\
    \ = fib4(n-1);\n        let res = result + result;\n        let result = result\
    \ + result;\n        res\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp44s1rg4n.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n <= 4 {\n\
    \        return n;\n    }\n\n    let re = fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4);\n    fib4(n - 1);\n    return re;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmp92qvdfg1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    \n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976115
- exit_code: -1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\
    \ 0 }\n    else {\n        let m = n / 4;\n        let x = (fib4(n - 4) + fib4(n\
    \ - 3) + fib4(n - 2) + fib4(n - 1));\n        x + m\n    }\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976115
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpzzk0gfdn.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976107
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    let mut num:\
    \ isize = 0;\n    let mut sum = 0;\n    for _ in 0..n {\n        sum += num;\n\
    \        num = num - 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-10`,\n right: `4`', /tmp/tmpi9y47wup.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n < 3 {\n\
    \        0\n    }\n    if n < 2 {\n        0\n    }\n    if n < 4 {\n        2\n\
    \    }\n    if n < 7 {\n        0\n    }\n    if n < 8 {\n        3\n    }\n \
    \   fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc09dzyvy.rs:16:9\n   |\n\
    15 | /     if n < 3 {\n16 | |         0\n   | |         ^ expected `()`, found\
    \ integer\n17 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp: you\
    \ might have meant to return this value\n   |\n16 |         return 0;\n   |  \
    \       ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc09dzyvy.rs:19:9\n\
    \   |\n18 | /     if n < 2 {\n19 | |         0\n   | |         ^ expected `()`,\
    \ found integer\n20 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n19 |         return 0;\n  \
    \ |         ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc09dzyvy.rs:22:9\n\
    \   |\n21 | /     if n < 4 {\n22 | |         2\n   | |         ^ expected `()`,\
    \ found integer\n23 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n22 |         return 2;\n  \
    \ |         ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc09dzyvy.rs:25:9\n\
    \   |\n24 | /     if n < 7 {\n25 | |         0\n   | |         ^ expected `()`,\
    \ found integer\n26 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n25 |         return 0;\n  \
    \ |         ++++++  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc09dzyvy.rs:28:9\n\
    \   |\n27 | /     if n < 8 {\n28 | |         3\n   | |         ^ expected `()`,\
    \ found integer\n29 | |     }\n   | |_____- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n28 |         return 3;\n  \
    \ |         ++++++  +\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976109
