language: rs
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a, b,\
    \ c {\n        (a, b, c) if a + b > c => return -1.0,\n        (a, b, c) if a\
    \ + c > b => return -1.0,\n        (a, b, c) if b + c > a => return -1.0,\n  \
    \      (_, _, _) => a,\n        (_, _, c) => c,\n        (_, b, _) => b,\n   \
    \ }\n    (b - a) * (c - a)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `?`, `{`, or an operator, found\
    \ `,`\n  --> /tmp/tmpubo2s21t.rs:12:12\n   |\n12 |     match a, b, c {\n   | \
    \    -----  ^ expected one of `!`, `.`, `::`, `?`, `{`, or an operator\n   | \
    \    |\n   |     while parsing this `match` expression\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0\n    let mut sa = a.abs();\n    let mut sb = b.abs();\n    let mut sc\
    \ = c.abs();\n    let mut sa2 = sa * sa;\n    let mut sb2 = sb * sb;\n    let\
    \ mut sc2 = sc * sc;\n    match sa2 + sb2 + sc2 {\n        0 => return 0.0,\n\
    \        n => {\n            let mut tri = 0.0\n            tri += a * sb;\n \
    \           tri += b * sa;\n            tri += c * sa;\n            tri = tri\
    \ / 2.0;\n            let mut tri2 = 0.0\n            tri2 += a * sb2;\n     \
    \       tri2 += b * sa2;\n            tri2 += c * sa2;\n            tri2 = tri2\
    \ / 2.0;\n            let mut tri3 = 0.0\n            tri3 += a * sc2;\n     \
    \       tri3 += b * sa2;\n            tri3 += c * sa2;\n            tri3 = tri3\
    \ / 2.0;\n            tri *= 3.0;\n            tri += tri2;\n            tri +=\
    \ tri3;\n            area = std::f64::round(tri);\n        }\n    }\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcewgggd1.rs:12:23\n\
    \   |\n12 |     let mut area = 0.0\n   |                       ^ help: add `;`\
    \ here\n13 |     let mut sa = a.abs();\n   |     --- unexpected token\n\nerror:\
    \ expected `;`, found `tri`\n  --> /tmp/tmpcewgggd1.rs:22:30\n   |\n22 |     \
    \        let mut tri = 0.0\n   |                              ^ help: add `;`\
    \ here\n23 |             tri += a * sb;\n   |             --- unexpected token\n\
    \nerror: expected `;`, found `tri2`\n  --> /tmp/tmpcewgggd1.rs:27:31\n   |\n27\
    \ |             let mut tri2 = 0.0\n   |                               ^ help:\
    \ add `;` here\n28 |             tri2 += a * sb2;\n   |             ---- unexpected\
    \ token\n\nerror: expected `;`, found `tri3`\n  --> /tmp/tmpcewgggd1.rs:32:31\n\
    \   |\n32 |             let mut tri3 = 0.0\n   |                             \
    \  ^ help: add `;` here\n33 |             tri3 += a * sc2;\n   |             ----\
    \ unexpected token\n\nerror[E0425]: cannot find function `round` in module `std::f64`\n\
    \  --> /tmp/tmpcewgggd1.rs:40:30\n   |\n40 |             area = std::f64::round(tri);\n\
    \   |                              ^^^^^ not found in `std::f64`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpcewgggd1.rs:23:17\n  \
    \ |\n23 |             tri += a * sb;\n   |                 ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpcewgggd1.rs:24:17\n   |\n24 |             tri += b * sa;\n   |\
    \                 ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n   = "
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > b &&\
    \ a > c {\n        return (a * b + c) * 0.5\n    } else if a < b && a < c {\n\
    \        return (b * b + c) * 0.5\n    } else if b > c && b > c {\n        return\
    \ (c * a + c) * 0.5\n    } else {\n        return (c * b + a) * 0.5\n    }\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpe7pq7onb.rs:13:28\n\
    \   |\n13 |         return (a * b + c) * 0.5\n   |                           \
    \ ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmpe7pq7onb.rs:15:28\n   |\n15 |         return (b * b + c) * 0.5\n\
    \   |                            ^ no implementation for `isize * {float}`\n \
    \  |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpe7pq7onb.rs:17:28\n   |\n\
    17 |         return (c * a + c) * 0.5\n   |                            ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpe7pq7onb.rs:19:28\n\
    \   |\n19 |         return"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        0.0\n    } else {\n        (a * b + c).sqrt().round()\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp3yp6kzve.rs:15:21\n   |\n15 |         (a * b + c).sqrt().round()\n\
    \   |                     ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64::consts::PI;\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return -1;\n    }\n   \
    \ if a + b > c {\n        return (b * b) - ((a + b) * c);\n    }\n    if a + c\
    \ > b {\n        return ((a + c) * (b - c)) - ((a + b) * (c + b));\n    }\n  \
    \  if ((b - a + b) * (c - a) - (b - c) * (b - a)) > 0 {\n        return (((b -\
    \ c) * (b - a)) - ((b - a) * (c - a)) * (b - c)) / ((b - a) * (c - a));\n    }\n\
    \    (((a + b) * (c - a)) - ((a - b) * (c - a)) * (b - c)) / ((b - a) * (c - a))\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::f64::consts::PI`\n  --> /tmp/tmpxrj44ep2.rs:12:9\n\
    \   |\n12 |     use std::f64::consts::PI;\n   |         ^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxrj44ep2.rs:14:16\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n14 |         return\
    \ -1;\n   |                ^^\n   |                |\n   |                expected\
    \ `f64`, found integer\n   |                help: use a float literal: `-1.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxrj44ep2.rs:25:5\n   |\n11 | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    ...\n25 |     (((a + b) * (c - a)) - ((a - b) * (c - a)) * (b - c)) / ((b - a)\
    \ * (c - a))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n25 |     ((((a + b) * (c - a)) - ((a - b) * (c - a)) * (b -\
    \ c)) / ((b - a) * (c - a))) as f64\n   |     +                              \
    \                                             ++++++++\n\nerror: aborting due\
    \ to 2 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a + b + c as\
    \ f64 / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpubx40id7.rs:12:11\n\
    \   |\n12 |     a + b + c as f64 / 2.0\n   |           ^ no implementation for\
    \ `isize + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Check for\
    \ valid triangle if sum of any 2 sides are greater than 3rd side\n    \n    if\
    \ a > b && b > c && a + b + c > a * b && a + b + c > a * c {\n        return std::f64::from(a\
    \ + b + c / 2)\n    }\n    \n    // if 3 sides are invalid return -1\n    return\
    \ std::f64::from(-1)\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmp99s1a78e.rs:15:26\n\
    \   |\n15 |         return std::f64::from(a + b + c / 2)\n   |               \
    \           ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function\
    \ `from` in module `std::f64`\n  --> /tmp/tmp99s1a78e.rs:19:22\n   |\n19 |   \
    \  return std::f64::from(-1)\n   |                      ^^^^ not found in `std::f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a.abs()\
    \ as f64;\n    let b = b.abs() as f64;\n    let c = c.abs() as f64;\n    let ab\
    \ = a + b;\n    let bc = b + c;\n    let ac = a + c;\n    if ac <= bc {\n    \
    \    return ab;\n    }\n    if ac > bc {\n        return ab;\n    }\n    if bc\
    \ > ab {\n        return bc;\n    }\n    return 0.0;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7.0`,\n right: `6.0`', /tmp/tmpz0h7xxvn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \n    // Triangle is valid if either of the sides is a valid triangle\n    if\
    \ a + b > c || b + c > a || c + a > b {\n        -1.0;\n    } else {\n       \
    \ (a + b + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::f64`\n  --> /tmp/tmp6_poddsn.rs:12:9\n  \
    \ |\n12 |     use std::f64;\n   |         ^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6_poddsn.rs:15:44\n\
    \   |\n15 |       if a + b > c || b + c > a || c + a > b {\n   |  ____________________________________________^\n\
    16 | |         -1.0;\n   | |             - help: remove this semicolon\n17 | |\
    \     } else {\n   | |_____^ expected `f64`, found `()`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp6_poddsn.rs:18:21\n   |\n18 |   \
    \      (a + b + c) / 2.0\n   |                     ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (a.pow(b) -\
    \ a.pow(c)).abs() / (b.pow(a) - c.pow(a)).abs()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulm6z05h.rs:12:12\n   |\n\
    12 |     (a.pow(b) - a.pow(c)).abs() / (b.pow(a) - c.pow(a)).abs()\n   |     \
    \       ^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `u32` and panic if the converted value doesn't fit\n   |\n12 |     (a.pow(b.try_into().unwrap())\
    \ - a.pow(c)).abs() / (b.pow(a) - c.pow(a)).abs()\n   |             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpulm6z05h.rs:12:23\n   |\n12 |\
    \     (a.pow(b) - a.pow(c)).abs() / (b.pow(a) - c.pow(a)).abs()\n   |        \
    \               ^ expected `u32`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `u32` and panic if the converted value doesn't fit\n   |\n12 |\
    \     (a.pow(b) - a.pow(c.try_into().unwrap())).abs() / (b.pow(a) - c.pow(a)).abs()\n\
    \   |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpulm6z05h.rs:12:42\n   |\n12 |     (a.pow(b) - a.pow(c)).abs()\
    \ / (b.pow(a) - c.pow(a)).abs()\n   |                                        \
    \  ^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `u32` and panic if the converted value doesn't fit\n   |\n12 |     (a.pow(b)\
    \ - a.pow(c)).abs() / (b.pow(a.try_into().unwrap()) - c.pow(a)).abs()\n   |  \
    \                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpulm6z05h.rs:12:53\n   |\n12 |     (a.pow(b)\
    \ - a.pow(c)).abs() / (b.pow(a) - c.pow(a)).abs()\n   |                      \
    \                               ^ expected `u32`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n\
    \   |\n12 |     (a.pow(b) - a.pow(c)).abs() / (b.pow(a) - c.pow(a.try_into().unwrap())).abs()\n\
    \   |                                                      ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpulm6z05h.rs:12:5\n   |\n11 | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    12 |     (a.pow(b) - a.pow("
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a +\
    \ b;\n    let c = c + a;\n    let d = c + b;\n    if d > c {\n        -1\n   \
    \ } else {\n        ((a + c) - (b + d)) / (2.0 * d)\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5bfzhhdk.rs:16:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmp5bfzhhdk.rs:18:36\n   |\n\
    18 |         ((a + c) - (b + d)) / (2.0 * d)\n   |                           \
    \         ^ no implementation for `{float} * isize`\n   |\n   = help: the trait\
    \ `Mul<isize>` is not implemented for `{float}`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // The formula\
    \ for the area of a triangle is (4/3) * a * b * c\n    // But we need to round\
    \ the result to 2 decimal places.\n    let area = match a > b and b > c {\n  \
    \      true => 4 * a * b * c,\n        false => -1,\n    };\n    area.round().expect(\"\
    Area should be convertible to float\")\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmpplanmjqn.rs:14:28\n\
    \   |\n14 |     let area = match a > b and b > c {\n   |                     \
    \       ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike\
    \ in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0599]:\
    \ no method named `round` found for type `isize` in the current scope\n  --> /tmp/tmpplanmjqn.rs:18:10\n\
    \   |\n18 |     area.round().expect(\"Area should be convertible to float\")\n\
    \   |          ^^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Check all\
    \ possible combinations of sides to see if they form a valid triangle\n    if\
    \ a + b > c && a + c > b {\n        return ((b * b) - (a * a)) / 2.0\n    }\n\
    \    if a + c > b {\n        return ((b * b) - (a * a)) / 2.0\n    }\n    if b\
    \ + c > a {\n        return ((b * b) - (a * a)) / 2.0\n    }\n\n    // Valid triangle\n\
    \    let mut triangle_area = 0.0\n    triangle_area += a\n    triangle_area +=\
    \ b\n    triangle_area += c\n    triangle_area /= 2.0\n    triangle_area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `triangle_area`\n  --> /tmp/tmp2pro6xqp.rs:24:32\n\
    \   |\n24 |     let mut triangle_area = 0.0\n   |                            \
    \    ^ help: add `;` here\n25 |     triangle_area += a\n   |     -------------\
    \ unexpected token\n\nerror: expected `;`, found `triangle_area`\n  --> /tmp/tmp2pro6xqp.rs:25:23\n\
    \   |\n25 |     triangle_area += a\n   |                       ^ help: add `;`\
    \ here\n26 |     triangle_area += b\n   |     ------------- unexpected token\n\
    \nerror: expected `;`, found `triangle_area`\n  --> /tmp/tmp2pro6xqp.rs:26:23\n\
    \   |\n26 |     triangle_area += b\n   |                       ^ help: add `;`\
    \ here\n27 |     triangle_area += c\n   |     ------------- unexpected token\n\
    \nerror: expected `;`, found `triangle_area`\n  --> /tmp/tmp2pro6xqp.rs:27:23\n\
    \   |\n27 |     triangle_area += c\n   |                       ^ help: add `;`\
    \ here\n28 |     triangle_area /= 2.0\n   |     ------------- unexpected token\n\
    \nerror: expected `;`, found `triangle_area`\n  --> /tmp/tmp2pro6xqp.rs:28:25\n\
    \   |\n28 |     triangle_area /= 2.0\n   |                         ^ help: add\
    \ `;` here\n29 |     triangle_area\n   |     ------------- unexpected token\n\n\
    error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp2pro6xqp.rs:14:36\n\
    \   |\n14 |         return ((b * b) - (a * a)) / 2.0\n   |                   \
    \                 ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp2pro6xqp.rs:17:36\n   |\n17 |   \
    \      return ((b * b) - (a * a)) / 2.0\n   |                                \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Di"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    debugln!(\"\
    {:?} == {:?}\", a, b);\n    debugln!(\"{:?} == {:?}\", b, c);\n    if a + b >\
    \ c || b + c > a || c + a > b {\n        return -1.0;\n    }\n    if a + c + b\
    \ > c || c + a + b > a || b + c + a > b {\n        return -1.0;\n    }\n    if\
    \ a + b > c || b + c > a || c + a > b {\n        return -1.0;\n    }\n    let\
    \ area = (a * b * c) / 3.0;\n    debugln!(\"area is {:?}\", area);\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `debugln` in this scope\n  --> /tmp/tmpbbku4v14.rs:12:5\n\
    \   |\n12 |     debugln!(\"{:?} == {:?}\", a, b);\n   |     ^^^^^^^\n\nerror:\
    \ cannot find macro `debugln` in this scope\n  --> /tmp/tmpbbku4v14.rs:13:5\n\
    \   |\n13 |     debugln!(\"{:?} == {:?}\", b, c);\n   |     ^^^^^^^\n\nerror:\
    \ cannot find macro `debugln` in this scope\n  --> /tmp/tmpbbku4v14.rs:24:5\n\
    \   |\n24 |     debugln!(\"area is {:?}\", area);\n   |     ^^^^^^^\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpbbku4v14.rs:23:28\n   |\n\
    23 |     let area = (a * b * c) / 3.0;\n   |                            ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let denom =\
    \ (b - a) * (c - b);\n    if denom > 0.f {\n        let area = f64::div((b - a)\
    \ * (c - b), denom);\n        if area > 0.f {\n            return area.round();\n\
    \        } else {\n            return -1.0;\n        }\n    } else {\n       \
    \ return -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `{integer}` is a primitive type and therefore doesn't have\
    \ fields\n  --> /tmp/tmpbrcvb2sd.rs:13:18\n   |\n13 |     if denom > 0.f {\n \
    \  |                  ^\n\nerror[E0599]: no function or associated item named\
    \ `div` found for type `f64` in the current scope\n  --> /tmp/tmpbrcvb2sd.rs:14:25\n\
    \   |\n14 |         let area = f64::div((b - a) * (c - b), denom);\n   |     \
    \                    ^^^ function or associated item not found in `f64`\n   |\n\
    \   = help: items from traits can only be used if the trait is in scope\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n   |\n1  | use std::ops::Div;\n   |\n\nerror[E0610]: `{integer}` is a primitive\
    \ type and therefore doesn't have fields\n  --> /tmp/tmpbrcvb2sd.rs:15:21\n  \
    \ |\n15 |         if area > 0.f {\n   |                     ^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0610.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return -1.0;\n    }\n    if a + b > c {\n \
    \       return -1.0;\n    }\n    if a + c > b {\n        return -1.0;\n    }\n\
    \    if b + c > a {\n        return -1.0;\n    }\n    let sum = a + b + c;\n \
    \   if sum == 0 {\n        return 0.0;\n    }\n    let sqrt = f64::sqrt(sum);\n\
    \    return (a / sqrt).round() as f64 + (b / sqrt).round() as f64 + (c / sqrt).round()\
    \ as f64;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppqxq8704.rs:29:26\n   |\n\
    29 |     let sqrt = f64::sqrt(sum);\n   |                          ^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    29 |     let sqrt = f64::sqrt(sum as f64);\n   |                             \
    \ ++++++\n\nerror[E0277]: cannot divide `isize` by `f64`\n  --> /tmp/tmppqxq8704.rs:30:15\n\
    \   |\n30 |     return (a / sqrt).round() as f64 + (b / sqrt).round() as f64 +\
    \ (c / sqrt).round() as f64;\n   |               ^ no implementation for `isize\
    \ / f64`\n   |\n   = help: the trait `Div<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `f64`\n  --> /tmp/tmppqxq8704.rs:30:43\n   |\n30 |\
    \     return (a / sqrt).round() as f64 + (b / sqrt).round() as f64 + (c / sqrt).round()\
    \ as f64;\n   |                                           ^ no implementation\
    \ for `isize / f64`\n   |\n   = help: the trait `Div<f64>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `f64`\n  --> /tmp/tmppqxq8704.rs:30:71\n\
    \   |\n30 |     return (a / sqrt).round() as f64 + (b / sqrt).round() as f64 +\
    \ (c / sqrt).round() as f64;\n   |                                           \
    \                            ^ no impleme"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area: f64\
    \ = (a * b + c) * 0.5;\n    let area: f64 = match a <= b and a <= c {\n      \
    \  true => area,\n        true => a,\n        true => c,\n        true => -1.0,\n\
    \        true => b,\n        _ => -1.0,\n    };\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: `and` is not a logical operator\n  --> /tmp/tmp_am2xqz3.rs:13:34\n\
    \   |\n13 |     let area: f64 = match a <= b and a <= c {\n   |              \
    \                    ^^^ help: use `&&` to perform logical conjunction\n   |\n\
    \   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp_am2xqz3.rs:12:33\n\
    \   |\n12 |     let area: f64 = (a * b + c) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: `match` arms\
    \ have incompatible types\n  --> /tmp/tmp_am2xqz3.rs:15:17\n   |\n13 |       let\
    \ area: f64 = match a <= b and a <= c {\n   |  _____________________-\n14 | |\
    \         true => area,\n   | |                 ---- this is found to be of type\
    \ `f64`\n15 | |         true => a,\n   | |                 ^ expected `f64`, found\
    \ `isize`\n16 | |         true => c,\n...  |\n19 | |         _ => -1.0,\n20 |\
    \ |     };\n   | |_____- `match` arms have incompatible types\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n15 |         true => a as f64,\n\
    \   |                   ++++++\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    (a * b * c) / 9.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp20hx9pkf.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp20hx9pkf.rs:21:17\n   |\n21 |     (a * b\
    \ * c) / 9.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b >= c {\n\
    \        return -1\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ 0\n    }\n    let mut area = 0.0;\n    let d = b * b - 4 * a * c;\n    if d\
    \ >= 0 {\n        area = d / 2;\n    }\n    else if d == 0 {\n        area = sqrt(c\
    \ * a);\n    }\n    else if d == -1 {\n        area = sqrt(a * b);\n    }\n  \
    \  else {\n        return -1;\n    }\n    return f64::from(area).round();\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmprdtsngop.rs:24:16\n\
    \   |\n24 |         area = sqrt(c * a);\n   |                ^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n  -->\
    \ /tmp/tmprdtsngop.rs:27:16\n   |\n27 |         area = sqrt(a * b);\n   |    \
    \            ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprdtsngop.rs:13:16\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n12 |     if b >= c {\n13 |         return\
    \ -1\n   |                ^^\n   |                |\n   |                expected\
    \ `f64`, found integer\n   |                help: use a float literal: `-1.0`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprdtsngop.rs:21:16\n   |\n18 |\
    \     let mut area = 0.0;\n   |                    --- expected due to this value\n\
    ...\n21 |         area = d / 2;\n   |                ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let \
    \ ab = a + b;\n    let  ac = a + c;\n    let  bc = b + c;\n\n    if ab < ac &&\
    \ ab < bc {\n        return ab;\n    }\n\n    if ac < bc {\n        return ac;\n\
    \    }\n\n    return bc;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprhee17lb.rs:18:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |         return ab;\n   |                ^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n18 |      \
    \   return ab as f64;\n   |                   ++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b > a &&\
    \ c > b {\n        return a + b + c;\n    }\n    if c > a && b > c {\n       \
    \ return a + c + b;\n    }\n    if b > a && a > c {\n        return a + b + c;\n\
    \    }\n    if c > a && a > b {\n        return a + c + b;\n    }\n    return\
    \ -1;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_qwefq4b.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if b > a && c > b {\n13 |         return a + b + c;\n   |   \
    \             ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n13 |         return (a + b + c) as f64;\n   |  \
    \              +         ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b +\
    \ c < 3 {\n        return -1\n    }\n    if a == b && b == c {\n        return\
    \ a\n    }\n    let mut a2: isize = 0\n    let mut b2: isize = 0\n    let mut\
    \ c2: isize = 0\n    while a != b {\n        a2 += a\n        b2 += b\n      \
    \  if a2 > c {\n            return -1.0;\n        }\n        if b2 > c {\n   \
    \         return -1.0;\n        }\n        c2 += c\n        if c2 > a {\n    \
    \        return -1.0;\n        }\n        a -= a;\n        b -= b;\n    }\n  \
    \  let mut a3: isize = 0\n    let mut b3: isize = 0\n    let mut c3: isize = 0\n\
    \    while a != c {\n        a3 += a\n        b3 += b\n        if a3 > c {\n \
    \           return -1.0;\n        }\n        if b3 > c {\n            return -1.0;\n\
    \        }\n        c3 += c\n        if c3 > a {\n            return -1.0;\n \
    \       }\n        a -= a;\n        b -= b;\n    }\n    let mut a4: isize = 0\n\
    \    let mut b4: isize = 0\n    let mut c4: isize = 0\n    while b != c {\n  \
    \      a4 += a\n        b4 += b\n        if a4 > c {\n            return -1.0;\n\
    \        }\n        if b4 > c {\n            return -1.0;\n        }\n       \
    \ c4 += c\n        if c4 > b {\n            return -1.0;\n        }\n        b\
    \ -= b;\n    }\n    a4 += a\n    b4 += b\n    c4 += c\n    (a * b * c) / (a4 *\
    \ b4 + a4 * c4 + a4 * c2 + b4 * c2 + b4 * c + c4 * a4)\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0cea114v.rs:18:26\n\
    \   |\n18 |     let mut a2: isize = 0\n   |                          ^ help: add\
    \ `;` here\n19 |     let mut b2: isize = 0\n   |     --- unexpected token\n\n\
    error: expected `;`, found keyword `let`\n  --> /tmp/tmp0cea114v.rs:19:26\n  \
    \ |\n19 |     let mut b2: isize = 0\n   |                          ^ help: add\
    \ `;` here\n20 |     let mut c2: isize = 0\n   |     --- unexpected token\n\n\
    error: expected `;`, found keyword `while`\n  --> /tmp/tmp0cea114v.rs:20:26\n\
    \   |\n20 |     let mut c2: isize = 0\n   |                          ^ help: add\
    \ `;` here\n21 |     while a != b {\n   |     ----- unexpected token\n\nerror:\
    \ expected `;`, found `b2`\n  --> /tmp/tmp0cea114v.rs:22:16\n   |\n22 |      \
    \   a2 += a\n   |                ^ help: add `;` here\n23 |         b2 += b\n\
    \   |         -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp0cea114v.rs:23:16\n   |\n23 |         b2 += b\n   |           \
    \     ^ help: add `;` here\n24 |         if a2 > c {\n   |         -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp0cea114v.rs:30:16\n\
    \   |\n30 |         c2 += c\n   |                ^ help: add `;` here\n31 |  \
    \       if c2 > a {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n  --> /tmp/tmp0cea114v.rs:37:26\n   |\n37 |     let mut\
    \ a3: isize = 0\n   |                          ^ help: add `;` here\n38 |    \
    \ let mut b3: isize = 0\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n  --> /tmp/tmp0cea114v.rs:38:26\n   |\n38 |     let mut\
    \ b3: isize = 0\n   |                          ^ help: add `;` here\n39 |    \
    \ let mut c3: isize = 0\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `while`\n  --> /tmp/tmp0cea114v.rs:39:26\n   |\n39 |     let mut\
    \ c3: isize = 0\n   |                          ^ help: add `;` here\n40 |    \
    \ while a != c {\n   |     ----- unexpected token\n\nerror: expected `;`, found\
    \ `b3`\n  --> /tmp/tmp0cea114v.rs:41:16\n   |\n41 |         a3 += a\n   |    \
    \            ^ help: add `;` here\n42 |     "
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ sqr::square_root(a * a + b * b + c * c);\n    if area < 0 {\n        return\
    \ -1.0;\n    }\n    area.round(2.0);\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sqr`\n\
    \  --> /tmp/tmps61cc73_.rs:12:16\n   |\n12 |     let area = sqr::square_root(a\
    \ * a + b * b + c * c);\n   |                ^^^ use of undeclared crate or module\
    \ `sqr`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps61cc73_.rs:11:51\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b == c {\n\
    \        return (a * b) / c\n    } else {\n        return (a + b + c) / 2.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkq0bhkeq.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if b == c {\n13 |         return (a * b) / c\n   |          \
    \      ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n13 |         return ((a * b) / c) as f64\n   | \
    \               +           ++++++++\n\nerror[E0277]: cannot divide `isize` by\
    \ `{float}`\n  --> /tmp/tmpkq0bhkeq.rs:15:28\n   |\n15 |         return (a + b\
    \ + c) / 2.0\n   |                            ^ no implementation for `isize /\
    \ {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Div<Rhs>`:\n          \
    \   <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut s = 0;\n\
    \    while a < b + c && b < c + a {\n        s += a;\n        a += 1;\n      \
    \  b += 1;\n        c += 1;\n    }\n    s / 2\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_2p2zvh9.rs:22:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n22 |     s / 2\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n22 |     (s / 2)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // check if\
    \ a is greater than or equal to b\n    if a >= b {\n        // check if b is greater\
    \ than or equal to c\n        if b >= c {\n            // check if c is greater\
    \ than or equal to a\n            // check if a * b + c = 0\n            if c\
    \ * b + a != 0 {\n                // calculate area of the triangle by calculating\
    \ the \n                // sum of each side of triangle and dividing by two\n\
    \                let area = a * b + c;\n                let rounded_area = f64::round(area\
    \ as f64 / 2.0);\n                return rounded_area\n            }\n       \
    \ }\n    }\n    return -1\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnoxs53_p.rs:27:12\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n27 |     return -1\n   |            ^^\n   |            |\n   | \
    \           expected `f64`, found integer\n   |            help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b {\n        -1\n    } else {\n        (a * b) - (a * c) + (b *\
    \ c)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5uyz0ol9.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c || a + c > b {\n13 |         -1\n   |         ^^\n\
    \   |         |\n   |         expected `f64`, found integer\n   |         help:\
    \ use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5uyz0ol9.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (a * b) - (a * c) + (b * c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((a * b) - (a * c) + (b * c)) as f64\n   |   \
    \      +                           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > b +\
    \ c {\n        return -1\n    }\n\n    if b > a + c {\n        return -1\n   \
    \ }\n\n    if c > a + b {\n        return -1\n    }\n\n    let area_abc = ((a\
    \ + b) * (c + b)) - ((a * b) * (c + b))\n\n    if area_abc > 0 {\n        return\
    \ (area_abc / 2) as f64\n    } else {\n        return -1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpu2br8w96.rs:24:61\n\
    \   |\n24 |     let area_abc = ((a + b) * (c + b)) - ((a * b) * (c + b))\n   |\
    \                                                             ^ help: add `;`\
    \ here\n25 | \n26 |     if area_abc > 0 {\n   |     -- unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu2br8w96.rs:13:16\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n12 |     if a > b\
    \ + c {\n13 |         return -1\n   |                ^^\n   |                |\n\
    \   |                expected `f64`, found integer\n   |                help:\
    \ use a float literal: `-1.0`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let ab = a\
    \ + b;\n    if ab < c {\n        -1\n    } else {\n        ((c * b) - (a * c))\
    \ / (b * b)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp46q058ic.rs:14:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp46q058ic.rs:16:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n16 |       \
    \  ((c * b) - (a * c)) / (b * b)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    16 |         (((c * b) - (a * c)) / (b * b)) as f64\n   |         +          \
    \                   ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b - a <\
    \ c {\n        return -1.0;\n    }\n    let sum = a + b + c;\n    if sum < 0 {\n\
    \        return -1.0;\n    }\n    sqr::sqrt(sum as f64) as f64\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `sqr`\n\
    \  --> /tmp/tmpck9iivfs.rs:19:5\n   |\n19 |     sqr::sqrt(sum as f64) as f64\n\
    \   |     ^^^ use of undeclared crate or module `sqr`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a + b + c >=\
    \ 4\n        ? (a + b + c) / 2\n        : -1\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `-`\n  --> /tmp/tmpxv_d8qpk.rs:14:11\n   |\n\
    14 |         : -1\n   |         - ^ expected type\n   |         |\n   |      \
    \   tried to parse a type due to this\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a < 0 ||\
    \ b < 0 || c < 0 {\n        return -1;\n    }\n    if a + b > c {\n        a +\
    \ b > c ? a + b : c;\n    }\n    if a + c > b {\n        a + c > b ? a + c : b;\n\
    \    }\n    if b + c > a {\n        b + c > a ? b + c : a;\n    }\n    a + b +\
    \ c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \  --> /tmp/tmpty4be0z7.rs:16:21\n   |\n16 |         a + b > c ? a + b : c;\n\
    \   |                     ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n  -->\
    \ /tmp/tmpty4be0z7.rs:19:21\n   |\n19 |         a + c > b ? a + c : b;\n   | \
    \                    ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\n\
    error: expected one of `.`, `;`, `?`, `}`, or an operator, found `b`\n  --> /tmp/tmpty4be0z7.rs:22:21\n\
    \   |\n22 |         b + c > a ? b + c : a;\n   |                     ^ expected\
    \ one of `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpty4be0z7.rs:13:16\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n12 |     if a < 0 || b < 0 || c < 0 {\n\
    13 |         return -1;\n   |                ^^\n   |                |\n   | \
    \               expected `f64`, found integer\n   |                help: use a\
    \ float literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpty4be0z7.rs:24:5\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n24 |     a + b + c\n   |     ^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n24 |     (a\
    \ + b + c) as f64\n   |     +         ++++++++\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let area\
    \ = (b * b) - (4.0 * a * c)\n    \n    if area < 0.0\n    {\n        0.0\n   \
    \ }\n    else\n    {\n        let area = (a * b) - (c * c)\n        \n       \
    \ let denom = (a * b) + (c * c)\n        if denom > 0.0\n        {\n         \
    \   area / denom\n        }\n        else\n        {\n            -1.0\n     \
    \   }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp7dndxlhx.rs:13:39\n\
    \   |\n13 |     let area = (b * b) - (4.0 * a * c)\n   |                     \
    \                  ^ help: add `;` here\n14 |     \n15 |     if area < 0.0\n \
    \  |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  -->\
    \ /tmp/tmp7dndxlhx.rs:21:37\n   |\n21 |         let area = (a * b) - (c * c)\n\
    \   |                                     ^ help: add `;` here\n22 |         \n\
    23 |         let denom = (a * b) + (c * c)\n   |         --- unexpected token\n\
    \nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp7dndxlhx.rs:23:38\n \
    \  |\n23 |         let denom = (a * b) + (c * c)\n   |                       \
    \               ^ help: add `;` here\n24 |         if denom > 0.0\n   |      \
    \   -- unexpected token\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n\
    \  --> /tmp/tmp7dndxlhx.rs:13:31\n   |\n13 |     let area = (b * b) - (4.0 * a\
    \ * c)\n   |                               ^ no implementation for `{float} *\
    \ isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7dndxlhx.rs:24:20\n   |\n24 |         if denom\
    \ > 0.0\n   |                    ^^^ expected `isize`, found floating-point number\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7dndxlhx.rs:26:13\n   |\n11 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    ...\n26 |             area / denom\n   |             ^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  "
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match triangle_side_length(a,\
    \ b, c).unwrap() {\n        None => -1,\n        Some(a1) => a1 + triangle_side_length(a\
    \ + 1, b, c).unwrap(),\n        Some(a2) => a2 + triangle_side_length(a, c + 1,\
    \ b).unwrap(),\n        Some(a3) => a3 + triangle_side_length(a, b, c + 1).unwrap(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `triangle_side_length` in this scope\n\
    \  --> /tmp/tmpwzj2a_zw.rs:12:11\n   |\n12 |     match triangle_side_length(a,\
    \ b, c).unwrap() {\n   |           ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `triangle_side_length` in this scope\n  -->\
    \ /tmp/tmpwzj2a_zw.rs:14:26\n   |\n14 |         Some(a1) => a1 + triangle_side_length(a\
    \ + 1, b, c).unwrap(),\n   |                          ^^^^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `triangle_side_length`\
    \ in this scope\n  --> /tmp/tmpwzj2a_zw.rs:15:26\n   |\n15 |         Some(a2)\
    \ => a2 + triangle_side_length(a, c + 1, b).unwrap(),\n   |                  \
    \        ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `triangle_side_length` in this scope\n  --> /tmp/tmpwzj2a_zw.rs:16:26\n\
    \   |\n16 |         Some(a3) => a3 + triangle_side_length(a, b, c + 1).unwrap(),\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwzj2a_zw.rs:13:17\n   |\n11 | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    12 |     match triangle_side_length(a, b, c).unwrap() {\n13 |         None =>\
    \ -1,\n   |                 ^^\n   |                 |\n   |                 expected\
    \ `f64`, found integer\n   |                 help: use a float literal: `-1.0`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a +\
    \ b + c;\n    \n    if a == 0 {\n        return -1.0;\n    }\n    let mut s =\
    \ (a + b + c) / 2;\n    if s == 0.0 {\n        return -1.0;\n    }\n    s /= 2.0;\n\
    \    let t = sqrt(s) as f64;\n    let mut area = 0.0;\n    \n    if a >= b + c\
    \ {\n        area = sqrt((s - a) * (s - b) * (s - c));\n    } else {\n       \
    \ area = sqrt((s - b) * (s - c) * (s - a));\n    }\n    if area < 0.000001 {\n\
    \        area = 0.000001;\n    }\n    \n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp4tq371ry.rs:22:13\n\
    \   |\n22 |     let t = sqrt(s) as f64;\n   |             ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp4tq371ry.rs:26:16\n\
    \   |\n26 |         area = sqrt((s - a) * (s - b) * (s - c));\n   |          \
    \      ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sqrt`\
    \ in this scope\n  --> /tmp/tmp4tq371ry.rs:28:16\n   |\n28 |         area = sqrt((s\
    \ - b) * (s - c) * (s - a));\n   |                ^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4tq371ry.rs:18:13\n   |\n18 |\
    \     if s == 0.0 {\n   |             ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmp4tq371ry.rs:21:7\n\
    \   |\n21 |     s /= 2.0;\n   |       ^^ no implementation for `isize /= {float}`\n\
    \   |\n   = help: the trait `DivAssign<{float}>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `DivAssign<Rhs>`:\n    \
    \         <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n        \
    \     <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n            \
    \ <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n             <i16\
    \ as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and 20 others\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b || b + c > a {\n        -1\n    } else {\n        (a * b + c\
    \ * a) / (b * c)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj8u8r_w5.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c || a + c > b || b + c > a {\n13 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj8u8r_w5.rs:15:9\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n15 |         (a * b + c * a) / (b\
    \ * c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         ((a\
    \ * b + c * a) / (b * c)) as f64\n   |         +                         ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Triangle\
    \ is valid if:\n    // a + b > c and a + c > b and b + c > a\n    let ab = a +\
    \ b;\n    let ac = a + c;\n    let bc = b + c;\n    \n    if ab > ac && ab > bc\
    \ {\n        return ab * ab;\n    } else if ac > ab && ac > bc {\n        return\
    \ ac * ac;\n    } else {\n        return bc * bc;\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbci9cvyu.rs:19:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n19 |         return ab * ab;\n   |                ^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |         return (ab * ab) as f64;\n   |                +       ++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area: f64\
    \ = a + b + c;\n    if area > 0 {\n        return area;\n    }\n    if a > b {\n\
    \        return triangle_area(b, a, c);\n    }\n    if c > b {\n        return\
    \ triangle_area(a, b, c);\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn6x_x8i9.rs:12:21\n   |\n\
    12 |     let area: f64 = a + b + c;\n   |               ---   ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |               |\n   |               expected due\
    \ to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n12 |     let\
    \ area: f64 = (a + b + c) as f64;\n   |                     +         ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn6x_x8i9.rs:13:15\n   |\n13 |\
    \     if area > 0 {\n   |               ^\n   |               |\n   |        \
    \       expected `f64`, found integer\n   |               help: use a float literal:\
    \ `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6x_x8i9.rs:22:12\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n22 |     return -1;\n   |            ^^\n   |            |\n   |\
    \            expected `f64`, found integer\n   |            help: use a float\
    \ literal: `-1.0`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a1 = a\
    \ + b + c;\n    let a2 = a - b - c;\n    let a3 = a + b - c;\n    let a4 = a -\
    \ b + c;\n    let a5 = a - b - c;\n    let b2 = a - a;\n    let b3 = b - a;\n\
    \    let b4 = b - b;\n    let b5 = b - b;\n    let c2 = a - b;\n    let c3 = a\
    \ - c;\n    let c4 = c - a;\n    let c5 = c - b;\n\n    if a1 < b2 && a2 < b3\
    \ && a3 < b4 && a4 < b5 && a5 < c2 && a5 < c3 && a5 < c4 && a4 < c5 && b2 < c5\
    \ && b3 < c4 && b4 < c3 && b5 < c2 {\n        let mut side1: f64 = 0.;\n     \
    \   let mut side2: f64 = 0.;\n        let mut side3: f64 = 0.;\n        let mut\
    \ s: f64 = 0.;\n        let mut d: f64 = 0.;\n        if b2 > c3 {\n         \
    \   side1 = (a - b) / (b2 - c3);\n            side2 = (b - a) / (b3 - c2);\n \
    \           side3 = (c - a) / (b5 - c4);\n            s = side1 + side2 + side3;\n\
    \            \n            match s {\n                0...1.0 => {\n         \
    \           d = (side1 + side2 + side3) / 2.;\n                    (0., d)\n \
    \               }\n                1.0 => panic!(\"Not a triangle\"),\n      \
    \          _ => panic!(\"Not a triangle\"),\n            }\n        } else {\n\
    \            side1 = (a - b) / (b2 - c2);\n            side2 = (b - a) / (b3 -\
    \ c3);\n            side3 = (c - a) / (b5 - c5);\n            s = side1 + side2\
    \ + side3;\n            \n            match s {\n                0...1.0 => {\n\
    \                    d = (side1 + side2 + side3) / 2.;\n                    (0.,\
    \ d)\n                }\n                1.0 => panic!(\"Not a triangle\"),\n\
    \                _ => panic!(\"Not a triangle\"),\n            }\n        }\n\
    \        s * (s * (s - 1.) / 6.)\n    } else {\n        panic!(\"Not a triangle\"\
    )\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: `...` range patterns are deprecated\n  --> /tmp/tmp2zcxssmt.rs:39:18\n\
    \   |\n39 |                 0...1.0 => {\n   |                  ^^^ help: use\
    \ `..=` for an inclusive range\n   |\n   = note: `#[warn(ellipsis_inclusive_range_patterns)]`\
    \ on by default\n   = warning: this is accepted in the current edition (Rust 2015)\
    \ but is a hard error in Rust 2021!\n   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nwarning: `...` range patterns are deprecated\n  --> /tmp/tmp2zcxssmt.rs:53:18\n\
    \   |\n53 |                 0...1.0 => {\n   |                  ^^^ help: use\
    \ `..=` for an inclusive range\n   |\n   = warning: this is accepted in the current\
    \ edition (Rust 2015) but is a hard error in Rust 2021!\n   = note: for more information,\
    \ see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2zcxssmt.rs:33:21\n   |\n27 |\
    \         let mut side1: f64 = 0.;\n   |                        --- expected due\
    \ to this type\n...\n33 |             side1 = (a - b) / (b2 - c3);\n   |     \
    \                ^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n33 |             side1 = ((a - b)\
    \ / (b2 - c3)) as f64;\n   |                     +                   ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2zcxssmt.rs:34:21\n   |\n28 |\
    \         let mut side2: f64 = 0.;\n   |                        --- expected due\
    \ to this type\n...\n34 |             side2 = (b - a) / (b3 - c2);\n   |     \
    \                ^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n34 |             side2 = ((b - a)\
    \ / (b3 - c2)) as f64;\n   |                     +                   ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2zcxssmt.rs:35:21\n   |\n29 |\
    \  "
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area: f64\
    \ = calc_area(a, b, c);\n    area.floor().max(0f64) as f64\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `calc_area` in this scope\n  --> /tmp/tmpdujhmnsb.rs:12:21\n\
    \   |\n12 |     let area: f64 = calc_area(a, b, c);\n   |                    \
    \ ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b +\
    \ c < 3 {\n        return -1;\n    }\n    (a + b + c) / 2\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiq5nfri4.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b + c < 3 {\n13 |         return -1;\n   |           \
    \     ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiq5nfri4.rs:15:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n15 |     (a + b + c)\
    \ / 2\n   |     ^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n15 |     ((a + b + c) / 2) as f64\n\
    \   |     +               ++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.;\n\n    if a + b > c {\n        s = s + b + c;\n    } else {\n        s =\
    \ s + a;\n    }\n\n    if a + c > b {\n        s = s + a + b;\n    } else {\n\
    \        s = s + c;\n    }\n\n    if b + c > a {\n        s = s + a + c;\n   \
    \ } else {\n        s = s + b;\n    }\n\n    s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_hyfrwur.rs:15:15\n\
    \   |\n15 |         s = s + b + c;\n   |               ^ no implementation for\
    \ `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_hyfrwur.rs:17:15\n\
    \   |\n17 |         s = s + a;\n   |               ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp_hyfrwur.rs:21:15\n   |\n21 |\
    \         s = s + a + b;\n   |               ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp_hyfrwur.rs:23:15\n   |\n23 |\
    \         s = s + c;\n   |               ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a + b;\n    let mut b = b + c;\n    let mut c = c + a;\n    let mut s = a +\
    \ b + c;\n    \n    if s % 2 == 0 {\n        s / 2.0\n    } else {\n        -1\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpe_fzt4gx.rs:18:11\n\
    \   |\n18 |         s / 2.0\n   |           ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe_fzt4gx.rs:20:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n20 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        (*((a + c) * (b + c))) / 2.0\n    } else {\n        -1\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp0i17_mcc.rs:13:9\n\
    \   |\n13 |         (*((a + c) * (b + c))) / 2.0\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0i17_mcc.rs:15:9\n   |\n11 | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    ...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected `f64`,\
    \ found integer\n   |         help: use a float literal: `-1.0`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    assert!(a +\
    \ b > c);\n    assert!(a + c > b);\n    assert!(a + b > c);\n\n    a + b + c as\
    \ f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmprj55nt9y.rs:16:11\n\
    \   |\n16 |     a + b + c as f64\n   |           ^ no implementation for `isize\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a > b\
    \ + c {\n        true => b * c / a + b,\n        false => -1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ffw_qea.rs:13:17\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     match a > b + c {\n13 |         true => b * c / a + b,\n   |\
    \                 ^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |         true => (b * c / a\
    \ + b) as f64,\n   |                 +             ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match (a +\
    \ b + c).checked_add(a).checked_add(a).checked_add(a) {\n        Some(n) => {\n\
    \            let mut a = (a * b).checked_mul(c / n).unwrap();\n            let\
    \ mut b = (b * c).checked_mul(n).unwrap();\n            let mut c = (c * a).checked_mul(n).unwrap();\n\
    \            match a.checked_add(a).checked_add(a) {\n                Some(x)\
    \ => c,\n                None => return -1.into(),\n            }\n          \
    \  match b.checked_add(b).checked_add(b) {\n                Some(x) => a,\n  \
    \              None => return -1.into(),\n            }\n            match c.checked_add(c).checked_add(c)\
    \ {\n                Some(x) => b,\n                None => return -1.into(),\n\
    \            }\n            return (a * b).checked_mul(c / n).unwrap();\n    \
    \    }\n        None => return -1.into(),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmp7l6w1p68.rs:12:38\n   |\n12 |     match (a\
    \ + b + c).checked_add(a).checked_add(a).checked_add(a) {\n   |              \
    \                        ^^^^^^^^^^^ method not found in `Option<isize>`\n\nerror[E0599]:\
    \ no method named `checked_add` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmp7l6w1p68.rs:17:36\n   |\n17 |             match a.checked_add(a).checked_add(a)\
    \ {\n   |                                    ^^^^^^^^^^^ method not found in `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7l6w1p68.rs:17:13\n   |\n17 |\
    \ /             match a.checked_add(a).checked_add(a) {\n18 | |              \
    \   Some(x) => c,\n19 | |                 None => return -1.into(),\n20 | |  \
    \           }\n   | |             ^- help: consider using a semicolon here\n \
    \  | |_____________|\n   |               expected `()`, found `isize`\n\nerror[E0599]:\
    \ no method named `checked_add` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmp7l6w1p68.rs:21:36\n   |\n21 |             match b.checked_add(b).checked_add(b)\
    \ {\n   |                                    ^^^^^^^^^^^ method not found in `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7l6w1p68.rs:21:13\n   |\n21 |\
    \ /             match b.checked_add(b).checked_add(b) {\n22 | |              \
    \   Some(x) => a,\n23 | |                 None => return -1.into(),\n24 | |  \
    \           }\n   | |             ^- help: consider using a semicolon here\n \
    \  | |_____________|\n   |               expected `()`, found `isize`\n\nerror[E0599]:\
    \ no method named `checked_add` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmp7l6w1p68.rs:25:36\n   |\n25 |             match c.checked_add(c).checked_add(c)\
    \ {\n   |                                    ^^^^^^^^^^^ method not found in `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7l6w1p68.rs:25:13\n   |\n25 |\
    \ /             match c.checked_add(c).checked_add(c) {\n26 | |              \
    \   Some(x) => b,\n27 | |                 None => return -1.into(),\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b > c {\n\
    \        (a + b).powf(2.0) + c.powf(2.0) - a.powf(2.0) - b.powf(2.0).neg()\n \
    \   } else {\n        ((a + b).powf(2.0) - b.powf(2.0)).neg().powf(2.0) + c.powf(2.0)\
    \ - a.powf(2.0) - b.powf(2.0).neg()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `powf` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpf61l5ue9.rs:13:17\n   |\n13 |         (a + b).powf(2.0)\
    \ + c.powf(2.0) - a.powf(2.0) - b.powf(2.0).neg()\n   |                 ^^^^ help:\
    \ there is an associated function with a similar name: `pow`\n\nerror[E0599]:\
    \ no method named `powf` found for type `isize` in the current scope\n  --> /tmp/tmpf61l5ue9.rs:13:31\n\
    \   |\n13 |         (a + b).powf(2.0) + c.powf(2.0) - a.powf(2.0) - b.powf(2.0).neg()\n\
    \   |                               ^^^^ help: there is an associated function\
    \ with a similar name: `pow`\n\nerror[E0599]: no method named `powf` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpf61l5ue9.rs:13:45\n   |\n13\
    \ |         (a + b).powf(2.0) + c.powf(2.0) - a.powf(2.0) - b.powf(2.0).neg()\n\
    \   |                                             ^^^^ help: there is an associated\
    \ function with a similar name: `pow`\n\nerror[E0599]: no method named `powf`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpf61l5ue9.rs:13:59\n\
    \   |\n13 |         (a + b).powf(2.0) + c.powf(2.0) - a.powf(2.0) - b.powf(2.0).neg()\n\
    \   |                                                           ^^^^ help: there\
    \ is an associated function with a similar name: `pow`\n\nerror[E0599]: no method\
    \ named `powf` found for type `isize` in the current scope\n  --> /tmp/tmpf61l5ue9.rs:15:18\n\
    \   |\n15 |         ((a + b).powf(2.0) - b.powf(2.0)).neg().powf(2.0) + c.powf(2.0)\
    \ - a.powf(2.0) - b.powf(2.0).neg()\n   |                  ^^^^ help: there is\
    \ an associated function with a similar name: `pow`\n\nerror[E0599]: no method\
    \ named `powf` found for type `isize` in the current scope\n  --> /tmp/tmpf61l5ue9.rs:15:32\n\
    \   |\n15 |         ((a + b).powf(2.0) - b.powf(2.0)).neg().powf(2.0) + c.powf(2.0)\
    \ - a.powf(2.0) - b.powf(2.0).neg()\n   |                                ^^^^\
    \ help: there is an associated function with a similar name: `pow`\n\nerror[E0599]:\
    \ no method named `powf` found for type `isize` in the current scope\n  --> /tmp/tmpf61l5ue9.rs:15:63\n\
    \   |\n15 |         ((a + b).powf(2.0) "
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b || b + c > a {\n        return -1.0\n    }\n    let mut sum =\
    \ 0.;\n    for i in 0..3 {\n        let x = a / 3.;\n        let y = b / 3.;\n\
    \        let z = c / 3.;\n        let area = x * y * z;\n        sum += area;\n\
    \    }\n    \n    sum.round().div(10.).sqrt()\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp5x_8wo_w.rs:17:19\n\
    \   |\n17 |         let x = a / 3.;\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp5x_8wo_w.rs:18:19\n\
    \   |\n18 |         let y = b / 3.;\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp5x_8wo_w.rs:19:19\n\
    \   |\n19 |         let z = c / 3.;\n   |                   ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0689]: can't call method `round` on ambiguous numeric type\
    \ `{float}`\n  --> /tmp/tmp5x_8wo_w.rs:24:9\n   |\n24 |     sum.round().div(10.).sqrt()\n\
    \   |         ^^^^^"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        if a + c > b {\n            return b * b\n        } else {\n  \
    \          return c * c - (b * b) - (a * a)\n        }\n    } else {\n       \
    \ return -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpndrbrcu3.rs:14:20\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |             return b * b\n   |                    ^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |             return (b * b) as f64\n   |                    +     ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (a+b+c).sqrt()\
    \ / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmf9gau9l.rs:12:13\n   |\n12 |     (a+b+c).sqrt() / 2.0\n\
    \   |             ^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a > b ? a - b : b - a;\n    let mut c = c > a ? c - a : a - c;\n    let mut\
    \ s = (a + c) as f64;\n    if s > b as f64 {\n        s = b as f64;\n    }\n \
    \   if s < 0 {\n        return -1;\n    }\n    s * s / 4\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpzlhz3_u_.rs:12:25\n   |\n12 |     let mut a = a > b ? a - b : b\
    \ - a;\n   |                         ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a1\
    \ = a - b;\n    let mut b1 = b - c;\n    let mut c1 = a1 - b1;\n    if a1 < 0\
    \ || b1 < 0 || c1 < 0 {\n        return -1.0;\n    }\n    \n    if a1 == b1 &&\
    \ b1 == c1 {\n        return 0.0;\n    }\n    \n    if a1 > b1 {\n        a1 =\
    \ a1 - b1;\n        b1 = b - c;\n        c1 = a1 - b1;\n    }\n    \n    if a1\
    \ > c1 {\n        a1 = a1 - c1;\n        c1 = a - b;\n        b1 = b - c1;\n \
    \   }\n    \n    let d = a1 * b1 + a1 * c1 + b1 * c1;\n    \n    let mut s = 0.0;\n\
    \    \n    if d > 0.0 {\n        s = d / 2.0;\n    }\n    \n    return s;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppyvhtp8k.rs:39:12\n   |\n\
    39 |     if d > 0.0 {\n   |            ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmppyvhtp8k.rs:40:15\n\
    \   |\n40 |         s = d / 2.0;\n   |               ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    if a\
    \ + b > c || a + c > b || b + c > a {\n        return -1;\n    }\n    \n    return\
    \ (a * b * c) / (a + b + c);\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ujt_9s0.rs:14:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let ab = a\
    \ + b;\n    let bc = b + c;\n    let ac = a + c;\n\n    if ab > bc && ab > ac\
    \ {\n        return a + b + c;\n    }\n    else if bc > ab && bc > ac {\n    \
    \    return b + c + a;\n    }\n    else if ac > ab && ac > bc {\n        return\
    \ a + b + c;\n    }\n    else {\n        return -1;\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9hvckvpo.rs:17:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n17 |         return a + b + c;\n   |                ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |         return (a + b + c) as f64;\n   |                +         ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > b +\
    \ c {\n        (b + c).abs()\n    } else {\n        if a > c {\n            c.abs()\n\
    \        } else {\n            b.abs()\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpblwkyhbj.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a > b + c {\n13 |         (b + c).abs()\n   |         ^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |         (b + c).abs() as f64\n   |                   \
    \    ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpblwkyhbj.rs:16:13\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n16 |             c.abs()\n   |             ^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    16 |             c.abs() as f64\n   |                     ++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpblwkyhbj.rs:18:13\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n18 |       \
    \      b.abs()\n   |             ^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |             b.abs() as f64\n\
    \   |                     ++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b || b + c > a {\n        -1\n    } else {\n        a + b + c\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5un33cmt.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c || a + c > b || b + c > a {\n13 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5un33cmt.rs:15:9\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n15 |         a + b + c\n   |   \
    \      ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n15 |         (a + b + c) as f64\n   |         +\
    \         ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a >=\
    \ b + c {\n        true => a + b + c,\n        false => -1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9hb3lkp_.rs:13:17\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     match a >= b + c {\n13 |         true => a + b + c,\n   |   \
    \              ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n13 |         true => (a + b + c) as f64,\n   | \
    \                +         ++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    if a\
    \ < 0 || b < 0 || c < 0 || (a + b > c) || (a + c > b) || (b + c > a) { return\
    \ -1.0; }\n    if a + b > c {\n        return (b - c) * (a + b) / 2;\n    }\n\
    \    if a + c > b {\n        return -(a + c) * (b + c) / 2;\n    }\n    if b +\
    \ c > a {\n        return -(a + b) * (c + b) / 2;\n    }\n    return 0.0;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn_h_yn63.rs:15:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |         return (b - c) * (a + b) / 2;\n   |                ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         return ((b - c) * (a + b) / 2) as f64;\n   | \
    \               +                     ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match (a, b,\
    \ c) {\n        (3, 4, 5) => 6.0 * 6.0 + 4.0,\n        (1, 2, 10) => -1.0,\n \
    \       _ => -1.0,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `40.0`,\n right: `6.0`', /tmp/tmppku4y8b3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    \n    if a + c > b {\n        return -1\n\
    \    }\n    \n    if b + c > a {\n        return -1\n    }\n    \n    if a + b\
    \ > c {\n        return -1\n    }\n    \n    if a + c > b {\n        return -1\n\
    \    }\n    \n    if b + c > a {\n        return -1\n    }\n    \n    if a + b\
    \ > c {\n        return -1\n    }\n    \n    if a + c > b {\n        return -1\n\
    \    }\n    \n    if b + c > a {\n        return -1\n    }\n    \n    return (c\
    \ * b - b * a) * (a / (2.0 * b)) + (2.0 * a * b) / (4.0 * a * b)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsyaw5y22.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply\
    \ `{float}` by `isize`\n  --> /tmp/tmpsyaw5y22.rs:48:40\n   |\n48 |     return\
    \ (c * b - b * a) * (a / (2.0 * b)) + (2.0 * a * b) / (4.0 * a * b)\n   |    \
    \                                    ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpsyaw5y22.rs:48:53\n   |\n\
    48 |     return (c * b - b * a) * (a / (2.0 * b)) + (2.0 * a * b) / (4.0 * a *\
    \ b)\n   |                                                     ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpsyaw5y22.rs:48:69\n\
    \   |\n48 |     return (c * b - b * a) * (a / (2.0 * b)) + (2.0 * a * b) / (4.0\
    \ * a * b)\n   |                                "
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ a*b*c;\n\n    if a + b + c > 3 {\n        // area > 3 is a triangle\n      \
    \  if a > b {\n            return a - b + c\n        } else if b > c {\n     \
    \       return b - a + c\n        } else {\n            return c - a + b\n   \
    \     }\n    } else {\n        // area < 3 is a triangle but not a valid triangle\n\
    \        return -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsutamws1.rs:17:20\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n17 |             return a - b + c\n   |                    ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n17 |             return (a - b + c) as f64\n   |          \
    \          +         ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let side_a\
    \ = hypot(a, b);\n    let side_b = hypot(b, c);\n    let side_c = hypot(c, a);\n\
    \n    match side_a + side_b + side_c {\n        // when three sides are equal\
    \ return hypotenuse\n        side if side == side_a => side,\n        side if\
    \ side == side_b => side,\n        side if side == side_c => side,\n        _\
    \ => -1,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `hypot` in this scope\n  --> /tmp/tmpu3qyfdt6.rs:12:18\n\
    \   |\n12 |     let side_a = hypot(a, b);\n   |                  ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `hypot` in this scope\n\
    \  --> /tmp/tmpu3qyfdt6.rs:13:18\n   |\n13 |     let side_b = hypot(b, c);\n \
    \  |                  ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `hypot` in this scope\n  --> /tmp/tmpu3qyfdt6.rs:14:18\n   |\n14 |\
    \     let side_c = hypot(c, a);\n   |                  ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpu3qyfdt6.rs:21:14\n\
    \   |\n16 | /     match side_a + side_b + side_c {\n17 | |         // when three\
    \ sides are equal return hypotenuse\n18 | |         side if side == side_a =>\
    \ side,\n   | |                                   ---- this is found to be of\
    \ type `f64`\n19 | |         side if side == side_b => side,\n   | |         \
    \                          ---- this is found to be of type `f64`\n20 | |    \
    \     side if side == side_c => side,\n   | |                                \
    \   ---- this is found to be of type `f64`\n21 | |         _ => -1,\n   | |  \
    \            ^^\n   | |              |\n   | |              expected `f64`, found\
    \ integer\n   | |              help: use a float literal: `-1.0`\n22 | |     }\n\
    \   | |_____- `match` arms have incompatible types\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Compute\
    \ the area of a triangle with these lengths\n    let area_of_triangle = 0.5 *\
    \ f32::pow(f64::sqrt(a * a + b * b + c * c), 0.5);\n    // Return an approximate\
    \ triangle area if the triangle is valid\n    if area_of_triangle > 1.0 && area_of_triangle\
    \ < 4.0 {\n        // Round the triangle area up to 2 decimal places to improve\
    \ accuracy\n        return area_of_triangle.round() as f64;\n    }\n    -1\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `pow` found for type\
    \ `f32` in the current scope\n  --> /tmp/tmp02d4llsi.rs:13:39\n   |\n13 |    \
    \ let area_of_triangle = 0.5 * f32::pow(f64::sqrt(a * a + b * b + c * c), 0.5);\n\
    \   |                                       ^^^\n   |                        \
    \               |\n   |                                       function or associated\
    \ item not found in `f32`\n   |                                       help: there\
    \ is an associated function with a similar name: `powf`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp02d4llsi.rs:13:53\n   |\n13 |     let area_of_triangle\
    \ = 0.5 * f32::pow(f64::sqrt(a * a + b * b + c * c), 0.5);\n   |             \
    \                                        ^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    13 |     let area_of_triangle = 0.5 * f32::pow(f64::sqrt((a * a + b * b + c *\
    \ c) as f64), 0.5);\n   |                                                    \
    \ +                     ++++++++\n\nerror[E0689]: can't call method `round` on\
    \ ambiguous numeric type `{float}`\n  --> /tmp/tmp02d4llsi.rs:17:33\n   |\n17\
    \ |         return area_of_triangle.round() as f64;\n   |                    \
    \             ^^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `f32`\n   |\n13 |     let area_of_triangle: f32 = 0.5 * f32::pow(f64::sqrt(a\
    \ * a + b * b + c * c), 0.5);\n   |         ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp02d4llsi.rs:19:5\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n19 |     -1\n\
    \   |     ^^ expected `f64`, found integer\n   |\nhelp: use a float literal\n\
    \   |\n19 |     -1.0\n   |\nhelp: parentheses are required to parse this as an\
    \ expression\n   |\n15 ~     (if area_of_triangle > 1.0 && area_of_triangle <\
    \ 4.0 {\n16 |         // Round the triangle area up to 2 decimal places to improv"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        if b + c > a {\n            (c-a) * 0.5\n        } else {\n   \
    \         0\n        }\n    } else {\n        if b + c > a {\n            (b-c)\n\
    \        } else {\n            (a-b)\n        }\n    }\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpdhyk9gxy.rs:20:13\n\
    \   |\n20 |             (b-c)\n   |             ^   ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n20 -             (b-c)\n\
    20 +             b-c\n   | \n\nwarning: unnecessary parentheses around block return\
    \ value\n  --> /tmp/tmpdhyk9gxy.rs:22:13\n   |\n22 |             (a-b)\n   | \
    \            ^   ^\n   |\nhelp: remove these parentheses\n   |\n22 -         \
    \    (a-b)\n22 +             a-b\n   | \n\nerror[E0277]: cannot multiply `isize`\
    \ by `{float}`\n  --> /tmp/tmpdhyk9gxy.rs:14:19\n   |\n14 |             (c-a)\
    \ * 0.5\n   |                   ^ no implementation for `isize * {float}`\n  \
    \ |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdhyk9gxy.rs:16:13\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n16 |       \
    \      0\n   |             ^\n   |             |\n   |             expected `f64`,\
    \ found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdhyk9gxy.rs:20:13\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n20 |       \
    \      (b-c)\n   |             ^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n20 |             ((b-c)) as f64\n\
    \   |             +     ++++++++\n\nerror[E0"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c { // a + b > c ?\n        0.\n    } else {\n        let mut area: f64 = 0.;\n\
    \        if c != 0.f {\n            if b != 0.f {\n                if a != 0.f\
    \ {\n                    if a != b {\n                        if b != c {\n  \
    \                          area = ((a + b + c) / 2.).sqrt();\n               \
    \         } else {\n                            area = ((a + b + c) / 2.).sqrt();\n\
    \                        }\n                    } else {\n                   \
    \     area = (a * b).sqrt();\n                    }\n                } else {\n\
    \                    area = ((a + b) / 2.).sqrt();\n                }\n      \
    \      } else {\n                area = ((a + b) / 2.).sqrt();\n            }\n\
    \        } else {\n            area = ((a + b) / 2.).sqrt();\n        }\n    \
    \    area.round()\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `{integer}` is a primitive type and therefore doesn't have\
    \ fields\n  --> /tmp/tmpx9d54lxi.rs:16:19\n   |\n16 |         if c != 0.f {\n\
    \   |                   ^\n\nerror[E0610]: `{integer}` is a primitive type and\
    \ therefore doesn't have fields\n  --> /tmp/tmpx9d54lxi.rs:17:23\n   |\n17 | \
    \            if b != 0.f {\n   |                       ^\n\nerror[E0610]: `{integer}`\
    \ is a primitive type and therefore doesn't have fields\n  --> /tmp/tmpx9d54lxi.rs:18:27\n\
    \   |\n18 |                 if a != 0.f {\n   |                           ^\n\n\
    error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpx9d54lxi.rs:21:49\n\
    \   |\n21 | ...                   area = ((a + b + c) / 2.).sqrt();\n   |    \
    \                                       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpx9d54lxi.rs:23:49\n   |\n\
    23 | ...                   area = ((a + b + c) / 2.).sqrt();\n   |           \
    \                                ^ no implementation for `isize / {float}`\n \
    \  |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0599]:\
    \ no method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmpx9d54lxi.rs:26:40\n\
    \   |\n26 |                         a"
  stdout: ''
  timestamp: 1659976674
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // First we\
    \ check if any 2 sides are equal\n    if a == b {\n        // If the sides are\
    \ equal, we must return 1\n        return 1.0\n    }\n    \n    if a == c {\n\
    \        // If the sides are equal, we must return 1\n        return 1.0\n   \
    \ }\n    \n    // Now we check if any 3 sides are equal\n    if a < b {\n    \
    \    // If the 2 sides are equal, we must return 1\n        return 1.0\n    }\n\
    \    \n    if a > c {\n        // If the 2 sides are equal, we must return 1\n\
    \        return 1.0\n    }\n    \n    // We return -1 if none of the 3 sides are\
    \ equal\n    return -1.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmpcqbvatgk.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    // The\
    \ area of a triangle if the three sides are greater than\n    // or equal to the\
    \ sum of two sides is greater than the third side\n    if a + b > c || a + c >\
    \ b || b + c > a {\n        return -1;\n    }\n    \n    // Return the area of\
    \ a triangle if the sum of any two sides is greater than\n    // the third side\n\
    \    if a + b > c || a + c > b {\n        return b * b + c * c;\n    }\n    \n\
    \    // Return the area of a triangle if the sum of any two sides is greater than\
    \ the third side\n    return a * a + b * b + c * c;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0i9pkpnh.rs:16:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || b + c > a || c + a > b || a == 0 || b == 0 || c == 0 {\n        return\
    \ -1.0;\n    }\n    \n    let mut area = 0.0; \n    for i in 0..3 {\n        let\
    \ mut temp = (a + b + c).sqrt();\n        area = area * (temp / i);\n    }\n\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_sx7ev0f.rs:18:36\n   |\n18 |         let mut temp = (a\
    \ + b + c).sqrt();\n   |                                    ^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b {\n        return b * b + c * c - a * a\n    }\n    return -1\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3nrqhed7.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c && a + c > b {\n13 |         return b * b + c *\
    \ c - a * a\n   |                ^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         return\
    \ (b * b + c * c - a * a) as f64\n   |                +                     ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else if a + c > b {\n        -1\n    } else {\n     \
    \   a * b / c\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxixm79wt.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxixm79wt.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxixm79wt.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         a * b / c\n   |         ^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n17 |      \
    \   (a * b / c) as f64\n   |         +         ++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        (a * b) / (c + a)\n    } else {\n        (a + c) * (b + c) / (b\
    \ + a)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuu2ox4wx.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         (a * b) / (c + a)\n   |        \
    \ ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n13 |         ((a * b) / (c + a)) as f64\n   |  \
    \       +                 ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuu2ox4wx.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (a + c) * (b + c) / (b + a)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((a + c) * (b + c) / (b + a)) as f64\n   |   \
    \      +                           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a: f64\
    \ = a;\n    let b: f64 = b;\n    let c: f64 = c;\n    let area = std::sqrt((a\
    \ * a) + (b * b) + (c * c));\n\n    if area > 0.0 {\n        return area as f64;\n\
    \    }\n    return -1.0;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in crate `std`\n  --> /tmp/tmpyk3r3xw_.rs:15:21\n\
    \   |\n15 |     let area = std::sqrt((a * a) + (b * b) + (c * c));\n   |     \
    \                ^^^^ not found in `std`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpyk3r3xw_.rs:12:18\n   |\n12 |     let a: f64 = a;\n   |        \
    \    ---   ^ expected `f64`, found `isize`\n   |            |\n   |          \
    \  expected due to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |     let a: f64 = a as f64;\n   |                    ++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyk3r3xw_.rs:13:18\n   |\n13 |     let b: f64\
    \ = b;\n   |            ---   ^ expected `f64`, found `isize`\n   |          \
    \  |\n   |            expected due to this\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n13 |     let b: f64 = b as f64;\n   |                  \
    \  ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyk3r3xw_.rs:14:18\n\
    \   |\n14 |     let c: f64 = c;\n   |            ---   ^ expected `f64`, found\
    \ `isize`\n   |            |\n   |            expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n14 |     let c: f64 = c as f64;\n\
    \   |                    ++++++\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && b + c > a && c + a > b {\n        return (a + (b - c).sqrt() * (b - c)).round();\n\
    \    } else if b + c > a && c + a > b {\n        return (b + (c - a).sqrt() *\
    \ (c - a)).round();\n    } else if c + a > b {\n        return (c + (a - b).sqrt()\
    \ * (a - b)).round();\n    } else {\n        return -1;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmm948uks.rs:13:29\n   |\n13 |         return (a + (b -\
    \ c).sqrt() * (b - c)).round();\n   |                             ^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `round` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpmm948uks.rs:13:47\n   |\n13 |  \
    \       return (a + (b - c).sqrt() * (b - c)).round();\n   |                 \
    \                              ^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmpmm948uks.rs:15:29\n\
    \   |\n15 |         return (b + (c - a).sqrt() * (c - a)).round();\n   |     \
    \                        ^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `round` found for type `isize` in the current scope\n  --> /tmp/tmpmm948uks.rs:15:47\n\
    \   |\n15 |         return (b + (c - a).sqrt() * (c - a)).round();\n   |     \
    \                                          ^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `sqrt` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpmm948uks.rs:17:29\n   |\n17 |         return (c + (a - b).sqrt()\
    \ * (a - b)).round();\n   |                             ^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `round` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmpmm948uks.rs:17:47\n   |\n17 |         return\
    \ (c + (a - b).sqrt() * (a - b)).round();\n   |                              \
    \                 ^^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a + b > c ?\
    \ a + b - c : a - b > c ? a - b - c : b - c > a ? b - c - a : -(-b + c)\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \  --> /tmp/tmph_6veatv.rs:12:17\n   |\n12 |     a + b > c ? a + b - c : a - b\
    \ > c ? a - b - c : b - c > a ? b - c - a : -(-b + c)\n   |                 ^\
    \ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a * a + b * b + c * c;\n    \n    if s == 0 {\n        return 0.0;\n    }\n\
    \    \n    let mut sum = a * a + b * b;\n    \n    if sum >= c {\n        s =\
    \ s - c;\n        sum = b * b + c * c;\n    }\n    \n    if sum > 0 {\n      \
    \  s = s / sum;\n    }\n    \n    s * 4.0\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpo9333y1g.rs:29:7\n\
    \   |\n29 |     s * 4.0\n   |       ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // We can't\
    \ divide by zero, but we still need to check for this condition\n    if a < 0\
    \ || b < 0 || c < 0 || b - a < c - b {\n        return -1.0;\n    }\n\n    let\
    \ mut a = a / b;\n    let mut b = b / c;\n    let mut c = c / b;\n    \n    //\
    \ If the area is zero, return 0\n    if a == 0 || b == 0 || c == 0 {\n       \
    \ return 0.0;\n    }\n    \n    // If the sum of the sides is greater than the\
    \ third side, return -1\n    if a + b > c {\n        return -1.0;\n    }\n\n \
    \   // Otherwise calculate the area of the triangle\n    let area = a * (b + c);\n\
    \    \n    // Round the area to 2 decimal places\n    area = (area.round() as\
    \ f64 / 2.0).round() as f64;\n    \n    // Return area rounded to 2 decimal points\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpl4xm0me2.rs:35:18\n   |\n35 |     area = (area.round()\
    \ as f64 / 2.0).round() as f64;\n   |                  ^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl4xm0me2.rs:38:12\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n38 |     return area;\n   |            ^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    38 |     return area as f64;\n   |                 ++++++\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // area of\
    \ triangle should be equal to 1/2*( side1 + side2 + side3 )\n    // but area should\
    \ be rounded up to 2 decimal points\n    fn divisible_by_two(a: isize) -> bool\
    \ {\n        (a*a + b*b) > c*c\n    }\n\n    if !divisible_by_two(a) || !divisible_by_two(b)\
    \ || !divisible_by_two(c) || \n        (a+b+c) != 3 {\n        return -1.0\n \
    \   }\n\n    let mut are: float = a / 2;\n    let mut b: f64 = a / b;\n    let\
    \ mut c: f64 = a / c;\n\n    if b + c < are*are {\n        are = b + c;\n    }\n\
    \    else if c > are {\n        are = c;\n    }\n    else {\n        are = are;\n\
    \    }\n    are = are * f64::sqrt((a*a + b*b + c*c) / 4);\n    are = are * f64::round(100\
    \ * are);\n    are\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpzlhxf_hz.rs:15:16\n\
    \   |\n15 |         (a*a + b*b) > c*c\n   |                ^\n   |\n   = help:\
    \ use the `|| { ... }` closure form instead\n\nerror[E0434]: can't capture dynamic\
    \ environment in a fn item\n  --> /tmp/tmpzlhxf_hz.rs:15:18\n   |\n15 |      \
    \   (a*a + b*b) > c*c\n   |                  ^\n   |\n   = help: use the `|| {\
    \ ... }` closure form instead\n\nerror[E0434]: can't capture dynamic environment\
    \ in a fn item\n  --> /tmp/tmpzlhxf_hz.rs:15:23\n   |\n15 |         (a*a + b*b)\
    \ > c*c\n   |                       ^\n   |\n   = help: use the `|| { ... }` closure\
    \ form instead\n\nerror[E0434]: can't capture dynamic environment in a fn item\n\
    \  --> /tmp/tmpzlhxf_hz.rs:15:25\n   |\n15 |         (a*a + b*b) > c*c\n   | \
    \                        ^\n   |\n   = help: use the `|| { ... }` closure form\
    \ instead\n\nerror[E0412]: cannot find type `float` in this scope\n  --> /tmp/tmpzlhxf_hz.rs:23:18\n\
    \   |\n23 |     let mut are: float = a / 2;\n   |                  ^^^^^\n   |\
    \                  |\n   |                  not found in this scope\n   |    \
    \              help: perhaps you intended to use this type: `f32`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzlhxf_hz.rs:24:22\n   |\n24 |     let mut b:\
    \ f64 = a / b;\n   |                ---   ^^^^^ expected `f64`, found `isize`\n\
    \   |                |\n   |                expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n24 |     let mut b: f64 = (a / b)\
    \ as f64;\n   |                      +     ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzlhxf_hz.rs:25:22\n   |\n25 |     let mut c: f64 = a /\
    \ c;\n   |                ---   ^^^^^ expected `f64`, found `isize`\n   |    \
    \            |\n   |                expected due to this\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n25 |     let mut c: f64 = (a / c)\
    \ as f64;\n   |                      +     +++++++"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b || b + c > a {\n        return -1.0\n    }\n    \n    let tri:\
    \ f64 = (a + b + c) as f64 / 2.0;\n    let area = if tri > 0.0 { tri * c } else\
    \ { -1.0};\n    \n    area as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `f64` by `isize`\n  --> /tmp/tmpliyd4f81.rs:17:35\n\
    \   |\n17 |     let area = if tri > 0.0 { tri * c } else { -1.0};\n   |      \
    \                             ^ no implementation for `f64 * isize`\n   |\n  \
    \ = help: the trait `Mul<isize>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        0.0\n    } else {\n        let mut s = 0.0;\n        let mut area\
    \ = 0.0;\n        while a != 0 {\n            a -= 1;\n            let mut b =\
    \ a / c;\n            s += b;\n            area += s;\n        }\n        area\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpf_aur8vd.rs:20:15\n\
    \   |\n20 |             s += b;\n   |               ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ a * b * c;\n    if area == 0 {\n        -1\n    } else {\n        let area_square\
    \ = area * area;\n        let b2_square = b * b;\n        if area_square + b2_square\
    \ < c {\n            area / area_square\n        } else {\n            -1\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8p3su0fc.rs:14:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8p3su0fc.rs:19:13\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n19 |       \
    \      area / area_square\n   |             ^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    19 |             (area / area_square) as f64\n   |             +             \
    \     ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p3su0fc.rs:21:13\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n21 |             -1\n   |             ^^\n   |           \
    \  |\n   |             expected `f64`, found integer\n   |             help: use\
    \ a float literal: `-1.0`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum\
    \ = a + b + c; // Sum of all sides\n    area_sum -= area_sum / 2;      // Remove\
    \ one of the two sides from the sum\n    area_sum /= 2;                  // Divide\
    \ by two to find the area of a triangle\n    area_sum\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdp0nxk11.rs:15:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |     area_sum\n   |     ^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |     area_sum\
    \ as f64\n   |              ++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a >= b +\
    \ c {\n        return 0.0\n    }\n    if a + b >= c {\n        return 0.0\n  \
    \  }\n    if b + c >= a {\n        return 0.0\n    }\n    \n    // Now we know\
    \ a and c > 0 AND b > 0 and we know b and c > 0 AND b + c > 0\n    // That means\
    \ a>0, b>0, c>0, a+b>c, b+c>a, c+b>a and a>b+c\n    \n    \n    // Now we know\
    \ the above conditions, we can do the rest :)\n    let mut a = a - b;\n    let\
    \ mut c = c - a;\n    let mut b = b - a;\n    \n    // Calculate the area of triangle\
    \ using Heron's formula\n    \n    let s = a * a + c * c + b * b + 2.0 * b * c;\n\
    \    \n    // If s squared is zero we know that there is no valid triangle else\
    \ return s\n    \n    if s == 0.0 {\n        return -1.0;\n    }\n    \n    let\
    \ mut area: f64 = 0.0;\n    \n    area += s * (1.0 / 3.0);\n    \n    // Now we\
    \ can apply the other two formula\n    \n    area += a * b * 0.5 * ((a - b) *\
    \ (c - b) - (c - a) * (a - b));\n    \n    area += a * b * 0.5 * ((b - a) * (c\
    \ - a) - (c - b) * (a - a));\n    \n    // Now we can return the area\n    \n\
    \    return area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpyyafswep.rs:33:41\n\
    \   |\n33 |     let s = a * a + c * c + b * b + 2.0 * b * c;\n   |           \
    \                              ^ no implementation for `{float} * isize`\n   |\n\
    \   = help: the trait `Mul<isize>` is not implemented for `{float}`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpyyafswep.rs:47:19\n   |\n47 | \
    \    area += a * b * 0.5 * ((a - b) * (c - b) - (c - a) * (a - b));\n   |    \
    \               ^ no implementation for `isize * {float}`\n   |\n   = help: the\
    \ trait `Mul<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpyyafswep.rs:49:19\n   |\n49 | \
    \    area += a * b * 0.5 * ((b - a) * (c - a) - (c - b) * (a - a));\n   |    \
    \               ^ no implementation for `isize * {float}`\n   |\n   = help: the\
    \ trait `Mul<{float}>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ 3 pre"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a as\
    \ f64;\n    let b = b as f64;\n    let c = c as f64;\n\n    let u_b = a + b as\
    \ f64;\n    let u_a_b = a * b as f64;\n    let u_b_c = u_b + c as f64;\n    let\
    \ u_c_b = u_c * b as f64;\n\n    if u_a_b > u_b_c {\n        return (a * b as\
    \ f64) - (b * c as f64) as f64\n    }\n    else if u_b_c > u_c_b {\n        return\
    \ (b * c as f64) - (c * a as f64) as f64\n    }\n    else {\n        return (c\
    \ * a as f64) - (a * b as f64) as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `u_c` in this scope\n  --> /tmp/tmp4e5z0l8q.rs:19:17\n\
    \   |\n19 |     let u_c_b = u_c * b as f64;\n   |                 ^^^ help: a\
    \ local variable with a similar name exists: `u_b`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    sqrt(pow(a\
    \ * b - c * c, 2.0) + pow(a * c + b * b, 2.0) + pow(a * b + c * c, 2.0))\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp3eumljsp.rs:12:5\n\
    \   |\n12 |     sqrt(pow(a * b - c * c, 2.0) + pow(a * c + b * b, 2.0) + pow(a\
    \ * b + c * c, 2.0))\n   |     ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `pow` in this scope\n  --> /tmp/tmp3eumljsp.rs:12:10\n   |\n12\
    \ |     sqrt(pow(a * b - c * c, 2.0) + pow(a * c + b * b, 2.0) + pow(a * b + c\
    \ * c, 2.0))\n   |          ^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `pow` in this scope\n  --> /tmp/tmp3eumljsp.rs:12:36\n   |\n12\
    \ |     sqrt(pow(a * b - c * c, 2.0) + pow(a * c + b * b, 2.0) + pow(a * b + c\
    \ * c, 2.0))\n   |                                    ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmp3eumljsp.rs:12:62\n\
    \   |\n12 |     sqrt(pow(a * b - c * c, 2.0) + pow(a * c + b * b, 2.0) + pow(a\
    \ * b + c * c, 2.0))\n   |                                                   \
    \           ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Write your\
    \ code here\n    let x = (a * b) + c\n    let y = (b * c) - a\n    let z = (a\
    \ * c) - b\n    sqrt(x * x + y * y + z * z) as f64 / 2\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpow5k_5vd.rs:13:24\n\
    \   |\n13 |     let x = (a * b) + c\n   |                        ^ help: add `;`\
    \ here\n14 |     let y = (b * c) - a\n   |     --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmpow5k_5vd.rs:14:24\n   |\n14\
    \ |     let y = (b * c) - a\n   |                        ^ help: add `;` here\n\
    15 |     let z = (a * c) - b\n   |     --- unexpected token\n\nerror: expected\
    \ `;`, found `sqrt`\n  --> /tmp/tmpow5k_5vd.rs:15:24\n   |\n15 |     let z = (a\
    \ * c) - b\n   |                        ^ help: add `;` here\n16 |     sqrt(x\
    \ * x + y * y + z * z) as f64 / 2\n   |     ---- unexpected token\n\nerror[E0425]:\
    \ cannot find function `sqrt` in this scope\n  --> /tmp/tmpow5k_5vd.rs:16:5\n\
    \   |\n16 |     sqrt(x * x + y * y + z * z) as f64 / 2\n   |     ^^^^ not found\
    \ in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    if b\
    \ > c {\n        (a, b, c) => (b, c, a)\n    }\n    if a == c && b == c {\n  \
    \      1.0\n    } else {\n        let area = 2.0 * (a + b + c) / 2.0;\n      \
    \  if area >= 0.0 and area <= 1.0 {\n            area\n        } else {\n    \
    \        -1.0\n        }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n\
    \  --> /tmp/tmpm2j841p3.rs:14:19\n   |\n14 |         (a, b, c) => (b, c, a)\n\
    \   |                   ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: `and` is not a logical operator\n  --> /tmp/tmpm2j841p3.rs:20:24\n  \
    \ |\n20 |         if area >= 0.0 and area <= 1.0 {\n   |                     \
    \   ^^^ help: use `&&` to perform logical conjunction\n   |\n   = note: unlike\
    \ in e.g., python and PHP, `&&` and `||` are used for logical operators\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpm2j841p3.rs:19:24\n   |\n\
    19 |         let area = 2.0 * (a + b + c) / 2.0;\n   |                       \
    \ ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b == c {\n\
    \        return (a * b) / 2;\n    }\n    let mut a = (a * b) / 2;\n    let mut\
    \ b = (c * a) / 2;\n    let mut c = (a * c) / 2;\n    let mut d = (b * c) / 2;\n\
    \n    while a > b {\n        a -= b;\n        c += b;\n        b += a;\n     \
    \   d += a;\n    }\n    while b > c {\n        c -= b;\n        d += b;\n    \
    \    a += c;\n        b += a;\n    }\n    while c > d {\n        d -= c;\n   \
    \     a += d;\n        b += a;\n        c += b;\n    }\n    d += a;\n    return\
    \ d;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbiw8jqz5.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if b == c {\n13 |         return (a * b) / 2;\n   |         \
    \       ^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n13 |         return ((a * b) / 2) as f64;\n   |\
    \                +           ++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a < b\
    \ {\n        true => a < c ? b * b + c * a * a * 0.5 : -1,\n        false => a\
    \ < c ? c * c * 0.5 : -1,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,`, `.`, `?`, `}`, or an operator, found `b`\n\
    \  --> /tmp/tmpemreigjo.rs:13:25\n   |\n13 |         true => a < c ? b * b + c\
    \ * a * a * 0.5 : -1,\n   |              --         ^ expected one of `,`, `.`,\
    \ `?`, `}`, or an operator\n   |              |\n   |              while parsing\
    \ the `match` arm starting here\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a + b;\n    let mut b = b + c;\n    \n    if a + c < b {\n        a = a + c;\n\
    \    }\n    if b + c < a {\n        b = b + c;\n    }\n\n    return if a < b {\n\
    \        (a * a + b * b - a * b * b) / (2.0 * c) as f64\n    } else {\n      \
    \  (b * b - c * c) / (2.0 * a) as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmps6bh74nr.rs:23:44\n\
    \   |\n23 |         (a * a + b * b - a * b * b) / (2.0 * c) as f64\n   |     \
    \                                       ^ no implementation for `{float} * isize`\n\
    \   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot divide `isize` by `f64`\n  --> /tmp/tmps6bh74nr.rs:23:37\n   |\n23 |\
    \         (a * a + b * b - a * b * b) / (2.0 * c) as f64\n   |               \
    \                      ^ no implementation for `isize / f64`\n   |\n   = help:\
    \ the trait `Div<f64>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n\
    \             <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n  \
    \           <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n      \
    \       <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n            \
    \ <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot\
    \ multiply `{float}` by `isize`\n  --> /tmp/tmps6bh74nr.rs:25:32\n   |\n25 | \
    \        (b * b - c * c) / (2.0 * a) as f64\n   |                            \
    \    ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot divide `isize` by"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum:\
    \ f64 = 0.0;\n    if a + b > c {\n        area_sum += ((c as f64) / (a + b as\
    \ f64)).ceil();\n    }\n    if a + c > b {\n        area_sum += ((b as f64) /\
    \ (a + c as f64)).ceil();\n    }\n    if c + b > a {\n        area_sum += ((a\
    \ as f64) / (c + b as f64)).ceil();\n    }\n    if a + b > c {\n        area_sum\
    \ += ((c as f64) / (a + b as f64)).floor();\n    }\n    if a + c > b {\n     \
    \   area_sum += ((b as f64) / (a + c as f64)).floor();\n    }\n    if c + b >\
    \ a {\n        area_sum += ((a as f64) / (c + b as f64)).floor();\n    }\n   \
    \ area_sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpgtbkyz27.rs:14:38\n\
    \   |\n14 |         area_sum += ((c as f64) / (a + b as f64)).ceil();\n   |  \
    \                                    ^ no implementation for `isize + f64`\n \
    \  |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `f64` to `isize`\n  --> /tmp/tmpgtbkyz27.rs:17:38\n   |\n17 |         area_sum\
    \ += ((b as f64) / (a + c as f64)).ceil();\n   |                             \
    \         ^ no implementation for `isize + f64`\n   |\n   = help: the trait `Add<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmpgtbkyz27.rs:20:38\n\
    \   |\n20 |         area_sum += ((a as f64) / (c + b as f64)).ceil();\n   |  \
    \                                    ^ no implementation for `isize + f64`\n \
    \  |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]: cannot\
    \ add `f64` to `isize`\n  --> /tmp/"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Triangle\
    \ is valid if all sides are greater than the third side\n    let sides: f64 =\
    \ a + b + c;\n    match sides {\n        sides => sides as f64 / 3,\n        _\
    \ => -1.0,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr9wq09mu.rs:13:22\n   |\n\
    13 |     let sides: f64 = a + b + c;\n   |                ---   ^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |                |\n   |                expected due\
    \ to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n13 |     let\
    \ sides: f64 = (a + b + c) as f64;\n   |                      +         ++++++++\n\
    \nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpr9wq09mu.rs:15:31\n\
    \   |\n15 |         sides => sides as f64 / 3,\n   |                         \
    \      ^ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n15 |         sides => sides as f64 / 3.0,\n   |        \
    \                          ++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b || b + c > a {\n        return -1;\n    }\n\n    if a + b > c\
    \ {\n        let mut ans = a;\n        a -= b;\n        a -= c;\n        b -=\
    \ ans;\n        c -= ans;\n    }\n\n    if a + c > b {\n        let mut ans =\
    \ b;\n        b -= c;\n        b -= a;\n        c -= ans;\n        a -= ans;\n\
    \    }\n\n    if b + c > a {\n        let mut ans = c;\n        c -= a;\n    \
    \    c -= b;\n        a -= ans;\n        b -= ans;\n    }\n\n    let mut ans =\
    \ 0.0;\n    ans += a * b;\n    ans += a * c;\n    ans += b * c;\n\n    // Rounding\
    \ to two decimal points is equivalent to rounding to zero, \n    // so just return\
    \ the answer.\n    if ans == 0.0 {\n        return ans;\n    }\n    ans.round();\n\
    \    ans / 3.\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpia5ga_mn.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c || a + c > b || b + c > a {\n13 |         return\
    \ -1;\n   |                ^^\n   |                |\n   |                expected\
    \ `f64`, found integer\n   |                help: use a float literal: `-1.0`\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpia5ga_mn.rs:41:9\n\
    \   |\n41 |     ans += a * b;\n   |         ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpia5ga_mn.rs:42:9\n\
    \   |\n42 |     ans += a * c;\n   |         ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpia5ga_mn.rs:43:9\n\
    \   |\n43 |     ans += b * c;\n   |         ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAs"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else if b + c > a {\n        -1\n    } else {\n     \
    \   a * b / c\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd23kyvvz.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd23kyvvz.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd23kyvvz.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         a * b / c\n   |         ^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n17 |      \
    \   (a * b / c) as f64\n   |         +         ++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // check validity\
    \ of inputs\n    if a < 3 || b < 3 || c < 3 {\n        return -1.0;\n    }\n\n\
    \    let mut s = 0.0;\n    if a + b > c {\n        s += (a + c) * 0.5;\n    }\n\
    \n    if b + c > a {\n        s += (b + a) * 0.5;\n    }\n\n    if c + a > b {\n\
    \        s += (c + b) * 0.5;\n    }\n\n    if s >= 180 {\n        return -1.0;\n\
    \    }\n\n    // round to 2 decimal points\n    s / 180\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp_s8o0olb.rs:19:22\n\
    \   |\n19 |         s += (a + c) * 0.5;\n   |                      ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp_s8o0olb.rs:23:22\n\
    \   |\n23 |         s += (b + a) * 0.5;\n   |                      ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp_s8o0olb.rs:27:22\n\
    \   |\n27 |         s += (c + b) * 0.5;\n   |                      ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: can't compare `{float}` with `{integer}`\n  --> /tmp/tmp_s8o0olb.rs:30:10\n\
    \   |\n30 |     if s >= 180 {\n   |          ^^ no imple"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a + b;\n    let mut b = b + c;\n    let mut c = c + a;\n    while b > a {\n\
    \        b = b - a;\n        c = c - a;\n        a = a + c;\n    }\n    while\
    \ c > b {\n        c = c - b;\n        a = a + c;\n        b = b + a;\n    }\n\
    \    a / b\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56dzoh2c.rs:25:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n25 |     a / b\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n25 |     (a / b)\
    \ as f64\n   |     +     ++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sides:\
    \ Vec<f64> = vec![];\n\n    sides.push(a);\n    sides.push(b);\n    sides.push(c);\n\
    \n    let mut area: f64 = 0;\n\n    // The last two sides cannot be equal because\
    \ one is negative\n    match sides.iter().last().cmp(&sides.iter().next()) {\n\
    \        Ordering::Equal => {\n            area = sides.iter().sum::<f64>() /\
    \ 2.0;\n        }\n        Ordering::Greater => area = -1.0,\n        Ordering::Less\
    \ => area = sides.iter().sum::<f64>() / 2.0,\n    }\n\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpdf8orw6k.rs:22:9\n   |\n22 |         Ordering::Equal => {\n   |    \
    \     ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpdf8orw6k.rs:25:9\n   |\n25\
    \ |         Ordering::Greater => area = -1.0,\n   |         ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpdf8orw6k.rs:26:9\n   |\n26 |         Ordering::Less => area = sides.iter().sum::<f64>()\
    \ / 2.0,\n   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdf8orw6k.rs:14:16\n   |\n14 |     sides.push(a);\n\
    \   |                ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n14 |     sides.push(a as f64);\n   |           \
    \       ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdf8orw6k.rs:15:16\n\
    \   |\n15 |     sides.push(b);\n   |                ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |     sides.push(b\
    \ as f64);\n   |                  ++++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpdf8orw6k.rs:16:16\n   |\n16 |     sides.push(c);\n   |         \
    \       ^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n16 |     sides.push(c as f64);\n   |                  ++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdf8orw6k.rs:18:25\n   |\n18 |\
    \     let mut area: f64 = 0;\n   |                   ---   ^\n   |           \
    \        |     |\n   |                   |     expected `f64`, found integer\n\
    \   |                   |     help: use a float literal: `0.0`\n   |         \
    \          expected due to this\n\nerror[E0599]: the method `cmp` exists for enum\
    \ `Option<&f64>`,"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > b +\
    \ c || (a >= b + c && b >= a + c) || (a >= b + c && b >= a + c && c >= a + b){\n\
    \        // area of triangle is zero\n        0.0\n    } else {\n        (b *\
    \ b) - (4 * a * c)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj1iiviac.rs:16:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |         (b * b) - (4 * a * c)\n   |         ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n16 |         ((b * b) - (4 * a * c)) as f64\n   |         +\
    \                     ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area:\
    \ f64 = 0.0;\n    if a + b > c {\n        if c + b > a {\n            area = std::f64::from(a\
    \ * c / b);\n        } else {\n            area = std::f64::from(b * c / a);\n\
    \        }\n    } else {\n        if a + c > b {\n            area = std::f64::from(a\
    \ * c / b);\n        } else {\n            area = std::f64::from(b * c / a);\n\
    \        }\n    }\n    return area.round();\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmp4clcuuep.rs:15:30\n\
    \   |\n15 |             area = std::f64::from(a * c / b);\n   |              \
    \                ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function\
    \ `from` in module `std::f64`\n  --> /tmp/tmp4clcuuep.rs:17:30\n   |\n17 |   \
    \          area = std::f64::from(b * c / a);\n   |                           \
    \   ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function `from`\
    \ in module `std::f64`\n  --> /tmp/tmp4clcuuep.rs:21:30\n   |\n21 |          \
    \   area = std::f64::from(a * c / b);\n   |                              ^^^^\
    \ not found in `std::f64`\n\nerror[E0425]: cannot find function `from` in module\
    \ `std::f64`\n  --> /tmp/tmp4clcuuep.rs:23:30\n   |\n23 |             area = std::f64::from(b\
    \ * c / a);\n   |                              ^^^^ not found in `std::f64`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum\
    \ = a * b * c;\n    if b > c {\n        area_sum += a * c;\n    }\n    if c >\
    \ b {\n        area_sum += b * c;\n    }\n    if a > b {\n        area_sum +=\
    \ a * b\n    }\n    if area_sum >= c {\n        area_sum\n    } else {\n     \
    \   -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9td8m57w.rs:23:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n23 |         area_sum\n   |         ^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n23 |      \
    \   area_sum as f64\n   |                  ++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9td8m57w.rs:25:9\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n25 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > c ||\
    \ c > b {\n        -1\n    } else {\n        let area_sqrt = (a + b + c).sqrt();\n\
    \        let mut area = 0.0;\n        if a >= b {\n            area += c;\n  \
    \      } else {\n            area += b;\n        }\n        area /= area_sqrt;\n\
    \        area\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp64pzm28z.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a > c || c > b {\n13 |         -1\n   |         ^^\n   | \
    \        |\n   |         expected `f64`, found integer\n   |         help: use\
    \ a float literal: `-1.0`\n\nerror[E0599]: no method named `sqrt` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp64pzm28z.rs:15:37\n   |\n15 |  \
    \       let area_sqrt = (a + b + c).sqrt();\n   |                            \
    \         ^^^^ method not found in `isize`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmp64pzm28z.rs:18:18\n   |\n18 |          \
    \   area += c;\n   |                  ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp64pzm28z.rs:20:18\n\
    \   |\n20 |             area += b;\n   |                  ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0599.\nFor more information about "
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a.abs();\n    let mut b = b.abs();\n    let mut c = c.abs();\n    if a.abs()\
    \ + b.abs() + c.abs() > 3 {\n        return -1.0;\n    }\n    let mut area = 0.0;\n\
    \    while a > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n\
    \        }\n        if a > c {\n            a -= c;\n        }\n        if b >\
    \ c {\n            b -= c;\n        }\n        area += a * b * c / 6.0;\n    \
    \    a = b = 0;\n        b = c = 0;\n    }\n    area\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp0oq80pa6.rs:29:27\n\
    \   |\n29 |         area += a * b * c / 6.0;\n   |                           ^\
    \ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0oq80pa6.rs:30:13\n\
    \   |\n12 |     let mut a = a.abs();\n   |                 ------- expected due\
    \ to this value\n...\n30 |         a = b = 0;\n   |             ^^^^^ expected\
    \ `isize`, found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0oq80pa6.rs:31:13\n\
    \   |\n13 |     let mut b = b.abs();\n   |                 ------- expected due\
    \ to this value\n...\n31 |         b = c = 0;\n   |             ^^^^^ expected\
    \ `isize`, found `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a + (b + c).sqrt()\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpl95pehwt.rs:12:17\n   |\n12 |     a + (b + c).sqrt()\n\
    \   |                 ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl95pehwt.rs:12:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n12 |     a + (b + c).sqrt()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n12 |     (a + (b + c).sqrt()) as\
    \ f64\n   |     +                  ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area_sides\
    \ = a + b + c;\n    let area = (area_sides / 2) * 0.5;\n\n    if area > 3 {\n\
    \        area\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp7quf_8x3.rs:13:33\n\
    \   |\n13 |     let area = (area_sides / 2) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: can't compare\
    \ `f64` with `{integer}`\n  --> /tmp/tmp7quf_8x3.rs:15:13\n   |\n15 |     if area\
    \ > 3 {\n   |             ^ no implementation for `f64 < {integer}` and `f64 >\
    \ {integer}`\n   |\n   = help: the trait `PartialOrd<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\nhelp: consider using a floating-point literal by writing it\
    \ with `.0`\n   |\n15 |     if area > 3.0 {\n   |                ++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7quf_8x3.rs:18:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n18 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sum = a\
    \ + b + c;\n    if sum > 3 {\n        return -1\n    }\n    else if sum == 3 {\n\
    \        return 0.5\n    }\n    else {\n        return (b * b) - (4 * a * c)\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp8_oaskw.rs:14:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         return -1\n   |                ^^\n   |            \
    \    |\n   |                expected `f64`, found integer\n   |              \
    \  help: use a float literal: `-1.0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ (a * b * c).sqrt();\n    if area > 0 && a + b > c && b + c > a && c + a > b\
    \ && a + c > b {\n        return area / 2;\n    }\n    -1\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwvts87ov.rs:12:28\n   |\n12 |     let area = (a * b * c).sqrt();\n\
    \   |                            ^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwvts87ov.rs:16:5\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n16 |     -1\n\
    \   |     ^^ expected `f64`, found integer\n   |\nhelp: use a float literal\n\
    \   |\n16 |     -1.0\n   |\nhelp: parentheses are required to parse this as an\
    \ expression\n   |\n13 ~     (if area > 0 && a + b > c && b + c > a && c + a >\
    \ b && a + c > b {\n14 |         return area / 2;\n15 ~     })\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a < b {\n\
    \        if b < c {\n            return a + b + c\n        }\n        else {\n\
    \            return -1\n        }\n    }\n    else {\n        if c < b {\n   \
    \         return a + c + b\n        }\n        else {\n            return -1\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvf9_w_8.rs:14:20\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |             return a + b + c\n   |                    ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n14 |             return (a + b + c) as f64\n   |          \
    \          +         ++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (a * a + b\
    \ * b + c * c - a * b - b * c - c * a) / (2.0 * c * c * c)\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp7ad98mya.rs:12:60\n\
    \   |\n12 |     (a * a + b * b + c * c - a * b - b * c - c * a) / (2.0 * c * c\
    \ * c)\n   |                                                            ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        a + b - c\n    } else {\n        c * b - a * c + 1\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpawen7btb.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         a + b - c\n   |         ^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n13 |         (a + b - c) as f64\n   |         +         ++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpawen7btb.rs:15:9\n   |\n11 | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    ...\n15 |         c * b - a * c + 1\n   |         ^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |         (c * b - a * c + 1) as f64\n   |         +                 ++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        0.0\n    } else if b > c {\n        (a * b) / c\n    } else {\n\
    \        ((a * b) + c) / 2.0\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3_mgb569.rs:15:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |         (a * b) / c\n   |         ^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |         ((a * b) / c) as f64\n   |         +           ++++++++\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp3_mgb569.rs:17:23\n   |\n\
    17 |         ((a * b) + c) / 2.0\n   |                       ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::cmp::Ordering;\n\
    \    (a + b + c).cmp(c as f64).cmp(c as f64).cmp(c as f64).unwrap_or(-1) * 0.5\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpcc8121y1.rs:12:9\n\
    \   |\n12 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcc8121y1.rs:13:21\n   |\n13 |     (a + b + c).cmp(c as\
    \ f64).cmp(c as f64).cmp(c as f64).unwrap_or(-1) * 0.5\n   |                 \
    \    ^^^^^^^^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcc8121y1.rs:13:35\n   |\n13 |     (a + b + c).cmp(c as f64).cmp(c\
    \ as f64).cmp(c as f64).unwrap_or(-1) * 0.5\n   |                            \
    \       ^^^^^^^^ expected `&std::cmp::Ordering`, found `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcc8121y1.rs:13:49\n   |\n13 |     (a + b + c).cmp(c\
    \ as f64).cmp(c as f64).cmp(c as f64).unwrap_or(-1) * 0.5\n   |              \
    \                                   ^^^^^^^^ expected `&std::cmp::Ordering`, found\
    \ `f64`\n\nerror[E0599]: no method named `unwrap_or` found for enum `std::cmp::Ordering`\
    \ in the current scope\n  --> /tmp/tmpcc8121y1.rs:13:59\n   |\n13 |     (a + b\
    \ + c).cmp(c as f64).cmp(c as f64).cmp(c as f64).unwrap_or(-1) * 0.5\n   |   \
    \                                                        ^^^^^^^^^ method not\
    \ found in `std::cmp::Ordering`\n\nerror: aborting due to 4 previous errors; 1\
    \ warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b + c <\
    \ a || a + c < b {\n        -1\n    } else {\n        (a + b + c) / 2\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvkngfgkz.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if b + c < a || a + c < b {\n13 |         -1\n   |         ^^\n\
    \   |         |\n   |         expected `f64`, found integer\n   |         help:\
    \ use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvkngfgkz.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (a + b + c) / 2\n   |         ^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((a + b + c) / 2) as f64\n   |         +     \
    \          ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Get the\
    \ hypotenuse\n    let hypotenuse = hypot(a, b);\n    // Get the area of the triangle\n\
    \    let area = 0.5 * hypot(a * c, b * c);\n    // If the hypotenuse is greater\
    \ than the area then it is not a valid triangle\n    if area > hypotenuse {\n\
    \        -1\n    } else {\n        area\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `hypot` in this scope\n  --> /tmp/tmpzf4q9mq0.rs:13:22\n\
    \   |\n13 |     let hypotenuse = hypot(a, b);\n   |                      ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `hypot` in this\
    \ scope\n  --> /tmp/tmpzf4q9mq0.rs:15:22\n   |\n15 |     let area = 0.5 * hypot(a\
    \ * c, b * c);\n   |                      ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzf4q9mq0.rs:18:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n18 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ (a + b + c).sqrt();\n    if s > 0.000001 {\n        return s*s.recip();\n  \
    \  } else {\n        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmplw2rw1gc.rs:12:29\n   |\n12 |     let mut s = (a + b +\
    \ c).sqrt();\n   |                             ^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976674
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // check for\
    \ invalid triangle case\n    if a < 0 || b < 0 || c < 0 {\n        return -1;\n\
    \    }\n    // triangle is valid if sum is greater than a\n    if a + b > c {\n\
    \        return 0.0;\n    }\n    let mut sum: f64 = 0.0;\n    for i in 0..a {\n\
    \        sum += i;\n    }\n    for i in 0..b {\n        sum += i;\n    }\n   \
    \ for i in 0..c {\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6cwrhafi.rs:14:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `f64`\n  --> /tmp/tmp6cwrhafi.rs:22:13\n   |\n22 |         sum += i;\n  \
    \ |             ^^ no implementation for `f64 += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmp6cwrhafi.rs:25:13\n   |\n25 |         sum +=\
    \ i;\n   |             ^^ no implementation for `f64 += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `f64`\n  --> /tmp/tmp6cwrhafi.rs:28:13\n   |\n28 |         sum +=\
    \ i;\n   |             ^^ no implementation for `f64 += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `f64`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as Ad"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let area = (a * b) + (a * c) - (b\
    \ * c);\n        let area = (area / 2) * (area / 2);\n        if area > 0 {\n\
    \            area\n        } else {\n            -1.0\n        }\n    } else {\n\
    \        -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp949tahf_.rs:16:13\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |             area\n   |             ^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n16 |      \
    \       area as f64\n   |                  ++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp949tahf_.rs:21:9\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n21 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum\
    \ = f64::INFINITY;\n\n    for i in &[a, b, c] {\n        sum = sum.max(0.0);\n\
    \    }\n\n    if sum < 0.0 {\n        sum = 0.0;\n    }\n\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `inf`,\n right: `6.0`', /tmp/tmpuy7l1_r5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Formula\
    \ for area of triangle\n    let mut area = (a + b + c) / 2.0;\n    let mut side1_length\
    \ = (a * b + c * a + a * c) * 0.5;\n    let mut side2_length = (b * c + a * b)\
    \ * 0.5;\n    let mut side3_length = (a * a + b * b) * 0.5;\n\n    if side1_length\
    \ >= side2_length { \n        area = area * side1_length / side2_length;\n   \
    \ }\n    else if side2_length >= side3_length {\n        area = area * side2_length\
    \ / side3_length;\n    }\n    else {\n        area = area * side3_length / side1_length;\n\
    \    }\n    area = area as f64;\n\n    // Rounding to 2 decimal points\n    if\
    \ area != area {\n        area = round(area as f64, 2) as f64;\n    }\n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpws6bkw5k.rs:31:16\n\
    \   |\n31 |         area = round(area as f64, 2) as f64;\n   |               \
    \ ^^^^^ not found in this scope\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpws6bkw5k.rs:13:32\n   |\n13 |     let mut area = (a + b + c) /\
    \ 2.0;\n   |                                ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpws6bkw5k.rs:14:52\n   |\n\
    14 |     let mut side1_length = (a * b + c * a + a * c) * 0.5;\n   |         \
    \                                           ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpws6bkw5k.rs:15:44\n   |\n\
    15 |     let mut side2_length = (b * c + a * b) * 0.5;\n   |                 \
    \                           ^ no implementation for `isize * {float}`\n   |\n\
    \   = help: the trait `Mul<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as M"
  stdout: ''
  timestamp: 1659976675
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let ab = a\
    \ + b;\n    let ac = a + c;\n    let bc = b + c;\n\n    if ab > bc && ab > ac\
    \ || (ab == bc && a < c) {\n        return ((ab * ac) / (bc + ac)) as f64\n  \
    \  } else {\n        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmp6p8aqy0f.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum\
    \ = f64::MIN_POSITIVE;\n    for side in &[a, b, c] {\n        let side: f64;\n\
    \        if side > 0.0 {\n            side = side / 2.0\n        } else {\n  \
    \          return -1.0\n        }\n        area_sum += side;\n    }\n    return\
    \ area_sum.round();\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `side`\n  --> /tmp/tmpzusv1w0u.rs:13:9\n   |\n\
    13 |     for side in &[a, b, c] {\n   |         ^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_side`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0381]: use of possibly-uninitialized variable: `side`\n\
    \  --> /tmp/tmpzusv1w0u.rs:15:12\n   |\n15 |         if side > 0.0 {\n   |   \
    \         ^^^^ use of possibly-uninitialized `side`\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0381`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let mut\
    \ a = a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    \n\
    \    if a + b > c {\n        a = a as f64;\n        b = b as f64;\n        c =\
    \ c as f64;\n    }\n    \n    if c + b > a {\n        a = a as f64;\n        b\
    \ = b as f64;\n        c = c as f64;\n    }\n    \n    if c + a > b {\n      \
    \  a = a as f64;\n        b = b as f64;\n        c = c as f64;\n    }\n    \n\
    \    if a + c > b {\n        a = a as f64;\n        b = b as f64;\n        c =\
    \ c as f64;\n    }\n    \n    (a * b as f64) + (b * c as f64) + (c * a as f64)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `47.0`,\n right: `6.0`', /tmp/tmp85wc7dh3.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area: f64\
    \ = if a + b > c { c } else { a + b };\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuu2xs4n2.rs:12:36\n   |\n\
    12 |     let area: f64 = if a + b > c { c } else { a + b };\n   |            \
    \                        ^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n12 |     let area: f64 = if a +\
    \ b > c { c as f64 } else { a + b };\n   |                                   \
    \   ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuu2xs4n2.rs:12:47\n\
    \   |\n12 |     let area: f64 = if a + b > c { c } else { a + b };\n   |     \
    \                                          ^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |     let area:\
    \ f64 = if a + b > c { c } else { (a + b) as f64 };\n   |                    \
    \                           +     ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a: f64\
    \ = a as f64;\n    let b: f64 = b as f64;\n    let c: f64 = c as f64;\n    \n\
    \    if a + b > c {\n        return -1;\n    }\n    \n    if a + c > b {\n   \
    \     return -1;\n    }\n    \n    if b + c > a {\n        return -1;\n    }\n\
    \    \n    \n    let mut sum: f64 = 0;\n    \n    if a < b {\n        sum += a;\n\
    \    }\n    \n    if a < c {\n        sum += b;\n    }\n    \n    if b < c {\n\
    \        sum += c;\n    }\n    \n    if sum < a || sum < b {\n        return -1;\n\
    \    }\n    \n    return sum * 0.5;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpakalqt9d.rs:17:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n17 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpakalqt9d.rs:29:24\n   |\n29 |     let mut sum: f64 = 0;\n   |      \
    \            ---   ^\n   |                  |     |\n   |                  | \
    \    expected `f64`, found integer\n   |                  |     help: use a float\
    \ literal: `0.0`\n   |                  expected due to this\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    assert!(a +\
    \ b > c, \"Triangle sides are not valid!\");\n    (a * b) - (c * b)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsmo94zt8.rs:13:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     assert!(a + b > c, \"Triangle sides are not valid!\");\n13 |\
    \     (a * b) - (c * b)\n   |     ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |     ((a * b)\
    \ - (c * b)) as f64\n   |     +                 ++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let s: f64\
    \ = a + b + c;\n    let mut sum: f64 = a + b + c;\n\n    if s > 3 {\n        let\
    \ s: f64 = a + b + c;\n        let mut sum: f64 = a + b + c;\n\n        if s >\
    \ 9 {\n            return -1;\n        }\n        sum += s;\n        sum -= s;\n\
    \    } else {\n        return -1.0;\n    }\n    sum / (2.0 * 3.0) - 1.0\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9bovb956.rs:12:18\n   |\n\
    12 |     let s: f64 = a + b + c;\n   |            ---   ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |            |\n   |            expected due to this\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n12 |     let s: f64 = (a + b + c)\
    \ as f64;\n   |                  +         ++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9bovb956.rs:13:24\n   |\n13 |     let mut sum: f64 = a\
    \ + b + c;\n   |                  ---   ^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |                  |\n   |                  expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |     let mut sum: f64 = (a +\
    \ b + c) as f64;\n   |                        +         ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9bovb956.rs:15:12\n   |\n15 |     if s > 3 {\n\
    \   |            ^\n   |            |\n   |            expected `f64`, found integer\n\
    \   |            help: use a float literal: `3.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9bovb956.rs:16:22\n   |\n16 |         let s: f64 = a +\
    \ b + c;\n   |                ---   ^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |                |\n   |                expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |         let s: f64 = (a + b\
    \ + c) as f64;\n   |                      +         ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9bovb956.rs:17:28\n   |\n17 |         let mut\
    \ sum: f64 = a + b + c;\n   |                      ---   ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |                      |\n   |                      expected\
    \ due to this\n   |\nhelp: you can convert an `isize` to an `f64`, producing the\
    \ floating point representation of the integer, rounded if necessary\n   |\n17\
    \ |         let mut sum: f64 = (a + b + c) as f64;\n   |"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \n    fn gcd(a: usize, b: usize) -> usize {\n        if b == 0 {\n           \
    \ a\n        } else {\n            gcd(b, a % b)\n        }\n    }\n\n    let\
    \ mut smallest_common_divisor = std::cmp::min(a, b);\n    let mut greatest_common_divisor\
    \ = std::cmp::min(a, b);\n    let mut sum = 0.0;\n    for d in 0..(a - b + 1)\
    \ {\n        smallest_common_divisor = std::cmp::min(smallest_common_divisor,\
    \ d - c + b);\n        greatest_common_divisor = std::cmp::min(greatest_common_divisor,\
    \ d - a + b);\n        sum += smallest_common_divisor / greatest_common_divisor;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::f64`\n  --> /tmp/tmp1ddco5yx.rs:12:9\n  \
    \ |\n12 |     use std::f64;\n   |         ^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmp1ddco5yx.rs:28:13\n   |\n28 |         sum += smallest_common_divisor\
    \ / greatest_common_divisor;\n   |             ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ if a + b > c { a / b * c } else { c };\n    area.round()\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp4p4j841n.rs:13:10\n   |\n13 |     area.round()\n   |  \
    \        ^^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b || b + c > a { \n        return -1.0;\n    }\n    \n    let mut\
    \ s = (a + b + c) / 2;\n    if s * s == a {\n        return (s + s) / 2;\n   \
    \ } else if s * s == b {\n        return s * (s + a) / 2;\n    } else {\n    \
    \    return s * (s + b) / 2;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplkc9sw0m.rs:18:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n18 |         return (s + s) / 2;\n   |                ^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n18 |         return ((s + s) / 2) as f64;\n   |           \
    \     +           ++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a +\
    \ b + c;\n    let mut area = 0;\n    if a == b {\n        area = a * c;\n    }\
    \ else if b == c {\n        area = a;\n    } else if a < c {\n        let mut\
    \ a = a;\n        let mut b = b;\n        let mut c = c;\n        // swap a, b\n\
    \        let temp = c;\n        c = b;\n        b = a;\n        a = temp;\n  \
    \      let mut temp = a;\n        a = b;\n        b = temp;\n        let mut temp\
    \ = a;\n        a = b;\n        b = temp;\n        let mut temp = a;\n       \
    \ a = b;\n        b = temp;\n        area = (a * b) / 2.0;\n    }\n    area =\
    \ std::round(area as f64 * 100.0) / 100.0;\n    area\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in crate `std`\n  --> /tmp/tmpmnsn7_2c.rs:38:17\n\
    \   |\n38 |     area = std::round(area as f64 * 100.0) / 100.0;\n   |        \
    \         ^^^^^ not found in `std`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpmnsn7_2c.rs:36:24\n   |\n36 |         area = (a * b) / 2.0;\n \
    \  |                        ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Div<Rhs>`:\n             <&'a f32\
    \ as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128 as\
    \ Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n\
    \             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n      \
    \       <&'a isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmnsn7_2c.rs:39:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n39 |     area\n   |\
    \     ^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n39 |     area as f64\n   |          ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (a * b * c).try_into().expect(\"\
    Triangle must have area\")\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `try_into` found for type `isize` in the\
    \ current scope\n   --> /tmp/tmp28kjii17.rs:12:17\n    |\n12  |     (a * b * c).try_into().expect(\"\
    Triangle must have area\")\n    |                 ^^^^^^^^ method not found in\
    \ `isize`\n    |\n    = help: items from traits can only be used if the trait\
    \ is in scope\n    = note: 'std::convert::TryInto' is included in the prelude\
    \ starting in Edition 2021\nhelp: the following trait is implemented but not in\
    \ scope; perhaps add a `use` for it:\n    |\n1   | use std::convert::TryInto;\n\
    \    |\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Triangle\
    \ is valid if each of the three sides is greater than the third.\n    if a + b\
    \ > c {\n        // a is greater than the third side (it could also be b or c).\n\
    \        // b is greater than the third side\n        // c is the third side\n\
    \        return std::f64::from((b * b) - (a * c));\n    }\n\n    // If a < b and\
    \ b < c, then a must be greater than or equal to b.\n    // If a < c and c < b,\
    \ b must be greater than or equal to c.\n    if a + c > b {\n        // a is greater\
    \ than the third side (it could also be b or c).\n        // c is the third side\n\
    \        // b is greater than the third side\n        return std::f64::from((c\
    \ * c) - (a * b));\n    }\n\n    // If a < b and c < b, then a must be greater\
    \ than or equal to b.\n    // If a < c and b < c, b must be greater than or equal\
    \ to c.\n    if a + b > c {\n        // a is greater than the third side (it could\
    \ also be b or c).\n        // b is the third side\n        // c is the third\
    \ side\n        return std::f64::from((b * b) - (a * c));\n    }\n\n    // If\
    \ a < b and b < c, then a must be greater than or equal to c.\n    // If b < c\
    \ and c < b, c must be greater than or equal to a.\n    if a + c > b {\n     \
    \   // a is greater than the third side (it could also be b or c).\n        //\
    \ b is the third side\n        // c is the third side\n        return std::f64::from((c\
    \ * c) - (a * b));\n    }\n\n    // If a < c and c < b, then a must be greater\
    \ than or equal to c.\n    // If c < b and b < c, then a must be greater than\
    \ or equal to b.\n    if a + b > c {\n        // a is greater than the third side\
    \ (it could also be b or c).\n        // c is the third side\n        // b is\
    \ the third side\n        return std::f64::from((b * b) - (a * c));\n    }\n\n\
    \    // Otherwise a is the sum of both sides is equal\n    // and b is the sum\
    \ of both sides is equal.\n    return std::f64::from(a * a + b * b - c * c);\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmpdox30h2x.rs:17:26\n\
    \   |\n17 |         return std::f64::from((b * b) - (a * c));\n   |          \
    \                ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function\
    \ `from` in module `std::f64`\n  --> /tmp/tmpdox30h2x.rs:26:26\n   |\n26 |   \
    \      return std::f64::from((c * c) - (a * b));\n   |                       \
    \   ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function `from`\
    \ in module `std::f64`\n  --> /tmp/tmpdox30h2x.rs:35:26\n   |\n35 |         return\
    \ std::f64::from((b * b) - (a * c));\n   |                          ^^^^ not found\
    \ in `std::f64`\n\nerror[E0425]: cannot find function `from` in module `std::f64`\n\
    \  --> /tmp/tmpdox30h2x.rs:44:26\n   |\n44 |         return std::f64::from((c\
    \ * c) - (a * b));\n   |                          ^^^^ not found in `std::f64`\n\
    \nerror[E0425]: cannot find function `from` in module `std::f64`\n  --> /tmp/tmpdox30h2x.rs:53:26\n\
    \   |\n53 |         return std::f64::from((b * b) - (a * c));\n   |          \
    \                ^^^^ not found in `std::f64`\n\nerror[E0425]: cannot find function\
    \ `from` in module `std::f64`\n  --> /tmp/tmpdox30h2x.rs:58:22\n   |\n58 |   \
    \  return std::f64::from(a * a + b * b - c * c);\n   |                      ^^^^\
    \ not found in `std::f64`\n\nerror: aborting due to 6 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a:\
    \ f64 = a + b;\n    let mut b: f64 = a + c;\n    let mut c: f64 = a + b;\n\n \
    \   match a < b {\n        true => b -= a,\n        false => c -= a\n    }\n \
    \   match b < c {\n        true => a -= b,\n        false => c -= b\n    }\n \
    \   match c < a {\n        true => b -= c,\n        false => a -= c\n    }\n \
    \   (a + b + c) / 3.\n}\n\nfn main() {\n    let candidate = triangle_area;\n \
    \   assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnilg9fmc.rs:12:22\n   |\n\
    12 |     let mut a: f64 = a + b;\n   |                ---   ^^^^^ expected `f64`,\
    \ found `isize`\n   |                |\n   |                expected due to this\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |     let mut\
    \ a: f64 = (a + b) as f64;\n   |                      +     ++++++++\n\nerror[E0277]:\
    \ cannot add `isize` to `f64`\n  --> /tmp/tmpnilg9fmc.rs:13:24\n   |\n13 |   \
    \  let mut b: f64 = a + c;\n   |                        ^ no implementation for\
    \ `f64 + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for\
    \ `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n  \
    \           <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n      \
    \       <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n        \
    \     <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n            \
    \ <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a.abs() * b.abs()\
    \ * c.abs() + \n    (a.abs() + b.abs() + c.abs()).abs()\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqlsta115.rs:12:5\n   |\n\
    11 |   fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |         \
    \                                            --- expected `f64` because of return\
    \ type\n12 | /     a.abs() * b.abs() * c.abs() + \n13 | |     (a.abs() + b.abs()\
    \ + c.abs()).abs()\n   | |_______________________________________^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 ~     (a.abs() * b.abs() * c.abs() + \n13 ~     (a.abs() + b.abs() + c.abs()).abs())\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a < b\
    \ + c && b < c + a {\n        true => \n            (a * b + c * a) * (b * c -\
    \ a * b + c * a) / 2.0,\n        false => 0.0\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp5gxq01qy.rs:14:55\n\
    \   |\n14 |             (a * b + c * a) * (b * c - a * b + c * a) / 2.0,\n   |\
    \                                                       ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n\n    let area\
    \ = (a * b + c * d);\n\n    match area {\n        -a as f64 => \n            match\
    \ b as f64 {\n                -b => \n                    match c as f64 {\n \
    \                       -c => 0.0,\n                        _ => 0.0,\n      \
    \              },\n                _ => 0.0\n            }\n            \n   \
    \         match c as f64 {\n                -c => 0.0,\n                _ => 0.0,\n\
    \            },\n            _ => 0.0,\n            \n        _ => \n        \
    \    match a as f64 {\n                -a => \n                    match b as\
    \ f64 {\n                        -b => 0.0,\n                        _ => 0.0,\n\
    \                    },\n                _ => 0.0\n            }\n           \
    \ \n            match b as f64 {\n                -b => 0.0,\n               \
    \ _ => 0.0,\n            },\n            0.0\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `a`\n  --> /tmp/tmptc0vpul0.rs:19:10\n \
    \  |\n19 |         -a as f64 => \n   |          ^ expected pattern\n\nerror[E0425]:\
    \ cannot find value `d` in this scope\n  --> /tmp/tmptc0vpul0.rs:16:29\n   |\n\
    16 |     let area = (a * b + c * d);\n   |                             ^ help:\
    \ a local variable with a similar name exists: `a`\n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmptc0vpul0.rs:16:16\n   |\n16 |     let area\
    \ = (a * b + c * d);\n   |                ^             ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n16 -     let area = (a\
    \ * b + c * d);\n16 +     let area = a * b + c * d;\n   | \n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || b + c > a || c + a > b {\n        -1\n    } else {\n        (a * b + c\
    \ * b) / (a + b + c)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphhhpe0s2.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c || b + c > a || c + a > b {\n13 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphhhpe0s2.rs:15:9\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n15 |         (a * b + c * b) / (a\
    \ + b + c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         ((a\
    \ * b + c * b) / (a + b + c)) as f64\n   |         +                         \
    \    ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    assert!(b >\
    \ a);\n    assert!(b > c);\n    assert!(b > a);\n    let mut sum = a;\n    sum\
    \ += b;\n    sum += c;\n    sum -= b;\n    sum -= c;\n    match sum {\n      \
    \  0 => 0.,\n        1 => b.pow(2)/4.,\n        _ => -1.,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp5fpvb199.rs:22:22\n\
    \   |\n22 |         1 => b.pow(2)/4.,\n   |                      ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area,\
    \ sides = 0, a + b + c;\n    while sides > 2 {\n        area = (a * b) + (sides\
    \ % 2) == c ? (a + b) * 2.0 / (sides / 2.0) : (sides / 2.0);\n        if area\
    \ > 0.0 { \n            sides /= 2.0; \n        } \n        else {\n         \
    \   sides /= 2.0; \n            area += 2.0;\n        }\n    }\n    if sides ==\
    \ 1 {\n        area\n    }\n    else {\n        area\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpl3acpng9.rs:12:17\n   |\n\
    12 |     let mut area, sides = 0, a + b + c;\n   |                 ^\n   |\nhelp:\
    \ try adding parentheses to match on a tuple\n   |\n12 |     let (mut area, sides)\
    \ = 0, a + b + c;\n   |         +               +\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match b * b\
    \ + c * c {\n        1 => 1.0,\n        _ => {\n            let a = a * 2;\n \
    \           let b = b * 2;\n            let c = c * 2;\n            if a + b <\
    \ c {\n                (b - a + c) / (2.0 * b).ceil()\n            } else {\n\
    \                (c - b + a) / (2.0 * c).ceil()\n            }\n        }\n  \
    \  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpg3j_hhvm.rs:19:36\n\
    \   |\n19 |                 (b - a + c) / (2.0 * b).ceil()\n   |             \
    \                       ^ no implementation for `{float} * isize`\n   |\n   =\
    \ help: the trait `Mul<isize>` is not implemented for `{float}`\n   = help: the\
    \ following other types implement trait `Mul<Rhs>`:\n             <&'a f32 as\
    \ Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n\
    \             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n    \
    \         <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n          \
    \   <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg3j_hhvm.rs:19:17\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n19 |              \
    \   (b - a + c) / (2.0 * b).ceil()\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n19 |                 ((b - a + c) / (2.0 * b).ceil()) as f64\n\
    \   |                 +                              ++++++++\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpg3j_hhvm.rs:21:36\n   |\n\
    21 |                 (c - b + a) / (2.0 * c).ceil()\n   |                    \
    \                ^ no implementation for `{float} * isize`\n   |\n   = help: the\
    \ trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpg3j_hhvm.rs:21:17\n   |\n11 | fn triangle_a"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a >= b {\n\
    \        if b >= c {\n            return b * b - 4 * c\n        } else {\n   \
    \         return -1\n        }\n    } else {\n        if c >= a {\n          \
    \  return c * c - a * a\n        } else {\n            return -1\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqkaqvq_o.rs:14:20\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |             return b * b - 4 * c\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n14 |             return (b * b - 4 * c) as f64\n   |      \
    \              +             ++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (c-a)*(b-a)*(b-c)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0e_k0gbq.rs:12:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     (c-a)*(b-a)*(b-c)\n   |     ^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |     ((c-a)*(b-a)*(b-c)) as f64\n   |     +                 ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // A triangle\
    \ is valid if the sum of any two sides is greater than the third side\n    (b\
    \ - a) + (c - b) >= 0 \n    ? b * b - 4 * a * c \n    : -1\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `b`\n\
    \  --> /tmp/tmpm2g7fi0j.rs:14:7\n   |\n14 |     ? b * b - 4 * a * c \n   |   \
    \    ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if (b >= a\
    \ && b >= c && (a + c) >= b) \n\t|| ((a + b) >= c && (a + c) >= b)\n\t|| ((a +\
    \ b) >= a && (a + c) >= b)\n\t|| a >= b\n\t|| a >= c\n\t|| b >= c\n    \n\telse\n\
    \        -1.\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: missing condition for `if` expression\n  --> /tmp/tmpdfjcapnp.rs:12:7\n\
    \   |\n12 |     if (b >= a && b >= c && (a + c) >= b) \n   |       ^ expected\
    \ if condition here\n\nerror: expected `{`, found `-`\n  --> /tmp/tmpdfjcapnp.rs:20:9\n\
    \   |\n20 |         -1.\n   |         ^ expected `{`\n   |\nhelp: try placing\
    \ this code inside a block\n   |\n20 |         { -1. }\n   |         +     +\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        if c + a > b {\n            if b + c > a {\n                a *\
    \ b * c / 4.0\n            } else {\n                -1\n            }\n     \
    \   } else {\n            -1\n        }\n    } else {\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpsgn1892o.rs:15:27\n\
    \   |\n15 |                 a * b * c / 4.0\n   |                           ^\
    \ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsgn1892o.rs:17:17\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n17 |                 -1\n   |                 ^^\n   |   \
    \              |\n   |                 expected `f64`, found integer\n   |   \
    \              help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsgn1892o.rs:20:13\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n20 |             -1\n   |      \
    \       ^^\n   |             |\n   |             expected `f64`, found integer\n\
    \   |             help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsgn1892o.rs:23:9\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n23 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if b + c >\
    \ a {\n        return -1.0\n    }\n    (a * b + c) as f64 / a \n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `isize`\n  --> /tmp/tmpxmavk59q.rs:15:24\n\
    \   |\n15 |     (a * b + c) as f64 / a \n   |                        ^ no implementation\
    \ for `f64 / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let ab = a\
    \ * b\n    let ac = a * c\n    let bc = b * c\n\n    if ab > bc && ab > ac {\n\
    \        return ab\n    } else if bc > ab && bc > ac {\n        return bc\n  \
    \  } else {\n        return ac\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjt7y9d39.rs:12:19\n\
    \   |\n12 |     let ab = a * b\n   |                   ^ help: add `;` here\n\
    13 |     let ac = a * c\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n  --> /tmp/tmpjt7y9d39.rs:13:19\n   |\n13 |     let ac\
    \ = a * c\n   |                   ^ help: add `;` here\n14 |     let bc = b *\
    \ c\n   |     --- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjt7y9d39.rs:14:19\n   |\n14 |     let bc = b * c\n   |        \
    \           ^ help: add `;` here\n15 | \n16 |     if ab > bc && ab > ac {\n  \
    \ |     -- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjt7y9d39.rs:17:16\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n17 |         return ab\n   |                ^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |         return ab as f64\n   |                   ++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a < b\
    \ + c && b < a + c && c < a + b {\n        true => a,\n        false => -1,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_b47ri23.rs:13:17\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     match a < b + c && b < a + c && c < a + b {\n13 |         true\
    \ => a,\n   |                 ^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |         true => a as f64,\n\
    \   |                   ++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // If any two\
    \ sides are less than the third side, then triangle is invalid\n    if a < b {\n\
    \        return -1;\n    }\n    if b < c {\n        return -1;\n    }\n    //\
    \ Else calculate triangle area\n    let s = (a + b + c) as f64;\n    (s / 4.0)\
    \ as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm9gfc7l9.rs:14:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum\
    \ = a;\n    sum += b;\n    sum += c;\n    sum = (sum * 3) as f64 / 2;\n    if\
    \ sum >= c {\n        sum - c\n    } else {\n        -1\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmp159qzzmu.rs:15:28\n\
    \   |\n15 |     sum = (sum * 3) as f64 / 2;\n   |                            ^\
    \ no implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\nhelp: consider using a floating-point literal by writing\
    \ it with `.0`\n   |\n15 |     sum = (sum * 3) as f64 / 2.0;\n   |           \
    \                    ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp159qzzmu.rs:17:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n17 |         sum - c\n   |         ^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    17 |         (sum - c) as f64\n   |         +       ++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp159qzzmu.rs:19:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n19 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match (a, c,\
    \ b) {\n        (0,0,0) => 0.0,\n        (0,1,0) => 1.0,\n        (1,0,0) => 2.0,\n\
    \        (1,1,0) => 3.0,\n        (1,0,1) => 4.0,\n        (0,1,1) => 5.0,\n \
    \       (1,1,1) => 6.0,\n        _ => -1.0,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmptdldu2s1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        triangle_area(a, b, c)\n    } else if a + c > b {\n        triangle_area(a,\
    \ c, b)\n    } else {\n        triangle_area(a, b, c + b - a - b)\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976681
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::cmp::Ordering::*;\n\
    \    match a > b {\n        Equal => a,\n        Greater => b,\n        Less =>\
    \ c,\n    } as f64 / (a*a + b*b + c*c - a*a + b*b + c*c)\n}\n\nfn main() {\n \
    \   let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `as`\n  --> /tmp/tmpq5iw55b5.rs:17:7\n\
    \   |\n17 |     } as f64 / (a*a + b*b + c*c - a*a + b*b + c*c)\n   |       ^^\
    \ expected expression\n   |\nhelp: parentheses are required to parse this as an\
    \ expression\n   |\n13 ~     (match a > b {\n14 |         Equal => a,\n15 |  \
    \       Greater => b,\n16 |         Less => c,\n17 ~     }) as f64 / (a*a + b*b\
    \ + c*c - a*a + b*b + c*c)\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq5iw55b5.rs:14:9\n\
    \   |\n13 |     match a > b {\n   |           ----- this expression has type `bool`\n\
    14 |         Equal => a,\n   |         ^^^^^ expected `bool`, found enum `std::cmp::Ordering`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpq5iw55b5.rs:15:9\n   |\n13 | \
    \    match a > b {\n   |           ----- this expression has type `bool`\n14 |\
    \         Equal => a,\n15 |         Greater => b,\n   |         ^^^^^^^ expected\
    \ `bool`, found enum `std::cmp::Ordering`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpq5iw55b5.rs:16:9\n   |\n13 |     match a > b {\n   |          \
    \ ----- this expression has type `bool`\n...\n16 |         Less => c,\n   |  \
    \       ^^^^ expected `bool`, found enum `std::cmp::Ordering`\n\nerror[E0277]:\
    \ cannot divide `f64` by `isize`\n  --> /tmp/tmpq5iw55b5.rs:17:14\n   |\n17 |\
    \     } as f64 / (a*a + b*b + c*c - a*a + b*b + c*c)\n   |              ^ no implementation\
    \ for `f64 / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    assert!(a <=\
    \ b);\n    assert!(a <= c);\n    assert!(a <= b);\n    if a > c {\n        return\
    \ 0.0;\n    }\n    if c > b {\n        return 0.0;\n    }\n    a + b + c - (a\
    \ + b + c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyhx2yopn.rs:21:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n21 |     a + b + c - (a + b + c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n21 |     (a + b + c - (a + b + c)) as f64\n   |     +     \
    \                  ++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a > b +\
    \ c {\n        return -1;\n    }\n    if a < b + c {\n        return 0;\n    }\n\
    \    if b > c + a {\n        return -1;\n    }\n    if b < c + a {\n        return\
    \ 0;\n    }\n    (b * b) + (c * c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps9fs0u7u.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a > b + c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps9fs0u7u.rs:24:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n24 |     (b * b) +\
    \ (c * c)\n   |     ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n24 |     ((b * b) + (c * c)) as\
    \ f64\n   |     +                 ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (f64::pow(a,\
    \ 2.0) + f64::pow(b, 2.0) + f64::pow(c, 2.0)) as f64 / 3.0\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `pow` found for type\
    \ `f64` in the current scope\n  --> /tmp/tmpt80klvsc.rs:12:11\n   |\n12 |    \
    \ (f64::pow(a, 2.0) + f64::pow(b, 2.0) + f64::pow(c, 2.0)) as f64 / 3.0\n   |\
    \           ^^^\n   |           |\n   |           function or associated item\
    \ not found in `f64`\n   |           help: there is an associated function with\
    \ a similar name: `powf`\n\nerror[E0599]: no function or associated item named\
    \ `pow` found for type `f64` in the current scope\n  --> /tmp/tmpt80klvsc.rs:12:30\n\
    \   |\n12 |     (f64::pow(a, 2.0) + f64::pow(b, 2.0) + f64::pow(c, 2.0)) as f64\
    \ / 3.0\n   |                              ^^^\n   |                         \
    \     |\n   |                              function or associated item not found\
    \ in `f64`\n   |                              help: there is an associated function\
    \ with a similar name: `powf`\n\nerror[E0599]: no function or associated item\
    \ named `pow` found for type `f64` in the current scope\n  --> /tmp/tmpt80klvsc.rs:12:49\n\
    \   |\n12 |     (f64::pow(a, 2.0) + f64::pow(b, 2.0) + f64::pow(c, 2.0)) as f64\
    \ / 3.0\n   |                                                 ^^^\n   |      \
    \                                           |\n   |                          \
    \                       function or associated item not found in `f64`\n   | \
    \                                                help: there is an associated\
    \ function with a similar name: `powf`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n  if a + b > c\
    \ {\n    1.0\n  } else if b + c > a {\n    1.0\n  } else if c + a > b {\n    1.0\n\
    \  } else {\n    0.0\n  }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1.0`,\n right: `6.0`', /tmp/tmpvfwkbxan.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a == b {\n\
    \        if c == b {\n            return c;\n        }\n        return -1;\n \
    \   }\n    if c == b {\n        return -1;\n    }\n    if a > b {\n        (a,\
    \ b) = (b, a)\n    }\n    if a > c {\n        (a, c) = (c, a)\n    }\n    if b\
    \ > c {\n        (b, c) = (c, b)\n    }\n    let sum = a + b + c;\n    if sum\
    \ < 0 {\n        sum *= -1\n    }\n    let mut m = 0;\n    if a == b {\n     \
    \   if c == b {\n            return c;\n        }\n        m = 1\n    }\n    if\
    \ a == c {\n        if b == c {\n            return b;\n        }\n        m =\
    \ 3\n    }\n    if b == c {\n        m = 2\n    }\n    let a = a * m;\n    let\
    \ b = b * m;\n    let c = c * m;\n    let area_a = (a * a + b * b) * 0.25;\n \
    \   let area_b = (a * a + c * c) * 0.25;\n    let area_c = (b * b + c * c) * 0.25;\n\
    \    let area_sum = area_a + area_b + area_c;\n    if area_sum < 0 {\n       \
    \ area_sum *= -1\n    }\n    area_sum / 2\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc7ncdzak.rs:14:20\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |             return c;\n   |                    ^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |             return c as f64;\n   |                      ++++++\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmpc7ncdzak.rs:53:34\n   |\n\
    53 |     let area_a = (a * a + b * b) * 0.25;\n   |                          \
    \        ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpc7ncdzak.rs:54:34\n   |\n54 |     let area_b\
    \ = (a * a + c * c) * 0.25;\n   |                                  ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpc7ncdzak.rs:55:34\n\
    \   |\n55 |     let area_c = (b * b + c * c) * 0.25;\n   |                   \
    \               ^ no implementation for `isize * {fl"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0\n    if a + b > c {\n        s = s + (c - a + b) * 0.5\n    }\n    if a\
    \ + c > b {\n        s = s + (b - a + c) * 0.5\n    }\n    if b + c > a {\n  \
    \      s = s + (a - b + c) * 0.5\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpte8q4t5x.rs:12:20\n\
    \   |\n12 |     let mut s = 0.0\n   |                    ^ help: add `;` here\n\
    13 |     if a + b > c {\n   |     -- unexpected token\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpte8q4t5x.rs:14:29\n   |\n14 | \
    \        s = s + (c - a + b) * 0.5\n   |                             ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpte8q4t5x.rs:17:29\n\
    \   |\n17 |         s = s + (b - a + c) * 0.5\n   |                          \
    \   ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmpte8q4t5x.rs:20:29\n   |\n20 |         s = s + (a - b + c) * 0.5\n\
    \   |                             ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Mul<Rhs>`:\n            \
    \ <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a.abs() + b.abs()\
    \ + c.abs() - (a.abs() + b.abs() + c.abs())\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcw6112lj.rs:12:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     a.abs() + b.abs() + c.abs() - (a.abs() + b.abs() + c.abs())\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |     (a.abs() + b.abs() + c.abs() - (a.abs() + b.abs() + c.abs())) as f64\n\
    \   |     +                                                           ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Three sides\
    \ make a valid triangle when the sum of any two sides is greater \n    // than\
    \ the third side.\n    // Return invalid if three sides are equal.\n    if a +\
    \ b > c || a + c > b || b + c > a || a + b == c || a + c == b || b + c == a {\n\
    \        return -1.0;\n    }\n\n    let mut ans = 0.0;\n    let mut det = a *\
    \ b - c * b;\n    let mut s = 0.0;\n\n    while det != 0.0 {\n        if det >\
    \ 0.0 {\n            s += det;\n        }\n\n        det = det * a - b * s;\n\
    \    }\n\n    if s == 0.0 {\n        // Triangle is parallel.\n        ans = 0.0;\n\
    \    } else {\n        ans = s / a;\n    }\n\n    // Round to 2 decimal places.\n\
    \    ans.round() as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptp21hhdi.rs:23:18\n   |\n\
    23 |     while det != 0.0 {\n   |                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptp21hhdi.rs:24:18\n\
    \   |\n24 |         if det > 0.0 {\n   |                  ^^^ expected `isize`,\
    \ found floating-point number\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmptp21hhdi.rs:25:15\n   |\n25 |             s += det;\n   |     \
    \          ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmptp21hhdi.rs:28:27\n   |\n28 |         det\
    \ = det * a - b * s;\n   |                           ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmptp21hhdi.rs:35:17\n\
    \   |\n35 |         ans = s / a;\n   |                 ^ no implementation for\
    \ `{float} / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n         "
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let mut\
    \ area: f64;\n    if a + b > c {\n        area = -1;\n    } else if a + c > b\
    \ {\n        area = -1;\n    } else if b + c > a {\n        area = -1;\n    }\
    \ else {\n        area = (a * b + c) / 2;\n    }\n    \n    round(area);\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmppip15ty1.rs:24:5\n\
    \   |\n24 |     round(area);\n   |     ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppip15ty1.rs:15:16\n   |\n13 |     let mut area:\
    \ f64;\n   |                   --- expected due to this type\n14 |     if a +\
    \ b > c {\n15 |         area = -1;\n   |                ^^\n   |             \
    \   |\n   |                expected `f64`, found integer\n   |               \
    \ help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppip15ty1.rs:17:16\n\
    \   |\n13 |     let mut area: f64;\n   |                   --- expected due to\
    \ this type\n...\n17 |         area = -1;\n   |                ^^\n   |      \
    \          |\n   |                expected `f64`, found integer\n   |        \
    \        help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppip15ty1.rs:19:16\n   |\n13 |     let mut area: f64;\n   |    \
    \               --- expected due to this type\n...\n19 |         area = -1;\n\
    \   |                ^^\n   |                |\n   |                expected `f64`,\
    \ found integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppip15ty1.rs:21:16\n   |\n13 |     let mut area:\
    \ f64;\n   |                   --- expected due to this type\n...\n21 |      \
    \   area = (a * b + c) / 2;\n   |                ^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    21 |         area = ((a * b + c) / 2) as f64;\n   |                +         \
    \      ++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppip15ty1.rs:11:51\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor mo"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a < 0 ||\
    \ b < 0 || c < 0 || a >= b+c || b >= a+c || c >= a+b { return -1.0 }\n    \n \
    \   let mut s = (a + b + c) / 2;\n    while s > 1.0 {\n        s = s / 2.0\n \
    \   }\n    return s\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp84l2fjp5.rs:15:15\n   |\n\
    15 |     while s > 1.0 {\n   |               ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp84l2fjp5.rs:16:15\n\
    \   |\n16 |         s = s / 2.0\n   |               ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84l2fjp5.rs:18:12\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n18 |     return s\n   |            ^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n18 |     return\
    \ s as f64\n   |              ++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let a = a as\
    \ f64;\n    let b = b as f64;\n    let c = c as f64;\n\n    let ab = a + b;\n\
    \    let bc = b + c;\n    let ac = a + c;\n\n    if ab > bc {\n        let abc\
    \ = ab + bc;\n        if abc > ac {\n            return abc as f64 / ac\n    \
    \    } else {\n            return abc as f64 / bc\n        }\n    } else {\n \
    \       return ab as f64 / bc\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.7777777777777778`,\n right: `6.0`', /tmp/tmpd08tqmue.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    s += a;\n    s += b;\n    s += c;\n    if s >= c {\n        return\
    \ s;\n    }\n    \n    let mut d = 0.0;\n    d += b;\n    d += c;\n    d += a;\n\
    \    if d >= c {\n        return d;\n    }\n    \n    let mut e = 0.0;\n    e\
    \ += a;\n    e += c;\n    e += b;\n    if e >= c {\n        return e;\n    }\n\
    \    \n    let mut f = 0.0;\n    f += a;\n    f += b;\n    f += c;\n    if f >=\
    \ c {\n        return f;\n    }\n    \n    let mut g = 0.0;\n    g += b;\n   \
    \ g += c;\n    g += a;\n    if g >= c {\n        return g;\n    }\n    \n    let\
    \ mut h = 0.0;\n    h += b;\n    h += c;\n    h += a;\n    if h >= c {\n     \
    \   return h;\n    }\n    \n    let mut i = 0.0;\n    i += c;\n    i += a;\n \
    \   i += b;\n    if i >= c {\n        return i;\n    }\n    \n    let mut j =\
    \ 0.0;\n    j += c;\n    j += a;\n    j += b;\n    if j >= c {\n        return\
    \ j;\n    }\n    \n    let mut k = 0.0;\n    k += c;\n    k += a;\n    k += b;\n\
    \    if k >= c {\n        return k;\n    }\n    \n    let mut l = 0.0;\n    l\
    \ += c;\n    l += a;\n    l += b;\n    if l >= c {\n        return l;\n    }\n\
    \    \n    let mut m = 0.0;\n    m += c;\n    m += a;\n    m += b;\n    if m >=\
    \ c {\n        return m;\n    }\n    \n    let mut n = 0.0;\n    n += c;\n   \
    \ n += a;\n    n += b;\n    if n >= c {\n        return n;\n    }\n    \n    let\
    \ mut o = 0.0;\n    o += c;\n    o += a;\n    o += b;\n    if o >= c {\n     \
    \   return o;\n    }\n    \n    let mut p = 0.0;\n    p += c;\n    p += a;\n \
    \   p += b;\n    if p >= c {\n        return p;\n    }\n    \n    let mut q =\
    \ 0.0;\n    q += c;\n    q += a;\n    q += b;\n    if q >= c {\n        return\
    \ q;\n    }\n    \n    let mu\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n   --> /tmp/tmpyulkle82.rs:132:11\n   \
    \ |\n132 |     let mu\n    |           ^ help: add `;` here\n133 | }\n    | -\
    \ unexpected token\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n \
    \ --> /tmp/tmpyulkle82.rs:13:7\n   |\n13 |     s += a;\n   |       ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpyulkle82.rs:14:7\n   |\n14 |     s += b;\n   |       ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpyulkle82.rs:15:7\n   |\n15 |     s += c;\n   |       ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0308]: mismatched types\n "
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ 0.5 * ((a + b) + c) - (b * b) - (a * a);\n    if area < 0 {\n        area\n\
    \    } else {\n        area / 2\n    }\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpugxx9lmy.rs:12:20\n\
    \   |\n12 |     let area = 0.5 * ((a + b) + c) - (b * b) - (a * a);\n   |    \
    \                ^ no implementation for `{float} * isize`\n   |\n   = help: the\
    \ trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: can't compare\
    \ `f64` with `{integer}`\n  --> /tmp/tmpugxx9lmy.rs:13:13\n   |\n13 |     if area\
    \ < 0 {\n   |             ^ no implementation for `f64 < {integer}` and `f64 >\
    \ {integer}`\n   |\n   = help: the trait `PartialOrd<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `PartialOrd<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\nhelp: consider using a floating-point literal by writing it\
    \ with `.0`\n   |\n13 |     if area < 0.0 {\n   |                ++\n\nerror[E0277]:\
    \ cannot divide `f64` by `{integer}`\n  --> /tmp/tmpugxx9lmy.rs:16:14\n   |\n\
    16 |         area / 2\n   |              ^ no implementation for `f64 / {integer}`\n\
    \   |\n   = help: the trait `Div<{integer}>` is not implemented for `f64`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\nhelp: consider\
    \ using a floating-point literal by writing it with `.0`\n   |\n16 |         area\
    \ / 2.0\n   |                 ++\n\nerror: aborting due"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n\n    a + b + c\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2xlhyx4n.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2xlhyx4n.rs:16:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n16 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n16 |     (a + b + c) as f64\n   |     +        \
    \ ++++++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c || a + c > b {\n        return -1;\n    }\n    if b + c > a || a + b > c {\n\
    \        return -1;\n    }\n    if a + c > b {\n        return -1;\n    }\n  \
    \  a * b * c / 2\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm5e6hqnl.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c || a + c > b {\n13 |         return -1;\n   |  \
    \              ^^\n   |                |\n   |                expected `f64`,\
    \ found integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm5e6hqnl.rs:21:5\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n21 |     a *\
    \ b * c / 2\n   |     ^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n21 |     (a * b * c / 2) as f64\n\
    \   |     +             ++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    debug_assert!(c\
    \ >= a + b);\n    debug_assert!(c >= a + a + b);\n    debug_assert!(c >= a + b\
    \ + b);\n    a + a + b + b\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_i1jzsw7.rs:15:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |     a + a + b + b\n   |     ^^^^^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n15 |     (a\
    \ + a + b + b) as f64\n   |     +             ++++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a + b > c ?\
    \ a + b + c - b * c : -1\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `a`\n\
    \  --> /tmp/tmpqze4rjr_.rs:12:17\n   |\n12 |     a + b > c ? a + b + c - b * c\
    \ : -1\n   |                 ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \    \n    if a + b + c <= 3 {\n        0;\n    } else {\n        let mut s =\
    \ (a + b + c) as f64;\n        if s < a {\n            s += 1;\n        }\n  \
    \      if s < b {\n            s += 1;\n        }\n        if s < c {\n      \
    \      s += 1;\n        }\n        (s / 3.).sqrt();\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3mu3kfls.rs:14:23\n   |\n\
    14 |       if a + b + c <= 3 {\n   |  _______________________^\n15 | |       \
    \  0;\n16 | |     } else {\n   | |_____^ expected `f64`, found `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3mu3kfls.rs:18:16\n   |\n18 |         if s <\
    \ a {\n   |                ^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n18 |         if s < a as f64 {\n\
    \   |                  ++++++\n\nerror[E0277]: cannot add-assign `{integer}` to\
    \ `f64`\n  --> /tmp/tmp3mu3kfls.rs:19:15\n   |\n19 |             s += 1;\n   |\
    \               ^^ no implementation for `f64 += {integer}`\n   |\n   = help:\
    \ the trait `AddAssign<{integer}>` is not implemented for `f64`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\nhelp: consider using a\
    \ floating-point literal by writing it with `.0`\n   |\n19 |             s +=\
    \ 1.0;\n   |                   ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3mu3kfls.rs:21:16\n\
    \   |\n21 |         if s < b {\n   |                ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n21 |         if s\
    \ < b as f64 {\n   |                  ++++++\n\nerror[E0277]: cannot add-assign\
    \ `{integer}` to `f64`\n  --> /tmp/tmp3mu3kfls.rs:22:15\n   |\n22 |          \
    \   s += 1;\n   |               ^^ no implementation for `f64 += {integer}`\n\
    \   |\n   = help: the trait `AddAssign<{integer}>` is not implemented for `f64`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAs"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (a + b + c).abs()\
    \ / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpvf7vq6__.rs:12:23\n\
    \   |\n12 |     (a + b + c).abs() / 2.0\n   |                       ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    debug_assert!(a\
    \ != 0 || b != 0 || c != 0);\n    let mut a = a as f64;\n    let mut b = b as\
    \ f64;\n    let mut c = c as f64;\n\n    // The formula for the area of a triangle\
    \ is:\n    // (area of the triangle) / (area of the base of the triangle) = 2/(a+b)\n\
    \    // Area of the triangle is given by the formula for a circle that is\n  \
    \  // a diameter equal to the radius of the circle = 2 radius * sqrt(3)\n    //\
    \ Area of the base of the triangle is given by the formula:\n    // 2 * (sqrt(3)\
    \ * a * b * c)\n    // The area of the base is given by the formula for a circle\
    \ that is a\n    // diameter equal to the radius of the circle * 2.\n    // The\
    \ area of the triangle is given by the formula for a circle that is\n    // a\
    \ diameter equal to the radius * sqrt(3) * a * b * c. \n    // Thus the area of\
    \ the triangle is given by the formula:\n    // 2 * (sqrt(3) * a * b * c) * (a+b+c)\
    \ \n    // So we multiply both sides by (a+b+c) which gives the formula:\n   \
    \ // 2 * (sqrt(3) * a * b * c) * sqrt(3) * (a+b+c)\n    // and we solve for (a+b+c)\
    \ and solve for sqrt(3)\n    // So we have this formula:\n    // (2 * (sqrt(3)\
    \ * a * b * c) * sqrt(3) * (a+b+c)) / ((a+b+c) * (a+b+c))\n    let area_of_triangle\
    \ = 2. * ((sqrt(3.) * a * b * c) / ((a+b+c) * (a+b+c)));\n    if area_of_triangle\
    \ == 0 {\n        area_of_triangle = -1;\n    }\n    area_of_triangle / sqrt(3.)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpnu8bzw10.rs:34:35\n\
    \   |\n34 |     let area_of_triangle = 2. * ((sqrt(3.) * a * b * c) / ((a+b+c)\
    \ * (a+b+c)));\n   |                                   ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpnu8bzw10.rs:38:24\n\
    \   |\n38 |     area_of_triangle / sqrt(3.)\n   |                        ^^^^\
    \ not found in this scope\n\nerror[E0277]: can't compare `{float}` with `{integer}`\n\
    \  --> /tmp/tmpnu8bzw10.rs:35:25\n   |\n35 |     if area_of_triangle == 0 {\n\
    \   |                         ^^ no implementation for `{float} == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnu8bzw10.rs:35:28\n\
    \   |\n35 |     if area_of_triangle == 0 {\n   |                            ^\
    \ expected floating-point number, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnu8bzw10.rs:36:28\n   |\n34 |     let area_of_triangle = 2. * ((sqrt(3.)\
    \ * a * b * c) / ((a+b+c) * (a+b+c)));\n   |                            ---------------------------------------------------\
    \ expected due to this value\n35 |     if area_of_triangle == 0 {\n36 |      \
    \   area_of_triangle = -1;\n   |                            ^^ expected floating-point\
    \ number, found integer\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut side1:\
    \ f64 = 0.0;\n    let mut side2: f64 = 0.0;\n    let mut side3: f64 = 0.0;\n \
    \   match a + b + c {\n        1 => side1 = 1.0,\n        2 => side1 = sqrt(a\
    \ * a + b * b),\n        3 => side1 = sqrt(a * a + c * c),\n        _ => return\
    \ -1.0\n    }\n    match a + b {\n        1 => side2 = sqrt(b * b - a * a),\n\
    \        _ => return -1.0\n    }\n    match a + c {\n        1 => side3 = sqrt(c\
    \ * c - a * a),\n        _ => return -1.0\n    }\n    side1 * side2 * side3\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp9xujkfnj.rs:17:22\n\
    \   |\n17 |         2 => side1 = sqrt(a * a + b * b),\n   |                  \
    \    ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sqrt`\
    \ in this scope\n  --> /tmp/tmp9xujkfnj.rs:18:22\n   |\n18 |         3 => side1\
    \ = sqrt(a * a + c * c),\n   |                      ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmp9xujkfnj.rs:22:22\n\
    \   |\n22 |         1 => side2 = sqrt(b * b - a * a),\n   |                  \
    \    ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `sqrt`\
    \ in this scope\n  --> /tmp/tmp9xujkfnj.rs:26:22\n   |\n26 |         1 => side3\
    \ = sqrt(c * c - a * a),\n   |                      ^^^^ not found in this scope\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    a + b + c <=\
    \ 0\n        ? -1.0\n        : a + b + c < a + b + c\n        ? 1.0\n        :\
    \ 2.0 * a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmprqguu9ow.rs:12:15\n\
    \   |\n12 |     a + b + c <= 0\n   |               ^^\n13 |         ? -1.0\n14\
    \ |         : a + b + c < a + b + c\n   |                     ^\n   |\nhelp: split\
    \ the comparison into two\n   |\n14 ~         : a + b + c && 0\n15 +         ?\
    \ -1.0\n16 ~         : a + b + c < a + b + c\n   |\n\nerror: expected one of `.`,\
    \ `;`, `?`, `}`, or an operator, found `1.0`\n  --> /tmp/tmprqguu9ow.rs:15:11\n\
    \   |\n15 |         ? 1.0\n   |           ^^^ expected one of `.`, `;`, `?`, `}`,\
    \ or an operator\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (b * b) - ((a\
    \ * a) * c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfgetcmv8.rs:12:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     (b * b) - ((a * a) * c)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 |     ((b * b) - ((a * a) * c)) as f64\n   |     +                       ++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c && a + c > b {\n        (*b - c) * (a + c)\n    } else {\n        -1\n   \
    \ }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpvpz8d1fs.rs:13:10\n\
    \   |\n13 |         (*b - c) * (a + c)\n   |          ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvpz8d1fs.rs:15:9\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n15 |         -1\n \
    \  |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match (a, c,\
    \ b) {\n        (1, _, _) | (_, _, 1) => ((b * b) - (4 * a * c)) as f64 / 2,\n\
    \        (_, _, c) | (_, _, b) => ((b * b) - (4 * a * c)) as f64 / 2,\n      \
    \  (h, t, _) => ((t * h) - (c * t)) as f64 / 2,\n        _ => -1\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0408]: variable `b` is not bound in all patterns\n  --> /tmp/tmpm46626z1.rs:14:9\n\
    \   |\n14 |         (_, _, c) | (_, _, b) => ((b * b) - (4 * a * c)) as f64 /\
    \ 2,\n   |         ^^^^^^^^^          - variable not in all patterns\n   |   \
    \      |\n   |         pattern doesn't bind `b`\n\nerror[E0408]: variable `c`\
    \ is not bound in all patterns\n  --> /tmp/tmpm46626z1.rs:14:21\n   |\n14 |  \
    \       (_, _, c) | (_, _, b) => ((b * b) - (4 * a * c)) as f64 / 2,\n   |   \
    \             -    ^^^^^^^^^ pattern doesn't bind `c`\n   |                |\n\
    \   |                variable not in all patterns\n\nerror[E0277]: cannot divide\
    \ `f64` by `{integer}`\n  --> /tmp/tmpm46626z1.rs:13:65\n   |\n13 |         (1,\
    \ _, _) | (_, _, 1) => ((b * b) - (4 * a * c)) as f64 / 2,\n   |             \
    \                                                    ^ no implementation for `f64\
    \ / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\nhelp: consider using a floating-point literal by writing it with\
    \ `.0`\n   |\n13 |         (1, _, _) | (_, _, 1) => ((b * b) - (4 * a * c)) as\
    \ f64 / 2.0,\n   |                                                           \
    \         ++\n\nerror[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmpm46626z1.rs:14:65\n\
    \   |\n14 |         (_, _, c) | (_, _, b) => ((b * b) - (4 * a * c)) as f64 /\
    \ 2,\n   |                                                                 ^ no\
    \ implementation for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n       "
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c { // Valid triangle\n        let area: f64 = if a < b { c } else { b }; //\
    \ Area\n        if area == 0 { area = f64::INFINITY; }\n        let rounded_area\
    \ = area.round();\n        if rounded_area == area { rounded_area; }\n       \
    \ else { area }\n    } else { // Invalid triangle\n        -1\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkhmsr1f1.rs:13:36\n   |\n\
    13 |         let area: f64 = if a < b { c } else { b }; // Area\n   |        \
    \                            ^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |         let area: f64 = if\
    \ a < b { c as f64 } else { b }; // Area\n   |                               \
    \       ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhmsr1f1.rs:13:47\n\
    \   |\n13 |         let area: f64 = if a < b { c } else { b }; // Area\n   | \
    \                                              ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         let\
    \ area: f64 = if a < b { c } else { b as f64 }; // Area\n   |                \
    \                                 ++++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpkhmsr1f1.rs:14:20\n   |\n14 |         if area == 0 { area = f64::INFINITY;\
    \ }\n   |                    ^\n   |                    |\n   |              \
    \      expected `f64`, found integer\n   |                    help: use a float\
    \ literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhmsr1f1.rs:16:33\n\
    \   |\n16 |         if rounded_area == area { rounded_area; }\n   |          \
    \                       ^^^^^^^^^^^^^^-^^\n   |                              \
    \   |             |\n   |                                 |             help:\
    \ remove this semicolon\n   |                                 expected `f64`,\
    \ found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkhmsr1f1.rs:19:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n19 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror: aborting due to 5 previous errors\n\nFor more information about\
    \ this er"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64::consts::E;\n\
    \n    if a + b > c {\n        return -1\n    }\n\n    let d = b * b - 4 * a *\
    \ c;\n\n    if d == 0 {\n        return 0;\n    }\n\n    if d < 0 {\n        return\
    \ -1;\n    }\n\n    let mut root = d::sqrt();\n    let mut root_2 = root.sqrt();\n\
    \n    while root_2 >= root {\n        if root < root_2 {\n            root -=\
    \ root_2;\n        } else {\n            break;\n        }\n    }\n\n    if root\
    \ * root == d {\n        return root * root.sqrt();\n    }\n\n    if root * root\
    \ > d {\n        return -1;\n    }\n\n    let mut root2 = d::sqrt();\n\n    while\
    \ root2 >= root {\n        if root < root2 {\n            root2 -= root;\n   \
    \     } else {\n            break;\n        }\n    }\n\n    let root3 = d::sqrt();\n\
    \n    while root3 >= root2 {\n        if root2 < root3 {\n            root3 -=\
    \ root2;\n        } else {\n            break;\n        }\n    }\n\n    if root3\
    \ * root3 == d {\n        let a = b::abs() - a::abs() + c::abs() - a::abs() -\
    \ c::abs();\n        let b = b::abs() + a::abs();\n        let c = a::abs();\n\
    \n        return ((-b + (c - b)) / (2.0 * a))\n    }\n\n    return -1\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `d`\n\
    \  --> /tmp/tmp99ad8fft.rs:28:20\n   |\n28 |     let mut root = d::sqrt();\n \
    \  |                    ^ use of undeclared crate or module `d`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `d`\n  --> /tmp/tmp99ad8fft.rs:47:21\n\
    \   |\n47 |     let mut root2 = d::sqrt();\n   |                     ^ use of\
    \ undeclared crate or module `d`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `d`\n  --> /tmp/tmp99ad8fft.rs:57:17\n   |\n57 |     let root3\
    \ = d::sqrt();\n   |                 ^ use of undeclared crate or module `d`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `b`\n  -->\
    \ /tmp/tmp99ad8fft.rs:68:17\n   |\n68 |         let a = b::abs() - a::abs() +\
    \ c::abs() - a::abs() - c::abs();\n   |                 ^ use of undeclared crate\
    \ or module `b`\n\nerror[E0433]: failed to resolve: use of undeclared crate or\
    \ module `a`\n  --> /tmp/tmp99ad8fft.rs:68:28\n   |\n68 |         let a = b::abs()\
    \ - a::abs() + c::abs() - a::abs() - c::abs();\n   |                         \
    \   ^ use of undeclared crate or module `a`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `c`\n  --> /tmp/tmp99ad8fft.rs:68:39\n   |\n\
    68 |         let a = b::abs() - a::abs() + c::abs() - a::abs() - c::abs();\n \
    \  |                                       ^ use of undeclared crate or module\
    \ `c`\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `a`\n\
    \  --> /tmp/tmp99ad8fft.rs:68:50\n   |\n68 |         let a = b::abs() - a::abs()\
    \ + c::abs() - a::abs() - c::abs();\n   |                                    \
    \              ^ use of undeclared crate or module `a`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `c`\n  --> /tmp/tmp99ad8fft.rs:68:61\n\
    \   |\n68 |         let a = b::abs() - a::abs() + c::abs() - a::abs() - c::abs();\n\
    \   |                                                             ^ use of undeclared\
    \ crate or module `c`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `b`\n  --> /tmp/tmp99ad8fft"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area_of_triangle_with_sides\
    \ : f64 = \n        ((b * b) - (4 * a * c))\n        / (2 * a)\n        + if a\
    \ < b && a < c { 1 }\n        else { 0 }\n    return area_of_triangle_with_sides\
    \ as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpwmibbm61.rs:16:19\n\
    \   |\n16 |         else { 0 }\n   |                   ^ help: add `;` here\n\
    17 |     return area_of_triangle_with_sides as f64\n   |     ------ unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwmibbm61.rs:13:9\n  \
    \ |\n12 |       let area_of_triangle_with_sides : f64 = \n   |               \
    \                          --- expected due to this\n13 | /         ((b * b) -\
    \ (4 * a * c))\n14 | |         / (2 * a)\n15 | |         + if a < b && a < c {\
    \ 1 }\n16 | |         else { 0 }\n   | |__________________^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n13 ~      \
    \   (((b * b) - (4 * a * c))\n14 |         / (2 * a)\n15 |         + if a < b\
    \ && a < c { 1 }\n16 ~         else { 0 }) as f64\n   |\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let sides:\
    \ isize = a + b + c;\n\n    let mut area_sum = 0.0; // sum of two sides\n    \n\
    \    if sides <= 2 {\n        return 1.0\n    }\n    \n    if sides <= 4 {\n \
    \       area_sum += (a + b + c) / 2.0\n    }\n    \n    if sides <= 6 {\n    \
    \    area_sum += a * b\n    }\n    \n    if sides <= 8 {\n        area_sum +=\
    \ a * c\n    }\n    \n    if sides <= 10 {\n        area_sum += b * c\n    }\n\
    \    \n    if area_sum > sides {\n        return -1.0\n    }\n    \n    area_sum\
    \ / sides\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpwxrr21pf.rs:21:33\n\
    \   |\n21 |         area_sum += (a + b + c) / 2.0\n   |                      \
    \           ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpwxrr21pf.rs:25:18\n   |\n25 |         area_sum\
    \ += a * b\n   |                  ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpwxrr21pf.rs:29:18\n\
    \   |\n29 |         area_sum += a * c\n   |                  ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n   = help: the following other types implement trait\
    \ `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32\
    \ as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n\
    \             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n \
    \            <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n     \
    \      and 20 others\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpwxrr21pf.rs:33:18\n   |\n33 |         "
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (a, b, c).iter().fold(0.0,\
    \ |acc, e| acc + e).sqrt() / 3.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize, isize)`\
    \ in the current scope\n  --> /tmp/tmpeewgyeka.rs:12:15\n   |\n12 |     (a, b,\
    \ c).iter().fold(0.0, |acc, e| acc + e).sqrt() / 3.0\n   |               ^^^^\
    \ method not found in `(isize, isize, isize)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match triangle_check(a,\
    \ b, c) {\n        Some(()) => 1.0,\n        None => -1.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `triangle_check` in this scope\n  -->\
    \ /tmp/tmp0wdqf7sc.rs:12:11\n   |\n12 |     match triangle_check(a, b, c) {\n\
    \   |           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // We need\
    \ at least one side, otherwise the triangle is a right triangle\n    if a == 0\
    \ || b == 0 || c == 0 {\n        return -1;\n    }\n\n    // We need to find two\
    \ valid sides which are the sum of a and b, \n    // and one which is the sum\
    \ of a and c\n    let a_plus_b = a + b;\n    let a_plus_c = a + c;\n    let b_plus_c\
    \ = b + c;\n    if a_plus_b >= b_plus_c {\n        // A right triangle\n     \
    \   if a_plus_c > b_plus_c {\n            return b_plus_c - a_plus_b;\n      \
    \  } else {\n            return a_plus_c - a_plus_b;\n        }\n    } else {\n\
    \        // The other way around\n        if a_plus_c > b_plus_c {\n         \
    \   return a_plus_c - b_plus_c;\n        } else {\n            return b_plus_c\
    \ - a_plus_c;\n        }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8x837gd6.rs:14:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         return -1;\n   |                ^^\n   |           \
    \     |\n   |                expected `f64`, found integer\n   |             \
    \   help: use a float literal: `-1.0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a == 0 ||\
    \ b == 0 || c == 0 {\n        return -1.0;\n    }\n    if a + b > c {\n      \
    \  return -1.0;\n    }\n    a + b + c as f64\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `f64` to `isize`\n  --> /tmp/tmp5et867qi.rs:18:11\n\
    \   |\n18 |     a + b + c as f64\n   |           ^ no implementation for `isize\
    \ + f64`\n   |\n   = help: the trait `Add<f64>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ isize = 0;\n    if a + b > c {\n        sum = a + b;\n    } else {\n       \
    \ sum = c;\n    }\n\n    if a + c > b {\n        sum = sum + a;\n    }\n\n   \
    \ if b + c > a {\n        sum = sum + b;\n    }\n\n    match sum {\n        x\
    \ if x == c => std::f64::NAN,\n        _ => std::f64::NAN + ((a * b) * std::f64::PI)\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `PI` in module `std::f64`\n  --> /tmp/tmp3xayvi7p.rs:29:51\n\
    \   |\n29 |         _ => std::f64::NAN + ((a * b) * std::f64::PI)\n   |      \
    \                                             ^^ not found in `std::f64`\n   |\n\
    help: consider importing one of these items\n   |\n1  | use std::f32::consts::PI;\n\
    \   |\n1  | use std::f64::consts::PI;\n   |\nhelp: if you import `PI`, refer to\
    \ it directly\n   |\n29 -         _ => std::f64::NAN + ((a * b) * std::f64::PI)\n\
    29 +         _ => std::f64::NAN + ((a * b) * PI)\n   | \n\nerror[E0277]: cannot\
    \ add `isize` to `f64`\n  --> /tmp/tmp3xayvi7p.rs:29:28\n   |\n29 |         _\
    \ => std::f64::NAN + ((a * b) * std::f64::PI)\n   |                          \
    \  ^ no implementation for `f64 + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `f64`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    fn area_helper(sides:\
    \ (isize, isize, isize)) -> f64 {\n        let mut s = (sides[0] + sides[1] +\
    \ sides[2]) / 3.0;\n        let mut t = (sides[0] - sides[1] - sides[2]) / 3.0;\n\
    \        if s >= t {\n            return s\n        } else {\n            return\
    \ t\n        }\n    }\n    area_helper((a, b, c))\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `(isize, isize, isize)`\n\
    \  --> /tmp/tmpgn283a_0.rs:13:22\n   |\n13 |         let mut s = (sides[0] + sides[1]\
    \ + sides[2]) / 3.0;\n   |                      ^^^^^^^^ help: to access tuple\
    \ elements, use: `sides.0`\n\nerror[E0608]: cannot index into a value of type\
    \ `(isize, isize, isize)`\n  --> /tmp/tmpgn283a_0.rs:13:33\n   |\n13 |       \
    \  let mut s = (sides[0] + sides[1] + sides[2]) / 3.0;\n   |                 \
    \                ^^^^^^^^ help: to access tuple elements, use: `sides.1`\n\nerror[E0608]:\
    \ cannot index into a value of type `(isize, isize, isize)`\n  --> /tmp/tmpgn283a_0.rs:13:44\n\
    \   |\n13 |         let mut s = (sides[0] + sides[1] + sides[2]) / 3.0;\n   |\
    \                                            ^^^^^^^^ help: to access tuple elements,\
    \ use: `sides.2`\n\nerror[E0608]: cannot index into a value of type `(isize, isize,\
    \ isize)`\n  --> /tmp/tmpgn283a_0.rs:14:22\n   |\n14 |         let mut t = (sides[0]\
    \ - sides[1] - sides[2]) / 3.0;\n   |                      ^^^^^^^^ help: to access\
    \ tuple elements, use: `sides.0`\n\nerror[E0608]: cannot index into a value of\
    \ type `(isize, isize, isize)`\n  --> /tmp/tmpgn283a_0.rs:14:33\n   |\n14 |  \
    \       let mut t = (sides[0] - sides[1] - sides[2]) / 3.0;\n   |            \
    \                     ^^^^^^^^ help: to access tuple elements, use: `sides.1`\n\
    \nerror[E0608]: cannot index into a value of type `(isize, isize, isize)`\n  -->\
    \ /tmp/tmpgn283a_0.rs:14:44\n   |\n14 |         let mut t = (sides[0] - sides[1]\
    \ - sides[2]) / 3.0;\n   |                                            ^^^^^^^^\
    \ help: to access tuple elements, use: `sides.2`\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (c-a) * (c-b)\
    \ * (c-a) + \n    (b-a) * (b-c) * (b-a) + \n    (b-a) * (c-b) * (b-a)\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmxv5blh7.rs:12:5\n   |\n\
    11 |   fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |         \
    \                                            --- expected `f64` because of return\
    \ type\n12 | /     (c-a) * (c-b) * (c-a) + \n13 | |     (b-a) * (b-c) * (b-a)\
    \ + \n14 | |     (b-a) * (c-b) * (b-a)\n   | |_________________________^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    12 ~     ((c-a) * (c-b) * (c-a) + \n13 |     (b-a) * (b-c) * (b-a) + \n14 ~  \
    \   (b-a) * (c-b) * (b-a)) as f64\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let triangle\
    \ = a + b + c;\n    let mut total = f64::INFINITY;\n    if a < b {\n        total\
    \ += a;\n    } else if a > b {\n        total += b;\n    }\n    if c < a {\n \
    \       total += c;\n    }\n    if c > a {\n        total += c;\n    }\n    if\
    \ b < c {\n        total += b;\n    }\n    total / triangle\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpm80z1ldr.rs:15:15\n\
    \   |\n15 |         total += a;\n   |               ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpm80z1ldr.rs:17:15\n\
    \   |\n17 |         total += b;\n   |               ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpm80z1ldr.rs:20:15\n\
    \   |\n20 |         total += c;\n   |               ^^ no implementation for `f64\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot add-assign `isize` to `f64`\n  --> /tmp/tmpm80z1ldr.rs:23:15\n\
    \   |\n23 |         total += c;\n   |               ^^ no implementation for `f64\
    \ += isize`\n   |\n "
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    // Check 3\
    \ sides are valid \n    if a + b > c {\n        -1.\n    } else {\n        (b\
    \ * b) - ((a * c) - (b * b))\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqvlgpeuc.rs:16:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |         (b * b) - ((a * c) - (b * b))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n16 |         ((b * b) - ((a * c) - (b * b))) as f64\n   | \
    \        +                             ++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    \n    if a + c > b {\n        return -1\n\
    \    }\n    \n    if b + c > a {\n        return -1\n    }\n    \n    let area\
    \ = 0.5 * std::pow(a, b) + 0.5 * std::pow(c, b) - std::pow(a, 2)\n    \n    if\
    \ area >= 0.0 {\n        area.round()\n    } else {\n        -1\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpm4426eny.rs:24:76\n\
    \   |\n24 |     let area = 0.5 * std::pow(a, b) + 0.5 * std::pow(c, b) - std::pow(a,\
    \ 2)\n   |                                                                   \
    \         ^ help: add `;` here\n25 |     \n26 |     if area >= 0.0 {\n   |   \
    \  -- unexpected token\n\nerror[E0425]: cannot find function `pow` in crate `std`\n\
    \  --> /tmp/tmpm4426eny.rs:24:27\n   |\n24 |     let area = 0.5 * std::pow(a,\
    \ b) + 0.5 * std::pow(c, b) - std::pow(a, 2)\n   |                           ^^^\
    \ not found in `std`\n\nerror[E0425]: cannot find function `pow` in crate `std`\n\
    \  --> /tmp/tmpm4426eny.rs:24:50\n   |\n24 |     let area = 0.5 * std::pow(a,\
    \ b) + 0.5 * std::pow(c, b) - std::pow(a, 2)\n   |                           \
    \                       ^^^ not found in `std`\n\nerror[E0425]: cannot find function\
    \ `pow` in crate `std`\n  --> /tmp/tmpm4426eny.rs:24:67\n   |\n24 |     let area\
    \ = 0.5 * std::pow(a, b) + 0.5 * std::pow(c, b) - std::pow(a, 2)\n   |       \
    \                                                            ^^^ not found in\
    \ `std`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm4426eny.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0689]: can't call\
    \ method `round` on ambiguous numeric type `{float}`\n  --> /tmp/tmpm4426eny.rs:27:14\n\
    \   |\n27 |         area.round()\n   |              ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n24 |     let area: f32 =\
    \ 0.5 * std::pow(a, b) + 0.5 * std::pow(c, b) - std::pow(a, 2)\n   |         ~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpm4426eny.rs:29:9\n   |\n11 | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` becaus"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ (a * b + c) / 2;\n    if s >= c {\n        return c;\n    }\n    if s >= b {\n\
    \        return b;\n    }\n    if s >= a {\n        return a;\n    }\n    return\
    \ s;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5yc93ill.rs:14:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         return c;\n   |                ^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n14 |      \
    \   return c as f64;\n   |                  ++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    let mut area = 0.0;\n    area = area + (a\
    \ * b) - (c * c);\n    area = area + (a * c);\n    area = area + (b * c);\n  \
    \  area = area / (2.0 * c);\n    area = area.round();\n    return area;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprmtkza4_.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmprmtkza4_.rs:16:17\n   |\n16 |     area\
    \ = area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmprmtkza4_.rs:17:17\n   |\n17 |\
    \     area = area + (a * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmprmtkza4_.rs:18:17\n   |\n18 |\
    \     area = area + (b * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    (a.abs() +\
    \ b.abs() + c.abs()) / 2.into()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0284]: type annotations needed: cannot satisfy `<isize as Div<_>>::Output\
    \ == f64`\n  --> /tmp/tmpogdxdhwi.rs:12:35\n   |\n12 |     (a.abs() + b.abs()\
    \ + c.abs()) / 2.into()\n   |                                   ^ cannot satisfy\
    \ `<isize as Div<_>>::Output == f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0284`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    \n    let mut\
    \ area: f64 = -1.0;\n    \n    if a + b > c {\n        area = -1\n    } else if\
    \ a + c > b {\n        area = -1\n    } else {\n        area = ((a * b * c) /\
    \ (a + b + c)).round()\n    }\n    \n    return area;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7l9xakde.rs:16:16\n   |\n\
    13 |     let mut area: f64 = -1.0;\n   |                   --- expected due to\
    \ this type\n...\n16 |         area = -1\n   |                ^^\n   |       \
    \         |\n   |                expected `f64`, found integer\n   |         \
    \       help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7l9xakde.rs:18:16\n   |\n13 |     let mut area: f64 = -1.0;\n \
    \  |                   --- expected due to this type\n...\n18 |         area =\
    \ -1\n   |                ^^\n   |                |\n   |                expected\
    \ `f64`, found integer\n   |                help: use a float literal: `-1.0`\n\
    \nerror[E0599]: no method named `round` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp7l9xakde.rs:20:44\n   |\n20 |         area = ((a * b *\
    \ c) / (a + b + c)).round()\n   |                                            ^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1.0;\n    }\n    \n    let a1 = b - a; \n    let b1 = c\
    \ - b;\n    let c1 = a1 * b1;\n    \n    if a1 * c1 < b1 {\n        return -1.0;\n\
    \    }\n    \n    let a2 = c - a; \n    let b2 = b - c;\n    let c2 = a2 * b2;\n\
    \    \n    if a2 * c2 < b2 {\n        return -1.0;\n    }\n    \n    let area_triangle\
    \ = 4.0 * (b1 + c2) / (a1 + b2);\n    \n    area_triangle.round() as f64\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpw044l0zn.rs:32:29\n\
    \   |\n32 |     let area_triangle = 4.0 * (b1 + c2) / (a1 + b2);\n   |       \
    \                      ^ no implementation for `{float} * isize`\n   |\n   = help:\
    \ the trait `Mul<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0; \n    for d in (&a, &b, &c) {\n        s += *d;\n    }\n    if s != 0 &&\
    \ (s < a || s < b || s < c) { \n        return -1f64\n    }\n    s / 3.0\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `(&isize, &isize, &isize)` is not an iterator\n  --> /tmp/tmplfzqn80t.rs:13:14\n\
    \   |\n13 |     for d in (&a, &b, &c) {\n   |              ^^^^^^^^^^^^ `(&isize,\
    \ &isize, &isize)` is not an iterator\n   |\n   = help: the trait `Iterator` is\
    \ not implemented for `(&isize, &isize, &isize)`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `(&isize, &isize, &isize)`\n\
    \nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplfzqn80t.rs:19:7\n\
    \   |\n19 |     s / 3.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Div<Rhs>`:\n            \
    \ <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a\
    \ i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32\
    \ as Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a {\n\
    \        c < b && c < a => b * b - a * c,\n        c > a && c < b => a * a - b\
    \ * b,\n        _ => 0.0,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `=>`, `@`, `if`, or `|`, found `<`\n  --> /tmp/tmpyq4zjcnm.rs:13:11\n\
    \   |\n13 |         c < b && c < a => b * b - a * c,\n   |           ^ expected\
    \ one of `=>`, `@`, `if`, or `|`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let area =\
    \ ((a + b + c) / 2.0);\n\n    if area > (a + b + c) {\n        area - (a + b +\
    \ c)\n    } else {\n        0.0\n    }\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmp65mcktmj.rs:12:16\n\
    \   |\n12 |     let area = ((a + b + c) / 2.0);\n   |                ^       \
    \          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove\
    \ these parentheses\n   |\n12 -     let area = ((a + b + c) / 2.0);\n12 +    \
    \ let area = (a + b + c) / 2.0;\n   | \n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n  --> /tmp/tmp65mcktmj.rs:12:29\n   |\n12 |     let area = ((a\
    \ + b + c) / 2.0);\n   |                             ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let (sum, mul)\
    \ = ((a*a + b*b + c*c).abs() / 6.0, 6.0);\n    if sum > c {\n        return -1\n\
    \    } else {\n        return sum * mul\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmplxy3q5f8.rs:12:47\n\
    \   |\n12 |     let (sum, mul) = ((a*a + b*b + c*c).abs() / 6.0, 6.0);\n   | \
    \                                              ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `Div<Rhs>`:\n\
    \             <&'a f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n    \
    \         <&'a i128 as Div<i128>>\n             <&'a i16 as Div<i16>>\n      \
    \       <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n          \
    \   <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplxy3q5f8.rs:14:16\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n14 |         return -1\n   |                ^^\n   |     \
    \           |\n   |                expected `f64`, found integer\n   |       \
    \         help: use a float literal: `-1.0`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976675
