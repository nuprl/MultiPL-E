language: rs
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score_delta: Vec<isize> = game;\n    for i in 0..game.len()\
    \ {\n        let difference = guess[i] - score_delta[i];\n        if guess ==\
    \ score_delta {\n            if difference < 0 {\n                score_delta.push(i);\n\
    \            }\n        } else {\n            score_delta.push(difference);\n\
    \        }\n    }\n    score_delta\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnchfblll.rs:19:34\n   |\n\
    19 |                 score_delta.push(i);\n   |                              \
    \    ^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n19 |     \
    \            score_delta.push(i.try_into().unwrap());\n   |                  \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        let diff = if guess[i] > game[i] {\n            guess[i] - game[i]\n\
    \        } else {\n            game[i] - guess[i]\n        };\n        if diff\
    \ != 0 {\n            result[i] = diff;\n        } else {\n            result[i]\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i,j) in game..guess.iter().enumerate()\
    \ {\n        if i == j {\n            result.push(0);\n        } else {\n    \
    \        let diff = guess - game;\n            result.push(std::cmp::min(diff));\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplmpr03mr.rs:15:24\n   |\n\
    15 |     for (i,j) in game..guess.iter().enumerate() {\n   |                 \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Enumerate`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0277]: the trait bound `Vec<isize>: Step` is not satisfied\n\
    \  --> /tmp/tmplmpr03mr.rs:15:18\n   |\n15 |     for (i,j) in game..guess.iter().enumerate()\
    \ {\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Step` is\
    \ not implemented for `Vec<isize>`\n   |\n   = help: the following other types\
    \ implement trait `Step`:\n             char\n             i128\n            \
    \ i16\n             i32\n             i64\n             i8\n             isize\n\
    \             u128\n           and 5 others\n   = note: required because of the\
    \ requirements on the impl of `Iterator` for `std::ops::Range<Vec<isize>>`\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `std::ops::Range<Vec<isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplmpr03mr.rs:15:9\n\
    \   |\n15 |     for (i,j) in game..guess.iter().enumerate() {\n   |         ^^^^^\
    \    ------------------------------ this expression has type `Option<Vec<isize>>`\n\
    \   |         |\n   |         expected struct `Vec`, found tuple\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n               found tuple `(_, _)`\n\nerror[E0369]:\
    \ cannot subtract `Vec<isize>` from `Vec<isize>`\n  --> /tmp/tmplmpr03mr.rs:19:30\n\
    \   |\n19 |             let diff = guess - game;\n   |                       \
    \ ----- ^ ---- Vec<isize>\n   |                        |\n   |               \
    \         Vec<isize>\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmplmpr03mr.rs:20:25\n     |\n20   |            \
    \ result.push(std::cmp::min(diff));\n     |                         ^^^^^^^^^^^^^\
    \ ---- supplied 1 argument\n     |                         |\n     |         \
    \                expected 2 arguments\n     |\nnote: function defined here\n\n\
    error: a"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer = Vec::new();\n    let mut game = game.clone();\n\
    \    let mut guess = guess.clone();\n    for i in 0..game.len() {\n        let\
    \ mut difference = vec![false; guess.len()].to_vec();\n        for j in 0..guess.len()\
    \ {\n            let diff = game[i] - guess[j];\n            if diff != 0 {\n\
    \                difference[j] = true;\n                break;\n            }\n\
    \        }\n        if !difference.iter().any(|&b| *b).unwrap_or(false) {\n  \
    \          answer.push(i);\n        }\n    }\n    answer\n}\n\nfn main() {\n \
    \   let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmpyusukii8.rs:26:40\n\
    \   |\n26 |         if !difference.iter().any(|&b| *b).unwrap_or(false) {\n  \
    \ |                                        ^^\n\nerror[E0599]: no method named\
    \ `unwrap_or` found for type `bool` in the current scope\n  --> /tmp/tmpyusukii8.rs:26:44\n\
    \   |\n26 |         if !difference.iter().any(|&b| *b).unwrap_or(false) {\n  \
    \ |                                            ^^^^^^^^^ method not found in `bool`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyusukii8.rs:30:5\n   |\n13 | fn\
    \ compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                           ---------- expected `Vec<isize>` because\
    \ of return type\n...\n30 |     answer\n   |     ^^^^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"The two\
    \ vectors do not have the same length.\")\n    }\n    let mut guesses = guess[..game.len()];\n\
    \    let mut scores = game[..game.len()];\n    for index in range(game.len())\
    \ {\n        if guesses[index] != scores[index] {\n            guesses = guesses.iter().map(|x|\
    \ x + 1).collect();\n            scores = scores.iter().map(|x| x + 1).collect();\n\
    \        }\n    }\n    guesses.into_iter().map(|x| x - scores).collect()\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpio95ivsy.rs:19:18\n\
    \   |\n19 |     for index in range(game.len()) {\n   |                  ^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::slice::range;\n   |\n\nerror[E0277]: the size for values of type\
    \ `[isize]` cannot be known at compilation time\n  --> /tmp/tmpio95ivsy.rs:17:9\n\
    \   |\n17 |     let mut guesses = guess[..game.len()];\n   |         ^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `[isize]`\n   = note: all local variables must have a\
    \ statically known size\n   = help: unsized locals are gated as an unstable feature\n\
    help: consider borrowing here\n   |\n17 |     let mut guesses = &guess[..game.len()];\n\
    \   |                       +\n\nerror[E0277]: the size for values of type `[isize]`\
    \ cannot be known at compilation time\n  --> /tmp/tmpio95ivsy.rs:18:9\n   |\n\
    18 |     let mut scores = game[..game.len()];\n   |         ^^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[isize]`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\nhelp:\
    \ consider borrowing here\n   |\n18 |     let mut scores = &game[..game.len()];\n\
    \   |                      +\n\nerror[E0277]: a slice of type `[isize]` cannot\
    \ be built since `[isize]` has no definite size\n    --> /tmp/tmpio95ivsy.rs:21:53\n\
    \     |\n21   |             guesses = guesses.iter().map(|x| x + 1).collect();\n\
    \     |                                                     ^^^^^^^ try explicitly\
    \ collecting into a `Vec<isize>`\n     |\n     = help: the trait `FromIterator<isize>`\
    \ is not implemented for `[isize]`\nnote: required by a bound in `collect`\n\n\
    error[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpio95ivsy.rs:21:13\n   |\n21 |             guesses = guesses.iter().map(|x|\
    \ x + 1).collect();\n   |             ^^^^^^^ doesn't have a size known at compil"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // base case\n    if game.len() != guess.len() {\n    \
    \    return vec![0; game.len()];\n    }\n\n    let mut best_diff: Vec<isize> =\
    \ vec![0; game.len()];\n    let mut best_i: usize = 0;\n\n    // base case: game\
    \ and guess have equal length\n    if game.len() == 1 {\n        best_diff[0]\
    \ = 0;\n        return best_diff;\n    }\n\n    // recursive case: game and guess\
    \ are of different length\n    for i in 0..game.len() {\n        let diff = score::abs_diff(game[i],\
    \ guess[i]);\n        if diff > best_diff[best_i] {\n            best_diff = vec![diff;\
    \ best_i];\n            best_i = i;\n        }\n    }\n    // return the best\
    \ diff to the previous iteration\n    vec![best_diff[best_i] - guess[best_i]]\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `score`\n\
    \  --> /tmp/tmprq2w07t9.rs:30:20\n   |\n30 |         let diff = score::abs_diff(game[i],\
    \ guess[i]);\n   |                    ^^^^^ use of undeclared crate or module\
    \ `score`\n   |\nhelp: there is a crate or module with a similar name\n   |\n\
    30 |         let diff = core::abs_diff(game[i], guess[i]);\n   |             \
    \       ~~~~\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total = 0\n    for i in 0..game.len() {\n     \
    \   if game[i] == guess[i] { total += 1 }\n    }\n    Vec::new(game.len())\n \
    \       .iter()\n        .map(|x| match game[x].cmp(&guess[x]) {\n           \
    \ Some(-1) => total - 1,\n            Some(1)  => total + 1,\n            Some(0)\
    \  => total,\n            Some(_)  => total,\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp25ibatyu.rs:14:22\n\
    \   |\n14 |     let mut total = 0\n   |                      ^ help: add `;` here\n\
    15 |     for i in 0..game.len() {\n   |     --- unexpected token\n\nerror[E0061]:\
    \ this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp25ibatyu.rs:18:5\n\
    \    |\n18  |     Vec::new(game.len())\n    |     ^^^^^^^^ ---------- supplied\
    \ 1 argument\n    |     |\n    |     expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&_`\n  --> /tmp/tmp25ibatyu.rs:20:24\n   |\n20 |         .map(|x| match\
    \ game[x].cmp(&guess[x]) {\n   |                        ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&_`\n   = note: required because of the requirements\
    \ on the impl of `Index<&_>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&_`\n  --> /tmp/tmp25ibatyu.rs:20:37\n   |\n20 |     \
    \    .map(|x| match game[x].cmp(&guess[x]) {\n   |                           \
    \          ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&_`\n\
    \   = note: required because of the requirements on the impl of `Index<&_>` for\
    \ `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0061, E0277.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess[..];\n    for (x, y)\
    \ in game.iter().zip(guess.iter()) {\n        if x == y {\n            result[x]\
    \ += 1;\n        } else {\n            result[x] -= (abs(x - y) as isize);\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpscq8ltai.rs:19:27\n\
    \   |\n19 |             result[x] -= (abs(x - y) as isize);\n   |            \
    \               ^^^ not found in this scope\n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmpscq8ltai.rs:19:26\n   |\n19 |         \
    \    result[x] -= (abs(x - y) as isize);\n   |                          ^    \
    \               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n19 -             result[x] -= (abs(x - y) as\
    \ isize);\n19 +             result[x] -= abs(x - y) as isize;\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpscq8ltai.rs:14:34\n   |\n14 |     let mut result:\
    \ Vec<isize> = guess[..];\n   |                     ----------   ^^^^^^^^^- help:\
    \ try using a conversion method: `.to_vec()`\n   |                     |     \
    \       |\n   |                     |            expected struct `Vec`, found\
    \ slice `[isize]`\n   |                     expected due to this\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n               found slice `[isize]`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpscq8ltai.rs:17:13\n\
    \   |\n17 |             result[x] += 1;\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `&isize`\n  --> /tmp/tmpscq8ltai.rs:19:13\n   |\n19 |        \
    \     result[x] -= (abs(x - y) as isize);\n   |             ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors;"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // Your code here\n    \n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmperyo9zcu.rs:13:52\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // Write your code here\n    let mut score = 0;\n    for\
    \ i in 0..guess.len() {\n        if game[i] == guess[i] {\n            score +=\
    \ 1;\n        } else {\n            score += abs(game[i] - guess[i]);\n      \
    \  }\n    }\n    vec![score]\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpemzx_8xe.rs:20:22\n\
    \   |\n20 |             score += abs(game[i] - guess[i]);\n   |              \
    \        ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total_errors = isize::MIN;\n\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            total_errors += 1;\n      \
    \  } else {\n            match game[i] {\n                1 => total_errors +=\
    \ isize::MIN,\n                2 => total_errors += isize::MAX,\n            \
    \    3 => total_errors += isize::MAX,\n                _ => total_errors += isize::MAX,\n\
    \            }\n        }\n    }\n\n    total_errors\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnuxoaa80.rs:29:5\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n29 |     total_errors\n   |     ^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    guess = guess.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut answer = guess.iter().cloned().collect::<Vec<isize>>();\n    let\
    \ mut correct = true;\n\n    for v in game.iter() {\n        if !guess.contains(v)\
    \ {\n            correct = false;\n            break;\n        }\n    }\n\n  \
    \  if correct {\n        answer = guess.iter().cloned().collect::<Vec<isize>>();\n\
    \    }\n\n    for v in guess.iter() {\n        let mut diff = v;\n        let\
    \ mut i = answer.iter();\n        if *i == v {\n            while i != answer.iter()\
    \ {\n                i = i.next();\n                let mut diff = v;\n      \
    \          *i = *i + 1;\n            }\n            answer.push(v);\n        }\n\
    \    }\n\n    answer\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `std::slice::Iter<'_, isize>` cannot be dereferenced\n\
    \  --> /tmp/tmpgnag1oav.rs:32:12\n   |\n32 |         if *i == v {\n   |      \
    \      ^^\n\nerror[E0369]: binary operation `!=` cannot be applied to type `std::slice::Iter<'_,\
    \ isize>`\n  --> /tmp/tmpgnag1oav.rs:33:21\n   |\n33 |             while i !=\
    \ answer.iter() {\n   |                   - ^^ ------------- std::slice::Iter<'_,\
    \ isize>\n   |                   |\n   |                   std::slice::Iter<'_,\
    \ isize>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgnag1oav.rs:34:21\n\
    \   |\n31 |         let mut i = answer.iter();\n   |                     -------------\
    \ expected due to this value\n...\n34 |                 i = i.next();\n   |  \
    \                   ^^^^^^^^ expected struct `std::slice::Iter`, found enum `Option`\n\
    \   |\n   = note: expected struct `std::slice::Iter<'_, isize>`\n            \
    \    found enum `Option<&isize>`\n\nerror[E0614]: type `std::slice::Iter<'_, isize>`\
    \ cannot be dereferenced\n  --> /tmp/tmpgnag1oav.rs:36:17\n   |\n36 |        \
    \         *i = *i + 1;\n   |                 ^^\n\nerror[E0614]: type `std::slice::Iter<'_,\
    \ isize>` cannot be dereferenced\n  --> /tmp/tmpgnag1oav.rs:36:22\n   |\n36 |\
    \                 *i = *i + 1;\n   |                      ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgnag1oav.rs:38:25\n   |\n38 |             answer.push(v);\n\
    \   |                         ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n38 |             answer.push(*v);\n\
    \   |                         +\n\nerror: aborting due to 6 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.clone();\n    for (i,\
    \ v) in game.iter().enumerate() {\n        if guess[i] == v {\n            result[i]\
    \ = 0;\n        } else {\n            let delta = guess[i] - v;\n            if\
    \ delta < 0 {\n                delta *= -1;\n            }\n            result[i]\
    \ += delta;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf2wt9zl2.rs:16:24\n   |\n\
    16 |         if guess[i] == v {\n   |                        ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \       if guess[i] == *v {\n   |                        +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let len =\
    \ game.len();\n    for i in 0..len {\n        let mut diff = guess[i] - game[i];\n\
    \        if diff > 0 {\n            result.append(diff);\n        } else {\n \
    \           result.append(std::cmp::abs(diff));\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::cmp`\n  --> /tmp/tmp83kxmgsi.rs:21:37\n\
    \   |\n21 |             result.append(std::cmp::abs(diff));\n   |            \
    \                         ^^^ not found in `std::cmp`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp83kxmgsi.rs:19:27\n   |\n19 |             result.append(diff);\n\
    \   |                           ^^^^ expected `&mut Vec<isize>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<isize>`\n             \
    \              found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    assert!(game.len() == guess.len());\n    let mut differences\
    \ = vec![0; game.len()];\n    for (g, gs) in zip(game, guess) {\n        if g\
    \ != gs {\n            differences[g as usize] = abs(g - gs);\n        }\n   \
    \ }\n    differences\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `zip` in this scope\n  --> /tmp/tmp238l6kg4.rs:16:20\n\
    \   |\n16 |     for (g, gs) in zip(game, guess) {\n   |                    ^^^\
    \ not found in this scope\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::iter::zip;\n   |\n\nerror[E0425]: cannot find function `abs` in\
    \ this scope\n  --> /tmp/tmp238l6kg4.rs:18:39\n   |\n18 |             differences[g\
    \ as usize] = abs(g - gs);\n   |                                       ^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\n     \
    \       \"compare: guess and score vectors have unequal lengths. {} != {}\",\n\
    \            game.len(),\n            guess.len()\n        )\n    }\n    \n  \
    \  let mut result = vec![];\n    let mut error = 0;\n    for i in 0..game.len()\
    \ {\n        if game[i] != guess[i] {\n            error += game[i] - guess[i];\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    if error\
    \ == 0 {\n        return result;\n    }\n    return vec![(error.abs()) + game.len()..game.len()];\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptd3lx9z0.rs:32:16\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n32 |         return result;\n   |             \
    \   ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptd3lx9z0.rs:34:33\n   |\n34 |     return vec![(error.abs()) + game.len()..game.len()];\n\
    \   |                                 ^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmptd3lx9z0.rs:34:31\n\
    \   |\n34 |     return vec![(error.abs()) + game.len()..game.len()];\n   |   \
    \                            ^ no implementation for `isize + usize`\n   |\n \
    \  = help: the trait `Add<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n    \
    \         <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n          \
    \   <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptd3lx9z0.rs:34:45\n   |\n34 |     return vec![(error.abs())\
    \ + game.len()..game.len()];\n   |                                           \
    \  ^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptd3lx9z0.rs:34:17\n   |\n34 |     return vec![(error.abs()) + game.len()..game.len()];\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found struct `std::ops::Range`\n   |\n   = note: expected type `isize`\n   \
    \         found struct `std::ops::Range<isize>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"The two\
    \ vectors do not have the same length\")\n    }\n    \n    let mut total = 0;\n\
    \    for i in 0..guess.len() {\n        total += if game[i] < guess[i] { -1 }\
    \ else if game[i] > guess[i] { 1 } else { 0 };\n    }\n    \n    vec![total]\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpwwripd58.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(a, b)| if a == b {\
    \ 0 } else { a - b }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let guesses = guess.iter().cloned();\n    let scores =\
    \ game.iter().cloned();\n    let mut result: Vec<isize> = guess.clone();\n   \
    \ let mut count = 1;\n    let mut prev = 0;\n    while count <= scores.len() {\n\
    \        for (i, score) in scores.iter_mut().enumerate() {\n            let guess\
    \ = &guesses[i - 1];\n            if score == guess {\n                result[i]\
    \ = 0;\n                count++;\n                continue;\n            }\n \
    \           if score < guess {\n                result[i] = 1;\n             \
    \   count++;\n                continue;\n            }\n            result[i]\
    \ = abs(score - guess);\n            count++;\n        }\n        prev = *result.iter().last().unwrap();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp8_p5s4x8.rs:24:22\n\
    \   |\n24 |                 count++;\n   |                      ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n24 |               \
    \  { let tmp = count; count += 1; tmp };\n   |                 +++++++++++   \
    \   ~~~~~~~~~~~~~~~~~~~\n24 -                 count++;\n24 +                 count\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmp8_p5s4x8.rs:29:22\n\
    \   |\n29 |                 count++;\n   |                      ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n29 |               \
    \  { let tmp = count; count += 1; tmp };\n   |                 +++++++++++   \
    \   ~~~~~~~~~~~~~~~~~~~\n29 -                 count++;\n29 +                 count\
    \ += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmp8_p5s4x8.rs:33:18\n\
    \   |\n33 |             count++;\n   |                  ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n33 |             { let tmp =\
    \ count; count += 1; tmp };\n   |             +++++++++++      ~~~~~~~~~~~~~~~~~~~\n\
    33 -             count++;\n33 +             count += 1;\n   | \n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmp8_p5s4x8.rs:32:25\n\
    \   |\n32 |             result[i] = abs(score - guess);\n   |                \
    \         ^^^ not found in this scope\n\nerror[E0599]: no method named `iter_mut`\
    \ found for struct `Cloned` in the current scope\n  --> /tmp/tmp8_p5s4x8.rs:20:34\n\
    \   |\n20 |         for (i, score) in scores.iter_mut().enumerate() {\n   |  \
    \                                ^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0608]: cannot index into a value of type `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n  --> /tmp/tmp8_p5s4x8.rs:21:26\n   |\n21 |             let guess\
    \ = &guesses[i - 1];\n   |                          ^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0425, E0599,\
    \ E0608.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total = 0isize;\n\n    for i in 0..game.len() {\n\
    \        for j in 0..guess.len() {\n            total += abs(game[i] - guess[j]);\n\
    \        }\n    }\n\n    vec![total as usize]\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp6upvmacf.rs:18:22\n\
    \   |\n18 |             total += abs(game[i] - guess[j]);\n   |              \
    \        ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6upvmacf.rs:22:10\n   |\n22 |     vec![total as usize]\n   |       \
    \   ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    22 |     vec![(total as usize).try_into().unwrap()]\n   |          +         \
    \     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correct_guess = guess.iter().zip(game).map(|(&a,\
    \ &b)| {\n        let a: usize = a;\n        let b: usize = b;\n        if a ==\
    \ b { 0 }\n        else {\n            let diff = b - a;\n            if diff\
    \ > 0 { diff }\n            else { -diff }\n        }\n    }).sum();\n    game.iter().zip(guess).map(|(&a,\
    \ &b)| {\n        if a != b { a as isize - b as isize }\n        else {\n    \
    \        0\n        }\n    }).sum().map(|a| {\n        correct_guess as isize\
    \ - a as isize\n    }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4a64_lxx.rs:14:62\n   |\n\
    14 |     let mut correct_guess = guess.iter().zip(game).map(|(&a, &b)| {\n   |\
    \                                                              ^^- expected due\
    \ to this\n   |                                                              |\n\
    \   |                                                              expected `isize`,\
    \ found reference\n   |                                                      \
    \        help: you can probably remove the explicit borrow: `b`\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4a64_lxx.rs:15:24\n   |\n15 |         let a: usize = a;\n\
    \   |                -----   ^ expected `usize`, found `isize`\n   |         \
    \       |\n   |                expected due to this\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    15 |         let a: usize = a.try_into().unwrap();\n   |                     \
    \    ++++++++++++++++++++\n\nerror[E0600]: cannot apply unary operator `-` to\
    \ type `usize`\n  --> /tmp/tmp4a64_lxx.rs:21:20\n   |\n21 |             else {\
    \ -diff }\n   |                    ^^^^^ cannot apply unary operator `-`\n   |\n\
    \   = note: unsigned values cannot be negated\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4a64_lxx.rs:24:38\n   |\n24 |     game.iter().zip(guess).map(|(&a,\
    \ &b)| {\n   |                                      ^^- expected due to this\n\
    \   |                                      |\n   |                           \
    \           expected `isize`, found reference\n   |                          \
    \            help: you can probably remove the explicit borrow: `b`\n   |\n  \
    \ = note:   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0600.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        result[i] = game[i] - guess[i];\n        if result[i] == 0 {\n  \
    \          result[i] = game[i] - guess[i];\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    \n    let len = game.len();\n    let guesses = guess.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut result = vec![0; len];\n\n    // go through all the guesses\n   \
    \ for guess in guesses.into_iter() {\n        // go through all the scores\n \
    \       for score in game.into_iter() {\n            // if the guess and the score\
    \ are equal, move to the next score\n            if score == guess {\n       \
    \         continue;\n            }\n            \n            // otherwise, if\
    \ they guess was incorrect\n            if guess < score {\n                //\
    \ move the guess to the correct position\n                result[guess] += 1;\n\
    \            } else {\n                // move the guess to its correct position\n\
    \                result[score] -= 1;\n            }\n        }\n    }\n\n    //\
    \ return the result\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpywci281_.rs:31:17\n   |\n31 |                 result[guess] += 1;\n\
    \   |                 ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpywci281_.rs:34:17\n   |\n34 |                 result[score]\
    \ -= 1;\n   |                 ^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    guess = guess.iter().cloned().collect();\n    game = game.iter().cloned().collect();\n\
    \    let mut result = 0;\n    for i in 0..game.len() {\n        if game[i] !=\
    \ guess[i] {\n            result += abs(game[i] - guess[i]);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpdahtw1nu.rs:19:23\n\
    \   |\n19 |             result += abs(game[i] - guess[i]);\n   |             \
    \          ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdahtw1nu.rs:22:5\n   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n22 |     result\n   |   \
    \  ^^^^^^ expected struct `Vec`, found integer\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n                found type `{integer}`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut best_guess = Vec::with_capacity(guess.len());\n\
    \n    for element in 0..game.len() {\n        let mut min_diff = std::i32::MAX;\n\
    \        let mut min_score = 0;\n\n        for (i, score) in guess.iter().enumerate()\
    \ {\n            if element == i {\n                continue;\n            }\n\
    \n            let diff = score - game[element];\n\n            if diff < min_diff\
    \ {\n                min_diff = diff;\n                min_score = score;\n  \
    \          }\n        }\n\n        best_guess.push((min_score, min_diff));\n \
    \   }\n\n    guess_score(&best_guess)\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `guess_score` in this scope\n  --> /tmp/tmpmmxdc08e.rs:36:5\n\
    \   |\n36 |     guess_score(&best_guess)\n   |     ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmmxdc08e.rs:27:23\n \
    \  |\n27 |             if diff < min_diff {\n   |                       ^^^^^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n27 |             if diff\
    \ < min_diff.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmmxdc08e.rs:28:28\n   |\n17 |\
    \         let mut min_diff = std::i32::MAX;\n   |                            -------------\
    \ expected due to this value\n...\n28 |                 min_diff = diff;\n   |\
    \                            ^^^^ expected `i32`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmmxdc08e.rs:29:29\n   |\n18 |         let mut\
    \ min_score = 0;\n   |                             - expected due to this value\n\
    ...\n29 |                 min_score = score;\n   |                           \
    \  ^^^^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n29 |                 min_score = *score;\n   |           \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"game and\
    \ guess are not of equal length\");\n    }\n\n    let mut difference_of_guess\
    \ = Vec::new();\n    for i in 0..game.len() {\n        if game[i] == guess[i]\
    \ { difference_of_guess.push(i); }\n    }\n    difference_of_guess\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi97memcf.rs:22:5\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     difference_of_guess\n   |     ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for pos in\
    \ 0..game.len() {\n        let game_value = game[pos];\n        let guess_value\
    \ = guess[pos];\n        if game_value >= guess_value {\n            result.push(game_value\
    \ - guess_value);\n        } else {\n            result.push(guess_value - game_value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.clone();\n\n    for\
    \ i in 0..guess.len() {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = guess.len() - i;\n        }\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6nnawc2g.rs:20:25\n   |\n\
    20 |             result[i] = guess.len() - i;\n   |             ---------   ^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO implement\n    \n    let mut result = vec![0; game.len()];\n\
    \    for i in 0..game.len() {\n        for j in 0..guess.len() {\n           \
    \ let distance = if game[i] == guess[j] {\n                0\n            } else\
    \ {\n                let distance = abs(game[i] - guess[j]);\n               \
    \ if distance > result[i as usize] {\n                    distance\n         \
    \       } else {\n                    result[i as usize]\n                }\n\
    \            };\n            result[j as usize] = distance;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp23wt6r0r.rs:22:32\n\
    \   |\n22 |                 let distance = abs(game[i] - guess[j]);\n   |    \
    \                            ^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_diff = isize::MAX;\n\n    for guess in guess.iter()\
    \ {\n        if let Some(game) = game.iter().position(|x| x == guess) {\n    \
    \        if game > guess {\n                // swap them so the minimum diff is\
    \ the opposite of the diff of guess and the score\n                swap(game,\
    \ guess);\n            }\n\n            let diff = guess - game;\n           \
    \ if diff < min_diff {\n                min_diff = diff;\n            }\n    \
    \    }\n    }\n\n    guess[game]\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpsvl9sp9x.rs:20:17\n\
    \   |\n20 |                 swap(game, guess);\n   |                 ^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing one of these items\n   |\n\
    1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsvl9sp9x.rs:18:23\n   |\n18 |             if\
    \ game > guess {\n   |                       ^^^^^ expected `usize`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsvl9sp9x.rs:23:32\n   |\n23 |\
    \             let diff = guess - game;\n   |                                ^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from\
    \ `&isize`\n  --> /tmp/tmpsvl9sp9x.rs:23:30\n   |\n23 |             let diff =\
    \ guess - game;\n   |                              ^ no implementation for `&isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `Vec<isize>`\n  --> /tmp/tmpsvl9sp9x.rs:30:5\n\
    \   |\n30 |     guess[game]\n   |     ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `Vec<isize>`\n   = note: required because of the requirements\
    \ on the impl of `Index<Vec<isize>>` for `Vec<isize>`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.clone();\n    let mut\
    \ total_score: isize = 0;\n    for guess in guess.iter() {\n        if let Some(score)\
    \ = get_score(&game, &guess) {\n            total_score += score;\n          \
    \  result[guess] = total_score;\n        } else {\n            result[guess] =\
    \ 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_score` in this scope\n  --> /tmp/tmp0ndg8h5v.rs:17:30\n\
    \   |\n17 |         if let Some(score) = get_score(&game, &guess) {\n   |    \
    \                          ^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp0ndg8h5v.rs:19:13\n\
    \   |\n19 |             result[guess] = total_score;\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp0ndg8h5v.rs:21:13\n\
    \   |\n21 |             result[guess] = 0;\n   |             ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correctness = vec![0; game.len()];\n\n    for (i,\
    \ &g) in guess.iter().enumerate() {\n        correctness[i] = if game[i] == g\
    \ { 0 } else { abs(g - game[i]) };\n    }\n\n    correctness\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqgszcoy9.rs:17:55\n\
    \   |\n17 |         correctness[i] = if game[i] == g { 0 } else { abs(g - game[i])\
    \ };\n   |                                                       ^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in game.iter_mut()\
    \ {\n        if *n < guess[0] || *n > guess[0] || *n < guess[1] || *n > guess[1]\
    \ {\n            result.push(abs(*n - guess[0]));\n        } else {\n        \
    \    result.push(*n - guess[0]);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp4u06f5n_.rs:17:25\n\
    \   |\n17 |             result.push(abs(*n - guess[0]));\n   |               \
    \          ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correct = game.len();\n    let mut wrong = 0;\n\
    \    for index in 0..game.len() {\n        if game[index] == guess[index] {\n\
    \            correct += 1;\n        } else {\n            wrong += 1;\n      \
    \  }\n    }\n    let answer = Vec::new();\n    answer.push(wrong);\n    answer.push(correct);\n\
    \    answer\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf7kw_gjj.rs:26:5\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n26 |     answer\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0i32; game.len()];\n    for idx in\
    \ (0..game.len()).rev() {\n        let score = game[idx];\n        let guess =\
    \ guess[idx];\n        let diff = abs(guess - score);\n        if diff > 0 {\n\
    \            result[idx] = diff;\n        } else {\n            result[idx] =\
    \ -1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp47r690ei.rs:18:20\n\
    \   |\n18 |         let diff = abs(guess - score);\n   |                    ^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp47r690ei.rs:25:5\n\
    \   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n25 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `i32`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<i32>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut game = game.to_owned();\n    let mut guess = guess.to_owned();\n\
    \    game.sort_unstable_by(|a, b| {\n        if a == b {\n            0\n    \
    \    } else {\n            a < b ? -1 : 1\n        }\n    });\n    guess.sort_unstable_by(|a,\
    \ b| {\n        if a == b {\n            0\n        } else {\n            a <\
    \ b ? -1 : 1\n        }\n    });\n\n    let mut dist: Vec<isize> = vec![0];\n\
    \    for i in 0..guess.len() {\n        let dist = guess[i] - game[i];\n     \
    \   dist.push(dist);\n    }\n\n    dist\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `1`\n  --> /tmp/tmp84cin7bi.rs:20:26\n   |\n\
    20 |             a < b ? -1 : 1\n   |                        - ^ expected type\n\
    \   |                        |\n   |                        tried to parse a type\
    \ due to this\n\nerror: expected type, found `1`\n  --> /tmp/tmp84cin7bi.rs:27:26\n\
    \   |\n27 |             a < b ? -1 : 1\n   |                        - ^ expected\
    \ type\n   |                        |\n   |                        tried to parse\
    \ a type due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84cin7bi.rs:18:13\n\
    \   |\n18 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84cin7bi.rs:25:13\n\
    \   |\n25 |             0\n   |             ^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0599]: no method named `push` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp84cin7bi.rs:34:14\n   |\n34 |         dist.push(dist);\n\
    \   |              ^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    assert_eq!(game.len(), guess.len());\n    let mut result\
    \ = Vec::with_capacity(game.len());\n    let mut i = 0;\n    let mut j = 0;\n\
    \    while i < game.len() {\n        let a = game[i];\n        let b = guess[j];\n\
    \        if a > b {\n            result.append(a - b);\n        } else {\n   \
    \         result.append(b - a);\n        }\n        i += 1;\n        j += 1\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe53zmuw8.rs:22:27\n   |\n\
    22 |             result.append(a - b);\n   |                           ^^^^^ expected\
    \ `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut\
    \ Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe53zmuw8.rs:24:27\n   |\n24 |             result.append(b\
    \ - a);\n   |                           ^^^^^ expected `&mut Vec<_>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<_>`\n                 \
    \          found type `isize`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    game.iter().zip(guess.iter()).for_each(|(g,g)|\
    \ {\n        if g == 0 { result[0] += game.len() - g.len(); } else { result[g]\
    \ -= g.len(); result[0] -= g.len(); }\n    });\n    result\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `g` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmphrlaktcz.rs:15:48\n   |\n15 |     game.iter().zip(guess.iter()).for_each(|(g,g)|\
    \ {\n   |                                                ^ used as parameter more\
    \ than once\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmphrlaktcz.rs:16:14\n\
    \   |\n16 |         if g == 0 { result[0] += game.len() - g.len(); } else { result[g]\
    \ -= g.len(); result[0] -= g.len(); }\n   |              ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0599]: no method named `len`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmphrlaktcz.rs:16:49\n\
    \   |\n16 |         if g == 0 { result[0] += game.len() - g.len(); } else { result[g]\
    \ -= g.len(); result[0] -= g.len(); }\n   |                                  \
    \               ^^^ method not found in `&isize`\n\nerror[E0277]: the type `[usize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmphrlaktcz.rs:16:65\n   |\n16 | \
    \        if g == 0 { result[0] += game.len() - g.len(); } else { result[g] -=\
    \ g.len(); result[0] -= g.len(); }\n   |                                     \
    \                            ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[usize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<usize>`\n\nerror[E0599]: no method named `len` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmphrlaktcz.rs:16:80\n   |\n16 | \
    \        if g == 0 { result[0] += game.len() - g.len(); } else { result[g] -=\
    \ g.len(); result[0] -= g.len(); }\n   |                                     \
    \       "
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut distances = Vec::with_capacity(guess.len());\n\
    \    for (x, y) in guess.iter().zip2(&game) {\n        distances.push(abs(x -\
    \ y));\n    }\n    distances\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqetxl9np.rs:16:24\n\
    \   |\n16 |         distances.push(abs(x - y));\n   |                        ^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `zip2` found for struct\
    \ `std::slice::Iter` in the current scope\n  --> /tmp/tmpqetxl9np.rs:15:32\n \
    \  |\n15 |     for (x, y) in guess.iter().zip2(&game) {\n   |                \
    \                ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut differences: Vec<isize> = Vec::new();\n    \n \
    \   for guess_index, guessed_index in zip(game.iter().cloned(), guess.iter().cloned())\
    \ {\n        if guess == game[guess_index] {\n            differences.push(0);\n\
    \        } else {\n            differences.push(guess - game[guessed_index]);\n\
    \        }\n    }\n    \n    differences\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmpn6zp1s6g.rs:16:20\n   |\n\
    16 |     for guess_index, guessed_index in zip(game.iter().cloned(), guess.iter().cloned())\
    \ {\n   |                    ^\n   |\nhelp: try adding parentheses to match on\
    \ a tuple\n   |\n16 |     for (guess_index, guessed_index) in zip(game.iter().cloned(),\
    \ guess.iter().cloned()) {\n   |         +                          +\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diffs = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        let guess = &guess[i];\n        let score = &game[i];\n        let\
    \ mut diff = score - guess;\n        if diff < 0 {\n            diff *= -1;\n\
    \        }\n        diffs[i] = diff;\n    }\n    diffs\n}\n\nfn main() {\n   \
    \ let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut best_guess: Vec<isize> = Vec::new();\n    let mut\
    \ best_score: isize = 0;\n    let mut game_size = game.len();\n    while game_size\
    \ > 0 {\n        let mut guess_idx = 0;\n        while guess_idx < game_size {\n\
    \            let mut score_diff = abs(game[guess_idx] - guess[guess_idx]);\n \
    \           if game[guess_idx] <= guess[guess_idx] {\n                guess_idx\
    \ += 1;\n                let mut min_score = score_diff;\n                while\
    \ guess_idx < game_size && game[guess_idx] <= guess[guess_idx] {\n           \
    \         score_diff += abs(game[guess_idx] - guess[guess_idx]);\n           \
    \         guess_idx += 1;\n                }\n                if score_diff <\
    \ min_score {\n                    best_score = score_diff;\n                \
    \    best_guess = guess;\n                }\n            } else if game[guess_idx]\
    \ > guess[guess_idx] {\n                guess_idx += 1;\n                let mut\
    \ max_score = score_diff;\n                while guess_idx < game_size && game[guess_idx]\
    \ > guess[guess_idx] {\n                    score_diff -= abs(game[guess_idx]\
    \ - guess[guess_idx]);\n                    guess_idx += 1;\n                }\n\
    \                if score_diff > max_score {\n                    best_score =\
    \ score_diff;\n                    best_guess = guess;\n                }\n  \
    \          }\n        }\n        game_size = game_size - 1;\n    }\n    best_guess\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpkamauyij.rs:20:34\n\
    \   |\n20 |             let mut score_diff = abs(game[guess_idx] - guess[guess_idx]);\n\
    \   |                                  ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmpkamauyij.rs:25:35\n\
    \   |\n25 |                     score_diff += abs(game[guess_idx] - guess[guess_idx]);\n\
    \   |                                   ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmpkamauyij.rs:36:35\n\
    \   |\n36 |                     score_diff -= abs(game[guess_idx] - guess[guess_idx]);\n\
    \   |                                   ^^^ not found in this scope\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let guess = guess.iter().cloned().collect();\n    let game\
    \ = game.iter().cloned().collect();\n    let mut distance = Vec::new();\n\n  \
    \  for i in 0..game.len() {\n        let g = guess[i];\n        let g = g * 2\
    \ - 1;\n        let a = game[i];\n\n        let mut g = g;\n        let mut a\
    \ = a;\n        while g > 0 {\n            g = g - 1;\n            a = a + 1;\n\
    \        }\n        distance.push(a);\n    }\n    distance\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpnvd_ynan.rs:18:17\n\
    \   |\n15 |     let game = game.iter().cloned().collect();\n   |         ----\
    \ consider giving `game` a type\n...\n18 |     for i in 0..game.len() {\n   |\
    \                 ^^^^ cannot infer type\n   |\n   = note: type must be known\
    \ at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer: Vec<isize> = Vec::with_capacity(guess.len());\n\
    \    answer.reserve(guess.len());\n\n    let mut scores = Vec::with_capacity(game.len());\n\
    \    scores.reserve(game.len());\n    for &mut score in scores.as_mut_slice()\
    \ {\n        score.push(0);\n    }\n\n    for &(game_index, guess) in game.into_iter().zip(guess.into_iter()).enumerate()\
    \ {\n        if let Some(&guess) = guess {\n            for score in scores.iter_mut()\
    \ {\n                score.push(0);\n            }\n            for score in scores.iter()\
    \ {\n                score.push(0);\n            }\n\n            for mut score_index\
    \ in scores.iter().rev() {\n                let &mut score_index = score_index;\n\
    \                score_index.push(0);\n            }\n\n            let guessed_score\
    \ = guess[game_index];\n            let game_score = game[game_index];\n     \
    \       for &(score_index, &mut score) in scores.iter_mut().rev() {\n        \
    \        let &mut score_index = score_index;\n                score_index.push(0);\n\
    \            }\n\n            for &mut score in scores.iter() {\n            \
    \    score.push(0);\n            }\n\n            answer.push(guessed_score);\n\
    \            for &mut score in scores.iter() {\n                score.push(guessed_score\
    \ - game_score);\n            }\n        }\n    }\n    answer\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `&mut T`\n  --> /tmp/tmp0m0okwik.rs:20:9\n\
    \   |\n17 |     let mut scores = Vec::with_capacity(game.len());\n   |       \
    \  ---------- consider giving `scores` the explicit type `&mut T`, with the type\
    \ parameters specified\n...\n20 |         score.push(0);\n   |         ^^^^^ cannot\
    \ infer type\n   |\n   = note: type must be known at this point\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0m0okwik.rs:23:9\n   |\n23 |     for &(game_index,\
    \ guess) in game.into_iter().zip(guess.into_iter()).enumerate() {\n   |      \
    \   ^^^^^^^^^^^^^^^^^^^^    ---------------------------------------------------\
    \ this expression has type `Option<(usize, (isize, isize))>`\n   |         |\n\
    \   |         expected tuple, found reference\n   |\n   = note:  expected tuple\
    \ `(usize, (isize, isize))`\n           found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0282, E0308.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total = 0;\n    for (score, guess) in game.iter().zip(guess.iter())\
    \ {\n        if score > guess {\n            total += 1;\n        } else if score\
    \ < guess {\n            total += 2;\n        }\n    }\n    total as Vec<isize>\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `i32` as `Vec<isize>`\n  --> /tmp/tmpgz3tegwg.rs:22:5\n\
    \   |\n22 |     total as Vec<isize>\n   |     ^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.iter().cloned().collect();\n\
    \    let mut delta = 0;\n    for (i, &g) in guess.iter().enumerate() {\n     \
    \   let mut game = game.iter().cloned().collect();\n        game.swap(i, g);\n\
    \        let delta = if game.iter().all(|&g| g == i) {\n            delta\n  \
    \      } else {\n            delta + game.iter().position(|&g| g != i).unwrap()\
    \ - i\n        };\n        result[i] = delta;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp_7gkdixk.rs:18:9\n\
    \   |\n17 |         let mut game = game.iter().cloned().collect();\n   |     \
    \        -------- consider giving `game` a type\n18 |         game.swap(i, g);\n\
    \   |         ^^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // return vec!(0isize, 0..guess.length);\n    if game.len()\
    \ != guess.len() {\n        return vec!(0isize, guess.length);\n    }\n    let\
    \ mut ret: Vec<isize> = vec!(0isize, guess.length);\n    for (i, v) in game.into_iter().zip(guess.into_iter()).enumerate()\
    \ {\n        if v == 0 {\n            ret[i] = 0;\n        } else {\n        \
    \    ret[i] = v - guess[i];\n        }\n    }\n    ret\n}\n\nfn main() {\n   \
    \ let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `length` on type `Vec<isize>`\n  --> /tmp/tmpu7ro_a16.rs:16:35\n\
    \   |\n16 |         return vec!(0isize, guess.length);\n   |                 \
    \                  ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on\
    \ type `Vec<isize>`\n  --> /tmp/tmpu7ro_a16.rs:18:50\n   |\n18 |     let mut ret:\
    \ Vec<isize> = vec!(0isize, guess.length);\n   |                             \
    \                     ^^^^^^ unknown field\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpu7ro_a16.rs:20:17\n   |\n20 |         if v == 0 {\n   |       \
    \          ^ expected tuple, found integer\n   |\n   = note: expected tuple `(isize,\
    \ isize)`\n               found type `{integer}`\n\nerror[E0369]: cannot subtract\
    \ `isize` from `(isize, isize)`\n  --> /tmp/tmpu7ro_a16.rs:23:24\n   |\n23 | \
    \            ret[i] = v - guess[i];\n   |                      - ^ -------- isize\n\
    \   |                      |\n   |                      (isize, isize)\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369, E0609.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut differences = vec![0; game.len()];\n    for i in\
    \ 0..game.len() {\n        if guess[i] != game[i] {\n            differences[i]\
    \ = abs(guess[i] - game[i]);\n        } else {\n            differences[i] = 0;\n\
    \        }\n    }\n    return differences;\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp8p6yuwod.rs:17:30\n\
    \   |\n17 |             differences[i] = abs(guess[i] - game[i]);\n   |      \
    \                        ^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diff: Vec<isize> = guess.iter().cloned().collect();\n\
    \    let mut games: Vec<isize> = game.iter().cloned().collect();\n    let mut\
    \ result = Vec::new();\n    let mut min_diff = diff.len();\n    for (mut i, x)\
    \ in diff.iter_mut().zip(games.iter_mut()) {\n        if x == 0 {\n          \
    \  result[i] += 1;\n        } else {\n            let mut guess = guess.iter().cloned().collect();\n\
    \            guess.insert(i, x);\n            diff[..] = guess.iter().cloned().collect();\n\
    \            let diff_sum: isize = diff.iter().sum();\n            let game_sum:\
    \ isize = games.iter().sum();\n            if diff_sum == game_sum {\n       \
    \         result[i] += diff_sum;\n            } else {\n                if diff_sum\
    \ < min_diff {\n                    min_diff = diff_sum;\n                }\n\
    \                diff[..] = guess.iter().cloned().collect();\n               \
    \ result[i] += diff[..].iter().max().unwrap() - x;\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&mut isize` with `{integer}`\n  --> /tmp/tmp3pcloybh.rs:19:14\n\
    \   |\n19 |         if x == 0 {\n   |              ^^ no implementation for `&mut\
    \ isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not\
    \ implemented for `&mut isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `&mut isize`\n  --> /tmp/tmp3pcloybh.rs:20:13\n   |\n20 |    \
    \         result[i] += 1;\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is\
    \ not implemented for `&mut isize`\n   = help: the trait `SliceIndex<[T]>` is\
    \ implemented for `usize`\n   = note: required because of the requirements on\
    \ the impl of `Index<&mut isize>` for `Vec<_>`\n\nerror[E0277]: the size for values\
    \ of type `[isize]` cannot be known at compilation time\n  --> /tmp/tmp3pcloybh.rs:24:13\n\
    \   |\n24 |             diff[..] = guess.iter().cloned().collect();\n   |    \
    \         ^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `[isize]`\n   = note: the left-hand-side\
    \ of an assignment must have a statically known size\n\nerror[E0277]: the type\
    \ `[_]` cannot be indexed by `&mut isize`\n  --> /tmp/tmp3pcloybh.rs:28:17\n \
    \  |\n28 |                 result[i] += diff_sum;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `&mut isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&mut isize>` for `Vec<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3pcloybh.rs:30:31\n   |\n30 |              \
    \   if diff_sum < min_diff {\n   |                               ^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you c"
  stdout: ''
  timestamp: 1659976139
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        vec![0; guess.len()]\n\
    \    } else {\n        let mut correct = 0;\n        for j in 0..game.len() {\n\
    \            if game[j] == guess[j] {\n                correct += 1;\n       \
    \     }\n        }\n        vec![correct * guess[0] as isize; game.len()]\n  \
    \  }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4, 4, 4, 4]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpqtpkp0ir.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).enumerate().map(|(index,\
    \ (_, guess))| {\n        match index {\n            0 => guess,\n           \
    \ _ => abs(guess - game[index]),\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp9fkexq3j.rs:17:18\n\
    \   |\n17 |             _ => abs(guess - game[index]),\n   |                 \
    \ ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    assert_eq!(game.len(), guess.len())\n    let mut min_delta\
    \ = isize::MAX;\n    for i in game.iter_mut() {\n        match guess.iter().position(|j|\
    \ game[i] == j) {\n            Some(i) => *i = isize::MAX,\n            None =>\
    \ {\n                if *i < min_delta {\n                    min_delta = *i;\n\
    \                }\n            }\n        }\n    }\n    guess.iter().map(|j|\
    \ if *j == isize::MAX { return isize::MAX } else { j }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpf321udbc.rs:14:40\n\
    \   |\n14 |     assert_eq!(game.len(), guess.len())\n   |                    \
    \                    ^ help: add `;` here\n15 |     let mut min_delta = isize::MAX;\n\
    \   |     --- unexpected token\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&mut isize`\n  --> /tmp/tmpf321udbc.rs:17:41\n   |\n17 |         match guess.iter().position(|j|\
    \ game[i] == j) {\n   |                                         ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&mut isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&mut isize>` for `Vec<isize>`\n\nerror[E0614]:\
    \ type `usize` cannot be dereferenced\n  --> /tmp/tmpf321udbc.rs:18:24\n   |\n\
    18 |             Some(i) => *i = isize::MAX,\n   |                        ^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf321udbc.rs:26:26\n   |\n13 |\
    \ fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |      \
    \                                              ---------- expected because this\
    \ return type...\n...\n26 |     guess.iter().map(|j| if *j == isize::MAX { return\
    \ isize::MAX } else { j }).collect()\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------^^^^^^^^^^^^^\n\
    \   |                          |                            |\n   |          \
    \                |                            ...is found to be `isize` here\n\
    \   |                          expected `isize`, found `&isize`\n   |\n   = note:\
    \ to return `impl Trait`, all returned values must be of the same type\n   = note:\
    \ for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n\
    \   = help: you could instead create a new `enum` with a variant for each returned\
    \ type\nnote: return type inferred to be `isize` here\n  --> /tmp/tmpf321udbc.rs:26:55\n\
    \   |\n26 |     guess.iter().map(|j| if *j == isize::MAX { return isize::MAX "
  stdout: ''
  timestamp: 1659976139
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // your code here\n    return guess.iter().zip(game).map(|(a,\
    \ b)| (a - b).abs()).collect();\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // code here\n    let mut diff = 0;\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] { diff += 0; } else { diff += std::cmp::abs(guess[i]\
    \ - game[i]); }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::cmp`\n  --> /tmp/tmpb9h_qj4j.rs:17:72\n\
    \   |\n17 |         if game[i] == guess[i] { diff += 0; } else { diff += std::cmp::abs(guess[i]\
    \ - game[i]); }\n   |                                                        \
    \                ^^^ not found in `std::cmp`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb9h_qj4j.rs:19:5\n   |\n13 | fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \          ---------- expected `Vec<isize>` because of return type\n...\n19 |\
    \     diff\n   |     ^^^^ expected struct `Vec`, found integer\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `{integer}`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Game and\
    \ guess vectors must be the same length!\");\n    }\n    let mut total = 0;\n\
    \    for index in 0..game.len() {\n        if game[index] == guess[index] {\n\
    \            total += 1;\n        } else {\n            total += guess[index]\
    \ - game[index];\n        }\n    }\n    let result = vec![0 for _ in game.len()];\n\
    \    result.iter_mut().for_each(|&i| *i = abs(i - total));\n    result\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: no rules expected the token `for`\n  --> /tmp/tmpjc8grf3o.rs:25:25\n\
    \   |\n25 |     let result = vec![0 for _ in game.len()];\n   |              \
    \           ^^^ no rules expected this token in macro call\n\nerror[E0425]: cannot\
    \ find function `abs` in this scope\n  --> /tmp/tmpjc8grf3o.rs:26:42\n   |\n26\
    \ |     result.iter_mut().for_each(|&i| *i = abs(i - total));\n   |          \
    \                                ^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0..guess.len()];\n    let mut max\
    \ = std::cmp::max::<isize>(guess.len(), game.len());\n    let mut diff = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < max {\n        if game[j]\
    \ == guess[i] {\n            result[i] += 1;\n            j += 1;\n          \
    \  i += 1;\n        }\n        else if game[j] > guess[i] {\n            result[i]\
    \ += 1;\n            i += 1;\n        }\n        else {\n            result[i]\
    \ += 1;\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi9thvcue.rs:15:42\n   |\n\
    15 |     let mut max = std::cmp::max::<isize>(guess.len(), game.len());\n   |\
    \                                          ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |     let mut max = std::cmp::max::<isize>(guess.len().try_into().unwrap(),\
    \ game.len());\n   |                                                     ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi9thvcue.rs:15:55\n   |\n15 |\
    \     let mut max = std::cmp::max::<isize>(guess.len(), game.len());\n   |   \
    \                                                    ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n15 |     let mut max = std::cmp::max::<isize>(guess.len(),\
    \ game.len().try_into().unwrap());\n   |                                     \
    \                            ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpi9thvcue.rs:20:23\n   |\n20 |  \
    \       if game[j] == guess[i] {\n   |                       ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[std::ops::Range<usize>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpi9thvcue.rs:21:13\n   |\n21 |  \
    \           result[i] += 1;\n   |             ^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[std::ops::Range<usize>]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<std::ops::Range<usize>>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be in"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Invalid\
    \ length of vectors\")\n    }\n    let mut result = vec![0; game.len()];\n   \
    \ for &(i, _) in game.iter().zip(0..game.len()) {\n        result[i] = if game[i]\
    \ == guess[i] { 0 } else { abs(game[i] - guess[i]) };\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpscrlr1be.rs:19:57\n\
    \   |\n19 |         result[i] = if game[i] == guess[i] { 0 } else { abs(game[i]\
    \ - guess[i]) };\n   |                                                       \
    \  ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpscrlr1be.rs:18:9\n\
    \   |\n18 |     for &(i, _) in game.iter().zip(0..game.len()) {\n   |        \
    \ ^^^^^^^    ------------------------------ this expression has type `Option<(&isize,\
    \ usize)>`\n   |         |\n   |         expected tuple, found reference\n   |\n\
    \   = note:  expected tuple `(&isize, usize)`\n           found reference `&_`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score: Vec<isize> = game.clone();\n    let mut\
    \ guesser: Vec<isize> = guess.clone();\n    guesser[0] -= game[0];\n    guesser[1]\
    \ -= game[1];\n    guesser[2] -= game[2];\n    guesser[3] -= game[3];\n    guesser[4]\
    \ -= game[4];\n    guesser[5] -= game[5];\n    for i in 0..game.len() {\n    \
    \    score[i] -= guesser[i];\n    }\n    score\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 8, 4]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpkcrpwh88.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut scores = vec![game[0], game[0], game[0], game[0]];\n\
    \    for g in guess {\n        scores[2 * g + 0] -= g;\n        scores[2 * g +\
    \ 1] += g;\n    }\n    scores\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnve1n0bz.rs:16:9\n\
    \   |\n16 |         scores[2 * g + 0] -= g;\n   |         ^^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpnve1n0bz.rs:17:9\n   |\n17 |   \
    \      scores[2 * g + 1] += g;\n   |         ^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    for i in 0..game.len() {\n\
    \        result[i] = guess[i] - game[i];\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpna5q73po.rs:16:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut guessed: Vec<isize> = guess.clone();\n    let mut\
    \ result: Vec<isize> = game.clone();\n    let mut guessed_wrong: Vec<isize> =\
    \ guess.clone();\n    for i in 0..guess.len() {\n        if guessed_wrong[i] >\
    \ guess[i] {\n            result[i] = guess[i];\n            guessed_wrong[i]\
    \ -= guess[i];\n        }\n        if guessed_wrong[i] == 0 {\n            result[i]\
    \ = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5, 1]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpcjjvcglh.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Game and\
    \ guess vectors must be the same length!\");\n    }\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for index in 0..game.len() {\n        let score = game[index];\n\
    \        let guess = guess[index];\n        let result = if score == guess {\n\
    \            0\n        } else {\n            result.push(abs(guess - score));\n\
    \        };\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp4ua6g041.rs:24:25\n\
    \   |\n24 |             result.push(abs(guess - score));\n   |               \
    \          ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"The two\
    \ vectors must have the same length\");\n    }\n    let mut total = 0;\n    for\
    \ (n, g) in game.iter().zip(guess.iter()).enumerate().cloned() {\n        if g\
    \ == n {\n            total += 1;\n        }\n    }\n    let mut result: Vec<isize>\
    \ = game.iter().cloned().collect();\n    for i in 0..total {\n        result[i]\
    \ = match total {\n            0 => 0,\n            _ => abs(game[i] - guess[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3r00tfnm.rs:27:18\n\
    \   |\n27 |             _ => abs(game[i] - guess[i]),\n   |                  ^^^\
    \ not found in this scope\n\nerror[E0271]: type mismatch resolving `<Enumerate<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>> as Iterator>::Item == &_`\n    --> /tmp/tmp3r00tfnm.rs:18:61\n\
    \     |\n18   |     for (n, g) in game.iter().zip(guess.iter()).enumerate().cloned()\
    \ {\n     |                                                             ^^^^^^\
    \ expected reference, found tuple\n     |\n     = note: expected reference `&_`\n\
    \                    found tuple `(usize, (&isize, &isize))`\nnote: required by\
    \ a bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<Enumerate<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>> as Iterator>::Item == &_`\n  --> /tmp/tmp3r00tfnm.rs:18:19\n\
    \   |\n18 |     for (n, g) in game.iter().zip(guess.iter()).enumerate().cloned()\
    \ {\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected tuple, found reference\n   |\n   = note:  expected tuple `(usize, (&isize,\
    \ &isize))`\n           found reference `&_`\n   = note: required because of the\
    \ requirements on the impl of `Iterator` for `Cloned<Enumerate<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>>>`\n   = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `Cloned<Enumerate<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>>>`\n\nerror[E0271]: type mismatch resolving\
    \ `<Enumerate<Zip<std::slice::Iter<'_, isize>, std::slice::Iter<'_, isize>>> as\
    \ Iterator>::Item == &_`\n  --> /tmp/tmp3r00tfnm.rs:18:19\n   |\n18 |     for\
    \ (n, g) in game.iter().zip(guess.iter()).enumerate().cloned() {\n   |       \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple,\
    \ found reference\n   |\n   = note:  expected tuple `(usize, (&isize, &isize))`\n\
    \           found reference `&_`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<Enumerate<Zip<std::slice::Iter<'_, isi"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut dist: Vec<isize> = Vec::new();\n    let mut guess_idx\
    \ = 0;\n    let mut game_offset = 0;\n    let mut current_game_size = game.len();\n\
    \    let mut is_win = false;\n    let mut score = vec![0; game.len()];\n    while\
    \ guess_idx < guess.len() {\n        guess[guess_idx].unwrap();\n        score.iter_mut().for_each(|&x|\
    \ {\n            x.unwrap();\n            dist[game_offset] = x.unwrap();\n  \
    \          game_offset += 1;\n        });\n        if game_offset == current_game_size\
    \ {\n            guess_idx++;\n            game_offset = 0;\n            current_game_size++;\n\
    \        } else {\n            is_win = false;\n            let mut min_dist =\
    \ (*guess.iter_mut()).min_unwrap_or::<isize>(|| {\n                score [game_offset];\n\
    \            });\n            for item in &score[game_offset..] {\n          \
    \      if item == min_dist {\n                    is_win = true;\n           \
    \         break;\n                }\n            }\n            if is_win {\n\
    \                guess_idx++;\n                game_offset = 0;\n            \
    \    current_game_size++;\n            } else {\n                score[guess_idx]\
    \ = -min_dist;\n            }\n        }\n    }\n    dist\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpfiwghkm8.rs:28:22\n\
    \   |\n28 |             guess_idx++;\n   |                      ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n28 |             { let\
    \ tmp = guess_idx; guess_idx += 1; tmp };\n   |             +++++++++++      \
    \    ~~~~~~~~~~~~~~~~~~~~~~~\n28 -             guess_idx++;\n28 +            \
    \ guess_idx += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  -->\
    \ /tmp/tmpfiwghkm8.rs:43:26\n   |\n43 |                 guess_idx++;\n   |   \
    \                       ^^ not a valid postfix operator\n   |\nhelp: use `+= 1`\
    \ instead\n   |\n43 |                 { let tmp = guess_idx; guess_idx += 1; tmp\
    \ };\n   |                 +++++++++++          ~~~~~~~~~~~~~~~~~~~~~~~\n43 -\
    \                 guess_idx++;\n43 +                 guess_idx += 1;\n   | \n\n\
    error[E0599]: no method named `unwrap` found for type `isize` in the current scope\n\
    \  --> /tmp/tmpfiwghkm8.rs:21:26\n   |\n21 |         guess[guess_idx].unwrap();\n\
    \   |                          ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfiwghkm8.rs:22:36\n   |\n22 |         score.iter_mut().for_each(|&x|\
    \ {\n   |                                    ^--\n   |                       \
    \             ||\n   |                                    |expected due to this\n\
    \   |                                    types differ in mutability\n   |    \
    \                                help: did you mean `x`: `&&mut {integer}`\n \
    \  |\n   = note: expected mutable reference `&mut {integer}`\n               \
    \       found reference `&_`\n\nerror[E0614]: type `std::slice::IterMut<'_, isize>`\
    \ cannot be dereferenced\n  --> /tmp/tmpfiwghkm8.rs:33:32\n   |\n33 |        \
    \     let mut min_dist = (*guess.iter_mut()).min_unwrap_or::<isize>(|| {\n   |\
    \                                ^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter())\n        .map(|(game, guess)|\
    \ {\n            if guess == 0 {\n                0\n            } else if game\
    \ == 0 {\n                std::cmp::abs(guess - game)\n            } else {\n\
    \                std::cmp::max(guess - game, 0)\n            }\n        })\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in module `std::cmp`\n  --> /tmp/tmp0q2_qk_m.rs:19:27\n\
    \   |\n19 |                 std::cmp::abs(guess - game)\n   |                \
    \           ^^^ not found in `std::cmp`\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmp0q2_qk_m.rs:16:22\n   |\n16 |             if\
    \ guess == 0 {\n   |                      ^^ no implementation for `&isize ==\
    \ {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmp0q2_qk_m.rs:18:28\n   |\n18 |             } else if game == 0 {\n\
    \   |                            ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let game_size = game.len();\n    let guess_size = guess.len();\n\
    \    let mut compare = vec![0; guess_size];\n    for i in 0..game_size {\n   \
    \     if game[i] != guess[i] {\n            compare[i] -= game[i] - guess[i];\n\
    \        }\n    }\n    compare\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmps4pe16xr.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_diff = isize::max_value();\n    let mut min_diff\
    \ = isize::max_value();\n    let mut max_diff = isize::min_value();\n    let mut\
    \ min_score = isize::max_value();\n    let mut max_score = isize::min_value();\n\
    \    let mut min_score = isize::max_value();\n    for pair in game.iter().zip(guess.iter())\
    \ {\n        let score = (pair.0.unwrap() - pair.1.unwrap()) as isize;\n     \
    \   min_score = min_score.min(score);\n        max_score = max_score.max(score);\n\
    \        min_diff = min_diff.min(max_score.sub(min_score));\n        max_diff\
    \ = max_diff.max(max_score.sub(min_score));\n    }\n    let mut diff_vec: Vec<isize>\
    \ = vec![max_diff.min(min_diff), max_diff.min(min_diff)];\n    for pair in game.iter().zip(guess.iter())\
    \ {\n        let score = (pair.0.unwrap() - pair.1.unwrap()) as isize;\n     \
    \   diff_vec.push(diff_vec[0] - (score as isize));\n    }\n    diff_vec\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmplatwm5we.rs:21:29\n   |\n21 |         let score\
    \ = (pair.0.unwrap() - pair.1.unwrap()) as isize;\n   |                      \
    \       ^^^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `unwrap`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmplatwm5we.rs:21:47\n\
    \   |\n21 |         let score = (pair.0.unwrap() - pair.1.unwrap()) as isize;\n\
    \   |                                               ^^^^^^ method not found in\
    \ `&isize`\n\nerror[E0599]: no method named `sub` found for type `isize` in the\
    \ current scope\n   --> /tmp/tmplatwm5we.rs:24:43\n    |\n24  |         min_diff\
    \ = min_diff.min(max_score.sub(min_score));\n    |                           \
    \                ^^^ method not found in `isize`\n    |\n    = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::ops::Sub;\n    |\n\nerror[E0599]: no method named `sub` found for type\
    \ `isize` in the current scope\n   --> /tmp/tmplatwm5we.rs:25:43\n    |\n25  |\
    \         max_diff = max_diff.max(max_score.sub(min_score));\n    |          \
    \                                 ^^^ method not found in `isize`\n    |\n   \
    \ = help: items from traits can only be used if the trait is in scope\nhelp: the\
    \ following trait is implemented but not in scope; perhaps add a `use` for it:\n\
    \    |\n1   | use std::ops::Sub;\n    |\n\nerror[E0599]: no method named `unwrap`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmplatwm5we.rs:29:29\n\
    \   |\n29 |         let score = (pair.0.unwrap() - pair.1.unwrap()) as isize;\n\
    \   |                             ^^^^^^ method not found in `&isize`\n\nerror[E0599]:\
    \ no method named `unwrap` found for reference `&isize` in the current scope\n\
    \  --> /tmp/tmplatwm5we.rs:29:47\n   |\n29 |         let score = (pair.0.unwrap()\
    \ - pair.1.unwrap()) as isize;\n   |                                         \
    \      ^^^^^^ method not found in `&isize`\n\nerror: abo"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).filter(|g| g.1.is_some()).map(|g|\
    \ {\n        let g = g.1.unwrap();\n        let score = g.0;\n        let guess\
    \ = g.2;\n        let diff = abs(guess - score);\n        if diff == 0 {\n   \
    \         0\n        } else {\n            diff\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp0zl5y0q1.rs:18:20\n\
    \   |\n18 |         let diff = abs(guess - score);\n   |                    ^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `is_some` found for\
    \ reference `&isize` in the current scope\n  --> /tmp/tmp0zl5y0q1.rs:14:50\n \
    \  |\n14 |     game.iter().zip(guess.iter()).filter(|g| g.1.is_some()).map(|g|\
    \ {\n   |                                                  ^^^^^^^ method not\
    \ found in `&isize`\n\nerror[E0599]: no method named `unwrap` found for reference\
    \ `&isize` in the current scope\n  --> /tmp/tmp0zl5y0q1.rs:15:21\n   |\n15 | \
    \        let g = g.1.unwrap();\n   |                     ^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter()\n        .zip(guess.iter())\n        .map(|(a,\
    \ b)| if a == b { 0 } else { abs(b - a) })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp916jq640.rs:16:46\n\
    \   |\n16 |         .map(|(a, b)| if a == b { 0 } else { abs(b - a) })\n   | \
    \                                             ^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_guess = vec![0; game.len()];\n    let mut max_guess\
    \ = vec![0; game.len()];\n    for i in 0..game.len() {\n        if game[i] > guess[i]\
    \ {\n            max_guess[i] = max_guess[i] + 1;\n        } else if game[i] <\
    \ guess[i] {\n            min_guess[i] = min_guess[i] + 1;\n        }\n    }\n\
    \    vec![min_guess; game.len() + max_guess.len()];\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp9t8vh31.rs:13:52\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let guessed_correctly_by_game = game.iter().filter(|&x|\
    \ x == 0).count() == game.len();\n    let correct_guess = guess.iter().filter(|&x|\
    \ x == 0).count() == guess.len();\n    let result = guessed_correctly_by_game\
    \ || correct_guess;\n    \n    if !result {\n        let diff = guess.iter().zip(game).fold(0,\
    \ |a, b| a.checked_sub(&b).unwrap());\n        vec![diff]\n    } else {\n    \
    \    vec![0]\n    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpeek6yelv.rs:14:63\n\
    \   |\n14 |     let guessed_correctly_by_game = game.iter().filter(|&x| x == 0).count()\
    \ == game.len();\n   |                                                       \
    \        ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpeek6yelv.rs:15:52\n\
    \   |\n15 |     let correct_guess = guess.iter().filter(|&x| x == 0).count() ==\
    \ guess.len();\n   |                                                    ^^ no\
    \ implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0689]: can't call method `checked_sub`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmpeek6yelv.rs:19:60\n   |\n\
    19 |         let diff = guess.iter().zip(game).fold(0, |a, b| a.checked_sub(&b).unwrap());\n\
    \   |                                                    -       ^^^^^^^^^^^\n\
    \   |                                                    |\n   |             \
    \                                       you must specify a type for this binding,\
    \ like `i32`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0689.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diff = guess.len();\n    for mut i in game.iter_mut()\
    \ {\n        if let Some(i) = i {\n            if diff-- == 0 {\n            \
    \    break;\n            }\n            if game[i] != guess[i] {\n           \
    \     diff = -diff;\n                *i = 0;\n                break;\n       \
    \     }\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `==`\n  --> /tmp/tmp545qs70y.rs:17:23\n\
    \   |\n17 |             if diff-- == 0 {\n   |                       ^^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp545qs70y.rs:16:16\n\
    \   |\n16 |         if let Some(i) = i {\n   |                ^^^^^^^   - this\
    \ expression has type `&mut isize`\n   |                |\n   |              \
    \  expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp545qs70y.rs:27:5\n   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n27 |     diff\n   |     ^^^^\
    \ expected struct `Vec`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret: Vec<isize> = game.clone();\n    for i in 0..game.len()\
    \ {\n        if game[i] > guess[i] {\n            ret[i] = 0\n        } else {\n\
    \            ret[i] = abs(game[i] - guess[i])\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpnn_uaorw.rs:19:22\n\
    \   |\n19 |             ret[i] = abs(game[i] - guess[i])\n   |               \
    \       ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(g,g)| (g as isize)\
    \ - (g as isize)).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `g` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpzr4lbm52.rs:14:43\n   |\n14 |     game.iter().zip(guess.iter()).map(|(g,g)|\
    \ (g as isize) - (g as isize)).collect::<Vec<_>>()\n   |                     \
    \                      ^ used as parameter more than once\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmpzr4lbm52.rs:14:47\n   |\n14 |\
    \     game.iter().zip(guess.iter()).map(|(g,g)| (g as isize) - (g as isize)).collect::<Vec<_>>()\n\
    \   |                                               ^-^^^^^^^^^^\n   |       \
    \                                        ||\n   |                            \
    \                   |help: dereference the expression: `*g`\n   |            \
    \                                   cannot cast `&isize` as `isize`\n\nerror[E0606]:\
    \ casting `&isize` as `isize` is invalid\n  --> /tmp/tmpzr4lbm52.rs:14:62\n  \
    \ |\n14 |     game.iter().zip(guess.iter()).map(|(g,g)| (g as isize) - (g as isize)).collect::<Vec<_>>()\n\
    \   |                                                              ^-^^^^^^^^^^\n\
    \   |                                                              ||\n   |  \
    \                                                            |help: dereference\
    \ the expression: `*g`\n   |                                                 \
    \             cannot cast `&isize` as `isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0415, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0415`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score_delta = Vec::with_capacity(guess.len());\n\
    \    for i in 0..guess.len() {\n        let delta_score = match game[game[i]]\
    \ - guess[i] {\n            -1 => 1,\n            1 => -1,\n            _ => 0,\n\
    \        };\n        score_delta.push(*delta_score);\n    }\n    score_delta\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4nzgc7i3.rs:16:33\n\
    \   |\n16 |         let delta_score = match game[game[i]] - guess[i] {\n   | \
    \                                ^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0614]: type `{integer}` cannot be\
    \ dereferenced\n  --> /tmp/tmp4nzgc7i3.rs:21:26\n   |\n21 |         score_delta.push(*delta_score);\n\
    \   |                          ^^^^^^^^^^^^\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = game;\n    for (i, s) in game.iter_mut().zip(guess.iter_mut())\
    \ {\n        if i == 0 || s != result[i-1] {\n            result[i] = s - result[i-1];\n\
    \        } else {\n            result[i] = 0\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&mut isize` with `{integer}`\n  --> /tmp/tmpxysnxibt.rs:16:14\n\
    \   |\n16 |         if i == 0 || s != result[i-1] {\n   |              ^^ no implementation\
    \ for `&mut isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&mut isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0369]: cannot subtract `{integer}`\
    \ from `&mut isize`\n  --> /tmp/tmpxysnxibt.rs:16:35\n   |\n16 |         if i\
    \ == 0 || s != result[i-1] {\n   |                                  -^- {integer}\n\
    \   |                                  |\n   |                               \
    \   &mut isize\n   |\nhelp: `-` can be used on `isize`, you can dereference `i`\n\
    \   |\n16 |         if i == 0 || s != result[*i-1] {\n   |                   \
    \               +\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&mut\
    \ isize`\n  --> /tmp/tmpxysnxibt.rs:17:13\n   |\n17 |             result[i] =\
    \ s - result[i-1];\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&mut isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&mut isize>` for `Vec<isize>`\n\nerror[E0369]: cannot subtract `{integer}`\
    \ from `&mut isize`\n  --> /tmp/tmpxysnxibt.rs:17:37\n   |\n17 |             result[i]\
    \ = s - result[i-1];\n   |                                    -^- {integer}\n\
    \   |                                    |\n   |                             \
    \       &mut isize\n   |\nhelp: `-` can be used on `isize`, you can dereference\
    \ `i`\n   |\n17 |             result[i] = s - result[*i-1];\n   |            \
    \                        +\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&mut isize`\n  --> /tmp/tmpxysnxibt.rs:19:13\n   |\n19 |             result[i]\
    \ = 0\n   |            "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut difference = vec![0; game.len()];\n    for (i,\
    \ &v) in game.iter().zip(guess.iter()).enumerate().take(game.len()) {\n      \
    \  if v == 0 {\n            difference[i] = 0;\n        } else {\n           \
    \ difference[i] = abs(v - guess[i]);\n        }\n    }\n    difference\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp2qyyuxvz.rs:19:29\n\
    \   |\n19 |             difference[i] = abs(v - guess[i]);\n   |             \
    \                ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2qyyuxvz.rs:15:13\n   |\n15 |     for (i, &v) in game.iter().zip(guess.iter()).enumerate().take(game.len())\
    \ {\n   |             ^^     ----------------------------------------------------------\
    \ this expression has type `Option<(usize, (&isize, &isize))>`\n   |         \
    \    |\n   |             expected tuple, found reference\n   |             help:\
    \ you can probably remove the explicit borrow: `v`\n   |\n   = note:  expected\
    \ tuple `(&isize, &isize)`\n           found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut dist = vec![0; game.len()];\n    let mut min_dist\
    \ = vec![0; game.len()];\n\n    for i in 0..game.len() {\n        let score =\
    \ -(game[i] - guess[i]);\n        // TODO: Find a way to optimize this line by\
    \ not calculating it twice\n        min_dist[i] = if score < min_dist[i] {\n \
    \           min_dist[i] = score\n        } else {\n            min_dist[i]\n \
    \       };\n        dist[i] = if score == min_dist[i] {\n            0\n     \
    \   } else {\n            abs(score - min_dist[i])\n        };\n    }\n    dist\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp0u65p45i.rs:28:13\n\
    \   |\n28 |             abs(score - min_dist[i])\n   |             ^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0u65p45i.rs:21:13\n\
    \   |\n21 |             min_dist[i] = score\n   |             ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `()`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diffs = guess[..].iter().map(|&guess| match game.iter().position(|&score|\
    \ guess == score {\n        None => 0,\n        Some(_) => guess - score,\n  \
    \  }).collect::<Vec<_>>();\n    diffs.insert(0, 0);\n    diffs\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `,` or `}`, found `=>`\n  --> /tmp/tmpq5h5ly26.rs:15:14\n\
    \   |\n14 |     let mut diffs = guess[..].iter().map(|&guess| match game.iter().position(|&score|\
    \ guess == score {\n   |                                                     \
    \                                           ----- while parsing this struct\n\
    15 |         None => 0,\n   |              ^^ expected one of `,` or `}`\n\nerror:\
    \ expected one of `,` or `}`, found `(`\n  --> /tmp/tmpq5h5ly26.rs:16:13\n   |\n\
    14 |     let mut diffs = guess[..].iter().map(|&guess| match game.iter().position(|&score|\
    \ guess == score {\n   |                                                     \
    \                                           ----- while parsing this struct\n\
    15 |         None => 0,\n16 |         Some(_) => guess - score,\n   |        \
    \     ^ expected one of `,` or `}`\n\nerror: mismatched closing delimiter: `}`\n\
    \  --> /tmp/tmpq5h5ly26.rs:14:41\n   |\n13 | fn compare(game: Vec<isize>, guess:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                          \
    \                     - closing delimiter possibly meant for this\n14 |     let\
    \ mut diffs = guess[..].iter().map(|&guess| match game.iter().position(|&score|\
    \ guess == score {\n   |                                         ^ unclosed delimiter\n\
    ...\n20 | }\n   | ^ mismatched closing delimiter\n\nerror: expected one of `.`,\
    \ `?`, `{`, or an operator, found `;`\n  --> /tmp/tmpq5h5ly26.rs:17:27\n   |\n\
    14 |     let mut diffs = guess[..].iter().map(|&guess| match game.iter().position(|&score|\
    \ guess == score {\n   |                                                   -----\n\
    \   |                                                   |\n   |              \
    \                                     while parsing this `match` expression\n\
    \   |                                                   help: try removing this\
    \ `match`\n...\n17 |     }).collect::<Vec<_>>();\n   |                       \
    \    ^ expected one of `.`, `?`, `{`, or an operator\n\nerror: aborting due to\
    \ 4 previous errors\n\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    let mut i =\
    \ 0usize;\n\n    while i < (game.len()) {\n        let mut found = false;\n\n\
    \        if game[i] > guess[i] {\n            result[i] += 1;\n            i +=\
    \ 1;\n        } else if game[i] < guess[i] {\n            result[i] += -1;\n \
    \           i += 1;\n        } else {\n            result[i] = 0;\n          \
    \  i += 1;\n        }\n\n        if i == game.len() {\n            i += 1;\n \
    \           found = true;\n        }\n\n        while !found {\n            if\
    \ game[i] != guess[i] {\n                result[i] += 1;\n                i +=\
    \ 1;\n            } else {\n                i += 1;\n            }\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 6 but the
    index is 6'', /tmp/tmpc4ucq5e5.rs:37:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(game, guess)| {\n \
    \       if game == guess {\n            0\n        } else if game < guess {\n\
    \            game - guess\n        } else {\n            guess - game\n      \
    \  }\n    }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp9pd760ue.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ans = Vec::with_capacity(guess.len());\n    let\
    \ mut game = game.clone();\n    for &s in guess {\n        for &g in &game {\n\
    \            ans.push(abs(s - g));\n        }\n    }\n    return ans\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp6j4az67z.rs:18:22\n\
    \   |\n18 |             ans.push(abs(s - g));\n   |                      ^^^ help:\
    \ a local variable with a similar name exists: `ans`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6j4az67z.rs:16:9\n   |\n16 |     for &s in guess {\n  \
    \ |         ^^    ----- this expression has type `Option<isize>`\n   |       \
    \  |\n   |         expected `isize`, found reference\n   |         help: you can\
    \ probably remove the explicit borrow: `s`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // Your code here\n    let mut dists = guess.len();\n \
    \   let mut diff = 0;\n    for (x,y) in game.iter().zip(guess.iter()) {\n    \
    \    if x == y {\n            diff = 0;\n        } else {\n            diff =\
    \ x ^ y;\n        }\n        dists -= 1;\n        if dists == 0 {\n          \
    \  break;\n        }\n    }\n    vec![diff, dists]\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpji2ggq98.rs:28:16\n   |\n\
    28 |     vec![diff, dists]\n   |                ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n28 |     vec![diff, dists.try_into().unwrap()]\n\
    \   |                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        return vec![0;\
    \ game.len()];\n    }\n\n    let mut best = isize::MAX;\n\n    for _ in 0..game.len()\
    \ {\n        for _ in 0..guess.len() {\n            if guess > game {\n      \
    \          return vec![0; game.len()];\n            }\n        }\n\n        best\
    \ = match best {\n            score::Max => score::Max,\n            score::MIN\
    \ => score::MIN,\n        };\n\n        if best == score::MIN { break; }\n   \
    \ }\n\n    vec![best - game]\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `score`\n\
    \  --> /tmp/tmps0fqralj.rs:28:13\n   |\n28 |             score::Max => score::Max,\n\
    \   |             ^^^^^ use of undeclared crate or module `score`\n   |\nhelp:\
    \ there is a crate or module with a similar name\n   |\n28 |             core::Max\
    \ => score::Max,\n   |             ~~~~\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared crate or module `score`\n  --> /tmp/tmps0fqralj.rs:28:27\n   |\n\
    28 |             score::Max => score::Max,\n   |                           ^^^^^\
    \ use of undeclared crate or module `score`\n   |\nhelp: there is a crate or module\
    \ with a similar name\n   |\n28 |             score::Max => core::Max,\n   | \
    \                          ~~~~\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ crate or module `score`\n  --> /tmp/tmps0fqralj.rs:29:13\n   |\n29 |       \
    \      score::MIN => score::MIN,\n   |             ^^^^^ use of undeclared crate\
    \ or module `score`\n   |\nhelp: there is a crate or module with a similar name\n\
    \   |\n29 |             core::MIN => score::MIN,\n   |             ~~~~\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `score`\n  --> /tmp/tmps0fqralj.rs:29:27\n\
    \   |\n29 |             score::MIN => score::MIN,\n   |                      \
    \     ^^^^^ use of undeclared crate or module `score`\n   |\nhelp: there is a\
    \ crate or module with a similar name\n   |\n29 |             score::MIN => core::MIN,\n\
    \   |                           ~~~~\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared crate or module `score`\n  --> /tmp/tmps0fqralj.rs:32:20\n   |\n\
    32 |         if best == score::MIN { break; }\n   |                    ^^^^^ use\
    \ of undeclared crate or module `score`\n   |\nhelp: there is a crate or module\
    \ with a similar name\n   |\n32 |         if best == core::MIN { break; }\n  \
    \ |                    ~~~~\n\nerror[E0277]: cannot subtract `Vec<isize>` from\
    \ `isize`\n  --> /tmp/tmps0fqralj.rs:35:15\n   |\n35 |     vec![best - game]\n\
    \   |               ^ no implementation for `isize - Vec<isize>`\n   |\n   = help:\
    \ the trait `Sub<Vec<isize>>` is n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diffs = Vec::<isize>::new();\n    let mut scores\
    \ = Vec::<isize>::new();\n\n    for i in 0..game.len() {\n        if guess[i]\
    \ != game[i] {\n            diffs.push((guess[i] - game[i]));\n        }\n\n \
    \       scores.push_back(abs(guess[i] - game[i]));\n    }\n\n    diffs.into_iter().zip(0..scores.len()).map(|(a,\
    \ b)| {\n        if a == b {\n            a\n        } else {\n            a +\
    \ b\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpu3q55y3g.rs:22:26\n\
    \   |\n22 |         scores.push_back(abs(guess[i] - game[i]));\n   |         \
    \                 ^^^ not found in this scope\n\nwarning: unnecessary parentheses\
    \ around method argument\n  --> /tmp/tmpu3q55y3g.rs:19:24\n   |\n19 |        \
    \     diffs.push((guess[i] - game[i]));\n   |                        ^       \
    \           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n19 -             diffs.push((guess[i] - game[i]));\n\
    19 +             diffs.push(guess[i] - game[i]);\n   | \n\nerror[E0599]: no method\
    \ named `push_back` found for struct `Vec<isize>` in the current scope\n  -->\
    \ /tmp/tmpu3q55y3g.rs:22:16\n   |\n22 |         scores.push_back(abs(guess[i]\
    \ - game[i]));\n   |                ^^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpu3q55y3g.rs:26:17\n   |\n26 |\
    \         if a == b {\n   |                 ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n26 |         if a == b.try_into().unwrap() {\n   |\
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpu3q55y3g.rs:29:17\n   |\n29 |             a + b\n   |              \
    \   ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n\
    \  --> /tmp/tmpu3q55y3g.rs:29:15\n   |\n29 |             a + b\n   |         \
    \      ^ no implementation for `isize + usize`\n   |\n   = help: the trait `Add<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 5 previous errors; 1 warning\
    \ emitted\n\nSome errors have detailed explanations: E0277,"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut guesses = guess[..].iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut scores = game[..].iter().cloned().collect::<Vec<isize>>();\n\n  \
    \  let mut min_score = scores[0];\n    let mut max_score = scores[0];\n    for\
    \ i in 0..scores.len() {\n        if scores[i] == 0 {\n            min_score =\
    \ i as isize;\n            break;\n        }\n    }\n    for i in 0..scores.len()\
    \ {\n        if scores[i] == 0 {\n            max_score = i as isize;\n      \
    \      break;\n        }\n    }\n    for i in 0..scores.len() {\n        if scores[i]\
    \ == 0 {\n            let guess = guesses[i];\n            if guess == i {\n \
    \               continue;\n            }\n            scores[i] = guesses[i] -\
    \ guess;\n        }\n    }\n    let mut max_diff = max_score - min_score;\n  \
    \  for i in 0..scores.len() {\n        if scores[i] > max_diff {\n           \
    \ max_diff = scores[i];\n        }\n    }\n    for i in 0..scores.len() {\n  \
    \      if scores[i] < -max_diff {\n            max_diff = -scores[i];\n      \
    \  }\n    }\n    scores.iter().map(|x| x).collect()\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp723_w0nf.rs:34:25\n   |\n\
    34 |             if guess == i {\n   |                         ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n34 |             if guess == i.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmp723_w0nf.rs:51:30\n     |\n51   |     scores.iter().map(|x|\
    \ x).collect()\n     |                              ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = 0\n    for i in game.iter().cloned() {\n\
    \        if guess[i] < game[i] {\n            score += abs(guess[i] - game[i])\n\
    \        } else {\n            score += abs(game[i] - guess[i])\n        }\n \
    \   }\n    Vec::new()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpt9o01b1e.rs:14:22\n\
    \   |\n14 |     let mut score = 0\n   |                      ^ help: add `;` here\n\
    15 |     for i in game.iter().cloned() {\n   |     --- unexpected token\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmpt9o01b1e.rs:17:22\n\
    \   |\n17 |             score += abs(guess[i] - game[i])\n   |               \
    \       ^^^ not found in this scope\n\nerror[E0425]: cannot find function `abs`\
    \ in this scope\n  --> /tmp/tmpt9o01b1e.rs:19:22\n   |\n19 |             score\
    \ += abs(game[i] - guess[i])\n   |                      ^^^ not found in this\
    \ scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpt9o01b1e.rs:16:12\n   |\n16 |         if guess[i] < game[i] {\n   |\
    \            ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt9o01b1e.rs:16:23\n\
    \   |\n16 |         if guess[i] < game[i] {\n   |                       ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt9o01b1e.rs:17:26\n\
    \   |\n17 |             score += abs(guess[i] - game[i])\n   |               \
    \           ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game\n        .iter()\n        .zip(guess.iter())\n   \
    \     .filter(|(g, g)| g == g)\n        .map(|(g, g)| (g - g).abs())\n       \
    \ .collect()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `g` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmp54qlz0g1.rs:17:22\n   |\n17 |         .filter(|(g, g)| g\
    \ == g)\n   |                      ^ used as parameter more than once\n\nerror[E0415]:\
    \ identifier `g` is bound more than once in this parameter list\n  --> /tmp/tmp54qlz0g1.rs:18:19\n\
    \   |\n18 |         .map(|(g, g)| (g - g).abs())\n   |                   ^ used\
    \ as parameter more than once\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0415`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(g, w)| {\n        let\
    \ mut result = g;\n        if w != g {\n            result = g - w;\n        }\n\
    \        result\n    }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpra5w89gm.rs:17:22\n   |\n\
    15 |         let mut result = g;\n   |                          - expected due\
    \ to this value\n16 |         if w != g {\n17 |             result = g - w;\n\
    \   |                      ^^^^^\n   |                      |\n   |          \
    \            expected `&isize`, found `isize`\n   |                      help:\
    \ consider borrowing here: `&(g - w)`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpra5w89gm.rs:20:8\n\
    \     |\n20   |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help:\
    \ the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n\n    if game.len()\
    \ < guess.len() {\n        // We guessed too little game\n        result.copy_from_slice(game.iter().map(|&x|\
    \ {\n            match guess.iter().position(|&y| x == y) {\n                None\
    \ => 0,\n                Some(index) => abs(x - index),\n            }\n     \
    \   }));\n    } else {\n        // We guessed too much game\n        result.copy_from_slice(guess.iter().map(|&x|\
    \ {\n            match game.iter().position(|&y| x == y) {\n                None\
    \ => 0,\n                Some(index) => abs(x - index),\n            }\n     \
    \   }));\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3ovgw30j.rs:21:32\n\
    \   |\n21 |                 Some(index) => abs(x - index),\n   |             \
    \                   ^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `abs` in this scope\n  --> /tmp/tmp3ovgw30j.rs:29:32\n   |\n29 |           \
    \      Some(index) => abs(x - index),\n   |                                ^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ovgw30j.rs:21:40\n\
    \   |\n21 |                 Some(index) => abs(x - index),\n   |             \
    \                           ^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract `usize` from `isize`\n  --> /tmp/tmp3ovgw30j.rs:21:36\n   |\n\
    21 |                 Some(index) => abs(x - index),\n   |                    \
    \            --- ^^^^^^^^^ no implementation for `isize - usize`\n   |       \
    \                         |\n   |                                required by a\
    \ bound introduced by this call\n   |\n   = help: the trait `Sub<usize>` is not\
    \ implemented for `isize`\n   = help: the following other types implement trait\
    \ `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n\
    \             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n  \
    \           <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n      \
    \       <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n        \
    \   and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ovgw30j.rs:18:32\n\
    \   |\n18 |           result.copy_from_slice(game.iter().map(|&x| {\n   |  ________________________________^\n\
    19 | |             match guess.iter().position(|&y| x == y) {\n20 | |        \
    \         None => 0,\n21 | |                 Some(index) => abs(x - index),\n\
    22 | |             }\n23 | |         }));\n   | |__________^ expected `&[{integer}]`,\
    \ found struct `Map`\n   |\n   = note: expected reference `&[{integer}]`\n   \
    \              found struct `Map<std::slice::Iter<'_, isize>, _>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3ovgw30j.rs:29:40\n   |\n29 |              \
    \   Some(i"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0..isize::MAX];\n    let mut max_score\
    \ = isize::MAX;\n    for i in 0..game.len() {\n        for j in 0..guess.len()\
    \ {\n            if game[i] < guess[j] {\n                result[i] = max_score;\n\
    \                break;\n            }\n            if game[i] > guess[j] {\n\
    \                result[i] = 0;\n            }\n        }\n        max_score =\
    \ isize::MAX;\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjosacsy.rs:19:29\n   |\n\
    19 |                 result[i] = max_score;\n   |                 ---------  \
    \ ^^^^^^^^^ expected struct `std::ops::Range`, found `isize`\n   |           \
    \      |\n   |                 expected due to the type of this binding\n   |\n\
    \   = note: expected struct `std::ops::Range<isize>`\n                found type\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwjosacsy.rs:23:29\n\
    \   |\n23 |                 result[i] = 0;\n   |                 ---------   ^\
    \ expected struct `std::ops::Range`, found integer\n   |                 |\n \
    \  |                 expected due to the type of this binding\n   |\n   = note:\
    \ expected struct `std::ops::Range<isize>`\n                found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwjosacsy.rs:28:5\n   |\n13 | fn\
    \ compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                           ---------- expected `Vec<isize>` because\
    \ of return type\n...\n28 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ struct `std::ops::Range`\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \            found struct `Vec<std::ops::Range<isize>>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // fill this in\n    // return vec![]\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvwceun__.rs:13:52\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Game and\
    \ Guess vectors must have equal lengths\");\n    }\n    let mut score = 0isize;\n\
    \    for i in 0..game.len() {\n        if game[i] == guess[i] {\n            score\
    \ += 0isize;\n        } else {\n            score += std::cmp::min(std::abs(i\
    \ - game.len() - i + 1), std::cmp::min(game[i], guess[i]));\n        }\n    }\n\
    \    vec![score]\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in crate `std`\n  --> /tmp/tmp11s_h1xy.rs:22:41\n\
    \   |\n22 |             score += std::cmp::min(std::abs(i - game.len() - i + 1),\
    \ std::cmp::min(game[i], guess[i]));\n   |                                   \
    \      ^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    \n    let mut result = vec![0, game[0] as isize];\n   \
    \ let mut count = 0;\n    \n    for index in 0..game.len(){\n        match index{\n\
    \            0 => { \n                if game[index] == guess[0] { \n        \
    \            result[0] += 1;\n                } else {\n                    result[0]\
    \ += game[index] - guess[0];\n                }\n            },\n            1\
    \ => { \n                if game[index] == guess[1] { \n                    result[1]\
    \ += 1;\n                } else {\n                    result[1] += game[index]\
    \ - guess[1];\n                }\n            },\n            2 => { \n      \
    \          if game[index] == guess[2] { \n                    result[2] += 1;\n\
    \                } else {\n                    result[2] += game[index] - guess[2];\n\
    \                }\n            },\n            3 => { \n                if game[index]\
    \ == guess[3] { \n                    result[3] += 1;\n                } else\
    \ {\n                    result[3] += game[index] - guess[3];\n              \
    \  }\n            },\n            4 => { \n                if game[index] == guess[4]\
    \ { \n                    result[4] += 1;\n                } else {\n        \
    \            result[4] += game[index] - guess[4];\n                }\n       \
    \     }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0004]: non-exhaustive patterns: `_` not covered\n  --> /tmp/tmpgmv2qg5f.rs:19:15\n\
    \   |\n19 |         match index{\n   |               ^^^^^ pattern `_` not covered\n\
    \   |\n   = note: the matched value is of type `usize`\n   = note: `usize` does\
    \ not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n\
    help: ensure that all possible cases are being handled by adding a match arm with\
    \ a wildcard pattern or an explicit pattern as shown\n   |\n54 ~             }\n\
    55 +             _ => todo!()\n   |\n\nwarning: unused variable: `count`\n  -->\
    \ /tmp/tmpgmv2qg5f.rs:16:13\n   |\n16 |     let mut count = 0;\n   |         \
    \    ^^^^^ help: if this is intentional, prefix it with an underscore: `_count`\n\
    \   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning: variable\
    \ does not need to be mutable\n  --> /tmp/tmpgmv2qg5f.rs:16:9\n   |\n16 |    \
    \ let mut count = 0;\n   |         ----^^^^^\n   |         |\n   |         help:\
    \ remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0004`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ans = Vec::new();\n    let size = game.len();\n\
    \    let mut score = 0;\n    for i in 0..size {\n        if game[i] == guess[i]\
    \ { score += 1 }\n        else { ans.push(i); score += abs(game[i] - guess[i])\
    \ }\n    }\n    ans.push(score)\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpd17oyw3t.rs:19:38\n\
    \   |\n19 |         else { ans.push(i); score += abs(game[i] - guess[i]) }\n \
    \  |                                      ^^^ help: a local variable with a similar\
    \ name exists: `ans`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd17oyw3t.rs:21:5\n\
    \   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     ans.push(score)\n   |     ^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer = 0;\n    let mut score = 0;\n    for n\
    \ in 0..game.len() {\n        for g in guess.iter() {\n            if game[n]\
    \ == g {\n                score += 1;\n            } else {\n                answer++;\n\
    \            }\n        }\n    }\n    answer += game.len() - answer;\n    let\
    \ mut difference = vec![0; game.len()];\n    for i in 0..game.len() {\n      \
    \  if i != game[i] {\n            difference[i] = abs(game[i] - guess[i]);\n \
    \       } else {\n            difference[i] = 0\n        }\n    }\n    difference\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpaaom9pnf.rs:21:23\n\
    \   |\n21 |                 answer++;\n   |                       ^^ not a valid\
    \ postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n21 |               \
    \  { let tmp = answer; answer += 1; tmp };\n   |                 +++++++++++ \
    \      ~~~~~~~~~~~~~~~~~~~~\n21 -                 answer++;\n21 +            \
    \     answer += 1;\n   | \n\nerror[E0425]: cannot find function `abs` in this\
    \ scope\n  --> /tmp/tmpaaom9pnf.rs:29:29\n   |\n29 |             difference[i]\
    \ = abs(game[i] - guess[i]);\n   |                             ^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaaom9pnf.rs:18:27\n\
    \   |\n18 |             if game[n] == g {\n   |                           ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    18 |             if game[n] == *g {\n   |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaaom9pnf.rs:28:17\n   |\n28 |         if i !=\
    \ game[i] {\n   |                 ^^^^^^^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n28 |         if i != game[i].try_into().unwrap() {\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() == guess.len() {\n        for &g_index in\
    \ 0..game.len() {\n            if game[g_index] == guess[g_index] {\n        \
    \        continue;\n            }\n            let gs = game[g_index] - guess[g_index];\n\
    \            if gs < 0 {\n                return vec![gs, -gs, 0];\n         \
    \   }\n            \n            let gp = guess[g_index] - game[g_index];\n  \
    \          if gp < 0 {\n                return vec![-gp, gs, 0];\n           \
    \ }\n            \n            let gn = game[g_index] - guess[g_index];\n    \
    \        if gn < 0 {\n                return vec![gs, -gn, 0];\n            }\n\
    \            \n        }\n    } else {\n        let mut result = vec![0; game.len()];\n\
    \        for &g_index in 0..game.len() {\n            let gs = game[g_index] -\
    \ guess[g_index];\n            if gs < 0 {\n                result[g_index] =\
    \ -game[g_index] - guess[g_index];\n                continue;\n            }\n\
    \            \n            let gp = guess[g_index] - game[g_index];\n        \
    \    if gp < 0 {\n                result[g_index] = -guess[g_index] - game[g_index];\n\
    \                continue;\n            }\n            \n            let gn =\
    \ game[g_index] - guess[g_index];\n            if gn < 0 {\n                result[g_index]\
    \ = -game[g_index] - guess[g_index];\n                continue;\n            }\n\
    \            \n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7yols92x.rs:15:13\n   |\n\
    15 |         for &g_index in 0..game.len() {\n   |             ^^^^^^^^    -------------\
    \ this expression has type `Option<usize>`\n   |             |\n   |         \
    \    expected `usize`, found reference\n   |             help: you can probably\
    \ remove the explicit borrow: `g_index`\n   |\n   = note:   expected type `usize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7yols92x.rs:15:9\n\
    \   |\n13 |   fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                      ---------- expected\
    \ `Vec<isize>` because of return type\n14 |       if game.len() == guess.len()\
    \ {\n15 | /         for &g_index in 0..game.len() {\n16 | |             if game[g_index]\
    \ == guess[g_index] {\n17 | |                 continue;\n18 | |             }\n\
    ...  |\n33 | |             \n34 | |         }\n   | |_________^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7yols92x.rs:37:13\n\
    \   |\n37 |         for &g_index in 0..game.len() {\n   |             ^^^^^^^^\
    \    ------------- this expression has type `Option<usize>`\n   |            \
    \ |\n   |             expected `usize`, found reference\n   |             help:\
    \ you can probably remove the explicit borrow: `g_index`\n   |\n   = note:   expected\
    \ type `usize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total_score: isize = 0;\n    let mut guess_match\
    \ = 0;\n    for (gs, g) in game.zip(guess) {\n        total_score += gs;\n   \
    \     guess_match += g == gs ? 1 : 0;\n    }\n    if guess_match == 0 {\n    \
    \    return vec![total_score];\n    }\n    let mut diff: isize = 0;\n    for (gs,\
    \ g) in game.zip(guess) {\n        if g == gs {\n            diff = 0;\n     \
    \   } else {\n            diff += g - gs;\n        }\n    }\n    return vec![total_score,\
    \ diff];\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1`\n\
    \  --> /tmp/tmpx1ktru0_.rs:18:34\n   |\n18 |         guess_match += g == gs ?\
    \ 1 : 0;\n   |                                  ^ expected one of `.`, `;`, `?`,\
    \ `}`, or an operator\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   -->\
    \ /tmp/tmpx1ktru0_.rs:16:25\n    |\n16  |       for (gs, g) in game.zip(guess)\
    \ {\n    |                           ^^^ `Vec<isize>` is not an iterator\n   \
    \ |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>:\
    \ Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n  \
    \          `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpx1ktru0_.rs:24:25\n\
    \    |\n24  |       for (gs, g) in game.zip(guess) {\n    |                  \
    \         ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n\n    for (i, item) in game.iter().enumerate()\
    \ {\n        let score = item.clone();\n        let guess = guess.iter().cloned().skip(i).collect::<Vec<_>>();\n\
    \        let mut sum = 0;\n\n        for g in guess {\n            sum += g;\n\
    \        }\n\n        if sum != 0 {\n            v.push(abs(sum - score));\n \
    \       }\n    }\n\n    v\n}\n\nfn main() {\n    let candidate = compare;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp7nkktb6x.rs:26:20\n\
    \   |\n26 |             v.push(abs(sum - score));\n   |                    ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut distances = Vec::with_capacity(guess.len());\n\
    \    for &g in &guess {\n        let mut min_dist = game[g];\n        for &s in\
    \ &game {\n            if s != g {\n                if min_dist > s {\n      \
    \              min_dist = s;\n                }\n            }\n        }\n  \
    \      distances.push(min_dist);\n    }\n    distances\n}\n\nfn main() {\n   \
    \ let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyufcmub4.rs:16:28\n\
    \   |\n16 |         let mut min_dist = game[g];\n   |                        \
    \    ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   =\
    \ help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diffs = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        if game[i] != guess[i] {\n            diffs[i] = abs(guess[i] - game[i]);\n\
    \        } else {\n            diffs[i] = 0;\n        }\n    }\n    return diffs;\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpq_h1iehg.rs:17:24\n\
    \   |\n17 |             diffs[i] = abs(guess[i] - game[i]);\n   |            \
    \            ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total_diff = vec![0; game.len()];\n    let mut\
    \ score_diff = vec![0; game.len()];\n\n    for i in 0..game.len() {\n        let\
    \ guess = guess[i];\n        if game[i] != guess {\n            total_diff[i]\
    \ = abs(game[i] - guess);\n        } else {\n            total_diff[i] = 0;\n\
    \        }\n    }\n\n    for i in 0..game.len() {\n        let guess = guess[i];\n\
    \        let score = game[i];\n        if score == guess {\n            score_diff[i]\
    \ = 0;\n        } else {\n            score_diff[i] = abs(score - guess);\n  \
    \      }\n    }\n\n    for i in 0..game.len() {\n        total_diff[i] = total_diff[i]\
    \ - score_diff[i];\n    }\n\n    for i in 0..game.len() {\n        total_diff[i]\
    \ = min(total_diff[i], 1);\n    }\n\n    for i in 0..game.len() {\n        total_diff[i]\
    \ = total_diff[i] * 100 as f32;\n    }\n\n    total_diff\n}\n\nfn main() {\n \
    \   let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpcdwgzm36.rs:20:29\n\
    \   |\n20 |             total_diff[i] = abs(game[i] - guess);\n   |          \
    \                   ^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `abs` in this scope\n  --> /tmp/tmpcdwgzm36.rs:32:29\n   |\n32 |           \
    \  score_diff[i] = abs(score - guess);\n   |                             ^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `min` in this scope\n\
    \  --> /tmp/tmpcdwgzm36.rs:41:25\n   |\n41 |         total_diff[i] = min(total_diff[i],\
    \ 1);\n   |                         ^^^\n...\n51 | fn main() {\n   | ---------\
    \ similarly named function `main` defined here\n   |\nhelp: a function with a\
    \ similar name exists\n   |\n41 |         total_diff[i] = main(total_diff[i],\
    \ 1);\n   |                         ~~~~\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: cannot multiply `{integer}`\
    \ by `f32`\n  --> /tmp/tmpcdwgzm36.rs:45:39\n   |\n45 |         total_diff[i]\
    \ = total_diff[i] * 100 as f32;\n   |                                       ^\
    \ no implementation for `{integer} * f32`\n   |\n   = help: the trait `Mul<f32>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer = 0;\n    for i in game.iter_mut() {\n \
    \       *i = *i + *guess.iter().find(|&n| n == i).unwrap()\n    }\n    answer\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ry598qr.rs:18:5\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n18 |     answer\n   |     ^^^^^^ expected struct\
    \ `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `{integer}`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diff: Vec<isize> = guess.clone();\n    for idx\
    \ in 0..game.len() {\n        diff.push(if game[idx] == guess[idx] {\n       \
    \     0\n        } else {\n            game[idx] - guess[idx]\n        })\n  \
    \  }\n    diff\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 2, -2, 0, 0, 0, 0, 3, 3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp0966j3no.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"compare:\
    \ vector lengths differ\")\n    }\n    let mut diff: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        let (game, guess) = (game[i], guess[i]);\n\
    \        if game != guess {\n            diff.append(game.abs() - guess.abs());\n\
    \        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzf00tyu5.rs:21:25\n   |\n\
    21 |             diff.append(game.abs() - guess.abs());\n   |                \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<isize>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<isize>`\n             \
    \              found type `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Game and\
    \ guess vectors are not the same length!\");\n    }\n    let mut result = vec![0..game.len()];\n\
    \    for i in 0..game.len() {\n        let mut difference = guess[i] - game[i];\n\
    \        if difference < 0 {\n            difference *= -1;\n        }\n     \
    \   result[i] = difference;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpid08az9u.rs:23:21\n   |\n\
    23 |         result[i] = difference;\n   |         ---------   ^^^^^^^^^^ expected\
    \ struct `std::ops::Range`, found `isize`\n   |         |\n   |         expected\
    \ due to the type of this binding\n   |\n   = note: expected struct `std::ops::Range<usize>`\n\
    \                found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpid08az9u.rs:25:5\n\
    \   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n25 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `std::ops::Range`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<std::ops::Range<usize>>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n\n    let mut\
    \ score = vec![0; game.len()];\n\n    for &(idx, score) in &game {\n        result[idx]\
    \ = if guess[idx] == score {\n            0\n        } else {\n            score[idx]\
    \ - guess[idx]\n        };\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ar9s5_y.rs:18:10\n   |\n\
    18 |     for &(idx, score) in &game {\n   |          ^^^^^^^^^^^^    ----- this\
    \ expression has type `Option<&isize>`\n   |          |\n   |          expected\
    \ `isize`, found tuple\n   |\n   = note: expected type `isize`\n             found\
    \ tuple `(_, _)`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // let game = vec![1, 2, 3, 4, 5, 1];\n    // let guess\
    \ = vec![1, 2, 3, 4, 2, -2];\n    let mut best_score = 0;\n    let mut best_guess\
    \ = Vec::new();\n    for (i, score) in game.iter().enumerate() {\n        if guess[i]\
    \ != score {\n            best_score += abs(score - guess[i]);\n            best_guess.push(guess[i]);\n\
    \        }\n    }\n    return best_guess;\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp9t5of5aq.rs:20:27\n\
    \   |\n20 |             best_score += abs(score - guess[i]);\n   |           \
    \                ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9t5of5aq.rs:19:24\n   |\n19 |         if guess[i] != score {\n\
    \   |                        ^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n19 |         if guess[i] != *score\
    \ {\n   |                        +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correct = game;\n    for c in guess {\n       \
    \ let mut correct = correct[game.iter().rev().position(|x| x == c)].unwrap();\n\
    \        if correct == 0 {\n            correct += 1;\n        }\n    }\n    correct.iter().map(|x|\
    \ x - guess).collect()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpi3l4aohp.rs:16:68\n\
    \   |\n16 |         let mut correct = correct[game.iter().rev().position(|x| x\
    \ == c)].unwrap();\n   |                                                     \
    \               ^^ no implementation for `&isize == isize`\n   |\n   = help: the\
    \ trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `Option<usize>`\n  --> /tmp/tmpi3l4aohp.rs:16:27\n\
    \   |\n16 |         let mut correct = correct[game.iter().rev().position(|x| x\
    \ == c)].unwrap();\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `Option<usize>`\n   = note:\
    \ required because of the requirements on the impl of `Index<Option<usize>>` for\
    \ `Vec<isize>`\n\nerror[E0277]: cannot subtract `Vec<isize>` from `&isize`\n \
    \ --> /tmp/tmpi3l4aohp.rs:21:30\n   |\n21 |     correct.iter().map(|x| x - guess).collect()\n\
    \   |                              ^ no implementation for `&isize - Vec<isize>`\n\
    \   |\n   = help: the trait `Sub<Vec<isize>>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diff = Vec::<isize>::new();\n    for (i, diff)\
    \ in game.iter().zip(guess.iter()) {\n        let x = if *game[i] == *guess {\
    \ 0 } else { |i| i };\n        *diff = *game[i] - x;\n    }\n    diff\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpqru0d78i.rs:16:21\n\
    \   |\n16 |         let x = if *game[i] == *guess { 0 } else { |i| i };\n   |\
    \                     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpqru0d78i.rs:16:52\n\
    \   |\n16 |         let x = if *game[i] == *guess { 0 } else { |i| i };\n   |\
    \                                         -          ^^^^^ expected integer, found\
    \ closure\n   |                                         |\n   |              \
    \                           expected because of this\n   |\n   = note: expected\
    \ type `{integer}`\n           found closure `[closure@/tmp/tmpqru0d78i.rs:16:52:\
    \ 16:57]`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpqru0d78i.rs:17:18\n   |\n17 |         *diff = *game[i] - x;\n \
    \  |                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut guesses = guesses_of(game);\n    let mut scores\
    \ = score_of(game);\n    guesses.sort_by_key(|x| *x);\n    scores.sort_by_key(|x|\
    \ *x);\n    let mut guessed_correctly = false;\n    let mut difference = isize::MAX;\n\
    \    for guess in guesses {\n        for score in scores {\n            let difference\
    \ = score-guess;\n            if difference < difference {\n                difference\
    \ = difference;\n            }\n            if guess == score {\n            \
    \    guessed_correctly = true;\n                break;\n            }\n      \
    \  }\n        if guessed_correctly {\n            break;\n        }\n    }\n \
    \   if guessed_correctly {\n        vec![]\n    } else {\n        vec![difference]\n\
    \    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `guesses_of` in this scope\n  --> /tmp/tmpq7ufazl6.rs:14:23\n\
    \   |\n14 |     let mut guesses = guesses_of(game);\n   |                    \
    \   ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `score_of`\
    \ in this scope\n  --> /tmp/tmpq7ufazl6.rs:15:22\n   |\n15 |     let mut scores\
    \ = score_of(game);\n   |                      ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    guess = guess.iter().cloned().collect();\n    let mut num_correct\
    \ = 0;\n    for score in game.iter().cloned().collect::<Vec<isize>>() {\n    \
    \    \n        let mut delta = 0;\n        let mut score_index = 0;\n        let\
    \ mut guesser_index = 0;\n        for score in game.iter().cloned().collect::<Vec<isize>>()\
    \ {\n            guesser_index = 0;\n            guesser = guess[guesser_index];\n\
    \            while score != guesser {\n                if score > guesser {\n\
    \                    delta += 1;\n                    break;\n               \
    \ } else if score < guesser {\n                    guesser_index += 1;\n     \
    \               guesser = guess[guesser_index];\n                    break;\n\
    \                }\n                guesser_index += 1;\n                guesser\
    \ = guess[guesser_index];\n            }\n            score_index += 1;\n    \
    \        score = score[score_index];\n        }\n        if delta == 0 {\n   \
    \         num_correct += 1;\n        }\n    }\n    num_correct.clone_from_slice(&mut\
    \ guess)\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `guesser` in this scope\n  --> /tmp/tmpu612ajyo.rs:23:13\n\
    \   |\n23 |             guesser = guess[guesser_index];\n   |             ^^^^^^^\
    \ help: a local variable with a similar name exists: `guess`\n\nerror[E0425]:\
    \ cannot find value `guesser` in this scope\n  --> /tmp/tmpu612ajyo.rs:24:28\n\
    \   |\n24 |             while score != guesser {\n   |                       \
    \     ^^^^^^^ help: a local variable with a similar name exists: `guess`\n\nerror[E0425]:\
    \ cannot find value `guesser` in this scope\n  --> /tmp/tmpu612ajyo.rs:25:28\n\
    \   |\n25 |                 if score > guesser {\n   |                       \
    \     ^^^^^^^ help: a local variable with a similar name exists: `guess`\n\nerror[E0425]:\
    \ cannot find value `guesser` in this scope\n  --> /tmp/tmpu612ajyo.rs:28:35\n\
    \   |\n28 |                 } else if score < guesser {\n   |                \
    \                   ^^^^^^^ help: a local variable with a similar name exists:\
    \ `guess`\n\nerror[E0425]: cannot find value `guesser` in this scope\n  --> /tmp/tmpu612ajyo.rs:30:21\n\
    \   |\n30 |                     guesser = guess[guesser_index];\n   |        \
    \             ^^^^^^^ help: a local variable with a similar name exists: `guess`\n\
    \nerror[E0425]: cannot find value `guesser` in this scope\n  --> /tmp/tmpu612ajyo.rs:34:17\n\
    \   |\n34 |                 guesser = guess[guesser_index];\n   |            \
    \     ^^^^^^^ help: a local variable with a similar name exists: `guess`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpu612ajyo.rs:37:21\n\
    \   |\n37 |             score = score[score_index];\n   |                    \
    \ ^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no method named `clone_from_slice` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmpu612ajyo.rs:43:17\n\
    \   |\n43 |     num_correct.clone_from_slice(&mut guess)\n   |               \
    \  ^^^^^^^^^^^^^^^^ method not found in `{integer}`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0425, E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut game_cnt = game.len();\n\
    \    let mut guess_cnt = guess.len();\n\n    // if the game is finished then we\
    \ have a score of 0\n    for _ in 0..game_cnt {\n        result.append(0);\n \
    \   }\n\n    // if the guess is finished then we have a score of 0\n    for _\
    \ in 0..guess_cnt {\n        result.append(0);\n    }\n\n    // if the game and\
    \ guess are equal then we have a score of 0\n    for _ in 0..game_cnt {\n    \
    \    result.append(0);\n    }\n\n    // if the guess and game are equal then we\
    \ have a score of 0\n    for _ in 0..guess_cnt {\n        result.append(0);\n\
    \    }\n\n    // the algorithm is basically a brute force method but we can use\
    \ some clever tricks to make the code faster\n\n    // if any guess and game match\
    \ then we have no score so return guess and game as zero\n    if game_cnt == guess_cnt\
    \ {\n        for _ in 0..guess_cnt {\n            result.append(0);\n        }\n\
    \        for _ in 0..game_cnt {\n            result.append(0);\n        }\n  \
    \      return result;\n    }\n\n    // if one guess and game match then we know\
    \ that score will be zero\n    if game_cnt == 1 {\n        for _ in 0..game_cnt\
    \ {\n            result.append(0);\n        }\n        return result;\n    }\n\
    \n    // the algorithm is basically a brute force method but we can use some clever\
    \ tricks to make the code faster\n\n    // if any guess and game match then we\
    \ have no score so return guess and game as zero\n    if game_cnt == guess_cnt\
    \ {\n        for _ in 0..guess_cnt {\n            result.append(0);\n        }\n\
    \        for _ in 0..game_cnt {\n            result.append(0);\n        }\n  \
    \      return result;\n    }\n\n    // if one guess and game match then we know\
    \ that score will be zero\n    if game_cnt == 1 {\n        for _ in 0..game_cnt\
    \ {\n            result.append(0);\n        }\n        return result;\n    }\n\
    \n    // if both guess and game are empty then we have a score of zero\n    if\
    \ game_cnt+guess_cnt == 0 {\n        for _ in 0..game_cnt {\n            result.append(0);\n\
    \        }\n        for _ in 0..guess_cnt {\n            result.append(0);\n \
    \       }\n        return result;\n    }\n\n    // if one guess and game are empty\
    \ then we have a score of zero\n    if game_cnt+guess_cnt == 1 {\n        for\
    \ _ in 0..guess_cnt {\n            result.append(0);\n        }\n        return\
    \ result;\n    }\n\n    // if the guess and game are empty then we have a score\
    \ of zero\n    if game_cnt+guess_cnt == 2 {\n        for _ in 0..game\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpevm7hcsk.rs:110:3\n\
    \    |\n13  | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n100 |     if game_cnt+guess_cnt == 2 {\n    |              \
    \                  - this delimiter might not be properly closed...\n101 |   \
    \      for _ in 0..game\n102 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n110 | }\n    |   ^\n\nerror: expected `{`, found `}`\n   -->\
    \ /tmp/tmpevm7hcsk.rs:102:1\n    |\n102 | }\n    | ^ expected `{`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpevm7hcsk.rs:20:23\n   |\n20 |         result.append(0);\n\
    \   |                       ^ expected `&mut Vec<_>`, found integer\n   |\n  \
    \ = note: expected mutable reference `&mut Vec<_>`\n                         \
    \  found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpevm7hcsk.rs:25:23\n\
    \   |\n25 |         result.append(0);\n   |                       ^ expected `&mut\
    \ Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n\
    \                           found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpevm7hcsk.rs:30:23\n   |\n30 |         result.append(0);\n\
    \   |                       ^ expected `&mut Vec<_>`, found integer\n   |\n  \
    \ = note: expected mutable reference `&mut Vec<_>`\n                         \
    \  found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpevm7hcsk.rs:35:23\n\
    \   |\n35 |         result.append(0);\n   |                       ^ expected `&mut\
    \ Vec<_>`, found integer\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n\
    \                           found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpevm7hcsk.rs:43:27\n   |\n43 |             result.append(0);\n\
    \   |                           ^ expected `&mut Vec<_>`, found integer\n   |\n\
    \   = note: expected mutable reference `&mut Vec<_>`\n                       \
    \    found type `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpevm7hcsk.rs:46:27\n\
    \   |\n46"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    guess = guess.iter().cloned().collect();\n    let mut difference\
    \ = Vec::new();\n    for i in 0..game.len() {\n        if guess[i] < game[i] {\n\
    \            difference.append(guess as isize);\n        } else {\n          \
    \  difference.append(game[i] as isize);\n        }\n    }\n    difference\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwh3sg3m.rs:18:31\n   |\n\
    18 |             difference.append(guess as isize);\n   |                    \
    \           ^^^^^^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note:\
    \ expected mutable reference `&mut Vec<_>`\n                           found type\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwh3sg3m.rs:20:31\n\
    \   |\n20 |             difference.append(game[i] as isize);\n   |           \
    \                    ^^^^^^^^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<_>`\n                 \
    \          found type `isize`\n\nerror[E0605]: non-primitive cast: `Vec<isize>`\
    \ as `isize`\n  --> /tmp/tmpkwh3sg3m.rs:18:31\n   |\n18 |             difference.append(guess\
    \ as isize);\n   |                               ^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0605.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut distance: Vec<isize> = guess[..].clone(); // copy\
    \ to avoid mutating the original guess.\n    for i in game.iter().rev().skip(1)\
    \ { // iterate backwards to ignore the last element in the game.\n        if guess\
    \ == game[..i].clone() {\n            distance.insert(0, i); // put an index of\
    \ 0 before each index where the guess is equal to the game.\n        }\n    }\n\
    \    distance\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone` found for slice `[isize]` in the\
    \ current scope\n  --> /tmp/tmp_hmdo9wu.rs:14:46\n   |\n14 |     let mut distance:\
    \ Vec<isize> = guess[..].clone(); // copy to avoid mutating the original guess.\n\
    \   |                                              ^^^^^ method not found in `[isize]`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `RangeTo<&isize>`\n  -->\
    \ /tmp/tmp_hmdo9wu.rs:16:21\n   |\n16 |         if guess == game[..i].clone()\
    \ {\n   |                     ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeTo<&isize>`\n   = help: the following other types implement trait\
    \ `SliceIndex<T>`:\n             <RangeTo<usize> as SliceIndex<[T]>>\n       \
    \      <RangeTo<usize> as SliceIndex<str>>\n   = note: required because of the\
    \ requirements on the impl of `Index<RangeTo<&isize>>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_hmdo9wu.rs:17:32\n   |\n17 |             distance.insert(0,\
    \ i); // put an index of 0 before each index where the guess is equal to the game.\n\
    \   |                                ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n17 |             distance.insert(0,\
    \ *i); // put an index of 0 before each index where the guess is equal to the\
    \ game.\n   |                                +\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut best_guess = guess[0];\n    let mut best_difference\
    \ = game[0] as isize;\n    for i in 0..game.len() {\n        let difference =\
    \ game[i] - guess[i];\n        if difference > best_difference {\n           \
    \ best_difference = difference;\n            best_guess = guess[i];\n        }\n\
    \    }\n    best_guess\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgpu6a3si.rs:23:5\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |     best_guess\n   |     ^^^^^^^^^^ expected\
    \ struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut guesses = guess.clone();\n    guesses.sort();\n\
    \    let mut scores = game.clone();\n    scores.sort();\n    let mut distance\
    \ = Vec::new();\n    for i in 0..guesses.len() {\n        let mut guess_num =\
    \ guesses[i];\n        let mut score_num = scores[i];\n        let mut dist =\
    \ score_num - guess_num;\n        while dist != 0 {\n            guesses[i] =\
    \ guess_num;\n            scores[i] = score_num + dist;\n            guess_num\
    \ = guesses[i];\n            score_num = scores[i];\n            dist = score_num\
    \ - guess_num;\n        }\n        guesses[i] = guess_num;\n        scores[i]\
    \ = score_num;\n        let mut sum = 0;\n        for j in 0..scores.len() {\n\
    \            let mut j = scores[j];\n            while j != 0 {\n            \
    \    sum += j % i;\n                j = (j - 1) / i;\n            }\n        }\n\
    \        distance.push(sum);\n    }\n    distance\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6q82so65.rs:36:28\n   |\n\
    36 |                 sum += j % i;\n   |                            ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  -->\
    \ /tmp/tmp6q82so65.rs:36:26\n   |\n36 |                 sum += j % i;\n   |  \
    \                        ^ no implementation for `isize % usize`\n   |\n   = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n      \
    \       <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n            \
    \ <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6q82so65.rs:37:31\n   |\n37 |                 j = (j -\
    \ 1) / i;\n   |                               ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n  --> /tmp/tmp6q82so65.rs:37:29\n\
    \   |\n37 |                 j = (j - 1) / i;\n   |                           \
    \  ^ no implementation for `isize / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut wrong = vec![];\n    for index in 0..guess.len()\
    \ {\n        let mut wrong_count = 0usize;\n        for _ in 0..game.len() {\n\
    \            if game[index] == guess[index] {\n                wrong_count +=\
    \ 1\n            }\n        }\n        wrong.push(wrong_count as isize);\n   \
    \ }\n    if guess.len() == game.len() {\n        return vec![];\n    }\n    let\
    \ mut total = vec![];\n    for i in 0..guess.len() {\n        total.push(wrong[i]\
    \ - game[i]);\n    }\n    return total;\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpu0xz3m3q.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = Vec::new();\n    for i in game.iter() {\n\
    \        score[i] = game[i] - guess[i];\n    }\n    for i in 0..game.len() {\n\
    \        let mut cur = guess[i];\n        let mut prev = 0i32;\n        for j\
    \ in i..game.len() {\n            if j == i {\n                continue;\n   \
    \         }\n            if cur < prev {\n                score[j] = prev;\n \
    \           } else {\n                score[j] = cur;\n            }\n       \
    \     prev = cur;\n            cur = game[j];\n        }\n    }\n    score\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `&isize`\n  --> /tmp/tmplhw0skop.rs:16:9\n\
    \   |\n16 |         score[i] = game[i] - guess[i];\n   |         ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmplhw0skop.rs:16:20\n   |\n16 | \
    \        score[i] = game[i] - guess[i];\n   |                    ^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmplhw0skop.rs:16:30\n\
    \   |\n16 |         score[i] = game[i] - guess[i];\n   |                     \
    \         ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplhw0skop.rs:25:22\n   |\n25 |\
    \             if cur < prev {\n   |                      ^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n25 |             if cur < prev.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplhw0skop.rs:28:28\n   |\n28 |                 score[j]\
    \ = cur;\n   |                 --------   ^^^ expected `i32`, found `isize`\n\
    \   |                 |\n   |                 expected due to the type of this\
    \ binding\n\nerror[E0308]: "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut min_err = Vec::<isize>::new();\n    let mut cur\
    \ = vec![0; game.len()];\n    let mut j = 0;\n    for i in game.iter() {\n   \
    \     let mut err = i; \n        let mut found = false;\n        for j in guess.iter()\
    \ {\n            let score = game[i] - guess[j];\n            if score != 0 &&\
    \ score < err {\n                err = score;\n                found = true;\n\
    \            }\n        }\n        if found {\n            cur[i] = 0;\n     \
    \   }\n        else if err < min_err.iter().min().unwrap_or(i) {\n           \
    \ min_err[j] = err;\n        }\n    }\n    cur\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp8wu72f3j.rs:21:25\n\
    \   |\n21 |             let score = game[i] - guess[j];\n   |                \
    \         ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp8wu72f3j.rs:21:35\n\
    \   |\n21 |             let score = game[i] - guess[j];\n   |                \
    \                   ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp8wu72f3j.rs:22:22\n\
    \   |\n22 |             if score != 0 && score < err {\n   |                 \
    \     ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmp8wu72f3j.rs:28:13\n\
    \   |\n28 |             cur[i] = 0;\n   |             ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8wu72f3j.rs:31:26\n   |\n31 |       "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\n     \
    \       \"ERROR: game.length should be the same as guess.len(),\\n\\t game: {:?}\\\
    n\\t guess: {:?}\",\n            game,\n            guess,\n        );\n    }\n\
    \n    let mut result: Vec<isize> = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0;\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i]);\n        }\n    }\n\n  \
    \  result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp_ngpzx_0.rs:27:25\n\
    \   |\n27 |             result[i] = abs(game[i] - guess[i]);\n   |           \
    \              ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.clone();\n    let mut\
    \ diff = 0;\n    loop {\n        for (i, score) in game.iter().enumerate() {\n\
    \            if guess == score {\n                result[i] = 0;\n           \
    \     break;\n            }\n            let guessed_score = result[i] - score;\n\
    \            if guess > score {\n                diff = guess - score;\n     \
    \       } else {\n                diff = -guess + score;\n            }\n    \
    \        result[i] = guessed_score;\n            if i == 0 {\n               \
    \ result.insert(0, diff);\n            } else {\n                result[i + 1]\
    \ = diff;\n            }\n        }\n        if result.is_empty() {\n        \
    \    break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<isize>` with `&isize`\n  --> /tmp/tmppjqbrnsw.rs:18:22\n\
    \   |\n18 |             if guess == score {\n   |                      ^^ no implementation\
    \ for `Vec<isize> == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is\
    \ not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppjqbrnsw.rs:23:24\n   |\n23 |             if guess > score\
    \ {\n   |                        ^^^^^ expected struct `Vec`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found reference `&isize`\n\
    \nerror[E0369]: cannot subtract `&isize` from `Vec<isize>`\n  --> /tmp/tmppjqbrnsw.rs:24:30\n\
    \   |\n24 |                 diff = guess - score;\n   |                      \
    \  ----- ^ ----- &isize\n   |                        |\n   |                 \
    \       Vec<isize>\n\nerror[E0600]: cannot apply unary operator `-` to type `Vec<isize>`\n\
    \  --> /tmp/tmppjqbrnsw.rs:26:24\n   |\n26 |                 diff = -guess + score;\n\
    \   |                        ^^^^^^ cannot apply unary operator `-`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0369, E0600.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.clone();\n    let mut\
    \ correct = 0;\n    for v in game {\n        if v == guess[result.iter().position(|&x|\
    \ x == v).unwrap()] {\n            correct += 1;\n        } else {\n         \
    \   result[result.iter().position(|&x| x == v).unwrap()] = 0;\n        }\n   \
    \ }\n    result.into_iter().map(|x| if x == guess[0] { 0 } else { |x| x - guess[0]\
    \ }).sum()\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmprsv5ew8g.rs:23:62\n\
    \   |\n23 |     result.into_iter().map(|x| if x == guess[0] { 0 } else { |x| x\
    \ - guess[0] }).sum()\n   |                                                  \
    \ -          ^^^^^^^^^^^^^^^^ expected integer, found closure\n   |          \
    \                                         |\n   |                            \
    \                       expected because of this\n   |\n   = note: expected type\
    \ `{integer}`\n           found closure `[closure@/tmp/tmprsv5ew8g.rs:23:62: 23:78]`\n\
    \nerror[E0277]: the trait bound `Vec<isize>: Sum<_>` is not satisfied\n    -->\
    \ /tmp/tmprsv5ew8g.rs:23:82\n     |\n23   |     result.into_iter().map(|x| if\
    \ x == guess[0] { 0 } else { |x| x - guess[0] }).sum()\n     |               \
    \                                                                   ^^^ the trait\
    \ `Sum<_>` is not implemented for `Vec<isize>`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n\
    \               <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n\
    \               <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32,\
    \ LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n\
    \               <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n            \
    \   <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    let mut max_difference\
    \ = isize::MAX;\n\n    for i in 0..game.len() {\n        if game[i] != guess[i]\
    \ {\n            result[i] += isize::MAX;\n            max_difference = isize::MAX;\n\
    \        } else {\n            result[i] += isize::MAX;\n            max_difference\
    \ = isize::MAX;\n        }\n    }\n\n    if result.len() == game.len() {\n   \
    \     result\n    } else {\n        result.iter().zip(result.iter().skip(game.len())).collect::<Vec<_>>()\n\
    \            .iter().zip(guess.iter().skip(game.len())).collect::<Vec<_>>()\n\
    \            .fold(max_difference, |mut acc, (a, b)| {\n                let mut\
    \ min_difference = isize::MIN;\n                let mut min_difference_index =\
    \ isize::MIN;\n\n                for i in 0..game.len() {\n                  \
    \  if a != b {\n                        let diff = f32::abs(a - b);\n        \
    \                if diff < min_difference {\n                            min_difference\
    \ = diff;\n                            min_difference_index = i;\n           \
    \             }\n                    }\n                }\n                acc\n\
    \                    + min_difference\n                    + min_difference_index;\n\
    \            })\n    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<(&(&isize, &isize), &isize)>` is not an iterator\n \
    \  --> /tmp/tmpkvuq61sa.rs:32:14\n    |\n32  |               .fold(max_difference,\
    \ |mut acc, (a, b)| {\n    |                ^^^^ `Vec<(&(&isize, &isize), &isize)>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<(&(&isize, &isize), &isize)>: Iterator`\n            which is\
    \ required by `&mut Vec<(&(&isize, &isize), &isize)>: Iterator`\n            `[(&(&isize,\
    \ &isize), &isize)]: Iterator`\n            which is required by `&mut [(&(&isize,\
    \ &isize), &isize)]: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkvuq61sa.rs:39:35\n\
    \   |\n39 |                         if diff < min_difference {\n   |         \
    \                          ^^^^^^^^^^^^^^ expected `f32`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f32`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n39 |                         if\
    \ diff < min_difference as f32 {\n   |                                       \
    \           ++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkvuq61sa.rs:40:46\n\
    \   |\n33 |                 let mut min_difference = isize::MIN;\n   |       \
    \                                   ---------- expected due to this value\n...\n\
    40 |                             min_difference = diff;\n   |                \
    \                              ^^^^ expected `isize`, found `f32`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkvuq61sa.rs:41:52\n   |\n34 |              \
    \   let mut min_difference_index = isize::MIN;\n   |                         \
    \                       ---------- expected due to this value\n...\n41 |     \
    \                        min_difference_index = i;\n   |                     \
    \                               ^ expected `isize`, found `usize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = 0isize;\n    let mut guesses = guess.len();\n\
    \    for i in 0..guesses {\n        if game[i] != guess[i] { \n            score\
    \ += abs(game[i] - guess[i])\n        }\n    }\n    vec![score]\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp3yqc38zz.rs:18:22\n\
    \   |\n18 |             score += abs(game[i] - guess[i])\n   |               \
    \       ^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score: Vec<isize> = vec![0, 0];\n    for index\
    \ in 0..guess.len() {\n        score[index] = if game[index] == guess[index] {\n\
    \            0\n        } else {\n            abs(game[index] - guess[index])\n\
    \        };\n    }\n    score\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp4n1_oi0c.rs:19:13\n\
    \   |\n19 |             abs(game[index] - guess[index])\n   |             ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ans = Vec::with_capacity(guess.len());\n    ans.push(0);\n\
    \    \n    for (i, guessed) in guess.iter().zip(game.iter()) {\n        if guessed\
    \ == game[i] {\n            ans.push(0);\n        } else {\n            ans.push(abs(guessed\
    \ - game[i]));\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpy9jl03aa.rs:21:22\n\
    \   |\n21 |             ans.push(abs(guessed - game[i]));\n   |              \
    \        ^^^ help: a local variable with a similar name exists: `ans`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpy9jl03aa.rs:18:23\n\
    \   |\n18 |         if guessed == game[i] {\n   |                       ^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpy9jl03aa.rs:21:36\n\
    \   |\n21 |             ans.push(abs(guessed - game[i]));\n   |              \
    \                      ^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    let mut correct\
    \ = vec![0; game.len()];\n    for (i, g) in game.iter().enumerate() {\n      \
    \  // if the guess and score are equal then the user has guessed correctly\n \
    \       if g == guess[i] {\n            correct[i] = 0;\n            result[i]\
    \ = 0;\n        } else {\n            correct[i] = abs(g - guess[i]);\n      \
    \      result[i] = abs(g - guess[i]);\n        }\n    }\n    correct\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpgfgwenok.rs:22:26\n\
    \   |\n22 |             correct[i] = abs(g - guess[i]);\n   |                \
    \          ^^^ not found in this scope\n\nerror[E0425]: cannot find function `abs`\
    \ in this scope\n  --> /tmp/tmpgfgwenok.rs:23:25\n   |\n23 |             result[i]\
    \ = abs(g - guess[i]);\n   |                         ^^^ not found in this scope\n\
    \nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpgfgwenok.rs:18:14\n\
    \   |\n18 |         if g == guess[i] {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let len = game.len();\n    let guess = guess.to_vec();\n\
    \    let mut guesses = 0;\n    let mut correct = 0;\n    let mut total = 0;\n\
    \    for i in 0..len {\n        let mut guess = guess.clone();\n        if guess\
    \ == game[i] {\n            guesses += 1;\n        } else {\n            correct\
    \ += 1;\n            guess[i] = game[i];\n        }\n        total += 1;\n   \
    \ }\n    if total < 2 {\n        vec![correct]\n    } else {\n        if correct\
    \ == 0 {\n            vec![total - guesses]\n        } else {\n            vec![total-correct,\
    \ total - guesses]\n        }\n    }\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<isize>` with `isize`\n  --> /tmp/tmpegn5bzpm.rs:21:18\n\
    \   |\n21 |         if guess == game[i] {\n   |                  ^^ no implementation\
    \ for `Vec<isize> == isize`\n   |\n   = help: the trait `PartialEq<isize>` is\
    \ not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correct = 0usize;\n    for i in 0..guess.len()\
    \ {\n        if game[i] == guess[i] {\n            correct += 1;\n        } else\
    \ {\n            if correct == 0 {\n                return vec![i];\n        \
    \    }\n            if abs(game[i] - guess[i]) > correct {\n                return\
    \ vec![correct];\n            }\n        }\n    }\n    return vec![correct];\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpryw2ogmy.rs:22:16\n\
    \   |\n22 |             if abs(game[i] - guess[i]) > correct {\n   |         \
    \       ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpryw2ogmy.rs:20:29\n\
    \   |\n20 |                 return vec![i];\n   |                            \
    \ ^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to\
    \ an `isize` and panic if the converted value doesn't fit\n   |\n20 |        \
    \         return vec![i.try_into().unwrap()];\n   |                          \
    \    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpryw2ogmy.rs:23:29\n\
    \   |\n23 |                 return vec![correct];\n   |                      \
    \       ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a\
    \ `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n23\
    \ |                 return vec![correct.try_into().unwrap()];\n   |          \
    \                          ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpryw2ogmy.rs:27:17\n   |\n27 |     return vec![correct];\n   | \
    \                ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n27 |     return vec![correct.try_into().unwrap()];\n   |              \
    \          ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::with_capacity(guess.len());\n\
    \    for i in 0..guess.len() {\n        match game[i] {\n            Some(score)\
    \ => {\n                match guess[i] {\n                    Some(guess) => {\n\
    \                        if score == guess {\n                            result.push(0);\n\
    \                        }\n                        if score > guess {\n     \
    \                       result.push(diff + abs(score - guess));\n            \
    \            }\n                        if score < guess {\n                 \
    \           result.push(diff - abs(score - guess));\n                        }\n\
    \                    },\n                    None => result.push(diff + abs(score\
    \ - guess)),\n                }\n            }\n            None => result.push(diff\
    \ + abs(score - guess)),\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `diff` in this scope\n  --> /tmp/tmp89wjlduu.rs:24:41\n\
    \   |\n24 | ...                   result.push(diff + abs(score - guess));\n  \
    \ |                                   ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmp89wjlduu.rs:24:48\n\
    \   |\n24 | ...                   result.push(diff + abs(score - guess));\n  \
    \ |                                          ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `diff` in this scope\n  --> /tmp/tmp89wjlduu.rs:27:41\n  \
    \ |\n27 | ...                   result.push(diff - abs(score - guess));\n   |\
    \                                   ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmp89wjlduu.rs:27:48\n\
    \   |\n27 | ...                   result.push(diff - abs(score - guess));\n  \
    \ |                                          ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `diff` in this scope\n  --> /tmp/tmp89wjlduu.rs:30:41\n  \
    \ |\n30 |                     None => result.push(diff + abs(score - guess)),\n\
    \   |                                         ^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmp89wjlduu.rs:30:48\n\
    \   |\n30 |                     None => result.push(diff + abs(score - guess)),\n\
    \   |                                                ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `diff` in this scope\n  --> /tmp/tmp89wjlduu.rs:33:33\n\
    \   |\n33 |             None => result.push(diff + abs(score - guess)),\n   |\
    \                                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmp89wjlduu.rs:33:40\n\
    \   |\n33 |             None => result.push(diff + abs(score - guess)),\n   |\
    \                                        ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `score` in this scope\n  --> /tmp/tmp89wjlduu.rs:33:44\n \
    \  |\n33 |             None => result.push(diff + abs(score - guess)),\n   | \
    \                               "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut guessed_correctly = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            guessed_correctly.push(0);\n\
    \        } else {\n            guessed_correctly.push(i + game.iter().position(|x|\
    \ *x == game[i]).unwrap());\n        }\n    }\n    guessed_correctly\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz90emflv.rs:22:5\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     guessed_correctly\n   |     ^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut correct_guesses\
    \ = 0;\n    for i in 0..game.len() {\n        if guess[i] == game[i] {\n     \
    \       result.push(i);\n            correct_guesses += 1;\n        } else if\
    \ guess[i] > game[i] {\n            result.push(-i);\n        } else {\n     \
    \       result.push(i);\n        }\n    }\n    for i in 0..game.len() {\n    \
    \    if result[i] == i {\n            continue;\n        }\n        let diff =\
    \ guess[i] - game[i];\n        if diff < 0 {\n            result.push(diff);\n\
    \        } else {\n            result.push(-diff);\n        }\n    }\n    for\
    \ i in 0..game.len() {\n        if result[i] == i {\n            continue;\n \
    \       }\n        if result[i] == -1 {\n            continue;\n        }\n  \
    \      let diff = guess[i] - game[i];\n        if diff < 0 {\n            result.push(diff);\n\
    \        } else {\n            result.push(-diff);\n        }\n    }\n    for\
    \ j in 0..game.len() {\n        if result[j] == j {\n            continue;\n \
    \       }\n        if result[j] == -1 {\n            continue;\n        }\n  \
    \      let diff = guess[j] - game[j];\n        if diff < 0 {\n            result.push(diff);\n\
    \        } else {\n            result.push(-diff);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmp74ala8v6.rs:21:25\n\
    \   |\n21 |             result.push(-i);\n   |                         ^^ cannot\
    \ apply unary operator `-`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp74ala8v6.rs:32:25\n   |\n32 |\
    \             result.push(diff);\n   |                         ^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n32 |             result.push(diff.try_into().unwrap());\n\
    \   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp74ala8v6.rs:34:25\n   |\n34 |             result.push(-diff);\n\
    \   |                         ^^^^^ expected `usize`, found `isize`\n   |\n  \
    \ = note: `-diff` cannot fit into type `usize`\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmp74ala8v6.rs:41:25\n   |\n41 |  \
    \       if result[i] == -1 {\n   |                         ^^\n   |          \
    \               |\n   |                         cannot apply unary operator `-`\n\
    \   |                         help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp74ala8v6.rs:46:25\n   |\n46 |             result.push(diff);\n\
    \   |                         ^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n46 |             result.push(diff.try_into().unwrap());\n   |   \
    \                          ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp74ala8v6.rs:48:25\n   |\n48 |             result.push(-diff);\n\
    \   |                         ^^^^^ expected `usize`, found `isize`\n   |\n  \
    \ = note: `-diff` cannot fit into type `usize`\n\nerror[E0600]: cannot apply unary\
    \ operator `-` to type `usize`\n  --> /tmp/tmp74ala8v6.rs:55:25\n   |\n55 |  \
    \       if result[j] == -1 {\n   |                         ^^\n   |          "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut best_guess = Guess {\n        guess,\n        score:\
    \ std::i32::MAX,\n    };\n    let mut best_guess_iter = game.iter().cloned().collect();\n\
    \    let mut correct_guess = 0;\n\n    for &g in &guess {\n        let mut guess_iter\
    \ = best_guess_iter.clone();\n        match guess_iter.next() {\n            Some((score,\
    \ &g)) => {\n                let diff = match &g == &game {\n                \
    \    true => 0,\n                    false => abs(&g - &game),\n             \
    \   };\n                if diff < best_guess.score {\n                    best_guess.score\
    \ = diff;\n                    best_guess.guess = g;\n                }\n    \
    \        }\n            None => (),\n        };\n        match guess_iter.next()\
    \ {\n            Some((score, &g)) => {\n                let diff = match &g ==\
    \ &game {\n                    true => 0,\n                    false => abs(&g\
    \ - &game),\n                };\n                if diff < best_guess.score {\n\
    \                    best_guess.score = diff;\n                    best_guess.guess\
    \ = g;\n                }\n            }\n            None => (),\n        }\n\
    \        correct_guess += 1;\n    }\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[0]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 1]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 2]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 3]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 4]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 5]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 6]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 7]).count();\n    best_guess.score -= best_guess.guess.iter().filter(|&g|\
    \ &g == &guess[game.len() - 8]).count();\n    best_guess.score \n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0422]: cannot find struct, variant or union type `Guess` in this\
    \ scope\n  --> /tmp/tmp4ygn24or.rs:14:26\n   |\n14 |     let mut best_guess =\
    \ Guess {\n   |                          ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmp4ygn24or.rs:27:30\n\
    \   |\n27 |                     false => abs(&g - &game),\n   |              \
    \                ^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `abs` in this scope\n  --> /tmp/tmp4ygn24or.rs:40:30\n   |\n40 |           \
    \          false => abs(&g - &game),\n   |                              ^^^ not\
    \ found in this scope\n\nerror[E0277]: cannot subtract `&Vec<isize>` from `&_`\n\
    \  --> /tmp/tmp4ygn24or.rs:27:37\n   |\n27 |                     false => abs(&g\
    \ - &game),\n   |                                     ^ no implementation for\
    \ `&_ - &Vec<isize>`\n   |\n   = help: the trait `Sub<&Vec<isize>>` is not implemented\
    \ for `&_`\n\nerror[E0277]: cannot subtract `&Vec<isize>` from `&_`\n  --> /tmp/tmp4ygn24or.rs:40:37\n\
    \   |\n40 |                     false => abs(&g - &game),\n   |              \
    \                       ^ no implementation for `&_ - &Vec<isize>`\n   |\n   =\
    \ help: the trait `Sub<&Vec<isize>>` is not implemented for `&_`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0422,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // We need to compare game[i] to guess[i] and then the\
    \ other way around\n    // but since we know that both vectors are the same length,\
    \ we can just iterate through both\n    // at the same time.\n    for x in 0..game.len()\
    \ {\n        let diff = game[x] - guess[x];\n        let diff_abs = abs(diff);\n\
    \        if diff < 0 || diff_abs > guess[x] {\n            guess[x] += diff;\n\
    \        } else {\n            guess[x] -= diff;\n        }\n    }\n    guess\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpf1feaesf.rs:19:24\n\
    \   |\n19 |         let diff_abs = abs(diff);\n   |                        ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.to_vec();\n    let mut\
    \ count = 0;\n    for index in 0..game.len() {\n        let score = game[index];\n\
    \        let guess = guess[index];\n        if score == guess {\n            result[index]\
    \ = 0;\n        } else {\n            result[index] = guess.abs() - score;\n \
    \       }\n        count += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, 1]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpm9ksb10z.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).enumerate().filter(|(g, g)|\
    \ g != 0).map(|(g, g)| {\n        assert!(g <= game.len());\n        if g == 0\
    \ {\n            0\n        } else {\n            let difference = abs(g - game.last());\n\
    \            if g == game.len() {\n                difference + 1\n          \
    \  } else {\n                difference\n            }\n        }\n    })\n}\n\
    \nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `g` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmp3b6teljq.rs:14:59\n   |\n14 |     game.iter().zip(guess.iter()).enumerate().filter(|(g,\
    \ g)| g != 0).map(|(g, g)| {\n   |                                           \
    \                ^ used as parameter more than once\n\nerror[E0415]: identifier\
    \ `g` is bound more than once in this parameter list\n  --> /tmp/tmp3b6teljq.rs:14:80\n\
    \   |\n14 |     game.iter().zip(guess.iter()).enumerate().filter(|(g, g)| g !=\
    \ 0).map(|(g, g)| {\n   |                                                    \
    \                            ^ used as parameter more than once\n\nerror[E0425]:\
    \ cannot find function `abs` in this scope\n  --> /tmp/tmp3b6teljq.rs:19:30\n\
    \   |\n19 |             let difference = abs(g - game.last());\n   |         \
    \                     ^^^ not found in this scope\n\nerror[E0277]: can't compare\
    \ `&(&isize, &isize)` with `{integer}`\n  --> /tmp/tmp3b6teljq.rs:14:65\n   |\n\
    14 |     game.iter().zip(guess.iter()).enumerate().filter(|(g, g)| g != 0).map(|(g,\
    \ g)| {\n   |                                                                \
    \ ^^ no implementation for `&(&isize, &isize) == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&(&isize, &isize)`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         ()\n             (A, B, C, D, E, F, G, H, I, J, K, L)\n            \
    \ (B, C, D, E, F, G, H, I, J, K, L)\n             (C, D, E, F, G, H, I, J, K,\
    \ L)\n             (D, E, F, G, H, I, J, K, L)\n             (E, F, G, H, I, J,\
    \ K, L)\n             (F, G, H, I, J, K, L)\n             (G, H, I, J, K, L)\n\
    \           and 5 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3b6teljq.rs:15:22\n\
    \   |\n15 |         assert!(g <= game.len());\n   |                      ^^^^^^^^^^\
    \ expected tuple, found `usize`\n   |\n   = note: expected tuple `(&isize, &isize)`\n\
    \               found type `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3b6teljq.rs:16:17\n\
    \   |\n16 |         if g == 0 {\n   |                 ^ expected tuple, found\
    \ integ"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = guess.clone();\n    for (a,\
    \ b) in game.iter().zip(guess.iter()) {\n        if a == b {\n            continue;\n\
    \        }\n        let mut min_val = a.cmp(&b) as isize;\n        if min_val\
    \ < 0 {\n            min_val = -min_val;\n        }\n        result[b] -= min_val;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp93d_idya.rs:23:9\n\
    \   |\n23 |         result[b] -= min_val;\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0];\n    let mut difference = vec![std::i32::MAX\
    \ as isize];\n\n    for (i, difference) in game.iter().zip(guess.iter()).enumerate().map(|(i,\
    \ (gs, gu))| (gs, gu)).enumerate().map(|(i, (gs, gu))| {\n        let score =\
    \ gs - gu;\n\n        if score >= 0 {\n            result.push(i);\n        }\n\
    \        else {\n            difference[i] = score;\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `result`\n\
    \  --> /tmp/tmpb2rg7uho.rs:17:115\n   |\n17 |     for (i, difference) in game.iter().zip(guess.iter()).enumerate().map(|(i,\
    \ (gs, gu))| (gs, gu)).enumerate().map(|(i, (gs, gu))| {\n   |               \
    \                                                                            \
    \                        ^ unclosed delimiter\n...\n26 |     }\n   |      - help:\
    \ `)` may belong here\n27 | \n28 |     result\n   |     ^^^^^^\n\nerror: expected\
    \ `{`, found `result`\n  --> /tmp/tmpb2rg7uho.rs:28:5\n   |\n28 |     result\n\
    \   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n\
    \   |\n28 |     { result }\n   |     +        +\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut abs_diffs = vec![0; game.len()];\n    for i in\
    \ 0..game.len() {\n        abs_diffs[i] = if guess[i] == game[i] { 0 } else {\
    \ abs(guess[i] - game[i]) };\n    }\n    abs_diffs\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpqr800vo7.rs:16:60\n\
    \   |\n16 |         abs_diffs[i] = if guess[i] == game[i] { 0 } else { abs(guess[i]\
    \ - game[i]) };\n   |                                                        \
    \    ^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    \n    let mut best_guess = guess[1..].iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut best_score = game[1..].iter().cloned().collect::<Vec<isize>>();\n\
    \n    let mut counter = 0;\n\n    for i in 0..guess.len() {\n        for j in\
    \ 0..best_guess.len() {\n            if guess[i] == best_guess[j] {\n        \
    \        counter += 1;\n            }\n        }\n        best_guess[counter]\
    \ = guess[i];\n        best_score[counter] = game[i];\n        counter += 1;\n\
    \    }\n\n    vec![best_score[i] - best_guess[i] for i in 0..counter]\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `<eof>`\n  --> /tmp/tmpjq3pdsz6.rs:31:52\n \
    \  |\n31 |     vec![best_score[i] - best_guess[i] for i in 0..counter]\n   | \
    \                                                   ^^^^^^^ expected `{`\n\nerror:\
    \ no rules expected the token `for`\n  --> /tmp/tmpjq3pdsz6.rs:31:40\n   |\n31\
    \ |     vec![best_score[i] - best_guess[i] for i in 0..counter]\n   |        \
    \                                ^^^ no rules expected this token in macro call\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"guess\
    \ and game vectors must be of equal length\");\n    }\n    let mut score: Vec<isize>\
    \ = vec![0; game.len()];\n    let mut wrong = vec![];\n    for &g in &game {\n\
    \        // let index = game[g];\n        // if guess == 0 {\n        //     wrong.push(index);\n\
    \        // }\n        for i in 0..game.len() {\n            score[i] = if guess[i]\
    \ == g { 0 } else { abs(guess[i] - g) };\n        }\n    }\n    if score.len()\
    \ > 0 {\n        score.iter()\n            .enumerate()\n            .filter(|(_,v)|\
    \ *v != 0)\n            .fold(score, |acc, &(_, acc)| acc + acc)\n    } else {\n\
    \        vec![]\n    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `acc` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpi6pwwl_e.rs:32:37\n   |\n32 |             .fold(score, |acc,\
    \ &(_, acc)| acc + acc)\n   |                                     ^^^ used as\
    \ parameter more than once\n\nerror[E0425]: cannot find function `abs` in this\
    \ scope\n  --> /tmp/tmpi6pwwl_e.rs:25:54\n   |\n25 |             score[i] = if\
    \ guess[i] == g { 0 } else { abs(guess[i] - g) };\n   |                      \
    \                                ^^^ not found in this scope\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmpi6pwwl_e.rs:31:32\n \
    \  |\n31 |             .filter(|(_,v)| *v != 0)\n   |                        \
    \        ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi6pwwl_e.rs:32:32\n   |\n32 |\
    \             .fold(score, |acc, &(_, acc)| acc + acc)\n   |                 \
    \               ^^^^^^^^-\n   |                                |       |\n   |\
    \                                |       expected due to this\n   |          \
    \                      expected tuple, found reference\n   |\n   = note:  expected\
    \ tuple `(usize, &isize)`\n           found reference `&_`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0415, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut game_c = game.clone();\n    let mut guess = guess.clone();\n\
    \    let mut result: Vec<isize> = guess.clone();\n    while game.len() != guess.len()\
    \ {\n        let mut game_next = game.clone();\n        let mut guess_next = guess.clone();\n\
    \        for i in 0..guess.len() {\n            let mut diff = 0;\n          \
    \  for j in 0..guess.len() {\n                if j == i {\n                  \
    \  continue;\n                }\n                if game_c[j] > game_c[i] {\n\
    \                    diff += 1;\n                } else {\n                  \
    \  diff += -1;\n                }\n            }\n            if diff != 0 {\n\
    \                let mut x = guess[i];\n                guess[i] = x;\n      \
    \          game_next[i] += 1;\n                guess_next[i] += -1;\n        \
    \    }\n        }\n        game = game_next;\n        guess = guess_next;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp7uq7rbg5.rs:14:9\n\
    \   |\n14 |     let mut game_c = game.clone();\n   |         ----^^^^^^\n   |\
    \         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmp7uq7rbg5.rs:16:9\n\
    \   |\n16 |     let mut result: Vec<isize> = guess.clone();\n   |         ----^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n\nwarning: variable does\
    \ not need to be mutable\n  --> /tmp/tmp7uq7rbg5.rs:33:21\n   |\n33 |        \
    \         let mut x = guess[i];\n   |                     ----^\n   |        \
    \             |\n   |                     help: remove this `mut`\n\nerror[E0384]:\
    \ cannot assign to immutable argument `game`\n  --> /tmp/tmp7uq7rbg5.rs:39:9\n\
    \   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |            ---- help: consider making this binding mutable: `mut game`\n\
    ...\n39 |         game = game_next;\n   |         ^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error; 3 warnings emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut scores = vec![];\n\
    \n    // TODO: You might need to rethink how you're computing scores and guessing.\n\
    \    for val in game.iter() {\n        scores.push(val);\n    }\n    for val in\
    \ guess.iter() {\n        result.push(val);\n    }\n\n    for i in scores.iter()\
    \ {\n        for j in guess.iter() {\n            let mut d = j - i;\n       \
    \     if d < 0 {\n                d = 0;\n            }\n            result.push(d);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `&&isize` from `&isize`\n  --> /tmp/tmpn6bsfk60.rs:27:27\n\
    \   |\n27 |             let mut d = j - i;\n   |                           ^ no\
    \ implementation for `&isize - &&isize`\n   |\n   = help: the trait `Sub<&&isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6bsfk60.rs:31:25\n\
    \   |\n31 |             result.push(d);\n   |                         ^\n   |\
    \                         |\n   |                         expected `&isize`, found\
    \ integer\n   |                         help: consider borrowing here: `&d`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpn6bsfk60.rs:34:5\n   |\n13 | fn\
    \ compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |         \
    \                                           ---------- expected `Vec<isize>` because\
    \ of return type\n...\n34 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // todo\n    vec![0, 0, 0, 0, 0, 0]\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp3sn7j01u.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut dist = vec![0; game.len()];\n    for i in game.iter().zip(guess.iter()).filter(|&(_,\
    \ x)| x == 0) {\n        dist[i] = dist[i] + 1;\n    }\n    for i in game.iter().zip(guess.iter())\
    \ {\n        dist[i] = dist[i] - game[i[0]] - guess[i[1]];\n    }\n    dist\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp9rahf_bp.rs:15:63\n\
    \   |\n15 |     for i in game.iter().zip(guess.iter()).filter(|&(_, x)| x == 0)\
    \ {\n   |                                                               ^^ no\
    \ implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `(&isize, &isize)`\n  --> /tmp/tmp9rahf_bp.rs:16:9\n  \
    \ |\n16 |         dist[i] = dist[i] + 1;\n   |         ^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `(&isize, &isize)`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `(Bound<usize>, Bound<usize>)`\n   = note: required because\
    \ of the requirements on the impl of `Index<(&isize, &isize)>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `(&isize, &isize)`\n\
    \  --> /tmp/tmp9rahf_bp.rs:16:19\n   |\n16 |         dist[i] = dist[i] + 1;\n\
    \   |                   ^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `(&isize, &isize)`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `(Bound<usize>, Bound<usize>)`\n   = note: required because of the requirements\
    \ on the impl of `Index<(&isize, &isize)>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `(&isize, &isize)`\n  --> /tmp/tmp9rahf_bp.rs:19:9\n\
    \   |\n19 |         dist[i] = dist[i] - game[i[0]] - guess[i[1]];\n   |      \
    \   ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `(&isize, &isize)`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `(Bo"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        return vec![abs(gues[0]\
    \ - game[0]), abs(gues[1] - game[1]), abs(gues[2] - game[2]), abs(gues[3] - game[3]),\
    \ abs(gues[4] - game[4]), abs(gues[5] - game[5])]\n    }\n    else {\n       \
    \ return vec![abs(game[0] - guess[0]), abs(game[1] - guess[1]), abs(game[2] -\
    \ guess[2]), abs(game[3] - guess[3]), abs(game[4] - guess[4]), abs(game[5] - guess[5])]\n\
    \    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpoxuxcjxl.rs:15:21\n\
    \   |\n15 | ...   return vec![abs(gues[0] - game[0]), abs(gues[1] - game[1]),\
    \ abs(gues[2] - game[2]), abs(gues[3] - game[3]), abs(gues[4] - game[4]),...\n\
    \   |                   ^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `gues` in this scope\n  --> /tmp/tmpoxuxcjxl.rs:15:25\n   |\n15 | ...\
    \   return vec![abs(gues[0] - game[0]), abs(gues[1] - game[1]), abs(gues[2] -\
    \ game[2]), abs(gues[3] - game[3]), abs(gues[4] - game[4]),...\n   |         \
    \              ^^^^ help: a local variable with a similar name exists: `guess`\n\
    \nerror[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpoxuxcjxl.rs:15:45\n\
    \   |\n15 | ...   return vec![abs(gues[0] - game[0]), abs(gues[1] - game[1]),\
    \ abs(gues[2] - game[2]), abs(gues[3] - game[3]), abs(gues[4] - game[4]),...\n\
    \   |                                           ^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `gues` in this scope\n  --> /tmp/tmpoxuxcjxl.rs:15:49\n\
    \   |\n15 | ...   return vec![abs(gues[0] - game[0]), abs(gues[1] - game[1]),\
    \ abs(gues[2] - game[2]), abs(gues[3] - game[3]), abs(gues[4] - game[4]),...\n\
    \   |                                               ^^^^ help: a local variable\
    \ with a similar name exists: `guess`\n\nerror[E0425]: cannot find function `abs`\
    \ in this scope\n  --> /tmp/tmpoxuxcjxl.rs:15:69\n   |\n15 | ...   return vec![abs(gues[0]\
    \ - game[0]), abs(gues[1] - game[1]), abs(gues[2] - game[2]), abs(gues[3] - game[3]),\
    \ abs(gues[4] - game[4]),...\n   |                                           \
    \                        ^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `gues` in this scope\n  --> /tmp/tmpoxuxcjxl.rs:15:73\n   |\n15 | ...\
    \   return vec![abs(gues[0] - game[0]), abs(gues[1] - game[1]), abs(gues[2] -\
    \ game[2]), abs(gues[3] - game[3]), abs(gues[4] - game[4]),...\n   |         \
    \                                                              ^^^^ help: a local\
    \ variable with a similar name exists: `guess`\n\nerror[E0425]: cannot find function\
    \ `abs` in this s"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diff_sum = game.iter().cloned().zip(guess.iter().cloned()).map(|(a,b)|\
    \ b - a);\n    diff_sum.for_each(|diff| {\n        if diff < 0 {\n           \
    \ diff = -diff;\n        }\n    });\n    diff_sum\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75jds68b.rs:20:5\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \                                                 ---------- expected `Vec<isize>`\
    \ because of return type\n14 |     let mut diff_sum = game.iter().cloned().zip(guess.iter().cloned()).map(|(a,b)|\
    \ b - a);\n   |                                                              \
    \              ------------- the found closure\n...\n20 |     diff_sum\n   | \
    \    ^^^^^^^^ expected struct `Vec`, found struct `Map`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Map<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, Cloned<std::slice::Iter<'_, isize>>>, [closure@/tmp/tmp75jds68b.rs:14:76:\
    \ 14:89]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total: usize = 0;\n    let mut max_total: isize\
    \ = std::i32::MAX;\n    for n in game.iter() {\n        if guess == n {\n    \
    \        total += 1;\n            max_total = std::cmp::max(max_total, total);\n\
    \        }\n    }\n    let mut min_total: isize = std::i32::MAX;\n    for n in\
    \ guess.iter() {\n        if game == n {\n            total += 1;\n          \
    \  min_total = std::cmp::min(min_total, total);\n        }\n    }\n    let mut\
    \ difference: isize = 0;\n    for n in guess.iter() {\n        if game == n {\n\
    \            difference += n;\n        }\n    }\n    if min_total < 0 {\n    \
    \    difference += max_total;\n    }\n    if difference >= 0 {\n        difference\n\
    \    } else {\n        difference + max_total\n    }\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph96bvr5u.rs:15:32\n   |\n\
    15 |     let mut max_total: isize = std::i32::MAX;\n   |                     \
    \   -----   ^^^^^^^^^^^^^ expected `isize`, found `i32`\n   |                \
    \        |\n   |                        expected due to this\n   |\nhelp: you\
    \ can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     let mut max_total: isize = std::i32::MAX.try_into().unwrap();\n\
    \   |                                             ++++++++++++++++++++\n\nerror[E0277]:\
    \ can't compare `Vec<isize>` with `&isize`\n  --> /tmp/tmph96bvr5u.rs:17:18\n\
    \   |\n17 |         if guess == n {\n   |                  ^^ no implementation\
    \ for `Vec<isize> == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is\
    \ not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph96bvr5u.rs:19:50\n   |\n19 |             max_total = std::cmp::max(max_total,\
    \ total);\n   |                                                  ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n19 |             max_total\
    \ = std::cmp::max(max_total, total.try_into().unwrap());\n   |               \
    \                                        ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph96bvr5u.rs:22:32\n   |\n22 |     let mut min_total:\
    \ isize = std::i32::MAX;\n   |                        -----   ^^^^^^^^^^^^^ expected\
    \ `isize`, found `i32`\n   |                        |\n   |                  \
    \      expected due to this\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n22 |     let mut min_total:\
    \ isize = std:"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let len = game.len();\n    let mut diff_vec = vec![0; len];\n\
    \    for i in 0..len {\n        diff_vec[i] = if i < guess.len() {\n         \
    \   guess[i] - game[i]\n        } else {\n            0\n        };\n    }\n \
    \   diff_vec\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpf4nun5rv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(game, guess)| {\n \
    \       if game == guess {\n            0\n        } else {\n            game-guess\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8m41oy_9.rs:14:5\n   |\n\
    13 |   fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   | \
    \                                                     ---------- expected `Vec<isize>`\
    \ because of return type\n14 | /     game.iter().zip(guess.iter()).map(|(game,\
    \ guess)| {\n15 | |         if game == guess {\n16 | |             0\n17 | | \
    \        } else {\n18 | |             game-guess\n19 | |         }\n20 | |   \
    \  })\n   | |______^ expected struct `Vec`, found struct `Map`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Map<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>, [closure@/tmp/tmp8m41oy_9.rs:14:39: 20:6]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() { return vec![0; game.len()];\
    \ }\n    \n    let mut error = 0;\n    for a in &game {\n        for b in &guess\
    \ {\n            let mut error = (a - b).abs();\n            if error < 0 { error\
    \ = - error; }\n            if error > error { break; }\n        }\n    }\n  \
    \  \n    return vec![error; game.len()];\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp9fb9ew2j.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer = 0;\n    for (i, val) in game.iter().zip(guess.iter()).enumerate().cloned()\
    \ {\n        if val == 0 {\n            answer += game.len() - i;\n        }\n\
    \    }\n    answers![answer]\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `answers` in this scope\n  --> /tmp/tmp9mw75j63.rs:20:5\n\
    \   |\n20 |     answers![answer]\n   |     ^^^^^^^\n\nerror[E0271]: type mismatch\
    \ resolving `<Enumerate<Zip<std::slice::Iter<'_, isize>, std::slice::Iter<'_,\
    \ isize>>> as Iterator>::Item == &_`\n    --> /tmp/tmp9mw75j63.rs:15:63\n    \
    \ |\n15   |     for (i, val) in game.iter().zip(guess.iter()).enumerate().cloned()\
    \ {\n     |                                                               ^^^^^^\
    \ expected reference, found tuple\n     |\n     = note: expected reference `&_`\n\
    \                    found tuple `(usize, (&isize, &isize))`\nnote: required by\
    \ a bound in `cloned`\n\nerror[E0271]: type mismatch resolving `<Enumerate<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>> as Iterator>::Item == &_`\n  --> /tmp/tmp9mw75j63.rs:15:21\n\
    \   |\n15 |     for (i, val) in game.iter().zip(guess.iter()).enumerate().cloned()\
    \ {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected tuple, found reference\n   |\n   = note:  expected tuple `(usize, (&isize,\
    \ &isize))`\n           found reference `&_`\n   = note: required because of the\
    \ requirements on the impl of `Iterator` for `Cloned<Enumerate<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>>>`\n   = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `Cloned<Enumerate<Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>>>`\n\nerror[E0271]: type mismatch resolving\
    \ `<Enumerate<Zip<std::slice::Iter<'_, isize>, std::slice::Iter<'_, isize>>> as\
    \ Iterator>::Item == &_`\n  --> /tmp/tmp9mw75j63.rs:15:21\n   |\n15 |     for\
    \ (i, val) in game.iter().zip(guess.iter()).enumerate().cloned() {\n   |     \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple,\
    \ found reference\n   |\n   = note:  expected tuple `(usize, (&isize, &isize))`\n\
    \           found reference `&_`\n   = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<Enumerate<Zip<std::slice::Iter<'_, isize>,\
    \ std::slice::Iter<'_, isize>>>>`\n\nerror: abor"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = Vec::<isize>::new();\n    for i in 0..game.len()\
    \ {\n        if let Some(j) = (guess.get(&i) - game.get(&i)) {\n            score.push(j);\n\
    \        }\n    }\n    score\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `let` scrutinee expression\n  -->\
    \ /tmp/tmpx7hzqzuc.rs:16:26\n   |\n16 |         if let Some(j) = (guess.get(&i)\
    \ - game.get(&i)) {\n   |                          ^                         \
    \   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n   |\n16 -         if let Some(j) = (guess.get(&i) - game.get(&i))\
    \ {\n16 +         if let Some(j) = guess.get(&i) - game.get(&i) {\n   | \n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `&usize`\n   --> /tmp/tmpx7hzqzuc.rs:16:37\n\
    \    |\n16  |         if let Some(j) = (guess.get(&i) - game.get(&i)) {\n    |\
    \                                 --- -^\n    |                              \
    \   |   |\n    |                                 |   slice indices are of type\
    \ `usize` or ranges of `usize`\n    |                                 |   help:\
    \ consider removing the leading `&`-reference\n    |                         \
    \        required by a bound introduced by this call\n    |\n    = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `&usize`\nnote: required by a bound\
    \ in `core::slice::<impl [T]>::get`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `&usize`\n   --> /tmp/tmpx7hzqzuc.rs:16:52\n    |\n16  |     \
    \    if let Some(j) = (guess.get(&i) - game.get(&i)) {\n    |                \
    \                                --- -^\n    |                               \
    \                 |   |\n    |                                               \
    \ |   slice indices are of type `usize` or ranges of `usize`\n    |          \
    \                                      |   help: consider removing the leading\
    \ `&`-reference\n    |                                                required\
    \ by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `&usize`\nnote: required by a bound in `core::slice::<impl\
    \ [T]>::get`\n\nerror[E0369]: cannot subtract `Option<&_>` from `Option<&_>`\n\
    \  --> /tmp/tmpx7hzqzuc.rs:16:41\n   |\n16 |         if let Some(j) = (guess.get(&i)\
    \ - game.get(&i)) {\n   |                    "
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let guesses_len = guess.len();\n    let mut differences\
    \ = vec![0; guesses_len];\n\n    let mut game_len = game.len();\n    let mut max_difference\
    \ = 0;\n\n    let mut index = 0;\n    let mut max = 0;\n\n    while index < game_len\
    \ {\n        if game[index] == guess[index] {\n            differences[index]\
    \ = 0;\n            max = game[index];\n        } else {\n            let difference\
    \ = game[index] - guess[index];\n            if difference > 0 {\n           \
    \     differences[index] = difference;\n                max = difference;\n  \
    \          } else {\n                differences[index] = -difference;\n     \
    \           max = (-difference);\n            }\n        }\n\n        index +=\
    \ 1\n        if max > max_difference {\n            max_difference = max;\n  \
    \      }\n    }\n\n    for index in 0..guesses_len - 1 {\n        differences[index]\
    \ = max_difference - differences[index];\n    }\n\n    differences\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpv31bfcgw.rs:38:19\n\
    \   |\n38 |         index += 1\n   |                   ^ help: add `;` here\n\
    39 |         if max > max_difference {\n   |         -- unexpected token\n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmpv31bfcgw.rs:34:23\n\
    \   |\n34 |                 max = (-difference);\n   |                       ^\
    \           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n34 -                 max = (-difference);\n\
    34 +                 max = -difference;\n   | \n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(_, g)| {\n        if\
    \ *g != *game {\n            return g.abs() - game.abs();\n        } else {\n\
    \            return 0;\n        }\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfmlxqh7h.rs:15:18\n   |\n\
    15 |         if *g != *game {\n   |                  ^^^^^ expected `isize`, found\
    \ slice `[isize]`\n\nerror[E0599]: no method named `abs` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpfmlxqh7h.rs:16:35\n   |\n16 |          \
    \   return g.abs() - game.abs();\n   |                                   ^^^ method\
    \ not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        return vec![0;\
    \ game.len()];\n    }\n\n    game.iter().zip(guess.iter()).map(|(score, _)| {\n\
    \        if score < 0 {\n            -score\n        } else {\n            score\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9or_fe9u.rs:19:20\n   |\n\
    19 |         if score < 0 {\n   |                    ^\n   |                 \
    \   |\n   |                    expected `&isize`, found integer\n   |        \
    \            help: consider borrowing here: `&0`\n\nerror[E0308]: `if` and `else`\
    \ have incompatible types\n  --> /tmp/tmp9or_fe9u.rs:22:13\n   |\n19 | /     \
    \    if score < 0 {\n20 | |             -score\n   | |             ------ expected\
    \ because of this\n21 | |         } else {\n22 | |             score\n   | | \
    \            ^^^^^ expected `isize`, found `&isize`\n23 | |         }\n   | |_________-\
    \ `if` and `else` have incompatible types\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n22 |             *score\n   |             +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        let max_index = i;\n        let mut max_score = 0;\n        for j\
    \ in 0..game.len() {\n            if game[j] == 0 && guess[j] == 0 {\n       \
    \         continue;\n            }\n            if game[j] > guess[j] {\n    \
    \            max_score = game[j];\n                max_index = j;\n          \
    \  }\n        }\n        result[i] = max_score - guess[i];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable `max_index` is assigned to, but never used\n  --> /tmp/tmpz3i7tld2.rs:16:13\n\
    \   |\n16 |         let max_index = i;\n   |             ^^^^^^^^^\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_max_index`\
    \ instead\n\nwarning: value assigned to `max_index` is never read\n  --> /tmp/tmpz3i7tld2.rs:24:17\n\
    \   |\n24 |                 max_index = j;\n   |                 ^^^^^^^^^\n \
    \  |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe\
    \ it is overwritten before being read?\n\nerror[E0384]: cannot assign twice to\
    \ immutable variable `max_index`\n  --> /tmp/tmpz3i7tld2.rs:24:17\n   |\n16 |\
    \         let max_index = i;\n   |             ---------\n   |             |\n\
    \   |             first assignment to `max_index`\n   |             help: consider\
    \ making this binding mutable: `mut max_index`\n...\n24 |                 max_index\
    \ = j;\n   |                 ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = Vec::new();\n    score.push(0);\n    let\
    \ mut guess = guess.to_owned();\n    while guess.len() != game.len() {\n     \
    \   let mut i = 0;\n        for _ in guess.iter() {\n            let mut guessed\
    \ = false;\n            let mut guess = guess.to_owned();\n            score[i]\
    \ = score.first();\n            guess.push(0);\n            score[i] += 2;\n \
    \           for _ in guess.iter() {\n                if game[i] > game[i - 2]\
    \ {\n                    guessed = true;\n                    guess.push(1);\n\
    \                    score[i] += 1;\n                    break;\n            \
    \    }\n                guess.push(0);\n                score[i] += 1;\n     \
    \           i += 1;\n            }\n            if !guessed {\n              \
    \  guess.push(0);\n                score[i] += 2;\n            }\n           \
    \ guess.to_owned();\n        }\n        score.push(0);\n    }\n    score\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeezbitoi.rs:22:24\n   |\n\
    22 |             score[i] = score.first();\n   |             --------   ^^^^^^^^^^^^^\
    \ expected integer, found enum `Option`\n   |             |\n   |            \
    \ expected due to the type of this binding\n   |\n   = note: expected type `{integer}`\n\
    \              found enum `Option<&{integer}>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::<isize>::with_capacity(game.len());\n\
    \    let mut i = 0usize;\n    for e in game {\n        while i < guess.len() &&\
    \ e==guess[i] {\n            i += 1;\n        }\n        if i == guess.len() {\n\
    \            result.push(0);\n        } else {\n            result.push((e - guess[i]).abs());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 2, 3, 1]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpcpa5y4nl.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correctness = Vec::new();\n    for &score in game\
    \ {\n        if let Some(x) = guess.iter().position(|&x| *x == score) {\n    \
    \        correctness.push(x - 1);\n        }\n    }\n    if game.len() != guess.len()\
    \ {\n        correctness.resize(game.len(), 0);\n    }\n    correctness\n}\n\n\
    fn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp96pjxo8o.rs:15:9\n   |\n\
    15 |     for &score in game {\n   |         ^^^^^^    ---- this expression has\
    \ type `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `score`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp96pjxo8o.rs:16:53\n   |\n\
    16 |         if let Some(x) = guess.iter().position(|&x| *x == score) {\n   |\
    \                                                     ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp96pjxo8o.rs:23:5\n   |\n13 | fn compare(game: Vec<isize>,\
    \ guess: Vec<isize>) -> Vec<isize> {\n   |                                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    23 |     correctness\n   |     ^^^^^^^^^^^ expected `isize`, found `usize`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diffs = vec![0; game.len()];\n    for &(a, b) in\
    \ &game {\n        diffs[a] += abs(a - b);\n    }\n    for &(a, b) in &guess {\n\
    \        diffs[a] += abs(a - b);\n    }\n    diffs\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpbfiy3pvc.rs:16:21\n\
    \   |\n16 |         diffs[a] += abs(a - b);\n   |                     ^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `abs` in this scope\n\
    \  --> /tmp/tmpbfiy3pvc.rs:19:21\n   |\n19 |         diffs[a] += abs(a - b);\n\
    \   |                     ^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbfiy3pvc.rs:15:10\n   |\n15 |     for &(a, b) in &game\
    \ {\n   |          ^^^^^^    ----- this expression has type `Option<&isize>`\n\
    \   |          |\n   |          expected `isize`, found tuple\n   |\n   = note:\
    \ expected type `isize`\n             found tuple `(_, _)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbfiy3pvc.rs:18:10\n   |\n18 |     for &(a, b) in &guess\
    \ {\n   |          ^^^^^^    ------ this expression has type `Option<&isize>`\n\
    \   |          |\n   |          expected `isize`, found tuple\n   |\n   = note:\
    \ expected type `isize`\n             found tuple `(_, _)`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = guess.iter().cloned().collect::<Vec<_>>();\n\
    \n    for g in game.iter() {\n        let mut delta: isize = 0;\n        let mut\
    \ found = false;\n        for i in res {\n            if i == g {\n          \
    \      found = true;\n                break;\n            }\n            if i\
    \ < g {\n                delta += i - g;\n            } else {\n             \
    \   delta += g - i;\n            }\n        }\n        \n        if !found {\n\
    \            delta += g - res;\n        }\n        \n        if delta < 0 {\n\
    \            delta += g;\n        }\n        \n        res.push(delta);\n    }\n\
    \    \n    res\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp22trp28l.rs:20:21\n   |\n\
    20 |             if i == g {\n   |                     ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |        \
    \     if i == *g {\n   |                     +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp22trp28l.rs:24:20\n   |\n24 |             if i < g {\n   |    \
    \                ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n24 |             if i < *g {\n   |                    +\n\n\
    error[E0277]: cannot subtract `Vec<isize>` from `&isize`\n  --> /tmp/tmp22trp28l.rs:32:24\n\
    \   |\n32 |             delta += g - res;\n   |                        ^ no implementation\
    \ for `&isize - Vec<isize>`\n   |\n   = help: the trait `Sub<Vec<isize>>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n\
    \             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n  \
    \           <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n      \
    \       <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n        \
    \   and 48 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // todo: compare guess to each entry of game\n    let mut\
    \ result = guess[..].iter().cloned().collect();\n    for i in 0..game.len() {\n\
    \        let diff = guess - &game[i];\n        result[i] += std::cmp::min(diff,\
    \ 0);\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `&isize` from `Vec<isize>`\n  --> /tmp/tmpu3gl67hl.rs:17:26\n\
    \   |\n17 |         let diff = guess - &game[i];\n   |                    -----\
    \ ^ -------- &isize\n   |                    |\n   |                    Vec<isize>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer = Vec::new();\n    answer.push(0);\n   \
    \ for ix in 0..game.len() {\n        answer.push(max(score(ix, game), guess[ix]));\n\
    \    }\n    answer\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_i3a_76t.rs:17:21\n\
    \   |\n17 |         answer.push(max(score(ix, game), guess[ix]));\n   |      \
    \               ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function\
    \ `score` in this scope\n  --> /tmp/tmp_i3a_76t.rs:17:25\n   |\n17 |         answer.push(max(score(ix,\
    \ game), guess[ix]));\n   |                         ^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Game and\
    \ Guess must have the same length\");\n    }\n\n    let mut diffs: Vec<isize>\
    \ = Vec::with_capacity(guess.len());\n    for (&g, _) in guess.iter().zip(game.iter())\
    \ {\n        if g != 0 {\n            diffs.push(abs(g - game));\n        }\n\
    \    }\n\n    diffs\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpv_y1v896.rs:21:24\n\
    \   |\n21 |             diffs.push(abs(g - game));\n   |                     \
    \   ^^^ not found in this scope\n\nerror[E0277]: cannot subtract `Vec<isize>`\
    \ from `isize`\n  --> /tmp/tmpv_y1v896.rs:21:30\n   |\n21 |             diffs.push(abs(g\
    \ - game));\n   |                              ^ no implementation for `isize\
    \ - Vec<isize>`\n   |\n   = help: the trait `Sub<Vec<isize>>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correct: Vec<isize> = vec![0; game.len()];\n  \
    \  for i in 0..game.len() {\n        if game[i] == guess[i] {\n            correct[i]\
    \ = 0;\n        } else {\n            correct[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return correct\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmphwonp_py.rs:19:26\n\
    \   |\n19 |             correct[i] = abs(game[i] - guess[i]);\n   |          \
    \                ^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).filter(|(v, w)| v == w).map(|(v,\
    \ w)| {\n        (v - w).abs() as isize\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpc_wdnldn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    for a in 0..game.len()\
    \ {\n        let b = guess.iter().position(|&x| x == game[a]);\n        result[a]\
    \ = if b == Some(0) { 0 } else { abs(a - b!.0) };\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `.`\n  --> /tmp/tmpgewjnjs5.rs:17:60\n\
    \   |\n17 |         result[a] = if b == Some(0) { 0 } else { abs(a - b!.0) };\n\
    \   |                                                            ^ expected one\
    \ of `(`, `[`, or `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer = Vec::new();\n    answer.extend_from_slice(&[0;\
    \ game.len()]);\n    answer.extend_from_slice(&[0; guess.len()]);\n    for m in\
    \ 0..game.len() {\n        for i in 0..guess.len() {\n            if game[m] ==\
    \ guess[i] {\n                answer[m] -= 1;\n            }\n        }\n    }\n\
    \    if answer.iter().all(|&x| x == 0) {\n        answer.iter().cloned()\n   \
    \ } else {\n        answer.iter().cloned()\n            .map(|&x| if x == 0 {\n\
    \                -x\n            } else {\n                x\n            })\n\
    \            .collect()\n    }\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpl0uwtafw.rs:15:35\n   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n   |            ---- this would need to be a `const`\n14 |\
    \     let mut answer = Vec::new();\n15 |     answer.extend_from_slice(&[0; game.len()]);\n\
    \   |                                   ^^^^\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmpl0uwtafw.rs:16:35\n   |\n13\
    \ | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |    \
    \                          ----- this would need to be a `const`\n...\n16 |  \
    \   answer.extend_from_slice(&[0; guess.len()]);\n   |                       \
    \            ^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl0uwtafw.rs:25:9\n\
    \   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n25 |         answer.iter().cloned()\n   |     \
    \    ^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `Cloned`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Cloned<std::slice::Iter<'_,\
    \ {integer}>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl0uwtafw.rs:28:19\n\
    \   |\n28 |             .map(|&x| if x == 0 {\n   |                   ^--\n  \
    \ |                   ||\n   |                   |expected due to this\n   | \
    \                  expected integer, found reference\n   |                   help:\
    \ did you mean `x`: `&{integer}`\n   |\n   = note:   expected type `{integer}`\n\
    \           found reference `&_`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::<isize>::with_capacity(game.len());\n\
    \    for i in 0..game.len() {\n        let mut distance = Vec::<isize>::with_capacity(guess.len());\n\
    \        guess[i] = game[i];\n        for j in 0..guess.len() {\n            distance[j]\
    \ += abs(guess[i] - game[j]);\n        }\n        if distance.iter().all(|x| x\
    \ == 0) {\n            result.push(0);\n        } else {\n            result.push(distance.iter().max().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpsov5797x.rs:19:28\n\
    \   |\n19 |             distance[j] += abs(guess[i] - game[j]);\n   |        \
    \                    ^^^ not found in this scope\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n  --> /tmp/tmpsov5797x.rs:21:38\n   |\n21 |     \
    \    if distance.iter().all(|x| x == 0) {\n   |                              \
    \        ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsov5797x.rs:24:25\n   |\n24 |\
    \             result.push(distance.iter().max().unwrap());\n   |             \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n24 |             result.push(*distance.iter().max().unwrap());\n\
    \   |                         +\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter()\n        .zip(guess.iter())\n        .map(|(_,\
    \ guess)| (guess - game).abs() as isize)\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1],\
    \ vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `Vec<isize>` from `&isize`\n  --> /tmp/tmp081i8b6f.rs:16:34\n\
    \   |\n16 |         .map(|(_, guess)| (guess - game).abs() as isize)\n   |   \
    \                               ^ no implementation for `&isize - Vec<isize>`\n\
    \   |\n   = help: the trait `Sub<Vec<isize>>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0, 0, 0, 0, 0, 0];\n    let mut max_score\
    \ = game[0];\n    let mut min_score = game[0];\n    for i in game.iter().rev()\
    \ {\n        if i > max_score {\n            max_score = i;\n        }\n     \
    \   if i < min_score {\n            min_score = i;\n        }\n    }\n\n    for\
    \ i in (0..guess.len()).rev() {\n        if guess > max_score {\n            result[0]\
    \ = 0;\n            if guess == min_score {\n                result[1] = 0;\n\
    \            } else {\n                result[1] = abs (guess - min_score);\n\
    \            }\n            result[2] = 0;\n            break;\n        }\n  \
    \  }\n\n    for i in (0..game.len()).rev() {\n        if game > max_score {\n\
    \            result[0] = 0;\n            result[1] = abs (game - max_score);\n\
    \            result[2] = 0;\n            break;\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpm2rodvmz.rs:32:29\n\
    \   |\n32 |                 result[1] = abs (guess - min_score);\n   |       \
    \                      ^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `abs` in this scope\n  --> /tmp/tmpm2rodvmz.rs:42:25\n   |\n42 |  \
    \           result[1] = abs (game - max_score);\n   |                        \
    \ ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2rodvmz.rs:18:16\n\
    \   |\n18 |         if i > max_score {\n   |                ^^^^^^^^^\n   |  \
    \              |\n   |                expected `&isize`, found `isize`\n   | \
    \               help: consider borrowing here: `&max_score`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm2rodvmz.rs:19:25\n   |\n15 |     let mut max_score = game[0];\n\
    \   |                         ------- expected due to this value\n...\n19 |  \
    \           max_score = i;\n   |                         ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |        \
    \     max_score = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm2rodvmz.rs:21:16\n   |\n21 |         if i < min_score\
    \ {\n   |                ^^^^^^^^^\n   |                |\n   |              \
    \  expected `&isize`, found `isize`\n   |                help: consider borrowing\
    \ here: `&min_score`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2rodvmz.rs:22:25\n\
    \   |\n16 |     let mut min_score = game[0];\n   |                         -------\
    \ expected due to this value\n...\n22 |             min_score = i;\n   |     \
    \                    ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |             min_score = *i;\n   |     \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2rodvmz.rs:27:20\n\
    \   |\n27 |         if guess > max_score {\n   |                    ^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror[E0277]: can't compare `Vec<isize>`\
    \ with `isize`\n  --> /tmp/tm"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(g, _)| {\n        let\
    \ diff = g.abs() - game.iter().filter(|&c| c == c).count();\n        if diff ==\
    \ 0 {\n            0\n        } else {\n            diff\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfct8t6ky.rs:15:30\n   |\n\
    15 |         let diff = g.abs() - game.iter().filter(|&c| c == c).count();\n \
    \  |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n\
    \  --> /tmp/tmpfct8t6ky.rs:15:28\n   |\n15 |         let diff = g.abs() - game.iter().filter(|&c|\
    \ c == c).count();\n   |                            ^ no implementation for `isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result: Vec<isize> = game.clone();\n    for &mut\
    \ i in game.iter_mut() {\n        if *i == *guess[game.len() - 1] {\n        \
    \    *i = -1;\n        } else {\n            result.push(*i - *guess[game.len()\
    \ - 1]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjj9el_m4.rs:16:12\n\
    \   |\n16 |         if *i == *guess[game.len() - 1] {\n   |            ^^\n\n\
    error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjj9el_m4.rs:16:18\n\
    \   |\n16 |         if *i == *guess[game.len() - 1] {\n   |                  ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjj9el_m4.rs:17:13\n\
    \   |\n17 |             *i = -1;\n   |             ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmpjj9el_m4.rs:19:25\n   |\n19 |        \
    \     result.push(*i - *guess[game.len() - 1]);\n   |                        \
    \ ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpjj9el_m4.rs:19:30\n\
    \   |\n19 |             result.push(*i - *guess[game.len() - 1]);\n   |      \
    \                        ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0; game.len()];\n    for (index,\
    \ score) in game.iter().enumerate() {\n        result[index] = match guess.iter().position(|x|\
    \ *x == score) {\n            Some(index) => 0,\n            None => abs(score\
    \ - guess[index])\n        };\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmptq2w9m21.rs:18:21\n\
    \   |\n18 |             None => abs(score - guess[index])\n   |              \
    \       ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptq2w9m21.rs:16:63\n\
    \   |\n16 |         result[index] = match guess.iter().position(|x| *x == score)\
    \ {\n   |                                                               ^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |         result[index] = match guess.iter().position(|x| *x == *score)\
    \ {\n   |                                                               +\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    guess = guess.to_owned();\n    let mut game = game.to_owned();\n\
    \    let mut result = Vec::with_capacity(guess.len());\n    let mut difference\
    \ = 0;\n    for _ in 0..guess.len() {\n        if let Some(i) = get_index(&game,\
    \ guess) {\n            game[i] = 0;\n        }\n        else {\n            difference\
    \ += game[i] - guess[i];\n        }\n        result.push(difference);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_index` in this scope\n  --> /tmp/tmph9gsh4km.rs:19:26\n\
    \   |\n19 |         if let Some(i) = get_index(&game, guess) {\n   |         \
    \                 ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `i` in this scope\n  --> /tmp/tmph9gsh4km.rs:23:32\n   |\n23 |       \
    \      difference += game[i] - guess[i];\n   |                               \
    \ ^ not found in this scope\n\nerror[E0425]: cannot find value `i` in this scope\n\
    \  --> /tmp/tmph9gsh4km.rs:23:43\n   |\n23 |             difference += game[i]\
    \ - guess[i];\n   |                                           ^ not found in this\
    \ scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // Your code here\n    let mut total: Vec<isize> = vec![0;\
    \ game.len()];\n    for &score in &game {\n        let mut found: isize = 0;\n\
    \        let mut best: isize = 0;\n        for &guess in &guess {\n          \
    \  if score == guess {\n                total [found] += 1;\n            } else\
    \ {\n                let diff = score.abs() - guess.abs();\n                if\
    \ diff > best {\n                    best = diff;\n                }\n       \
    \     }\n        }\n    }\n    return total;\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkqowawfj.rs:21:17\n\
    \   |\n21 |                 total [found] += 1;\n   |                 ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO: replace this with the solution\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    for m in 0..game.len() {\n        result[m] =\
    \ std::cmp::min(game[m], guess[m]);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpwxkxpn8i.rs:17:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(a, b)| {\n        if\
    \ a == b {\n            0\n        } else {\n            a as isize - b as isize\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpv8y6jm6r.rs:18:13\n\
    \   |\n18 |             a as isize - b as isize\n   |             -^^^^^^^^^\n\
    \   |             |\n   |             cannot cast `&isize` as `isize`\n   |  \
    \           help: dereference the expression: `*a`\n\nerror[E0606]: casting `&isize`\
    \ as `isize` is invalid\n  --> /tmp/tmpv8y6jm6r.rs:18:26\n   |\n18 |         \
    \    a as isize - b as isize\n   |                          -^^^^^^^^^\n   | \
    \                         |\n   |                          cannot cast `&isize`\
    \ as `isize`\n   |                          help: dereference the expression:\
    \ `*b`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0606`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut total = 0;\n    for index, i in game.iter().enumerate()\
    \ {\n        if guess[index] == i {\n            total += 1;\n        } else {\n\
    \            total += guess[index] - i;\n        }\n    }\n    if game.len() ==\
    \ guess.len() {\n        vec![total]\n    } else {\n        vec![total - guess[0]\
    \ as isize]\n    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected `,` in pattern\n  --> /tmp/tmp5x5mo5gm.rs:15:14\n   |\n\
    15 |     for index, i in game.iter().enumerate() {\n   |              ^\n   |\n\
    help: try adding parentheses to match on a tuple\n   |\n15 |     for (index, i)\
    \ in game.iter().enumerate() {\n   |         +        +\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(i, j)| (*i - *j).abs()).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        score[i] = game.iter().take(i + 1).count(|x| x == guess[i]) / game.len()\
    \ - 1.0;\n    }\n    score\n}\n\nfn main() {\n    let candidate = compare;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmpkrhvxxoq.rs:16:44\n    |\n16  |         score[i] = game.iter().take(i\
    \ + 1).count(|x| x == guess[i]) / game.len() - 1.0;\n    |                   \
    \                         ^^^^^ ----------------- supplied 1 argument\n    | \
    \                                           |\n    |                         \
    \                   expected 0 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror[E0277]: cannot subtract `{float}` from `usize`\n  --> /tmp/tmpkrhvxxoq.rs:16:82\n\
    \   |\n16 |         score[i] = game.iter().take(i + 1).count(|x| x == guess[i])\
    \ / game.len() - 1.0;\n   |                                                  \
    \                                ^ no implementation for `usize - {float}`\n \
    \  |\n   = help: the trait `Sub<{float}>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut difference = Vec::with_capacity(guess.len());\n\
    \    for i in 0..guess.len() {\n        let difference = if guess[i] < game[i]\
    \ {\n            1\n        } else {\n            -1\n        };\n        difference.push(difference);\n\
    \    }\n    difference\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmpxk42eskx.rs:21:20\n   |\n21 |         difference.push(difference);\n\
    \   |                    ^^^^ method not found in `{integer}`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut diff = guess.iter().enumerate().map(|(i, val)|\
    \ {\n        if val == game[i] {\n            0\n        } else {\n          \
    \  abs(game[i] - val)\n        }\n    });\n    let mut sum = 0;\n    for ele in\
    \ diff {\n        sum += ele;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpesxw5dfk.rs:18:13\n\
    \   |\n18 |             abs(game[i] - val)\n   |             ^^^ not found in\
    \ this scope\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpesxw5dfk.rs:15:16\n\
    \   |\n15 |         if val == game[i] {\n   |                ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpesxw5dfk.rs:25:5\n   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n25 |     sum\n   |     ^^^\
    \ expected struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `{integer}`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Game and\
    \ guess must have the same length\")\n    }\n    let mut score_vector = Vec::new();\n\
    \    for i in 0..game.len() {\n        score_vector.push(game[i] - guess[i]);\n\
    \    }\n    score_vector\n}\n\nfn main() {\n    let candidate = compare;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game.iter().zip(guess.iter()).map(|(a, b)| *b - a).collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpu43qjfr5.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut answer = Vec::with_capacity(game.len());\n    let\
    \ mut difference = 0;\n    \n    for index in 0..game.len() {\n        if game[index]\
    \ == guess[index] {\n            answer.push(0);\n        } else {\n         \
    \   difference = guess[index] - game[index];\n            answer.push(difference);\n\
    \        }\n    }\n    answer\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, -3, -3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmp8u8kmvhp.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        vec![0; game.len()]\n\
    \    } else {\n        let mut difference = vec![0; game.len()];\n        for\
    \ i in 0..game.len() {\n            difference[i] = game[i] - guess[i];\n    \
    \    }\n        difference\n    }\n}\n\nfn main() {\n    let candidate = compare;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0,\
    \ 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0, 0, 0], vec![0, 0,\
    \ 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
    \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    // Your code here\n\n    // return vec![0, 5, 4, 0, 0,\
    \ 4]\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphe6372mp.rs:13:52\n   |\n\
    13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |   \
    \ -------                                         ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    game\n        .iter()\n        .zip(guess.iter())\n   \
    \     .map(|(game, guess)| {\n            let mut diff = match game - guess {\n\
    \                Some(game) => game,\n                None => return game.abs(),\n\
    \            };\n            if diff > 0 {\n                diff * -1\n      \
    \      } else {\n                diff\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdiet0stx.rs:19:17\n   |\n\
    18 |             let mut diff = match game - guess {\n   |                   \
    \               ------------ this expression has type `isize`\n19 |          \
    \       Some(game) => game,\n   |                 ^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdiet0stx.rs:20:17\n\
    \   |\n18 |             let mut diff = match game - guess {\n   |            \
    \                      ------------ this expression has type `isize`\n19 |   \
    \              Some(game) => game,\n20 |                 None => return game.abs(),\n\
    \   |                 ^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![0, 5, 0, 0, 0, 4];\n    for (a, b)\
    \ in game.iter().zip(guess.iter()) {\n        let ab = abs(a - b);\n        if\
    \ ab == 0 {\n            continue;\n        }\n        result[b] -= ab;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpznkcgha3.rs:16:18\n\
    \   |\n16 |         let ab = abs(a - b);\n   |                  ^^^ not found\
    \ in this scope\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpznkcgha3.rs:20:9\n   |\n20 |         result[b] -= ab;\n   |   \
    \      ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let game_size = game.len();\n    let guess_size = guess.len();\n\
    \    if game_size != guess_size {\n        return vec![0; game_size];\n    }\n\
    \n    let mut difference = vec![0; game_size];\n    for index in 0..game_size\
    \ {\n        let mut guess = guess[index];\n        if guess < game[index] {\n\
    \            difference[index] = 0;\n        } else {\n            difference[index]\
    \ = guess - game[index];\n        }\n    }\n    return difference;\n}\n\nfn main()\
    \ {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5,\
    \ 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 0]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpitji3ut5.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = 0;\n\n    for index in 0..game.len() {\n\
    \        let score = if game[index] == guess[index] {\n            score + 1\n\
    \        } else {\n            score - 1\n        }\n    }\n\n    if score > 0\
    \ {\n        vec![score as isize, -score]\n    } else {\n        vec![score as\
    \ isize]\n    }\n}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnq3le2x2.rs:21:10\n   |\n\
    21 |         }\n   |          ^ help: add `;` here\n22 |     }\n   |     - unexpected\
    \ token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut wrong = 0;\n    for (i, &e) in guess.iter().enumerate()\
    \ {\n        match game.iter().position(|&r| e == r) {\n            Some(i) =>\
    \ { wrong += e - i; break; }\n            None => { wrong += abs(e - game[i]);\
    \  break; }\n        }\n    }\n    wrong\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `abs` in this scope\n  --> /tmp/tmpubc5t530.rs:18:32\n\
    \   |\n18 |             None => { wrong += abs(e - game[i]);  break; }\n   | \
    \                               ^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpubc5t530.rs:17:39\n   |\n17 |             Some(i) => {\
    \ wrong += e - i; break; }\n   |                                       ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n\
    \  --> /tmp/tmpubc5t530.rs:17:37\n   |\n17 |             Some(i) => { wrong +=\
    \ e - i; break; }\n   |                                     ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubc5t530.rs:21:5\n\
    \   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |                                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     wrong\n   |     ^^^^^ expected struct\
    \ `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `isize`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 101
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut score = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        let v = game[i] - guess[i];\n        score.push(v);\n    }\n    score\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3]`,\n right: `[0, 0, 0, 0, 3, 3]`', /tmp/tmpo64b7dwn.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut delta = Vec::new();\n\n    for &g in &game {\n\
    \        if g == guess[0] {\n            delta.push(0)\n        } else {\n   \
    \         let mut guesses = vec![guess[0]];\n            guesses.push(guess[0]);\n\
    \            for i in 1..g.len() {\n                if g[i] == guess[i] {\n  \
    \                  guesses.push(guess[i]);\n                } else {\n       \
    \             delta.push((g[i] - guess[i]));\n                    guesses.push(g[i]);\n\
    \                }\n            }\n            delta.push(guesses.len() - 1);\n\
    \            guesses.push(guesses.last());\n        }\n    }\n    return delta\n\
    }\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around method argument\n  --> /tmp/tmpvi38i84g.rs:26:32\n\
    \   |\n26 |                     delta.push((g[i] - guess[i]));\n   |         \
    \                       ^               ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n26 -                  \
    \   delta.push((g[i] - guess[i]));\n26 +                     delta.push(g[i] -\
    \ guess[i]);\n   | \n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpvi38i84g.rs:22:27\n   |\n22 |          \
    \   for i in 1..g.len() {\n   |                           ^^^ method not found\
    \ in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmpvi38i84g.rs:23:20\n   |\n23 |                 if g[i] == guess[i] {\n\
    \   |                    ^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpvi38i84g.rs:26:33\n   |\n26 |                     delta.push((g[i]\
    \ - guess[i]));\n   |                                 ^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpvi38i84g.rs:27:34\n   |\n\
    27 |                     guesses.push(g[i]);\n   |                           \
    \       ^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvi38i84g.rs:31:26\n\
    \   |\n31 |             guesses.push(guesses.last());\n   |                  \
    \        ^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvi38i84g.rs:34:12\n   |\n13 | fn compare(game:\
    \ Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n   |                       \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n34 |     return delta\n   |            ^^^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0308, E0599, E0608.\nFor more information\
    \ about an error, try `rustc --explain E03"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut correct = game;\n    for idx in 0..guess.len()\
    \ {\n        if game[idx] != guess[idx] {\n            correct[idx] -= guess[idx]\
    \ - game[idx];\n        }\n    }\n    return correct;\n}\n\nfn main() {\n    let\
    \ candidate = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1,\
    \ 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
    \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `game`\n  --> /tmp/tmpta0rgssn.rs:16:12\n\
    \   |\n13 | fn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n\
    \   |            ---- move occurs because `game` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n14 |     let mut correct = game;\n   |\
    \                       ---- value moved here\n15 |     for idx in 0..guess.len()\
    \ {\n16 |         if game[idx] != guess[idx] {\n   |            ^^^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    guess = guess.iter().cloned().collect();\n    game = game.iter().cloned().collect();\n\
    \    let mut correct = 0;\n    let mut diff = 0;\n    for i in 0..game.len() {\n\
    \        if game[i] != guess[i]  {\n            diff = (game[i] - guess[i]);\n\
    \        }\n        if diff.is_zero() {\n            correct = correct + 1;\n\
    \        }\n    }\n    vec![correct, diff]\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpcy2arzyk.rs:20:20\n\
    \   |\n20 |             diff = (game[i] - guess[i]);\n   |                   \
    \ ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n20 -             diff = (game[i] - guess[i]);\n\
    20 +             diff = game[i] - guess[i];\n   | \n\nerror[E0599]: no method\
    \ named `is_zero` found for type `isize` in the current scope\n  --> /tmp/tmpcy2arzyk.rs:22:17\n\
    \   |\n22 |         if diff.is_zero() {\n   |                 ^^^^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two vectors of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return a vector of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// >>> compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0,\
    \ 0, 0, 0, 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0,\
    \ -2])\n/// vec![4, 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>)\
    \ -> Vec<isize> {\n    if game.len() != guess.len() {\n        panic!(\"Vectors\
    \ have different lengths.\");\n    }\n    let mut result: Vec<isize> = game.clone();\n\
    \    for i in 0..game.len() {\n        if result[i] == guess[i] {\n          \
    \  result[i] = 0;\n        }\n        else {\n            result[i] += guess.len()\
    \ - i - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = compare;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4,\
    \ 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0, 0, 0, 0,\
    \ 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpafj1gysz.rs:23:26\n   |\n\
    23 |             result[i] += guess.len() - i - 1;\n   |                     \
    \     ^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ add-assign `usize` to `isize`\n  --> /tmp/tmpafj1gysz.rs:23:23\n   |\n23 | \
    \            result[i] += guess.len() - i - 1;\n   |                       ^^\
    \ no implementation for `isize += usize`\n   |\n   = help: the trait `AddAssign<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976140
