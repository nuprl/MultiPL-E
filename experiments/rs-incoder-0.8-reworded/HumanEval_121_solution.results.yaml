language: rs
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|e|\
    \ e % 2).fold(0, |acc, i| acc + i)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpkqtcocb3.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|e| e % 2).fold(0, |acc, i| acc + i)\n   | \
    \                          - ^ - {integer}\n   |                           |\n\
    \   |                           &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `e`\n   |\n10 |     lst.iter().filter(|e| *e % 2).fold(0,\
    \ |acc, i| acc + i)\n   |                           +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let evens:\
    \ Vec<_> = vec![0, 1, 2, 4, 6, 8, 10, 12, 14];\n    lst.iter()\n        .enumerate()\n\
    \        .filter(|(_, x)| x == 0 || x % 2 == 1)\n        .map(|(_, x)| x)\n  \
    \      .filter(|x| evens.contains(&x))\n        .sum()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpk9vwhw7g.rs:13:28\n\
    \   |\n13 |         .filter(|(_, x)| x == 0 || x % 2 == 1)\n   |             \
    \               ^^ no implementation for `&&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpk9vwhw7g.rs:13:38\n\
    \   |\n13 |         .filter(|(_, x)| x == 0 || x % 2 == 1)\n   |             \
    \                       - ^ - {integer}\n   |                                \
    \    |\n   |                                    &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `x`\n   |\n13 |         .filter(|(_, x)|\
    \ x == 0 || *x % 2 == 1)\n   |                                    +\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i;\n \
    \       }\n    }\n    return sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpl04itkmi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x|\
    \ x % 2 != 0).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpxw__rknq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0;\n    let mut odds = 0;\n    for el in lst.iter().rev() {\n        if el\
    \ % 2 == 0 {\n            evens += el;\n        } else {\n            odds +=\
    \ el;\n        }\n    }\n    (evens + odds).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpts0dnf9c.rs:19:20\n\
    \   |\n19 |     (evens + odds).sum()\n   |                    ^^^ `isize` is not\
    \ an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `isize: Iterator`\n           which is required by `&mut isize: Iterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .filter(|&x| x % 2 == 0)\n        .filter(|&x| x % 2 !=\
    \ 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpbl39s3pe.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for &i in lst {\n        if i % 2 == 1 {\n            sum += i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxwfbmzu8.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .map(|n| {\n            if n % 2 == 0 {\n                n\n        \
    \    } else {\n                n - 1\n            }\n        })\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmphl1qbaso.rs:15:17\n\
    \   |\n12 | /             if n % 2 == 0 {\n13 | |                 n\n   | |  \
    \               - expected because of this\n14 | |             } else {\n15 |\
    \ |                 n - 1\n   | |                 ^^^^^ expected `&isize`, found\
    \ `isize`\n16 | |             }\n   | |_____________- `if` and `else` have incompatible\
    \ types\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n \
    \       }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp9o67l48f.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .enumerate()\n        .filter(|&(idx, _)| idx % 2 == 1)\n\
    \        .map(|(_, val)| val)\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp283k8azm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    match (lst.len())\
    \ {\n        0 => 0,\n        _ => helper(lst, 0, 0),\n    }\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `helper` in this scope\n  --> /tmp/tmp0zk7c1_1.rs:12:14\n\
    \   |\n12 |         _ => helper(lst, 0, 0),\n   |              ^^^^^^ not found\
    \ in this scope\n\nwarning: unnecessary parentheses around `match` scrutinee expression\n\
    \  --> /tmp/tmp0zk7c1_1.rs:10:11\n   |\n10 |     match (lst.len()) {\n   |   \
    \        ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    help: remove these parentheses\n   |\n10 -     match (lst.len()) {\n10 +     match\
    \ lst.len() {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .filter(|&x| x % 2 == 1)\n        .filter(|&x| x % 2 ==\
    \ 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp3f6q2zx8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(_,\
    \ x)| x % 2 == 0).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpsnxb5csz.rs:10:46\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(_, x)| x % 2 == 0).sum::<isize>()\n\
    \   |                                            - ^ - {integer}\n   |       \
    \                                     |\n   |                                \
    \            &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     lst.iter().enumerate().filter(|(_, x)| *x % 2 == 0).sum::<isize>()\n\
    \   |                                            +\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<(usize, &isize)>` is not satisfied\n    --> /tmp/tmpsnxb5csz.rs:10:56\n\
    \     |\n10   |     lst.iter().enumerate().filter(|(_, x)| x % 2 == 0).sum::<isize>()\n\
    \     |                                                        ^^^ the trait `Sum<(usize,\
    \ &isize)>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for v in lst {\n        if v & 1 != 0 {\n            sum += v;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpsmaoy5wf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x|\
    \ match x % 2 {\n        0 => Some(x),\n        _ => None,\n    }).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpov4y47ue.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd\
    \ = 0.0;\n    for &i in lst {\n        if i % 2 == 0 {\n            odd += i;\n\
    \        }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4uu1qm80.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4uu1qm80.rs:16:5\n   |\n9  | fn solution(lst: Vec<isize>) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n16 |     odd\n   |     ^^^ expected `isize`, found floating-point\
    \ number\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = lst;\n    for ele in even.iter_mut() {\n        if ele % 2 == 0 {\n      \
    \      *ele += 1;\n        }\n    }\n    lst.iter().filter(|x| *x % 2 != 0).sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpesxu6o2a.rs:12:16\n\
    \   |\n12 |         if ele % 2 == 0 {\n   |            --- ^ - {integer}\n   |\
    \            |\n   |            &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `ele`\n   |\n12 |         if *ele % 2 == 0 {\n   |     \
    \       +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ < 2 {\n        return 0\n    }\n    if lst.len() % 2 != 0 {\n        let mut\
    \ even = vec![];\n        for &i in lst {\n            if i % 2 == 0 {\n     \
    \           even.push(i);\n            }\n        }\n        return even.iter().filter(|&i|\
    \ i % 2 != 0).sum();\n    }\n    return lst.iter().filter(|&i| i % 2 != 0).sum();\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgd94_kls.rs:15:13\n   |\n\
    15 |         for &i in lst {\n   |             ^^    --- this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `i`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut n\
    \ = 0isize;\n    for &i in lst {\n        if i % 2 == 0 {\n            n += i;\n\
    \        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplu0pivwa.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for index in lst.iter().position(|&x| x % 2 != 0) {\n      \
    \  sum += *index;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpvdepq_xu.rs:12:16\n\
    \   |\n12 |         sum += *index;\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum:\
    \ isize = 0;\n\n    for num in lst {\n        if num % 2 == 0 {\n            sum\
    \ += num;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpblsa7yv2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds:\
    \ Vec<isize> = vec![];\n    let mut evens: Vec<isize> = vec![];\n    for val in\
    \ lst.iter() {\n        if val % 2 != 0 {\n            evens.push(val);\n    \
    \    } else {\n            odds.push(val);\n        }\n    }\n    odds.iter().map(|x|\
    \ x + evens.iter().count()).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpidv1l1tb.rs:14:24\n   |\n\
    14 |             evens.push(val);\n   |                        ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \           evens.push(*val);\n   |                        +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpidv1l1tb.rs:16:23\n   |\n16 |             odds.push(val);\n\
    \   |                       ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             odds.push(*val);\n\
    \   |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpidv1l1tb.rs:19:29\n\
    \   |\n19 |     odds.iter().map(|x| x + evens.iter().count()).sum()\n   |    \
    \                         ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot add `usize` to `&isize`\n  --> /tmp/tmpidv1l1tb.rs:19:27\n\
    \   |\n19 |     odds.iter().map(|x| x + evens.iter().count()).sum()\n   |    \
    \                       ^ no implementation for `&isize + usize`\n   |\n   = help:\
    \ the trait `Add<usize>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,\
    \ e)| i % 2 == 1).map(|i| lst[i * 2]).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `(usize, &isize)` by `{integer}`\n  --> /tmp/tmp96obrl3m.rs:10:70\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(i, e)| i % 2 == 1).map(|i| lst[i\
    \ * 2]).sum()\n   |                                                          \
    \          - ^ - {integer}\n   |                                             \
    \                       |\n   |                                              \
    \                      (usize, &isize)\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0; // sum of the even values\n    let mut odds = 0; // sum of the odd values\n\
    \n    for &i in lst {\n        if i % 2 == 0 {\n            evens += i;\n    \
    \    } else {\n            odds += i;\n        }\n    }\n    return evens + odds;\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4xl3wa6c.rs:13:9\n   |\n\
    13 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst {\n        sum += i / 2;\n        sum += i % 2;\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `9`', /tmp/tmpg7182rdf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .enumerate()\n        .filter(|(_, val)| val % 2 == 1)\n\
    \        .fold(0, |acc, &(_, val)| acc + val)\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp7qcsd_xs.rs:13:32\n\
    \   |\n13 |         .filter(|(_, val)| val % 2 == 1)\n   |                   \
    \         --- ^ - {integer}\n   |                            |\n   |         \
    \                   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `val`\n   |\n13 |         .filter(|(_, val)| *val % 2 == 1)\n   |          \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7qcsd_xs.rs:14:24\n\
    \   |\n14 |         .fold(0, |acc, &(_, val)| acc + val)\n   |               \
    \         ^^^^^^^^-\n   |                        |       |\n   |             \
    \           |       expected due to this\n   |                        expected\
    \ tuple, found reference\n   |\n   = note:  expected tuple `(usize, &isize)`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let evens\
    \ = lst.iter().filter(|n| n % 2 == 0).count();\n    let odds = lst.iter().filter(|n|\
    \ n % 2 != 0).count();\n    lst.iter().skip(evens).sum() + (lst.iter().skip(evens).sum()\
    \ - odds)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpw2hjb1gu.rs:10:41\n\
    \   |\n10 |     let evens = lst.iter().filter(|n| n % 2 == 0).count();\n   | \
    \                                      - ^ - {integer}\n   |                 \
    \                      |\n   |                                       &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `n`\n   |\n10 | \
    \    let evens = lst.iter().filter(|n| *n % 2 == 0).count();\n   |           \
    \                            +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpw2hjb1gu.rs:11:40\n   |\n11 |     let odds = lst.iter().filter(|n|\
    \ n % 2 != 0).count();\n   |                                      - ^ - {integer}\n\
    \   |                                      |\n   |                           \
    \           &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `n`\n   |\n11 |     let odds = lst.iter().filter(|n| *n % 2 != 0).count();\n\
    \   |                                      +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut last_even = 0;\n    let mut last_odd = 1;\n\n    for &i in\
    \ lst {\n        if i % 2 == 0 {\n            sum += i;\n            last_even\
    \ = i;\n        }\n        else if i % 2 != 0 {\n            sum += last_odd -\
    \ last_even;\n            last_odd = i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq3son_u2.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut index = 0;\n    while index < lst.len() {\n        if lst[index]\
    \ % 2 == 0 {\n            sum += lst[index];\n            index += 1;\n      \
    \  } else {\n            index += 1;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp6mrgfzp4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().enumerate().filter(|(i,\
    \ n)| n % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<(usize, isize)>` is not satisfied\n\
    \    --> /tmp/tmpev6nz5ir.rs:10:65\n     |\n10   |     lst.iter().cloned().enumerate().filter(|(i,\
    \ n)| n % 2 == 1).sum::<isize>()\n     |                                     \
    \                            ^^^ the trait `Sum<(usize, isize)>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even_indexes:\
    \ Vec<isize> = vec![];\n    for i in lst.iter().enumerate().filter(|&(e, _)| e._2\
    \ % 2 == 0).map(|&(e, _)| e._1) {\n        even_indexes.push(i);\n    }\n\n  \
    \  let mut odds = even_indexes.iter().map(|&i| lst[i]);\n    odds.extend(vec![lst.last()].iter().cloned().skip(even_indexes.len()).collect::<Vec<_>>());\n\
    \    odds.iter().filter(|x| x % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `usize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmpnvmaoqxo.rs:11:56\n   |\n11 |     for i in lst.iter().enumerate().filter(|&(e,\
    \ _)| e._2 % 2 == 0).map(|&(e, _)| e._1) {\n   |                             \
    \                           ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnvmaoqxo.rs:11:74\n\
    \   |\n11 |     for i in lst.iter().enumerate().filter(|&(e, _)| e._2 % 2 == 0).map(|&(e,\
    \ _)| e._1) {\n   |                                                          \
    \                ^^^^^^-\n   |                                               \
    \                           |     |\n   |                                    \
    \                                      |     expected due to this\n   |      \
    \                                                                    expected\
    \ tuple, found reference\n   |\n   = note:  expected tuple `(usize, &isize)`\n\
    \           found reference `&_`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpnvmaoqxo.rs:15:49\n   |\n15 |     let mut\
    \ odds = even_indexes.iter().map(|&i| lst[i]);\n   |                         \
    \                        ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0599]: no method named `extend` found for struct\
    \ `Map` in the current scope\n  --> /tmp/tmpnvmaoqxo.rs:16:10\n   |\n16 |    \
    \ odds.extend(vec![lst.last()].iter().cloned().skip(even_indexes.len()).collect::<Vec<_>>());\n\
    \   |          ^^^^^^ method not found in `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpnvmaoqxo.rs:15:44:\
    \ 15:55]>`\n\nerror[E0599]: no method named `iter` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpnvmaoqxo.rs:17:10\n   |\n17 |     odds.iter().filter(|x|\
    \ x % 2 == 1).sum()\n   |          ^^^^ private field, not a method\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed "
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut i\
    \ = 0;\n    let mut sum = 0;\n    while i < lst.len() {\n        if i % 2 == 0\
    \ {\n            sum += lst[i];\n        }\n        i += 1;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp8kwk3tlq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x|\
    \ x % 2 == 1).fold(0, |acc, &x| acc + x)\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpculqv_5e.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst.iter().cloned() {\n        if i % 2 == 0 {\n        \
    \    sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp4mixrwua.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x|\
    \ x % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpbfygtdwm.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .filter(|&v| v % 2 == 0)\n        .sum(|&v| v)\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp_uhomh4u.rs:12:10\n     |\n12   |         .sum(|&v| v)\n    \
    \ |          ^^^ ------ supplied 1 argument\n     |          |\n     |       \
    \   expected 0 arguments\n     |\nnote: associated function defined here\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .enumerate()\n        .filter(|(i, x)| i % 2 == 0)\n        .map(|(i,\
    \ x)| x + (*i as isize))\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpqcituw93.rs:13:28\n\
    \   |\n13 |         .map(|(i, x)| x + (*i as isize))\n   |                   \
    \         ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens_sum\
    \ = 0;\n    for (i, num) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n\
    \            evens_sum += num;\n        }\n    }\n    evens_sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpv6uj4gn9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even:\
    \ isize = 0;\n    let mut odd: isize = 0;\n\n    for i in lst.iter() {\n     \
    \   if i / 2 % 2 == 0 {\n            even += i;\n        } else {\n          \
    \  odd += i;\n        }\n    }\n\n    even + odd\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpt0s7276n.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = lst.clone();\n    evens.iter().enumerate().filter(|(_, v)| v % 2 == 0).for_each(|(index,\
    \ &v)| {\n        if index > 0 && index > evens.len() - 1 {\n            evens.remove(index);\n\
    \        }\n    });\n    evens.iter().fold(0, |a, &v| {\n        a.checked_add(v).unwrap()\n\
    \    })\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpeoca_18r.rs:11:48\n\
    \   |\n11 |     evens.iter().enumerate().filter(|(_, v)| v % 2 == 0).for_each(|(index,\
    \ &v)| {\n   |                                              - ^ - {integer}\n\
    \   |                                              |\n   |                   \
    \                           &&isize\n   |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `v`\n   |\n11 |     evens.iter().enumerate().filter(|(_, v)|\
    \ *v % 2 == 0).for_each(|(index, &v)| {\n   |                                \
    \              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().skip_while(|&x|\
    \ x % 2 == 1).fold(0, |acc, x| acc + x)\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `12`', /tmp/tmpgsmxujux.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut counter\
    \ = 0;\n\n    for i in lst {\n        if i % 2 == 1 {\n            counter +=\
    \ i;\n        }\n    }\n\n    counter\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp6rf75yts.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .enumerate()\n        .filter(|(i, &e)| {\n            i % 2 == 1\n \
    \       })\n        .fold(0, |acc, &x| {\n            acc + x.1\n        })\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5bo51quw.rs:15:24\n   |\n\
    15 |         .fold(0, |acc, &x| {\n   |                        ^--\n   |     \
    \                   ||\n   |                        |expected due to this\n  \
    \ |                        expected tuple, found reference\n   |             \
    \           help: did you mean `x`: `&(usize, &isize)`\n   |\n   = note:  expected\
    \ tuple `(usize, &isize)`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0;\n\n    for &elt in lst {\n        if elt % 2 == 0 {\n            evens\
    \ += elt;\n        }\n    }\n\n    evens\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8i587n0a.rs:12:9\n   |\n\
    12 |     for &elt in lst {\n   |         ^^^^    --- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `elt`\n   |\n\
    \   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds\
    \ = vec![0; lst.len()];\n    for i in 0..lst.len() {\n        odds[i] = i / 2\
    \ % 2;\n    }\n    let mut evens = vec![0; lst.len()];\n    for i in 0..lst.len()\
    \ {\n        if odds[i] { evens[i] = lst[i] + lst[i - odds[i]] }\n    }\n    evens.iter().sum();\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<usize as SliceIndex<[usize]>>::Output\
    \ == bool`\n  --> /tmp/tmpc9l11obu.rs:16:12\n   |\n16 |         if odds[i] { evens[i]\
    \ = lst[i] + lst[i - odds[i]] }\n   |            ^^^^^^^ expected `usize`, found\
    \ `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc9l11obu.rs:9:33\n \
    \  |\n9  | fn solution(lst: Vec<isize>) -> isize {\n   |    --------         \
    \            ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n18 |     evens.iter().sum();\n\
    \   |                       - help: remove this semicolon\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0308.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for idx in lst.iter().rev().skip(1) {\n        if idx % 2 == 0 {\n\
    \            sum += idx;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpoelm9re2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut res\
    \ = 0;\n    let mut odd = lst.iter().filter(|&x| x % 2 == 1).count();\n\n    for\
    \ i in lst.iter().skip(odd).filter(|&x| x % 2 == 0) {\n        res += i;\n   \
    \ }\n\n    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmp0kkword7.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .cloned()\n        .enumerate()\n        .filter(|(_, elem)| elem % 2\
    \ == 1)\n        .map(|(_, elem)| elem as isize)\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpdw7o_4xb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for &i in lst.iter() {\n        if i % 2 == 0 {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp_2oaefrh.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ <= 1 {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut even:\
    \ Vec<isize> = Vec::new();\n\n    for &i in &lst {\n        sum += i;\n\n    \
    \    if i % 2 == 0 {\n            even.push(i);\n        }\n    }\n\n    even.sort_unstable();\n\
    \n    for (i, e) in even.iter().zip(even.iter().skip(1)) {\n        sum += e;\n\
    \    }\n\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpxi4r18yy.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = vec![];\n    let mut odd_sum = vec![];\n    for i in lst {\n        if i %\
    \ 2 == 0 {\n            evens.push(i);\n        } else {\n            odd_sum.push(i);\n\
    \        }\n    }\n\n    if evens.len() == 0 {\n        return 0\n    } else {\n\
    \        for sum in odd_sum {\n            sum += evens[evens.len() - 1];\n  \
    \      }\n        return *odd_sum\n    }\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps3ix5sip.rs:26:16\n   |\n\
    9  | fn solution(lst: Vec<isize>) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n26 |         return\
    \ *odd_sum\n   |                ^^^^^^^^ expected `isize`, found slice `[isize]`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s:\
    \ isize = 0;\n    for i in lst {\n        if i % 2 == 0 {\n            s += i\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpfrfhefda.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s:\
    \ isize = 0;\n    for i in lst {\n        if i % 2 != 0 {\n            s += i;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpzvbkdiv0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    let mut odd = 0;\n    for n in lst.iter() {\n        if n % 2 == 0\
    \ {\n            even += n;\n        } else {\n            odd += n;\n       \
    \ }\n    }\n    if even == 0 && odd == 0 {\n        return 0;\n    }\n    even\
    \ += odd;\n    odd\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpdrhfi5ly.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().find(|&x|\
    \ x % 2).and_then(|&x| lst.iter().skip(x).take(2)).fold(0, |acc, x| acc + x)\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvl8sia06.rs:10:26\n   |\n\
    10 |     lst.iter().find(|&x| x % 2).and_then(|&x| lst.iter().skip(x).take(2)).fold(0,\
    \ |acc, x| acc + x)\n   |                          ^^^^^ expected `bool`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvl8sia06.rs:10:63\n\
    \   |\n10 |     lst.iter().find(|&x| x % 2).and_then(|&x| lst.iter().skip(x).take(2)).fold(0,\
    \ |acc, x| acc + x)\n   |                                                    \
    \           ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n10\
    \ |     lst.iter().find(|&x| x % 2).and_then(|&x| lst.iter().skip(x.try_into().unwrap()).take(2)).fold(0,\
    \ |acc, x| acc + x)\n   |                                                    \
    \            ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvl8sia06.rs:10:47\n\
    \   |\n10 |     lst.iter().find(|&x| x % 2).and_then(|&x| lst.iter().skip(x).take(2)).fold(0,\
    \ |acc, x| acc + x)\n   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found struct `std::iter::Take`\n   |\n   = note: expected\
    \ enum `Option<_>`\n            found struct `std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>`\nhelp: try wrapping the expression in `Some`\n   |\n10 |     lst.iter().find(|&x|\
    \ x % 2).and_then(|&x| Some(lst.iter().skip(x).take(2))).fold(0, |acc, x| acc\
    \ + x)\n   |                                               +++++             \
    \             +\n\nerror[E0599]: `Option<_>` is not an iterator\n   --> /tmp/tmpvl8sia06.rs:10:75\n\
    \    |\n10  |       lst.iter().find(|&x| x % 2).and_then(|&x| lst.iter().skip(x).take(2)).fold(0,\
    \ |acc, x| acc + x)\n    |                                                   \
    \                          ^^^^ `Option<_>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Option<_>: Iterator`\n\
    \            which is required by `&mut Option<_>: Iterator`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanat"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n\n    for &n in lst {\n        if n % 2 == 1 {\n            sum += n;\n\
    \        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgejav25v.rs:12:9\n   |\n\
    12 |     for &n in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    use std::mem::size_of;\n\
    \    if lst.is_empty() {\n        return 0;\n    }\n    let mut sum = lst.iter().filter(|&x|\
    \ x % 2 == 1).fold(0, |x, &x| x + x);\n    if lst.len() > size_of::<isize>() {\n\
    \        sum += lst.iter().filter(|&x| x % 2 != 0).sum();\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `x` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmp087lgeov.rs:14:67\n   |\n14 |     let mut sum = lst.iter().filter(|&x|\
    \ x % 2 == 1).fold(0, |x, &x| x + x);\n   |                                  \
    \                                 ^ used as parameter more than once\n\nerror[E0282]:\
    \ type annotations needed\n  --> /tmp/tmp087lgeov.rs:16:13\n   |\n16 |       \
    \  sum += lst.iter().filter(|&x| x % 2 != 0).sum();\n   |             ^^ cannot\
    \ infer type\n   |\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n16 |         sum += lst.iter().filter(|&x| x % 2 != 0).sum::<S>();\n\
    \   |                                                      +++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0282, E0415.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ == 0 {\n        return 0\n    }\n    if lst.len() == 1 {\n        return lst[0]\n\
    \    }\n    let mut ans = lst[0];\n    for i in 1..lst.len() {\n        if lst[i]\
    \ % 2 == 1 {\n            ans += lst[i];\n        }\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmphon1645c.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp4fsntj0n.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |       \
    \                    - ^ - {integer}\n   |                           |\n   | \
    \                          &&isize\n   |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `x`\n   |\n10 |     lst.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = lst[0];\n    let mut odd = lst[0];\n\n    for i in 2..lst.len() {\n      \
    \  even += lst[i/2];\n        odd += lst[i/2];\n    }\n    even += odd;\n    even\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `42`,\n right: `12`', /tmp/tmpo1fowap1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut len = lst.len();\n    while len > 0 {\n        if lst[len\
    \ - 1] % 2 == 0 {\n            sum += lst[len - 1];\n        }\n        len -=\
    \ 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpi0i1zoq9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = std::mem::zeroed();\n    let mut odds = std::mem::zeroed();\n    let mut sum\
    \ = 0;\n    for e in lst.iter() {\n        if e % 2 == 0 {\n            evens\
    \ += e;\n        } else {\n            odds += e;\n        }\n    }\n    sum =\
    \ evens + odds;\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpwq5dnwnc.rs:10:9\n\
    \   |\n10 |     let mut evens = std::mem::zeroed();\n   |         ^^^^^^^^^ consider\
    \ giving `evens` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.windows(2).map(|e|\
    \ e % 2 != 0).sum().unwrap()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&[isize]` by `{integer}`\n  --> /tmp/tmp9tco5_m4.rs:10:30\n\
    \   |\n10 |     lst.windows(2).map(|e| e % 2 != 0).sum().unwrap()\n   |      \
    \                      - ^ - {integer}\n   |                            |\n  \
    \ |                            &[isize]\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x|\
    \ x % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpbfygtdwm.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s\
    \ = 0isize;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 1\
    \ {\n            s += v;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp_nybkkji.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut ans\
    \ = lst[0];\n    for (i, &e) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 {\n            ans += e;\n        }\n    }\n    ans\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `12`', /tmp/tmp025_omhe.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut last: usize = -1;\n\n    for elt in lst {\n        if elt\
    \ % 2 != 0 {\n            sum += elt;\n            last = elt;\n        }\n  \
    \  }\n\n    if last != -1 {\n        sum += last;\n    }\n\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpvu2er851.rs:11:27\n\
    \   |\n11 |     let mut last: usize = -1;\n   |                           ^^\n\
    \   |                           |\n   |                           cannot apply\
    \ unary operator `-`\n   |                           help: you may have meant\
    \ the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values\
    \ cannot be negated\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvu2er851.rs:16:20\n\
    \   |\n11 |     let mut last: usize = -1;\n   |                   ----- expected\
    \ due to this type\n...\n16 |             last = elt;\n   |                  \
    \  ^^^ expected `usize`, found `isize`\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpvu2er851.rs:20:16\n   |\n20 |     if last\
    \ != -1 {\n   |                ^^\n   |                |\n   |               \
    \ cannot apply unary operator `-`\n   |                help: you may have meant\
    \ the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned values\
    \ cannot be negated\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvu2er851.rs:21:16\n\
    \   |\n21 |         sum += last;\n   |                ^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot add-assign `usize` to `isize`\n  --> /tmp/tmpvu2er851.rs:21:13\n\
    \   |\n21 |         sum += last;\n   |             ^^ no implementation for `isize\
    \ += usize`\n   |\n   = help: the trait `AddAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0600.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    match lst.len()\
    \ {\n        0 => 0,\n        _ => {\n            if let Some(ref x) = lst.get_mut(0)\
    \ {\n                if x.is_odd() {\n                    *x.add(1)\n        \
    \        } else {\n                    0\n                }\n            } else\
    \ {\n                0\n            }\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&mut isize`\
    \ in the current scope\n  --> /tmp/tmp91wd65xb.rs:14:22\n   |\n14 |          \
    \       if x.is_odd() {\n   |                      ^^^^^^ method not found in\
    \ `&&mut isize`\n\nerror[E0599]: no method named `add` found for reference `&&mut\
    \ isize` in the current scope\n  --> /tmp/tmp91wd65xb.rs:15:24\n   |\n15 |   \
    \                  *x.add(1)\n   |                        ^^^ method not found\
    \ in `&&mut isize`\n   |\n   = help: items from traits can only be used if the\
    \ trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n   |\n1  | use std::ops::Add;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut it = lst.iter();\n    match it.next() {\n        Some(val)\
    \ => {\n            if val % 2 != 0 {\n                sum += val;\n         \
    \   }\n            it\n                .next()\n                .unwrap()\n  \
    \              .and_then(|val| if val % 2 == 0 { sum += val })\n             \
    \   .unwrap();\n        }\n        None => return 0,\n    }\n    it.next().unwrap().map(|x|\
    \ {\n        sum += x\n    }).unwrap()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `and_then` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpzqg99rqf.rs:20:18\n   |\n20 |             \
    \    .and_then(|val| if val % 2 == 0 { sum += val })\n   |                  ^^^^^^^^\
    \ method not found in `&isize`\n\nerror[E0599]: `&isize` is not an iterator\n\
    \  --> /tmp/tmpzqg99rqf.rs:25:24\n   |\n25 |     it.next().unwrap().map(|x| {\n\
    \   |                        ^^^ `&isize` is not an iterator\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `&isize: Iterator`\n\
    \           which is required by `&mut &isize: Iterator`\n           `isize: Iterator`\n\
    \           which is required by `&mut isize: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmptlnivqty.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum\
    \ = 0;\n    for &i in lst.iter().filter(|&i| i % 2 == 1) {\n        odd_sum +=\
    \ i;\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp6ow36z8a.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .enumerate()\n        .filter(|(_, val)| val % 2 != 0)\n\
    \        .filter(|(_, val)| val % 2 == 0)\n        .map(|(_, val)| val)\n    \
    \    .sum();\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpb5ifvz2j.rs:13:32\n\
    \   |\n13 |         .filter(|(_, val)| val % 2 != 0)\n   |                   \
    \         --- ^ - {integer}\n   |                            |\n   |         \
    \                   &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `val`\n   |\n13 |         .filter(|(_, val)| *val % 2 != 0)\n   |          \
    \                  +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  -->\
    \ /tmp/tmpb5ifvz2j.rs:14:32\n   |\n14 |         .filter(|(_, val)| val % 2 ==\
    \ 0)\n   |                            --- ^ - {integer}\n   |                \
    \            |\n   |                            &&isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `val`\n   |\n14 |         .filter(|(_,\
    \ val)| *val % 2 == 0)\n   |                            +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb5ifvz2j.rs:9:33\n   |\n9  | fn solution(lst: Vec<isize>)\
    \ -> isize {\n   |    --------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n...\n16 |         .sum();\n   |               - help: remove\
    \ this semicolon\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpkauk9mkt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens_sum\
    \ = 0;\n    for &i in &lst {\n        if i % 2 == 0 {\n            evens_sum +=\
    \ i;\n        }\n    }\n\n    if evens_sum == 0 {\n        return 0;\n    }\n\n\
    \    let mut odd_sum = 0;\n    for i in &lst {\n        if i % 2 == 1 {\n    \
    \        odd_sum += i;\n        }\n    }\n\n    odd_sum + evens_sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmp_r2jj2z8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    if lst.len() == 1 {\n        return lst[0];\n\
    \    }\n\n    let mut even: Vec<_> = vec![];\n\n    for (idx, &x) in lst.into_iter().enumerate()\
    \ {\n        if idx % 2 == 0 {\n            even.push(x);\n        }\n    }\n\n\
    \    let mut sum_even = even.iter().sum();\n    let mut sum_odd = even.iter().rev().sum();\n\
    \n    for i in 0..even.len() {\n        if even[i] % 2 == 0 {\n            sum_even\
    \ += even[i];\n        } else {\n            sum_odd += even[i];\n        }\n\
    \    }\n\n    sum_even * sum_odd\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1pang694.rs:20:15\n   |\n\
    20 |     for (idx, &x) in lst.into_iter().enumerate() {\n   |               ^^\
    \     --------------------------- this expression has type `Option<(usize, isize)>`\n\
    \   |               |\n   |               expected `isize`, found reference\n\
    \   |               help: you can probably remove the explicit borrow: `x`\n \
    \  |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut odd = 1;\n    for i in lst.iter() {\n        if odd % 2 ==\
    \ 0 {\n            sum += i;\n        }\n        odd += 1;\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpq73a8xi_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .cloned()\n        .filter(|&i| i % 2 == 1)\n        .filter(|&i|\
    \ i % 2 == 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpirii5oit.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp4fsntj0n.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |       \
    \                    - ^ - {integer}\n   |                           |\n   | \
    \                          &&isize\n   |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `x`\n   |\n10 |     lst.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst.iter() {\n        if i.is_even() {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp12xmksib.rs:12:14\n   |\n12 |         if i.is_even()\
    \ {\n   |              ^^^^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .cloned()\n        .filter(|&x| x % 2 == 1)\n        .fold(0,\
    \ |res, &x| res + x)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c3l0r5e.rs:14:24\n   |\n\
    14 |         .fold(0, |res, &x| res + x)\n   |                        ^--\n  \
    \ |                        ||\n   |                        |expected due to this\n\
    \   |                        expected `isize`, found reference\n   |         \
    \               help: did you mean `x`: `&isize`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd\
    \ = lst.len();\n    let mut even = 0;\n\n    for i in 0..lst.len() {\n       \
    \ if i % 2 == 0 {\n            even += 1;\n        } else {\n            odd -=\
    \ 1;\n        }\n\n        if even != 0 {\n            odd--;\n        }\n   \
    \ }\n\n    even\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp_k81w7h7.rs:21:18\n\
    \   |\n21 |             odd--;\n   |                  ^ expected expression\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = lst[0];\n    for el in lst.iter().rev() {\n        if el & 1 == 0 {\n    \
    \        result += el;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpg2hwgdo4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0i32;\n    let mut odd = 0i32;\n    for &v in lst {\n        if v % 2 == 0\
    \ {\n            even += v;\n        } else {\n            odd += v;\n       \
    \ }\n    }\n    odd + even\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8efqds73.rs:12:9\n   |\n\
    12 |     for &v in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `v`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8efqds73.rs:19:5\n   |\n9  | fn solution(lst: Vec<isize>) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n19 |     odd + even\n   |     ^^^^^^^^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n19 |     (odd + even).try_into().unwrap()\n   |   \
    \  +          +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for val in lst.iter().rev() {\n        if val % 2 == 0 {\n       \
    \     sum += val;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpjls1fps_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&n|\
    \ n % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp97cc4gj4.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ < 1 {\n        return 0;\n    }\n    let mut even = 0;\n    let mut odd = 1;\n\
    \    for &i in &lst {\n        if i % 2 == 0 {\n            even += i;\n     \
    \   } else {\n            odd += i;\n        }\n    }\n    even += odd;\n    odd\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `12`', /tmp/tmpezx9j6ys.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum:\
    \ isize = 0;\n    let mut even_sum: isize = 0;\n\n    for x in lst {\n       \
    \ if x % 2 == 1 {\n            even_sum += x;\n        } else {\n            odd_sum\
    \ += x;\n        }\n    }\n\n    if odd_sum % 2 == 0 {\n        even_sum - odd_sum\n\
    \    } else {\n        odd_sum\n    }\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `12`', /tmp/tmpjm3osy82.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .enumerate()\n        .filter(|(_, x)| x.is_odd())\n        .filter(|(_,\
    \ x)| x % 2 == 1)\n        .fold(0, |x, y| x + y)\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&isize` in\
    \ the current scope\n  --> /tmp/tmpv4e06q1j.rs:12:28\n   |\n12 |         .filter(|(_,\
    \ x)| x.is_odd())\n   |                            ^^^^^^ method not found in\
    \ `&&isize`\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpv4e06q1j.rs:13:28\n\
    \   |\n13 |         .filter(|(_, x)| x % 2 == 1)\n   |                       \
    \   - ^ - {integer}\n   |                          |\n   |                   \
    \       &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \   |\n13 |         .filter(|(_, x)| *x % 2 == 1)\n   |                      \
    \    +\n\nerror[E0277]: cannot add `(usize, &isize)` to `isize`\n  --> /tmp/tmpv4e06q1j.rs:14:27\n\
    \   |\n14 |         .fold(0, |x, y| x + y)\n   |                           ^ no\
    \ implementation for `isize + (usize, &isize)`\n   |\n   = help: the trait `Add<(usize,\
    \ &isize)>` is not implemented for `isize`\n   = help: the following other types\
    \ implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n          \
    \   <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n            \
    \ <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a\
    \ i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a isize\
    \ as Add<isize>>\n           and 48 others\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .filter(|&x| x % 2 != 0)\n        .filter(|&x| x % 2 == 1)\n        .sum();\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8xkdq1pf.rs:9:33\n   |\n\
    9  | fn solution(lst: Vec<isize>) -> isize {\n   |    --------               \
    \      ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n...\n13 |         .sum();\n\
    \   |               - help: remove this semicolon\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for &n in lst {\n        if n % 2 == 0 {\n            sum += n;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeeekqvvc.rs:11:9\n   |\n\
    11 |     for &n in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0usize;\n    let mut odd = 1usize;\n    for el in lst {\n        if el % 2\
    \ == 0 {\n            even += el;\n        } else {\n            odd += el;\n\
    \        }\n    }\n    even * odd\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7sofgu5c.rs:14:21\n   |\n\
    14 |             even += el;\n   |                     ^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp7sofgu5c.rs:14:18\n\
    \   |\n14 |             even += el;\n   |                  ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7sofgu5c.rs:16:20\n\
    \   |\n16 |             odd += el;\n   |                    ^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp7sofgu5c.rs:16:17\n\
    \   |\n16 |             odd += el;\n   |                 ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7sofgu5c.rs:19:5\n\
    \   |\n9  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n19 |     even\
    \ * odd\n   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     (even * odd).try_into().unwrap()\n   |     +          +++++++++++++++++++++\n\
    \nerror"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    let mut odd = 0;\n    for elem in lst {\n        if elem % 2 == 0\
    \ {\n            even += elem;\n        } else {\n            odd += elem;\n \
    \       }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-5`,\n right: `12`', /tmp/tmpznhz2w4p.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp4fsntj0n.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |       \
    \                    - ^ - {integer}\n   |                           |\n   | \
    \                          &&isize\n   |\nhelp: `%` can be used on `isize`, you\
    \ can dereference `x`\n   |\n10 |     lst.iter().filter(|x| *x % 2 == 1).sum::<isize>()\n\
    \   |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut odd = lst.len();\n\n    while odd > 0 {\n        if odd %\
    \ 2 == 0 {\n            sum += lst[odd / 2];\n            odd--;\n        } else\
    \ {\n            odd--;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmplt4h285_.rs:16:18\n\
    \   |\n16 |             odd--;\n   |                  ^ expected expression\n\n\
    error: expected expression, found `;`\n  --> /tmp/tmplt4h285_.rs:18:18\n   |\n\
    18 |             odd--;\n   |                  ^ expected expression\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut ans\
    \ = lst[0];\n    for i in lst.iter().rev() {\n        ans += if i % 2 == 1 { -2\
    \ } else { 1 };\n    }\n    ans\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmprj16_jf3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds\
    \ = vec![];\n    let mut evens = vec![];\n    for i in lst {\n        if i % 2\
    \ == 0 {\n            evens.push(i);\n        } else {\n            odds.push(i);\n\
    \        }\n    }\n    evens.iter().sum::<isize>() + odds.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmp8csv030m.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = vec![0];\n    let mut count = 1;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            result .+= *v as isize;\n          \
    \  count += 1;\n        }\n    }\n    result .+= count * 2;\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `+=`\n  --> /tmp/tmp4d2qozgr.rs:14:21\n   |\n\
    14 |             result .+= *v as isize;\n   |                     ^^\n\nerror:\
    \ unexpected token: `+=`\n  --> /tmp/tmp4d2qozgr.rs:18:13\n   |\n18 |     result\
    \ .+= count * 2;\n   |             ^^\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Vec<{integer}>`\n  --> /tmp/tmp4d2qozgr.rs:14:13\n\
    \   |\n14 |             result .+= *v as isize;\n   |             ------^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<{integer}>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<{integer}>`\n\
    \  --> /tmp/tmp4d2qozgr.rs:18:5\n   |\n18 |     result .+= count * 2;\n   |  \
    \   ------^^^^^^^^^^^^^^\n   |     |\n   |     cannot use `+=` on type `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for &i in lst {\n        if i % 2 == 1 {\n            sum += i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxwfbmzu8.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x|\
    \ *(x%2) != 0).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpnslpisea.rs:10:31\n\
    \   |\n10 |     lst.iter().filter_map(|x| *(x%2) != 0).sum::<isize>()\n   |  \
    \                             ^^^^^^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnslpisea.rs:10:31\n   |\n10 |     lst.iter().filter_map(|x| *(x%2) !=\
    \ 0).sum::<isize>()\n   |                               ^^^^^^^^^^^ expected enum\
    \ `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n       \
    \       found type `bool`\nhelp: try wrapping the expression in `Some`\n   |\n\
    10 |     lst.iter().filter_map(|x| Some(*(x%2) != 0)).sum::<isize>()\n   |   \
    \                            +++++           +\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = lst.iter().filter(|x| *x % 2 != 0).sum();\n    lst.iter().filter(|x| *x %\
    \ 2 == 1).for_each(|x| {\n        even += x;\n    });\n    even\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `12`', /tmp/tmpcflr_o8q.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut result\
    \ = vec![0];\n    for i in lst {\n        if i & 1 != 0 {\n            result\
    \ += i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<{integer}>`\n  --> /tmp/tmpaushc4al.rs:13:13\n   |\n13 |             result\
    \ += i;\n   |             ------^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaushc4al.rs:16:5\n\
    \   |\n9  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n16 |     result\n\
    \   |     ^^^^^^ expected `isize`, found struct `Vec`\n   |\n   = note: expected\
    \ type `isize`\n            found struct `Vec<{integer}>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total\
    \ = 0;\n    for n in lst.iter() {\n        if n % 2 == 1 {\n            total\
    \ += n;\n        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpzycvy1h6.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens:\
    \ usize = 0;\n    let mut odd: isize = 0;\n    for &i in lst {\n        if i %\
    \ 2 == 0 {\n            evens += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    evens - odd\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7h1lgf8i.rs:12:9\n   |\n\
    12 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7h1lgf8i.rs:19:13\n   |\n19 |     evens - odd\n   |           \
    \  ^^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7h1lgf8i.rs:19:5\n   |\n9  | fn solution(lst: Vec<isize>) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n19 |     evens - odd\n   |     ^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     (evens - odd).try_into().unwrap()\n\
    \   |     +           +++++++++++++++++++++\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp7h1lgf8i.rs:19:11\n   |\n19 |     evens - odd\n\
    \   |           ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for &x in lst {\n        if x % 2 == 0 {\n            sum += x;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqvgp94w.rs:11:9\n   |\n\
    11 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0;\n    let mut odds = 0;\n    for &x in lst {\n        evens += x;\n    \
    \    odds += x % 2;\n    }\n    odds\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlhluxx4.rs:12:9\n   |\n\
    12 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x|\
    \ x % 2 == 1).sum() + (lst.iter().filter(|&x| x % 2 != 1).sum() % 2)\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmp0kqpek_r.rs:10:40\n\
    \     |\n10   |     lst.iter().filter(|&x| x % 2 == 1).sum() + (lst.iter().filter(|&x|\
    \ x % 2 != 1).sum() % 2)\n     |                                        ^^^ cannot\
    \ infer type for type parameter `S` declared on the associated function `sum`\n\
    \     |\n     = note: cannot satisfy `_: Sum<&isize>`\nnote: required by a bound\
    \ in `std::iter::Iterator::sum`\nhelp: consider specifying the type argument in\
    \ the method call\n     |\n10   |     lst.iter().filter(|&x| x % 2 == 1).sum::<S>()\
    \ + (lst.iter().filter(|&x| x % 2 != 1).sum() % 2)\n     |                   \
    \                        +++++\nhelp: consider specifying the type argument in\
    \ the function call\n     |\n10   |     lst.iter().filter(|&x| x % 2 == 1).sum::<S>()\
    \ + (lst.iter().filter(|&x| x % 2 != 1).sum() % 2)\n     |                   \
    \                        +++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().fold(0,\
    \ |x, _| x + (lst.len() - lst.iter().skip(x).filter(|&x| x % 2 == 1).count()))\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnzr4bk1t.rs:10:64\n   |\n\
    10 |     lst.iter().fold(0, |x, _| x + (lst.len() - lst.iter().skip(x).filter(|&x|\
    \ x % 2 == 1).count()))\n   |                                                \
    \                ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    10 |     lst.iter().fold(0, |x, _| x + (lst.len() - lst.iter().skip(x.try_into().unwrap()).filter(|&x|\
    \ x % 2 == 1).count()))\n   |                                                \
    \                 ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnzr4bk1t.rs:10:35\n   |\n10 |     lst.iter().fold(0, |x, _| x + (lst.len()\
    \ - lst.iter().skip(x).filter(|&x| x % 2 == 1).count()))\n   |               \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n\
    \  --> /tmp/tmpnzr4bk1t.rs:10:33\n   |\n10 |     lst.iter().fold(0, |x, _| x +\
    \ (lst.len() - lst.iter().skip(x).filter(|&x| x % 2 == 1).count()))\n   |    \
    \                             ^ no implementation for `isize + usize`\n   |\n\
    \   = help: the trait `Add<usize>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Add<Rhs>`:\n             <&'a f32\
    \ as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as\
    \ Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n\
    \             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n      \
    \       <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total\
    \ = 0isize;\n    for i in lst.iter() {\n        if i % 2 == 0 {\n            total\
    \ += i;\n        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpkcvpic2u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n\n    for (pos, value) in lst.into_iter().enumerate() {\n        if value\
    \ < 2 {\n            continue;\n        }\n\n        if value < 4 {\n        \
    \    sum += value;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpsea_4q69.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.into_iter().filter(|x|\
    \ x % 2 == 1).sum().unwrap()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp9g9pbs20.rs:10:44\n\
    \   |\n10 |     lst.into_iter().filter(|x| x % 2 == 1).sum().unwrap()\n   |  \
    \                                          ^^^ cannot infer type for type parameter\
    \ `S` declared on the associated function `sum`\n   |\n   = note: type must be\
    \ known at this point\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n10 |     lst.into_iter().filter(|x| x % 2 == 1).sum::<S>().unwrap()\n\
    \   |                                               +++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd\
    \ = 0;\n    for i in lst {\n        if i % 2 == 0 {\n            odd += i;\n \
    \       }\n    }\n    odd\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpk_ak1u9k.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ {\n        if x % 2 == 0 {\n            true\n        } else {\n           \
    \ false\n        }\n    }).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmphrsp2eun.rs:11:14\n\
    \   |\n11 |         if x % 2 == 0 {\n   |            - ^ - {integer}\n   |   \
    \         |\n   |            &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n11 |         if *x % 2 == 0 {\n   |         \
    \   +\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total\
    \ = 0;\n    let mut odd_position = 0;\n    for num in lst.iter() {\n        if\
    \ num % 2 == 0 {\n            total += num;\n        } else {\n            total\
    \ -= num;\n        }\n\n        if num % 2 != 0 && odd_position != num {\n   \
    \         total += num;\n        }\n\n        odd_position += 1\n    }\n\n   \
    \ total\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpgy01376y.rs:19:41\n\
    \   |\n19 |         if num % 2 != 0 && odd_position != num {\n   |           \
    \                              ^^ no implementation for `isize == &isize`\n  \
    \ |\n   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    for &i in lst {\n        if i & 1 == 1 {\n            even += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpesdhtmrr.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for (i, e) in lst.into_iter().enumerate() {\n        if i % 2 == 0\
    \ {\n            sum += e;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmplfnztejr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut i = 0;\n    while i < lst.len() {\n        if i % 2 == 1 {\n\
    \            sum += lst[i];\n        }\n        i += 1;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp7hwi0y8_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total\
    \ = 0;\n    for i in lst.iter().rev().skip(1) {\n        if i % 2 == 0 {\n   \
    \         total += i;\n        }\n    }\n    total\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpzy992b5x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ *x % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmppldm92ue.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for i in lst.iter().filter(|&x| *x % 2 == 0) {\n        sum += i;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmptk0ijrf2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = lst.clone();\n    even.iter_mut().filter(|&x| x % 2 == 0).for_each(|&x| {\n\
    \        x += x;\n    });\n    even.iter_mut().filter(|&x| x % 2 == 1).sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpehs0e4xs.rs:11:35\n\
    \   |\n11 |     even.iter_mut().filter(|&x| x % 2 == 0).for_each(|&x| {\n   |\
    \                                 - ^ - {integer}\n   |                      \
    \           |\n   |                                 &mut isize\n   |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n   |\n11 |     even.iter_mut().filter(|&x|\
    \ *x % 2 == 0).for_each(|&x| {\n   |                                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpehs0e4xs.rs:11:55\n   |\n11 |     even.iter_mut().filter(|&x|\
    \ x % 2 == 0).for_each(|&x| {\n   |                                          \
    \             ^--\n   |                                                      \
    \ ||\n   |                                                       |expected due\
    \ to this\n   |                                                       types differ\
    \ in mutability\n   |                                                       help:\
    \ did you mean `x`: `&&mut isize`\n   |\n   = note: expected mutable reference\
    \ `&mut isize`\n                      found reference `&_`\n\nerror[E0369]: cannot\
    \ mod `&mut isize` by `{integer}`\n  --> /tmp/tmpehs0e4xs.rs:14:35\n   |\n14 |\
    \     even.iter_mut().filter(|&x| x % 2 == 1).sum()\n   |                    \
    \             - ^ - {integer}\n   |                                 |\n   |  \
    \                               &mut isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n14 |     even.iter_mut().filter(|&x| *x % 2 ==\
    \ 1).sum()\n   |                                 +\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<&mut isize>` is not satisfied\n    --> /tmp/tmpehs0e4xs.rs:14:45\n\
    \     |\n14   |     even.iter_mut().filter(|&x| x % 2 == 1).sum()\n     |    \
    \                                         ^^^ the trait `Sum<&mut isize>` is not\
    \ implemented for `isize`\n     |\n     = help: the following other types implement\
    \ trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as\
    \ Sum>\n               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n  \
    \             <i128 a"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = vec![];\n    let mut odd = vec![];\n\n    for val in lst {\n        if val\
    \ % 2 == 0 {\n            evens.push(val);\n        } else {\n            odd.push(val);\n\
    \        }\n    }\n\n    let even = evens.iter().sum();\n    let odd = odd.iter().sum();\n\
    \n    let mut sum_of_even = 0;\n    let mut sum_of_odd = 0;\n    for i in even\
    \ {\n        sum_of_even += i;\n    }\n    for i in odd {\n        sum_of_odd\
    \ += i;\n    }\n\n    sum_of_even + sum_of_odd\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpyq3_d7ld.rs:21:9\n\
    \   |\n21 |     let even = evens.iter().sum();\n   |         ^^^^ consider giving\
    \ `even` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n\n    for &i in lst {\n        if i % 2 == 1 {\n            sum += i;\n\
    \        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_5px2hg1.rs:12:9\n   |\n\
    12 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .filter(|x| x % 2 == 1)\n        .filter(|x| x % 2 == 0)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpqyq4iywl.rs:11:23\n\
    \   |\n11 |         .filter(|x| x % 2 == 1)\n   |                     - ^ - {integer}\n\
    \   |                     |\n   |                     &&isize\n   |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n   |\n11 |         .filter(|x|\
    \ *x % 2 == 1)\n   |                     +\n\nerror[E0369]: cannot mod `&&isize`\
    \ by `{integer}`\n  --> /tmp/tmpqyq4iywl.rs:12:23\n   |\n12 |         .filter(|x|\
    \ x % 2 == 0)\n   |                     - ^ - {integer}\n   |                \
    \     |\n   |                     &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n12 |         .filter(|x| *x % 2 == 0)\n   | \
    \                    +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = vec![];\n    let mut odd = vec![];\n\n    for x in lst.iter() {\n        if\
    \ x % 2 == 0 {\n            even.push(x);\n        } else {\n            odd.push(x);\n\
    \        }\n    }\n\n    if even.len() > 0 {\n        even.iter().fold(0, |a,\
    \ x| a + (x - even[0]))\n    } else {\n        odd.iter().fold(0, |a, x| a + (x\
    \ - odd[0]))\n    }\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `&isize` from `&&isize`\n  --> /tmp/tmpufbj3kmg.rs:22:43\n\
    \   |\n22 |         even.iter().fold(0, |a, x| a + (x - even[0]))\n   |      \
    \                                   - ^ ------- &isize\n   |                 \
    \                        |\n   |                                         &&isize\n\
    \   |\nhelp: `-` can be used on `isize`, you can dereference `x`\n   |\n22 | \
    \        even.iter().fold(0, |a, x| a + (*x - even[0]))\n   |                \
    \                         +\n\nerror[E0369]: cannot subtract `&isize` from `&&isize`\n\
    \  --> /tmp/tmpufbj3kmg.rs:24:42\n   |\n24 |         odd.iter().fold(0, |a, x|\
    \ a + (x - odd[0]))\n   |                                        - ^ ------ &isize\n\
    \   |                                        |\n   |                         \
    \               &&isize\n   |\nhelp: `-` can be used on `isize`, you can dereference\
    \ `x`\n   |\n24 |         odd.iter().fold(0, |a, x| a + (*x - odd[0]))\n   | \
    \                                       +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0;\n    let mut odds = 0;\n    for i in lst.iter().rev() {\n        if i %\
    \ 2 == 0 {\n            evens += i;\n        } else {\n            odds += i;\n\
    \        }\n    }\n    evens + odds\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpwsnh3weg.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().fold(0,\
    \ |acc, x| {\n        acc + ((x % 2) == 1 ? 0 : 1)\n    })\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `0`\n\
    \  --> /tmp/tmp5tmj635i.rs:11:31\n   |\n11 |         acc + ((x % 2) == 1 ? 0 :\
    \ 1)\n   |                               ^ expected one of `)`, `,`, `.`, `?`,\
    \ or an operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `...`,\
    \ `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`,\
    \ `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or path, found `1`\n  -->\
    \ /tmp/tmp5tmj635i.rs:11:35\n   |\n11 |         acc + ((x % 2) == 1 ? 0 : 1)\n\
    \   |                                   ^ expected one of 26 possible tokens\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    let mut odd = 0;\n    for i in lst {\n        i += 1;\n        if\
    \ i % 2 == 0 {\n            even += i;\n        } else {\n            odd += i;\n\
    \        }\n    }\n    (even + odd).sqrt()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp2est2jtm.rs:20:18\n   |\n20 |     (even + odd).sqrt()\n\
    \   |                  ^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|x|\
    \ if x % 2 == 1 { Some(x) } else { None }).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp3w86940u.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut ans = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if i % 2 == 0 {\n            ans += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \n    ans\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpk1_7uegp.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    solution_helper(lst,\
    \ 0, vec![false; lst.len()])\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `solution_helper` in this scope\n  -->\
    \ /tmp/tmpgz89xwo8.rs:10:5\n   |\n10 |     solution_helper(lst, 0, vec![false;\
    \ lst.len()])\n   |     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .enumerate()\n        .filter(|(i, _)| i % 2 == 0)\n        .filter(|(i,\
    \ _)| lst[i] % 2 != 0)\n        .filter(|(i, _)| lst[i] % 2 == 0)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&usize`\n  --> /tmp/tmp8aim1nz3.rs:13:26\n\
    \   |\n13 |         .filter(|(i, _)| lst[i] % 2 != 0)\n   |                  \
    \        ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `&usize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&usize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&usize`\n  --> /tmp/tmp8aim1nz3.rs:14:26\n\
    \   |\n14 |         .filter(|(i, _)| lst[i] % 2 == 0)\n   |                  \
    \        ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `&usize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&usize>` for `Vec<isize>`\n\
    \nerror[E0277]: the trait bound `isize: Sum<(usize, &isize)>` is not satisfied\n\
    \    --> /tmp/tmp8aim1nz3.rs:15:10\n     |\n15   |         .sum()\n     |    \
    \      ^^^ the trait `Sum<(usize, &isize)>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Sum<A>`:\n   \
    \            <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n            \
    \   <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as\
    \ Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n\n    for v in lst {\n        if v % 2 == 0 {\n            even += v;\n\
    \        }\n    }\n\n    even\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpqkca74w_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 == 1).fold(0, |sum, el| sum + el)\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpe8cvyfiw.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|x| x % 2 == 1).fold(0, |sum, el| sum + el)\n\
    \   |                           - ^ - {integer}\n   |                        \
    \   |\n   |                           &&isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `x`\n   |\n10 |     lst.iter().filter(|x| *x %\
    \ 2 == 1).fold(0, |sum, el| sum + el)\n   |                           +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total:\
    \ isize = 0;\n    let mut last: isize = 0;\n    for &e in lst {\n        if last%2\
    \ == 0 {\n            if e % 2 == 1 {\n                total += e;\n         \
    \   }\n        } else {\n            last = e;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp44p3qmxh.rs:12:9\n   |\n\
    12 |     for &e in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `e`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i|\
    \ i % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp_8jdexxn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = vec![0; lst.len()];\n\n    for (i, e) in lst.iter().enumerate() {\n      \
    \  evens[i] = if i % 2 == 0 { e } else { 0 };\n    }\n\n    evens.iter().fold(0,\
    \ |a, e| a + e)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4d7219dg.rs:13:36\n   |\n\
    13 |         evens[i] = if i % 2 == 0 { e } else { 0 };\n   |                \
    \                    ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |         evens[i] = if i % 2 == 0 { *e }\
    \ else { 0 };\n   |                                    +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for n in lst.iter().take(2) {\n        if n % 2 == 0 {\n         \
    \   sum += n;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpivszcz0v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x % 2 != 0 {\n            sum += x;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp9mjri_1n.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = Vec::new();\n    let mut odd = Vec::new();\n\n    for n in lst {\n       \
    \ if n % 2 == 0 {\n            even.push(n);\n        } else {\n            odd.push(n);\n\
    \        }\n    }\n    let mut sum = 0;\n    for n in odd {\n        sum += n;\n\
    \    }\n    for n in even {\n        sum += n;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmp_ejcirs2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .cloned()\n        .filter(|&x| x % 2 == 1)\n        .filter(|&x|\
    \ x % 3 != 0)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmprcdcc5s6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum_odd\
    \ = 0;\n    for i in lst.iter().cloned().skip(1).filter(|&i| i % 2 == 1) {\n \
    \       sum_odd += i;\n    }\n    sum_odd\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp34lvp_1k.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s\
    \ = lst[0];\n\n    for &elt in &lst[1..] {\n        if elt % 2 == 0 {\n      \
    \      s += elt;\n        }\n    }\n\n    s\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpu0quj7ei.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = vec![];\n    let mut odds = vec![];\n    for e in lst.iter() {\n        if\
    \ e % 2 == 0 {\n            evens.push(e);\n        } else {\n            odds.push(e);\n\
    \        }\n    }\n    evens.iter().reduce(|a, b| a + b)\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&&isize` to `&&isize`\n  --> /tmp/tmp6wlcd0s8.rs:19:34\n\
    \   |\n19 |     evens.iter().reduce(|a, b| a + b)\n   |                      \
    \          - ^ - &&isize\n   |                                |\n   |        \
    \                        &&isize\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6wlcd0s8.rs:19:5\n\
    \   |\n9  | fn solution(lst: Vec<isize>) -> isize {\n   |                    \
    \             ----- expected `isize` because of return type\n...\n19 |     evens.iter().reduce(|a,\
    \ b| a + b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum\
    \ = 0;\n    for v in lst.iter() {\n        if v % 2 == 1 {\n            odd_sum\
    \ += v;\n        }\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp7260a30k.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0;\n    for &i in lst {\n        if i & 1 == 1 {\n            evens += i;\n\
    \        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6rzzt4xa.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0usize;\n    let mut odd = 1usize;\n    let len = lst.len();\n    for i in\
    \ 1..len {\n        if ((i % 2) == 1) {\n            even += lst[i];\n       \
    \ } else {\n            odd += lst[i];\n        }\n    }\n    return even + odd;\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpkvifj0dm.rs:14:12\n\
    \   |\n14 |         if ((i % 2) == 1) {\n   |            ^            ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n14 -         if ((i % 2) == 1) {\n14 +         if (i % 2) == 1 {\n   |\
    \ \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkvifj0dm.rs:15:21\n   |\n\
    15 |             even += lst[i];\n   |                     ^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpkvifj0dm.rs:15:18\n\
    \   |\n15 |             even += lst[i];\n   |                  ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkvifj0dm.rs:17:20\n\
    \   |\n17 |             odd += lst[i];\n   |                    ^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n\
    \  --> /tmp/tmpkvifj0dm.rs:17:17\n   |\n17 |             odd += lst[i];\n   |\
    \                 ^^ no implementation for `usize += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `usize`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkvifj0dm.rs:20:12\n   |\n9  | fn solution(lst: Vec<isize>)\
    \ -> isize {\n   |   "
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = evens_of(lst);\n    let mut sum = 0;\n\n    for e in &evens {\n        if\
    \ *e % 2 == 1 {\n            sum += *e;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `evens_of` in this scope\n  --> /tmp/tmps57czwit.rs:10:21\n\
    \   |\n10 |     let mut evens = evens_of(lst);\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    solution(\n\
    \        lst,\n        0,\n        lst.len() - 1,\n        |i, &x| x == x,\n \
    \       |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 != 0,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 0,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 1,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 2,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 3,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 4,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 5,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 6,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 7,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 8,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 9,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 10,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 11,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 12,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 13,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 14,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 15,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, &x| i%2 == 16,\n\
    \        |i, &x| i != x,\n        |i, &x| i == x,\n        |i, \n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error: expected parameter name, found `)`\n  --> /tmp/tmptrd7q7kc.rs:72:1\n\
    \   |\n72 | }\n   | ^ expected parameter name\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmptrd7q7kc.rs:10:13\n   |\n9  | fn solution(lst: Vec<isize>)\
    \ -> isize {\n   |                                       - closing delimiter possibly\
    \ meant for this\n10 |     solution(\n   |             ^ unclosed delimiter\n\
    ...\n72 | }\n   | ^ mismatched closing delimiter\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s\
    \ = vec![0; lst.len()];\n    let mut evens = 0;\n    for v in lst {\n        if\
    \ v % 2 == 0 {\n            evens += v;\n        } else {\n            s[v as\
    \ usize] += 1;\n        }\n    }\n    evens\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 5'', /tmp/tmpmkihnbbs.rs:16:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().skip_while(|x|\
    \ x % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6yifddcr.rs:10:33\n\
    \   |\n10 |     lst.iter().skip_while(|x| x % 2 == 1).sum()\n   |            \
    \                   - ^ - {integer}\n   |                               |\n  \
    \ |                               &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n10 |     lst.iter().skip_while(|x| *x % 2 ==\
    \ 1).sum()\n   |                               +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&i|\
    \ i % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp_8jdexxn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .enumerate()\n        .filter_map(|(i, el)| if i % 2 == 1 { Some(el)\
    \ } else { None })\n        .filter(|el| !el.is_none())\n        .fold(0, |sum,\
    \ el| sum + el)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_none` found for reference `&&isize` in\
    \ the current scope\n  --> /tmp/tmppdj15_u3.rs:13:26\n   |\n13 |         .filter(|el|\
    \ !el.is_none())\n   |                          ^^^^^^^ method not found in `&&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x|\
    \ x % 2).fold(0, |a, &x| a + x)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb4y82iiu.rs:10:28\n   |\n\
    10 |     lst.iter().filter(|&x| x % 2).fold(0, |a, &x| a + x)\n   |          \
    \                  ^^^^^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for val in lst {\n        if val % 2 != 0 {\n            sum += val;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp6xfat43g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = vec![false; lst.len()];\n    for i in lst.iter() {\n        if i % 2 == 0\
    \ {\n            evens[i] = true;\n        }\n    }\n    lst.iter().filter(|&x|\
    \ !evens[x]).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `&isize`\n  --> /tmp/tmp0r03877s.rs:13:13\n\
    \   |\n13 |             evens[i] = true;\n   |             ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `&isize`\n  --> /tmp/tmp0r03877s.rs:16:29\n   |\n16 |     lst.iter().filter(|&x|\
    \ !evens[x]).sum()\n   |                             ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&n|\
    \ n % 2 == 1).sum::<isize>() - (lst.iter().filter(|&n| n % 2 != 1).sum::<isize>()\
    \ % 2)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp1xqp9n5c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(_,\
    \ e)| e % 2 != 0).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp55crn9b_.rs:10:46\n\
    \   |\n10 |     lst.iter().enumerate().filter(|(_, e)| e % 2 != 0).sum::<isize>()\n\
    \   |                                            - ^ - {integer}\n   |       \
    \                                     |\n   |                                \
    \            &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `e`\n   |\n10 |     lst.iter().enumerate().filter(|(_, e)| *e % 2 != 0).sum::<isize>()\n\
    \   |                                            +\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<(usize, &isize)>` is not satisfied\n    --> /tmp/tmp55crn9b_.rs:10:56\n\
    \     |\n10   |     lst.iter().enumerate().filter(|(_, e)| e % 2 != 0).sum::<isize>()\n\
    \     |                                                        ^^^ the trait `Sum<(usize,\
    \ &isize)>` is not implemented for `isize`\n     |\n     = help: the following\
    \ other types implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n\
    \               <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n         \
    \      <f64 as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128\
    \ as Sum>\n               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n\
    \             and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    match (lst.len()\
    \ - 1, lst.iter().position(|&i| i % 2 == 1)) {\n        (Some(x), Some(y)) =>\
    \ x + solution(vec![y..lst.len() - 1]),\n        _ => 0,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7f9j2hpp.rs:11:10\n   |\n\
    10 |     match (lst.len() - 1, lst.iter().position(|&i| i % 2 == 1)) {\n   | \
    \          ----------------------------------------------------- this expression\
    \ has type `(usize, Option<usize>)`\n11 |         (Some(x), Some(y)) => x + solution(vec![y..lst.len()\
    \ - 1]),\n   |          ^^^^^^^ expected `usize`, found enum `Option`\n   |\n\
    \   = note: expected type `usize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7f9j2hpp.rs:11:49\n   |\n11 |         (Some(x),\
    \ Some(y)) => x + solution(vec![y..lst.len() - 1]),\n   |                    \
    \                             ^^^^^^^^^^^^^^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `std::ops::Range<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum_even\
    \ = vec![0; lst.len()];\n\n    for i in 0..lst.len() {\n        if lst[i] % 2\
    \ == 0 {\n            sum_even[i] += lst[i];\n        }\n    }\n\n    sum_even.iter().sum(|&i|\
    \ i / 2).unwrap()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp2uz_i6ez.rs:18:21\n     |\n18   |     sum_even.iter().sum(|&i|\
    \ i / 2).unwrap()\n     |                     ^^^ ---------- supplied 1 argument\n\
    \     |                     |\n     |                     expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens:\
    \ Vec<isize> = Vec::new();\n    let mut total: isize = 0;\n\n    for n in lst\
    \ {\n        if n % 2 == 0 {\n            evens.push(n);\n        }\n    }\n\n\
    \    for e in evens.iter_mut() {\n        if *e % 2 == 0 {\n            *e +=\
    \ 1;\n        }\n    }\n\n    if evens.iter().any(|x| x % 2 != 0) {\n        total\
    \ += evens.iter().sum();\n    }\n\n    total\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmplsdmoii6.rs:26:15\n\
    \   |\n26 |         total += evens.iter().sum();\n   |               ^^ cannot\
    \ infer type\n   |\nhelp: consider specifying the type argument in the method\
    \ call\n   |\n26 |         total += evens.iter().sum::<S>();\n   |           \
    \                       +++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    debug_assert!(lst.len()\
    \ > 0);\n    let mut odd_sum = 0;\n    let mut even_sum = 0;\n    let mut even_index\
    \ = -1;\n    let mut odd_index = -1;\n    let mut even_value = lst[0];\n    let\
    \ mut odd_value = lst[0];\n    let mut even = &lst[1];\n    let mut odd = &lst[1];\n\
    \n    for (i, &value) in lst.iter().enumerate() {\n        if value % 2 == 0 {\n\
    \            even = &lst[i];\n            even_index = i;\n        }\n       \
    \ if value % 2 == 1 {\n            odd = &lst[i];\n            odd_index = i;\n\
    \        }\n        if odd == &even {\n            even_sum += *odd;\n       \
    \     odd_sum += *odd;\n            even_index = -1;\n        }\n        if even\
    \ == &odd {\n            even_sum += *even;\n            odd_sum += *even;\n \
    \           odd_index = -1;\n        }\n        if i == lst.len() - 1 {\n    \
    \        even_sum += *even;\n            odd_sum += *odd;\n        }\n    }\n\n\
    \    if even_sum == 0 {\n        return 0;\n    }\n    if odd_sum == 0 {\n   \
    \     return even_sum;\n    }\n    odd_sum + even_sum\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpbw3zxxhw.rs:13:26\n\
    \   |\n13 |     let mut even_index = -1;\n   |                          ^^ the\
    \ trait `Neg` is not implemented for `usize`\n   |\n   = help: the following other\
    \ types implement trait `Neg`:\n             &f32\n             &f64\n       \
    \      &i128\n             &i16\n             &i32\n             &i64\n      \
    \       &i8\n             &isize\n           and 8 others\n\nerror[E0277]: the\
    \ trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpbw3zxxhw.rs:14:25\n\
    \   |\n14 |     let mut odd_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror[E0277]: can't compare `isize`\
    \ with `&isize`\n  --> /tmp/tmpbw3zxxhw.rs:29:16\n   |\n29 |         if odd ==\
    \ &even {\n   |                ^^ no implementation for `isize == &isize`\n  \
    \ |\n   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n   = note: required because of the requirements on the impl of\
    \ `PartialEq<&&isize>` for `&isize`\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `usize`\n  --> /tmp/tmpbw3zxxhw.rs:32:26\n   |\n32 |           \
    \  even_index = -1;\n   |                          ^^\n   |                  \
    \        |\n   |                          cannot apply unary operator `-`\n  \
    \ |                          help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0277]:\
    \ can't compare `isize` with `&isize`\n  --> /tmp/tmpbw3zxxhw.rs:34:17\n   |\n\
    34 |         if even == &odd {\n   |                 ^^ no implementatio"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    let mut odd = 0;\n    for v in lst.into_iter() {\n        if v & 1\
    \ == 1 {\n            even += v;\n        } else {\n            odd += v;\n  \
    \      }\n    }\n    even + odd\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpsf2mngyj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even_indexes\
    \ = vec![0; lst.len()];\n\n    for &i in lst {\n        if i % 2 == 0 {\n    \
    \        even_indexes[i/2] += 1;\n        }\n    }\n\n    even_indexes\n     \
    \   .iter()\n        .filter(|&i| i % 2 == 0)\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplsa6ohwc.rs:12:9\n   |\n\
    12 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = vec![0; lst.len()];\n    for i in 0..lst.len() {\n        if i % 2 == 0 {\n\
    \            sum[i] += lst[i];\n        }\n    }\n    sum.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpqu7kzomp.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut i\
    \ = 0;\n    let mut sum = 0;\n\n    while i < lst.len() {\n        if lst[i] %\
    \ 2 == 0 {\n            sum += lst[i];\n        }\n        i += 1;\n    }\n\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp31ueh0ur.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd\
    \ = 0usize;\n    for e in &lst {\n        if *e % 2 == 1 {\n            *e +=\
    \ 2;\n            odd += 1;\n        }\n    }\n    odd\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpayvwx10v.rs:17:5\n   |\n\
    9  | fn solution(lst: Vec<isize>) -> isize {\n   |                           \
    \      ----- expected `isize` because of return type\n...\n17 |     odd\n   |\
    \     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n17 |     odd.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 != 0).fold(0, |a, x| a + x)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp6lchv1ls.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|x| x % 2 != 0).fold(0, |a, x| a + x)\n   |\
    \                           - ^ - {integer}\n   |                           |\n\
    \   |                           &&isize\n   |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `x`\n   |\n10 |     lst.iter().filter(|x| *x % 2 != 0).fold(0,\
    \ |a, x| a + x)\n   |                           +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|&x|\
    \ x % 2 == 1).fold(0, |sum, i| sum + i)\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmphs5yx6me.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0;\n    let mut odds = 0;\n    for i in lst.iter() {\n        if i % 2 ==\
    \ 0 {\n            evens += i;\n        } else {\n            odds += i;\n   \
    \     }\n    }\n    odds + evens\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmp4yr5hk5i.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().fold(0,\
    \ |sum, i| sum + 2 * i + 1)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `46`,\n right: `12`', /tmp/tmpxj8iul1p.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut s\
    \ = 0isize;\n    for &i in lst {\n        if i % 2 == 1 {\n            s += i;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxpj2skpp.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odds:\
    \ isize = 0;\n    for x in lst.iter().skip(1) {\n        if x % 2 != 0 {\n   \
    \         odds += x;\n        }\n    }\n    odds\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpdkufgk3x.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut cnt\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            cnt += n;\n \
    \       }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpuc22f6yt.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum:\
    \ isize = 0;\n    let mut evens_sum: isize = 0;\n\n    for i in lst.iter().rev()\
    \ {\n        odd_sum += i & 1;\n        if i & 1 == 0 {\n            evens_sum\
    \ += i;\n        }\n    }\n\n    if evens_sum > odd_sum {\n        odd_sum\n \
    \   } else {\n        evens_sum\n    }\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `12`', /tmp/tmp5kc9ea7p.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = lst.clone();\n    let mut odd_sum = 0;\n\n    for x in &evens {\n        if\
    \ *x % 2 == 1 {\n            *x -= 1;\n            odd_sum += *x;\n        }\n\
    \    }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpyty27osa.rs:10:9\n\
    \   |\n10 |     let mut evens = lst.clone();\n   |         ----^^^^^\n   |   \
    \      |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0594]: cannot assign to `*x`, which is behind a `&`\
    \ reference\n  --> /tmp/tmpyty27osa.rs:15:13\n   |\n13 |     for x in &evens {\n\
    \   |              ------ this iterator yields `&` references\n14 |         if\
    \ *x % 2 == 1 {\n15 |             *x -= 1;\n   |             ^^^^^^^ `x` is a\
    \ `&` reference, so the data it refers to cannot be written\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0594`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter_map(|i|\
    \ if i % 2 == 1 { Some(i) } else { None }).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpnynok72c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = 0;\n    let mut odds = 0;\n    let mut total = 0;\n    for &i in lst {\n \
    \       if i % 2 == 0 {\n            evens += i;\n        } else {\n         \
    \   odds += i;\n        }\n    }\n    total = evens + odds;\n    total\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmproja4hyj.rs:13:9\n   |\n\
    13 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = vec![];\n    let mut odd = vec![];\n\n    for &i in lst {\n        match i\
    \ % 2 {\n            0 => {\n                even.push(i);\n            }\n  \
    \          _ => {\n                odd.push(i);\n            }\n        }\n  \
    \  }\n    if even.len() == 0 || odd.len() == 0 {\n        0\n    } else {\n  \
    \      even.iter().filter(|i| i % 2 == 1).fold(0, |acc, &i| acc + i)\n    }\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfu6iai1d.rs:13:9\n   |\n\
    13 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0369]: cannot mod `&&_`\
    \ by `{integer}`\n  --> /tmp/tmpfu6iai1d.rs:26:34\n   |\n26 |         even.iter().filter(|i|\
    \ i % 2 == 1).fold(0, |acc, &i| acc + i)\n   |                               \
    \ - ^ - {integer}\n   |                                |\n   |               \
    \                 &&_\n   |\nhelp: `%` can be used on `_`, you can dereference\
    \ `i`\n   |\n26 |         even.iter().filter(|i| *i % 2 == 1).fold(0, |acc, &i|\
    \ acc + i)\n   |                                +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    match lst.len()\
    \ {\n        1 => return lst[0],\n        _ => {\n            match (lst.iter().skip(1).take_while(|&i|\
    \ i & 1 != 0)) {\n                Some(odd) => odd.iter().sum::<isize>(),\n  \
    \              None => 0\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `match` scrutinee expression\n\
    \  --> /tmp/tmpceo3vtz9.rs:13:19\n   |\n13 |             match (lst.iter().skip(1).take_while(|&i|\
    \ i & 1 != 0)) {\n   |                   ^                                   \
    \           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp:\
    \ remove these parentheses\n   |\n13 -             match (lst.iter().skip(1).take_while(|&i|\
    \ i & 1 != 0)) {\n13 +             match lst.iter().skip(1).take_while(|&i| i\
    \ & 1 != 0) {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpceo3vtz9.rs:14:17\n\
    \   |\n13 |             match (lst.iter().skip(1).take_while(|&i| i & 1 != 0))\
    \ {\n   |                   ------------------------------------------------\n\
    \   |                   |                              |\n   |               \
    \    |                              the expected closure\n   |               \
    \    this expression has type `TakeWhile<Skip<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpceo3vtz9.rs:13:50:\
    \ 13:65]>`\n14 |                 Some(odd) => odd.iter().sum::<isize>(),\n   |\
    \                 ^^^^^^^^^ expected struct `TakeWhile`, found enum `Option`\n\
    \   |\n   = note: expected struct `TakeWhile<Skip<std::slice::Iter<'_, isize>>,\
    \ [closure@/tmp/tmpceo3vtz9.rs:13:50: 13:65]>`\n                found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpceo3vtz9.rs:15:17\n   |\n13 |\
    \             match (lst.iter().skip(1).take_while(|&i| i & 1 != 0)) {\n   | \
    \                  ------------------------------------------------\n   |    \
    \               |                              |\n   |                   |   \
    \                           the expected closure\n   |                   this\
    \ expression has type `TakeWhile<Skip<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpceo3vtz9.rs:13:50:\
    \ 13:65]>`\n14 |                 Some(odd) => odd.iter().sum::<isize>(),\n15 |\
    \                 None => 0\n   |                 ^^^^ expected struct `TakeWhile`,\
    \ found enum `Option`\n   |\n   = note: expected struct `TakeWhile<Skip<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpceo3vtz9.rs:13:50:"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    let mut odd = 0;\n\n    for i in lst.iter() {\n        match i {\n\
    \            i if i % 2 == 0 => even += i,\n            i if i % 2 == 1 => odd\
    \ += i,\n            _ => (),\n        }\n    }\n\n    return even + odd\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `12`', /tmp/tmpwt1k9gnc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd_sum\
    \ = 0;\n    let mut even_index = 0;\n    while even_index < lst.len() {\n    \
    \    if lst[even_index] % 2 == 1 {\n            odd_sum += lst[even_index];\n\
    \        }\n        even_index += 1;\n    }\n    odd_sum\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmprufzgnl8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    let mut is_even = vec![];\n    for &i in lst {\n        if i % 2 ==\
    \ 0 {\n            sum += i;\n            is_even.push(i);\n        } else {\n\
    \            if is_even.len() > 0 {\n                sum += is_even.pop().unwrap();\n\
    \            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq57je89g.rs:12:9\n   |\n\
    12 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    debug_assert!(lst.len()\
    \ >= 1);\n    let mut evensum = 0;\n    for v in lst {\n        evensum += v;\n\
    \        if v % 2 == 1 {\n            evensum -= v;\n        }\n    }\n    evensum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmps_7qgvm5.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().cloned().filter(|&x|\
    \ x % 2 != 0).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpftuwspv9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut evens\
    \ = lst.clone();\n    evens.remove(0);\n    evens.remove(1);\n    evens.remove(2);\n\
    \    evens.remove(3);\n    evens.remove(4);\n    evens.remove(5);\n    let mut\
    \ sum = 0;\n    for i in evens.iter() {\n        if i % 2 == 1 {\n           \
    \ sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 2) should be < len (is
    2)'', /tmp/tmpk8tuuiwy.rs:13:11

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ > 0 {\n        let mut max_even = 0;\n        let mut max_odd = 0;\n       \
    \ for v in lst {\n            if v % 2 == 0 {\n                max_even += v;\n\
    \            } else {\n                max_odd += v;\n            }\n        }\n\
    \        max_even += max_odd;\n        max_even += max_odd / 2;\n    }\n    0\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpm6q9vy8x.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .skip(2)\n        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmp27yjrnex.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.windows(2).filter(|&v|\
    \ v % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&[isize]` by `{integer}`\n  --> /tmp/tmpj_rlnt84.rs:10:34\n\
    \   |\n10 |     lst.windows(2).filter(|&v| v % 2 == 1).sum::<isize>()\n   |  \
    \                              - ^ - {integer}\n   |                         \
    \       |\n   |                                &[isize]\n\nerror[E0277]: the trait\
    \ bound `isize: Sum<&[isize]>` is not satisfied\n    --> /tmp/tmpj_rlnt84.rs:10:44\n\
    \     |\n10   |     lst.windows(2).filter(|&v| v % 2 == 1).sum::<isize>()\n  \
    \   |                                            ^^^ the trait `Sum<&[isize]>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0369.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpgjymob7e.rs:10:29\n\
    \   |\n10 |     lst.iter().filter(|x| x % 2 == 1).sum()\n   |                \
    \           - ^ - {integer}\n   |                           |\n   |          \
    \                 &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n   |\n10 |     lst.iter().filter(|x| *x % 2 == 1).sum()\n   |         \
    \                  +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum:\
    \ isize = 0;\n    for x in lst.iter() {\n        if x % 2 == 0 {\n           \
    \ sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpsk9wo3tc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .filter(|&x| x % 2 != 0)\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp1c7nlfov.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    if lst.len()\
    \ == 0 {\n        return 0;\n    }\n\n    let mut evens = vec![];\n    let mut\
    \ odd = vec![];\n\n    for x in lst {\n        if x % 2 == 0 {\n            evens.push(x);\n\
    \        } else {\n            odd.push(x);\n        }\n    }\n\n    let mut evens_pos\
    \ = evens.len();\n    for x in odd {\n        evens_pos -= 1;\n        if evens_pos\
    \ < 0 {\n            break;\n        }\n\n        evens.push(x);\n    }\n\n  \
    \  evens.iter().sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp64o2skru.rs:27:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut sum\
    \ = 0;\n    for val in lst {\n        if val % 2 == 0 {\n            sum += val;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpa7dl6wzx.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    for &i in lst {\n        if i & 1 == 1 {\n            even += i;\n\
    \        }\n    }\n    even\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpesdhtmrr.rs:11:9\n   |\n\
    11 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst\n   \
    \     .iter()\n        .position(|&n| n % 2 == 1)\n        .map(|&i| lst[i..].iter().sum::<isize>())\n\
    \        .sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgwcis1oe.rs:13:15\n   |\n\
    13 |         .map(|&i| lst[i..].iter().sum::<isize>())\n   |               ^--\n\
    \   |               ||\n   |               |expected due to this\n   |       \
    \        expected `usize`, found reference\n   |               help: did you mean\
    \ `i`: `&usize`\n   |\n   = note:   expected type `usize`\n           found reference\
    \ `&_`\n\nerror[E0599]: `Option<isize>` is not an iterator\n   --> /tmp/tmpgwcis1oe.rs:14:10\n\
    \    |\n14  |           .sum()\n    |            ^^^ `Option<isize>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<isize>: Iterator`\n            which is required by `&mut\
    \ Option<isize>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter()\n\
    \        .enumerate()\n        .filter(|(_, i)| i % 2 == 1)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpadzdg8sl.rs:12:28\n\
    \   |\n12 |         .filter(|(_, i)| i % 2 == 1)\n   |                       \
    \   - ^ - {integer}\n   |                          |\n   |                   \
    \       &&isize\n   |\nhelp: `%` can be used on `isize`, you can dereference `i`\n\
    \   |\n12 |         .filter(|(_, i)| *i % 2 == 1)\n   |                      \
    \    +\n\nerror[E0277]: the trait bound `isize: Sum<(usize, &isize)>` is not satisfied\n\
    \    --> /tmp/tmpadzdg8sl.rs:13:10\n     |\n13   |         .sum()\n     |    \
    \      ^^^ the trait `Sum<(usize, &isize)>` is not implemented for `isize`\n \
    \    |\n     = help: the following other types implement trait `Sum<A>`:\n   \
    \            <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n            \
    \   <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as\
    \ Sum<&'a i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a\
    \ i16>>\n               <i16 as Sum>\n             and 20 others\nnote: required\
    \ by a bound in `std::iter::Iterator::sum`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut even\
    \ = 0;\n    for num in lst {\n        if num % 2 == 0 {\n            even += num;\n\
    \        }\n    }\n    return even;\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpb8cb4n2b.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut odd\
    \ = 0isize;\n    let mut even = 0isize;\n    let mut last = 0;\n    let mut curr\
    \ = 1;\n    for &i in lst {\n        if i % 2 == 0 {\n            even = even\
    \ + i;\n        } else {\n            odd = odd + i;\n        }\n        last\
    \ = i;\n    }\n    if even == 0 {\n        return 0\n    }\n    if even > last\
    \ {\n        odd = even - last;\n    } else {\n        even = even;\n    }\n \
    \   even += 1;\n    if even < last {\n        odd = 0;\n    }\n    return odd\
    \ + even;\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1v9s8jig.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    lst.iter().skip_while(|&x|\
    \ x % 2).sum::<isize>()\n}\n\nfn main() {\n    let candidate = solution;\n   \
    \ assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpei7tr9ud.rs:10:32\n   |\n\
    10 |     lst.iter().skip_while(|&x| x % 2).sum::<isize>()\n   |              \
    \                  ^^^^^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// Given a non-empty vector of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5,\
    \ 8, 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
    \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n    let mut total_sum\
    \ = 0;\n    for x in lst {\n        if x % 2 == 1 {\n            total_sum +=\
    \ x;\n        }\n    }\n    total_sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpugnql0ev.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
