language: rs
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    for i in\
    \ l.iter().rev() {\n        if j == i {\n            continue;\n        }\n  \
    \      if l[j] - i == 0 {\n            i += 1;\n            j += 1;\n        }\
    \ else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpfssyaj0n.rs:18:14\n\
    \   |\n18 |         if j == i {\n   |              ^^ no implementation for `isize\
    \ == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpfssyaj0n.rs:21:12\n   |\n21 |         if l[j] - i == 0 {\n   |\
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&isize`\n\
    \  --> /tmp/tmpfssyaj0n.rs:22:13\n   |\n22 |             i += 1;\n   |       \
    \      -^^^^^\n   |             |\n   |             cannot use `+=` on type `&isize`\n\
    \   |\nhelp: `+=` can be used on `isize`, you can dereference `i`\n   |\n22 |\
    \             *i += 1;\n   |             +\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().partition(|&i| {\n        *i == 0\n    }).all(|a|\
    \ a.len() == 2)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `all` found for tuple `(_, _)` in the current\
    \ scope\n  --> /tmp/tmpbrx4ikst.rs:17:8\n   |\n17 |     }).all(|a| a.len() ==\
    \ 2)\n   |        ^^^ method not found in `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l.iter() {\n     \
    \   sum += i;\n        if sum == 0 {\n            return false;\n        }\n \
    \   }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwdgegt9d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .filter(|(i, elem)| elem == 0)\n        .any(|(i, elem)| elem != 0)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp46dhg59h.rs:19:34\n\
    \   |\n19 |         .filter(|(i, elem)| elem == 0)\n   |                     \
    \             ^^ no implementation for `&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut first = true;\n    let mut last = false;\n\
    \    let mut sum = 0;\n\n    for &n in l {\n        if first {\n            first\
    \ = false;\n        } else {\n            if n == -sum {\n                last\
    \ = true;\n            } else {\n                last = false;\n             \
    \   sum += n;\n            }\n        }\n    }\n\n    last\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzrvqtjuc.rs:19:9\n   |\n\
    19 |     for &n in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut c\
    \ = 0;\n    for v in l {\n        if i == j {\n            i += 1;\n         \
    \   c += v;\n        } else {\n            c += v - j;\n            i += 1;\n\
    \            j += 1;\n        }\n        if c > 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_bbykhdt.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().windows(2)\n        .map(|mut it|\
    \ it.iter().cloned())\n        .filter(|&v| !v.iter().any(|&i| i as isize == 0))\n\
    \        .count() != 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpwoflq00j.rs:15:23\n   |\n15 |     l.iter().cloned().windows(2)\n\
    \   |                       ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \    let mut i1 = 0;\n    let mut i2 = l.len() - 1;\n    let mut z = 0;\n    while\
    \ i1 < i2 {\n        let e1 = l[i1];\n        let e2 = l[i2];\n        z += e1;\n\
    \        z -= e2;\n        if z == 0 {\n            return true;\n        }\n\
    \        if z < 0 {\n            return false;\n        }\n        i1 += 1;\n\
    \        i2 -= 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg4cs421w.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().windows(2).all(|&x| *x == 2 ||\
    \ x == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpf24ep_nw.rs:15:23\n   |\n15 |     l.iter().cloned().windows(2).all(|&x|\
    \ *x == 2 || x == 0)\n   |                       ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut v = l.to_vec();\n    v.sort_unstable();\n\
    \    if v.len() > 1 {\n        let mut sum = 0;\n        let mut found = false;\n\
    \        for (idx, &x) in v.into_iter().enumerate() {\n            if sum < 0\
    \ {\n                found = true;\n            }\n            sum += x;\n   \
    \         if sum == 0 {\n                v.swap(idx, v.len() - 1);\n         \
    \       break;\n            }\n        }\n    }\n    v.len() > 1\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwwzqib6.rs:20:19\n   |\n\
    20 |         for (idx, &x) in v.into_iter().enumerate() {\n   |              \
    \     ^^     ------------------------- this expression has type `Option<(usize,\
    \ isize)>`\n   |                   |\n   |                   expected `isize`,\
    \ found reference\n   |                   help: you can probably remove the explicit\
    \ borrow: `x`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut has_pair = false;\n    let mut has_sum =\
    \ false;\n    for n in l {\n        if n < 0 {\n            return false;\n  \
    \      }\n        for m in l {\n            if m > n {\n                break;\n\
    \            }\n            if m + n == 0 {\n                has_sum = true;\n\
    \                break;\n            }\n        }\n        if has_sum {\n    \
    \        return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `has_pair`\n  --> /tmp/tmp6c_bfubl.rs:15:13\n\
    \   |\n15 |     let mut has_pair = false;\n   |             ^^^^^^^^ help: if\
    \ this is intentional, prefix it with an underscore: `_has_pair`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nwarning: variable does not need\
    \ to be mutable\n  --> /tmp/tmp6c_bfubl.rs:15:9\n   |\n15 |     let mut has_pair\
    \ = false;\n   |         ----^^^^^^^^\n   |         |\n   |         help: remove\
    \ this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]:\
    \ use of moved value: `l`\n   --> /tmp/tmp6c_bfubl.rs:21:18\n    |\n14  | fn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    |                      - move occurs because `l`\
    \ has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n17  |\
    \     for n in l {\n    |              - `l` moved due to this implicit call to\
    \ `.into_iter()`\n...\n21  |         for m in l {\n    |                  ^ value\
    \ used here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n17  |     for n in &l {\n\
    \    |              +\n\nerror: aborting due to previous error; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // the algorithm here is slightly modified to take\
    \ advantage of the fact that there are\n    // only 2 distinct elements in the\
    \ vector\n    l[0] >= l[1] && (l[0] > 0 || l[1] > 0)\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj37zilw8.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s = l;\n    s.sort();\n    let mut c = 0;\n\
    \    let mut sum = 0;\n    for &i in s {\n        if c == 2 {\n            return\
    \ false;\n        }\n        sum += i;\n        c += 1;\n    }\n    sum == 0 &&\
    \ c == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n   \
    \ assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5wnlqlcw.rs:19:9\n   |\n\
    19 |     for &i in s {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // TODO: implement with hash_map and bit array\n\
    \    let mut pairs = Vec::new();\n    for (i, elt) in l.iter().enumerate() {\n\
    \        pairs.push((i, elt, 0));\n    }\n    pairs.sort();\n    let mut sum =\
    \ 0;\n    for (_, elt, sum) in pairs {\n        if sum != 0 {\n            break;\n\
    \        }\n    }\n    sum != 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7abfxy8s.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|x| l.iter().any(|y| y == x + 0))\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp3nwsktk3.rs:15:41\n\
    \   |\n15 |     l.iter().all(|x| l.iter().any(|y| y == x + 0))\n   |         \
    \                                ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // initialize sum with the first element (the first\
    \ pair)\n    let mut s = l[0].to_owned();\n    for pair in l {\n        if pair\
    \ != 0 {\n            s += pair;\n        }\n    }\n    // compare each element\
    \ of the remaining vector to the sum\n    for pair in l {\n        if pair !=\
    \ s {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpvoji1jfi.rs:23:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n17  |     for pair in l {\n    |                 - `l`\
    \ moved due to this implicit call to `.into_iter()`\n...\n23  |     for pair in\
    \ l {\n    |                 ^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n17  |     for pair in &l {\n    |                 +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // If there are no pairs, return false.\n    match\
    \ l.len() {\n        0 => false,\n        1 => true,\n        _ => return l.iter().combinations(2).all(|(a,\
    \ b)| a != b),\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpm7lpyo6x.rs:19:30\n   |\n19 |         _\
    \ => return l.iter().combinations(2).all(|(a, b)| a != b),\n   |             \
    \                 ^^^^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().combination(2).all(|(a, b)| a == 0 || b\
    \ == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combination` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp02batsok.rs:15:14\n   |\n15 |     l.iter().combination(2).all(|(a,\
    \ b)| a == 0 || b == 0)\n   |              ^^^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n        if sum == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8eidtzw3.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut is_zero = false;\n    let mut last = 0;\n\
    \    for el in l {\n        if el - last == 0 {\n            is_zero = true;\n\
    \            break;\n        }\n        last = el;\n    }\n    is_zero\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2rhfpgno.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().enumerate().any(|(i, item)| {\n        l.iter().skip(i).any(|x|\
    \ item + x == 0)\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7tckjrsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false\n    }\n\
    \    let mut i1: isize = 0;\n    let mut i2: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for j in l.iter().rev() {\n        sum = sum + j;\n        if (i1\
    \ != sum && i2 != sum) {\n            return false\n        }\n        if i1 ==\
    \ sum {\n            i1 += j;\n        } else {\n            i2 += j;\n      \
    \  }\n    }\n    i1 == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplf4ppprj.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut c = 0;\n    for v in l {\n        if v >\
    \ 0 {\n            c += v;\n            if c == 0 {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkqj19dpa.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum\
    \ = 0;\n    while i != l.len() || j != l.len() {\n        if i == j.len() {\n\
    \            break;\n        }\n        if l[i] == l[j] {\n            sum +=\
    \ l[i];\n            i += 1;\n            j += 1;\n        } else if l[i] > l[j]\
    \ {\n            i += 1;\n        } else {\n            j += 1;\n        }\n \
    \   }\n    sum == 0 && i == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpt8_kltsc.rs:19:19\n   |\n19 |         if i == j.len() {\n\
    \   |                   ^^^ method not found in `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| l.iter().any(|&y| y == x))\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpobijvhti.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(true, |mut acc, elem| {\n        acc\
    \ && accumulator_sum_to_zero(&mut acc, &elem) == Some(true)\n    })\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `accumulator_sum_to_zero` in this scope\n\
    \  --> /tmp/tmpao7arq_9.rs:16:16\n   |\n16 |         acc && accumulator_sum_to_zero(&mut\
    \ acc, &elem) == Some(true)\n   |                ^^^^^^^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut prev_element = vec![];\n    for &x in l {\n\
    \        if x == 0 {\n            prev_element.push(x);\n        }\n        prev_element\
    \ = x;\n    }\n\n    for &x in prev_element {\n        if l.iter().any(|&y| x\
    \ == y) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzbmj2w89.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpzbmj2w89.rs:20:24\n   |\n20 |         prev_element = x;\n   | \
    \                       ^ cyclic type of infinite size\n\nerror[E0277]: can't\
    \ compare `&_` with `{integer}`\n  --> /tmp/tmpzbmj2w89.rs:17:14\n   |\n17 | \
    \        if x == 0 {\n   |              ^^ no implementation for `&_ == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&_`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |b, i| b && b - i == 0)\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `&isize` from `bool`\n  --> /tmp/tmppa1trknk.rs:15:40\n\
    \   |\n15 |     l.iter().fold(false, |b, i| b && b - i == 0)\n   |           \
    \                           - ^ - &isize\n   |                               \
    \       |\n   |                                      bool\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l\n        .iter()\n        .enumerate()\n      \
    \  .any(|(idx, item)| item == 0 && idx != 0)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpejhzd0t8.rs:18:33\n\
    \   |\n18 |         .any(|(idx, item)| item == 0 && idx != 0)\n   |          \
    \                       ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |x, y| x + y != 0)\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&isize` to `bool`\n  --> /tmp/tmpg60hdwwe.rs:15:35\n\
    \   |\n15 |     l.iter().fold(false, |x, y| x + y != 0)\n   |                \
    \                 - ^ - &isize\n   |                                 |\n   | \
    \                                bool\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    loop {\n\
    \        if i == l.len() {\n            return sum == 0;\n        }\n        sum\
    \ += l[i];\n        i += 1;\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwo6x9tl0.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().combinations(2).all(|(a, b)| {\n       \
    \ a * b != 0\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp82su5whi.rs:15:14\n   |\n15 |     l.iter().combinations(2).all(|(a,\
    \ b)| {\n   |              ^^^^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut j = 0;\n    for k in l {\n        j = j +\
    \ k;\n    }\n    let i = l.len() - j;\n    if i < 2 || i != l.iter().last().unwrap()\
    \ + 1 {\n        false\n    } else {\n        let mut i = 0;\n        for j in\
    \ l {\n            i = i + j;\n            if i < 0 || i == 0 {\n            \
    \    return true;\n            }\n        }\n        false\n    }\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqe2tm3tw.rs:19:23\n   |\n\
    19 |     let i = l.len() - j;\n   |                       ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpqe2tm3tw.rs:19:21\n\
    \   |\n19 |     let i = l.len() - j;\n   |                     ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqe2tm3tw.rs:20:22\n\
    \   |\n20 |     if i < 2 || i != l.iter().last().unwrap() + 1 {\n   |        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n20 |     if i < 2 || i != (l.iter().last().unwrap()\
    \ + 1).try_into().unwrap() {\n   |                      +                    \
    \        +++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(true, |a, x| {\n        if let Some(i)\
    \ = (a * x + b).checked_add(&x) {\n            if *i <= 0 {\n                false\n\
    \            } else {\n                *i > 0\n            }\n        } else {\n\
    \            false\n        }\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `b` in this scope\n  --> /tmp/tmpkcuomumd.rs:16:35\n\
    \   |\n16 |         if let Some(i) = (a * x + b).checked_add(&x) {\n   |     \
    \                              ^ help: a local variable with a similar name exists:\
    \ `a`\n\nerror[E0369]: cannot multiply `bool` by `&isize`\n  --> /tmp/tmpkcuomumd.rs:16:29\n\
    \   |\n16 |         if let Some(i) = (a * x + b).checked_add(&x) {\n   |     \
    \                      - ^ - &isize\n   |                           |\n   |  \
    \                         bool\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0369, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\
    \    let mut sum = 0;\n    let mut found = false;\n    for i in l.iter() {\n \
    \       sum += i;\n        if sum < 0 {\n            return false;\n        }\n\
    \        if sum == 0 {\n            found = true;\n        }\n    }\n    found\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpksv9x4n3.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().sum::<isize>() == 0\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6rqnvuc1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut is_pair = false;\n    let mut min_value =\
    \ std::isize::MIN;\n    for (i, &v) in l.iter().enumerate() {\n        if v >\
    \ min_value && v - min_value > 0 {\n            is_pair = true;\n            min_value\
    \ = v;\n        }\n        if i == 0 {\n            min_value = v;\n        }\n\
    \    }\n    is_pair && min_value != 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp3vuv4plw.rs:18:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l\n        .iter()\n        .fold(true, |acc, x|\
    \ {\n            if *acc + x == 0 {\n                false\n            } else\
    \ {\n                *acc += x;\n                true\n            }\n       \
    \ })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `bool` cannot be dereferenced\n  --> /tmp/tmpiqlxx2gq.rs:18:16\n\
    \   |\n18 |             if *acc + x == 0 {\n   |                ^^^^\n\nerror[E0614]:\
    \ type `bool` cannot be dereferenced\n  --> /tmp/tmpiqlxx2gq.rs:21:17\n   |\n\
    21 |                 *acc += x;\n   |                 ^^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 2 {\n        return false;\n    }\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while i < l.len()\
    \ && j < l.len() {\n        sum += l[i];\n        sum += l[j];\n        if sum\
    \ == 0 {\n            return true;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6gp60w3f.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.len() == 0 || l.iter().fold(false, |b, x| b ||\
    \ b == (x.iter().sum() == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpc9l8d30i.rs:15:62\n   |\n15 |     l.len() == 0\
    \ || l.iter().fold(false, |b, x| b || b == (x.iter().sum() == 0))\n   |      \
    \                                                        ^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut has_zero = false;\n\
    \    for &x in l {\n        if x == 0 {\n            has_zero = true;\n      \
    \  } else {\n            sum += x;\n        }\n    }\n    if sum < 0 {\n     \
    \   return false;\n    }\n    if sum == 0 {\n        return has_zero;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0v_6b_ix.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s = l.iter().cloned().fold(0, |acc, &x| acc\
    \ + x);\n    s.is_zero()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqorg529n.rs:15:49\n   |\n\
    15 |     let mut s = l.iter().cloned().fold(0, |acc, &x| acc + x);\n   |     \
    \                                            ^--\n   |                       \
    \                          ||\n   |                                          \
    \       |expected due to this\n   |                                          \
    \       expected `isize`, found reference\n   |                              \
    \                   help: did you mean `x`: `&isize`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0689]: can't call method\
    \ `is_zero` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpqorg529n.rs:16:7\n\
    \   |\n16 |     s.is_zero()\n   |       ^^^^^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n15 |     let mut s: i32 = l.iter().cloned().fold(0,\
    \ |acc, &x| acc + x);\n   |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    seen.insert(0);\n\
    \    for (i, n) in l.iter().enumerate() {\n        if seen[*n].is_none() {\n \
    \           return true;\n        }\n        seen.insert(*n);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpubwx9fqe.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(true, |a, b| a && b == 0)\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpwdjq9x70.rs:15:39\n\
    \   |\n15 |     l.iter().fold(true, |a, b| a && b == 0)\n   |                \
    \                       ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l;\n    let mut sum = 0;\n    while l.len()\
    \ > 1 {\n        let x = l.iter().next();\n        let y = l.iter().next();\n\
    \        sum += x;\n        sum = sum - y;\n        if sum == 0 {\n          \
    \  return true;\n        }\n        l.remove(x);\n        l.remove(y);\n    }\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<&isize>` to `{integer}`\n  -->\
    \ /tmp/tmpglql4ty0.rs:20:13\n   |\n20 |         sum += x;\n   |             ^^\
    \ no implementation for `{integer} += Option<&isize>`\n   |\n   = help: the trait\
    \ `AddAssign<Option<&isize>>` is not implemented for `{integer}`\n   = help: the\
    \ following other types implement trait `AddAssign<Rhs>`:\n             <f32 as\
    \ AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0277]: cannot\
    \ subtract `Option<&isize>` from `{integer}`\n  --> /tmp/tmpglql4ty0.rs:21:19\n\
    \   |\n21 |         sum = sum - y;\n   |                   ^ no implementation\
    \ for `{integer} - Option<&isize>`\n   |\n   = help: the trait `Sub<Option<&isize>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpglql4ty0.rs:25:18\n\
    \   |\n25 |         l.remove(x);\n   |                  ^ expected `usize`, found\
    \ enum `Option`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpglql4ty0.rs:26:18\n\
    \   |\n26 |         l.remove(y);\n   |                  ^ expected `usize`, found\
    \ enum `Option`\n   |\n   = note: expected type `usize`\n              found enum\
    \ `Option<&isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().zip(l.iter().skip(1)).all(|(a, b)| a + b\
    \ == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5mu3h8ok.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut sum = 0;\n    while i\
    \ < l.len() {\n        if l[i] < 0 {\n            return false;\n        }\n \
    \       sum += l[i];\n        i += 1;\n    }\n    sum == 0\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy8rrqgdf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s = 0;\n    for i in l {\n        s += i;\n\
    \        if s == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv_b0k3ys.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n\n    while\
    \ i < l.len() {\n        if l[i] > 0 {\n            sum += l[i];\n        }\n\
    \        if sum == 0 {\n            return true;\n        }\n        i += 1;\n\
    \        sum -= l[i];\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpyj3pn3ky.rs:26:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut has_pairs = false;\n    for &i in l {\n \
    \       for &j in l {\n            if i == j && i != 0 {\n                has_pairs\
    \ = true;\n            }\n        }\n    }\n    has_pairs\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nyjzl_p.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4nyjzl_p.rs:17:13\n   |\n17 |         for &j in l {\n   |     \
    \        ^^    - this expression has type `Option<isize>`\n   |             |\n\
    \   |             expected `isize`, found reference\n   |             help: you\
    \ can probably remove the explicit borrow: `j`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    for x in l {\n        sum += x;\n        if sum == 0 {\n    \
    \        return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp4kvq5wkw.rs:19:14\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l {\n    |\
    \              - `l` moved due to this implicit call to `.into_iter()`\n...\n\
    19  |     for x in l {\n    |              ^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `l`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n16  |     for x in &l {\n    |              +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut has_zero = false;\n    let mut seen = HashMap::new();\n\
    \    for (i, &x) in l.iter().enumerate() {\n        seen.insert(x, i);\n     \
    \   if x == 0 {\n            has_zero = true;\n        }\n    }\n    !has_zero\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpyvh6n9u9.rs:16:20\n   |\n16 |     let mut seen = HashMap::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum_of_pairs = 0isize;\n    for pair in l\
    \ {\n        sum_of_pairs += pair;\n    }\n    for pair in l {\n        assert!(sum_of_pairs\
    \ <= pair,\n                \"Error: sum of pairs must not be greater than pair.\"\
    );\n        sum_of_pairs -= pair;\n    }\n    sum_of_pairs == 0\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpyduvv9vs.rs:19:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum_of_pairs = 0isize;\n16  |     for pair\
    \ in l {\n    |                 - `l` moved due to this implicit call to `.into_iter()`\n\
    ...\n19  |     for pair in l {\n    |                 ^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n16  |     for pair in &l {\n   \
    \ |                 +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut last_zero = false;\n\
    \    for &x in l {\n        sum += x;\n        if sum == 0 {\n            last_zero\
    \ = true;\n            break;\n        }\n    }\n    last_zero != l.iter().cloned().all(|&x|\
    \ x == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn4nnbkpw.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn4nnbkpw.rs:24:41\n   |\n24 |     last_zero != l.iter().cloned().all(|&x|\
    \ x == 0)\n   |                                         ^--\n   |            \
    \                             ||\n   |                                       \
    \  |expected due to this\n   |                                         expected\
    \ `isize`, found reference\n   |                                         help:\
    \ did you mean `x`: `&isize`\n   |\n   = note:   expected type `isize`\n     \
    \      found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut prev_pair = std::collections::HashSet::new();\n\
    \    let mut pair = std::collections::HashSet::new();\n\n    for x in l {\n  \
    \      let current_pair = pair.clone();\n\n        if current_pair.is_empty()\
    \ {\n            prev_pair.add(x.clone());\n        }\n\n        prev_pair.remove(x.clone());\n\
    \        pair.add(x.clone());\n    }\n\n    prev_pair.len() != pair.len() || pair.iter().all().unwrap_or(false)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `add` found for struct `HashSet` in the current\
    \ scope\n  --> /tmp/tmpx_2d_pch.rs:22:23\n   |\n22 |             prev_pair.add(x.clone());\n\
    \   |                       ^^^ method not found in `HashSet<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx_2d_pch.rs:25:26\n   |\n25 |         prev_pair.remove(x.clone());\n\
    \   |                          ^^^^^^^^^\n   |                          |\n  \
    \ |                          expected reference, found `isize`\n   |         \
    \                 help: consider borrowing here: `&x`\n   |\n   = note: expected\
    \ reference `&_`\n                   found type `isize`\n\nerror[E0599]: no method\
    \ named `add` found for struct `HashSet` in the current scope\n  --> /tmp/tmpx_2d_pch.rs:26:14\n\
    \   |\n26 |         pair.add(x.clone());\n   |              ^^^ method not found\
    \ in `HashSet<_>`\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n    --> /tmp/tmpx_2d_pch.rs:29:50\n     |\n29   |     prev_pair.len()\
    \ != pair.len() || pair.iter().all().unwrap_or(false)\n     |                \
    \                                  ^^^- supplied 0 arguments\n     |         \
    \                                         |\n     |                          \
    \                        expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0599]: no method named `unwrap_or` found for type `bool`\
    \ in the current scope\n  --> /tmp/tmpx_2d_pch.rs:29:56\n   |\n29 |     prev_pair.len()\
    \ != pair.len() || pair.iter().all().unwrap_or(false)\n   |                  \
    \                                      ^^^^^^^^^ method not found in `bool`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut zeros = vec![];\n    let mut i = 0;\n   \
    \ for &i in l {\n        if i == 0 {\n            zeros.push(i);\n        }\n\
    \        i += 1;\n    }\n    zeros.len() != l.len() && zeros.iter().all(|&i| i\
    \ == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgmbu12bc.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().combinations(2).all(|a| a[1][0]\
    \ == a[1][1])\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `Cloned`\
    \ in the current scope\n  --> /tmp/tmpgfqpqyj_.rs:15:23\n   |\n15 |     l.iter().cloned().combinations(2).all(|a|\
    \ a[1][0] == a[1][1])\n   |                       ^^^^^^^^^^^^ method not found\
    \ in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut is_pair: Vec<bool> = vec![];\n    let mut\
    \ i: isize = l.len();\n    while i >= 0 {\n        let j = i - 1;\n        if\
    \ l[j] > 0 {\n            is_pair[i as usize] = true;\n            is_pair[j]\
    \ = true;\n            i += 1;\n        }\n        else {\n            i -= 1;\n\
    \        }\n    }\n\n    for i in is_pair {\n        if i != 0 {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgl6brhc9.rs:16:24\n   |\n\
    16 |     let mut i: isize = l.len();\n   |                -----   ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |                |\n   |                expected\
    \ due to this\n   |\nhelp: you can convert a `usize` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n16 |     let mut i: isize = l.len().try_into().unwrap();\n\
    \   |                               ++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgl6brhc9.rs:19:12\n\
    \   |\n19 |         if l[j] > 0 {\n   |            ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpgl6brhc9.rs:21:13\n   |\n21 |            \
    \ is_pair[j] = true;\n   |             ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgl6brhc9.rs:30:17\n\
    \   |\n30 |         if i != 0 {\n   |                 ^ expected `bool`, found\
    \ integer\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut counter = vec![0; l.len() + 1];\n    let\
    \ mut pairs = 0;\n\n    for i in l.iter().cloned() {\n        counter[i - 1] +=\
    \ 1;\n        counter[i] = counter[i - 1];\n        if counter[i] > 1 {\n    \
    \        pairs += 1;\n        }\n    }\n\n    pairs == 0\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpgn2m97rx.rs:19:9\n   |\n19 |         counter[i - 1] += 1;\n   |    \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgn2m97rx.rs:20:9\n\
    \   |\n20 |         counter[i] = counter[i - 1];\n   |         ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgn2m97rx.rs:20:22\n\
    \   |\n20 |         counter[i] = counter[i - 1];\n   |                      ^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgn2m97rx.rs:21:12\n\
    \   |\n21 |         if counter[i] > 1 {\n   |            ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // Write your code here\n    if l.len() == 1 {\n\
    \        return false;\n    }\n    for i in 0..(l.len() - 1) {\n        if l[(i\
    \ + 1)..].iter().sum::<isize>() == 0 {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe11i928w.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().enumerate().all(|(i, elem)| {\n\
    \        elem_sum_to_zero(&elem) || i != 0\n    })\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `elem_sum_to_zero` in this scope\n \
    \ --> /tmp/tmp2wwhdav7.rs:16:9\n   |\n16 |         elem_sum_to_zero(&elem) ||\
    \ i != 0\n   |         ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.len() > 0 && l[0] + l[l..].iter().sum::<isize>()\
    \ == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `RangeFrom<Vec<isize>>`\n\
    \  --> /tmp/tmpcspbag5d.rs:15:27\n   |\n15 |     l.len() > 0 && l[0] + l[l..].iter().sum::<isize>()\
    \ == 0\n   |                           ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `RangeFrom<Vec<isize>>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<Vec<isize>>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum: isize = 0;\n\n    for pair in l.into_iter().rev()\
    \ {\n        let pair = *pair;\n        if pair != 0 {\n            sum += pair;\n\
    \        }\n    }\n    sum == l.len() && l.len() == 2\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpcsc_f5ib.rs:18:20\n\
    \   |\n18 |         let pair = *pair;\n   |                    ^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcsc_f5ib.rs:23:12\n   |\n23 |     sum == l.len()\
    \ && l.len() == 2\n   |            ^^^^^^^ expected `isize`, found `usize`\n \
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n23 |     sum == l.len().try_into().unwrap() && l.len()\
    \ == 2\n   |                   ++++++++++++++++++++\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().enumerate().any(|(i, x)| x != 0\
    \ && l.iter().skip(i).take(x).sum() == 0)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplasx08f8.rs:15:80\n   |\n\
    15 |     l.iter().cloned().enumerate().any(|(i, x)| x != 0 && l.iter().skip(i).take(x).sum()\
    \ == 0)\n   |                                                                \
    \                ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    15 |     l.iter().cloned().enumerate().any(|(i, x)| x != 0 && l.iter().skip(i).take(x.try_into().unwrap()).sum()\
    \ == 0)\n   |                                                                \
    \                 ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().map(|n| if *n == 0 { true } else { false\
    \ }).count() != l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3cf3tw9y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut n = l.len();\n    if n < 2 {\n        return\
    \ false;\n    }\n    let mut pair = l.clone();\n    let mut sum = 0;\n    while\
    \ n > 0 {\n        let sum = pair.remove(0);\n        match sum {\n          \
    \  Some(v) => pair.add(v),\n            None => return false,\n        };\n  \
    \      n--;\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpsljh9mzh.rs:27:12\n\
    \   |\n27 |         n--;\n   |            ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsljh9mzh.rs:24:13\n   |\n23 |         match\
    \ sum {\n   |               --- this expression has type `isize`\n24 |       \
    \      Some(v) => pair.add(v),\n   |             ^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsljh9mzh.rs:25:13\n\
    \   |\n23 |         match sum {\n   |               --- this expression has type\
    \ `isize`\n24 |             Some(v) => pair.add(v),\n25 |             None =>\
    \ return false,\n   |             ^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<_>`\n\
    \nerror[E0599]: no method named `add` found for struct `Vec<isize>` in the current\
    \ scope\n  --> /tmp/tmpsljh9mzh.rs:24:29\n   |\n24 |             Some(v) => pair.add(v),\n\
    \   |                             ^^^ method not found in `Vec<isize>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \    l.iter().take(2).all(|x| x == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpesuw6wm6.rs:18:32\n\
    \   |\n18 |     l.iter().take(2).all(|x| x == 0)\n   |                       \
    \         ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().enumerate().any(|(idx, x)| {\n        l.iter().enumerate().any(|(idx2,\
    \ x2)| {\n            if x2 >= x {\n                return false;\n          \
    \  }\n        });\n        true\n    })\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpa106bssd.rs:17:13\n\
    \   |\n17 | /             if x2 >= x {\n18 | |                 return false;\n\
    19 | |             }\n   | |_____________^ expected `()`, found `bool`\n   |\n\
    \   = note: `if` expressions without `else` evaluate to `()`\n   = help: consider\
    \ adding an `else` block that evaluates to the expected type\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0317`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = HashSet::new();\n    let mut carry\
    \ = 0;\n    for x in l {\n        if x != carry + x {\n            pairs.insert(x);\n\
    \        }\n        carry += x;\n    }\n    pairs.is_empty()\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpao8z80gd.rs:15:21\n   |\n15 |     let mut pairs = HashSet::new();\n\
    \   |                     ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs: Vec<_> = l.iter().cloned().collect();\n\
    \    let mut cnt = 0;\n    for x in pairs.iter() {\n        if x == 0 {\n    \
    \        cnt += 1;\n        }\n    }\n    cnt == pairs.len()\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpeg9n4eve.rs:18:14\n\
    \   |\n18 |         if x == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().combinations(2).all(|&(a, b)| *a == -(*b)\
    \ && (*a > 0 && *b > 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpkonswxwe.rs:15:14\n   |\n15 |     l.iter().combinations(2).all(|&(a,\
    \ b)| *a == -(*b) && (*a > 0 && *b > 0))\n   |              ^^^^^^^^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut total = 0;\n    for pair in l {\n       \
    \ total += pair;\n    }\n    total != 0\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2fsxi0ps.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut a = l.iter().cloned().collect::<Vec<_>>();\n\
    \    for b in a.iter().cloned().skip(1).cloned() {\n        if *a + b != 0 {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp9shvi24r.rs:16:40\n     |\n16   | \
    \    for b in a.iter().cloned().skip(1).cloned() {\n     |                   \
    \                     ^^^^^^ expected reference, found `isize`\n     |\n     =\
    \ note: expected reference `&&_`\n                found reference `&isize`\n \
    \    = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item\
    \ == &&_`\n  --> /tmp/tmp9shvi24r.rs:16:14\n   |\n16 |     for b in a.iter().cloned().skip(1).cloned()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ reference\n   |\n   = note: expected reference `&isize`\n              found\
    \ reference `&&_`\n   = note: required because of the requirements on the impl\
    \ of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant\
    \ requirement hidden\n   = note: required because of the requirements on the impl\
    \ of `~const Iterator` for `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>`\n\nerror[E0271]: type\
    \ mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item == &&_`\n\
    \  --> /tmp/tmp9shvi24r.rs:16:14\n   |\n16 |     for b in a.iter().cloned().skip(1).cloned()\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ reference\n   |\n   = note: expected reference `&isize`\n              found\
    \ reference `&&_`\n   = note: required because of the requirements on the impl\
    \ of `Iterator` for `Cloned<std::slice::Iter<'_, isize>>`\n   = note: 1 redundant\
    \ requirement hidden\n   = note: required because of the requirements on the impl\
    \ of `Iterator` for `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>`\n\nerror[E0369]:\
    \ cannot add `_` to `[isize]`\n  --> /tmp/tmp9shvi24r.rs:17:15\n   |\n17 |   \
    \      if *a "
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().partition(|&x| x.checked_sub(*x).is_err()).all(|x|\
    \ x.is_err())\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_err` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpbymnnc4h.rs:15:47\n   |\n15 |     l.iter().partition(|&x|\
    \ x.checked_sub(*x).is_err()).all(|x| x.is_err())\n   |                      \
    \                         ^^^^^^ help: there is an associated function with a\
    \ similar name: `iter`\n\nerror[E0599]: no method named `all` found for tuple\
    \ `(_, _)` in the current scope\n  --> /tmp/tmpbymnnc4h.rs:15:57\n   |\n15 | \
    \    l.iter().partition(|&x| x.checked_sub(*x).is_err()).all(|x| x.is_err())\n\
    \   |                                                         ^^^ method not found\
    \ in `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![false; l.len() * 2];\n    for\
    \ i in 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i]\
    \ + l[j] == 0 {\n                pairs[i as usize] = pairs[i as usize] || pairs[j\
    \ as usize];\n            }\n        }\n    }\n    pairs.iter().all(|&b| b)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwditg4zk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(true, |a, b| a && b && (a.0 * b.0)\
    \ == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnsu29dj8.rs:15:37\n   |\n\
    15 |     l.iter().fold(true, |a, b| a && b && (a.0 * b.0) == 0)\n   |        \
    \                             ^ expected `bool`, found `&isize`\n\nerror[E0610]:\
    \ `bool` is a primitive type and therefore doesn't have fields\n  --> /tmp/tmpnsu29dj8.rs:15:45\n\
    \   |\n15 |     l.iter().fold(true, |a, b| a && b && (a.0 * b.0) == 0)\n   | \
    \                                            ^\n\nerror[E0609]: no field `0` on\
    \ type `&isize`\n  --> /tmp/tmpnsu29dj8.rs:15:51\n   |\n15 |     l.iter().fold(true,\
    \ |a, b| a && b && (a.0 * b.0) == 0)\n   |                                   \
    \                ^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0609, E0610.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 1 {\n        return false;\n    }\n\
    \    for &e in &l {\n        for &f in &l {\n            if e == f {\n       \
    \         continue;\n            }\n            if e + f < 0 {\n             \
    \   e.abs() + f.abs() <= 1 && true\n            } else {\n                if e\
    \ + f == 0 {\n                    return true;\n                }\n          \
    \  }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9qnbeyde.rs:24:17\n   |\n\
    23 | /             if e + f < 0 {\n24 | |                 e.abs() + f.abs() <=\
    \ 1 && true\n   | |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`,\
    \ found `bool`\n25 | |             } else {\n26 | |                 if e + f ==\
    \ 0 {\n27 | |                     return true;\n28 | |                 }\n29 |\
    \ |             }\n   | |_____________- expected this to be `()`\n   |\nhelp:\
    \ consider using a semicolon here\n   |\n29 |             };\n   |           \
    \   +\nhelp: you might have meant to return this value\n   |\n24 |           \
    \      return e.abs() + f.abs() <= 1 && true;\n   |                 ++++++   \
    \                            +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for x in l {\n\
    \        if seen.contains(&x) {\n            return false;\n        }\n      \
    \  seen.insert(x);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpwcmegb9g.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.len() > 0 && l.iter().fold(false, |prev| {\n  \
    \      if *prev + l.len() != 0 && *prev != *l.len() {\n            *prev != *l.len()\n\
    \        } else {\n            *prev\n        }\n    })\n}\n\nfn main() {\n  \
    \  let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n\
    \  --> /tmp/tmp6vhf9i3j.rs:15:29\n   |\n15 |     l.len() > 0 && l.iter().fold(false,\
    \ |prev| {\n   |                             ^^^^        ------ takes 1 argument\n\
    \   |                             |\n   |                             expected\
    \ closure that takes 2 arguments\n\nerror[E0614]: type `usize` cannot be dereferenced\n\
    \  --> /tmp/tmp6vhf9i3j.rs:16:45\n   |\n16 |         if *prev + l.len() != 0 &&\
    \ *prev != *l.len() {\n   |                                             ^^^^^^^^\n\
    \nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmp6vhf9i3j.rs:17:22\n\
    \   |\n17 |             *prev != *l.len()\n   |                      ^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0593, E0614.\nFor more information about an error, try `rustc --explain E0593`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l\n        .into_iter()\n        .enumerate()\n \
    \       .fold(\n            true,\n            |mut acc, (index, item)| {\n  \
    \              if item != 0 && item != index {\n                    acc = false;\n\
    \                }\n                acc\n            },\n        )\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpox53dzpu.rs:21:41\n   |\n\
    21 |                 if item != 0 && item != index {\n   |                   \
    \                      ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |                 if item != 0 && item != index.try_into().unwrap()\
    \ {\n   |                                              ++++++++++++++++++++\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    while i <\
    \ l.len() && j < l.len() {\n        if l[i] + l[j] == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp47vpnf9o.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    let mut found = false;\n    for i in l {\n        if sum == i\
    \ {\n            found = true;\n            break;\n        }\n    }\n    found\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpp_k5zdt5.rs:20:14\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l {\n    |\
    \              - `l` moved due to this implicit call to `.into_iter()`\n...\n\
    20  |     for i in l {\n    |              ^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `l`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n16  |     for i in &l {\n    |              +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut j = i.iter().cloned().collect::<Vec<_>>();\n    let mut carry = false;\n\
    \    let mut sum = 0;\n    for i in 0..i.len() {\n        for j in 0..j.len()\
    \ {\n            carry = false;\n            if i[j] + j + sum > 0 {\n       \
    \         carry = true;\n                sum += i[j];\n                i[j] =\
    \ 0;\n            }\n            if carry {\n                return false;\n \
    \           }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `usize`\n  --> /tmp/tmpd24a5cj9.rs:22:16\n\
    \   |\n22 |             if i[j] + j + sum > 0 {\n   |                ^^^^\n\n\
    error[E0608]: cannot index into a value of type `usize`\n  --> /tmp/tmpd24a5cj9.rs:24:24\n\
    \   |\n24 |                 sum += i[j];\n   |                        ^^^^\n\n\
    error[E0608]: cannot index into a value of type `usize`\n  --> /tmp/tmpd24a5cj9.rs:25:17\n\
    \   |\n25 |                 i[j] = 0;\n   |                 ^^^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen: Vec<isize> = vec![0; l.len()];\n  \
    \  for i in l.iter().cloned() {\n        if seen[i - 1] { false }\n        else\
    \ if seen[i] == false { seen[i - 1] = true }\n        else { seen[i] = true }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb22ss44l.rs:17:26\n   |\n\
    17 |           if seen[i - 1] { false }\n   |           -                ^^^^^\
    \ expected `()`, found `bool`\n   |  _________|\n   | |\n18 | |         else if\
    \ seen[i] == false { seen[i - 1] = true }\n19 | |         else { seen[i] = true\
    \ }\n   | |_______________________________- expected this to be `()`\n   |\nhelp:\
    \ you might have meant to return this value\n   |\n17 |         if seen[i - 1]\
    \ { return false; }\n   |                          ++++++      +\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpb22ss44l.rs:17:12\n\
    \   |\n17 |         if seen[i - 1] { false }\n   |            ^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpb22ss44l.rs:18:17\n   |\n18 |  \
    \       else if seen[i] == false { seen[i - 1] = true }\n   |                \
    \ ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpb22ss44l.rs:18:36\n\
    \   |\n18 |         else if seen[i] == false { seen[i - 1] = true }\n   |    \
    \                                ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpb22ss"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |sum_zero, (i1, i2)| sum_zero\
    \ && i1 + i2 == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmtsugju8.rs:15:37\n   |\n\
    15 |     l.iter().fold(false, |sum_zero, (i1, i2)| sum_zero && i1 + i2 == 0)\n\
    \   |                                     ^^^^^^^-\n   |                     \
    \                |      |\n   |                                     |      expected\
    \ due to this\n   |                                     expected `isize`, found\
    \ tuple\n   |\n   = note: expected type `isize`\n             found tuple `(_,\
    \ _)`\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgb1gdd63.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // The inner loop will exit when the vector is reduced\
    \ to a single element\n    for x in l {\n        for y in l {\n            if\
    \ x == y {\n                continue;\n            }\n            if x + y ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpckav_l2h.rs:17:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     // The inner loop will exit when the vector is reduced\
    \ to a single element\n16  |     for x in l {\n    |              - `l` moved\
    \ due to this implicit call to `.into_iter()`\n17  |         for y in l {\n  \
    \  |                  ^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n16  |     for x in &l {\n    |              +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // let mut l = l.to_vec();\n    let mut c = l.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut s = c.iter_mut().sum::<isize>();\n    s.cmp(0) != 0\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<&mut isize>` is not satisfied\n\
    \    --> /tmp/tmpgmm1rux1.rs:17:30\n     |\n17   |     let mut s = c.iter_mut().sum::<isize>();\n\
    \     |                              ^^^ the trait `Sum<&mut isize>` is not implemented\
    \ for `isize`\n     |\n     = help: the following other types implement trait\
    \ `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n\
    \               <f64 as Sum<&'a f64>>\n               <f64 as Sum>\n         \
    \      <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n               <i16\
    \ as Sum<&'a i16>>\n               <i16 as Sum>\n             and 20 others\n\
    note: required by a bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgmm1rux1.rs:18:11\n   |\n18 |     s.cmp(0) != 0\n   | \
    \          ^\n   |           |\n   |           expected `&isize`, found integer\n\
    \   |           help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgmm1rux1.rs:18:17\n   |\n18 |     s.cmp(0) != 0\n   | \
    \                ^ expected enum `std::cmp::Ordering`, found integer\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \n    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum ==\
    \ 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkh9j__g4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    !pairs_sum_to_zero_inner(l, 0)\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pairs_sum_to_zero_inner` in this scope\n\
    \  --> /tmp/tmpi86eqveu.rs:15:6\n   |\n15 |     !pairs_sum_to_zero_inner(l, 0)\n\
    \   |      ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    (0..l.len() - 1).map(|i| l[i] + l[i+1]).distinct_with_count().is_empty()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct_with_count` found for struct `Map`\
    \ in the current scope\n  --> /tmp/tmpwgt92iwr.rs:15:45\n   |\n15 |     (0..l.len()\
    \ - 1).map(|i| l[i] + l[i+1]).distinct_with_count().is_empty()\n   |         \
    \                                    ^^^^^^^^^^^^^^^^^^^ method not found in `Map<std::ops::Range<usize>,\
    \ [closure@/tmp/tmpwgt92iwr.rs:15:26: 15:43]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s = 0;\n    for i in l.iter() {\n       \
    \ s += *i;\n    }\n    s == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk9o72lhg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().zip(l.iter().cloned())\n      \
    \  .filter(|&(x1, x2)| *x1 < *x2)\n        .any(|&(x1, x2)| x1 + x2 != 0)\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpk9mr4aiu.rs:16:29\n\
    \   |\n16 |         .filter(|&(x1, x2)| *x1 < *x2)\n   |                     \
    \        ^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpk9mr4aiu.rs:16:35\n\
    \   |\n16 |         .filter(|&(x1, x2)| *x1 < *x2)\n   |                     \
    \              ^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk9mr4aiu.rs:17:15\n\
    \   |\n17 |         .any(|&(x1, x2)| x1 + x2 != 0)\n   |               ^^^^^^^^-\n\
    \   |               |       |\n   |               |       expected due to this\n\
    \   |               expected tuple, found reference\n   |\n   = note:  expected\
    \ tuple `(isize, isize)`\n           found reference `&_`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut two_count = 0;\n    let mut three_count =\
    \ 0;\n\n    for &x in l {\n        if x == 0 {\n            two_count += 1;\n\
    \        } else {\n            three_count += 1;\n        }\n    }\n\n    if two_count\
    \ + three_count == l.len() {\n        return true;\n    }\n\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqmz45ujo.rs:18:9\n   |\n\
    18 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |sum, e| sum && e == 0)\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpqy9ebk5k.rs:15:44\n\
    \   |\n15 |     l.iter().fold(false, |sum, e| sum && e == 0)\n   |           \
    \                                 ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut j = 0;\n    let mut i = 0;\n    let mut sum\
    \ = 0;\n    while i != l.len() - 1 {\n        if j == l.len() - 1 {\n        \
    \    sum += l[i];\n            i += 1;\n        } else if l[j] == l[j + 1] {\n\
    \            sum += l[j];\n            i += 1;\n            j += 1\n        }\
    \ else {\n            sum += l[j];\n            i += 1;\n            j = 0\n \
    \       }\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphvohm0ke.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\
    \    for i in 0..l.len() - 1 {\n        let j = i + 1;\n        let mut count\
    \ = 0;\n        for v in l[0..i] {\n            if v != l[j] {\n             \
    \   break;\n            }\n            count += 1;\n        }\n        if count\
    \ != 1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp8uz4rt_r.rs:21:18\n   |\n21 |         for v\
    \ in l[0..i] {\n   |                  ^^^^^^^ expected an implementor of trait\
    \ `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator` is\
    \ not satisfied\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n21 |    \
    \     for v in &l[0..i] {\n   |                  +\n21 |         for v in &mut\
    \ l[0..i] {\n   |                  ++++\n\nerror[E0277]: `[isize]` is not an iterator\n\
    \  --> /tmp/tmp8uz4rt_r.rs:21:18\n   |\n21 |         for v in l[0..i] {\n   |\
    \                  ^^^^^^^ expected an implementor of trait `IntoIterator`\n \
    \  |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n  \
    \ = note: required because of the requirements on the impl of `IntoIterator` for\
    \ `[isize]`\nhelp: consider borrowing here\n   |\n21 |         for v in &l[0..i]\
    \ {\n   |                  +\n21 |         for v in &mut l[0..i] {\n   |     \
    \             ++++\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut flag = false;\n    for ele in l.iter() {\n\
    \        for ix in 0..ele as isize {\n            if l.iter().skip(ix).take(1).last()\
    \ >= ix {\n                flag = true;\n                break;\n            }\n\
    \        }\n        if flag {\n            break;\n        }\n    }\n    flag\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_a2rqrsw.rs:18:30\n   |\n\
    18 |             if l.iter().skip(ix).take(1).last() >= ix {\n   |           \
    \                   ^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    18 |             if l.iter().skip(ix.try_into().unwrap()).take(1).last() >= ix\
    \ {\n   |                                ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_a2rqrsw.rs:18:52\n   |\n18 |             if\
    \ l.iter().skip(ix).take(1).last() >= ix {\n   |                             \
    \                       ^^ expected enum `Option`, found `isize`\n   |\n   = note:\
    \ expected enum `Option<&isize>`\n              found type `isize`\n\nerror[E0606]:\
    \ casting `&isize` as `isize` is invalid\n  --> /tmp/tmp_a2rqrsw.rs:17:22\n  \
    \ |\n17 |         for ix in 0..ele as isize {\n   |                      ---^^^^^^^^^\n\
    \   |                      |\n   |                      cannot cast `&isize` as\
    \ `isize`\n   |                      help: dereference the expression: `*ele`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut m = vec![0; l.len()];\n    m.clone_from_slice(l);\n\
    \    for &i in m {\n        let mut k = i;\n        let mut sum = 0;\n       \
    \ while k > 0 {\n            sum += *k;\n            k /= 2;\n        }\n    \
    \    if sum == 0 {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq06thp56.rs:16:24\n   |\n\
    16 |     m.clone_from_slice(l);\n   |                        ^\n   |         \
    \               |\n   |                        expected `&[{integer}]`, found\
    \ struct `Vec`\n   |                        help: consider borrowing here: `&l`\n\
    \   |\n   = note: expected reference `&[{integer}]`\n                 found struct\
    \ `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq06thp56.rs:17:9\n\
    \   |\n17 |     for &i in m {\n   |         ^^    - this expression has type `Option<{integer}>`\n\
    \   |         |\n   |         expected integer, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `{integer}`\n           found reference `&_`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum_of_first_two\
    \ = 0;\n    let mut sum_of_other_two = 0;\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] + l[j] == 0 {\n            i += 1;\n            j += 1;\n\
    \            sum_of_first_two += l[i];\n            sum_of_other_two += l[j];\n\
    \        }\n        else {\n            if l[i] + l[j] > 0 {\n               \
    \ i += 1;\n            }\n            else {\n                j += 1;\n      \
    \      }\n        }\n    }\n    sum_of_first_two != sum_of_other_two\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzn_ayhxx.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().combinations(2).all(|&(a, b)| a + b == 0)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmployzy9dj.rs:15:14\n   |\n15 |     l.iter().combinations(2).all(|&(a,\
    \ b)| a + b == 0)\n   |              ^^^^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut zeroed = false;\n\n    for i in l {\n   \
    \     zeroed |= i != 0);\n    }\n\n    return !zeroed;\n}\n\nfn main() {\n   \
    \ let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpk0z9bs3f.rs:22:1\n\
    \   |\n14 | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |              \
    \                               - this opening brace...\n...\n19 |     }\n   |\
    \     - ...matches this closing brace\n...\n22 | }\n   | ^ unexpected closing\
    \ delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmpk0z9bs3f.rs:17:16\n\
    \   |\n17 |     for i in l {\n   |                ^ unclosed delimiter\n18 | \
    \        zeroed |= i != 0);\n   |                         ^ mismatched closing\
    \ delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // Two distinct elements that sum to 0\n    let mut\
    \ left = l.iter().cloned().collect::<Vec<isize>>();\n    left.sort();\n    let\
    \ mut right = left.iter().cloned().collect::<Vec<isize>>();\n    right.sort();\n\
    \    let mut found = false;\n    loop {\n        let mut leftsum = left.iter().sum();\n\
    \        let mut rightsum = right.iter().sum();\n        if leftsum == 0 && rightsum\
    \ == 0 {\n            found = true;\n            break;\n        }\n        if\
    \ leftsum == 0 {\n            left.pop();\n            rightsum += 1;\n      \
    \  } else if rightsum == 0 {\n            right.pop();\n            leftsum +=\
    \ 1;\n        } else {\n            leftsum += 1;\n            rightsum += 1;\n\
    \        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp0q5d_ab_.rs:22:13\n\
    \   |\n22 |         let mut leftsum = left.iter().sum();\n   |             ^^^^^^^^^^^\
    \ consider giving `leftsum` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() <= 1 {\n        return false;\n    }\n\
    \n    let mut n = l.len();\n    let mut i = 0;\n    let mut total = 0;\n\n   \
    \ while i < n {\n        if total < 0 || (total + l[i]) < 0 {\n            total\
    \ += l[i];\n        } else {\n            return false;\n        }\n\n       \
    \ i += 1;\n    }\n\n    return true;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqe1q32g_.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut n = l.len();\n    let mut carry = 0;\n\n\
    \    for i in l.iter().rev() {\n        if !(n-- || (carry && n)) {\n        \
    \    return !carry;\n        }\n\n        carry += *i;\n    }\n\n    false\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvrqn3f5.rs:19:22\n   |\n\
    19 |         if !(n-- || (carry && n)) {\n   |                      ^^^^^ expected\
    \ `bool`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvrqn3f5.rs:19:31\n\
    \   |\n19 |         if !(n-- || (carry && n)) {\n   |                        \
    \       ^ expected `bool`, found `usize`\n\nerror[E0600]: cannot apply unary operator\
    \ `-` to type `[closure@/tmp/tmpgvrqn3f5.rs:19:18: 19:33]`\n  --> /tmp/tmpgvrqn3f5.rs:19:16\n\
    \   |\n19 |         if !(n-- || (carry && n)) {\n   |                ^^^^^^^^^^^^^^^^^\
    \ cannot apply unary operator `-`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvrqn3f5.rs:19:12\n\
    \   |\n19 |         if !(n-- || (carry && n)) {\n   |            ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgvrqn3f5.rs:20:20\n\
    \   |\n20 |             return !carry;\n   |                    ^^^^^^ expected\
    \ `bool`, found integer\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0600.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut zero = false;\n   \
    \ for i in l {\n        if i == 0 {\n            zero = true;\n        } else\
    \ {\n            sum += i;\n        }\n    }\n    if sum == 0 {\n        zero\n\
    \    } else {\n        true\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzp8078xk.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(true, |b, i| b && (i + i + i) == 0)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6wg894h1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut last_positive = 0;\n    let mut first_negative\
    \ = -1;\n\n    for v in l.iter().enumerate() {\n        if v[0] >= 0 {\n     \
    \       if v[0] + v[1] > 0 {\n                last_positive = v[0] + v[1];\n \
    \           } else {\n                first_negative = v[0] + v[1];\n        \
    \    }\n        }\n    }\n    if last_positive == 0 && first_negative == -1 {\n\
    \        return true;\n    }\n    if first_negative == -1 {\n        return false;\n\
    \    }\n    if last_positive == 0 {\n        return true;\n    }\n    if last_positive\
    \ > 0 && first_negative < 0 {\n        return true;\n    }\n    if last_positive\
    \ > 0 && first_negative == 0 {\n        return true;\n    }\n    if last_positive\
    \ < 0 && first_negative > 0 {\n        return true;\n    }\n    if last_positive\
    \ < 0 && first_negative == 0 {\n        return false;\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `(usize, &isize)`\n  -->\
    \ /tmp/tmpunmwda52.rs:19:12\n   |\n19 |         if v[0] >= 0 {\n   |         \
    \   ^^^^ help: to access tuple elements, use: `v.0`\n\nerror[E0608]: cannot index\
    \ into a value of type `(usize, &isize)`\n  --> /tmp/tmpunmwda52.rs:20:16\n  \
    \ |\n20 |             if v[0] + v[1] > 0 {\n   |                ^^^^ help: to\
    \ access tuple elements, use: `v.0`\n\nerror[E0608]: cannot index into a value\
    \ of type `(usize, &isize)`\n  --> /tmp/tmpunmwda52.rs:20:23\n   |\n20 |     \
    \        if v[0] + v[1] > 0 {\n   |                       ^^^^ help: to access\
    \ tuple elements, use: `v.1`\n\nerror[E0608]: cannot index into a value of type\
    \ `(usize, &isize)`\n  --> /tmp/tmpunmwda52.rs:21:33\n   |\n21 |             \
    \    last_positive = v[0] + v[1];\n   |                                 ^^^^ help:\
    \ to access tuple elements, use: `v.0`\n\nerror[E0608]: cannot index into a value\
    \ of type `(usize, &isize)`\n  --> /tmp/tmpunmwda52.rs:21:40\n   |\n21 |     \
    \            last_positive = v[0] + v[1];\n   |                              \
    \          ^^^^ help: to access tuple elements, use: `v.1`\n\nerror[E0608]: cannot\
    \ index into a value of type `(usize, &isize)`\n  --> /tmp/tmpunmwda52.rs:23:34\n\
    \   |\n23 |                 first_negative = v[0] + v[1];\n   |              \
    \                    ^^^^ help: to access tuple elements, use: `v.0`\n\nerror[E0608]:\
    \ cannot index into a value of type `(usize, &isize)`\n  --> /tmp/tmpunmwda52.rs:23:41\n\
    \   |\n23 |                 first_negative = v[0] + v[1];\n   |              \
    \                           ^^^^ help: to access tuple elements, use: `v.1`\n\n\
    error: aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for i in l.iter()\
    \ {\n        if seen.contains(&i) {\n            return true;\n        }\n   \
    \     seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmppmu4mf7c.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpy0csy8aa.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpy0csy8aa.rs:15:36\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy0csy8aa.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut j = 0;\n    for &i in l {\n        if i ==\
    \ 0 {\n            return true;\n        }\n        if j + i == 0 {\n        \
    \    return true;\n        }\n        j = i;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqan2pkab.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l\n        .iter()\n        .enumerate()\n      \
    \  .filter(|(_, value)| value != 0)\n        .count() == l.len()\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpbybr7yfq.rs:18:36\n\
    \   |\n18 |         .filter(|(_, value)| value != 0)\n   |                   \
    \                 ^^ no implementation for `&&isize == {integer}`\n   |\n   =\
    \ help: the trait `PartialEq<{integer}>` is not implemented for `&&isize`\n  \
    \ = help: the following other types implement trait `PartialEq<Rhs>`:\n      \
    \       f32\n             f64\n             i128\n             i16\n         \
    \    i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |b, i| b && i != 0 && b.partial_cmp(&b.iter().nth(i\
    \ - 1).unwrap()) == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpz48ekkqt.rs:15:40\n\
    \   |\n15 |     l.iter().fold(false, |b, i| b && i != 0 && b.partial_cmp(&b.iter().nth(i\
    \ - 1).unwrap()) == 0)\n   |                                        ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0599]: no method named `iter`\
    \ found for type `bool` in the current scope\n  --> /tmp/tmpz48ekkqt.rs:15:65\n\
    \   |\n15 |     l.iter().fold(false, |b, i| b && i != 0 && b.partial_cmp(&b.iter().nth(i\
    \ - 1).unwrap()) == 0)\n   |                                                 \
    \                ^^^^ method not found in `bool`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz48ekkqt.rs:15:96\n   |\n15 |     l.iter().fold(false, |b, i| b\
    \ && i != 0 && b.partial_cmp(&b.iter().nth(i - 1).unwrap()) == 0)\n   |      \
    \                                                                            \
    \              ^ expected enum `Option`, found integer\n   |\n   = note: expected\
    \ enum `Option<std::cmp::Ordering>`\n              found type `{integer}`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |a, b| {\n        match b {\n\
    \            0 => return true,\n            _ => return !a,\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_fmpevkj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag\
    \ = true;\n    while i < l.len() && j < l.len() {\n        if l[j] + l[i] != 0\
    \ {\n            flag = false;\n            break;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxjmo5md6.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut prev_sum = 0;\n    let mut first_nonzero_element\
    \ = Vec::new();\n    let mut second_nonzero_element = Vec::new();\n    for (i,\
    \ e) in l.iter().enumerate() {\n        if e != 0 {\n            prev_sum += e;\n\
    \            if prev_sum != 0 {\n                if first_nonzero_element.len()\
    \ == 0 || prev_sum < first_nonzero_element[0] {\n                    first_nonzero_element.push(i);\n\
    \                }\n                if second_nonzero_element.len() == 0 || prev_sum\
    \ < second_nonzero_element[0] {\n                    second_nonzero_element.push(i);\n\
    \                }\n            }\n        }\n    }\n    first_nonzero_element.len()\
    \ == 2 && second_nonzero_element.len() == 2 && prev_sum == 0\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp85x3w21s.rs:19:14\n\
    \   |\n19 |         if e != 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp85x3w21s.rs:23:48\n\
    \   |\n23 |                     first_nonzero_element.push(i);\n   |         \
    \                                       ^ expected `isize`, found `usize`\n  \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n23 |                     first_nonzero_element.push(i.try_into().unwrap());\n\
    \   |                                                 ++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp85x3w21s.rs:26:49\n   |\n26 |  \
    \                   second_nonzero_element.push(i);\n   |                    \
    \                             ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n26 |                     second_nonzero_element.push(i.try_into().unwrap());\n\
    \   |                                                  ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut result = true;\n    for &i in l {\n     \
    \   for &j in l {\n            if i + j != 0 && !result.is_ok() {\n          \
    \      result = false;\n            }\n        }\n    }\n    result.unwrap()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpor2jw8k0.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpor2jw8k0.rs:17:13\n   |\n17 |         for &j in l {\n   |     \
    \        ^^    - this expression has type `Option<isize>`\n   |             |\n\
    \   |             expected `isize`, found reference\n   |             help: you\
    \ can probably remove the explicit borrow: `j`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0599]: no method named `is_ok`\
    \ found for type `bool` in the current scope\n  --> /tmp/tmpor2jw8k0.rs:18:38\n\
    \   |\n18 |             if i + j != 0 && !result.is_ok() {\n   |             \
    \                         ^^^^^ method not found in `bool`\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `bool` in the current scope\n  --> /tmp/tmpor2jw8k0.rs:23:12\n\
    \   |\n23 |     result.unwrap()\n   |            ^^^^^^ method not found in `bool`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen: HashSet<_> = HashSet::new();\n    for\
    \ &i in l {\n        if seen.insert(i).is_none() {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp9uhmkkyk.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<_> = HashSet::new();\n   |             \
    \      ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmp9uhmkkyk.rs:15:32\n   |\n15\
    \ |     let mut seen: HashSet<_> = HashSet::new();\n   |                     \
    \           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9uhmkkyk.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `Option<isize>`\n   |         |\n   |\
    \         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().enumerate().any(|(i, v)| {\n        let\
    \ mut j = i;\n        while j < l.len() && v + l[j] == 0 {\n            j += 1\n\
    \        }\n        j == i\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjdhf6t7k.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        if i\
    \ == 0 {\n            continue;\n        }\n        if i == 0 {\n            return\
    \ false;\n        }\n        sum += i;\n    }\n    sum == 0 && true\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfvgpnmq5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l\n        .iter()\n        .enumerate()\n      \
    \  .any(|(idx, x)| (*x - l.iter().skip(idx).sum()).abs() < 1)\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpjbwk8o26.rs:18:25\n\
    \   |\n18 |         .any(|(idx, x)| (*x - l.iter().skip(idx).sum()).abs() < 1)\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n\
    \   |\n   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l.to_vec();\n    if l.len() <= 1 {\n\
    \        return false;\n    }\n\n    l.sort();\n    let mut i = 1;\n    let mut\
    \ found = false;\n    while i < l.len() {\n        let j = i;\n        while j\
    \ < l.len() {\n            if l[j] - l[i] == 0 {\n                l[j] = 0;\n\
    \                found = true;\n                break;\n            } else {\n\
    \                j += 1;\n            }\n        }\n        i += 1;\n    }\n \
    \   !found\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpwaesiw1a.rs:31:17\n\
    \   |\n24 |         let j = i;\n   |             -\n   |             |\n   | \
    \            first assignment to `j`\n   |             help: consider making this\
    \ binding mutable: `mut j`\n...\n31 |                 j += 1;\n   |          \
    \       ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.len() > 1 && l.iter().fold(true, |sum, e| sum &&\
    \ e == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpip65422t.rs:15:58\n\
    \   |\n15 |     l.len() > 1 && l.iter().fold(true, |sum, e| sum && e == 0)\n \
    \  |                                                          ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().zip(l.iter().cloned().skip(1))\n\
    \        .any(|(a, b)| if *b == 0 && *a == 0 { true } else { false })\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp3jh98cir.rs:16:26\n\
    \   |\n16 |         .any(|(a, b)| if *b == 0 && *a == 0 { true } else { false\
    \ })\n   |                          ^^\n\nerror[E0614]: type `isize` cannot be\
    \ dereferenced\n  --> /tmp/tmp3jh98cir.rs:16:37\n   |\n16 |         .any(|(a,\
    \ b)| if *b == 0 && *a == 0 { true } else { false })\n   |                   \
    \                  ^^\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut l = l.clone();\n    l.sort();\n    let mut\
    \ pairs = vec![(false, false)];\n    let mut prev = 0;\n    for v in l.iter()\
    \ {\n        if prev > v {\n            pairs.push((true, true));\n        } else\
    \ {\n            pairs.push((false, false));\n        }\n        prev = v;\n \
    \   }\n    match pairs.len() {\n        0 => false,\n        1 => true,\n    \
    \    _ => false,\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpm7631j8j.rs:20:17\n\
    \   |\n20 |         if prev > v {\n   |                 ^ no implementation for\
    \ `isize < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpm7631j8j.rs:25:16\n   |\n18 |     let mut prev = 0;\n   |          \
    \          - expected due to this value\n...\n25 |         prev = v;\n   |   \
    \             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n25 |         prev = *v;\n   |                +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return false;\n    }\n\n\
    \    for i in (0..l.len()).step_by(2) {\n        if l[i] + l[i+1] != 0 {\n   \
    \         return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdo25b9e9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut total = 0;\n    for i in l {\n        total\
    \ += i;\n    }\n    total > 1\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpv767ajjz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().filter(|x| x == 0).count() == 2\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpt_85afcs.rs:15:27\n\
    \   |\n15 |     l.iter().filter(|x| x == 0).count() == 2\n   |               \
    \            ^^ no implementation for `&&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n        if sum < 0 {\n            return false;\n        }\n    }\n \
    \   true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiqc6u1u1.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // The idea here is to find the two elements that\
    \ sum to zero and check if\n    // they have the same sign. The second element\
    \ is guaranteed to be non-zero.\n    // So if abs(a - b) < epsilon then a = -b\n\
    \    l.iter().enumerate().fold(\n        Vec::new(),\n        |mut vec, (idx,\
    \ &a): (Vec<_>, &isize)| {\n            if a > 0 {\n                let (b, c)\
    \ = vec.split_last_mut(1);\n                if b > 0 && b - c < 0 {\n        \
    \            *b.clone() + c = -b + c;\n                    vec[idx + 1] = -c;\n\
    \                }\n            }\n            vec\n        },\n    )\n    .all(|vec|\
    \ vec.len() == 2)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp98vyexpg.rs:20:10\n\
    \   |\n20 |         |mut vec, (idx, &a): (Vec<_>, &isize)| {\n   |          ^^^^^^^\
    \ consider giving this closure parameter a type\n   |\n   = note: type must be\
    \ known at this point\n\nerror[E0070]: invalid left-hand side of assignment\n\
    \  --> /tmp/tmp98vyexpg.rs:24:36\n   |\n24 |                     *b.clone() +\
    \ c = -b + c;\n   |                     -------------- ^\n   |               \
    \      |\n   |                     cannot assign to this expression\n\nerror[E0369]:\
    \ cannot add `{integer}` to `Vec<_>`\n  --> /tmp/tmp98vyexpg.rs:25:29\n   |\n\
    25 |                     vec[idx + 1] = -c;\n   |                         ---\
    \ ^ - {integer}\n   |                         |\n   |                        \
    \ Vec<_>\n\nerror[E0599]: no method named `all` found for struct `Vec<_>` in the\
    \ current scope\n  --> /tmp/tmp98vyexpg.rs:31:6\n   |\n31 |     .all(|vec| vec.len()\
    \ == 2)\n   |      ^^^ method not found in `Vec<_>`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0070, E0282, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0070`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut last_two = l.len() - 2;\n    for i in 0..last_two\
    \ {\n        if l[i] == 0 {\n            for j in i+1..last_two {\n          \
    \      if l[j] == 0 {\n                    return false;\n                }\n\
    \            }\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3bb_riaq.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(true, |accum, x| {\n        accum &&\
    \ l.iter().fold(false, |accum, x2| {\n            accum && l.iter().fold(false,\
    \ |accum, x3| {\n                accum && l.iter().fold(false, |accum, x4| {\n\
    \                    accum && l.iter().fold(false, |accum, x5| {\n           \
    \             accum && l.iter().fold(false, |accum, x6| {\n                  \
    \          accum && l.iter().fold(false, |accum, x7| {\n                     \
    \           accum && l.iter().fold(false, |accum, x8| {\n                    \
    \                accum && l.iter().fold(false, |accum, x9| {\n               \
    \                         accum && l.iter().fold(false, |accum, x10| {\n     \
    \                                       accum && l.iter().fold(false, |accum,\
    \ x11| {\n                                                accum && l.iter().fold(false,\
    \ |accum, x12| {\n                                                    accum &&\
    \ l.iter().fold(false, |accum, x13| {\n                                      \
    \                  accum && l.iter().fold(false, |accum, x14| {\n            \
    \                                                accum && l.iter().fold(false,\
    \ |accum, x15| {\n                                                           \
    \     accum && l.iter().fold(false, |accum, x16| {\n                         \
    \                                           accum && l.iter().fold(false, |accum,\
    \ x17| {\n                                                                   \
    \     accum && l.iter().fold(false, |accum, x18| {\n                         \
    \                                                   accum && l.iter().fold(false,\
    \ |accum, x19| {\n                                                           \
    \                     accum && l.iter().fold(false, |accum, x20| {\n         \
    \                                                                           accum\
    \ && l.iter().fold(false, |accum, x21| {\n                                   \
    \                                                     accum && l.iter().fold(false,\
    \ |accum, x22| {\n                                                           \
    \                                 accum && l.iter().fold(false, |accum, x23| {\n\
    \                                                                            \
    \                    accum && l.iter().fold(false, |accum, x24| {\n          \
    \                                                                            \
    \              accum && l.iter().fold(false, |accum, x25| {\n                \
    \                                                                            \
    \            accum && l.iter().fold(false, |accum, x26| {\n                  \
    \                                                                            \
    \              accum && l.iter().fold(false, |accum, x27| {\n                \
    \                                                                            \
    \                    accum && l.iter().fold(false, |accum, x28| {\n          \
    \                                                                            \
    \                              accum && l.iter().fold(false, |accum, x29| {\n\
    \                                                                            \
    \                                            accum && l.iter().\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_3lpy7hu.rs:58:3\n\
    \   |\n14 | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |              \
    \                               - unclosed delimiter\n15 |     l.iter().fold(true,\
    \ |accum, x| {\n   |                  -                 - unclosed delimiter\n\
    \   |                  |\n   |                  unclosed delimiter\n16 |     \
    \    accum && l.iter().fold(false, |accum, x2| {\n   |                       \
    \        -                   - unclosed delimiter\n   |                      \
    \         |\n   |                               unclosed delimiter\n17 |     \
    \        accum && l.iter().fold(false, |accum, x3| {\n   |                   \
    \                -                   - unclosed delimiter\n   |              \
    \                     |\n   |                                   unclosed delimiter\n\
    18 |                 accum && l.iter().fold(false, |accum, x4| {\n   |       \
    \                                -                   - unclosed delimiter\n  \
    \ |                                       |\n   |                            \
    \           unclosed delimiter\n19 |                     accum && l.iter().fold(false,\
    \ |accum, x5| {\n   |                                           -            \
    \       - unclosed delimiter\n   |                                           |\n\
    \   |                                           unclosed delimiter\n20 |     \
    \                    accum && l.iter().fold(false, |accum, x6| {\n   |       \
    \                                        -                   - unclosed delimiter\n\
    \   |                                               |\n   |                  \
    \                             unclosed delimiter\n21 |                       \
    \      accum && l.iter().fold(false, |accum, x7| {\n   |                     \
    \                              -                   - unclosed delimiter\n   |\
    \                                                   |\n   |                  \
    \                                 unclosed delimiter\n22 |                   \
    \              accum && l.iter().fold(false, |accum, x8| {\n   |      "
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i <\
    \ l.len() && j < l.len() {\n        if l[j] + l[i] == 0 {\n            if i ==\
    \ j {\n                return true;\n            }\n            i += 1;\n    \
    \    } else {\n            i += 1;\n        }\n        j += 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm82nqfgc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum_until_now = Vec::new();\n\n    for &element\
    \ in l {\n        sum_until_now.push(element);\n    }\n\n    let mut prev_sum_until_now\
    \ = 0isize;\n    let mut is_pair_zero = false;\n\n    for &element in l {\n  \
    \      prev_sum_until_now += element;\n\n        if prev_sum_until_now != 0 {\n\
    \            if prev_sum_until_now != prev_sum_until_now.checked_add(element)\
    \ {\n                is_pair_zero = false;\n            }\n        }\n    }\n\n\
    \    is_pair_zero\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ry2ecmk.rs:17:9\n   |\n\
    17 |     for &element in l {\n   |         ^^^^^^^^    - this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `element`\n \
    \  |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7ry2ecmk.rs:24:9\n   |\n24 |   \
    \  for &element in l {\n   |         ^^^^^^^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `element`\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7ry2ecmk.rs:28:38\n   |\n28 |             if prev_sum_until_now\
    \ != prev_sum_until_now.checked_add(element) {\n   |                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s = l.iter().fold(0, |s, x| s + x);\n   \
    \ s == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgvc_wgm_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().partition(|&x| x > 0).len() == l.iter().filter(|&x|\
    \ x == x).count()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpam6229d6.rs:15:33\n   |\n\
    15 |     l.iter().partition(|&x| x > 0).len() == l.iter().filter(|&x| x == x).count()\n\
    \   |                                 ^\n   |                                \
    \ |\n   |                                 expected `&isize`, found integer\n \
    \  |                                 help: consider borrowing here: `&0`\n\nerror[E0599]:\
    \ no method named `len` found for tuple `(_, _)` in the current scope\n  --> /tmp/tmpam6229d6.rs:15:36\n\
    \   |\n15 |     l.iter().partition(|&x| x > 0).len() == l.iter().filter(|&x| x\
    \ == x).count()\n   |                                    ^^^ method not found\
    \ in `(_, _)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().pairs().all(|&(x, &y)| x == 0 || y == 0)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pairs` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpinzad26_.rs:15:14\n   |\n15 |     l.iter().pairs().all(|&(x,\
    \ &y)| x == 0 || y == 0)\n   |              ^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().enumerate().any(|(i, v)| v != 0)\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp5yisucqo.rs:15:41\n\
    \   |\n15 |     l.iter().enumerate().any(|(i, v)| v != 0)\n   |              \
    \                           ^^ no implementation for `&isize == {integer}`\n \
    \  |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut n = l.len() - 1;\n    while n != 0 {\n  \
    \      if l[n] == 0 && l[n + 1] == 0 {\n            return true;\n        }\n\
    \        if l[n] == 0 {\n            break;\n        }\n        if l[n + 1] ==\
    \ 0 {\n            return false;\n        }\n        n -= 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpakb6wtx0.rs:17:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().pairs().any(|(&x, &y)| x == y || (!x.is_zero()\
    \ && y.is_zero()))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pairs` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpybtuz5ip.rs:15:14\n   |\n15 |     l.iter().pairs().any(|(&x,\
    \ &y)| x == y || (!x.is_zero() && y.is_zero()))\n   |              ^^^^^ method\
    \ not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s = l.iter().fold(0, |mut s, &x| s + x);\n\
    \    s % 2 != 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx0l1zrdg.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s = vec![0; l.len()];\n    let mut sum =\
    \ 0;\n    for i in l.iter() {\n        sum += *i;\n        s[i] = sum;\n    }\n\
    \    \n    for i in l.iter() {\n        assert!(s[i].is_some());\n    }\n\n  \
    \  let mut zero = vec![false; l.len()];\n    for i in l.iter() {\n        if &s[i]\
    \ != &0isize {\n            zero[i] = true;\n        }\n    }\n    \n    for j\
    \ in l.iter().rev() {\n        assert!(zero[j] == true);\n    }\n    \n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  -->\
    \ /tmp/tmpwgdutv2s.rs:19:9\n   |\n19 |         s[i] = sum;\n   |         ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpwgdutv2s.rs:23:17\n\
    \   |\n23 |         assert!(s[i].is_some());\n   |                 ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `&isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<&isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `&isize`\n  --> /tmp/tmpwgdutv2s.rs:28:13\n\
    \   |\n28 |         if &s[i] != &0isize {\n   |             ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[bool]` cannot\
    \ be indexed by `&isize`\n  --> /tmp/tmpwgdutv2s.rs:29:13\n   |\n29 |        \
    \     zero[i] = true;\n   |             ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `&isize`\n  --> /tmp/tmpwgdutv2s.rs:34:17\n   |\n34 |         assert!(zero[j]\
    \ == true);\n   |                 ^^^^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum_of_twos = 0;\n    for &elt in l.iter()\
    \ {\n        if elt == 0 {\n            return false;\n        }\n        sum_of_twos\
    \ += elt as isize;\n    }\n    sum_of_twos == 0\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo5kwee4s.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen: Vec<usize> =\
    \ vec![];\n    for x in l {\n        if !seen.contains(&x) {\n            sum\
    \ += x;\n            seen.push(1);\n        }\n    }\n    sum == 0 && seen.len()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvz4xtuhc.rs:18:27\n   |\n\
    18 |         if !seen.contains(&x) {\n   |                           ^^ expected\
    \ `usize`, found `isize`\n   |\n   = note: expected reference `&usize`\n     \
    \         found reference `&isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().combinations(2).all(|(a, b)| (a + b) ==\
    \ 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpjwflmbvu.rs:15:14\n   |\n15 |     l.iter().combinations(2).all(|(a,\
    \ b)| (a + b) == 0)\n   |              ^^^^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \    l.sort();\n    let mut first = l.iter().nth(1).unwrap();\n    for &v in l.iter().skip(1)\
    \ {\n        if v - first > 0 {\n            return false;\n        }\n      \
    \  first = v;\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt6k8tlp0.rs:24:17\n   |\n\
    19 |     let mut first = l.iter().nth(1).unwrap();\n   |                     ------------------------\
    \ expected due to this value\n...\n24 |         first = v;\n   |             \
    \    ^\n   |                 |\n   |                 expected `&isize`, found\
    \ `isize`\n   |                 help: consider borrowing here: `&v`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    (l.iter().filter(|x| x > 0).len() == 2) || (l.iter().filter(|x|\
    \ x < 0).len() == 2)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuwrpyy6v.rs:15:30\n   |\n\
    15 |     (l.iter().filter(|x| x > 0).len() == 2) || (l.iter().filter(|x| x < 0).len()\
    \ == 2)\n   |                              ^ expected `&&isize`, found integer\n\
    \nerror[E0599]: no method named `len` found for struct `Filter` in the current\
    \ scope\n  --> /tmp/tmpuwrpyy6v.rs:15:33\n   |\n15 |     (l.iter().filter(|x|\
    \ x > 0).len() == 2) || (l.iter().filter(|x| x < 0).len() == 2)\n   |        \
    \                         ^^^ method not found in `Filter<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpuwrpyy6v.rs:15:22: 15:31]>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuwrpyy6v.rs:15:73\n   |\n15 |     (l.iter().filter(|x|\
    \ x > 0).len() == 2) || (l.iter().filter(|x| x < 0).len() == 2)\n   |        \
    \                                                                 ^ expected `&&isize`,\
    \ found integer\n\nerror[E0599]: no method named `len` found for struct `Filter`\
    \ in the current scope\n  --> /tmp/tmpuwrpyy6v.rs:15:76\n   |\n15 |     (l.iter().filter(|x|\
    \ x > 0).len() == 2) || (l.iter().filter(|x| x < 0).len() == 2)\n   |        \
    \                                                                    ^^^ method\
    \ not found in `Filter<std::slice::Iter<'_, isize>, [closure@/tmp/tmpuwrpyy6v.rs:15:65:\
    \ 15:74]>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen: HashSet<_> = HashSet::new();\n    let\
    \ mut zero = false;\n    for i in l.iter() {\n        if seen.contains(&i) {\n\
    \            return zero;\n        }\n        seen.insert(i);\n        if i ==\
    \ 0 {\n            zero = true;\n        }\n    }\n    zero\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpn3ljx82f.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<_> = HashSet::new();\n   |             \
    \      ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpn3ljx82f.rs:15:32\n   |\n15\
    \ |     let mut seen: HashSet<_> = HashSet::new();\n   |                     \
    \           ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpn3ljx82f.rs:22:14\n   |\n22\
    \ |         if i == 0 {\n   |              ^^ no implementation for `&isize ==\
    \ {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |b, i| b && i + 1 == l.iter().fold(0,\
    \ |a, j| a + j)\n        || i + 2 == l.iter().fold(0, |a, j| a + j))\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvp4ovs2i.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().sum::<isize>() == 0\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6rqnvuc1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976495
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut n = 0;\n    let mut zero = false;\n    for\
    \ (i, e) in l.iter().enumerate() {\n        n += e;\n        if n == 0 {\n   \
    \         zero = true;\n            break;\n        }\n    }\n    !zero\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmparhlzq37.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut sum = 0;\n    for i in\
    \ l.iter().enumerate() {\n        if *i.0 != 0 { continue; }\n        if let Some(j)\
    \ = *i.1 + 1 {\n            sum += j;\n        }\n        else {\n           \
    \ sum += *i.1;\n            break;\n        }\n    }\n    sum == 0\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmp19ypn1ls.rs:18:12\n\
    \   |\n18 |         if *i.0 != 0 { continue; }\n   |            ^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp19ypn1ls.rs:19:16\n   |\n19 |         if let\
    \ Some(j) = *i.1 + 1 {\n   |                ^^^^^^^   -------- this expression\
    \ has type `isize`\n   |                |\n   |                expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut has_another = false;\n    for (i, e) in l.iter().enumerate()\
    \ {\n        let mut found = false;\n        for j in i..l.len() {\n         \
    \   if l[j] == e + l[j] && found == false {\n                found = true;\n \
    \           }\n        }\n        if found == false {\n            has_another\
    \ = true;\n        }\n    }\n    has_another\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgq8sl07n.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = l.iter().enumerate().find(|(_, x)| x\
    \ < 0);\n    match i {\n        Some((i, x)) if i > 0 && x.checked_add(l[i-1])\n\
    \            .unwrap()\n            .abs() < x.abs() -> true,\n        _ => false\n\
    \    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `=>`, `?`, or an operator, found `->`\n  -->\
    \ /tmp/tmp7_df6qkz.rs:19:30\n   |\n19 |             .abs() < x.abs() -> true,\n\
    \   |                              ^^\n   |                              |\n \
    \  |                              expected one of `.`, `=>`, `?`, or an operator\n\
    \   |                              help: try using a fat arrow here: `=>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7_df6qkz.rs:15:56\n   |\n15 |  \
    \   let mut i = l.iter().enumerate().find(|(_, x)| x < 0);\n   |             \
    \                                           ^ expected `&&isize`, found integer\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    for j in l.iter() {\n        if\
    \ i != j {\n            sum += j;\n        }\n        i += 1;\n    }\n    sum\
    \ == 0 && l.len() == i\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpfyjkff51.rs:21:14\n\
    \   |\n21 |         if i != j {\n   |              ^^ no implementation for `isize\
    \ == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfyjkff51.rs:26:28\n\
    \   |\n26 |     sum == 0 && l.len() == i\n   |                            ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n26 |     sum == 0 && l.len()\
    \ == i.try_into().unwrap()\n   |                             ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \n    let mut first_zero = true;\n    let mut last_zero = false;\n    let mut\
    \ cur = 0;\n\n    for n in l.iter().rev() {\n        if n == 0 {\n           \
    \ if first_zero {\n                first_zero = false;\n            } else {\n\
    \                return false;\n            }\n        }\n\n        cur += n;\n\
    \        last_zero = n == 0;\n\n        if cur == 0 {\n            return last_zero;\n\
    \        }\n    }\n\n    return !last_zero;\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp6uhqg2jw.rs:24:14\n\
    \   |\n24 |         if n == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmp6uhqg2jw.rs:33:23\n   |\n33 |         last_zero = n == 0;\n   |\
    \                       ^^ no implementation for `&isize == {integer}`\n   |\n\
    \   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        if sum\
    \ == i {\n            return true;\n        } else {\n            sum += i;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0rqtmn8x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    !l.iter().any(|&x| x == 0)\n}\n\nfn main() {\n  \
    \  let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjzyrmw65.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true;\n    }\n \
    \   let mut s = 0;\n    let mut x = l[0];\n    for &i in l.iter().skip(1) {\n\
    \        s += x;\n        if s != i {\n            return false;\n        }\n\
    \        x = i;\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp58bfvr8f.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l\n        .iter()\n        .enumerate()\n      \
    \  .filter(|(index, el)| el == 0)\n        .count() == l.len()\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmplu5d20ku.rs:18:34\n\
    \   |\n18 |         .filter(|(index, el)| el == 0)\n   |                     \
    \             ^^ no implementation for `&&isize == {integer}`\n   |\n   = help:\
    \ the trait `PartialEq<{integer}>` is not implemented for `&&isize`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.iter().any(|&x| x == 0) {\n        return false;\n\
    \    }\n\n    let mut v = Vec::new();\n    for x in l {\n        if let Some(y)\
    \ = v.iter().find(|&y| y == x) {\n            return true;\n        }\n      \
    \  v.push(x);\n    }\n\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&_` with `isize`\n  --> /tmp/tmprfg1y0tj.rs:21:47\n\
    \   |\n21 |         if let Some(y) = v.iter().find(|&y| y == x) {\n   |      \
    \                                         ^^ no implementation for `&_ == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().enumerate().any(|(idx, e)| *e == 0)\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_u2pd55x.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![(0, 0)];\n    for (i, v) in\
    \ l.iter().enumerate() {\n        for (_, v1) in pairs.iter().rev() {\n      \
    \      if *v < 0 {\n                break;\n            }\n            if *v ==\
    \ *v1 {\n                pairs.push((i, v1));\n            }\n        }\n    }\n\
    \    pairs.iter().all(|&(_, v)| v == 0)\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp27rgmw50.rs:22:32\n   |\n\
    22 |                 pairs.push((i, v1));\n   |                              \
    \  ^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n22 |                 pairs.push((i, *v1));\n   |             \
    \                   +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s: isize = l.iter().fold(0, |s, i| s + i);\n\
    \    if s == 0 {\n        return false;\n    }\n\n    for (i, j) in l.iter().pairs()\
    \ {\n        if s != 0 {\n            s -= j;\n        }\n        if s == 0 {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pairs` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpt6flxsh2.rs:20:28\n   |\n20 |     for (i,\
    \ j) in l.iter().pairs() {\n   |                            ^^^^^ method not found\
    \ in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut first = l[0];\n    let mut rest = l;\n  \
    \  while let Some(i) = rest.iter().skip(1).find(|&x| x != 0) {\n        first\
    \ = i;\n        rest.extend(&rest.iter().skip(1).take(i + 1).collect::<Vec<_>>());\n\
    \    }\n    rest.iter().all(|&x| x == 0)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpo3vpt3bl.rs:17:57\n\
    \   |\n17 |     while let Some(i) = rest.iter().skip(1).find(|&x| x != 0) {\n\
    \   |                                                         ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpo3vpt3bl.rs:18:17\n   |\n15 |     let mut first = l[0];\n   |      \
    \               ---- expected due to this value\n...\n18 |         first = i;\n\
    \   |                 ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n18 |         first = *i;\n   |             \
    \    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo3vpt3bl.rs:19:47\n  \
    \ |\n19 |         rest.extend(&rest.iter().skip(1).take(i + 1).collect::<Vec<_>>());\n\
    \   |                                               ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |         rest.extend(&rest.iter().skip(1).take((i\
    \ + 1).try_into().unwrap()).collect::<Vec<_>>());\n   |                      \
    \                         +     +++++++++++++++++++++\n\nerror[E0277]: the trait\
    \ bound `Vec<isize>: Extend<&&isize>` is not satisfied\n  --> /tmp/tmpo3vpt3bl.rs:19:14\n\
    \   |\n19 |         rest.extend(&rest.iter().skip(1).take(i + 1).collect::<Vec<_>>());\n\
    \   |              ^^^^^^ the trait `Extend<&&isize>` is not implemented for `Vec<isize>`\n\
    \   |\n   = help: the following other types implement trait `Extend<A>`:\n   \
    \          <Vec<T, A> as Extend<&'a T>>\n             <Vec<T, A> as Extend<T>>\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l == vec![0; l.len()]\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp27wlzzaq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    pairs_sum_to_zero2(l).is_some()\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pairs_sum_to_zero2` in this scope\n\
    \  --> /tmp/tmppjmjuczs.rs:15:5\n   |\n15 |     pairs_sum_to_zero2(l).is_some()\n\
    \   |     ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.len() > 0 && l.iter().combinations(2).all(|&(a1,\
    \ a2)| a1 + a2 == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp_f_63kyl.rs:15:29\n   |\n15 |     l.len()\
    \ > 0 && l.iter().combinations(2).all(|&(a1, a2)| a1 + a2 == 0)\n   |        \
    \                     ^^^^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut cur_sum = 0;\n    for x in l {\n        cur_sum\
    \ += x;\n        if cur_sum == 0 {\n            return true;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpljil98bt.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut last_two = l\n        .drain(..)\n      \
    \  .enumerate()\n        .filter_map(|(i, v)| if i < 2 {\n            Some((v,\
    \ (&l[i..i + 2]))\n        } else {\n            None\n        })\n        .collect::<Vec<_>>();\n\
    \    let len = l.len() - last_two.len();\n    let mut count = 0;\n    let mut\
    \ sum = 0;\n    for ((i, &x), &y) in last_two {\n        sum = sum + x;\n    \
    \    if sum != 0 {\n            count = count + 1;\n        }\n        if count\
    \ >= len {\n            return false;\n        }\n    }\n    return true;\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpf8tjizl8.rs:19:17\n\
    \   |\n18 |         .filter_map(|(i, v)| if i < 2 {\n   |                    \
    \                   - closing delimiter possibly meant for this\n19 |        \
    \     Some((v, (&l[i..i + 2]))\n   |                 ^ unclosed delimiter\n20\
    \ |         } else {\n   |         ^ mismatched closing delimiter\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf8tjizl8.rs:27:10\n   |\n27 |     for ((i, &x),\
    \ &y) in last_two {\n   |          ^^^^^^^         -------- this expression has\
    \ type `Option<(isize, &[isize])>`\n   |          |\n   |          expected `isize`,\
    \ found tuple\n   |\n   = note: expected type `isize`\n             found tuple\
    \ `(_, _)`\n\nerror[E0277]: the size for values of type `[isize]` cannot be known\
    \ at compilation time\n  --> /tmp/tmpf8tjizl8.rs:27:20\n   |\n27 |     for ((i,\
    \ &x), &y) in last_two {\n   |                    ^ doesn't have a size known\
    \ at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\
    \   = note: all local variables must have a statically known size\n   = help:\
    \ unsized locals are gated as an unstable feature\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut v = l.to_vec();\n    let mut sum: isize =\
    \ 0;\n    v.sort_unstable_by(|a, b| a.cmp(b));\n\n    loop {\n        if v.len()\
    \ == 0 {\n            break;\n        }\n        let a = v[0];\n        let b\
    \ = v.iter().cloned().fold(0, |acc, &x| acc + x).unwrap();\n        sum += b;\n\
    \        v.swap(0, 1);\n    }\n\n    sum == 0\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpel8xpehh.rs:24:49\n   |\n\
    24 |         let b = v.iter().cloned().fold(0, |acc, &x| acc + x).unwrap();\n\
    \   |                                                 ^--\n   |              \
    \                                   ||\n   |                                 \
    \                |expected due to this\n   |                                 \
    \                expected `isize`, found reference\n   |                     \
    \                            help: did you mean `x`: `&isize`\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0599]: no\
    \ method named `unwrap` found for type `{integer}` in the current scope\n  -->\
    \ /tmp/tmpel8xpehh.rs:24:62\n   |\n24 |         let b = v.iter().cloned().fold(0,\
    \ |acc, &x| acc + x).unwrap();\n   |                                         \
    \                     ^^^^^^ method not found in `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() < 2 {\n        return true\n    }\n  \
    \  let mut s = l.iter().fold(0, |s, i| s + i);\n    for (i2, i1) in l.iter().enumerate()\
    \ {\n        if s != 0 {\n            if s > 0 {\n                return false;\n\
    \            }\n            if s == i1 {\n                s = i2;\n          \
    \  } else {\n                s = i1;\n            }\n        } else {\n      \
    \      return true;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc8luog0x.rs:24:21\n   |\n\
    24 |             if s == i1 {\n   |                     ^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |        \
    \     if s == *i1 {\n   |                     +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpc8luog0x.rs:25:21\n   |\n18 |     let mut s = l.iter().fold(0,\
    \ |s, i| s + i);\n   |                 ------------------------------ expected\
    \ due to this value\n...\n25 |                 s = i2;\n   |                 \
    \    ^^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpc8luog0x.rs:27:21\n   |\n18 |     let mut s = l.iter().fold(0, |s, i|\
    \ s + i);\n   |                 ------------------------------ expected due to\
    \ this value\n...\n27 |                 s = i1;\n   |                     ^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    27 |                 s = *i1;\n   |                     +\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().zip(l.iter().cloned()).any(|(a, b)| a +\
    \ b == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpii561ca0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut s: Option<isize> = None;\n    let mut t:\
    \ Option<isize> = None;\n    for i in l {\n        if let Some(old_sum) = s {\n\
    \            if i == old_sum {\n                t = Some(i);\n            } else\
    \ {\n                s = Some(i);\n            }\n        } else {\n         \
    \   s = Some(i);\n        }\n    }\n    match s {\n        Some(s) => s == t,\n\
    \        None => false,\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmeyzbtgn.rs:29:25\n   |\n\
    29 |         Some(s) => s == t,\n   |                         ^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for n in l {\n        sum +=\
    \ n;\n    }\n    sum == 0 || (sum as isize) == l.iter().fold(0, |sum, n| sum +\
    \ n);\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9g_a3ajn.rs:14:40\n   |\n\
    14 | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |    -----------------\
    \                   ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n19 |     sum\
    \ == 0 || (sum as isize) == l.iter().fold(0, |sum, n| sum + n);\n   |        \
    \                                                             - help: remove this\
    \ semicolon\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for (i, &v) in l.iter().enumerate()\
    \ {\n        if sum < v {\n            sum += v;\n        } else if sum > v {\n\
    \            sum -= v;\n        } else {\n            return true;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnxlz09hg.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut cur_sum = 0;\n    for i in l {\n        cur_sum\
    \ += i;\n        if cur_sum == 0 {\n            return true;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8sla3651.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    for i in l {\n     \
    \   for j in l {\n            if i == j && i != i {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() != 0\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp4yh6mvlp.rs:17:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut pairs = vec![];\n16  |     for i in l {\n\
    \    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    17  |         for j in l {\n    |                  ^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `l`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n16  |     for i in &l {\n    |    \
    \          +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    // find the pair with the smallest element\n    let\
    \ mut min_i = l.iter().min_by_key(|x| x);\n\n    // then find the pair with largest\
    \ element greater than the smallest\n    let mut max_i = l.iter().max_by_key(|x|\
    \ x);\n    let mut max_el = l.iter().find(|&x| x > min_i).unwrap();\n\n    //\
    \ while there are two pairs with the same element and the pair's sum is\n    //\
    \ greater than zero, swap the pairs.\n    while max_el == min_i && max_el + 1\
    \ == l.iter().find(|&x| x > min_i).unwrap() {\n        let tmp = min_i;\n    \
    \    min_i = max_i;\n        max_i = tmp;\n        max_el = l.iter().find(|&x|\
    \ x > min_i).unwrap();\n    }\n\n    // if the pairs don't sum to zero, the pairs\
    \ themselves are pairs that sum\n    // to zero\n    l.iter().any(|x| x > min_i\
    \ && x > max_i)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5mqh0tx4.rs:20:45\n   |\n\
    20 |     let mut max_el = l.iter().find(|&x| x > min_i).unwrap();\n   |      \
    \                                       ^^^^^ expected `&isize`, found enum `Option`\n\
    \   |\n   = note: expected reference `&isize`\n                   found enum `Option<&isize>`\n\
    \nerror[E0277]: can't compare `&isize` with `Option<&isize>`\n  --> /tmp/tmp5mqh0tx4.rs:24:18\n\
    \   |\n24 |     while max_el == min_i && max_el + 1 == l.iter().find(|&x| x >\
    \ min_i).unwrap() {\n   |                  ^^ no implementation for `&isize ==\
    \ Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5mqh0tx4.rs:24:67\n   |\n24 |     while max_el == min_i && max_el +\
    \ 1 == l.iter().find(|&x| x > min_i).unwrap() {\n   |                        \
    \                                           ^^^^^ expected `&isize`, found enum\
    \ `Option`\n   |\n   = note: expected reference `&isize`\n                   found\
    \ enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5mqh0tx4.rs:24:44\n\
    \   |\n24 |     while max_el == min_i && max_el + 1 == l.iter().find(|&x| x >\
    \ min_i).unwrap() {\n   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n24 |     while max_el == min_i && max_el + 1 == *l.iter().find(|&x| x >\
    \ min_i).unwrap() {\n   |                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5mqh0tx4.rs:28:41\n   |\n28 |         max_el\
    \ = l.iter().find(|&x| x > min_i).unwrap();\n   |                            \
    \             ^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note: expected\
    \ reference `&isize`\n                   found enum `Option<&isize>`\n\nerro"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for x in l {\n        pairs.push((x, sum));\n        sum += x;\n    }\n  \
    \  let len = pairs.len();\n    if len < 2 || len % 2 != 0 {\n        return false;\n\
    \    }\n    let mut i = 0;\n    while i < len {\n        let (next_pair, next_sum)\
    \ = pairs[i..].iter().fold(\n            (0, 0),\n            |(next_pair, sum),\
    \ (pair, sum)| {\n                (next_pair + pair, sum + sum)\n            },\n\
    \        );\n        if next_sum == 0 {\n            return true;\n        }\n\
    \        i = next_pair;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `sum` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpxdnnr1q_.rs:29:39\n   |\n29 |             |(next_pair, sum),\
    \ (pair, sum)| {\n   |                                       ^^^ used as parameter\
    \ more than once\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxdnnr1q_.rs:36:13\n\
    \   |\n25 |     let mut i = 0;\n   |                 - expected due to this value\n\
    ...\n36 |         i = next_pair;\n   |             ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0415.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    l.iter().for_each(|x|\
    \ *x.checked_add(&seen));\n    seen.len() == 2\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp6rltpld0.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6rltpld0.rs:16:42\n   |\n16 |     l.iter().for_each(|x|\
    \ *x.checked_add(&seen));\n   |                                          ^^^^^\
    \ expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\nhelp: consider removing the borrow\n   |\n16\
    \ -     l.iter().for_each(|x| *x.checked_add(&seen));\n16 +     l.iter().for_each(|x|\
    \ *x.checked_add(seen));\n   | \n\nerror[E0614]: type `Option<isize>` cannot be\
    \ dereferenced\n  --> /tmp/tmp6rltpld0.rs:16:27\n   |\n16 |     l.iter().for_each(|x|\
    \ *x.checked_add(&seen));\n   |                           ^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    let mut sum =\
    \ 0;\n\n    for i in l {\n        if seen.insert(i) {\n            sum += i;\n\
    \        }\n    }\n    sum == 0 // True if there is two distinct elements that\
    \ sum to zero.\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n   \
    \ assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpne3_94_d.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \    let mut is_zero = true;\n    let mut j = 0;\n    let mut i = 1;\n    let\
    \ mut sum = 0;\n    while i < l.len() {\n        sum += *l[i];\n        if sum\
    \ == 0 {\n            is_zero = false;\n            break;\n        }\n      \
    \  if *l[i] != 0 {\n            j = i;\n            while (*l[j] != 0) {\n   \
    \             j += 1;\n            }\n            while i < j {\n            \
    \    i += 1;\n                j -= 1;\n            }\n            break;\n   \
    \     }\n        i += 1;\n    }\n    is_zero\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpdo6akbuy.rs:30:19\n\
    \   |\n30 |             while (*l[j] != 0) {\n   |                   ^       \
    \   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n   |\n30 -             while (*l[j] != 0) {\n30 +             while\
    \ *l[j] != 0 {\n   | \n\nerror[E0614]: type `isize` cannot be dereferenced\n \
    \ --> /tmp/tmpdo6akbuy.rs:23:16\n   |\n23 |         sum += *l[i];\n   |      \
    \          ^^^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpdo6akbuy.rs:28:12\n\
    \   |\n28 |         if *l[i] != 0 {\n   |            ^^^^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpdo6akbuy.rs:30:20\n   |\n30 |\
    \             while (*l[j] != 0) {\n   |                    ^^^^^\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(true, |result, pair| result && *pair\
    \ != 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmphz2uii0u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    !l.iter().any(|&x| x == 0)\n}\n\nfn main() {\n  \
    \  let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjzyrmw65.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut first_match = false;\n\
    \    for &n in l {\n        if n < 0 {\n            continue;\n        }\n   \
    \     if first_match && sum == 0 {\n            return false;\n        }\n   \
    \     sum += n;\n        first_match = true;\n    }\n    first_match && sum ==\
    \ 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmsh9hjwe.rs:17:9\n   |\n\
    17 |     for &n in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |mut s, x| {\n        match\
    \ s {\n            Some(y) => x != y,\n            None => s += x == 0,\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n   \
    \ assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3xxz9h82.rs:17:13\n   |\n\
    16 |         match s {\n   |               - this expression has type `bool`\n\
    17 |             Some(y) => x != y,\n   |             ^^^^^^^ expected `bool`,\
    \ found enum `Option`\n   |\n   = note: expected type `bool`\n              found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3xxz9h82.rs:18:13\n\
    \   |\n16 |         match s {\n   |               - this expression has type `bool`\n\
    17 |             Some(y) => x != y,\n18 |             None => s += x == 0,\n \
    \  |             ^^^^ expected `bool`, found enum `Option`\n   |\n   = note: expected\
    \ type `bool`\n              found enum `Option<_>`\n\nerror[E0277]: can't compare\
    \ `&isize` with `{integer}`\n  --> /tmp/tmp3xxz9h82.rs:18:28\n   |\n18 |     \
    \        None => s += x == 0,\n   |                            ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `bool`\n  --> /tmp/tmp3xxz9h82.rs:18:21\n   |\n\
    18 |             None => s += x == 0,\n   |                     -^^^^^^^^^^\n\
    \   |                     |\n   |                     cannot use `+=` on type\
    \ `bool`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0368.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().enumerate().any(|(_, elem)| elem == 0)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpjnzjn0w7.rs:15:47\n\
    \   |\n15 |     l.iter().enumerate().any(|(_, elem)| elem == 0)\n   |        \
    \                                       ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut count = 0;\n    let mut sum = 0;\n    for\
    \ i in l {\n        count += 1;\n        sum += i;\n    }\n    if sum == 0 { return\
    \ count == 2 }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpti4j26lu.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0; // index of the first non-zero element\
    \ in the vec\n    while i < l.len() {\n        if l[i] != 0 {\n            if\
    \ i == 0 {\n                return false;\n            }\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpubhdnl9q.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut n = l.len();\n    let mut c = 0;\n    let\
    \ mut s = 0;\n    for i in l.iter() {\n        n -= 1;\n        c += *i;\n   \
    \     s += *i;\n    }\n    if n == 0 {\n        return true;\n    }\n    if s\
    \ <= 0 {\n        return false;\n    }\n    let mut v = 0;\n    for i in l.iter()\
    \ {\n        if *i == 0 {\n            v += 1;\n        } else {\n           \
    \ break;\n        }\n    }\n    v == c && v == n\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplzsnuwuj.rs:37:20\n   |\n\
    37 |     v == c && v == n\n   |                    ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n37 |     v == c && v == n.try_into().unwrap()\n   |\
    \                     ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().any(|x| l.iter().any(|y| x + y <= 0))\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1lyl77ac.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l.iter() {\n     \
    \   if i < 0 {\n            continue;\n        }\n        sum += i;\n        if\
    \ sum == 0 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphry_gu98.rs:17:16\n   |\n\
    17 |         if i < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().dedup().count() <= 2\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmp6x87w7u4.rs:15:23\n   |\n15 |     l.iter().cloned().dedup().count()\
    \ <= 2\n   |                       ^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut j = 0;\n    for i in l.iter() {\n       \
    \ if j == i {\n            return false;\n        }\n        j += i;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpd9i5jhr6.rs:17:14\n\
    \   |\n17 |         if j == i {\n   |              ^^ no implementation for `isize\
    \ == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut last_zero_index = 0;\n    let mut last_nonzero_index\
    \ = 0;\n    for pair in l {\n        if pair != 0 {\n            last_nonzero_index\
    \ += 1;\n        } else {\n            last_zero_index += 1;\n        }\n    \
    \    if last_zero_index == last_nonzero_index {\n            return true;\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa13lf2e2.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().cloned().any(|&x| {\n        if x == 9 {\n\
    \            return false;\n        }\n        if l.iter().any(|&y| {\n      \
    \      if y != 0 && x % y != 0 {\n                false\n            } else {\n\
    \                true\n            }\n        }) {\n            false\n      \
    \  } else {\n            true\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiur1e78w.rs:15:28\n   |\n\
    15 |     l.iter().cloned().any(|&x| {\n   |                            ^--\n \
    \  |                            ||\n   |                            |expected\
    \ due to this\n   |                            expected `isize`, found reference\n\
    \   |                            help: did you mean `x`: `&isize`\n   |\n   =\
    \ note:   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = Vec::new();\n    for &e in l {\n\
    \        if e < 0 {\n            pairs.push((e, -e));\n        } else {\n    \
    \        let last = pairs.last().unwrap();\n            if last != (e, e)) {\n\
    \                return false;\n            }\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmp5z4od6qc.rs:27:1\n\
    \   |\n14 | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |              \
    \                               - this opening brace...\n...\n25 |     }\n   |\
    \     - ...matches this closing brace\n26 |     true\n27 | }\n   | ^ unexpected\
    \ closing delimiter\n\nerror: mismatched closing delimiter: `)`\n  --> /tmp/tmp5z4od6qc.rs:19:16\n\
    \   |\n19 |         } else {\n   |                ^ unclosed delimiter\n20 | \
    \            let last = pairs.last().unwrap();\n21 |             if last != (e,\
    \ e)) {\n   |                              ^ mismatched closing delimiter\n\n\
    error: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l != l.windows(2).all(|e| e[0] + e[1] == 0)\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<isize>` with `bool`\n  --> /tmp/tmp_xjd0r5w.rs:15:7\n\
    \   |\n15 |     l != l.windows(2).all(|e| e[0] + e[1] == 0)\n   |       ^^ no\
    \ implementation for `Vec<isize> == bool`\n   |\n   = help: the trait `PartialEq<bool>`\
    \ is not implemented for `Vec<isize>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976496
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    if l.len() == 0 {\n        return false;\n    }\n\
    \    let mut seen = HashMap::<isize, bool>::new();\n    for &elt in l {\n    \
    \    if let Some(ref v) = seen.get(&elt) {\n            return v;\n        }\n\
    \        seen.insert(elt, false);\n    }\n    let mut found = false;\n    for\
    \ &(ref key, ref v) in seen {\n        if v {\n            found = true;\n   \
    \         break;\n        }\n    }\n    found\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp2jpvvcuo.rs:18:20\n   |\n18 |     let mut seen = HashMap::<isize, bool>::new();\n\
    \   |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2jpvvcuo.rs:19:9\n   |\n19 |     for &elt in\
    \ l {\n   |         ^^^^    - this expression has type `Option<isize>`\n   | \
    \        |\n   |         expected `isize`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `elt`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2jpvvcuo.rs:21:20\n   |\n21 |             return v;\n   |     \
    \               ^ expected `bool`, found reference\n   |\n   = note:   expected\
    \ type `bool`\n           found reference `&_`\nhelp: consider dereferencing the\
    \ borrow\n   |\n21 |             return *v;\n   |                    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2jpvvcuo.rs:27:12\n   |\n27 |         if v {\n\
    \   |            ^ expected `bool`, found reference\n   |\n   = note:   expected\
    \ type `bool`\n           found reference `&_`\nhelp: consider dereferencing the\
    \ borrow\n   |\n27 |         if *v {\n   |            +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976496
