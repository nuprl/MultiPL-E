language: rs
name: HumanEval_62_derivative
results:
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dp = Vec::new();\n    let mut len = xs.len();\n    let mut k = 0;\n    while\
    \ len > 0 {\n        dp.push(0isize);\n        for j in (0..len).rev() {\n   \
    \         if k == 0 {\n                if len < 2 {\n                    break;\n\
    \                }\n                let k = len - 1;\n            }\n        \
    \    let k2 = k - 1;\n            if k % 2 == 0 {\n                dp[k2] += xs[k]\
    \ * xs[k2];\n            } else {\n                dp[k2] -= xs[k] * xs[k2];\n\
    \            }\n            k /= 2;\n        }\n        len -= 1;\n    }\n   \
    \ dp\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpc7pix4oh.rs:21:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys: Vec<isize> = xs.clone();\n    let mut degree = 0;\n    let mut i = 0;\n\
    \    while i < xs.len() {\n        ys[i] = ys[i] / ys[degree];\n        i += 1;\n\
    \        degree += 1;\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmplbt4jo9k.rs:22:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result: Vec<isize> = xs.clone();\n    for i in 0..xs.len() - 1 {\n     \
    \   result.push((result[i] - xs[i]) / (xs[i + 1] - xs[i]));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4, 5, 0, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmmuj9jq1.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    res.push(1);\n    for (i, x) in xs.iter().enumerate()\
    \ {\n        if i > 0 {\n            res.push(0);\n        }\n        res.push(x\
    \ * &res[i - 1]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpdqbqg0lc.rs:15:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = vec![];\n    let mut x = xs.len() - 1;\n    while x >= 0 {\n     \
    \   let mut n = 0;\n        for i in 0..x {\n            if i == 0 {\n       \
    \         n = 1;\n            } else {\n                n = n * xs[i - 1];\n \
    \           }\n        }\n        res.push(n);\n        x = x - 1;\n    }\n  \
    \  res\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmptft0a639.rs:21:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        return vec![1];\n    }\n\n    // TODO: make more accurate\
    \ approximation\n    let mut xs_num = xs.len() - 1;\n    let mut ys_num = xs.len()\
    \ - 1;\n\n    loop {\n        xs_num -= 1;\n        xs[ys_num] -= xs[ys_num] *\
    \ xs[xs_num];\n        ys_num -= 1;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `xs` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp2tzd7vsj.rs:19:9\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |               -- help: consider changing this to be mutable: `mut xs`\n\
    ...\n19 |         xs[ys_num] -= xs[ys_num] * xs[xs_num];\n   |         ^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    //\
    \ First calculate xs[0] which is the sum of all powers of xs.\n    let mut partial_result\
    \ = vec![];\n    let mut xs_power = 1;\n    for i in 0..(xs.len() - 1) {\n   \
    \     xs_power *= xs[i];\n        partial_result.push(xs_power);\n    }\n\n  \
    \  // Now calculate the derivative of xs using xs_power\n    for i in (0..(xs.len()\
    \ - 1)).rev() {\n        let xs_power = partial_result.pop();\n        xs_power\
    \ *= xs[i];\n        partial_result.push(xs_power);\n    }\n\n    partial_result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `*=` cannot be applied to type\
    \ `Option<isize>`\n  --> /tmp/tmpgd461rwc.rs:20:9\n   |\n20 |         xs_power\
    \ *= xs[i];\n   |         --------^^^^^^^^^\n   |         |\n   |         cannot\
    \ use `*=` on type `Option<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgd461rwc.rs:21:29\n\
    \   |\n21 |         partial_result.push(xs_power);\n   |                     \
    \        ^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<isize>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut term = Vec::new();\n\n    for _ in xs.iter()\
    \ {\n        term.push(0);\n    }\n\n    for i in xs.iter().rev() {\n        let\
    \ mut current = term.clone();\n        let mut next_term = Vec::new();\n\n   \
    \     for &x in &term {\n            let mut k = *x;\n            next_term.push(k);\n\
    \n            for _ in 0..i {\n                *current = k + next;\n        \
    \        current += &k * &x;\n                k = next;\n            }\n     \
    \   }\n\n        result += next_term;\n    }\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `next` in this scope\n  --> /tmp/tmp9uc9kr90.rs:25:32\n\
    \   |\n25 |                 *current = k + next;\n   |                       \
    \         ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `next`\
    \ in this scope\n  --> /tmp/tmp9uc9kr90.rs:27:21\n   |\n27 |                 k\
    \ = next;\n   |                     ^^^^ not found in this scope\n\nerror[E0614]:\
    \ type `{integer}` cannot be dereferenced\n  --> /tmp/tmp9uc9kr90.rs:21:25\n \
    \  |\n21 |             let mut k = *x;\n   |                         ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9uc9kr90.rs:24:25\n   |\n24 |             for\
    \ _ in 0..i {\n   |                         ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n24 |             for _ in\
    \ 0..*i {\n   |                         +\n\nerror[E0277]: the size for values\
    \ of type `[{integer}]` cannot be known at compilation time\n  --> /tmp/tmp9uc9kr90.rs:25:17\n\
    \   |\n25 |                 *current = k + next;\n   |                 ^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `[{integer}]`\n   = note: the left-hand-side of an assignment\
    \ must have a statically known size\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Vec<{integer}>`\n  --> /tmp/tmp9uc9kr90.rs:26:17\n\
    \   |\n26 |                 current += &k * &x;\n   |                 -------^^^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `+=` on type `Vec<{integer}>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<_>`\n\
    \  --> /tmp/tmp9uc9kr90.rs:31:9\n   |\n31 |         result += next_term;\n   |\
    \         ------^^^^^^^^^^^^^\n   |         |\n   |         cannot use `+=` on\
    \ type `Vec<_>`\n\nerror: aborting due to 7 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0368, E0425, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    if xs.len() == 0 {\n        return result;\n    }\n\
    \n    let mut coefficient = xs.clone();\n    let mut prev_coefficient = xs.clone();\n\
    \    for idx in 1..xs.len() {\n        prev_coefficient.push(coefficient[idx]);\n\
    \        let mut next_coefficient = coefficient.clone();\n        next_coefficient.push(prev_coefficient.len()\
    \ - idx);\n        let mut value = prev_coefficient.clone();\n        value.push(1);\n\
    \        result.push((value + next_coefficient) * coefficient.len() - idx);\n\
    \        coefficient = next_coefficient;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3tmgjux8.rs:19:31\n   |\n\
    19 |         next_coefficient.push(prev_coefficient.len() - idx);\n   |      \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |         next_coefficient.push((prev_coefficient.len()\
    \ - idx).try_into().unwrap());\n   |                               +         \
    \                   +++++++++++++++++++++\n\nerror[E0369]: cannot add `Vec<isize>`\
    \ to `Vec<isize>`\n  --> /tmp/tmp3tmgjux8.rs:22:28\n   |\n22 |         result.push((value\
    \ + next_coefficient) * coefficient.len() - idx);\n   |                      -----\
    \ ^ ---------------- Vec<isize>\n   |                      |\n   |           \
    \           Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = xs.clone();\n    ys.insert(0, 0);\n    let mut sum = 0;\n    while\
    \ ys.len() > 2 {\n        sum += ys.pop() * ys.pop();\n    }\n    ys.push(sum);\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `Option<isize>` by `Option<isize>`\n  -->\
    \ /tmp/tmpfgt3oq_1.rs:13:25\n   |\n13 |         sum += ys.pop() * ys.pop();\n\
    \   |                -------- ^ -------- Option<isize>\n   |                |\n\
    \   |                Option<isize>\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut derivs = Vec::new();\n    let mut last = Vec::new();\n    last.push(xs[0]);\n\
    \    for i in 1..xs.len() {\n        last.push(xs[i - 1] * last[i - 1]);\n   \
    \ }\n    derivs.push(last.clone());\n    last.clear();\n    for i in 0..(xs.len()\
    \ - 1) {\n        let mut cur = Vec::new();\n        for j in 0..xs.len() {\n\
    \            cur.unwrap_or(xs[j + 1]) = (derivs[i + j] - xs[i] * derivs[i + j\
    \ - 1]) / (xs[j] - xs[j - 1]);\n        }\n        derivs.push(cur);\n    }\n\
    \    derivs\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0070]: invalid left-hand side of assignment\n  --> /tmp/tmps43iipak.rs:20:38\n\
    \   |\n20 |             cur.unwrap_or(xs[j + 1]) = (derivs[i + j] - xs[i] * derivs[i\
    \ + j - 1]) / (xs[j] - xs[j - 1]);\n   |             ------------------------\
    \ ^\n   |             |\n   |             cannot assign to this expression\n\n\
    error[E0599]: no method named `unwrap_or` found for struct `Vec<_>` in the current\
    \ scope\n  --> /tmp/tmps43iipak.rs:20:17\n   |\n20 |             cur.unwrap_or(xs[j\
    \ + 1]) = (derivs[i + j] - xs[i] * derivs[i + j - 1]) / (xs[j] - xs[j - 1]);\n\
    \   |                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0277]:\
    \ cannot multiply `isize` by `Vec<isize>`\n  --> /tmp/tmps43iipak.rs:20:63\n \
    \  |\n20 |             cur.unwrap_or(xs[j + 1]) = (derivs[i + j] - xs[i] * derivs[i\
    \ + j - 1]) / (xs[j] - xs[j - 1]);\n   |                                     \
    \                          ^ no implementation for `isize * Vec<isize>`\n   |\n\
    \   = help: the trait `Mul<Vec<isize>>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0369]: cannot\
    \ subtract `_` from `Vec<isize>`\n  --> /tmp/tmps43iipak.rs:20:55\n   |\n20 |\
    \             cur.unwrap_or(xs[j + 1]) = (derivs[i + j] - xs[i] * derivs[i + j\
    \ - 1]) / (xs[j] - xs[j - 1]);\n   |                                         -------------\
    \ ^ ------------------------- _\n   |                                        \
    \ |\n   |                                         Vec<isize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps43iipak.rs:24:5\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n24 |     derivs\n   |   \
    \  ^^^^^^ expected `isize`, found struct `"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys: Vec<isize> = xs.clone();\n    ys[1] -= 1;\n    ys.iter().rev().for_each(|x|\
    \ {\n        let mut d = x;\n        d -= 1;\n        if d < 0 {\n           \
    \ d = -d;\n        }\n        *y = d\n    });\n    ys.iter().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmpqos21jgv.rs:17:10\n\
    \   |\n17 |         *y = d\n   |          ^ help: a local variable with a similar\
    \ name exists: `d`\n\nerror[E0368]: binary assignment operation `-=` cannot be\
    \ applied to type `&isize`\n  --> /tmp/tmpqos21jgv.rs:13:9\n   |\n13 |       \
    \  d -= 1;\n   |         -^^^^^\n   |         |\n   |         cannot use `-=`\
    \ on type `&isize`\n   |\nhelp: `-=` can be used on `isize`, you can dereference\
    \ `d`\n   |\n13 |         *d -= 1;\n   |         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqos21jgv.rs:14:16\n   |\n14 |         if d < 0 {\n   |\
    \                ^\n   |                |\n   |                expected `&isize`,\
    \ found integer\n   |                help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqos21jgv.rs:15:17\n   |\n12 |         let mut\
    \ d = x;\n   |                     - expected due to this value\n...\n15 |   \
    \          d = -d;\n   |                 ^^\n   |                 |\n   |    \
    \             expected `&isize`, found `isize`\n   |                 help: consider\
    \ borrowing here: `&-d`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&isize`\n    --> /tmp/tmpqos21jgv.rs:19:21\n\
    \     |\n19   |     ys.iter().rev().collect()\n     |                     ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0368, E0425.\nFor more\
    \ information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut s = Vec::new();\n    for i in 1..xs.len() {\n        let x = *xs.clone();\n\
    \        s.push(x.0 * (i - 1) + x.1);\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpvbwwvv68.rs:11:13\n   |\n11 |         let x\
    \ = *xs.clone();\n   |             ^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n   = note:\
    \ all local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\n\nerror[E0609]: no field `0` on type `[isize]`\n\
    \  --> /tmp/tmpvbwwvv68.rs:12:18\n   |\n12 |         s.push(x.0 * (i - 1) + x.1);\n\
    \   |                  ^\n\nerror[E0609]: no field `1` on type `[isize]`\n  -->\
    \ /tmp/tmpvbwwvv68.rs:12:34\n   |\n12 |         s.push(x.0 * (i - 1) + x.1);\n\
    \   |                                  ^\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    derivative(xs,\
    \ 1isize)\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \ --> /tmp/tmpunwgu7_j.rs:9:5\n  |\n9 |     derivative(xs, 1isize)\n  |     ^^^^^^^^^^\
    \ --  ------ supplied 2 arguments\n  |     |\n  |     expected 1 argument\n  |\n\
    note: function defined here\n --> /tmp/tmpunwgu7_j.rs:8:4\n  |\n8 | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ^^^^^^^^^^ --------------\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![0; xs.len()];\n    for x in xs {\n        let mut nxt = vec![0;\
    \ xs.len()];\n        for j in xs.iter_mut() {\n            nxt[j] = x;\n    \
    \        (*j) = (*j) - (*j) * x;\n        }\n        ys[x] = (*nxt).sum()\n  \
    \  }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `&mut isize`\n\
    \  --> /tmp/tmpit439fkw.rs:13:13\n   |\n13 |             nxt[j] = x;\n   |   \
    \          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&mut isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&mut isize>` for\
    \ `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpit439fkw.rs:16:9\n   |\n16 |         ys[x] = (*nxt).sum()\n\
    \   |         ^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0599]: `[{integer}]` is not an iterator\n  --> /tmp/tmpit439fkw.rs:16:24\n\
    \   |\n16 |         ys[x] = (*nxt).sum()\n   |                        ^^^ `[{integer}]`\
    \ is not an iterator; try calling `.into_iter()` or `.iter()`\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `[{integer}]: Iterator`\n\
    \           which is required by `&mut [{integer}]: Iterator`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    if n == 0 {\n        vec![]\n    } else if n == 1 {\n   \
    \     vec![xs.first()]\n    } else {\n        vec![(xs.last() - xs.first()) /\
    \ (n - 1)]\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpybbavn12.rs:13:14\n   |\n\
    13 |         vec![xs.first()]\n   |              ^^^^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror[E0369]: cannot subtract `Option<&isize>` from\
    \ `Option<&isize>`\n  --> /tmp/tmpybbavn12.rs:15:25\n   |\n15 |         vec![(xs.last()\
    \ - xs.first()) / (n - 1)]\n   |               --------- ^ ---------- Option<&isize>\n\
    \   |               |\n   |               Option<&isize>\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut x1 = xs[0];\n    let mut x2 = xs[1];\n   \
    \ for _ in 1..xs.len() {\n        let num = x1 * x2;\n        x1 = x2;\n     \
    \   x2 = num;\n        result.push(x2);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 9, 27]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2mq8icsc.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    deriv(xs,\
    \ 0).unwrap()\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `deriv` in this scope\n --> /tmp/tmpeszm8kc8.rs:9:5\n\
    \  |\n9 |     deriv(xs, 0).unwrap()\n  |     ^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 1 {\n        vec![0]\n    } else {\n        vec![xs[0]]\n       \
    \     .iter()\n            .zip(&xs[1..])\n            .map(|(x, y)| x * y)\n\
    \            .collect()\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpf1c1yi5z.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ len = xs.len();\n    let mut ret: Vec<isize> = xs.clone();\n    ret[0] = ret[1]\
    \ - 1;\n    for _ in 1..len - 1 {\n        ret.iter_mut().for_each(|&x| {\n  \
    \          *x += 1;\n            *x -= 1;\n        });\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ia55nnk.rs:13:34\n   |\n\
    13 |         ret.iter_mut().for_each(|&x| {\n   |                            \
    \      ^--\n   |                                  ||\n   |                   \
    \               |expected due to this\n   |                                  types\
    \ differ in mutability\n   |                                  help: did you mean\
    \ `x`: `&&mut isize`\n   |\n   = note: expected mutable reference `&mut isize`\n\
    \                      found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let n = xs.len();\n    for i in 1..n {\n        result.append(xs[i\
    \ - 1] * xs[i] - xs[i - 2]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoatq3i26.rs:12:23\n   |\n\
    12 |         result.append(xs[i - 1] * xs[i] - xs[i - 2]);\n   |             \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&mut Vec<_>`, found `isize`\n\
    \   |\n   = note: expected mutable reference `&mut Vec<_>`\n                 \
    \          found type `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys: Vec<isize> = xs.clone();\n    let mut n = ys.len();\n    if n % 2 ==\
    \ 1 {\n        ys.insert(n - 1, 1);\n    }\n    let mut acc = vec![1; ys.len()];\n\
    \    for &y in ys.iter_mut() {\n        if *y < 0 {\n            *y = (*y) * (-1);\n\
    \        } else {\n            *y = *y * (-1);\n        }\n        acc = acc.iter_mut().zip(xs.iter_mut()).map(|(_,\
    \ y), (x) -> y + x).collect();\n    }\n    ys.iter().map(|&y| acc[0] += y).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `,` or `:`, found `->`\n  --> /tmp/tmp1sc_nnen.rs:21:66\n\
    \   |\n21 |         acc = acc.iter_mut().zip(xs.iter_mut()).map(|(_, y), (x) ->\
    \ y + x).collect();\n   |                                                    \
    \              ^^ expected one of `,` or `:`\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut n = xs.len();\n    if n == 1 {\n        vec![1]\n    } else if n == 2 {\n\
    \        xs.iter().cloned().fold(1, |acc, &x| acc * x)\n    } else {\n       \
    \ xs.iter().cloned().fold(1, |acc, &x| acc + (x * (x * (x - 1))))\n    }\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgwuivxg5.rs:13:33\n   |\n\
    13 |         xs.iter().cloned().fold(1, |acc, &x| acc * x)\n   |             \
    \                    ^ expected struct `Vec`, found integer\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgwuivxg5.rs:13:42\n   |\n13 |         xs.iter().cloned().fold(1,\
    \ |acc, &x| acc * x)\n   |                                          ^--\n   |\
    \                                          ||\n   |                          \
    \                |expected due to this\n   |                                 \
    \         expected `isize`, found reference\n   |                            \
    \              help: did you mean `x`: `&isize`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0369]: cannot multiply `Vec<isize>`\
    \ by `_`\n  --> /tmp/tmpgwuivxg5.rs:13:50\n   |\n13 |         xs.iter().cloned().fold(1,\
    \ |acc, &x| acc * x)\n   |                                              --- ^\
    \ - _\n   |                                              |\n   |             \
    \                                 Vec<isize>\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgwuivxg5.rs:15:33\n   |\n15 |         xs.iter().cloned().fold(1,\
    \ |acc, &x| acc + (x * (x * (x - 1))))\n   |                                 ^\
    \ expected struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `{integer}`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgwuivxg5.rs:15:42\n   |\n15 |         xs.iter().cloned().fold(1, |acc,\
    \ &x| acc + (x * (x * (x - 1))))\n   |                                       \
    \   ^--\n   |                                          ||\n   |              \
    \                            |expected due to this\n   |                     \
    \                     expected `isize`, found reference\n   |                \
    \                          help: did you mean `x`: `&isize`\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0369]: cannot\
    \ add `_` to `Vec<isize>`\n  --> /tmp/tmpgwuiv"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    let mut fs: Vec<isize> = xs.clone();\n\
    \    fs.push(0);\n    ds.iter().for_each(|d| {\n        let mut i = ds.len() -\
    \ 1;\n        while i >= 0 {\n            dx[i] = (d[i] + d[i+1]) * dx[i];\n \
    \           i -= 1;\n        }\n        fs.push(0);\n    });\n    dx\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ds` in this scope\n  --> /tmp/tmpwmqbopxv.rs:12:5\n\
    \   |\n12 |     ds.iter().for_each(|d| {\n   |     ^^ help: a local variable with\
    \ a similar name exists: `dx`\n\nerror[E0425]: cannot find value `ds` in this\
    \ scope\n  --> /tmp/tmpwmqbopxv.rs:13:21\n   |\n13 |         let mut i = ds.len()\
    \ - 1;\n   |                     ^^ help: a local variable with a similar name\
    \ exists: `d`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_d: Vec<isize> = xs.clone();\n    xs_d[0] = 0;\n    xs_d[1] = xs[1];\n\
    \    for i in 2..xs.len() {\n        xs_d[i] = xs_d[i-1] * xs[i] - xs[i-1];\n\
    \    }\n    xs_d\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 1, 2, 6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2k23ic8m.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys: Vec<isize> = xs.clone();\n    ys.extend_from_slice(ys.iter().rev().take(xs.len()));\n\
    \    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_i_g8i5m.rs:10:26\n   |\n\
    10 |     ys.extend_from_slice(ys.iter().rev().take(xs.len()));\n   |         \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[isize]`, found struct\
    \ `std::iter::Take`\n   |\n   = note: expected reference `&[isize]`\n        \
    \         found struct `std::iter::Take<Rev<std::slice::Iter<'_, isize>>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        vec![1]\n    } else {\n        vec![xs[0]]\n      \
    \      .iter()\n            .zip(\n                &xs[1..],\n            )\n\
    \            .map(|(acc, coeff)| acc * coeff)\n            .collect()\n    }\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmprqfhql2a.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().cloned().map(|x|\
    \ (*x) - (*x)**2).cloned().collect()\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpxo0zuz6e.rs:9:32\n\
    \  |\n9 |     xs.iter().cloned().map(|x| (*x) - (*x)**2).cloned().collect()\n\
    \  |                                ^^^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n --> /tmp/tmpxo0zuz6e.rs:9:39\n  |\n9 |     xs.iter().cloned().map(|x|\
    \ (*x) - (*x)**2).cloned().collect()\n  |                                    \
    \   ^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpxo0zuz6e.rs:9:44\n\
    \  |\n9 |     xs.iter().cloned().map(|x| (*x) - (*x)**2).cloned().collect()\n\
    \  |                                            ^^\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dys = Vec::new();\n\n    for i in 0..(xs.len() - 1) {\n        let mut coef\
    \ = xs[i];\n        let mut mult = 1;\n\n        for j in (i + 1)..(xs.len())\
    \ {\n            coef *= xs[j];\n            mult = mult * xs[j];\n        }\n\
    \n        dys.push(coef / mult);\n    }\n\n    dys\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmphtgl1lo4.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in (0..(xs.len() - 1)) as usize {\n    \
    \    let x0 = xs[i - 1];\n        let x1 = xs[i];\n        let x2 = xs[i + 1];\n\
    \        result.push(x0 + x1 * xs + x2 * xs^2);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpjqdu678d.rs:10:14\n\
    \   |\n10 |     for i in (0..(xs.len() - 1)) as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0605]: non-primitive cast: `std::ops::Range<usize>`\
    \ as `usize`\n  --> /tmp/tmpjqdu678d.rs:10:14\n   |\n10 |     for i in (0..(xs.len()\
    \ - 1)) as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0605.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        vec![]\n    }\n    let mut res = vec![];\n    for x\
    \ in xs {\n        res.push(xs.len() - x - 1);\n    }\n    res.reverse();\n  \
    \  res\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfuhoizjv.rs:10:9\n   |\n\
    9  | /     if xs.len() < 2 {\n10 | |         vec![]\n   | |         ^^^^^^ expected\
    \ `()`, found struct `Vec`\n11 | |     }\n   | |_____- expected this to be `()`\n\
    \   |\n   = note: expected unit type `()`\n                 found struct `Vec<_>`\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\nhelp: consider using a semicolon here\n \
    \  |\n11 |     };\n   |      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfuhoizjv.rs:14:29\n\
    \   |\n14 |         res.push(xs.len() - x - 1);\n   |                        \
    \     ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpfuhoizjv.rs:14:27\n   |\n14 |         res.push(xs.len()\
    \ - x - 1);\n   |                           ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfuhoizjv.rs:17:5\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n17 |     res\n   |     ^^^\
    \ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![0; xs.len()];\n\n    for i in 0..xs.len() {\n        result[i]\
    \ = xs[i] - xs[0] * i;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz3wy9j_b.rs:12:37\n   |\n\
    12 |         result[i] = xs[i] - xs[0] * i;\n   |                            \
    \         ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize`\
    \ by `usize`\n  --> /tmp/tmpz3wy9j_b.rs:12:35\n   |\n12 |         result[i] =\
    \ xs[i] - xs[0] * i;\n   |                                   ^ no implementation\
    \ for `isize * usize`\n   |\n   = help: the trait `Mul<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut deriv = xs.clone();\n    let mut i = 1usize;\n    while i < xs.len() {\n\
    \        let mut term = 1usize;\n        while term < xs.len() {\n           \
    \ deriv[i] += deriv[term + 1] * xs[term + 1] - deriv[term] * xs[term];\n     \
    \       term += 1;\n        }\n        i += 1;\n    }\n    deriv\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpvmiyygwv.rs:14:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ > 0);\n\n    let mut d = 0;\n    for i in (0..(xs.len() - 1)) as usize {\n \
    \       d += xs[i] as isize * (xs[i + 1] as isize);\n    }\n    Vec::new()\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpftpp1pjd.rs:12:14\n\
    \   |\n12 |     for i in (0..(xs.len() - 1)) as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0605]: non-primitive cast: `std::ops::Range<usize>`\
    \ as `usize`\n  --> /tmp/tmpftpp1pjd.rs:12:14\n   |\n12 |     for i in (0..(xs.len()\
    \ - 1)) as usize {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0605.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut f = xs.clone();\n    f.pop();\n    f.reverse();\n    f.push(0); // push\
    \ a 0 to the front, i.e. \"shift\" coefficients to the right by one\n    let mut\
    \ d = 0;\n    for i in f.clone() {\n        if i > 0 {\n            d += i;\n\
    \        }\n    }\n    d * xs.clone()\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `Vec<isize>`\n  --> /tmp/tmp4s1lxbs8.rs:19:7\n\
    \   |\n19 |     d * xs.clone()\n   |       ^ no implementation for `isize * Vec<isize>`\n\
    \   |\n   = help: the trait `Mul<Vec<isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut deriv = vec![];\n    let mut y = xs[0];\n    for x in xs.iter().rev() {\n\
    \        deriv.push(y - x);\n        y -= x;\n    }\n    deriv\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, -6, -8, -9, -12]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgpk1sqhh.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    derivative_xs_x(xs,\
    \ 0)\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `derivative_xs_x` in this scope\n -->\
    \ /tmp/tmpydjrsia7.rs:9:5\n  |\n9 |     derivative_xs_x(xs, 0)\n  |     ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = xs.clone();\n    ys.sort();\n    let mut xs: Vec<isize> = xs.clone();\n\
    \    xs.sort();\n    if xs.len() == 0 {\n        return vec![];\n    }\n    let\
    \ mut dys = vec![];\n    while xs.len() > 0 {\n        mut dy = xs[0];\n     \
    \   ys.remove(xs[0]);\n        let mut xs = xs.clone();\n        xs.remove(xs.len()\
    \ - 1);\n        if xs.len() == 0 {\n            dys.push(dy);\n        }\n  \
    \      if xs.len() > 0 {\n            dy += xs[0];\n        }\n        if xs.len()\
    \ > 0 {\n            dy += xs[0] * ys[0];\n        }\n        dys.push(dy);\n\
    \    }\n    dys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: invalid variable declaration\n  --> /tmp/tmploh5s1hp.rs:18:9\n \
    \  |\n18 |         mut dy = xs[0];\n   |         ^^^ help: missing keyword: `let\
    \ mut`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmploh5s1hp.rs:19:19\n  \
    \ |\n19 |         ys.remove(xs[0]);\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |         ys.remove(xs[0].try_into().unwrap());\n\
    \   |                        ++++++++++++++++++++\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    derivative(xs,\
    \ 1)\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \ --> /tmp/tmpl84l0sgl.rs:9:5\n  |\n9 |     derivative(xs, 1)\n  |     ^^^^^^^^^^\
    \ --  - supplied 2 arguments\n  |     |\n  |     expected 1 argument\n  |\nnote:\
    \ function defined here\n --> /tmp/tmpl84l0sgl.rs:8:4\n  |\n8 | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ^^^^^^^^^^ --------------\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut x: isize = 0;\n    let mut dx: isize = 0;\n    for &x in xs {\n        x\
    \ -= 1;\n        dx += 1;\n    }\n    vec![xs.len() - dx, dx]\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8iywqici.rs:11:9\n   |\n\
    11 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8iywqici.rs:15:21\n   |\n15 |     vec![xs.len() - dx, dx]\n   |\
    \                     ^^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8iywqici.rs:15:10\n   |\n15 |     vec![xs.len() - dx, dx]\n\
    \   |          ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     vec![(xs.len() - dx).try_into().unwrap(), dx]\n   |    \
    \      +             +++++++++++++++++++++\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp8iywqici.rs:15:19\n   |\n15 |     vec![xs.len()\
    \ - dx, dx]\n   |                   ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut current = xs.iter().cloned().collect::<Vec<_>>();\n\
    \    while !current.is_empty() {\n        let current_sum = current.iter().sum();\n\
    \        let mut derivative = vec![0; current_sum as usize];\n        for x in\
    \ current {\n            let d = x.pow(*current_sum) as isize;\n            derivative.push(d);\n\
    \        }\n        result = result.push(Derivative::new(&mut current,\n     \
    \                                       &derivative,\n                       \
    \                     &mut result,\n                                         \
    \   &mut current));\n        current = &current.iter().skip(current_sum).collect::<Vec<_>>();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Derivative`\n\
    \  --> /tmp/tmpnzzls6b5.rs:18:30\n   |\n18 |         result = result.push(Derivative::new(&mut\
    \ current,\n   |                              ^^^^^^^^^^ use of undeclared type\
    \ `Derivative`\n\nerror[E0282]: type annotations needed\n  --> /tmp/tmpnzzls6b5.rs:15:27\n\
    \   |\n12 |         let current_sum = current.iter().sum();\n   |            \
    \ ----------- consider giving `current_sum` a type\n...\n15 |             let\
    \ d = x.pow(*current_sum) as isize;\n   |                           ^^^^^^^^^^^^\
    \ cannot infer type\n   |\n   = note: type must be known at this point\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnzzls6b5.rs:18:18\n   |\n9  |       let mut\
    \ result = vec![];\n   |                        ------ expected due to this value\n\
    ...\n18 |           result = result.push(Derivative::new(&mut current,\n   | \
    \ __________________^\n19 | |                                             &derivative,\n\
    20 | |                                             &mut result,\n21 | |      \
    \                                       &mut current));\n   | |__________________________________________________________^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n\
    \           found unit type `()`\nnote: method `push` modifies its receiver in-place\n\
    \  --> /tmp/tmpnzzls6b5.rs:18:25\n   |\n18 |         result = result.push(Derivative::new(&mut\
    \ current,\n   |                  ------ ^^^^ this call modifies `result` in-place\n\
    \   |                  |\n   |                  you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `push`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzzls6b5.rs:22:19\n\
    \   |\n10 |     let mut current = xs.iter().cloned().collect::<Vec<_>>();\n  \
    \ |                       -------------------------------------- expected due\
    \ to this value\n...\n22 |         current = &current.iter().skip(current_sum).collect::<Vec<_>>();\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`,"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    (xs.iter()\n\
    \        .map(|x| pow(x, 2.0).unwrap())\n        .map(|x| x * x).collect())\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmp9iftx_ft.rs:10:18\n\
    \   |\n10 |         .map(|x| pow(x, 2.0).unwrap())\n   |                  ^^^\
    \ not found in this scope\n\nwarning: unnecessary parentheses around block return\
    \ value\n  --> /tmp/tmp9iftx_ft.rs:9:5\n   |\n9  |     (xs.iter()\n   |     ^\n\
    10 |         .map(|x| pow(x, 2.0).unwrap())\n11 |         .map(|x| x * x).collect())\n\
    \   |                                  ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n9  ~     xs.iter()\n10\
    \ |         .map(|x| pow(x, 2.0).unwrap())\n11 ~         .map(|x| x * x).collect()\n\
    \   |\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    fn\
    \ mul(xs: &[isize], ys: &[isize]) -> Vec<isize> {\n        let mut cs = Vec::with_capacity(xs.len());\n\
    \        for (i, x) in\n            xs.iter_mut().zip(xs.iter().cloned()).zip(ys.iter_mut().cloned())\n\
    \        {\n            cs.push(x + ys[i] * x);\n        }\n        cs\n    }\n\
    \    let mut ys = Vec::with_capacity(xs.len());\n    fn div(xs: &[isize], ys:\
    \ &[isize]) -> Vec<isize> {\n        let mut cs = Vec::with_capacity(xs.len());\n\
    \        for (i, x) in\n            xs.iter_mut().zip(xs.iter().cloned()).zip(ys.iter_mut().cloned())\n\
    \        {\n            cs.push(xs[i] / ys[i]);\n        }\n        cs\n    }\n\
    \n    let mut xs: Vec<_> = xs.iter().map(|x| x.clone()).collect();\n    let mut\
    \ ys: Vec<_> = ys.iter().map(|x| x.clone()).collect();\n    while ys.len() > 1\
    \ {\n        // xs = xs * xs\n        xs = mul(xs, xs);\n        xs = div(xs,\
    \ xs);\n        // ys = ys * ys\n        ys = mul(ys, ys);\n        ys = div(ys,\
    \ ys);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `&T`\n  --> /tmp/tmpokmp_ubk.rs:30:41\n\
    \   |\n30 |     let mut ys: Vec<_> = ys.iter().map(|x| x.clone()).collect();\n\
    \   |                                         ^ consider giving this closure parameter\
    \ the explicit type `&T`, where the type parameter `T` is specified\n   |\n  \
    \ = note: type must be known at this point\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpokmp_ubk.rs:33:18\n   |\n33 |         xs = mul(xs, xs);\n   | \
    \                 ^^\n   |                  |\n   |                  expected\
    \ `&[isize]`, found struct `Vec`\n   |                  help: consider borrowing\
    \ here: `&xs`\n   |\n   = note: expected reference `&[isize]`\n              \
    \   found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpokmp_ubk.rs:33:22\n\
    \   |\n33 |         xs = mul(xs, xs);\n   |                      ^^\n   |    \
    \                  |\n   |                      expected `&[isize]`, found struct\
    \ `Vec`\n   |                      help: consider borrowing here: `&xs`\n   |\n\
    \   = note: expected reference `&[isize]`\n                 found struct `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpokmp_ubk.rs:34:18\n   |\n34 |\
    \         xs = div(xs, xs);\n   |                  ^^\n   |                  |\n\
    \   |                  expected `&[isize]`, found struct `Vec`\n   |         \
    \         help: consider borrowing here: `&xs`\n   |\n   = note: expected reference\
    \ `&[isize]`\n                 found struct `Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpokmp_ubk.rs:34:22\n   |\n34 |         xs = div(xs, xs);\n\
    \   |                      ^^\n   |                      |\n   |             \
    \         expected `&[isize]`, found struct `Vec`\n   |                      help:\
    \ consider borrowing here: `&xs`\n   |\n   = note: expected reference `&[isize]`\n\
    \                 found struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpokmp_ubk.rs:36:18\n   |\n36 |         ys = mul(ys, ys);\n   | \
    \                 ^^\n   |                  |\n   |                  expected\
    \ `&[isize]`, found struct `Vec`\n   |          "
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 3 {\n        return vec![0];\n    }\n    let mut res = vec![];\n\
    \    let mut first = 1;\n    for &x in &xs {\n        res.push_back(first);\n\
    \        first *= x;\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_back` found for struct `Vec<_>` in\
    \ the current scope\n  --> /tmp/tmp259expud.rs:15:13\n   |\n15 |         res.push_back(first);\n\
    \   |             ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut x = 0.0isize;\n    let mut y = 0.0isize;\n    let mut dx: Vec<isize> = xs.clone();\n\
    \    dx.sort_unstable();\n    for i in 1..(dx.len() - 1) {\n        x += dx[i\
    \ - 1];\n        y += xs[i] * dx[i];\n    }\n    let mut dy: Vec<isize> = xs.clone();\n\
    \    dy.sort_unstable();\n    for i in 0..(dy.len() - 1) {\n        y += dy[i]\
    \ * dy[i - 1];\n    }\n    vec![x / y, x]\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: invalid suffix `isize` for float literal\n --> /tmp/tmpuolf5qmn.rs:9:17\n\
    \  |\n9 |     let mut x = 0.0isize;\n  |                 ^^^^^^^^ invalid suffix\
    \ `isize`\n  |\n  = help: valid suffixes are `f32` and `f64`\n\nerror: invalid\
    \ suffix `isize` for float literal\n  --> /tmp/tmpuolf5qmn.rs:10:17\n   |\n10\
    \ |     let mut y = 0.0isize;\n   |                 ^^^^^^^^ invalid suffix `isize`\n\
    \   |\n   = help: valid suffixes are `f32` and `f64`\n\nerror: aborting due to\
    \ 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    for i in (0..(xs.len() - 1)).step_by(2) {\n      \
    \  ys.push(xs[i + 2] * xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 10]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp2_x_n17s.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        vec![1]\n    } else {\n        let mut product = vec![0];\n\
    \        for x in xs.iter().rev() {\n            product += vec![x] * product;\n\
    \        }\n        product\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `Vec<&isize>` by `Vec<{integer}>`\n  -->\
    \ /tmp/tmp5zdgdkl6.rs:14:32\n   |\n14 |             product += vec![x] * product;\n\
    \   |                        ------- ^ ------- Vec<{integer}>\n   |          \
    \              |\n   |                        Vec<&isize>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_product = *xs.iter_mut();\n    loop {\n        let x = xs_product.next().unwrap();\n\
    \        if x == 0 {\n            break;\n        }\n        xs_product -= x;\n\
    \    }\n    let mut ys = vec![];\n    while xs_product.next() != Some(xs.last().unwrap())\
    \ {\n        ys.push(*xs_product.next());\n    }\n    ys\n}\n\nfn main() {\n \
    \   let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `std::slice::IterMut<'_, isize>` cannot be dereferenced\n\
    \ --> /tmp/tmp8qy2p31p.rs:9:26\n  |\n9 |     let mut xs_product = *xs.iter_mut();\n\
    \  |                          ^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    use\
    \ std::mem;\n\n    // reuse storage of xs since xs is a mutable reference\n  \
    \  let xs_storage = xs.as_mut_vec();\n    mem::swap(xs_storage, xs.as_mut_slice());\n\
    \n    let mut result = xs.clone();\n\n    for index in 0..xs.len() {\n       \
    \ result[index] += xs[index];\n    }\n\n    let mut result_storage = result.as_mut_slice();\n\
    \    mem::swap(result_storage, result.as_mut_vec());\n    result_storage\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_mut_vec` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpl7nerkv2.rs:12:25\n   |\n12 |     let xs_storage\
    \ = xs.as_mut_vec();\n   |                         ^^^^^^^^^^ help: there is an\
    \ associated function with a similar name: `as_mut_ptr`\n\nerror[E0277]: the size\
    \ for values of type `[isize]` cannot be known at compilation time\n   --> /tmp/tmpl7nerkv2.rs:13:5\n\
    \    |\n13  |     mem::swap(xs_storage, xs.as_mut_slice());\n    |     ^^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `[isize]`\nnote: required by a bound in `std::mem::swap`\n\
    \nerror[E0599]: no method named `as_mut_vec` found for struct `Vec<isize>` in\
    \ the current scope\n  --> /tmp/tmpl7nerkv2.rs:22:38\n   |\n22 |     mem::swap(result_storage,\
    \ result.as_mut_vec());\n   |                                      ^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `as_mut_ptr`\n\n\
    error[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n   --> /tmp/tmpl7nerkv2.rs:22:5\n    |\n22  |     mem::swap(result_storage,\
    \ result.as_mut_vec());\n    |     ^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by a bound in `std::mem::swap`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl7nerkv2.rs:23:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n23 |     result_storage\n   |     ^^^^^^^^^^^^^^- help:\
    \ try using a conversion method: `.to_vec()`\n   |     |\n   |     expected struct\
    \ `Vec`, found `&mut [isize]`\n   |\n   = note:         expected struct `Vec<isize>`\n\
    \           found mutable reference `&mut [isize]`\n\nerror: aborting due to 5\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    for i in &mut dx {\n        *i -= xs.len()\
    \ / 2;\n    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8x2sknlf.rs:11:15\n   |\n\
    11 |         *i -= xs.len() / 2;\n   |               ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n\
    \  --> /tmp/tmp8x2sknlf.rs:11:12\n   |\n11 |         *i -= xs.len() / 2;\n   |\
    \            ^^ no implementation for `isize -= usize`\n   |\n   = help: the trait\
    \ `SubAssign<usize>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `SubAssign<Rhs>`:\n             <f32 as SubAssign<&f32>>\n\
    \             <f32 as SubAssign>\n             <f64 as SubAssign<&f64>>\n    \
    \         <f64 as SubAssign>\n             <i128 as SubAssign<&i128>>\n      \
    \       <i128 as SubAssign>\n             <i16 as SubAssign<&i16>>\n         \
    \    <i16 as SubAssign>\n           and 20 others\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    x.iter().map(|x|\
    \ xs.iter().map(|x| x * x).sum()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n --> /tmp/tmpg1n8kz9_.rs:9:5\n\
    \  |\n9 |     x.iter().map(|x| xs.iter().map(|x| x * x).sum()).collect()\n  |\
    \     ^ help: a local variable with a similar name exists: `xs`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs = xs.into_iter();\n    let mut ys = vec![];\n    loop {\n        ys.push(ys.clone());\n\
    \        let x = match xs.pop() {\n            Some(x) => x,\n            None\
    \ => break,\n        };\n        let d = match xs.pop() {\n            Some(x)\
    \ => x,\n            None => break,\n        };\n        ys.push(ys[0] * x + ys[1]\
    \ * x ** 2 + ys[2] * x ** 3);\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyoy0uj5q.rs:12:17\n   |\n\
    12 |         ys.push(ys.clone());\n   |                 ^^^^^^^^^^\n   |     \
    \            |\n   |                 cyclic type of infinite size\n   |      \
    \           help: try using a conversion method: `ys.to_vec()`\n\nerror[E0599]:\
    \ no method named `pop` found for struct `std::vec::IntoIter` in the current scope\n\
    \  --> /tmp/tmpyoy0uj5q.rs:13:26\n   |\n13 |         let x = match xs.pop() {\n\
    \   |                          ^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror[E0599]: no method named `pop` found for struct `std::vec::IntoIter` in\
    \ the current scope\n  --> /tmp/tmpyoy0uj5q.rs:17:26\n   |\n17 |         let d\
    \ = match xs.pop() {\n   |                          ^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpyoy0uj5q.rs:21:40\n\
    \   |\n21 |         ys.push(ys[0] * x + ys[1] * x ** 2 + ys[2] * x ** 3);\n  \
    \ |                                        ^^^\n\nerror[E0614]: type `{integer}`\
    \ cannot be dereferenced\n  --> /tmp/tmpyoy0uj5q.rs:21:57\n   |\n21 |        \
    \ ys.push(ys[0] * x + ys[1] * x ** 2 + ys[2] * x ** 3);\n   |                \
    \                                         ^^^\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().rev().fold(vec![1i32],\
    \ |mut acc, &x| {\n        acc.push(acc.last().unwrap() * x)\n        acc.last()\n\
    \    })\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `acc`\n  --> /tmp/tmp6t7939n8.rs:10:42\n   |\n\
    10 |         acc.push(acc.last().unwrap() * x)\n   |                         \
    \                 ^ help: add `;` here\n11 |         acc.last()\n   |        \
    \ --- unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6t7939n8.rs:9:31\n\
    \  |\n9 |     xs.iter().rev().fold(vec![1i32], |mut acc, &x| {\n  |          \
    \                     ^^^^ expected `isize`, found `i32`\n  |\nhelp: change the\
    \ type of the numeric literal from `i32` to `isize`\n  |\n9 |     xs.iter().rev().fold(vec![1isize],\
    \ |mut acc, &x| {\n  |                                ~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6t7939n8.rs:11:9\n   |\n11 |         acc.last()\n   | \
    \        ^^^^^^^^^^ expected struct `Vec`, found enum `Option`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n                found enum `Option<&isize>`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    xs.iter().cloned().rev().fold(0,\
    \ |acc, x| acc * x + 1)\n}\n\nfn main() {\n    let candidate = derivative;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4ic9fqna.rs:9:35\n  |\n9 |\
    \     xs.iter().cloned().rev().fold(0, |acc, x| acc * x + 1)\n  |            \
    \                       ^ expected struct `Vec`, found integer\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n               found type `{integer}`\n\nerror[E0369]:\
    \ cannot multiply `Vec<isize>` by `isize`\n --> /tmp/tmp4ic9fqna.rs:9:51\n  |\n\
    9 |     xs.iter().cloned().rev().fold(0, |acc, x| acc * x + 1)\n  |          \
    \                                     --- ^ - isize\n  |                     \
    \                          |\n  |                                            \
    \   Vec<isize>\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut sum = 0;\n    let mut len = xs.len();\n    for i in len {\n        sum +=\
    \ xs[i] * &xs[len - i - 1];\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpt1yo9qa9.rs:11:14\n\
    \   |\n11 |     for i in len {\n   |              ^^^ `usize` is not an iterator\n\
    \   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note:\
    \ if you want to iterate between `start` until a value `end`, use the exclusive\
    \ range syntax `start..end` or the inclusive range syntax `start..=end`\n   =\
    \ note: required because of the requirements on the impl of `IntoIterator` for\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt1yo9qa9.rs:14:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     sum\n   |     ^^^ expected struct `Vec`, found integer\n   |\n \
    \  = note: expected struct `Vec<isize>`\n                found type `{integer}`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        return vec![xs[0]];\n    }\n    let mut result = vec![];\n\
    \    for x in xs.iter() {\n        let mut res = x;\n        for i in 2..=result.len()\
    \ {\n            res = res * x;\n            result.push(res);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7wugbzgq.rs:16:19\n   |\n\
    14 |         let mut res = x;\n   |                       - expected due to this\
    \ value\n15 |         for i in 2..=result.len() {\n16 |             res = res\
    \ * x;\n   |                   ^^^^^^^\n   |                   |\n   |       \
    \            expected `&isize`, found `isize`\n   |                   help: consider\
    \ borrowing here: `&(res * x)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7wugbzgq.rs:20:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n20 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        return vec![];\n    }\n    let mut p = vec![xs[0]];\n\
    \    for i in 1..xs.len() {\n        p.push(xs[i] + p[i] - p[i-1]);\n    }\n \
    \   p\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpxvotjyuz.rs:14:24

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx = vec![0.; xs.len()];\n    for i in 0..xs.len() {\n        dx[i] = xs[i]\
    \ - xs[i - 1];\n    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2k0uauf_.rs:11:17\n   |\n\
    11 |         dx[i] = xs[i] - xs[i - 1];\n   |         -----   ^^^^^^^^^^^^^^^^^\
    \ expected floating-point number, found `isize`\n   |         |\n   |        \
    \ expected due to the type of this binding\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2k0uauf_.rs:13:5\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n13 |     dx\n   |     ^^ expected `isize`, found floating-point\
    \ number\n   |\n   = note: expected struct `Vec<isize>`\n              found struct\
    \ `Vec<{float}>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut acc = vec![0isize..xs.len()];\n\n    for &i in acc.iter_mut() {\n      \
    \  *i = acc.len() - i;\n    }\n\n    for i in acc.iter() {\n        for &j in\
    \ acc.iter() {\n            if i == j {\n                *i -= 1;\n          \
    \  }\n        }\n    }\n\n    acc.iter().map(|x| *x).collect()\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppucc6pgp.rs:9:32\n  |\n9 |\
    \     let mut acc = vec![0isize..xs.len()];\n  |                             \
    \   ^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppucc6pgp.rs:11:9\n   |\n11 |     for &i in acc.iter_mut() {\n \
    \  |         ^^    -------------- this expression has type `Option<&mut std::ops::Range<isize>>`\n\
    \   |         |\n   |         types differ in mutability\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note: expected mutable\
    \ reference `&mut std::ops::Range<isize>`\n                      found reference\
    \ `&_`\n\nerror[E0277]: can't compare `&std::ops::Range<isize>` with `std::ops::Range<isize>`\n\
    \  --> /tmp/tmppucc6pgp.rs:17:18\n   |\n17 |             if i == j {\n   |   \
    \               ^^ no implementation for `&std::ops::Range<isize> == std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `PartialEq<std::ops::Range<isize>>` is not implemented\
    \ for `&std::ops::Range<isize>`\n   = help: the trait `PartialEq` is implemented\
    \ for `std::ops::Range<Idx>`\n\nerror[E0368]: binary assignment operation `-=`\
    \ cannot be applied to type `std::ops::Range<isize>`\n  --> /tmp/tmppucc6pgp.rs:18:17\n\
    \   |\n18 |                 *i -= 1;\n   |                 --^^^^^\n   |     \
    \            |\n   |                 cannot use `-=` on type `std::ops::Range<isize>`\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `std::ops::Range<isize>`\n    --> /tmp/tmppucc6pgp.rs:23:28\n\
    \     |\n23   |     acc.iter().map(|x| *x).collect()\n     |                 \
    \           ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=std::ops::Range<isize>>`\n\
    \     |\n     = help: the trait `FromIterator<std::ops::Range<isize>>` is not\
    \ implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0368.\nFor more information about an "
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ >= 2);\n\n    let mut ys = Vec::with_capacity(xs.len() - 1);\n    let mut x\
    \ = 0.;\n    for &x in xs.iter().rev() {\n        ys.push(x + 1);\n    }\n   \
    \ ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 5, 3, 2, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp1mzu7vty.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() <= 1 {\n        return vec![];\n    }\n\n    // xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    let mut derivative = vec![];\n    let mut coefficients\
    \ = vec![0; xs.len()];\n\n    let mut c = 0;\n    for &x in xs {\n        derivative.push(c\
    \ / x);\n        c += x;\n\n        coefficients[xs.len() - 1] += 1;\n    }\n\n\
    \    derivative\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpntvmo3lr.rs:18:9\n   |\n\
    18 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        vec![0]\n    } else {\n        vec![\n            xs[1]\
    \ * xs[1] - xs[0] * (xs[2] - xs[0]),\n            xs[1] * xs[2] - xs[0] * (xs[1]\
    \ - xs[0]),\n        ]\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 8]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpincef43s.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        vec![]\n    } else if xs.len() == 2 {\n        vec![xs[0]\
    \ as isize / xs[1]]\n    } else {\n        let mut coeffs = vec![];\n        for\
    \ x in xs {\n            coeffs.push((x as isize - xs.last() as isize) / xs.last().unwrap());\n\
    \        }\n        coeffs\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `Option<&isize>` as `isize`\n  --> /tmp/tmpx5_aek5e.rs:16:39\n\
    \   |\n16 |             coeffs.push((x as isize - xs.last() as isize) / xs.last().unwrap());\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 || xs.len() > 3 {\n        panic!(\"derivative with less than 3\
    \ elements\");\n    }\n\n    let mut x = xs[2];\n    if xs.len() > 3 {\n     \
    \   x = xs[3] - xs[2] * xs[1];\n    }\n    xs.iter().skip(1).map(|&x| x * x).collect()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''derivative with less than 3 elements'', /tmp/tmpd44ds0gm.rs:10:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    vec![xs[0],\
    \ (xs.len() == 1) ? 0 : xs[1]]\n        .iter()\n        .zip(&xs[2..])\n    \
    \    .map(|(x, y): (isize, isize)| x * y).collect::<Vec<_>>()\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: no rules expected the token `0`\n --> /tmp/tmp63e91xm3.rs:9:35\n\
    \  |\n9 |     vec![xs[0], (xs.len() == 1) ? 0 : xs[1]]\n  |                  \
    \                 ^ no rules expected this token in macro call\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_copy = xs;\n    let mut ret: Vec<isize> = xs_copy.clone();\n    let mut\
    \ degree: usize = 0;\n    while xs_copy.len() > 0 {\n        ret += (degree *\
    \ xs_copy.remove(0)) as isize;\n        degree++;\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp58t8pevj.rs:14:15\n\
    \   |\n14 |         degree++;\n   |               ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n14 |         { let tmp = degree; degree\
    \ += 1; tmp };\n   |         +++++++++++       ~~~~~~~~~~~~~~~~~~~~\n14 -    \
    \     degree++;\n14 +         degree += 1;\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp58t8pevj.rs:13:26\n   |\n13 |         ret += (degree *\
    \ xs_copy.remove(0)) as isize;\n   |                          ^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot multiply `usize` by\
    \ `isize`\n  --> /tmp/tmp58t8pevj.rs:13:24\n   |\n13 |         ret += (degree\
    \ * xs_copy.remove(0)) as isize;\n   |                        ^ no implementation\
    \ for `usize * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmp58t8pevj.rs:13:9\n   |\n13 |         ret\
    \ += (degree * xs_copy.remove(0)) as isize;\n   |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<isize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0368.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        vec![0]\n    } else {\n        xs.iter().map(|x| x\
    \ * x).collect::<Vec<_>>()\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[9, 1, 4, 16, 25]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp8zami44o.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut d = 0;\n    for &x in xs {\n        d += x.powf(*x as isize);\n    }\n \
    \   Vec::new(d / xs.len());\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwbg2arrm.rs:10:9\n   |\n\
    10 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpwbg2arrm.rs:13:5\n\
    \    |\n13  |     Vec::new(d / xs.len());\n    |     ^^^^^^^^ ------------ supplied\
    \ 1 argument\n    |     |\n    |     expected 0 arguments\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwbg2arrm.rs:8:34\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |    ----------\
    \                    ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n13 |     Vec::new(d / xs.len());\n   |                           - help:\
    \ remove this semicolon\n   |\n   = note: expected struct `Vec<isize>`\n     \
    \      found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 0 {\n        vec![]\n    } else {\n        let mut dx: Vec<isize>\
    \ = xs.clone();\n        let n = xs.len();\n        for i in 0..n {\n        \
    \    \n            dx[i] = dx[i - 1] * xs[i];\n        }\n        dx\n    }\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmptpofhlh_.rs:16:24

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut d = Vec::new();\n    for i in xs.iter() {\n        d += 1;\n    }\n    d.iter().cloned().reverse()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmp6urtsir8.rs:11:9\n   |\n11 |         d += 1;\n   | \
    \        -^^^^^\n   |         |\n   |         cannot use `+=` on type `Vec<_>`\n\
    \nerror[E0599]: no method named `reverse` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmp6urtsir8.rs:13:23\n   |\n13 |     d.iter().cloned().reverse()\n\
    \   |                       ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ _>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0368, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut x = 0.0;\n    let mut f = 0.0;\n    for _ in 0..(xs.len() - 1) {\n     \
    \   x += xs[_];\n        f += xs[_] * xs[_];\n    }\n    vec![f + xs[xs.len()\
    \ - 1]]\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: in expressions, `_` can only be used on the left-hand side of an\
    \ assignment\n  --> /tmp/tmpe7j9_rkz.rs:12:17\n   |\n12 |         x += xs[_];\n\
    \   |                 ^ `_` not allowed here\n\nerror: in expressions, `_` can\
    \ only be used on the left-hand side of an assignment\n  --> /tmp/tmpe7j9_rkz.rs:13:17\n\
    \   |\n13 |         f += xs[_] * xs[_];\n   |                 ^ `_` not allowed\
    \ here\n\nerror: in expressions, `_` can only be used on the left-hand side of\
    \ an assignment\n  --> /tmp/tmpe7j9_rkz.rs:13:25\n   |\n13 |         f += xs[_]\
    \ * xs[_];\n   |                         ^ `_` not allowed here\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpe7j9_rkz.rs:15:12\n   |\n15 |\
    \     vec![f + xs[xs.len() - 1]]\n   |            ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \   = help: the following other types implement trait `Add<Rhs>`:\n          \
    \   <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in xs.iter().rev() {\n        result.push(-xs[0]\
    \ as isize);\n        result.push(-xs[1] as isize);\n        result.push(-xs[i]\
    \ / xs[i+1] as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpdoktnlcb.rs:13:22\n\
    \   |\n13 |         result.push(-xs[i] / xs[i+1] as isize);\n   |            \
    \          ^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdoktnlcb.rs:13:30\n\
    \   |\n13 |         result.push(-xs[i] / xs[i+1] as isize);\n   |            \
    \                  ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ds = Vec::new();\n    for i in xs.iter().rev() {\n        ds.push(i * -2)\n\
    \    }\n    ds\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-10, -8, -4, -2, -6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpi6xdf8oj.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut n = 0;\n    for i in (0..x).step_by() {\n        if i == 0 {\n         \
    \   continue;\n        }\n        let mut sum = 0;\n        for j in (0..xs).step_by()\
    \ {\n            sum += xs[j] * i / j;\n        }\n        n += sum;\n    }\n\
    \    vec![1isize / (isize * n), n];\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmppqt3oqb7.rs:10:18\n\
    \   |\n10 |     for i in (0..x).step_by() {\n   |                  ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror[E0423]: expected value, found\
    \ builtin type `isize`\n  --> /tmp/tmppqt3oqb7.rs:20:20\n   |\n20 |     vec![1isize\
    \ / (isize * n), n];\n   |                    ^^^^^ not a value\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmppqt3oqb7.rs:10:21\n\
    \    |\n10  |     for i in (0..x).step_by() {\n    |                     ^^^^^^^-\
    \ supplied 0 arguments\n    |                     |\n    |                   \
    \  expected 1 argument\n    |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppqt3oqb7.rs:15:22\n   |\n15 |         for j\
    \ in (0..xs).step_by() {\n   |                      ^^ expected integer, found\
    \ struct `Vec`\n   |\n   = note: expected type `{integer}`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmppqt3oqb7.rs:15:26\n    |\n15  |         for j\
    \ in (0..xs).step_by() {\n    |                          ^^^^^^^- supplied 0 arguments\n\
    \    |                          |\n    |                          expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqt3oqb7.rs:16:32\n   |\n16 |             sum += xs[j] * i / j;\n\
    \   |                                ^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot divide `isize` by `usize`\n  --> /tmp/tmppqt3oqb7.rs:16:30\n   |\n16\
    \ |             sum += xs[j] * i / j;\n   |                              ^ no\
    \ implementation for `isize / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \            "
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    let mut dys = vec![n];\n    for i in 0..n {\n        let\
    \ mut dy = 0;\n        for j in 0..n {\n            dy += xs[j] * dys[j];\n  \
    \      }\n        dys[i] = dy;\n    }\n    return dys;\n}\n\nfn main() {\n   \
    \ let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmmpupq29.rs:14:27\n   |\n\
    14 |             dy += xs[j] * dys[j];\n   |                           ^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by\
    \ `usize`\n  --> /tmp/tmpmmpupq29.rs:14:25\n   |\n14 |             dy += xs[j]\
    \ * dys[j];\n   |                         ^ no implementation for `isize * usize`\n\
    \   |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmmpupq29.rs:16:18\n   |\n16 |         dys[i]\
    \ = dy;\n   |         ------   ^^ expected `usize`, found `isize`\n   |      \
    \   |\n   |         expected due to the type of this binding\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmmpupq29.rs:18:12\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n18 |     return dys;\n  \
    \ |            ^^^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        vec![]\n    } else {\n        let mut x = xs.clone();\n\
    \        let mut res = vec![];\n        for i in 1..xs.len() {\n            match\
    \ &x[i] {\n                0 => {\n                    res.push(0);\n        \
    \        },\n                1 => res.push(xs[0]),\n                x => res.push(pow(x,\
    \ i - 1)),\n            }\n        }\n        res.reverse()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpqkf6jnqi.rs:20:31\n\
    \   |\n20 |                 x => res.push(pow(x, i - 1)),\n   |              \
    \                 ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqkf6jnqi.rs:23:9\n   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n...\n23 |         res.reverse()\n   |         ^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    let mut cur = 1;\n    for i in xs.iter().rev() {\n\
    \        // multiply current by previous term and add\n        // result of the\
    \ current term\n        let mut prev = cur;\n        cur = prev * i;\n       \
    \ result.push(cur);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 20, 40, 40, 120]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp14tmxq5_.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n\n    for i in xs.iter().rev() {\n        let x = i;\n\
    \        let mut y = 1;\n\n        for j in xs.iter().rev() {\n            if\
    \ j < x {\n                continue;\n            }\n\n            y *= j;\n \
    \       }\n\n        ys.insert(0, y);\n    }\n\n    ys\n}\n\nfn main() {\n   \
    \ let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[60, 120, 120, 20, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpdmmc1obc.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut d = 0;\n    for i in xs.iter() {\n        if i > 1 {\n            d += xs[i\
    \ - 1];\n        }\n        d += i;\n    }\n    vec![d];\n}\n\nfn main() {\n \
    \   let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdsk9xp7i.rs:11:16\n   |\n\
    11 |         if i > 1 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&1`\n\nerror[E0277]: the type `[isize]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpdsk9xp7i.rs:12:18\n   |\n12 |             d += xs[i -\
    \ 1];\n   |                  ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdsk9xp7i.rs:8:34\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |    ----------\
    \                    ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n16 |     vec![d];\n   |            - help: remove this semicolon\n   |\n\
    \   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    let mut res = vec![];\n\n    for i in 0..n {\n        let\
    \ mut j = 0;\n        let mut xi = xs[i];\n\n        while xi != 0 {\n       \
    \     j = i + 1;\n            i = j;\n            xi = xi * xs[i - j];\n     \
    \   }\n        res.push(2 * xs[i]);\n    }\n\n    res\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `j` is never read\n  --> /tmp/tmpxx0qcztt.rs:13:17\n\
    \   |\n13 |         let mut j = 0;\n   |                 ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `i`\n  --> /tmp/tmpxx0qcztt.rs:18:13\n\
    \   |\n12 |     for i in 0..n {\n   |         -\n   |         |\n   |        \
    \ first assignment to `i`\n   |         help: consider making this binding mutable:\
    \ `mut i`\n...\n18 |             i = j;\n   |             ^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut n = xs.len();\n    if n < 2 {\n        return vec![];\n    }\n    if n <\
    \ 3 {\n        return vec![xs[n - 1]];\n    }\n\n    let mut result = vec![];\n\
    \n    for x in xs[1..] {\n        let mut new_result = vec![];\n        let mut\
    \ m = 1;\n        for i in 1..n {\n            m = m * x;\n            new_result.push(i\
    \ * m);\n        }\n        result = result.push(new_result);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp4yndihr6.rs:19:14\n   |\n19 |     for x in xs[1..]\
    \ {\n   |              ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n19 |     for x in &xs[1..]\
    \ {\n   |              +\n19 |     for x in &mut xs[1..] {\n   |             \
    \ ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmp4yndihr6.rs:19:14\n\
    \   |\n19 |     for x in xs[1..] {\n   |              ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n19 | \
    \    for x in &xs[1..] {\n   |              +\n19 |     for x in &mut xs[1..]\
    \ {\n   |              ++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4yndihr6.rs:26:18\n\
    \   |\n17 |     let mut result = vec![];\n   |                      ------ expected\
    \ due to this value\n...\n26 |         result = result.push(new_result);\n   |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |\n   = note: expected struct `Vec<Vec<usize>>`\n           found unit type\
    \ `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4yndihr6.rs:28:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n28\
    \ |     result\n   |     ^^^^^^ expected `isize`, found struct `Vec`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<usize>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result.push(i\
    \ + 1);\n        result.push(-i);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, -5, 5, -4, 3, -2, 2, -1, 4, -3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpgm500cq0.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut der: Vec<isize> = xs.clone();\n    der.pop();\n    der.pop();\n    der\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp236oypvv.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    debug_assert!(\n\
    \        xs.len() == 3,\n        \"derivative() expects a vector of length 3.\"\
    \n    );\n\n    vec![\n        xs[1] * xs[0] - xs[2],\n        xs[0] * xs[1] -\
    \ xs[2],\n        xs[1] * xs[0] + xs[2]\n    ]\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''derivative() expects a vector of length 3.'',
    /tmp/tmpptev1pvj.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for &x in xs {\n        result += vec![x - 1,\
    \ x * x, 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwnc41q8u.rs:10:9\n   |\n\
    10 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmpwnc41q8u.rs:11:9\n\
    \   |\n11 |         result += vec![x - 1, x * x, 1];\n   |         ------^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        vec![xs[0]]\n    } else {\n        let mut dx: Vec<isize>\
    \ = xs.clone();\n        dx[0] = dx[1] - 2 * xs[0] as isize;\n        dx[1] =\
    \ -dx[0] - 3 * xs[1];\n        dx[2] = dx[0] as isize;\n        dx[3] = -dx[0]\
    \ as isize;\n        dx[4] = -dx[0] as isize;\n        dx\n    }\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-5, 2, -5, 5, 5]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpqytz7zug.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut derivate = Vec::new();\n    for i in xs.iter() {\n        derivate.push(i\
    \ * (i - 1));\n    }\n    derivate\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 0, 2, 12, 20]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp8ltwiyo8.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_dx: Vec<isize> = xs.clone();\n    xs_dx.push(0);\n    for &x in xs_dx\
    \ {\n        xs_dx.push(x - xs[0]);\n    }\n    xs_dx\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm8mozke6.rs:11:9\n   |\n\
    11 |     for &x in xs_dx {\n   |         ^^    ----- this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `x`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone(); // copy of xs vector\n    for i in 0..dx.len()\
    \ {\n        dx[i] = 0;\n    }\n    for i in 1..dx.len() {\n        dx[i] = dx[i]\
    \ - dx[i - 1] * xs[i - 1];\n    }\n    dx\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmgv_2ksn.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    if xs.len() == 0 {\n        return result;\n    }\n\
    \    let mut c = xs[0];\n    let mut d = 0;\n    for i in 1..xs.len() {\n    \
    \    let c = xs[i];\n        let d = c * d + c;\n        result = result.push(d);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwi1nhair.rs:18:18\n   |\n\
    9  |     let mut result = vec![];\n   |                      ------ expected due\
    \ to this value\n...\n18 |         result = result.push(d);\n   |            \
    \      ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\nnote: method `push` modifies\
    \ its receiver in-place\n  --> /tmp/tmpwi1nhair.rs:18:25\n   |\n18 |         result\
    \ = result.push(d);\n   |                  ------ ^^^^ this call modifies `result`\
    \ in-place\n   |                  |\n   |                  you probably want to\
    \ use this value after calling the method...\n   = note: ...instead of the `()`\
    \ output of method `push`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    let mut result: Vec<isize> = xs.clone();\n    let mut m =\
    \ vec![0, 0];\n    let mut sum = 0;\n    for i in 0..(n-1) {\n        let x =\
    \ xs[i];\n        if m != vec![0, 0] {\n            sum += x * m[1];\n       \
    \ }\n        m[1] = x;\n        m[0] += x;\n    }\n    for i in 0..(n-1) {\n \
    \       result[i] = m[1] * result[i];\n    }\n    result[n - 1] += sum;\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[12, 4, 8, 16, 18]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpp1m_pqsh.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    Vec::new()\n\
    \        .iter()\n        .cloned()\n        .zip(&xs)\n        .map(|(x, y)|\
    \ x * y)\n        .collect()\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `(T, &isize)`\n  --> /tmp/tmp4txjnvj6.rs:13:15\n\
    \   |\n13 |         .map(|(x, y)| x * y)\n   |               ^^^^^^ consider giving\
    \ this closure parameter the explicit type `(T, _)`, where the type parameter\
    \ `T` is specified\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        return vec![];\n    }\n\n    let mut result = vec![xs[0]\
    \ as isize];\n    for i in 1..(xs.len() - 1) {\n        result[i] = result[i +\
    \ 1] * xs[i as usize];\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 2'', /tmp/tmp7fj0f66k.rs:15:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        vec![0]\n    } else {\n        let mut acc = vec![1];\n\
    \        for x in xs {\n            acc += x;\n        }\n        acc - 1\n  \
    \  }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<{integer}>`\n  --> /tmp/tmpp7kt1t7d.rs:14:13\n   |\n14 |             acc\
    \ += x;\n   |             ---^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `Vec<{integer}>`\n\nerror[E0369]: cannot subtract `{integer}`\
    \ from `Vec<{integer}>`\n  --> /tmp/tmpp7kt1t7d.rs:16:13\n   |\n16 |         acc\
    \ - 1\n   |         --- ^ - {integer}\n   |         |\n   |         Vec<{integer}>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0368, E0369.\nFor more information about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        return vec![];\n    }\n    let mut ans = vec![];\n\
    \    let mut last = *xs.split_last().unwrap();\n    for i in 0..xs.len() {\n \
    \       let mut cur = last;\n        last = last.cloned().map(|e| e - xs[i as\
    \ usize].clone()).collect();\n        ans.push(cur);\n    }\n    ans\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0614]: type `(&isize, &[isize])` cannot be dereferenced\n  --> /tmp/tmpl9htv1aw.rs:13:20\n\
    \   |\n13 |     let mut last = *xs.split_last().unwrap();\n   |              \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    match\
    \ xs.len() {\n        1 => vec![1],\n        _ => vec![((xs[0] * xs[1]) + (xs[1]\
    \ * xs[0]))],\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp20q7tyci.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    for i in 1..xs.len() {\n        res.push(xs[i] -\
    \ xs[i - 1]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-2, 1, 2, 1]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp0l_z06n1.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(!xs.is_empty(),\
    \ \"Derivative of a scalar should be zero\")\n    let mut d = 0;\n    for i in\
    \ xs.iter().rev() {\n        d *= i;\n    }\n    vec![d]\n}\n\nfn main() {\n \
    \   let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpiwkraszh.rs:9:69\n\
    \   |\n9  |     assert!(!xs.is_empty(), \"Derivative of a scalar should be zero\"\
    )\n   |                                                                     ^\
    \ help: add `;` here\n10 |     let mut d = 0;\n   |     --- unexpected token\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = xs.clone();\n    dx.reverse();\n    for i in dx.iter_mut()\
    \ {\n        *i -= *i;\n    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpy8v6dynk.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = xs.clone();\n    ys.extend_from_slice(&[1isize]);\n    let mut dx:\
    \ Vec<isize> = ys.clone();\n    dx.extend_from_slice(&[-xs[0]]);\n    for i in\
    \ 2..(ys.len() + 1) {\n        let mut xx = ys.clone();\n        xx.extend_from_slice(&[xs[i\
    \ - 1]]);\n        let mut y = dx.clone();\n        y.extend_from_slice(&[xs[i\
    \ - 1] * x[i - 1]]);\n        dx.extend_from_slice(&[-y]);\n        ys.extend_from_slice(&[xx\
    \ * xs[i]]);\n    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmpt6dlxfc7.rs:17:43\n\
    \   |\n17 |         y.extend_from_slice(&[xs[i - 1] * x[i - 1]]);\n   |      \
    \                                     ^ help: a local variable with a similar\
    \ name exists: `dx`\n\nerror[E0600]: cannot apply unary operator `-` to type `Vec<isize>`\n\
    \  --> /tmp/tmpt6dlxfc7.rs:18:32\n   |\n18 |         dx.extend_from_slice(&[-y]);\n\
    \   |                                ^^ cannot apply unary operator `-`\n\nerror[E0369]:\
    \ cannot multiply `Vec<isize>` by `isize`\n  --> /tmp/tmpt6dlxfc7.rs:19:35\n \
    \  |\n19 |         ys.extend_from_slice(&[xx * xs[i]]);\n   |                \
    \                -- ^ ----- isize\n   |                                |\n   |\
    \                                Vec<isize>\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0369, E0425, E0600.\nFor\
    \ more information about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    derivative::calculate(&xs,\
    \ 0)\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `derivative`\n\
    \ --> /tmp/tmpbmukckwr.rs:9:5\n  |\n9 |     derivative::calculate(&xs, 0)\n  |\
    \     ^^^^^^^^^^ use of undeclared crate or module `derivative`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize>;\n    for i in xs.iter() {\n        dx.push(i * (i + 1));\n\
    \    }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0381]: borrow of possibly-uninitialized variable: `dx`\n  --> /tmp/tmpdlpwc8tm.rs:11:9\n\
    \   |\n11 |         dx.push(i * (i + 1));\n   |         ^^^^^^^^^^^^^^^^^^^^ use\
    \ of possibly-uninitialized `dx`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0381`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut c = 0;\n    for x in xs.iter() {\n        c += x;\n    }\n    vec![xs[2..].iter().map(|x|\
    \ x * c / xs[0]).collect::<Vec<_>>()]\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpczyzkji4.rs:13:10\n   |\n\
    13 |     vec![xs[2..].iter().map(|x| x * c / xs[0]).collect::<Vec<_>>()]\n   |\
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs = xs.clone();\n    for x in xs.iter_mut() {\n        *x -= *x;\n    }\n\
    \    let mut result = Vec::new();\n    let mut s = 1.0;\n    while xs.len() >\
    \ 1 {\n        xs[0] /= s;\n        result.push(*xs[0]);\n        s *= -xs[0];\n\
    \        xs.pop();\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmpyipprn61.rs:16:15\n\
    \   |\n16 |         xs[0] /= s;\n   |               ^^ no implementation for `isize\
    \ /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `DivAssign<Rhs>`:\n\
    \             <f32 as DivAssign<&f32>>\n             <f32 as DivAssign>\n    \
    \         <f64 as DivAssign<&f64>>\n             <f64 as DivAssign>\n        \
    \     <i128 as DivAssign<&i128>>\n             <i128 as DivAssign>\n         \
    \    <i16 as DivAssign<&i16>>\n             <i16 as DivAssign>\n           and\
    \ 20 others\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpyipprn61.rs:17:21\n\
    \   |\n17 |         result.push(*xs[0]);\n   |                     ^^^^^^\n\n\
    error[E0277]: cannot multiply-assign `{float}` by `isize`\n  --> /tmp/tmpyipprn61.rs:18:11\n\
    \   |\n18 |         s *= -xs[0];\n   |           ^^ no implementation for `{float}\
    \ *= isize`\n   |\n   = help: the trait `MulAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    derivative(xs,\
    \ 1)\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \ --> /tmp/tmpl84l0sgl.rs:9:5\n  |\n9 |     derivative(xs, 1)\n  |     ^^^^^^^^^^\
    \ --  - supplied 2 arguments\n  |     |\n  |     expected 1 argument\n  |\nnote:\
    \ function defined here\n --> /tmp/tmpl84l0sgl.rs:8:4\n  |\n8 | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ^^^^^^^^^^ --------------\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        return vec![xs.last() as isize];\n    }\n    let mut\
    \ res = vec![xs.len() - 1];\n    let mut nxt = vec![];\n    for &x in xs {\n \
    \       let mut cur = x;\n        for &mut n in nxt {\n            cur *= x;\n\
    \        }\n        res.push(cur as isize);\n        nxt.push(cur);\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4bq_gqfn.rs:14:9\n   |\n\
    14 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4bq_gqfn.rs:19:18\n   |\n19 |         res.push(cur as isize);\n\
    \   |                  ^^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |         res.push((cur as isize).try_into().unwrap());\n   |\
    \                  +            +++++++++++++++++++++\n\nerror[E0277]: cannot\
    \ multiply-assign `&mut _` by `&mut _`\n  --> /tmp/tmp4bq_gqfn.rs:17:17\n   |\n\
    17 |             cur *= x;\n   |                 ^^ no implementation for `&mut\
    \ _ *= &mut _`\n   |\n   = help: the trait `MulAssign<&mut _>` is not implemented\
    \ for `&mut _`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4bq_gqfn.rs:22:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     res\n   |     ^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror[E0605]:\
    \ non-primitive cast: `Option<&isize>` as `isize`\n  --> /tmp/tmp4bq_gqfn.rs:10:21\n\
    \   |\n10 |         return vec![xs.last() as isize];\n   |                   \
    \  ^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0605.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    let mut result = vec![];\n    for i in 0..(n * n - 1) {\n\
    \        let mut x = 0;\n        for j in 0..n {\n            x += xs[j] * i /\
    \ n as isize;\n        }\n        result.push(x);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm52vws5y.rs:14:26\n   |\n\
    14 |             x += xs[j] * i / n as isize;\n   |                          ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by\
    \ `usize`\n  --> /tmp/tmpm52vws5y.rs:14:24\n   |\n14 |             x += xs[j]\
    \ * i / n as isize;\n   |                        ^ no implementation for `isize\
    \ * usize`\n   |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dys = Vec::new();\n    let mut k = xs.len() - 1;\n    while k >= 0 {\n \
    \       let mut dy = 0;\n        for &x in xs.iter_mut() {\n            dy = (dy*x\
    \ + dys)[k]\n        }\n        dys.push(0);\n        xs[k] = dy;\n        k --;\n\
    \    }\n    dys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpy_afvvrw.rs:18:13\n\
    \   |\n18 |         k --;\n   |             ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy_afvvrw.rs:13:13\n   |\n13 |         for &x\
    \ in xs.iter_mut() {\n   |             ^^    ------------- this expression has\
    \ type `Option<&mut isize>`\n   |             |\n   |             types differ\
    \ in mutability\n   |             help: you can probably remove the explicit borrow:\
    \ `x`\n   |\n   = note: expected mutable reference `&mut isize`\n            \
    \          found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dydxs = xs.clone();\n    dydxs[1] += dydxs[1] * xs[0] - dydxs[0] * xs[1]\
    \ + dydxs[2] * xs[0] * xs[1] - 2 * xs[1] * xs[0] * xs[2];\n    dydxs[2] = dydxs[1]\
    \ * xs[1] - dydxs[0] * xs[2];\n    dydxs.pop();\n    dydxs.pop();\n    dydxs\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, -5, -11]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbs4sawxe.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 || xs.len() > 1000 {\n        panic!(\"Derivative function requires\
    \ at least one or at most 1000 coefficients.\");\n    }\n    let mut x = 0;\n\
    \    let mut dx: Vec<isize> = xs.clone();\n    for i in 1..xs.len() {\n      \
    \  x -= xs[i - 1] * dx.last().unwrap() as isize;\n        dx.push(i * x);\n  \
    \  }\n    dx\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd928440j.rs:16:21\n   |\n\
    16 |         dx.push(i * x);\n   |                     ^ expected `usize`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd928440j.rs:16:17\n\
    \   |\n16 |         dx.push(i * x);\n   |                 ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |         dx.push((i * x).try_into().unwrap());\n\
    \   |                 +     +++++++++++++++++++++\n\nerror[E0277]: cannot multiply\
    \ `usize` by `isize`\n  --> /tmp/tmpd928440j.rs:16:19\n   |\n16 |         dx.push(i\
    \ * x);\n   |                   ^ no implementation for `usize * isize`\n   |\n\
    \   = help: the trait `Mul<isize>` is not implemented for `usize`\n   = help:\
    \ the following other types implement trait `Mul<Rhs>`:\n             <&'a f32\
    \ as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128 as\
    \ Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n\
    \             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n      \
    \       <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmpd928440j.rs:15:26\n   |\n15 |\
    \         x -= xs[i - 1] * dx.last().unwrap() as isize;\n   |                \
    \          ------------------^^^^^^^^^\n   |                          |\n   |\
    \                          cannot cast `&isize` as `isize`\n   |             \
    \             help: dereference the expression: `*dx.last().unwrap()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0606.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut f = 1.0\n    for &x in xs {\n        f *= x;\n    }\n    if xs.len() < 2\
    \ { return vec![0] }\n    let mut result: Vec<isize> = xs\n        .iter()\n \
    \       .cloned()\n        .cloned()\n        .take(xs.len() - 2)\n        .cloned()\n\
    \        .collect();\n    result.push(1.0) / f;\n    result.push(0.0);\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmph1v3rdof.rs:9:20\n\
    \   |\n9  |     let mut f = 1.0\n   |                    ^ help: add `;` here\n\
    10 |     for &x in xs {\n   |     --- unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph1v3rdof.rs:10:9\n   |\n10 |     for &x in xs {\n   | \
    \        ^^    -- this expression has type `Option<isize>`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_,\
    \ isize> as Iterator>::Item == &&_`\n    --> /tmp/tmph1v3rdof.rs:17:10\n     |\n\
    17   |         .cloned()\n     |          ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `take` exists for struct `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmph1v3rdof.rs:18:10\n\
    \   |\n18 |           .take(xs.len() - 2)\n   |            ^^^^ method cannot\
    \ be called on `Cloned<Cloned<std::slice::Iter<'_, isize>>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Cloned<std::slice::Iter<'_, isize>> as Iterator>::Item = &_`\n \
    \          which is required by `Cloned<Cloned<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n           `Cloned<Cloned<std::slice::Iter<'_, isize>>>: Iterator`\n\
    \           which is required by `&mut Cloned<Cloned<std::slice::Iter<'_, isize>>>:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph1v3rdof.rs:21:17\n\
    \   |\n21 |     result.push(1.0) / f;\n   |                 ^^^ expected `isize`,\
    \ found floating-point number\n\nerror[E0369]: cannot divide `()` by `{float}`\n\
    \  --> /tmp/tmph1v3rdof.rs:21:22\n   |\n21 |     result.push(1.0) / f;\n   | \
    \    -------------"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    //\
    \ if there's only one element, we return [1.0].\n    // This works because there's\
    \ only 1 element in the input list\n    // and it has no other elements.\n   \
    \ if xs.len() == 1 {\n        vec![1.0]\n    } else {\n        // if there's more\
    \ than one element, xs[0] must be 1 and\n        // xs[1] must be 0. We calculate\
    \ xs[0] + xs[1] * x + xs[2] * x^2 + ...\n        // We subtract xs[1] * x from\
    \ xs[0] to get the derivative of xs[0]\n        // and multiply it by the exponent\
    \ of xs[0].\n        // For this derivation, we calculate the derivative as the\n\
    \        // sum of all values returned by this function.\n        vec!(xs[0] *\
    \ derivative(xs.iter()\n            .skip(1)\n            .map(|x| xs[1] * x)\n\
    \            .sum()) as isize)\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpisyy1eih.rs:13:14\n   |\n\
    13 |         vec![1.0]\n   |              ^^^ expected `isize`, found floating-point\
    \ number\n\nerror[E0277]: the trait bound `Vec<isize>: Sum<isize>` is not satisfied\n\
    \    --> /tmp/tmpisyy1eih.rs:21:33\n     |\n21   |           vec!(xs[0] * derivative(xs.iter()\n\
    \     |  ______________________----------_^\n     | |                      |\n\
    \     | |                      required by a bound introduced by this call\n22\
    \   | |             .skip(1)\n23   | |             .map(|x| xs[1] * x)\n24   |\
    \ |             .sum()) as isize)\n     | |__________________^ the trait `Sum<isize>`\
    \ is not implemented for `Vec<isize>`\n     |\n     = help: the following other\
    \ types implement trait `Sum<A>`:\n               <Duration as Sum<&'a Duration>>\n\
    \               <Duration as Sum>\n               <Option<T> as Sum<Option<U>>>\n\
    \               <Result<T, E> as Sum<Result<U, E>>>\n               <Simd<f32,\
    \ LANES> as Sum<&'a Simd<f32, LANES>>>\n               <Simd<f32, LANES> as Sum>\n\
    \               <Simd<f64, LANES> as Sum<&'a Simd<f64, LANES>>>\n            \
    \   <Simd<f64, LANES> as Sum>\n             and 72 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror[E0605]: non-primitive cast: `Vec<isize>`\
    \ as `isize`\n  --> /tmp/tmpisyy1eih.rs:21:22\n   |\n21 |           vec!(xs[0]\
    \ * derivative(xs.iter()\n   |  ______________________^\n22 | |             .skip(1)\n\
    23 | |             .map(|x| xs[1] * x)\n24 | |             .sum()) as isize)\n\
    \   | |____________________________^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0605.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ret: Vec<isize> = xs.clone();\n    ret.iter().cloned().skip(1).cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n\
    \        .iter().cloned().cloned().nth(0).unwrap().pow(2)\n        .iter().cloned().cloned().nth(0).unwrap().pow\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp80vh7s4b.rs:10:33\n     |\n10   | \
    \    ret.iter().cloned().skip(1).cloned().nth(0).unwrap().pow(2)\n     |     \
    \                            ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&&_`\n                found reference `&isize`\n\
    \     = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `nth` exists for struct `Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmp80vh7s4b.rs:10:42\n\
    \   |\n10 |        ret.iter().cloned().skip(1).cloned().nth(0).unwrap().pow(2)\n\
    \   |                                             ^^^ method cannot be called\
    \ on `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Skip<Cloned<std::slice::Iter<'_, isize>>> as Iterator>::Item = &_`\n\
    \           which is required by `Cloned<Skip<Cloned<std::slice::Iter<'_, isize>>>>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0271, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    for i in xs.iter() {\n        ys.push((xs[i - 2] + xs[i\
    \ - 1] * xs[i - 1]) / xs[i]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4xv_7fds.rs:11:18\n\
    \   |\n11 |         ys.push((xs[i - 2] + xs[i - 1] * xs[i - 1]) / xs[i]);\n  \
    \ |                  ^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp4xv_7fds.rs:11:30\n   |\n11 |         ys.push((xs[i - 2] + xs[i\
    \ - 1] * xs[i - 1]) / xs[i]);\n   |                              ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4xv_7fds.rs:11:42\n   |\n11 |  \
    \       ys.push((xs[i - 2] + xs[i - 1] * xs[i - 1]) / xs[i]);\n   |          \
    \                                ^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmp4xv_7fds.rs:11:55\n   |\n11 |         ys.push((xs[i - 2] + xs[i\
    \ - 1] * xs[i - 1]) / xs[i]);\n   |                                          \
    \             ^^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for y in xs.iter().rev() {\n        let mut x = y;\n\
    \        let mut x_pow = 1;\n        while x < result.len() && result[x] != y\
    \ {\n            result.push(x);\n            x /= x_pow;\n        }\n       \
    \ result.push(y);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc_dx3nq1.rs:13:19\n   |\n\
    13 |         while x < result.len() && result[x] != y {\n   |                \
    \   ^^^^^^^^^^^^ expected `&isize`, found `usize`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmpc_dx3nq1.rs:13:35\n   |\n13 | \
    \        while x < result.len() && result[x] != y {\n   |                    \
    \               ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<_>`\n\
    \nerror[E0368]: binary assignment operation `/=` cannot be applied to type `&isize`\n\
    \  --> /tmp/tmpc_dx3nq1.rs:15:13\n   |\n15 |             x /= x_pow;\n   |   \
    \          -^^^^^^^^^\n   |             |\n   |             cannot use `/=` on\
    \ type `&isize`\n   |\nhelp: `/=` can be used on `isize`, you can dereference\
    \ `x`\n   |\n15 |             *x /= x_pow;\n   |             +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc_dx3nq1.rs:19:5\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n19 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = vec![0; xs.len()];\n    let mut n = 0;\n    for i in 1..xs.len() {\n\
    \        res[n] = xs[i - 1] * xs[i];\n        n += 1;\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8, 20, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpziv8h75y.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut x = xs.clone();\n    let mut y = x.clone();\n    let mut d = 0;\n    while\
    \ x.len() > 1 {\n        d += 1;\n        y.pop();\n    }\n    if x.len() == 1\
    \ {\n        vec![x]\n    } else {\n        vec![x.pop() * (x.len() - 1 - d) *\
    \ y]\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmtzqdl6_.rs:17:14\n   |\n\
    17 |         vec![x]\n   |              ^ expected `isize`, found struct `Vec`\n\
    \   |\n   = note: expected type `isize`\n            found struct `Vec<isize>`\n\
    \nerror[E0369]: cannot multiply `Option<isize>` by `usize`\n  --> /tmp/tmpmtzqdl6_.rs:19:22\n\
    \   |\n19 |         vec![x.pop() * (x.len() - 1 - d) * y]\n   |              -------\
    \ ^ ----------------- usize\n   |              |\n   |              Option<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut acc = vec![];\n    for i in 1..xs.len() {\n        acc.push(xs[i] * (xs[i\
    \ - 1] + xs[i - 2]) * (xs[i] - 1));\n    }\n    acc\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp6du_o8ly.rs:11:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        return vec![];\n    }\n    let mut result: Vec<isize>\
    \ = xs.to_vec();\n    let mut dx: Vec<isize> = xs.to_vec();\n    let mut i = 0;\n\
    \    for d in &mut result {\n        dx[i] = d[i];\n        i += 1;\n    }\n \
    \   while i < result.len() {\n        result[i] = result[i] - dx[i] - result[i]\
    \ * dx[i];\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `&mut isize`\n  --> /tmp/tmp8j4y0jv5.rs:16:17\n\
    \   |\n16 |         dx[i] = d[i];\n   |                 ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0608`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result: Vec<_> = xs.clone(); // clone() to avoid borrow checker error with\
    \ result borrowing xs\n    for k in 1..(xs.len() - 1) {\n        if xs[k] != 0\
    \ {\n            let tmp = xs[k];\n            xs[k] = xs[k - 1] + xs[k] * tmp;\n\
    \            result = result.push(tmp);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa1n_4a9r.rs:14:22\n   |\n\
    9  |     let mut result: Vec<_> = xs.clone(); // clone() to avoid borrow checker\
    \ error with result borrowing xs\n   |                     ------ expected due\
    \ to this type\n...\n14 |             result = result.push(tmp);\n   |       \
    \               ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n           found unit type `()`\nnote: method\
    \ `push` modifies its receiver in-place\n  --> /tmp/tmpa1n_4a9r.rs:14:29\n   |\n\
    14 |             result = result.push(tmp);\n   |                      ------\
    \ ^^^^ this call modifies `result` in-place\n   |                      |\n   |\
    \                      you probably want to use this value after calling the method...\n\
    \   = note: ...instead of the `()` output of method `push`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ >= 1);\n    let mut ys = Vec::new();\n    let mut x = xs.len();\n    if x ==\
    \ 1 {\n        ys.push(xs[0]);\n        return ys;\n    }\n    for i in xs.iter().rev()\
    \ {\n        ys.push((*i) / (xs - x));\n        x = x - 1;\n    }\n    ys\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `usize` from `Vec<isize>`\n  --> /tmp/tmpor8tv_vn.rs:17:28\n\
    \   |\n17 |         ys.push((*i) / (xs - x));\n   |                         --\
    \ ^ - usize\n   |                         |\n   |                         Vec<isize>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut dx: Vec<isize> = Vec::new();\n\n    for i in xs.iter() {\n        let dx\
    \ = i as isize - 1;\n        dx.push(dx);\n    }\n\n    dx\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpm72gkmin.rs:13:12\n   |\n13 |         dx.push(dx);\n  \
    \ |            ^^^^ method not found in `isize`\n\nerror[E0606]: casting `&isize`\
    \ as `isize` is invalid\n  --> /tmp/tmpm72gkmin.rs:12:18\n   |\n12 |         let\
    \ dx = i as isize - 1;\n   |                  -^^^^^^^^^\n   |               \
    \   |\n   |                  cannot cast `&isize` as `isize`\n   |           \
    \       help: dereference the expression: `*i`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0599, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for x in xs {\n        result.push(1.0 * (x * x).sum::<isize>());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmp10qxt4t2.rs:11:35\n\
    \   |\n11 |         result.push(1.0 * (x * x).sum::<isize>());\n   |         \
    \                          ^^^ `isize` is not an iterator\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `isize: Iterator`\n \
    \          which is required by `&mut isize: Iterator`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp10qxt4t2.rs:13:5\n   |\n8  | fn derivative(xs: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                  ---------- expected `Vec<isize>`\
    \ because of return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found floating-point number\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<{float}>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    fn\
    \ poly_eval<P, I>(func: P, x: I) -> isize\n    where\n        P: Fn(I) -> isize,\n\
    \        I: Iterator<Item = P>;\n    fn poly_deriv<P, I>(func: P, x: I) -> Vec<isize>\n\
    \    where\n        P: Fn(I) -> isize,\n        I: Iterator<Item = P>;\n    fn\
    \ poly_eval_aux<P, I, A>(func: P, x: I) -> A\n    where\n        P: Fn(I) -> isize,\n\
    \        I: Iterator<Item = P>,\n        A: Iterator<Item = P>;\n\n    match xs.len()\
    \ {\n        0 => vec![1],\n        1 => {\n            let mut f = func(xs.into_iter().next().unwrap());\n\
    \            for i in xs.iter().rev() {\n                f = func(xs.into_iter().next().unwrap())\
    \ * f as isize;\n            }\n            vec![f]\n        }\n        _ => {\n\
    \            let mut f = poly_eval(func, xs[0]);\n            for i in xs.iter().rev()\
    \ {\n                f = poly_eval(func, i) * f;\n            }\n            poly_deriv(func,\
    \ vec![f])\n        }\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: free function without a body\n  --> /tmp/tmpc56aoj5m.rs:9:5\n  \
    \ |\n9  | /     fn poly_eval<P, I>(func: P, x: I) -> isize\n10 | |     where\n\
    11 | |         P: Fn(I) -> isize,\n12 | |         I: Iterator<Item = P>;\n   |\
    \ |                              ^ help: provide a definition for the function:\
    \ `{ <body> }`\n   | |______________________________|\n   | \n\nerror: free function\
    \ without a body\n  --> /tmp/tmpc56aoj5m.rs:13:5\n   |\n13 | /     fn poly_deriv<P,\
    \ I>(func: P, x: I) -> Vec<isize>\n14 | |     where\n15 | |         P: Fn(I) ->\
    \ isize,\n16 | |         I: Iterator<Item = P>;\n   | |                      \
    \        ^ help: provide a definition for the function: `{ <body> }`\n   | |______________________________|\n\
    \   | \n\nerror: free function without a body\n  --> /tmp/tmpc56aoj5m.rs:17:5\n\
    \   |\n17 | /     fn poly_eval_aux<P, I, A>(func: P, x: I) -> A\n18 | |     where\n\
    19 | |         P: Fn(I) -> isize,\n20 | |         I: Iterator<Item = P>,\n21 |\
    \ |         A: Iterator<Item = P>;\n   | |                              ^ help:\
    \ provide a definition for the function: `{ <body> }`\n   | |______________________________|\n\
    \   | \n\nerror[E0425]: cannot find function `func` in this scope\n  --> /tmp/tmpc56aoj5m.rs:26:25\n\
    \   |\n26 |             let mut f = func(xs.into_iter().next().unwrap());\n  \
    \ |                         ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `func` in this scope\n  --> /tmp/tmpc56aoj5m.rs:28:21\n   |\n\
    28 |                 f = func(xs.into_iter().next().unwrap()) * f as isize;\n\
    \   |                     ^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `func` in this scope\n  --> /tmp/tmpc56aoj5m.rs:33:35\n   |\n33 |\
    \             let mut f = poly_eval(func, xs[0]);\n   |                      \
    \             ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `func` in this scope\n  --> /tmp/tmpc56aoj5m.rs:35:31\n   |\n35 |          \
    \       f = poly_eval(func, i) * f;\n   |                               ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `func` in this scope\n\
    \  --> /tmp/tmpc56aoj5m"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    use\
    \ std::mem;\n\n    if xs.len() == 0 {\n        vec![0]\n    } else {\n       \
    \ let mut dx: Vec<isize> = xs.clone();\n        dx.push(dx[0]);\n        mem::swap(&mut\
    \ dx, &mut xs);\n        let mut deriv: Vec<isize> = xs.clone();\n        for\
    \ i in 1..(dx.len() - 1) {\n            deriv[i] = deriv[i - 1] * xs[i - 1];\n\
    \        }\n        deriv\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `xs` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp75ovakcv.rs:16:28\n   |\n8  | fn derivative(xs: Vec<isize>) ->\
    \ Vec<isize> {\n   |               -- help: consider changing this to be mutable:\
    \ `mut xs`\n...\n16 |         mem::swap(&mut dx, &mut xs);\n   |             \
    \               ^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for x in xs {\n        result .+= vec![x, x.pow(2)];\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected token: `+=`\n  --> /tmp/tmp976s1_p1.rs:11:17\n   |\n\
    11 |         result .+= vec![x, x.pow(2)];\n   |                 ^^\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmp976s1_p1.rs:11:9\n\
    \   |\n11 |         result .+= vec![x, x.pow(2)];\n   |         ------^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut d = 0;\n    let mut dx: Vec<isize> = xs.clone();\n    while dx.len() > 0\
    \ {\n        d += dx.pop() * d;\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `Option<isize>` by `{integer}`\n  --> /tmp/tmpi7jy2iyj.rs:12:23\n\
    \   |\n12 |         d += dx.pop() * d;\n   |              -------- ^ - {integer}\n\
    \   |              |\n   |              Option<isize>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi7jy2iyj.rs:14:5\n   |\n8  | fn derivative(xs: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                  ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     d\n   |     ^ expected struct `Vec`, found\
    \ integer\n   |\n   = note: expected struct `Vec<isize>`\n                found\
    \ type `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        vec![0]\n    }\n    let mut sum = xs.clone();\n    sum[0]\
    \ -= 1;\n    sum[1] -= 1;\n    for i in 2..(xs.len() - 1) {\n        sum[i] +=\
    \ 2;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ikb5399.rs:10:9\n   |\n\
    9  | /     if xs.len() < 2 {\n10 | |         vec![0]\n   | |         ^^^^^^^ expected\
    \ `()`, found struct `Vec`\n11 | |     }\n   | |_____- expected this to be `()`\n\
    \   |\n   = note: expected unit type `()`\n                 found struct `Vec<{integer}>`\n\
    \   = note: this error originates in the macro `vec` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\nhelp: consider using a semicolon here\n \
    \  |\n11 |     };\n   |      +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len() - 1;\n    let mut ys = Vec::new();\n    ys.resize(n + 1);\n   \
    \ for i in 0..n {\n        ys[i] = xs[i] + xs[i+1] * xs[i];\n    }\n    ys[n]\
    \ = 1\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `ys`\n  --> /tmp/tmp1tg0i6vr.rs:15:14\n   |\n\
    15 |     ys[n] = 1\n   |              ^ help: add `;` here\n16 |     ys\n   |\
    \     -- unexpected token\n\nerror[E0061]: this function takes 2 arguments but\
    \ 1 argument was supplied\n    --> /tmp/tmp1tg0i6vr.rs:11:8\n     |\n11   |  \
    \   ys.resize(n + 1);\n     |        ^^^^^^ ----- supplied 1 argument\n     |\
    \        |\n     |        expected 2 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = vec![];\n    for x in xs.iter() {\n        res.push(1);\n        for\
    \ _ in 0..x - 1 {\n            res.push(0);\n        }\n    }\n    res.into_iter().map(|x|\
    \ x * x).collect()\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]`,\n right: `[1, 4, 12, 20]`',\
    \ /tmp/tmp81i3ujgt.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        return vec![];\n    }\n    let mut x = xs[0..1];\n\
    \    let mut result = vec![];\n    let mut last_x = x.clone();\n    for d in xs[2..]\
    \ {\n        result.push((last_x * x) / d);\n        last_x = d;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpc_1z7uto.rs:12:9\n   |\n12 |     let mut x =\
    \ xs[0..1];\n   |         ^^^^^ doesn't have a size known at compile-time\n  \
    \ |\n   = help: the trait `Sized` is not implemented for `[isize]`\n   = note:\
    \ all local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n   |\n12 |\
    \     let mut x = &xs[0..1];\n   |                 +\n\nerror[E0599]: no method\
    \ named `clone` found for slice `[isize]` in the current scope\n  --> /tmp/tmpc_1z7uto.rs:14:24\n\
    \   |\n14 |     let mut last_x = x.clone();\n   |                        ^^^^^\
    \ method not found in `[isize]`\n\nerror[E0277]: the size for values of type `[isize]`\
    \ cannot be known at compilation time\n  --> /tmp/tmpc_1z7uto.rs:15:14\n   |\n\
    15 |     for d in xs[2..] {\n   |              ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n15 | \
    \    for d in &xs[2..] {\n   |              +\n15 |     for d in &mut xs[2..]\
    \ {\n   |              ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  -->\
    \ /tmp/tmpc_1z7uto.rs:15:14\n   |\n15 |     for d in xs[2..] {\n   |         \
    \     ^^^^^^^ expected an implementor of trait `IntoIterator`\n   |\n   = note:\
    \ the trait bound `[isize]: IntoIterator` is not satisfied\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `[isize]`\nhelp:\
    \ consider borrowing here\n   |\n15 |     for d in &xs[2..] {\n   |          \
    \    +\n15 |     for d in &mut xs[2..] {\n   |              ++++\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \  --> /tmp/tmpc_1z7uto.rs:16:29\n   |\n16 |         result.push((last_x * x)\
    \ / d);\n   |                             ^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `["
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        return vec![];\n    }\n\n    let mut x = 0;\n    let\
    \ mut d = 0;\n    let mut y = xs[0];\n    for i in 1..xs.len() {\n        x +=\
    \ xs[i];\n        d += 1;\n        y += xs[i] * d\n    }\n    vec![y]\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[40]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpfxigxivg.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        vec![0]\n    } else {\n        let mut x = xs[1];\n\
    \        let mut sum = xs[2];\n        for i in 1..xs.len() {\n            sum\
    \ *= x;\n            sum += xs[i];\n        }\n        vec![sum]\n    }\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[14]`,\n right: `[1, 4, 12, 20]`', /tmp/tmputn3cr1y.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ >= 1);\n    let mut dx: Vec<isize> = xs.clone();\n    dx[0] = 1.0; // x0\n \
    \   for i in 1..xs.len() {\n        dx[i] = dx[i - 1] * xs[i];\n    }\n    dx\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi1yq5zoz.rs:11:13\n   |\n\
    11 |     dx[0] = 1.0; // x0\n   |     -----   ^^^ expected `isize`, found floating-point\
    \ number\n   |     |\n   |     expected due to the type of this binding\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![0; xs.len()];\n    for i in (0..xs.len()).rev() {\n      \
    \  let n = result.len() - i;\n        result[i] = xs[n] / (xs.len() - i);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplhzwb1w4.rs:12:29\n   |\n\
    12 |         result[i] = xs[n] / (xs.len() - i);\n   |                       \
    \      ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `usize`\n  --> /tmp/tmplhzwb1w4.rs:12:27\n   |\n12 |     \
    \    result[i] = xs[n] / (xs.len() - i);\n   |                           ^ no\
    \ implementation for `isize / usize`\n   |\n   = help: the trait `Div<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = xs;\n    let mut m = xs[0];\n    for i in 1..xs.len() {\n        res.swap(i,\
    \ 1);\n        res.swap(i, 0);\n        res.swap(i, i + 1);\n        res.swap(i,\
    \ i + 1);\n        res.swap(i, i + 1);\n    }\n    if res.len() == 1 {\n     \
    \   res.swap(0, 1);\n        res.swap(0, 0);\n    }\n    if res == vec![1, 1]\
    \ {\n        res.swap(0, 0);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `m`\n  --> /tmp/tmpepceqgcy.rs:10:13\n   |\n\
    10 |     let mut m = xs[0];\n   |             ^ help: if this is intentional,\
    \ prefix it with an underscore: `_m`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpepceqgcy.rs:10:9\n\
    \   |\n10 |     let mut m = xs[0];\n   |         ----^\n   |         |\n   | \
    \        help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0382]: borrow of moved value: `xs`\n  --> /tmp/tmpepceqgcy.rs:10:17\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \ -- move occurs because `xs` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n9  |     let mut res = xs;\n   |                   -- value\
    \ moved here\n10 |     let mut m = xs[0];\n   |                 ^^ value borrowed\
    \ here after move\n\nerror: aborting due to previous error; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut d = Vec::with_capacity(xs.len());\n    for i in 0..xs.len() {\n        d.push((xs[i]\
    \ - xs[i - 1]).unwrap_or(0));\n    }\n    d\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap_or` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmptel8vdm8.rs:11:36\n   |\n11 |         d.push((xs[i]\
    \ - xs[i - 1]).unwrap_or(0));\n   |                                    ^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![0; xs.len()];\n    let mut j = xs.len() - 1;\n    for i in\
    \ xs.iter().rev() {\n        if i == 0 {\n            result[j] = 1;\n       \
    \ } else {\n            result[j] += 1;\n        }\n        j -= 1;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpmrcouczl.rs:12:14\n\
    \   |\n12 |         if i == 0 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    result.push(xs[0]);\n    for i in 1..xs.len()\
    \ {\n        result.push(xs[i] + result[i - 1])\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 4, 6, 10, 15]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpocntctex.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() <= 2 {\n        vec![1]\n    } else {\n        let mut result: Vec<isize>\
    \ = xs;\n        result.push(xs[0] - xs[1]);\n        for &x in &xs[2..] {\n \
    \           result.push(x * result[0] + x);\n        }\n        result\n    }\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `xs`\n  --> /tmp/tmpboh63yc0.rs:13:21\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \ -- move occurs because `xs` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n12 |         let mut result: Vec<isize> = xs;\n   | \
    \                                     -- value moved here\n13 |         result.push(xs[0]\
    \ - xs[1]);\n   |                     ^^ value borrowed here after move\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    //\
    \ First we multiply each item with their power of 2.\n    let mut x2 = xs.iter().map(|&x|\
    \ x * x).collect();\n    // Now the result is [xs[0]; x1 * x; x2 * x^2; x3^2 *\
    \ x1 * x; ....]\n    x2.iter_mut().zip(&x2).for_each(|(x1, x2)| {\n        *x2\
    \ = x2 * x1;\n    });\n    x2.iter_mut().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmplqlzbvqe.rs:12:5\n\
    \   |\n10 |     let mut x2 = xs.iter().map(|&x| x * x).collect();\n   |      \
    \   ------ consider giving `x2` a type\n11 |     // Now the result is [xs[0];\
    \ x1 * x; x2 * x^2; x3^2 * x1 * x; ....]\n12 |     x2.iter_mut().zip(&x2).for_each(|(x1,\
    \ x2)| {\n   |     ^^ cannot infer type\n   |\n   = note: type must be known at\
    \ this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut y = Vec::new();\n    for x in xs {\n        let mut dy = x;\n        for\
    \ (i, xi) in y.iter_mut().enumerate().rev() {\n            *xi += dy;\n      \
    \      dy *= xs[-i - 1];\n        }\n        y.push(dy);\n    }\n    y\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmp5l8t8ehv.rs:14:22\n\
    \   |\n14 |             dy *= xs[-i - 1];\n   |                      ^^ cannot\
    \ apply unary operator `-`\n   |\n   = note: unsigned values cannot be negated\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0600`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut acc = vec![0; xs.len()];\n    let mut product = 1.;\n    for (i, &x) in\
    \ xs.iter().enumerate() {\n        acc[i] = x;\n        product = x * product;\n\
    \    }\n    acc\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmps3o7vc52.rs:13:21\n\
    \   |\n13 |         product = x * product;\n   |                     ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 0 {\n        vec![]\n    } else {\n        xs.iter().cloned().rev().fold(vec![],\
    \ |acc, x| {\n            acc.push(acc[x] * x);\n            acc\n        })\n\
    \    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzpcrurcs.rs:13:22\n\
    \   |\n13 |             acc.push(acc[x] * x);\n   |                      ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    //\
    \ Get length of this polynomial and initialize new array to the right length.\n\
    \    let len = xs.len();\n    let mut dys = vec![0; len];\n\n    // Get coefficient\
    \ of x0 and do some pre-calculations to speed up the process\n    let y0 = xs[0].clone()\
    \ / xs[0].clone();\n    let x = x0 * xs[0].clone();\n    let mut a = x;\n    let\
    \ mut b = 1;\n\n    // Loop through all remaining terms\n    for i in 0..len-1\
    \ {\n        // Calculate coefficient of current x\n        a = a * x - xs[i];\n\
    \n        // Calculate coefficient of next x\n        b = b * xs[i].clone();\n\
    \n        // Save current value in dys\n        dys[i] = b / a;\n    }\n\n   \
    \ // Return derivative\n    dys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x0` in this scope\n  --> /tmp/tmptd6wp6_3.rs:15:13\n\
    \   |\n15 |     let x = x0 * xs[0].clone();\n   |             ^^ help: a local\
    \ variable with a similar name exists: `xs`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    //\
    \ xs is assumed to have length = 1\n    let mut result = vec![];\n    result.push(xs[0]);\n\
    \    for i in 1..(xs.len() - 1) {\n        let x = xs[i];\n        let mut d =\
    \ 0;\n        for j in 0..i {\n            d += xs[j] * result[j];\n        }\n\
    \        result.push(d / x);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 9, 9, 9]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp0amdt79u.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    match\
    \ xs.len() {\n        0 => vec![0],\n        1 => vec![1],\n        _ => xs.iter()\n\
    \            .enumerate()\n            .map(|(i, x)| xs.len() - i - 1)\n     \
    \       .fold(vec![1isize], |mut acc, _| {\n                acc.push(acc[0] +\
    \ acc[1] * x);\n                acc\n            })\n    }\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmp3vkg63pc.rs:16:44\n\
    \   |\n16 |                 acc.push(acc[0] + acc[1] * x);\n   |             \
    \                               ^ help: a local variable with a similar name exists:\
    \ `xs`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_len = xs.len();\n    let mut res = vec![0; xs_len];\n    for i in 0..xs_len\
    \ - 1 {\n        let d = xs[i] * xs[i + 2];\n        if d != 0 {\n           \
    \ let mut x = xs[i + 1];\n            let mut q = x;\n            let mut p =\
    \ 1;\n            for j in 0..xs_len - 2 {\n                let d = xs[j] * (x\
    \ - q);\n                if d != 0 {\n                    p += q / d;\n      \
    \              q -= d;\n                } else {\n                    p += q;\n\
    \                    q = 0;\n                }\n            }\n            res[i]\
    \ = p;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpw81t2q5e.rs:12:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() <= 1 {\n        return vec![0];\n    }\n    let mut ys = vec![0];\n\
    \    for &x in &xs {\n        if x == 0 {\n            continue;\n        }\n\
    \        ys.extend_from_slice(&x * (&xs[2] - &xs[1]));\n    }\n    ys\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdzlq9mjz.rs:17:30\n   |\n\
    17 |         ys.extend_from_slice(&x * (&xs[2] - &xs[1]));\n   |             \
    \                 ^^^^^^^^^^^^^^^^^^^^^^ expected `&[{integer}]`, found `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut derivs = Vec::new();\n\n    for i in 0..xs.len() - 1 {\n        derivs.push((xs[i]\
    \ + xs[i + 1]) * xs.len() + i);\n    }\n\n    derivs\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz068fv47.rs:12:43\n   |\n\
    12 |         derivs.push((xs[i] + xs[i + 1]) * xs.len() + i);\n   |          \
    \                                 ^^^^^^^^ expected `isize`, found `usize`\n\n\
    error[E0277]: cannot multiply `isize` by `usize`\n  --> /tmp/tmpz068fv47.rs:12:41\n\
    \   |\n12 |         derivs.push((xs[i] + xs[i + 1]) * xs.len() + i);\n   |   \
    \                                      ^ no implementation for `isize * usize`\n\
    \   |\n   = help: the trait `Mul<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Mul<Rhs>`:\n             <&'a\
    \ f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a i128\
    \ as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32 as\
    \ Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz068fv47.rs:12:54\n   |\n12 |         derivs.push((xs[i]\
    \ + xs[i + 1]) * xs.len() + i);\n   |                                        \
    \              ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize`\
    \ to `isize`\n  --> /tmp/tmpz068fv47.rs:12:52\n   |\n12 |         derivs.push((xs[i]\
    \ + xs[i + 1]) * xs.len() + i);\n   |                                        \
    \            ^ no implementation for `isize + usize`\n   |\n   = help: the trait\
    \ `Add<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() <= 1 {\n        return xs\n    }\n\n    if xs.len() > 2 {\n       \
    \ derivative(xs[1..])\n    } else {\n        let mut result = [xs[0]];\n     \
    \   result.extend_from_slice(\n            xs.iter().cloned().skip(1).map(|&x|\
    \ x * &result[0]).collect::<Vec<_>>(),\n        );\n        result\n    }\n}\n\
    \nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuq9cq4lq.rs:14:20\n   |\n\
    14 |         derivative(xs[1..])\n   |                    ^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                    |\n   |          \
    \          expected struct `Vec`, found slice `[isize]`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n               found slice `[isize]`\n\nerror[E0599]: no\
    \ method named `extend_from_slice` found for array `[isize; 1]` in the current\
    \ scope\n  --> /tmp/tmpuq9cq4lq.rs:17:16\n   |\n17 |         result.extend_from_slice(\n\
    \   |                ^^^^^^^^^^^^^^^^^ help: there is an associated function with\
    \ a similar name: `clone_from_slice`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuq9cq4lq.rs:18:45\n   |\n18 |             xs.iter().cloned().skip(1).map(|&x|\
    \ x * &result[0]).collect::<Vec<_>>(),\n   |                                 \
    \            ^--\n   |                                             ||\n   |  \
    \                                           |expected due to this\n   |      \
    \                                       expected `isize`, found reference\n  \
    \ |                                             help: did you mean `x`: `&isize`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpuq9cq4lq.rs:20:9\n   |\n8  | fn\
    \ derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                           \
    \       ---------- expected `Vec<isize>` because of return type\n...\n20 |   \
    \      result\n   |         ^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |         |\n   |         expected struct `Vec`, found array `[isize; 1]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found array `[isize;\
    \ 1]`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        return vec![];\n    }\n    let mut p = vec![0];\n  \
    \  let mut i = 1;\n    while i < xs.len() {\n        let c = p.clone();\n    \
    \    p[i] += xs[i] * c;\n        p.push(c[0]);\n        i += 1;\n    }\n    p\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `Vec<{integer}>`\n  --> /tmp/tmpzcj8wxm3.rs:16:23\n\
    \   |\n16 |         p[i] += xs[i] * c;\n   |                       ^ no implementation\
    \ for `isize * Vec<{integer}>`\n   |\n   = help: the trait `Mul<Vec<{integer}>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    match\
    \ xs.len() {\n        0 => vec![1],\n        1 => vec![0],\n        _ => vec![xs.iter().rev().skip(1).rev().sum()\
    \ / (*xs)],\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpknr50mlx.rs:12:55\n   |\n12 |         _ => vec![xs.iter().rev().skip(1).rev().sum()\
    \ / (*xs)],\n   |                                                       ^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[isize]`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut xs_new = xs;\n    xs_new.push(1);\n    let mut y = Vec::new();\n    y.push(0);\n\
    \    for i in 2..xs.len() {\n        for j in i..xs.len() {\n            if xs[j]\
    \ != 0 {\n                y.push(y.get(j) - xs[j] * xs_new[j] / xs[j]);\n    \
    \        }\n        }\n    }\n    y\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `isize` from `Option<&{integer}>`\n  -->\
    \ /tmp/tmpmpuv171s.rs:16:33\n   |\n16 |                 y.push(y.get(j) - xs[j]\
    \ * xs_new[j] / xs[j]);\n   |                        -------- ^ -------------------------\
    \ isize\n   |                        |\n   |                        Option<&{integer}>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for i in 1..(xs.len() - 1) {\n        result.push(xs[0]\
    \ + i * xs[1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbsxadd3.rs:11:33\n   |\n\
    11 |         result.push(xs[0] + i * xs[1]);\n   |                           \
    \      ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot multiply\
    \ `usize` by `isize`\n  --> /tmp/tmpfbsxadd3.rs:11:31\n   |\n11 |         result.push(xs[0]\
    \ + i * xs[1]);\n   |                               ^ no implementation for `usize\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfbsxadd3.rs:11:29\n   |\n11 |         result.push(xs[0]\
    \ + i * xs[1]);\n   |                             ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n  --> /tmp/tmpfbsxadd3.rs:11:27\n\
    \   |\n11 |         result.push(xs[0] + i * xs[1]);\n   |                    \
    \       ^ no implementation for `isize + usize`\n   |\n   = help: the trait `Add<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    let mut dp = vec![0isize; n];\n    for i in 0..n {\n    \
    \    let ni = n - i - 1;\n        let mut d = 0;\n        for j in 0..i-1 {\n\
    \            d = d + (xs[j] * xi(xs[n-j-i])) * (xs[j+ni]);\n        }\n      \
    \  dp[i] = d;\n    }\n    dp\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `xi` in this scope\n  --> /tmp/tmpuc46pf5x.rs:15:30\n\
    \   |\n15 |             d = d + (xs[j] * xi(xs[n-j-i])) * (xs[j+ni]);\n   |  \
    \                            ^^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ >= 1);\n    let mut acc = 0;\n    let mut m = xs.len();\n    let mut y = vec![];\n\
    \    while m > 1 {\n        if m % 2 == 0 {\n            y += xs[(m - 1) / 2]\
    \ * acc;\n        } else {\n            acc += xs[(m - 1) / 2] * acc;\n      \
    \  }\n        m /= 2;\n    }\n    if m == 1 {\n        return vec![];\n    }\n\
    \    y += xs.iter().rev().last().unwrap_or(xs[0]);\n    vec![acc / y]\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmpisbz3wtf.rs:15:13\n   |\n15 |             y += xs[(m\
    \ - 1) / 2] * acc;\n   |             -^^^^^^^^^^^^^^^^^^^^^^^^^\n   |        \
    \     |\n   |             cannot use `+=` on type `Vec<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpisbz3wtf.rs:24:43\n   |\n24 |     y += xs.iter().rev().last().unwrap_or(xs[0]);\n\
    \   |                                           ^^^^^\n   |                  \
    \                         |\n   |                                           expected\
    \ `&isize`, found `isize`\n   |                                           help:\
    \ consider borrowing here: `&xs[0]`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmpisbz3wtf.rs:24:5\n  \
    \ |\n24 |     y += xs.iter().rev().last().unwrap_or(xs[0]);\n   |     -^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |     |\n   |     cannot use `+=` on type `Vec<_>`\n\nerror[E0277]: cannot\
    \ divide `isize` by `Vec<_>`\n  --> /tmp/tmpisbz3wtf.rs:25:14\n   |\n25 |    \
    \ vec![acc / y]\n   |              ^ no implementation for `isize / Vec<_>`\n\
    \   |\n   = help: the trait `Div<Vec<_>>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Div<Rhs>`:\n             <&'a\
    \ f32 as Div<f32>>\n             <&'a f64 as Div<f64>>\n             <&'a i128\
    \ as Div<i128>>\n             <&'a i16 as Div<i16>>\n             <&'a i32 as\
    \ Div<i32>>\n             <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n\
    \             <&'a isize as Div<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0368.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    let mut y = vec![0; n];\n    let mut x = vec![n];\n    let\
    \ mut result = vec![n];\n    let mut d = 0;\n    let mut e = 0;\n    for i in\
    \ 0..n {\n        y [i] += d; //y now equals [d]x^(i) for all i\n        x [i]\
    \ = xs[i] - e;\n        d += 1;\n        e *= i;\n    }\n    let mut r = vec![n];\n\
    \    for i in 0..n {\n        r[i] = y[i] - x[i];\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkaewulqo.rs:17:17\n   |\n\
    17 |         x [i] = xs[i] - e;\n   |         -----   ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |         |\n   |         expected due to the type of this\
    \ binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkaewulqo.rs:19:14\n\
    \   |\n19 |         e *= i;\n   |              ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot multiply-assign `isize` by `usize`\n  --> /tmp/tmpkaewulqo.rs:19:11\n\
    \   |\n19 |         e *= i;\n   |           ^^ no implementation for `isize *=\
    \ usize`\n   |\n   = help: the trait `MulAssign<usize>` is not implemented for\
    \ `isize`\n   = help: the following other types implement trait `MulAssign<Rhs>`:\n\
    \             <f32 as MulAssign<&f32>>\n             <f32 as MulAssign>\n    \
    \         <f64 as MulAssign<&f64>>\n             <f64 as MulAssign>\n        \
    \     <i128 as MulAssign<&i128>>\n             <i128 as MulAssign>\n         \
    \    <i16 as MulAssign<&i16>>\n             <i16 as MulAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkaewulqo.rs:25:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n25 |     r\n   |     ^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut c = 0isize;\n    for &x in xs {\n        c += x;\n    }\n    c / (xs.len()\
    \ - 1).map(|&x| x * x).collect()\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf5xc_wcj.rs:10:9\n   |\n\
    10 |     for &x in xs {\n   |         ^^    -- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: `usize` is not\
    \ an iterator\n  --> /tmp/tmpf5xc_wcj.rs:13:24\n   |\n13 |     c / (xs.len() -\
    \ 1).map(|&x| x * x).collect()\n   |                        ^^^ `usize` is not\
    \ an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `usize: Iterator`\n           which is required by `&mut usize: Iterator`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpf5xc_wcj.rs:13:5\n   |\n8  | fn\
    \ derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                           \
    \       ---------- expected `Vec<isize>` because of return type\n...\n13 |   \
    \  c / (xs.len() - 1).map(|&x| x * x).collect()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    for i in xs.iter().rev() {\n        result += [i -\
    \ 1];\n    }\n    let mut result2 = result.clone();\n    for i in 1..result.len()\
    \ {\n        result2.swap(i - 1, i);\n    }\n    result2\n}\n\nfn main() {\n \
    \   let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmpdjp5t_ep.rs:11:9\n   |\n11 |         result += [i -\
    \ 1];\n   |         ------^^^^^^^^^^^\n   |         |\n   |         cannot use\
    \ `+=` on type `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut deriv = xs.clone();\n    let mut i = 1;\n    for mut x in deriv {\n    \
    \    deriv[i] = deriv[i - 1] * x;\n        i += 1;\n    }\n    deriv\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpnbfqy0n2.rs:11:9\n\
    \   |\n11 |     for mut x in deriv {\n   |         ----^\n   |         |\n   |\
    \         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0382]: borrow of moved value: `deriv`\n   --> /tmp/tmpnbfqy0n2.rs:12:20\n\
    \    |\n9   |     let mut deriv = xs.clone();\n    |         --------- move occurs\
    \ because `deriv` has type `Vec<isize>`, which does not implement the `Copy` trait\n\
    10  |     let mut i = 1;\n11  |     for mut x in deriv {\n    |              \
    \    ----- `deriv` moved due to this implicit call to `.into_iter()`\n12  |  \
    \       deriv[i] = deriv[i - 1] * x;\n    |                    ^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `deriv`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n11  |     for mut x in &deriv\
    \ {\n    |                  +\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut acc = xs[0];\n    for x in xs[1..] {\n        acc *= x;\n    }\n    acc\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpxbg6zzio.rs:10:14\n   |\n10 |     for x in xs[1..]\
    \ {\n   |              ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n10 |     for x in &xs[1..]\
    \ {\n   |              +\n10 |     for x in &mut xs[1..] {\n   |             \
    \ ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmpxbg6zzio.rs:10:14\n\
    \   |\n10 |     for x in xs[1..] {\n   |              ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n10 | \
    \    for x in &xs[1..] {\n   |              +\n10 |     for x in &mut xs[1..]\
    \ {\n   |              ++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxbg6zzio.rs:13:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected `Vec<isize>` because of return type\n\
    ...\n13 |     acc\n   |     ^^^ expected struct `Vec`, found `isize`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n                found type `isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ds = Vec::new();\n    let mut x2 = xs[1] * xs[1];\n    for i in 2..xs.len()\
    \ {\n        x2 = xs[i] + xs[i + 1] * x2;\n        ds.push(2);\n        if x2\
    \ < 0 {\n            ds.push(-xs[i - 2]);\n        }\n    }\n    ds\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpjga98__3.rs:12:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    for i in 0..xs.len() {\n        res.push((xs[i -\
    \ 1] as f64) / (xs[i] as f64));\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8s0rvdr9.rs:13:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n13\
    \ |     res\n   |     ^^^ expected `isize`, found `f64`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<f64>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut x = xs.clone();\n    let mut n = 1usize;\n\
    \    for _ in 0..xs.len() {\n        if n > 1 {\n            result.push(xs.len()\
    \ * x.pop() / n as isize);\n        }\n        result.push(xs.pop() as isize);\n\
    \        n += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `usize` by `Option<isize>`\n  --> /tmp/tmpabszpm_1.rs:14:34\n\
    \   |\n14 |             result.push(xs.len() * x.pop() / n as isize);\n   |  \
    \                                ^ no implementation for `usize * Option<isize>`\n\
    \   |\n   = help: the trait `Mul<Option<isize>>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Mul<Rhs>`:\n          \
    \   <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n             <&'a\
    \ i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n             <&'a i32\
    \ as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n\
    \             <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0605]:\
    \ non-primitive cast: `Option<isize>` as `isize`\n  --> /tmp/tmpabszpm_1.rs:16:21\n\
    \   |\n16 |         result.push(xs.pop() as isize);\n   |                    \
    \ ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    let mut x = 0.;\n    for val in xs.iter() {\n\
    \        x += *val as isize;\n        result.push((x - *val as isize) / x);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpwdvtjq2x.rs:12:11\n\
    \   |\n12 |         x += *val as isize;\n   |           ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0277]: cannot subtract `isize` from `{float}`\n  --> /tmp/tmpwdvtjq2x.rs:13:24\n\
    \   |\n13 |         result.push((x - *val as isize) / x);\n   |              \
    \          ^ no implementation for `{float} - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `{float}`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    derivative_inner(xs,\
    \ 0)\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `derivative_inner` in this scope\n -->\
    \ /tmp/tmp8fhoy174.rs:9:5\n  |\n9 |     derivative_inner(xs, 0)\n  |     ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![xs[0]];\n    for x in xs.iter().rev() {\n        ys.push(ys.last().unwrap()\
    \ * x);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 15, 60, 120, 120, 360]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpmti4d39c.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    //\
    \ xs.len() represents the degree of the polynomial.\n    let mut result = vec![];\n\
    \    for i in xs.iter_mut() {\n        let j = i - 1;\n        // let a = 1 *\
    \ xs[i] + xs[j] * x;\n        result[j] = xs[i] * xs[j];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `{integer}` from `&mut isize`\n  --> /tmp/tmp8sgxmi55.rs:12:19\n\
    \   |\n12 |         let j = i - 1;\n   |                 - ^ - {integer}\n   |\
    \                 |\n   |                 &mut isize\n   |\nhelp: `-` can be used\
    \ on `isize`, you can dereference `i`\n   |\n12 |         let j = *i - 1;\n  \
    \ |                 +\n\nerror[E0277]: the type `[isize]` cannot be indexed by\
    \ `&mut isize`\n  --> /tmp/tmp8sgxmi55.rs:14:21\n   |\n14 |         result[j]\
    \ = xs[i] * xs[j];\n   |                     ^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&mut isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&mut isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut x = 0.;\n    let mut ds = 0.;\n    for i in xs.len() - 1 {\n        x *=\
    \ xs[i];\n        ds -= xs[i] * (xs.len() - i) * (xs.len() - i + 1);\n    }\n\
    \    vec![x * xs, ds]\n}\n\nfn main() {\n    let candidate = derivative;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpxm7e1sbj.rs:11:14\n\
    \   |\n11 |     for i in xs.len() - 1 {\n   |              ^^^^^^^^^^^^ `usize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror[E0277]: cannot multiply `{float}` by `Vec<isize>`\n\
    \  --> /tmp/tmpxm7e1sbj.rs:15:12\n   |\n15 |     vec![x * xs, ds]\n   |      \
    \      ^ no implementation for `{float} * Vec<isize>`\n   |\n   = help: the trait\
    \ `Mul<Vec<isize>>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n\
    \             <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n  \
    \           <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n      \
    \       <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n            \
    \ <&'a isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxm7e1sbj.rs:15:18\n   |\n15 |     vec![x * xs, ds]\n  \
    \ |                  ^^ expected `isize`, found floating-point number\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut fs = Vec::new();\n    for &x in xs.iter() {\n        fs.push(x - 1);\n \
    \   }\n    fs\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 0, 1, 3, 4]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpybki6pzv.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        return vec![];\n    }\n\n    let mut n = xs.len();\n\
    \    let mut x2 = 1;\n    let mut dp = vec![0];\n\n    for &x in xs.iter() {\n\
    \        x2 = x2 + (x * x);\n        dp.push(x2);\n    }\n\n    let mut res =\
    \ vec![];\n    for i in dp.iter() {\n        if n <= 2 {\n            res.push(i);\n\
    \        } else {\n            n -= 1;\n            let mut x = 0;\n         \
    \   for j in dp.iter().skip(i + 1) {\n                x += j;\n            }\n\
    \            res.push(x * (x2 - x));\n        }\n    }\n\n    res\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpja_mury3.rs:29:37\n   |\n\
    29 |             for j in dp.iter().skip(i + 1) {\n   |                      \
    \               ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    29 |             for j in dp.iter().skip((i + 1).try_into().unwrap()) {\n   |\
    \                                     +     +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpja_mury3.rs:32:22\n   |\n32 |             res.push(x\
    \ * (x2 - x));\n   |                      ^^^^^^^^^^^^\n   |                 \
    \     |\n   |                      expected `&isize`, found `isize`\n   |    \
    \                  help: consider borrowing here: `&(x * (x2 - x))`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpja_mury3.rs:36:5\n   |\n8  | fn derivative(xs:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                  ----------\
    \ expected `Vec<isize>` because of return type\n...\n36 |     res\n   |     ^^^\
    \ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![1];\n    for i in 1..xs.len() {\n        result.push(xs[i]\
    \ - result[i-1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 2, 2, 3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4a0hupn9.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys: Vec<isize> = xs.clone();\n    ys.insert(0, 0);\n    for y in ys.iter_mut().rev()\
    \ {\n        *y /= 2;\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 0, 1, 2, 2]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpbgavhk9p.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![];\n    result.push(xs[0]);\n    for i in 1..(xs.len() - 1)\
    \ {\n        result.push(xs[i] * result[i - 1]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 6, 24]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpupusisk7.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 0 {\n        return vec![];\n    }\n    let mut product = xs[0];\n\
    \    for x in xs[1..] {\n        product *= x;\n    }\n    vec![product]\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp8l26svin.rs:13:14\n   |\n13 |     for x in xs[1..]\
    \ {\n   |              ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n13 |     for x in &xs[1..]\
    \ {\n   |              +\n13 |     for x in &mut xs[1..] {\n   |             \
    \ ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmp8l26svin.rs:13:14\n\
    \   |\n13 |     for x in xs[1..] {\n   |              ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n13 | \
    \    for x in &xs[1..] {\n   |              +\n13 |     for x in &mut xs[1..]\
    \ {\n   |              ++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = vec![];\n    ys.push(1);\n    for i in xs.iter().rev() {\n        ys.push(ys[i\
    \ - 1] * xs[i - 1]);\n    }\n    ys\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp6dau7nj4.rs:12:17\n   |\n12 |         ys.push(ys[i - 1] * xs[i - 1]);\n\
    \   |                 ^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmp6dau7nj4.rs:12:29\n   |\n12 |         ys.push(ys[i -\
    \ 1] * xs[i - 1]);\n   |                             ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.is_empty() {\n        return vec![];\n    }\n\n    let mut result = vec![xs[0]\
    \ as isize];\n\n    if xs[0] == 0 {\n        result[0] = xs[1];\n    } else {\n\
    \        let mut pow = 1;\n        let mut sum = 0;\n        for &i in &xs[1..]\
    \ {\n            sum += pow;\n            pow += 1;\n            result[result.len()\
    \ - 1 + i] = sum;\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvx1775wo.rs:23:39\n   |\n\
    23 |             result[result.len() - 1 + i] = sum;\n   |                   \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add `isize` to `usize`\n  --> /tmp/tmpvx1775wo.rs:23:37\n   |\n23 |        \
    \     result[result.len() - 1 + i] = sum;\n   |                              \
    \       ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ds: Vec<isize> = xs.clone();\n    ds[0] += xs[1] * xs[0] as isize;\n   \
    \ for &x in xs[2..] {\n        ds[0] += x * x as isize;\n    }\n    ds\n}\n\n\
    fn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmphql7q2gd.rs:11:15\n   |\n11 |     for &x in\
    \ xs[2..] {\n   |               ^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n11 |     for &x in &xs[2..]\
    \ {\n   |               +\n11 |     for &x in &mut xs[2..] {\n   |           \
    \    ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmphql7q2gd.rs:11:15\n\
    \   |\n11 |     for &x in xs[2..] {\n   |               ^^^^^^^ expected an implementor\
    \ of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]: IntoIterator`\
    \ is not satisfied\n   = note: required because of the requirements on the impl\
    \ of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n   |\n11 | \
    \    for &x in &xs[2..] {\n   |               +\n11 |     for &x in &mut xs[2..]\
    \ {\n   |               ++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 0 {\n        return vec![];\n    }\n    let mut res = vec![xs.len()];\n\
    \    for i in 0..xs.len() - 1 {\n        let cur = xs[i];\n        let next =\
    \ xs[i + 1];\n        for _ in 0..(i + 1) {\n            res.push((cur * cur)\
    \ * next.clone());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy_a4ulsu.rs:17:22\n   |\n\
    17 |             res.push((cur * cur) * next.clone());\n   |                 \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |             res.push(((cur * cur) * next.clone()).try_into().unwrap());\n\
    \   |                      +                          +++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpy_a4ulsu.rs:20:5\n   |\n8  | fn\
    \ derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                           \
    \       ---------- expected `Vec<isize>` because of return type\n...\n20 |   \
    \  res\n   |     ^^^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    x.iter().cloned().zip(derivative_iter(xs).cloned()).collect()\n\
    }\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n --> /tmp/tmpf77hmivi.rs:9:5\n\
    \  |\n9 |     x.iter().cloned().zip(derivative_iter(xs).cloned()).collect()\n\
    \  |     ^ help: a local variable with a similar name exists: `xs`\n\nerror[E0425]:\
    \ cannot find function `derivative_iter` in this scope\n --> /tmp/tmpf77hmivi.rs:9:27\n\
    \  |\n9 |     x.iter().cloned().zip(derivative_iter(xs).cloned()).collect()\n\
    \  |                           ^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    derivative_with_diff(xs.clone(),\
    \ vec![])\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `derivative_with_diff` in this scope\n\
    \ --> /tmp/tmpl_3jhvug.rs:9:5\n  |\n9 |     derivative_with_diff(xs.clone(), vec![])\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 0 {\n        vec![]\n    } else {\n        let mut curr = vec![0];\n\
    \        for i in xs.iter().rev() {\n            let mut f = 1;\n            for\
    \ j in 0..i {\n                f *= j;\n            }\n            curr += f *\
    \ vec![i];\n        }\n        return curr\n    }\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp13rpvrcu.rs:15:25\n   |\n\
    15 |             for j in 0..i {\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \           for j in 0..*i {\n   |                         +\n\nerror[E0277]:\
    \ cannot multiply `{integer}` by `Vec<&isize>`\n  --> /tmp/tmp13rpvrcu.rs:18:23\n\
    \   |\n18 |             curr += f * vec![i];\n   |                       ^ no\
    \ implementation for `{integer} * Vec<&isize>`\n   |\n   = help: the trait `Mul<Vec<&isize>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0368]: binary assignment operation `+=` cannot\
    \ be applied to type `Vec<{integer}>`\n  --> /tmp/tmp13rpvrcu.rs:18:13\n   |\n\
    18 |             curr += f * vec![i];\n   |             ----^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    fn\
    \ differentiate<F>(f: F) -> F\n        where F: FnMut(isize, isize) -> isize,\n\
    \    {\n        let mut ret: Vec<isize> = xs.clone();\n        ret[0] = f(ret[0],\
    \ ret[1]);\n        for &x in ret[2..] {\n            ret[0] += f(ret[0], x);\n\
    \        }\n        ret\n    }\n\n    differentiate(|x1, x2| x1 * x2)\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmp_yus8srb.rs:12:35\n\
    \   |\n12 |         let mut ret: Vec<isize> = xs.clone();\n   |              \
    \                     ^^\n   |\n   = help: use the `|| { ... }` closure form instead\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_yus8srb.rs:20:19\n   |\n20 |\
    \     differentiate(|x1, x2| x1 * x2)\n   |                   ^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found closure\n   |\n   = note: expected struct `Vec<isize>`\n\
    \             found closure `[closure@/tmp/tmp_yus8srb.rs:20:19: 20:35]`\n\nerror[E0277]:\
    \ expected a `FnMut<(isize, isize)>` closure, found `Vec<isize>`\n  --> /tmp/tmp_yus8srb.rs:20:5\n\
    \   |\n20 |     differentiate(|x1, x2| x1 * x2)\n   |     ^^^^^^^^^^^^^ expected\
    \ an `FnMut<(isize, isize)>` closure, found `Vec<isize>`\n   |\n   = help: the\
    \ trait `FnMut<(isize, isize)>` is not implemented for `Vec<isize>`\nnote: required\
    \ by a bound in `differentiate`\n  --> /tmp/tmp_yus8srb.rs:10:18\n   |\n9  | \
    \    fn differentiate<F>(f: F) -> F\n   |        ------------- required by a bound\
    \ in this\n10 |         where F: FnMut(isize, isize) -> isize,\n   |         \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `differentiate`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmp_yus8srb.rs:14:19\n   |\n14 |         for &x in ret[2..]\
    \ {\n   |                   ^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n14 |         for &x in &ret[2..]\
    \ {\n   |                   +\n14 |         for &x in &mut ret[2..] {\n   |  \
    \                 ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmp_yus8srb.rs:14:19\n\
    \   |\n14 |         for &x in ret[2..] {\n   |                   ^^^^^^^^ expected\
    \ an implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n   = note: "
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ds: Vec<isize> = xs.clone();\n    if xs.len() < 2 {\n        return vec![];\n\
    \    }\n    if xs.len() == 2 {\n        ds.push(xs[1]);\n        return ds;\n\
    \    }\n    let mut dx: isize = 0;\n    while dx != 2 {\n        if dx >= xs.len()\
    \ {\n            return vec![];\n        }\n        dx = 2;\n        let mut dy\
    \ = 0;\n        while dy != 2 {\n            dx = dx * 2;\n            dy = dy\
    \ + 1;\n            if dx >= xs.len() {\n                return vec![];\n    \
    \        }\n        }\n        dx.push(dx);\n        ds = ds.reverse().to_vec();\n\
    \    }\n    ds\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb0_45tqy.rs:19:18\n   |\n\
    19 |         if dx >= xs.len() {\n   |                  ^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |         if dx >= xs.len().try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb0_45tqy.rs:27:22\n   |\n27 |             if dx >= xs.len()\
    \ {\n   |                      ^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n27 |             if dx >= xs.len().try_into().unwrap() {\n\
    \   |                              ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `push` found for type `isize` in the current scope\n  --> /tmp/tmpb0_45tqy.rs:31:12\n\
    \   |\n31 |         dx.push(dx);\n   |            ^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `to_vec` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpb0_45tqy.rs:32:27\n   |\n32 |         ds = ds.reverse().to_vec();\n\
    \   |                           ^^^^^^ method not found in `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() < 2 {\n        vec![0]\n    } else {\n        vec![xs[1] + xs[2] *\
    \ xs[0] + xs[3] * xs[0] * xs[1]]\n            .iter()\n            .cloned()\n\
    \            .skip(2)\n            .collect::<Vec<_>>()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4,\
    \ 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
    \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpniyznp_v.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut y = vec![];\n    y.push(1);\n    let mut x = 1;\n    for _ in 0..(xs.len()\
    \ - 1) {\n        y.push(y[1]*x + xs.len());\n        x = x * xs.len() - 1;\n\
    \    }\n    y\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp39d8xxky.rs:16:5\n   |\n\
    8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                     \
    \             ---------- expected `Vec<isize>` because of return type\n...\n16\
    \ |     y\n   |     ^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ n = xs.len();\n    if n < 2 {\n        return vec![];\n    }\n    let mut p\
    \ = vec![0.0; n];\n    p[0] = (*xs)[1];\n    for &n in xs.iter().skip(1) {\n \
    \       p[n] = (&p[n-1] - &p[n-2])*x;\n    }\n    p\n}\n\nfn main() {\n    let\
    \ candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1,\
    \ 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `x` in this scope\n  --> /tmp/tmp84qti0kf.rs:16:36\n\
    \   |\n16 |         p[n] = (&p[n-1] - &p[n-2])*x;\n   |                      \
    \              ^ help: a local variable with a similar name exists: `n`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp84qti0kf.rs:14:12\n   |\n14 |     p[0] = (*xs)[1];\n\
    \   |     ----   ^^^^^^^^ expected floating-point number, found `isize`\n   |\
    \     |\n   |     expected due to the type of this binding\n\nerror[E0277]: the\
    \ type `[{float}]` cannot be indexed by `isize`\n  --> /tmp/tmp84qti0kf.rs:16:9\n\
    \   |\n16 |         p[n] = (&p[n-1] - &p[n-2])*x;\n   |         ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{float}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{float}>`\n\nerror[E0277]: the type `[{float}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp84qti0kf.rs:16:18\n   |\n16 |         p[n]\
    \ = (&p[n-1] - &p[n-2])*x;\n   |                  ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{float}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{float}>`\n\nerror[E0277]: the type `[{float}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp84qti0kf.rs:16:28\n   |\n16 |         p[n]\
    \ = (&p[n-1] - &p[n-2])*x;\n   |                            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{float}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{float}>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84qti0kf.rs:18:5\n\
    \   |\n8  | fn derivative(xs: Vec<isize>) -> Vec<isize> {\n   |              \
    \                    ---------- expected "
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut ys = Vec::new();\n    ys.push(xs.len() - 1);\n    for i in 1..(xs.len()\
    \ - 1) {\n        ys.push(xs[i] * xs[i - 1]);\n    }\n    ys\n}\n\nfn main() {\n\
    \    let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6po45s7.rs:12:17\n   |\n\
    12 |         ys.push(xs[i] * xs[i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |         ys.push((xs[i]\
    \ * xs[i - 1]).try_into().unwrap());\n   |                 +                 +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpe6po45s7.rs:14:5\n   |\n8  | fn\
    \ derivative(xs: Vec<isize>) -> Vec<isize> {\n   |                           \
    \       ---------- expected `Vec<isize>` because of return type\n...\n14 |   \
    \  ys\n   |     ^^ expected `isize`, found `usize`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ >= 1);\n    let mut n = xs.len();\n    vec![1.0, xs.iter().rev().fold(0.0, |acc,\
    \ x| acc + x * x).unwrap_or(0)]\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi7jnp5bk.rs:11:10\n   |\n\
    11 |     vec![1.0, xs.iter().rev().fold(0.0, |acc, x| acc + x * x).unwrap_or(0)]\n\
    \   |          ^^^ expected `isize`, found floating-point number\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpi7jnp5bk.rs:11:54\n   |\n11 |\
    \     vec![1.0, xs.iter().rev().fold(0.0, |acc, x| acc + x * x).unwrap_or(0)]\n\
    \   |                                                      ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0599]: no method named `unwrap_or` found for type `{float}`\
    \ in the current scope\n  --> /tmp/tmpi7jnp5bk.rs:11:63\n   |\n11 |     vec![1.0,\
    \ xs.iter().rev().fold(0.0, |acc, x| acc + x * x).unwrap_or(0)]\n   |        \
    \                                                       ^^^^^^^^^ method not found\
    \ in `{float}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut res = Vec::new();\n    for &x in xs.iter().rev() {\n        if x == 0 {\n\
    \            break;\n        }\n        res.push((*x).clone());\n        res.push((*x)\
    \ * (*x).clone());\n    }\n    res\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpn9dyqleb.rs:14:18\n\
    \   |\n14 |         res.push((*x).clone());\n   |                  ^^^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpn9dyqleb.rs:15:18\n   |\n\
    15 |         res.push((*x) * (*x).clone());\n   |                  ^^^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpn9dyqleb.rs:15:25\n   |\n\
    15 |         res.push((*x) * (*x).clone());\n   |                         ^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() <= 1 {\n        return vec![xs.last().clone() as isize];\n    }\n \
    \   let mut ys = vec![];\n    for x in xs {\n        let mut xx = x;\n       \
    \ while xx < xs.len() {\n            ys.append(xs.last() / xs.last().clone());\n\
    \            xx += 1;\n        }\n    }\n    ys\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplmkgmxnb.rs:15:20\n   |\n\
    15 |         while xx < xs.len() {\n   |                    ^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |         while xx <\
    \ xs.len().try_into().unwrap() {\n   |                            ++++++++++++++++++++\n\
    \nerror[E0369]: cannot divide `Option<&isize>` by `Option<&isize>`\n  --> /tmp/tmplmkgmxnb.rs:16:33\n\
    \   |\n16 |             ys.append(xs.last() / xs.last().clone());\n   |      \
    \                 --------- ^ ----------------- Option<&isize>\n   |         \
    \              |\n   |                       Option<&isize>\n\nerror[E0605]: non-primitive\
    \ cast: `Option<&isize>` as `isize`\n  --> /tmp/tmplmkgmxnb.rs:10:21\n   |\n10\
    \ |         return vec![xs.last().clone() as isize];\n   |                   \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369,\
    \ E0605.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        vec![0]\n    } else {\n        let mut ys = vec![xs[1..]];\n\
    \        ys.swap(1);\n        ys.clone_from_slice(ys.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \        ys.swap(1);\n        ys.into_iter().map(|x| x * (xs.len() - 1)) as Vec<_>\n\
    \    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n   --> /tmp/tmpiksjiuhg.rs:12:22\n    |\n12  |         let\
    \ mut ys = vec![xs[1..]];\n    |                      ^^^^^^^^^^^^^ doesn't have\
    \ a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `[isize]`\nnote: required by a bound in `slice::<impl [T]>::into_vec`\n\
    \    = note: this error originates in the macro `vec` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0277]: the size for values\
    \ of type `[isize]` cannot be known at compilation time\n  --> /tmp/tmpiksjiuhg.rs:12:22\n\
    \   |\n12 |         let mut ys = vec![xs[1..]];\n   |                      ^^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `[isize]`\n   = note: slice and array elements must have\
    \ `Sized` type\n   = note: this error originates in the macro `vec` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]: the size\
    \ for values of type `[isize]` cannot be known at compilation time\n   --> /tmp/tmpiksjiuhg.rs:12:22\n\
    \    |\n12  |         let mut ys = vec![xs[1..]];\n    |                     \
    \ ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help:\
    \ the trait `Sized` is not implemented for `[isize]`\nnote: required by a bound\
    \ in `Vec`\n    = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named\
    \ `swap` found for struct `Vec` in the current scope\n  --> /tmp/tmpiksjiuhg.rs:13:12\n\
    \   |\n13 |         ys.swap(1);\n   |            ^^^^ method not found in `Vec<[isize]>`\n\
    \nerror[E0599]: no method named `clone_from_slice` found for struct `Vec` in the\
    \ current scope\n  --> /tmp/tmpiksjiuhg.rs:14:12\n   |\n14 |         ys.clone_from_slice(ys.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \   |            ^^^^^^^^^^^^^^^^ method not found in `Vec<[isize]>`\n\nerror[E0599]:\
    \ no method named `iter` found for struct `Vec` in the current scope\n  --> /tmp/tmpiksjiuhg.rs:"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        vec![xs[0]]\n    } else {\n        let mut s = xs[1..xs.len()];\n\
    \        let mut x2 = vec![s.last() + s.last().abs() - s.last().abs() * s[0]];\n\
    \        x2.iter_mut().cloned().for_each(|&x| x *= x);\n        x2.into_iter().collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpk7z1xyzh.rs:12:13\n   |\n12 |         let mut\
    \ s = xs[1..xs.len()];\n   |             ^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n   = note:\
    \ all local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n   |\n12 |\
    \         let mut s = &xs[1..xs.len()];\n   |                     +\n\nerror[E0599]:\
    \ no method named `abs` found for enum `Option` in the current scope\n  --> /tmp/tmpk7z1xyzh.rs:13:47\n\
    \   |\n13 |         let mut x2 = vec![s.last() + s.last().abs() - s.last().abs()\
    \ * s[0]];\n   |                                               ^^^ method not\
    \ found in `Option<&isize>`\n\nerror[E0599]: no method named `abs` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmpk7z1xyzh.rs:13:64\n   |\n13 | \
    \        let mut x2 = vec![s.last() + s.last().abs() - s.last().abs() * s[0]];\n\
    \   |                                                                ^^^ method\
    \ not found in `Option<&isize>`\n\nerror[E0271]: type mismatch resolving `<std::slice::IterMut<'_,\
    \ _> as Iterator>::Item == &_`\n    --> /tmp/tmpk7z1xyzh.rs:14:23\n     |\n14\
    \   |         x2.iter_mut().cloned().for_each(|&x| x *= x);\n     |          \
    \             ^^^^^^ types differ in mutability\n     |\n     = note:      expected\
    \ reference `&_`\n             found mutable reference `&mut _`\nnote: required\
    \ by a bound in `cloned`\n\nerror[E0599]: the method `for_each` exists for struct\
    \ `Cloned<std::slice::IterMut<'_, _>>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpk7z1xyzh.rs:14:32\n    |\n14  |           x2.iter_mut().cloned().for_each(|&x|\
    \ x *= x);\n    |                                  ^^^^^^^^ method cannot be called\
    \ on `Cloned<std::slice::IterMut<'_, _>>` due to unsatisfied trait bounds\n  \
    \  |\n    = note: the following trait bounds were not satisfied:\n           \
    \ `<std::slice::IterMut<'_, _> as Iterator>::Item = &_`\n            wh"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = vec![0; xs.len()];\n    for i in 0..xs.len() - 1 {\n        result[i]\
    \ = xs[i + 1];\n    }\n    result\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 0]`,\n right: `[1, 4, 12, 20]`', /tmp/tmpucuzjot_.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut d = xs.clone();\n    let mut c = 0;\n    for i in d.iter_mut().rev() {\n\
    \        *i = *i + c * i;\n        c += 1;\n    }\n    d\n}\n\nfn main() {\n \
    \   let candidate = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{integer}` by `&mut isize`\n  --> /tmp/tmp37gut7gx.rs:12:21\n\
    \   |\n12 |         *i = *i + c * i;\n   |                     ^ no implementation\
    \ for `{integer} * &mut isize`\n   |\n   = help: the trait `Mul<&mut isize>` is\
    \ not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    if\
    \ xs.len() == 1 {\n        vec![xs[0]]\n    } else {\n        vec![xs[0] + derivative(xs[1..xs.len()]).iter().sum(),\
    \ xs[0..1].iter().sum()]\n    }\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdj7qlk_l.rs:12:33\n   |\n\
    12 |         vec![xs[0] + derivative(xs[1..xs.len()]).iter().sum(), xs[0..1].iter().sum()]\n\
    \   |                                 ^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_vec()`\n   |                                 |\n   |          \
    \                       expected struct `Vec`, found slice `[isize]`\n   |\n \
    \  = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut result = Vec::new();\n    for x in xs.iter() {\n        result.push(1);\n\
    \        result.push(2 * x);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = derivative;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12,\
    \ 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2,\
    \ 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 6, 1, 2, 1, 4, 1, 8, 1, 10]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp6exm2fr8.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    assert!(xs.len()\
    \ == 2, \"derivative function require vector of length two\")\n    let mut deriv\
    \ = xs.clone();\n    let mut c = 0;\n    deriv[0] -= 1;\n    for val in deriv.iter().skip(1)\
    \ {\n        c += val;\n        deriv[0] -= val * c\n    }\n    deriv\n}\n\nfn\
    \ main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
    \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj9cppcrs.rs:9:79\n\
    \   |\n9  |     assert!(xs.len() == 2, \"derivative function require vector of\
    \ length two\")\n   |                                                        \
    \                       ^ help: add `;` here\n10 |     let mut deriv = xs.clone();\n\
    \   |     --- unexpected token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 101
  program: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
    /// >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
    \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n    let\
    \ mut d = Vec::new();\n\n    for x in xs.iter().rev() {\n        d.push(-x * (xs[2]\
    \ - xs[1]));\n    }\n\n    d\n}\n\nfn main() {\n    let candidate = derivative;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), vec![2, 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n\
    \    assert_eq!(candidate(vec![3, 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-5, -4, -2, -1, -3]`,\n right: `[1, 4, 12, 20]`', /tmp/tmp4i6kf7m1.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976114
