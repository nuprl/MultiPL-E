language: rs
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib(i: isize) -> isize\
    \ {\n        if i < 0 {\n            0\n        } else if i == 0 {\n         \
    \   1\n        } else {\n            fib(i-1) + fib(i-2) + fib(i-3)\n        }\n\
    \    }\n\n    fib(n).0\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `isize` is a primitive type and therefore doesn't have fields\n\
    \  --> /tmp/tmp3imj_i2q.rs:24:12\n   |\n24 |     fib(n).0\n   |            ^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0610`.\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ n;\n    }\n    let mut f1 = fibfib(n - 1);\n    let mut f2 = fibfib(n - 2);\n\
    \    (f1, f2) = (f1 + f2, f1 + f2 + f1);\n    return f2;\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpfgloqhng.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 {\n        return\
    \ 1;\n    }\n    let (mut a, mut b) = (0, 0);\n    for i in 1..n {\n        (a,\
    \ b) = (b, a + b);\n    }\n    a\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpo6roakqy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n\n    let\
    \ left_sum = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    let right_sum = left_sum\
    \ + fibfib(n-2);\n\n    left_sum + right_sum\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcq8c1yiq.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut f1 = 1;\n   \
    \ let mut f2 = 1;\n    let mut f3 = 1;\n    for i in (0..n).rev() {\n        let\
    \ tmp = f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = tmp;\n    }\n  \
    \  f1\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpibwmqb3i.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    debug_assert_eq!(n, 0);\n\
    \    0\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `0`', /tmp/tmpd64fh74g.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    if n ==\
    \ 2 {\n        return 1;\n    }\n\n    let mut ret: isize = fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n    ret\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    debug_assert!(n < 3);\n\
    \    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n\
    \    }\n    if n == 2 {\n        return 1;\n    }\n\n    let x = fibfib(n - 1);\n\
    \    let y = fibfib(n - 2);\n    let z = fibfib(n - 3);\n    (x + y + z).into()\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n < 3'', /tmp/tmploz3hqyi.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpf4ysxea9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 1;\n    let\
    \ mut b = 1;\n\n    if n < 3 { 1 }\n    else {\n        for i in 0..n {\n    \
    \        let c = a + b;\n            a = b;\n            b = c;\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi10qrd1a.rs:19:9\n   |\n\
    13 |   fn fibfib(n: isize) -> isize {\n   |                          ----- expected\
    \ `isize` because of return type\n...\n19 | /         for i in 0..n {\n20 | |\
    \             let c = a + b;\n21 | |             a = b;\n22 | |             b\
    \ = c;\n23 | |         }\n   | |_________^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        0\n\
    \    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpyf_ineek.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpf4ysxea9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::mem::transmute;\n\
    \    let mut s = 1;\n    for i in 1..n {\n        s *= i;\n    }\n    transmute::<isize,\
    \ usize>(s).unwrap()\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmp0zk5vicd.rs:19:34\n   |\n19 |     transmute::<isize, usize>(s).unwrap()\n\
    \   |                                  ^^^^^^ method not found in `usize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 3 {\n       \
    \ return 0;\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjjdrj3ls.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 0;\n    for i in 0..n {\n        a = a + b;\n        b = a;\n    }\n\
    \    return a;\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0zdd5dae.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppp4cfzc4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // Your code here\n \
    \   if n <= 3 {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut\
    \ nxt = n - 1;\n    let mut i = 1;\n\n    while nxt > 0 {\n        sum += i;\n\
    \        i += 2;\n        nxt -= 3;\n    }\n\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpb_phvg6u.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    let new_num\
    \ = n - 2\n    return fibfib(new_num) + fibfib(new_num - 1) + fibfib(new_num -\
    \ 2)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmpqo9e_lt9.rs:26:24\n\
    \   |\n26 |     let new_num = n - 2\n   |                        ^ help: add `;`\
    \ here\n27 |     return fibfib(new_num) + fibfib(new_num - 1) + fibfib(new_num\
    \ - 2)\n   |     ------ unexpected token\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut result = 1;\n\
    \n    for _ in 0..n {\n        result = result + result;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp7z29j_o6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1;\n    }\n    let a\
    \ = fibfib(n - 1);\n    let b = fibfib(n - 2);\n    let c = fibfib(n - 3);\n \
    \   a + b + c\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<_> =\
    \ vec![1, 1, 2];\n\n    for _ in 0..n {\n        fib.push(fib[fib.len() - 1] +\
    \ fib[fib.len() - 2] + fib[fib.len() - 3]);\n    }\n\n    fib[n - 1]\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpqod4e0gc.rs:20:5\n   |\n20 |     fib[n - 1]\n   |     ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 { return 0;\
    \ }\n    let mut fibfib: isize = 0;\n    for i in 1..n {\n        fibfib = fibfib\
    \ + i;\n    }\n    return fibfib;\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpiys_lc57.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // Please use the for\
    \ loop to compute the value of the Fibbonacci number sequence at index 'n' above.\n\
    \    let mut fibfib: [isize; 3] = [0, 0 as isize, 1];\n    for i in 0..n {\n \
    \       fibfib[2] += fibfib[1];\n        fibfib[1] += fibfib[0];\n        fibfib[0]\
    \ += fibfib[2];\n    }\n    return fibfib[n];\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp21z88qz5.rs:21:12\n\
    \   |\n21 |     return fibfib[n];\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[isize]`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 1;\n    let\
    \ mut b = 1;\n    let mut c = 1;\n    for i in 0..n {\n        (c, a, b, a) =\
    \ a + b + c, a, b, c;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, `}`, or an\
    \ operator, found `,`\n  --> /tmp/tmpqyvkoxpc.rs:18:33\n   |\n18 |         (c,\
    \ a, b, a) = a + b + c, a, b, c;\n   |                                 ^ expected\
    \ one of 9 possible tokens\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    let mut fib: Vec<isize> = Vec::new();\n    fib.push(0);\n\
    \    fib.push(1);\n    fib.push(1);\n    for n in 1..n {\n        let mut f2 =\
    \ fib.iter().cloned().skip(2).fold(fib.iter().cloned(), |mut acc, i| {\n     \
    \       acc.push((*acc.last().unwrap() + fib.last().unwrap()) + fib.last().unwrap()\
    \ + i.unwrap());\n            acc\n        });\n        fib = f2;\n    }\n   \
    \ fib[n - 1]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for struct `Cloned` in the current\
    \ scope\n  --> /tmp/tmp3ummxuln.rs:23:17\n   |\n23 |             acc.push((*acc.last().unwrap()\
    \ + fib.last().unwrap()) + fib.last().unwrap() + i.unwrap());\n   |          \
    \       ^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmp3ummxuln.rs:23:23\n   |\n\
    23 |             acc.push((*acc.last().unwrap() + fib.last().unwrap()) + fib.last().unwrap()\
    \ + i.unwrap());\n   |                       ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp3ummxuln.rs:23:93\n   |\n23 |             acc.push((*acc.last().unwrap()\
    \ + fib.last().unwrap()) + fib.last().unwrap() + i.unwrap());\n   |          \
    \                                                                            \
    \       ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3ummxuln.rs:26:15\n   |\n17 |     let mut fib: Vec<isize> = Vec::new();\n\
    \   |                  ---------- expected due to this type\n...\n26 |       \
    \  fib = f2;\n   |               ^^ expected struct `Vec`, found struct `Cloned`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp3ummxuln.rs:28:5\n   |\n28 |     fib[n - 1]\n   |     ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<_> =\
    \ (0..n).collect();\n    let mut f: &'static [u8] = fib;\n    let mut i: usize\
    \ = 1;\n    while *f == *fib.last().unwrap() {\n        i += 1;\n        fib.push(fibfib(i\
    \ + 1) + fibfib(i + 2));\n        f += 2;\n    }\n    *f = *fib.last().unwrap();\n\
    \    i as isize\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpigmyx4t6.rs:15:32\n   |\n\
    15 |     let mut f: &'static [u8] = fib;\n   |                -------------  \
    \ ^^^ expected `&[u8]`, found struct `Vec`\n   |                |\n   |      \
    \          expected due to this\n   |\n   = note: expected reference `&'static\
    \ [u8]`\n                 found struct `Vec<isize>`\n\nerror[E0277]: can't compare\
    \ `[u8]` with `isize`\n  --> /tmp/tmpigmyx4t6.rs:17:14\n   |\n17 |     while *f\
    \ == *fib.last().unwrap() {\n   |              ^^ no implementation for `[u8]\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `[u8]`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&[B] as PartialEq<[A; N]>>\n             <&[T] as PartialEq<Vec<U,\
    \ A>>>\n             <&mut [B] as PartialEq<[A; N]>>\n             <&mut [T] as\
    \ PartialEq<Vec<U, A>>>\n             <[A; N] as PartialEq<&[B]>>\n          \
    \   <[A; N] as PartialEq<&mut [B]>>\n             <[A; N] as PartialEq<[B; N]>>\n\
    \             <[A; N] as PartialEq<[B]>>\n           and 3 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpigmyx4t6.rs:19:25\n   |\n19 |         fib.push(fibfib(i\
    \ + 1) + fibfib(i + 2));\n   |                         ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |         fib.push(fibfib((i +\
    \ 1).try_into().unwrap()) + fibfib(i + 2));\n   |                         +  \
    \   +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpigmyx4t6.rs:19:41\n\
    \   |\n19 |         fib.push(fibfib(i + 1) + fibfib(i + 2));\n   |           \
    \                              ^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |         fib.push(fibfib(i + 1) + fibfib((i + 2).try_into().unwrap()));\n\
    \   |                                         +     +++++++++++++++++++++\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `&'static\
    \ [u8]`\n  --> /tmp/tmpigmyx4t6.rs:20:"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n == 2 {\n\
    \        return 2;\n    }\n\n    let n_fib = fibfib(n-1);\n    let n_fib_2 = fibfib(n-2);\n\
    \    let n_fib_3 = fibfib(n-3);\n    return n_fib_3 + n_fib_2 + n_fib;\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpp9bywf8p.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    assert!(n >= 0);\n  \
    \  assert!(n <= 255);\n    if n == 0 {\n        return 0;\n    }\n    let mut\
    \ fibfib1 = fibfib(n-1);\n    let mut fibfib2 = fibfib(n-2);\n    let mut fibfib3\
    \ = fibfib(n-3);\n    fibfib3 += fibfib1 + fibfib2;\n    return fibfib3;\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n >= 0'', /tmp/tmpfolfp5ze.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut sum = 0;\n  \
    \  for i in 0..n {\n        sum += fib(i);\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpdc018z06.rs:16:16\n\
    \   |\n16 |         sum += fib(i);\n   |                ^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976537
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib_fib(fibfib: isize,\
    \ index: isize) -> isize {\n        if index == 0 {\n            return 0\n  \
    \      }\n        fib_fib(fibfib, index - 1) + fib_fib(fibfib, index - 2) + fib_fib(fibfib,\
    \ index - 3)\n    }\n    fib_fib(n, 3)\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\n\
    \            \"fibfib({:?}) >= 0 is not allowed\",\n            n\n        );\n\
    \    }\n\n    fn fibfib(n: isize) -> isize {\n        if n < 3 {\n           \
    \ 0\n        } else {\n            1 + fibfib(n-3)\n        }\n    }\n\n    fibfib(n)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8zrp8nos.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 { return 0 }\n\
    \    if n == 0 { return 1 }\n    if n == 1 { return 0 }\n    fibfib(n-1) + fibfib(n-2)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp13u_f70c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    let result\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    println!(\"fibfib {}\", result);\n\
    \    result\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    n must be non-negative\");\n    }\n    let mut fibfib: isize = 0;\n    for _ in\
    \ 0..n {\n        fibfib = fibfib + 1;\n    }\n    fibfib\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpss1a9sym.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0i32;\
    \ 10];\n    fibffib(&mut fibfib, n);\n    fibfib[n as usize]\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibffib` in this scope\n  --> /tmp/tmpe30rfpz9.rs:15:5\n\
    \   |\n15 |     fibffib(&mut fibfib, n);\n   |     ^^^^^^^ help: a local variable\
    \ with a similar name exists: `fibfib`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpe30rfpz9.rs:16:5\n   |\n13 | fn fibfib(n: isize) -> isize {\n   |  \
    \                      ----- expected `isize` because of return type\n...\n16\
    \ |     fibfib[n as usize]\n   |     ^^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `i32`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::{max, Ordering};\n\
    \    use std::mem::replace;\n\n    let mut f: Vec<isize> = vec![0; n + 1];\n \
    \   f[0] = 0;\n    f[1] = 0;\n    f[2] = 1;\n    for _ in 0..(n - 1) {\n     \
    \   let a = replace(&mut f, 1, f.pop() + f.pop() + f.pop());\n        f[1] = a;\n\
    \    }\n    f[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "warning: unused imports: `Ordering`, `max`\n  --> /tmp/tmpeb0niihm.rs:14:20\n\
    \   |\n14 |     use std::cmp::{max, Ordering};\n   |                    ^^^  ^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeb0niihm.rs:17:37\n   |\n17 |     let mut f: Vec<isize>\
    \ = vec![0; n + 1];\n   |                                     ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |     let mut f: Vec<isize> = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                                     +  \
    \   +++++++++++++++++++++\n\nerror[E0369]: cannot add `Option<isize>` to `Option<isize>`\n\
    \  --> /tmp/tmpeb0niihm.rs:22:44\n   |\n22 |         let a = replace(&mut f, 1,\
    \ f.pop() + f.pop() + f.pop());\n   |                                    -------\
    \ ^ ------- Option<isize>\n   |                                    |\n   |   \
    \                                 Option<isize>\n\nerror[E0061]: this function\
    \ takes 2 arguments but 3 arguments were supplied\n   --> /tmp/tmpeb0niihm.rs:22:17\n\
    \    |\n22  |         let a = replace(&mut f, 1, f.pop() + f.pop() + f.pop());\n\
    \    |                 ^^^^^^^ ------  -  --------------------------- supplied\
    \ 3 arguments\n    |                 |\n    |                 expected 2 arguments\n\
    \    |\nnote: function defined here\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpeb0niihm.rs:25:5\n   |\n25 |     f[n]\n\
    \   |     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have\
    \ detailed explanations: E0061, E0277, E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        1\
    \ => 0,\n        2 => 1,\n        n => fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: isize =\
    \ 0;\n    while n > 0 {\n        fib = fib + n + 1;\n        n -= 1;\n    }\n\
    \    fib\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1bun6duj.rs:17:9\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n17 |         n -= 1;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::iter;\n    (1..n).fold(0,\
    \ |sum, cur| {\n        iter::repeat(cur).take(cur).fold(sum + cur, |x, y| x +\
    \ y)\n    })\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppflyok4m.rs:16:32\n   |\n\
    16 |         iter::repeat(cur).take(cur).fold(sum + cur, |x, y| x + y)\n   | \
    \                               ^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |         iter::repeat(cur).take(cur.try_into().unwrap()).fold(sum\
    \ + cur, |x, y| x + y)\n   |                                   ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib({}) isn't allowed\", n)\n    }\n    if n == 0 {\n        return 0;\n  \
    \  }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 1;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_recursive(n, 0)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_recursive` in this scope\n \
    \ --> /tmp/tmpf5_oty2q.rs:14:5\n   |\n14 |     fibfib_recursive(n, 0)\n   |  \
    \   ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ return n\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpwizhqr66.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0isize;\
    \ n + 1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    for i in 2..n+1 {\n   \
    \     fibfib[i] = fibfib[i-1] + fibfib[i-2];\n    }\n    fibfib[n]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp27vr2w_t.rs:14:31\n   |\n13 | fn fibfib(n: isize) -> isize {\n   | \
    \          - this would need to be a `const`\n14 |     let mut fibfib = [0isize;\
    \ n + 1];\n   |                               ^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: Vec<_>\
    \ = vec![];\n    fibbonaci(&mut fibfib, n).0;\n    fibfib.iter()\n        .cloned()\n\
    \        .map(|x| x * x)\n        .sum()\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibbonaci` in this scope\n  --> /tmp/tmpjaq4pddj.rs:15:5\n\
    \   |\n15 |     fibbonaci(&mut fibfib, n).0;\n   |     ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else {\n        fibfib(n-2) + fibfib(n-1) + fibfib(n)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 1 {\n        return\
    \ 0\n    }\n\n    let mut fib: Vec<isize> = vec![];\n    fib.push(0);\n\n    for\
    \ i in 1..n {\n        fib.push(fib[i-1] + fib[i-2] + fib[i-3]);\n    }\n\n  \
    \  fib.last()\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnaaad94z.rs:22:18\n\
    \   |\n22 |         fib.push(fib[i-1] + fib[i-2] + fib[i-3]);\n   |          \
    \        ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnaaad94z.rs:22:29\n\
    \   |\n22 |         fib.push(fib[i-1] + fib[i-2] + fib[i-3]);\n   |          \
    \                   ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnaaad94z.rs:22:40\n\
    \   |\n22 |         fib.push(fib[i-1] + fib[i-2] + fib[i-3]);\n   |          \
    \                              ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnaaad94z.rs:25:5\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |                        -----\
    \ expected `isize` because of return type\n...\n25 |     fib.last()\n   |    \
    \ ^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<&isize>`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => {\n            let a =\
    \ fibfib(n-1);\n            let b = fibfib(n-2);\n            let c = fibfib(n-3);\n\
    \            a + b + c\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 3 {\n       \
    \ return 0;\n    }\n\n    let mut f1 = fibfib(n-1);\n    let mut f2 = fibfib(n-2);\n\
    \    let mut f3 = fibfib(n-3);\n\n    f1 += f2 + f3;\n    f2 *= f2;\n    f3 *=\
    \ f3;\n\n    return f1 + f3;\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp912vqb_f.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib: negative number\");\n    }\n    if n == 0 {\n        return 0;\n    }\n\
    \    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 1;\n\
    \    }\n    let mut result = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    println!(\"\
    fibfib{}\", result);\n    return result;\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: 'fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib24

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib24

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib44

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib24

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib81

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib24

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib44

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib24

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib81

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib13

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib1

    fibfib2

    fibfib1

    fibfib7

    fibfib1

    fibfib2

    fibfib1

    fibfib4

    fibfib24

    fibfib1

    fibf'
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibbonacci =\
    \ vec![0; n + 1];\n\n    fibbonacci[0] = 0;\n\n    for index in range(1, n + 1)\
    \ {\n        fibbonacci[index] = fibbonacci[index - 1] + fibbonacci[index - 2];\n\
    \    }\n\n    fibbonacci[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n \
    \   assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmp14s1y945.rs:18:18\n\
    \   |\n18 |     for index in range(1, n + 1) {\n   |                  ^^^^^ not\
    \ found in this scope\n   |\nhelp: consider importing this function\n   |\n1 \
    \ | use std::slice::range;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp14s1y945.rs:14:34\n\
    \   |\n14 |     let mut fibbonacci = vec![0; n + 1];\n   |                   \
    \               ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    14 |     let mut fibbonacci = vec![0; (n + 1).try_into().unwrap()];\n   |    \
    \                              +     +++++++++++++++++++++\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp14s1y945.rs:22:5\n\
    \   |\n22 |     fibbonacci[n]\n   |     ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ 0\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdfb42td2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 { return n }\n\
    \    let mut fibfibs = [0, 1];\n    let mut prev_n = 0;\n    for i in 1..n {\n\
    \        prev_n = fibfibs[i - 1];\n        fibfibs.push(prev_n + prev_n + prev_n);\n\
    \    }\n    fibfibs[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp5jsn6a15.rs:18:18\n   |\n18 |         prev_n = fibfibs[i - 1];\n   |\
    \                  ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[{integer}]`\n\nerror[E0599]: no method named `push` found for array `[{integer};\
    \ 2]` in the current scope\n  --> /tmp/tmp5jsn6a15.rs:19:17\n   |\n19 |      \
    \   fibfibs.push(prev_n + prev_n + prev_n);\n   |                 ^^^^ method\
    \ not found in `[{integer}; 2]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5jsn6a15.rs:21:5\n   |\n21 |     fibfibs[n]\n\
    \   |     ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ return 0;\n    }\n    if n <= 3 {\n        return 1;\n    }\n\n    let n_2 =\
    \ n&3 as usize;\n    let n_1 = n - n_2;\n    let n_3 = n - n_2 - n_1;\n\n    fibfib(n_1)\
    \ + fibfib(n_2) + fibfib(n_3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8lsjcxwg.rs:21:17\n   |\n\
    21 |     let n_2 = n&3 as usize;\n   |                 ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: no implementation for `isize & usize`\n  -->\
    \ /tmp/tmp8lsjcxwg.rs:21:16\n   |\n21 |     let n_2 = n&3 as usize;\n   |    \
    \            ^ no implementation for `isize & usize`\n   |\n   = help: the trait\
    \ `BitAnd<usize>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `BitAnd<Rhs>`:\n             <&'a i128 as BitAnd<i128>>\n\
    \             <&'a i16 as BitAnd<i16>>\n             <&'a i32 as BitAnd<i32>>\n\
    \             <&'a i64 as BitAnd<i64>>\n             <&'a i8 as BitAnd<i8>>\n\
    \             <&'a isize as BitAnd<isize>>\n             <&'a u128 as BitAnd<u128>>\n\
    \             <&'a u16 as BitAnd<u16>>\n           and 40 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    let mut fib1 = fibfib(n-1);\n    let mut fib2 = fibfib(n-2);\n\
    \    let mut fib3 = fibfib(n-3);\n    fib3 = fib1 + fib2 + fib3;\n    fib1 +=\
    \ fib3;\n    fib2 += fib3;\n    return fib1;\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ 0\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdfb42td2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib: n should be non-negative\")\n    }\n    loop {\n        n -= 1;\n    \
    \    if n == 0 {\n            return 0;\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpqu_lyblo.rs:18:9\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n18 |         n -= 1;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n % 2 ==\
    \ 0 {\n        return fibfib(n - 1) + fibfib(n-2);\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-3) + fibfib(n-4);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp9kyptcpy.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ n\n    } else {\n        n + fibfib(n-1) + fibfib(n-2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjzqf5k3r.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 || n == 2 {\n        return 1;\n    }\n    let\
    \ mut f1 = 1;\n    let mut f2 = 1;\n    for i in 0..(n-2) {\n        let f3 =\
    \ f1 + f2;\n        f1 = f2;\n        f2 = f3;\n    }\n    let f3 = f1 + f2;\n\
    \    f1\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp41qfbyda.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    let mut i = 0;\n    while i < n {\n        fibfib = fibfib + i;\n\
    \        i = i + 1;\n    }\n    fibfib\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpmp6dz718.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0usize;\n\
    \    let mut b = 1usize;\n    let mut c = 0usize;\n    for _ in 0..n {\n     \
    \   c = a + b + c;\n        a = b;\n        b = c;\n    }\n    c\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphk2vvsgw.rs:22:5\n   |\n\
    13 | fn fibfib(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n22 |     c\n   |     ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n22 |     c.try_into().unwrap()\n \
    \  |      ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut n2 = n;\n   \
    \ n2 += 1;\n    if n2 == 0 { return 0; }\n    if n2 == 1 { return 1; }\n    let\
    \ mut n3 = n2;\n    n3 += 1;\n    if n3 == 0 { return 1; }\n    if n3 == 1 { return\
    \ 0; }\n    let mut n5 = n3;\n    n5 += 1;\n    if n5 == 0 { return 0; }\n   \
    \ if n5 == 1 { return 1; }\n    fibfib(n5) + fibfib(n3)\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n    if n >= 4 {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut result = 1;\n\
    \    if n > 3 {\n        for n in 1..n {\n            result *= n;\n         \
    \   result += 1;\n        }\n    }\n    result - 1\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmprb25o6rv.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n).fold(1, |sum,\
    \ el| sum + el + fib(el))\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpcnbqg_af.rs:14:41\n\
    \   |\n14 |     (1..n).fold(1, |sum, el| sum + el + fib(el))\n   |           \
    \                              ^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ 0\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdfb42td2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<_> =\
    \ (0..n).collect();\n    fib.push(1);\n    fib.push(2);\n    fib.push(1);\n  \
    \  fibfib_rec(&mut fib, 0, n).0\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_rec` in this scope\n  --> /tmp/tmpqxlwq058.rs:18:5\n\
    \   |\n18 |     fibfib_rec(&mut fib, 0, n).0\n   |     ^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut acc = 1;\n  \
    \  for i in 2..(n + 1) {\n        acc += i;\n    }\n    acc\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpclpgtpkx.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ 0\n    } else if n == 1 {\n        0\n    } else if n == 2 {\n        1\n  \
    \  } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ 0\n    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdfb42td2.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n\n    if n == 2 {\n        return 1;\n    }\n\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1x2e94b5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut a = 0;\n    let\
    \ mut b = 1;\n    for _ in 0..n {\n        (a, b) = (b, a+b);\n    }\n    a\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqbrkjjrg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::mem::replace;\n\
    \n    if n <= 2 {\n        0\n    } else if n <= 3 {\n        1\n    } else {\n\
    \        replace(0, 0, fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n    }\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n\
    \   --> /tmp/tmpj47qjcut.rs:21:9\n    |\n21  |         replace(0, 0, fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n    |         ^^^^^^^ -  -  ---------------------------------------\
    \ supplied 3 arguments\n    |         |\n    |         expected 2 arguments\n\
    \    |\nnote: function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 || n >= FIB_FIB_LIMIT\
    \ {\n        panic!(\"fibfib called with negative or out of bounds index: {}\"\
    , n)\n    }\n\n    if n == 0 {\n        return 0;\n    }\n\n    let mut current\
    \ = 1;\n    let mut sum = 0;\n    while current < n {\n        sum += current;\n\
    \        current += 2;\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `FIB_FIB_LIMIT` in this scope\n  --> /tmp/tmpxvcr69p7.rs:14:22\n\
    \   |\n14 |     if n < 0 || n >= FIB_FIB_LIMIT {\n   |                      ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match (n, 0) {\n    \
    \    (i, 0) => 0,\n        (i, _) => fibfib(i - 1) + fibfib(i - 2) + fibfib(i\
    \ - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmppo3isb6l.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib argument must be non-negative\");\n    }\n    if n < 2 {\n        return\
    \ n;\n    }\n    if n < 6 {\n        return 1;\n    }\n    if n < 13 {\n     \
    \   return 1;\n    }\n    if n < 26 {\n        return 2;\n    }\n    if n < 49\
    \ {\n        return 3;\n    }\n    if n < 100 {\n        return 4;\n    }\n  \
    \  if n < 130 {\n        return 5;\n    }\n    if n < 220 {\n        return 6;\n\
    \    }\n    if n < 340 {\n        return 7;\n    }\n    if n < 470 {\n       \
    \ return 8;\n    }\n    if n < 600 {\n        return 9;\n    }\n    if n < 780\
    \ {\n        return 10;\n    }\n    if n < 900 {\n        return 11;\n    }\n\
    \    if n < 1000 {\n        return 12;\n    }\n    if n < 1180 {\n        return\
    \ 13;\n    }\n    if n < 1380 {\n        return 14;\n    }\n    if n < 1600 {\n\
    \        return 15;\n    }\n    if n < 1950 {\n        return 16;\n    }\n   \
    \ if n < 2000 {\n        return 17;\n    }\n    if n < 2205 {\n        return\
    \ 18;\n    }\n    if n < 2650 {\n        return 19;\n    }\n    if n < 3000 {\n\
    \        return 20;\n    }\n    if n < 3650 {\n        return 21;\n    }\n   \
    \ if n < 4000 {\n        return 22;\n    }\n    if n < 4550 {\n        return\
    \ 23;\n    }\n    if n < 5000 {\n        return 24;\n    }\n    if n < 5500 {\n\
    \        return 25;\n    }\n    if n < 6000 {\n        return 26;\n    }\n   \
    \ if n < 6500 {\n        return 27;\n    }\n    if n < 7000 {\n        return\
    \ 28;\n    }\n    if n < 7500 {\n        return 29;\n    }\n    if n < 8000 {\n\
    \        return 30;\n    }\n    if n < 8500 {\n        return 31;\n    }\n   \
    \ if n < 9000 {\n        return 32;\n    }\n    if n < 9500 {\n        return\
    \ 33;\n    }\n    if n < 10000 {\n        return 34;\n    }\n    if n < 10500\
    \ {\n        return 35;\n    }\n    if n < 11000 {\n        return 36;\n    }\n\
    \    if n < 11500 {\n        return 37;\n    }\n    if n < 12000 {\n        return\
    \ 38;\n    }\n    if n < 12500 {\n        return 39;\n    }\n    if n < 13000\
    \ {\n        return 40;\n    }\n    if n < 13500 {\n        return 41;\n    }\n\
    \    if n < 14000 {\n        return 42;\n    }\n    if n < 14500 {\n        return\
    \ 43;\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpf4v5r44c.rs:149:5\n\
    \    |\n13  |   fn fibfib(n: isize) -> isize {\n    |                        \
    \  ----- expected `isize` because of this return type\n...\n149 | /     if n <\
    \ 14500 {\n150 | |         return 43;\n151 | |     }\n    | |_____^ expected `isize`,\
    \ found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n\
    \    = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut counter = 0;\n\
    \    for _ in 0..n {\n        counter += 1;\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0hmnkil1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n).map(|x| fibfib(x)).sum()\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp637_sc4n.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::iter::repeat;\n\
    \n    let mut fibfib: [isize; 6] = [0; 6];\n    fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n    *fibbonacci %= &fibfib;\n    fibfib[n]\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibbonacci` in this scope\n  --> /tmp/tmp6hrbtd8q.rs:17:5\n\
    \   |\n17 |     fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n   |     ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `fibbonacci` in this scope\n  --> /tmp/tmp6hrbtd8q.rs:17:16\n\
    \   |\n17 |     fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n   |                ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fibbonacci` in this scope\n  --> /tmp/tmp6hrbtd8q.rs:17:27\n\
    \   |\n17 |     fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n   |                           ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `fibbonacci` in this scope\n  --> /tmp/tmp6hrbtd8q.rs:17:38\n\
    \   |\n17 |     fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n   |                                      ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `fibbonacci` in this scope\n\
    \  --> /tmp/tmp6hrbtd8q.rs:17:49\n   |\n17 |     fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n   |                                                 ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `fibbonacci` in\
    \ this scope\n  --> /tmp/tmp6hrbtd8q.rs:17:60\n   |\n17 |     fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n   |                                                          \
    \  ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `fibbonacci`\
    \ in this scope\n  --> /tmp/tmp6hrbtd8q.rs:17:71\n   |\n17 |     fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(fibbonacci(&fibfib))))))\
    \ + &fibfib);\n   |                                                          \
    \             ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 1;\n    }\n    let mut f =\
    \ fibfib(n - 3);\n    let mut g = fibfib(n - 2);\n    let mut h = fibfib(n - 1);\n\
    \    f += g;\n    f += h;\n    g += h;\n    return f;\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib_loop(n: isize)\
    \ -> isize {\n        if n == 0 {\n            return 0\n        }\n        let\
    \ next_fib = fib_loop(n - 1) + fib_loop(n - 2)\n        return next_fib + fib_loop(n\
    \ - 3)\n    }\n    fib_loop(n)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `return`\n  --> /tmp/tmp4f_x_rqd.rs:18:57\n\
    \   |\n18 |         let next_fib = fib_loop(n - 1) + fib_loop(n - 2)\n   |   \
    \                                                      ^ help: add `;` here\n\
    19 |         return next_fib + fib_loop(n - 3)\n   |         ------ unexpected\
    \ token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib(n: isize) -> isize\
    \ {\n        if n < 2 {\n            n\n        } else {\n            fib(n-1)\
    \ + fib(n-2)\n        }\n    }\n\n    fib(n).into()\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5kzpnd6v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    assert!(n >= 0);\n\n\
    \    if n == 0 {\n        return 0;\n    }\n\n    if n == 1 {\n        return\
    \ 0;\n    }\n\n    if n == 2 {\n        return 1;\n    }\n\n    if n == 3 {\n\
    \        return 1;\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 1 {\n        return\
    \ 0;\n    }\n\n    let mut f1: isize = 1;\n    let mut f2: isize = 0;\n    let\
    \ mut f3: isize = 0;\n    let mut f4: isize = 0;\n\n    for _ in 0..n {\n    \
    \    f1 += f3;\n        f2 += f4;\n\n        let f5 = f1 + f2;\n        f3 = f4;\n\
    \        f4 = f5;\n    }\n\n    return f4;\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplnfu5e9r.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        _ => fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n\
    \ - 3),\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib_fib` in this scope\n  --> /tmp/tmph64h8hxk.rs:17:14\n\
    \   |\n17 |         _ => fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n - 3),\n \
    \  |              ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `fib_fib` in this scope\n  --> /tmp/tmph64h8hxk.rs:17:31\n   |\n17\
    \ |         _ => fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n - 3),\n   |     \
    \                          ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `fib_fib` in this scope\n  --> /tmp/tmph64h8hxk.rs:17:48\n   |\n\
    17 |         _ => fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n - 3),\n   |    \
    \                                            ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (0..n).fold(0, |sum,\
    \ v| sum + fibonacci(v))\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibonacci` in this scope\n  --> /tmp/tmpc89kzkby.rs:14:35\n\
    \   |\n14 |     (0..n).fold(0, |sum, v| sum + fibonacci(v))\n   |            \
    \                       ^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib(n: isize) -> isize\
    \ {\n        if n < 3 {\n            0\n        } else {\n            fib(n -\
    \ 1) + fib(n - 2) + fib(n - 3)\n        }\n    }\n\n    fib(n)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp79d6ox0w.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // Your code here\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1u0xnom0.rs:13:24\n   |\n\
    13 | fn fibfib(n: isize) -> isize {\n   |    ------              ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::ops::{Add, Sub};\n\
    \    use std::mem::{size_of, transmute};\n\n    if n < 0 {\n        panic!(\"\
    fibfib negative numbers not supported\")\n    }\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    let mut acc = 1;\n\
    \    for i in 2..n {\n        acc += i;\n    }\n    transmute(&acc).add_assign(&acc);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "warning: unused imports: `Add`, `Sub`\n  --> /tmp/tmpqfj2fopu.rs:14:20\n\
    \   |\n14 |     use std::ops::{Add, Sub};\n   |                    ^^^  ^^^\n\
    \   |\n   = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import:\
    \ `size_of`\n  --> /tmp/tmpqfj2fopu.rs:15:20\n   |\n15 |     use std::mem::{size_of,\
    \ transmute};\n   |                    ^^^^^^^\n\nerror[E0282]: type annotations\
    \ needed\n  --> /tmp/tmpqfj2fopu.rs:30:5\n   |\n30 |     transmute(&acc).add_assign(&acc);\n\
    \   |     ^^^^^^^^^ cannot infer type for type parameter `U` declared on the function\
    \ `transmute`\n   |\n   = note: type must be known at this point\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqfj2fopu.rs:13:24\n   |\n13 | fn fibfib(n: isize)\
    \ -> isize {\n   |    ------              ^^^^^ expected `isize`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\
    \nSome errors have detailed explanations: E0282, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ 0\n    }\n    let mut fibfib: isize = 0;\n    for x in 0..n / 2 {\n        fibfib\
    \ = fibfib + fibfib;\n    }\n    fibfib += fibfib;\n    fibfib\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3l0gq5lx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fibfib_internal(n - 1).0\
    \ + fibfib_internal(n - 2).0 + fibfib_internal(n - 3).0\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibfib_internal` in this scope\n  -->\
    \ /tmp/tmpu57mxkqo.rs:14:5\n   |\n14 |     fibfib_internal(n - 1).0 + fibfib_internal(n\
    \ - 2).0 + fibfib_internal(n - 3).0\n   |     ^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `fibfib_internal` in this scope\n\
    \  --> /tmp/tmpu57mxkqo.rs:14:32\n   |\n14 |     fibfib_internal(n - 1).0 + fibfib_internal(n\
    \ - 2).0 + fibfib_internal(n - 3).0\n   |                                ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `fibfib_internal`\
    \ in this scope\n  --> /tmp/tmpu57mxkqo.rs:14:59\n   |\n14 |     fibfib_internal(n\
    \ - 1).0 + fibfib_internal(n - 2).0 + fibfib_internal(n - 3).0\n   |         \
    \                                                  ^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut sum = 0;\n  \
    \  for i in 0..n {\n        sum += fib(i);\n    }\n    return sum;\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmpzc1ytw82.rs:16:16\n\
    \   |\n16 |         sum += fib(i);\n   |                ^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut f = 1;\n    for\
    \ i in 0..n {\n        f += 1;\n        if i % 2 == 0 {\n            f = 3 * f\
    \ + 1;\n        }\n    }\n    f\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `1`', /tmp/tmpfxan8qej.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::mem;\n    let\
    \ mut mem = mem::zeroed();\n    let mut acc: isize = 0;\n    loop {\n        mem.write_all(&acc);\n\
    \        mem.write_all(b'0');\n        acc += 1;\n        if acc == n {\n    \
    \        return acc;\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp9s015hp_.rs:18:9\n\
    \   |\n15 |     let mut mem = mem::zeroed();\n   |         ------- consider giving\
    \ `mem` a type\n...\n18 |         mem.write_all(&acc);\n   |         ^^^ cannot\
    \ infer type\n   |\n   = note: type must be known at this point\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<_> =\
    \ vec![0; n];\n    fib[0] = 0;\n    fib[1] = 1;\n    for n in 2..=n {\n      \
    \  fib[n] = fib[n-1] + fib[n-2];\n    }\n    fib[n]\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ikj_mon.rs:14:35\n   |\n\
    14 |     let mut fib: Vec<_> = vec![0; n];\n   |                             \
    \      ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n14 |     let\
    \ mut fib: Vec<_> = vec![0; n.try_into().unwrap()];\n   |                    \
    \                ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6ikj_mon.rs:18:9\n   |\n18 |   \
    \      fib[n] = fib[n-1] + fib[n-2];\n   |         ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6ikj_mon.rs:18:18\n   |\n18 |  \
    \       fib[n] = fib[n-1] + fib[n-2];\n   |                  ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6ikj_mon.rs:18:29\n   |\n18 |  \
    \       fib[n] = fib[n-1] + fib[n-2];\n   |                             ^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6ikj_mon.rs:20:5\n\
    \   |\n20 |     fib[n]\n   |     ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n  "
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // return FibFib(n).next()\n\
    \    FibFib(n)\n        .next()\n        .unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `FibFib`\
    \ in this scope\n  --> /tmp/tmp_sa0yx5d.rs:15:5\n   |\n15 |     FibFib(n)\n  \
    \ |     ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib = [0isize;\
    \ n + 1];\n    fib[0] = 0;\n    for i in 1..=n {\n        fib[i] = fib[i - 1]\
    \ + fib[i - 2] + fib[i - 3];\n    }\n    return fib[n];\n}\n\nfn main() {\n  \
    \  let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpzac_hwmq.rs:14:28\n   |\n13 | fn fibfib(n: isize) -> isize {\n   | \
    \          - this would need to be a `const`\n14 |     let mut fib = [0isize;\
    \ n + 1];\n   |                            ^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ return 0;\n    }\n    let mut i = 1;\n    let mut fib: isize = fibfib(i + 1);\n\
    \    while i <= n {\n        fib = fib + i;\n        i += 1;\n    }\n    fib.cloned()\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpy_ryhirq.rs:23:9\n\
    \   |\n23 |     fib.cloned()\n   |         ^^^^^^ `isize` is not an iterator\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `isize:\
    \ Iterator`\n           which is required by `&mut isize: Iterator`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_kkxr3k4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        _ => match n / 2 {\n            0 => fibfib(n\
    \ + 1),\n            1 => fibfib(n + 1),\n            _ => fibfib(n + 1) + fibfib(n\
    \ + 2),\n        },\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n  \
    \  assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut sum = 0;\n\n\
    \    for _ in 0..n {\n        sum += 1;\n    }\n\n    sum\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpbe7z4_cm.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::mem;\n\n   \
    \ let mut fibfib: [isize; 3] = [0; 3];\n    fibbonacci::fibfib3(&mut fibfib);\n\
    \    mem::swap(&fibfib[..], &fibfib[..n + 1]);\n    fibfib[n]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `fibbonacci`\n\
    \  --> /tmp/tmpuom4hxel.rs:17:5\n   |\n17 |     fibbonacci::fibfib3(&mut fibfib);\n\
    \   |     ^^^^^^^^^^ use of undeclared crate or module `fibbonacci`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuom4hxel.rs:18:15\n   |\n18 |     mem::swap(&fibfib[..],\
    \ &fibfib[..n + 1]);\n   |               ^^^^^^^^^^^ types differ in mutability\n\
    \   |\n   = note: expected mutable reference `&mut _`\n                      found\
    \ reference `&[isize]`\n\nerror[E0277]: the type `[isize]` cannot be indexed by\
    \ `RangeTo<isize>`\n  --> /tmp/tmpuom4hxel.rs:18:15\n   |\n18 |     mem::swap(&fibfib[..],\
    \ &fibfib[..n + 1]);\n   |     --------- ^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |     |\n   |     required by a bound introduced\
    \ by this call\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `RangeTo<isize>`\n   = help: the following other types implement trait `SliceIndex<T>`:\n\
    \             <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize>\
    \ as SliceIndex<str>>\n   = note: required because of the requirements on the\
    \ impl of `Index<RangeTo<isize>>` for `[isize]`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpuom4hxel.rs:18:29\n   |\n\
    18 |     mem::swap(&fibfib[..], &fibfib[..n + 1]);\n   |                     \
    \        ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `RangeTo<isize>`\n\
    \   = help: the following other types implement trait `SliceIndex<T>`:\n     \
    \        <RangeTo<usize> as SliceIndex<[T]>>\n             <RangeTo<usize> as\
    \ SliceIndex<str>>\n   = note: required because of the requirements on the impl\
    \ of `Index<RangeTo<isize>>` for `[isize]`\n   = note: 1 redundant requirement\
    \ hidden\n   = note: required because of the requirements on the impl of `Index<RangeTo<isize>>`\
    \ for `[isize; 3]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuom4hxel.rs:18:28\n\
    \   |\n18 |     mem::swap(&fibfib[..], &fibfib["
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut res = 0;\n  \
    \  while n > 0 {\n        res += n % 6;\n        n /= 6;\n    }\n    res % 6\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmplgpiifym.rs:17:9\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n17 |         n /= 6;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (0..=n).fold(1, |acc,\
    \ i| acc + (i * 2))\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `1`', /tmp/tmpd_ds8std.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    let n_2 = n-1;\n    let n_3 = n-2;\n\n    fibfib(n_2)\
    \ as isize + fibfib(n_3) as isize + fibfib(n) as isize\n}\n\nfn main() {\n   \
    \ let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![0, 1, 1];\n    for k in 2..=n {\n        fib[k] = fib[k-1] + fib[k-2];\n\
    \    }\n    return fib[n];\n}\n\nfn main() {\n    let candidate = fibfib;\n  \
    \  assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpck569tdn.rs:16:9\n\
    \   |\n16 |         fib[k] = fib[k-1] + fib[k-2];\n   |         ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpck569tdn.rs:16:18\n   |\n16 |         fib[k]\
    \ = fib[k-1] + fib[k-2];\n   |                  ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpck569tdn.rs:16:29\n   |\n16 |         fib[k]\
    \ = fib[k-1] + fib[k-2];\n   |                             ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpck569tdn.rs:18:12\n   |\n18 |     return fib[n];\n\
    \   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n\n    if n == 2 {\n        return 1;\n    }\n\n   \
    \ let mut fib1 = fibfib(n-1);\n    let mut fib2 = fibfib(n-2);\n    let mut fib3\
    \ = fibfib(n-3);\n\n    fib3 = fib1 + fib2 + fib3;\n\n    fibfib(n)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![0usize, 1usize];\n    for i in 1..n {\n        fib += [fib[i] - fib[i\
    \ - 1] as usize];\n    }\n    fib[n as usize]\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2pfzgl7r.rs:14:36\n   |\n\
    14 |     let mut fib: Vec<isize> = vec![0usize, 1usize];\n   |               \
    \                     ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: change\
    \ the type of the numeric literal from `usize` to `isize`\n   |\n14 |     let\
    \ mut fib: Vec<isize> = vec![0isize, 1usize];\n   |                          \
    \           ~~~~~\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp2pfzgl7r.rs:16:17\n   |\n16 |         fib += [fib[i] - fib[i -\
    \ 1] as usize];\n   |                 ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp2pfzgl7r.rs:16:26\n   |\n16 |         fib\
    \ += [fib[i] - fib[i - 1] as usize];\n   |                          ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n  -->\
    \ /tmp/tmp2pfzgl7r.rs:16:9\n   |\n16 |         fib += [fib[i] - fib[i - 1] as\
    \ usize];\n   |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |         |\n\
    \   |         cannot use `+=` on type `Vec<isize>`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    if n ==\
    \ 2 {\n        return 1;\n    }\n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\
    \ 0 } else { fibfib(n-1) + fibfib(n-2) }\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6_2tk8vm.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    let (prev1, prev2) = (fibfib(n - 2), fibfib(n -\
    \ 1));\n    prev1 + prev2\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdoa5p7dd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0;\
    \ 8];\n    fibfib[0] = fibfib[1];\n    fibfib[1] = fibfib[2];\n    fibfib[2] =\
    \ fibfib[3];\n    for i in 3..=n {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3];\n    }\n    fibfib[n]\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp0epp8xau.rs:19:9\n   |\n19 |         fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3];\n   |         ^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp0epp8xau.rs:19:21\n   |\n19 |         fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n   |                     ^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp0epp8xau.rs:19:35\n\
    \   |\n19 |         fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n   |\
    \                                   ^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp0epp8xau.rs:19:49\n   |\n19 |         fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n   |                           \
    \                      ^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[{integ"
  stdout: ''
  timestamp: 1659976539
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n\n    if n == 2 {\n        return 1\n    }\n\n    let\
    \ n_plus_1 = fibfib(n-1);\n    let n_minus_2 = fibfib(n-2);\n    let n_plus_2_plus_1\
    \ = fibfib(n-3);\n\n    n_plus_1 + n_minus_2 + n_plus_2_plus_1\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn aux(n: usize, s: &isize)\
    \ -> isize {\n        if n == 0 {\n            *s\n        } else if n == 1 {\n\
    \            0\n        } else {\n            *s += aux(n - 1, &*(s + 1));\n \
    \       }\n    }\n\n    aux(n, n);\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpairy_5gh.rs:24:9\n   |\n\
    24 |     aux(n, n);\n   |         ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |     aux(n.try_into().unwrap(), n);\n   |          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpairy_5gh.rs:24:12\n   |\n24 |\
    \     aux(n, n);\n   |            ^\n   |            |\n   |            expected\
    \ `&isize`, found `isize`\n   |            help: consider borrowing here: `&n`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpairy_5gh.rs:13:24\n   |\n13 |\
    \ fn fibfib(n: isize) -> isize {\n   |    ------              ^^^^^ expected `isize`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n...\n24 |     aux(n, n);\n   |              - help:\
    \ remove this semicolon\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpairy_5gh.rs:20:31\n   |\n20 |             *s += aux(n - 1, &*(s\
    \ + 1));\n   |                               ^^^^^^^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpairy_5gh.rs:19:16\n   |\n19 |           } else {\n   |\
    \  ________________^\n20 | |             *s += aux(n - 1, &*(s + 1));\n21 | |\
    \         }\n   | |_________^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::mem;\n    if\
    \ n == 0 || n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 1;\n    }\n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976539
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // Your code here\n \
    \   fn fib(mut n: isize) -> isize {\n        if n == 0 {\n            return 0;\n\
    \        }\n        if n == 1 {\n            return 1;\n        }\n        let\
    \ result = fib(n - 1) + fib(n - 2) + fib(n - 3);\n        return result;\n   \
    \ }\n    return fib(n);\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        0\n\
    \    } else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpf4ysxea9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976538
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        1\
    \ => 0,\n        2 => 1,\n        _ => fib(n - 1) + fib(n - 2) + fib(n - 3)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib` in this scope\n  --> /tmp/tmp3b8ic5u8.rs:17:14\n\
    \   |\n17 |         _ => fib(n - 1) + fib(n - 2) + fib(n - 3)\n   |          \
    \    ^^^ not found in this scope\n\nerror[E0425]: cannot find function `fib` in\
    \ this scope\n  --> /tmp/tmp3b8ic5u8.rs:17:27\n   |\n17 |         _ => fib(n -\
    \ 1) + fib(n - 2) + fib(n - 3)\n   |                           ^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `fib` in this scope\n  -->\
    \ /tmp/tmp3b8ic5u8.rs:17:40\n   |\n17 |         _ => fib(n - 1) + fib(n - 2) +\
    \ fib(n - 3)\n   |                                        ^^^ not found in this\
    \ scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n    if n > 2 {\n        let n = n - 3;\n        let\
    \ result = fibfib(n) + fibfib(n-1) + fibfib(n-2);\n        return result;\n  \
    \  }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmphu0wnri5.rs:23:5\n\
    \   |\n13 |   fn fibfib(n: isize) -> isize {\n   |                          -----\
    \ expected `isize` because of this return type\n...\n23 | /     if n > 2 {\n24\
    \ | |         let n = n - 3;\n25 | |         let result = fibfib(n) + fibfib(n-1)\
    \ + fibfib(n-2);\n26 | |         return result;\n27 | |     }\n   | |_____^ expected\
    \ `isize`, found `()`\n   |\n   = note: `if` expressions without `else` evaluate\
    \ to `()`\n   = help: consider adding an `else` block that evaluates to the expected\
    \ type\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    // Return the value if\
    \ n is equal to or less than 1, otherwise compute the next value recursively.\n\
    \    if n <= 1 {\n        return n;\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7kz62j5j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib({}) must be greater than or equal to zero!\", n)\n    }\n    \n    if n\
    \ == 0 {\n        return 0\n    }\n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fibfib(-1) must be greater than or equal
    to zero!'', /tmp/tmpq1oclzy2.rs:15:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976539
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n\
    \        return 1;\n    }\n\n    let mut fib1 = fibfib(n-1);\n    let mut fib2\
    \ = fibfib(n-2);\n    let mut fib3 = fibfib(n-3);\n    return fib3 + fib1 + fib2;\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib = 0;\n  \
    \  for _ in 0..n {\n        fib += 1;\n    }\n    fib\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9jf9jn7s.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \    if n < 3 {\n        0\n    } else {\n        let mut a = 1;\n        let\
    \ mut b = 1;\n        let mut c = 1;\n        for i in (0..n - 3).rev() {\n  \
    \          let d = b + c;\n            a, b, c = c, d, a + b\n        }\n    \
    \    b\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `,`\n  --> /tmp/tmpcgud77ho.rs:23:14\n   |\n23 |             a, b, c =\
    \ c, d, a + b\n   |              ^ expected one of 8 possible tokens\n\nwarning:\
    \ unused import: `std::cmp::Ordering`\n  --> /tmp/tmpcgud77ho.rs:14:9\n   |\n\
    14 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n   =\
    \ note: `#[warn(unused_imports)]` on by default\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    let mut num1 = 1;\n    let mut num2 = 1;\n    for\
    \ i in 2..n {\n        let mut sum = num1 + num2;\n        num1 = num2;\n    \
    \    num2 = sum;\n    }\n    num2\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmp2tyz5zc2.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 || n > 15 {\n\
    \        panic!(\"fibfib: invalid argument: {}\", n);\n    }\n    let mut fibfibs\
    \ = [0; 15];\n    fibfibs[n] = fibfibs[n-1] + fibfibs[n-2] + fibfibs[n-3]; //\
    \ Fibbonaci sequence\n    return fibfibs[n];\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmplsdx53du.rs:18:5\n   |\n18 |     fibfibs[n] = fibfibs[n-1] + fibfibs[n-2]\
    \ + fibfibs[n-3]; // Fibbonaci sequence\n   |     ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmplsdx53du.rs:18:18\n   |\n18 |     fibfibs[n]\
    \ = fibfibs[n-1] + fibfibs[n-2] + fibfibs[n-3]; // Fibbonaci sequence\n   |  \
    \                ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[{integer}]`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplsdx53du.rs:18:33\n\
    \   |\n18 |     fibfibs[n] = fibfibs[n-1] + fibfibs[n-2] + fibfibs[n-3]; // Fibbonaci\
    \ sequence\n   |                                 ^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmplsdx53du.rs:18:48\n   |\n18 |     fibfibs[n]\
    \ = fibfibs[n-1] + fibfibs[n-2] + fibfibs[n-3]; // Fibbonaci sequence\n   |  \
    \                                              ^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = not"
  stdout: ''
  timestamp: 1659976539
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::{Ordering,\
    \ Ordering::Equal};\n\n    if n == 0 || n == 1 {\n        return 0;\n    }\n \
    \   if n == 2 {\n        return 1;\n    }\n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    fibfib: Negative number\");\n    }\n    if n == 0 || n == 1 {\n        return\
    \ n;\n    }\n    fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fibfib: Negative number'', /tmp/tmpvobnbww5.rs:15:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976539
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    match n {\n        0\
    \ => 0,\n        1 => 0,\n        2 => 1,\n        _ => fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976538
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut prev = 0;\n \
    \   let mut cur = n;\n    while cur > 0 {\n        let tmp = cur - prev;\n   \
    \     prev = cur;\n        cur = tmp;\n    }\n    cur\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxouh2wi8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 { 0 }\n   \
    \ else { fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3) }\n}\n\nfn main() {\n \
    \   let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4q726a0a.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 { panic!(\"\
    fibfib: fibfib(n) called with negative n\") }\n    if n < 1 { return 0 }\n   \
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''fibfib: fibfib(n) called with negative n'',
    /tmp/tmp_xrzgjf7.rs:14:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976539
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    if n == 3 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib_res =\
    \ 1;\n\n    for _ in 0..n {\n        fibfib_res = fibfib_res * 2;\n    }\n\n \
    \   fibfib_res % 11\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpqwurl6f4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n\n    if n < 0 {\n        panic!(\"Invalid n: {:#?}\", n);\n    }\n\n\
    \    if n == 0 {\n        fibfib = 0;\n    } else {\n        if n == 1 {\n   \
    \         fibfib = 0;\n        } else {\n            fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n        }\n    }\n\n    fibfib\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpmcngoep2.rs:26:31\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n...\n26 |             fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n\
    \   |                               ^^^^^^-----\n   |                        \
    \       |\n   |                               call expression requires function\n\
    \nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpmcngoep2.rs:26:45\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n...\n26 |             fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n\
    \   |                                             ^^^^^^-----\n   |          \
    \                                   |\n   |                                  \
    \           call expression requires function\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976539
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    if n ==\
    \ 2 {\n        return 1;\n    }\n\n    let left = fibfib(n - 1);\n    let right\
    \ = fibfib(n - 2);\n    let result = left + right;\n    return result;\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpnsj570kh.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<isize>\
    \ = vec![0; 3];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    let mut\
    \ c: isize = 0;\n    for i in 0..n {\n        c = fib[2] + fib[1] + fib[0];\n\
    \        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2] = c;\n   \
    \ }\n    return fib[n - 1];\n}\n\nfn main() {\n    let candidate = fibfib;\n \
    \   assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpixt11azm.rs:25:12\n\
    \   |\n25 |     return fib[n - 1];\n   |            ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpid5q7h6w.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\
    \ 0 }\n    else { fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3) }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976546
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n).fold(0, |sum,\
    \ n| sum + fibfib(n))\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp25ienj1w.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ 0\n    }\n    else if n == 1 {\n        0\n    }\n    else if n == 2 {\n   \
    \     1\n    }\n    else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return n;\n    }\n    if n == 2 {\n        return 1;\n    }\n\n    fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxlwgd0k3.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 {\n        panic!(\"\
    Negative fibfib is invalid\");\n    }\n\n    if n == 0 {\n        return 0;\n\
    \    }\n\n    let mut fib: isize = 0;\n\n    if n <= 3 {\n        fib += fibfib(n-1);\n\
    \        fib += fibfib(n-2);\n        fib += fibfib(n-3);\n    }\n\n    if n <=\
    \ 7 {\n        fib += fibfib(n-5);\n        fib += fibfib(n-4);\n        fib +=\
    \ fibfib(n-3);\n    }\n\n    if n <= 11 {\n        fib += fibfib(n-7);\n     \
    \   fib += fibfib(n-6);\n        fib += fibfib(n-5);\n    }\n\n    if n <= 13\
    \ {\n        fib += fibfib(n-11);\n        fib += fibfib(n-10);\n        fib +=\
    \ fibfib(n-9);\n    }\n\n    if n <= 17 {\n        fib += fibfib(n-13);\n    \
    \    fib += fibfib(n-12);\n        fib += fibfib(n-11);\n    }\n\n    if n <=\
    \ 19 {\n        fib += fibfib(n-17);\n        fib += fibfib(n-16);\n        fib\
    \ += fibfib(n-15);\n    }\n\n    if n <= 23 {\n        fib += fibfib(n-19);\n\
    \        fib += fibfib(n-18);\n        fib += fibfib(n-17);\n    }\n\n    if n\
    \ <= 29 {\n        fib += fibfib(n-23);\n        fib += fibfib(n-22);\n      \
    \  fib += fibfib(n-21);\n    }\n\n    if n <= 31 {\n        fib += fibfib(n-29);\n\
    \        fib += fibfib(n-28);\n        fib += fibfib(n-27);\n    }\n\n    if n\
    \ <= 35 {\n        fib += fibfib(n-33);\n        fib += fibfib(n-32);\n      \
    \  fib += fibfib(n-31); //30\n    }\n\n    if n <= 41 {\n        fib += fibfib(n-37);\n\
    \        fib += fibfib(n-36);\n        fib += fibfib(n-35);\n    }\n\n    if n\
    \ <= 49 {\n        fib += fibfib(n-41);\n        fib += fibfib(n-40);\n      \
    \  fib += fibfib(n-39);\n    }\n\n    if n <= 57 {\n        fib += fibfib(n-45);\n\
    \        fib += fibfib(n-44);\n        fib += fibfib(n-43);\n    }\n\n    if n\
    \ <= 65 {\n        \n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5jhwo27l.rs:115:3\n\
    \    |\n13  | fn fibfib(n: isize) -> isize {\n    |                          \
    \    - unclosed delimiter\n...\n102 |     if n <= 65 {\n    |                -\
    \ this delimiter might not be properly closed...\n103 |         \n104 | }\n  \
    \  | - ...as it matches this but it has different indentation\n...\n115 | }\n\
    \    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jhwo27l.rs:13:24\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |    ------              ^^^^^\
    \ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as\
    \ its body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::{max, min};\n\
    \    use std::cmp::Ordering;\n    let fibfib = [\n        0,\n        1,\n   \
    \     1,\n        1,\n        2,\n        3,\n        5,\n        8,\n       \
    \ 13,\n        21,\n        34,\n        55,\n        89,\n        144,\n    \
    \    233,\n        377,\n        610,\n        987,\n        1597,\n        2584,\n\
    \        4181,\n        6765,\n        10946,\n        17711,\n        28657,\n\
    \        46625,\n        75025,\n        121393,\n        196418,\n        317811,\n\
    \        514229,\n        832040,\n        1346269,\n        2178309,\n      \
    \  3524578,\n        5702887,\n        9227465,\n        14930352,\n        24157817,\n\
    \        39088169,\n        63245986,\n        102334155,\n        165580141,\n\
    \        267914296,\n        423643456,\n        679893475,\n        1100087415,\n\
    \        1776467654,\n        286364130,\n        466189067,\n        752846343,\n\
    \        1214793102,\n        1965219534,\n        317769970,\n        514229163,\n\
    \        832043978,\n        1346268966,\n        2178309642,\n        3524578181,\n\
    \        5702887296,\n        922746689,\n        1493035324,\n        2415781766,\n\
    \        3908816930,\n        6324598610,\n        1023341545,\n        1655801429,\n\
    \        2679142986,\n        4236434558,\n        6798934795,\n        1100087410,\n\
    \        17764676546,\n        2863641290,\n        4661890665,\n        7528463469,\n\
    \        12147931014,\n        1965219535,\n        3177699714,\n        5142291710,\n\
    \        8320439714,\n        13462689670,\n        2178309650,\n        3524578189,\n\
    \        5702887306,\n        92\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \   --> /tmp/tmp0_coxyj1.rs:102:1\n    |\n102 | }\n    | ^ expected one of `.`,\
    \ `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n\
    \   --> /tmp/tmp0_coxyj1.rs:16:18\n    |\n13  | fn fibfib(n: isize) -> isize {\n\
    \    |                              - closing delimiter possibly meant for this\n\
    ...\n16  |     let fibfib = [\n    |                  ^ unclosed delimiter\n...\n\
    102 | }\n    | ^ mismatched closing delimiter\n\nwarning: unused imports: `max`,\
    \ `min`\n  --> /tmp/tmp0_coxyj1.rs:14:20\n   |\n14 |     use std::cmp::{max, min};\n\
    \   |                    ^^^  ^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp0_coxyj1.rs:15:9\n\
    \   |\n15 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to 2 previous errors; 2 warnings emitted\n\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 0 || n > 3\n \
    \       || n == 0 || n == 1\n        || n == 2\n    {\n        n;\n    }\n   \
    \ else {\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoj1tpee0.rs:17:5\n   |\n\
    17 | /     {\n18 | |         n;\n   | |          - help: remove this semicolon\n\
    19 | |     }\n   | |_____^ expected `isize`, found `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoj1tpee0.rs:20:10\n   |\n20 |       else {\n   |  __________^\n\
    21 | |         fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n   | |              \
    \                                  - help: remove this semicolon\n22 | |     }\n\
    \   | |_____^ expected `isize`, found `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (0..n).fold(1, |n, acc|\
    \ {\n        std::mem::swap(&n, &acc - 1);\n        n + n + n + n + n\n    })\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqskczsry.rs:15:24\n   |\n\
    15 |         std::mem::swap(&n, &acc - 1);\n   |                        ^^ types\
    \ differ in mutability\n   |\n   = note: expected mutable reference `&mut _`\n\
    \                      found reference `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqskczsry.rs:15:28\n   |\n15 |         std::mem::swap(&n, &acc -\
    \ 1);\n   |                            ^^^^^^^^\n   |                        \
    \    |\n   |                            expected `&mut _`, found `isize`\n   |\
    \                            help: consider mutably borrowing here: `&mut (&acc\
    \ - 1)`\n   |\n   = note: expected mutable reference `&mut _`\n              \
    \             found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 { 0 }\n    else\
    \ if n >= 3 { fibfib(n-1) + fibfib(n-2) + fibfib(n-3) }\n    else { 1 }\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmprv4po_si.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    let mut\
    \ res = fibfib(n-1) + fibfib(n-2);\n    res += fibfib(n-3);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976546
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 2 {\n       \
    \ 0\n    } else if n == 3 {\n        1\n    } else {\n        fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl7dbc0pb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976544
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { 0 }\n   \
    \ else if n == 1 { 1 }\n    else { fibfib(n-1) + fibfib(n-2) + fibfib(n-3) }\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976546
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut result = 1;\n\
    \    for i in 2..(n + 1) {\n        result = result + i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpmaydli_c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976540
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n).fold(0, |acc,\
    \ _| acc + fibfib(n-1))\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpwu8oxsj9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 1\n    }\n    if n == 3 {\n        return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3)\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3)\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976541
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    loop {\n        if n\
    \ == 0 {\n            return 0;\n        }\n        if n == 1 {\n            return\
    \ 1;\n        }\n        if n == 2 {\n            return 1;\n        }\n     \
    \   if n == 3 {\n            return 2;\n        }\n        n -= 3;\n        let\
    \ a = fibfib(n - 1);\n        let b = fibfib(n - 2);\n        let c = fibfib(n\
    \ - 3);\n        return a + b + c;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1b2turox.rs:27:9\n\
    \   |\n13 | fn fibfib(n: isize) -> isize {\n   |           - help: consider making\
    \ this binding mutable: `mut n`\n...\n27 |         n -= 3;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fib: Vec<_> =\
    \ Vec::new();\n    fib.push(0);\n    fib.push(0);\n    fib.push(1);\n    for _\
    \ in 0..n {\n        let i = fib[fib.len() - 1];\n        let a = fib[fib.len()\
    \ - 2];\n        fib.push(a + i);\n    }\n    fib[fib.len() - 1]\n}\n\nfn main()\
    \ {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpabp8a5qs.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976541
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 3 { return 0\
    \ }\n\n    let mut fibfib = [0, 1];\n    for _ in 1..n {\n        fibfib[0] +=\
    \ 1;\n        fibfib[1] += fibfib[0] + fibfib[1];\n    }\n\n    fibfib[0]\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1buc8ikl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976542
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n\n    if n == 2 {\n        return 1;\n    }\n\n   \
    \ let fib1 = fibfib(n-1);\n    let fib2 = fibfib(n-2);\n    let fib3 = fibfib(n-3);\n\
    \n    fib1 + fib2 + fib3\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976542
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    for i in 0..n {\n        fibfib += fibfib(i-1) + fibfib(i-2) + fibfib(i-3);\n\
    \    }\n    return fibfib\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmpg3vjc6xg.rs:16:19\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n15 |     for i in 0..n {\n16 |         fibfib += fibfib(i-1) +\
    \ fibfib(i-2) + fibfib(i-3);\n   |                   ^^^^^^-----\n   |       \
    \            |\n   |                   call expression requires function\n\nerror[E0618]:\
    \ expected function, found `isize`\n  --> /tmp/tmpg3vjc6xg.rs:16:33\n   |\n14\
    \ |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has type\
    \ `isize`\n15 |     for i in 0..n {\n16 |         fibfib += fibfib(i-1) + fibfib(i-2)\
    \ + fibfib(i-3);\n   |                                 ^^^^^^-----\n   |     \
    \                            |\n   |                                 call expression\
    \ requires function\n\nerror[E0618]: expected function, found `isize`\n  --> /tmp/tmpg3vjc6xg.rs:16:47\n\
    \   |\n14 |     let mut fibfib: isize = 0;\n   |         ---------- `fibfib` has\
    \ type `isize`\n15 |     for i in 0..n {\n16 |         fibfib += fibfib(i-1) +\
    \ fibfib(i-2) + fibfib(i-3);\n   |                                           \
    \    ^^^^^^-----\n   |                                               |\n   | \
    \                                              call expression requires function\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976542
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    if n == 0 {\n        fibfib = 0;\n    } else if n == 1 {\n       \
    \ fibfib = 1;\n    } else {\n        fibfib = fibfib + fibfib - fibfib + fibfib\
    \ - fibfib;\n    }\n    return fibfib;\n}\n\nfn main() {\n    let candidate =\
    \ fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmps18jd78s.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976543
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut sum = 0;\n  \
    \  for i in (0..n).rev() {\n        sum += 2 * i;\n    }\n    return sum;\n}\n\
    \nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7r7ncohq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976543
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..n).fold(0, |acc,\
    \ n| acc + fibfib(n-2) + fibfib(n-3))\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpz10b82kl.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976543
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    (1..=n).fold(0, |sum,\
    \ val| sum + fibfib(val - 1))\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptmy06qgm.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: isize\
    \ = 0;\n    for i in 0..n {\n        fibfib = fibfib + i;\n    }\n    return fibfib;\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpd_obhaal.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 || n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 1;\n    }\n    if n\
    \ == 3 {\n        return 2;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpkx3s70jx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 1 {\n       \
    \ return n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n\
    fn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n \
    \   assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcbe3vjc6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn fib_seq(i: usize)\
    \ -> isize {\n        if i < 3 { i }\n        else fib_seq(i-1) + fib_seq(i-2)\
    \ + fib_seq(i-3)\n    }\n\n    fib_seq(n)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `fib_seq`\n  --> /tmp/tmpuh877b16.rs:16:14\n\
    \   |\n16 |         else fib_seq(i-1) + fib_seq(i-2) + fib_seq(i-3)\n   |    \
    \          ^^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n\
    \   |\n16 |         else { fib_seq(i-1) + fib_seq(i-2) + fib_seq(i-3) }\n   |\
    \              +                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuh877b16.rs:19:13\n   |\n19 |     fib_seq(n)\n\
    \   |             ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    19 |     fib_seq(n.try_into().unwrap())\n   |              ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::cmp::Ordering;\n\
    \n    let mut fibfib = [0, 1];\n    for _ in 0..(n + 1) {\n        fibfib += fibfib[..2];\n\
    \    }\n\n    fibfib[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmp1fdl5c24.rs:14:9\n\
    \   |\n14 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: `#[warn(unused_imports)]` on by default\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `[{integer}; 2]`\n  --> /tmp/tmp1fdl5c24.rs:18:9\n\
    \   |\n18 |         fibfib += fibfib[..2];\n   |         ------^^^^^^^^^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `[{integer}; 2]`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1fdl5c24.rs:21:5\n\
    \   |\n21 |     fibfib[n]\n   |     ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror: aborting due to 2 previous errors;\
    \ 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0368.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib: Vec<isize>\
    \ = Vec::new();\n    fibfib.push(0);\n    fibfib.push(0);\n    fibfib.push(1);\n\
    \    for _ in 1..n {\n        fibfib.push(fibfib[fibfib.len() - 3] + fibfib[fibfib.len()\
    \ - 2] + fibfib[fibfib.len() - 1]);\n    }\n    fibfib[0]\n}\n\nfn main() {\n\
    \    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphm7e112v.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 2 {\n        return\
    \ n;\n    }\n    if n % 2 == 0 {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n    return fibfib(n - 1) + fibfib(n - 2);\n}\n\nfn\
    \ main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n  \
    \  assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpaajcet2c.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976544
- exit_code: 0
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n <= 0 {\n       \
    \ return 0;\n    }\n\n    if n == 1 {\n        return 0;\n    }\n\n    if n ==\
    \ 2 {\n        return 1;\n    }\n\n    if n == 3 {\n        return 1;\n    }\n\
    \n    let n1 = fibfib(n - 1);\n    let n2 = fibfib(n - 2);\n    let n3 = fibfib(n\
    \ - 3);\n    n1 + n2 + n3\n}\n\nfn main() {\n    let candidate = fibfib;\n   \
    \ assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976545
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    fn inner(n: isize) ->\
    \ isize {\n        if n == 1 {\n            return 0\n        }\n        if n\
    \ == 2 {\n            return 1\n        }\n        inner(n - 1) + inner(n - 2)\
    \ + inner(n - 3)\n    }\n    inner(n)\n}\n\nfn main() {\n    let candidate = fibfib;\n\
    \    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n\
    \    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976551
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    use std::mem::swap;\n\
    \n    let mut fibfib: Vec<isize> = Vec::new();\n\n    fibfib.resize(n);\n    fibfib[0]\
    \ = 0;\n    fibfib[1] = fibfib[0] + fibfib[1];\n\n    for i in 2..=n {\n     \
    \   fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n    }\n\n    fibfib[n] = fibfib[n\
    \ - 1] + fibfib[n - 2] + fibfib[n - 3];\n    swap(fibfib.drain(..n), fibfib);\n\
    \    fibfib[n]\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpy5uy87s4.rs:18:12\n     |\n18   |     fibfib.resize(n);\n   \
    \  |            ^^^^^^ - supplied 1 argument\n     |            |\n     |    \
    \        expected 2 arguments\n     |\nnote: associated function defined here\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpy5uy87s4.rs:23:9\n\
    \   |\n23 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n   |         ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpy5uy87s4.rs:23:21\n\
    \   |\n23 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n   |         \
    \            ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpy5uy87s4.rs:23:37\n\
    \   |\n23 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n   |         \
    \                            ^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpy5uy87s4.rs:26:5\n   |\n26 |     fibfib[n] = fibfib[n - 1] + fibfib[n\
    \ - 2] + fibfib[n - 3];\n   |     ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isi"
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 { return 0;\
    \ }\n    if n == 1 { return 1; }\n    if n == 2 { return 1; }\n    let a = fibfib(n\
    \ - 1);\n    let b = fibfib(n - 2);\n    let c = fibfib(n - 3);\n    a * b + c\n\
    }\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n\
    \    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n\
    \    assert_eq!(candidate(14), 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppaa179lw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976545
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    let mut fibfib = [0i32;\
    \ 4001];\n    for i in 1..=n {\n        fibfib[i] = fibfib[i - 1] + fibfib[i -\
    \ 2] + fibfib[i - 3];\n    }\n    fibfib[n - 1]\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpbtsbynco.rs:16:9\n\
    \   |\n16 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n\
    \   |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `[i32]`\n\
    \nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpbtsbynco.rs:16:21\n\
    \   |\n16 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n\
    \   |                     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[i32]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[i32]`\n\nerror[E0277]: the type `[i32]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpbtsbynco.rs:16:37\n   |\n16 |         fibfib[i] = fibfib[i - 1]\
    \ + fibfib[i - 2] + fibfib[i - 3];\n   |                                     ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[i32]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[i32]`\n\nerror[E0277]:\
    \ the type `[i32]` cannot be indexed by `isize`\n  --> /tmp/tmpbtsbynco.rs:16:53\n\
    \   |\n16 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n\
    \   |                                                     ^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[i32]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[i32]`\n\nerror[E0277]: the type `[i32]"
  stdout: ''
  timestamp: 1659976544
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 3 { return 0;\
    \ }\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfn main() {\n    let candidate\
    \ = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1), 0);\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10),\
    \ 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14), 927);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpw7z05plf.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976545
- exit_code: 1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 1 {\n        0\n\
    \    } else {\n        fibreduce(n) + fibreduce(n - 1) + fibreduce(n - 2)\n  \
    \  }\n}\n\nfn main() {\n    let candidate = fibfib;\n    assert_eq!(candidate(2),\
    \ 1);\n    assert_eq!(candidate(1), 0);\n    assert_eq!(candidate(5), 4);\n  \
    \  assert_eq!(candidate(8), 24);\n    assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12),\
    \ 274);\n    assert_eq!(candidate(14), 927);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fibreduce` in this scope\n  --> /tmp/tmpg2kngsju.rs:17:9\n\
    \   |\n17 |         fibreduce(n) + fibreduce(n - 1) + fibreduce(n - 2)\n   | \
    \        ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fibreduce` in this scope\n  --> /tmp/tmpg2kngsju.rs:17:24\n   |\n17 |     \
    \    fibreduce(n) + fibreduce(n - 1) + fibreduce(n - 2)\n   |                \
    \        ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `fibreduce` in this scope\n  --> /tmp/tmpg2kngsju.rs:17:43\n   |\n17 |     \
    \    fibreduce(n) + fibreduce(n - 1) + fibreduce(n - 2)\n   |                \
    \                           ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976545
- exit_code: -1
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n < 1 {\n        return\
    \ n;\n    }\n\n    let mut fib: isize = 0;\n    match n & 1 {\n        1 => fib\
    \ = 1,\n        _ => fib += fibfib(n >> 1),\n    }\n    fib + (fibfib((n >> 1)\
    \ + 1) + fibfib((n >> 2) + 1) + fibfib((n >> 3) + 1))\n}\n\nfn main() {\n    let\
    \ candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976551
- exit_code: 101
  program: "/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfn fibfib(n: isize) -> isize {\n    if n == 0 {\n       \
    \ return 0;\n    }\n    \n    let mut fibfib = 0;\n    \n    for i in 1..n {\n\
    \        fibfib = fibfib + i;\n    }\n    \n    fibfib\n}\n\nfn main() {\n   \
    \ let candidate = fibfib;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(1),\
    \ 0);\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 24);\n \
    \   assert_eq!(candidate(10), 81);\n    assert_eq!(candidate(12), 274);\n    assert_eq!(candidate(14),\
    \ 927);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmp_431b631.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976545
