language: rs
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_vec = music_string.split_whitespace();\n\
    \    let mut beats = vec![];\n    for note in music_vec {\n        match note\
    \ {\n            \"o\" => beats.push(4),\n            \"o|\" => beats.push(2),\n\
    \            \".|\" => beats.push(1),\n            _ => continue,\n        }\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars()\n\
    \        .filter_map(|c| match c {\n            'o' => Some(4),\n            'o|'\
    \ => Some(2),\n            '.|' => Some(1),\n            _ => None,\n        })\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp569j14j0.rs:14:16\n\
    \   |\n14 |             'o|' => Some(2),\n   |                ^^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string\n\
    \        .chars()\n        .filter(|c| c.is_ascii_letter())\n        .collect::<String>()\n\
    \        .into_iter()\n        .collect();\n\n    let mut counter: usize = 0;\n\
    \    let mut notes: Vec<isize> = music_string.into_iter().collect();\n    for\
    \ note in music_string.into_iter().skip_while(|c| c != '|') {\n        notes.last_mut().unwrap()\
    \ += counter;\n        notes.push(0);\n        counter += 1;\n    }\n    notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n  --> /tmp/tmpytkh3uyu.rs:13:23\n   |\n13 |         .filter(|c|\
    \ c.is_ascii_letter())\n   |                       ^^^^^^^^^^^^^^^ help: there\
    \ is an associated function with a similar name: `is_ascii`\n\nerror[E0599]: the\
    \ method `into_iter` exists for struct `String`, but its trait bounds were not\
    \ satisfied\n   --> /tmp/tmpytkh3uyu.rs:15:10\n    |\n15  |           .into_iter()\n\
    \    |            ^^^^^^^^^\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            `str:\
    \ Sized`\n            which is required by `str: IntoIterator`\n            `str:\
    \ Iterator`\n            which is required by `str: IntoIterator`\n          \
    \  `&str: Iterator`\n            which is required by `&str: IntoIterator`\n \
    \           `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `&mut isize`\n  --> /tmp/tmpytkh3uyu.rs:21:9\n   |\n21 |         notes.last_mut().unwrap()\
    \ += counter;\n   |         -------------------------^^^^^^^^^^^\n   |       \
    \  |\n   |         cannot use `+=` on type `&mut isize`\n\nerror[E0067]: invalid\
    \ left-hand side of assignment\n  --> /tmp/tmpytkh3uyu.rs:21:35\n   |\n21 |  \
    \       notes.last_mut().unwrap() += counter;\n   |         -------------------------\
    \ ^^\n   |         |\n   |         cannot assign to this expression\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0067, E0368, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0067`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize>\
    \ = Vec::new();\n    for note in music_string.chars().filter_map(|c| match c {\n\
    \        'o' => Some(4),\n        'o|' => Some(2),\n        '.|' => Some(1),\n\
    \        _ => None,\n    }) {\n        beats_vec.push(note.unwrap_or(0));\n  \
    \  }\n    beats_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp5b8snx_p.rs:14:12\n\
    \   |\n14 |         'o|' => Some(2),\n   |            ^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music = music_string.split('\
    \ ');\n    let mut output = Vec::new();\n\n    for note in music.iter() {\n  \
    \      if note.len() == 1 {\n            output.push(4);\n        } else {\n \
    \           let pos = note.chars().skip(1).count() as isize;\n            let\
    \ last = (pos - 1) / 4 as isize;\n\n            output.push(last);\n        }\n\
    \    }\n\n    output\n}\n\nfn main() {\n    let candidate = parse_music;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmpw5hz4_iq.rs:14:23\n   |\n14 |     for note\
    \ in music.iter() {\n   |                       ^^^^ method not found in `std::str::Split<'_,\
    \ char>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = Vec::new();\n    for note in music_string.chars() {\n        let note_length\
    \ = note.len() as isize;\n        match note[note_length - 1] {\n            'o'\
    \ => {\n                beats.push(4);\n            }\n            '|' => {\n\
    \                beats.push(2);\n            }\n            '.' => {\n       \
    \         beats.push(1);\n            }\n            c => panic!(\"Invalid note\
    \ letter '{}'\", c),\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp7_rwj20z.rs:13:32\n   |\n13 |         let note_length =\
    \ note.len() as isize;\n   |                                ^^^ method not found\
    \ in `char`\n\nerror[E0608]: cannot index into a value of type `char`\n  --> /tmp/tmp7_rwj20z.rs:14:15\n\
    \   |\n14 |         match note[note_length - 1] {\n   |               ^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.as_bytes().iter().filter_map(|c|\
    \ match c {\n        b'o' | b'|' => Some(4),\n        b'|' => Some(2),\n     \
    \   _ => None,\n    }).sum()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `Vec<isize>: Sum<{integer}>` is not satisfied\n\
    \    --> /tmp/tmpxlc_gpg4.rs:15:8\n     |\n15   |     }).sum()\n     |       \
    \ ^^^ the trait `Sum<{integer}>` is not implemented for `Vec<isize>`\n     |\n\
    \     = help: the following other types implement trait `Sum<A>`:\n          \
    \     <Duration as Sum<&'a Duration>>\n               <Duration as Sum>\n    \
    \           <Option<T> as Sum<Option<U>>>\n               <Result<T, E> as Sum<Result<U,\
    \ E>>>\n               <Simd<f32, LANES> as Sum<&'a Simd<f32, LANES>>>\n     \
    \          <Simd<f32, LANES> as Sum>\n               <Simd<f64, LANES> as Sum<&'a\
    \ Simd<f64, LANES>>>\n               <Simd<f64, LANES> as Sum>\n             and\
    \ 72 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = music_string.split_whitespace().collect::<Vec<_>>();\n\
    \    let mut beats: Vec<isize> = notes.into_iter().map(|note| {\n        let mut\
    \ beat = 1;\n        note.chars().enumerate().find(|(_, c)| *c == b'|')\n    \
    \        .map(|(_, i)| {\n                beat *= 4 - (i * 2);\n             \
    \   beat\n            })\n            .unwrap_or(1)\n    }).collect();\n    beats.sort();\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplx7zp2j4.rs:14:54\n   |\n\
    14 |         note.chars().enumerate().find(|(_, c)| *c == b'|')\n   |        \
    \                                              ^^^^ expected `char`, found `u8`\n\
    \nerror[E0369]: cannot multiply `char` by `{integer}`\n  --> /tmp/tmplx7zp2j4.rs:16:32\n\
    \   |\n16 |                 beat *= 4 - (i * 2);\n   |                       \
    \       - ^ - {integer}\n   |                              |\n   |           \
    \                   char\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Parse music string\n\
    \    let mut music_string = music_string.to_owned();\n    let mut music_vector:\
    \ Vec<isize> = vec![];\n\n    // Go through string and get note lengths\n    while\
    \ music_string.len() > 0 {\n        let note_length = music_string.len();\n\n\
    \        // Handle notes separated by spaces\n        if music_string[note_length\
    \ - 1] == ' ' {\n            music_vector.push(note_length);\n            music_string.truncate(note_length\
    \ - 1);\n        }\n\n        // Handle notes separated by pipes\n        else\
    \ if music_string[note_length - 2] == '|' {\n            music_vector.push(note_length);\n\
    \            music_string.truncate(note_length - 1);\n        }\n\n        //\
    \ Handle notes separated by dashes\n        else if music_string[note_length -\
    \ 2] == '-' {\n            music_vector.push(note_length);\n            music_string.truncate(note_length\
    \ - 1);\n        }\n\n        // Handle notes separated by equals\n        else\
    \ if music_string[note_length - 1] == '=' {\n            music_vector.push(note_length);\n\
    \            music_string.truncate(note_length - 1);\n        }\n\n        //\
    \ Handle notes separated by spaces\n        else {\n            music_string.truncate(note_length\
    \ - 1);\n        }\n    }\n\n    music_vector\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp9w1pv0h3.rs:20:12\n\
    \   |\n20 |         if music_string[note_length - 1] == ' ' {\n   |          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9w1pv0h3.rs:21:31\n   |\n21 |             music_vector.push(note_length);\n\
    \   |                               ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n21 |             music_vector.push(note_length.try_into().unwrap());\n\
    \   |                                          ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp9w1pv0h3.rs:26:17\n\
    \   |\n26 |         else if music_string[note_length - 2] == '|' {\n   |     \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9w1pv0h3.rs:27:31\n\
    \   |\n27 |             music_vector.push(note_length);\n   |                \
    \               ^^^^^^^^^^^ expected `isize`"
  stdout: ''
  timestamp: 1659976575
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n    let music_string = music_string.as_str();\n    let mut current_beat\
    \ = 0;\n\n    for note in music_string.chars().filter(|&char| char == 'o' || char\
    \ == '|' || char == '.') {\n        let current_note = note as isize;\n      \
    \  beats.push(current_beat);\n        if note == 'o' {\n            current_beat\
    \ += 4;\n        } else {\n            current_beat += 2;\n        }\n    }\n\n\
    \    return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 4, 8, 12]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnyz_ke34.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split_whitespace().filter(|c|\
    \ *c != '.').collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n \
    \   assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&str` with `char`\n  --> /tmp/tmpd5ided72.rs:11:51\n\
    \   |\n11 |     music_string.split_whitespace().filter(|c| *c != '.').collect()\n\
    \   |                                                   ^^ no implementation for\
    \ `&str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: a value of\
    \ type `Vec<isize>` cannot be built from an iterator over elements of type `&str`\n\
    \    --> /tmp/tmpd5ided72.rs:11:59\n     |\n11   |     music_string.split_whitespace().filter(|c|\
    \ *c != '.').collect()\n     |                                               \
    \            ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = Vec::new();\n\
    \n    for c in music_string.chars() {\n        notes.push(parse_note(c));\n  \
    \  }\n\n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_note` in this scope\n  --> /tmp/tmp0dap5t6f.rs:14:20\n\
    \   |\n14 |         notes.push(parse_note(c));\n   |                    ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Your code goes here\n\
    \    music.to_string().split(\"o|\")[1].split_whitespace().collect()\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `music` in this scope\n  --> /tmp/tmp9kgmqhw9.rs:12:5\n\
    \   |\n12 |     music.to_string().split(\"o|\")[1].split_whitespace().collect()\n\
    \   |     ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut counter = vec![];\n\
    \    music_string.split(|char| char == ' ').for_each(|note| {\n        let mut\
    \ count = 1;\n        let note = note.chars().nth(1);\n        if note == '.'\
    \ {\n            count = 4;\n        }\n        if note == 'o' {\n           \
    \ count = 4;\n        }\n        if note == '|' {\n            count = 2;\n  \
    \      }\n        counter.push(count as isize);\n    });\n    counter\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjvdwqwu6.rs:15:20\n   |\n\
    15 |         if note == '.' {\n   |                    ^^^ expected enum `Option`,\
    \ found `char`\n   |\n   = note: expected enum `Option<char>`\n              found\
    \ type `char`\nhelp: try wrapping the expression in `Some`\n   |\n15 |       \
    \  if note == Some('.') {\n   |                    +++++   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjvdwqwu6.rs:18:20\n   |\n18 |         if note\
    \ == 'o' {\n   |                    ^^^ expected enum `Option`, found `char`\n\
    \   |\n   = note: expected enum `Option<char>`\n              found type `char`\n\
    help: try wrapping the expression in `Some`\n   |\n18 |         if note == Some('o')\
    \ {\n   |                    +++++   +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjvdwqwu6.rs:21:20\n   |\n21 |         if note == '|' {\n   |       \
    \             ^^^ expected enum `Option`, found `char`\n   |\n   = note: expected\
    \ enum `Option<char>`\n              found type `char`\nhelp: try wrapping the\
    \ expression in `Some`\n   |\n21 |         if note == Some('|') {\n   |      \
    \              +++++   +\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_per_note\
    \ = vec![];\n    music_string.split_whitespace().for_each(|note| {\n        note.parse::<Note>().and_then(|note|\
    \ {\n            if note.note == \"o\" {\n                beats_per_note.push(4);\n\
    \            } else {\n                beats_per_note.push(note.beat);\n     \
    \       }\n        })\n    })\n    beats_per_note\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `beats_per_note`\n  --> /tmp/tmpehzhay54.rs:20:7\n\
    \   |\n20 |     })\n   |       ^ help: add `;` here\n21 |     beats_per_note\n\
    \   |     -------------- unexpected token\n\nerror[E0412]: cannot find type `Note`\
    \ in this scope\n  --> /tmp/tmpehzhay54.rs:13:22\n   |\n10 | fn parse_music(music_string:\
    \ String) -> Vec<isize> {\n   |               - help: you might be missing a type\
    \ parameter: `<Note>`\n...\n13 |         note.parse::<Note>().and_then(|note|\
    \ {\n   |                      ^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = Vec::new();\n\n    for c in music_string.chars() {\n        match c {\n  \
    \          'o' => {\n                beats.push(4);\n            }\n         \
    \   'o|' => {\n                beats.push(2);\n            }\n            '.|'\
    \ => {\n                beats.push(1);\n            }\n            _ => (),\n\
    \        }\n    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpx_m3i7f_.rs:18:16\n\
    \   |\n18 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut output: Vec<isize>\
    \ = vec![];\n    for c in music_string.chars() {\n        match c {\n        \
    \    'o' => output.push(isize::from(0)),\n            'o|' => output.push(isize::from(4)),\n\
    \            '.|' => output.push(isize::from(1)),\n            _ => panic!(\"\
    Unknown music note {:?}\", c),\n        }\n    }\n    output\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpvtph2_tp.rs:15:16\n\
    \   |\n15 |             'o|' => output.push(isize::from(4)),\n   |           \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize>\
    \ = Vec::new();\n    for c in music_string.chars() {\n        match c {\n    \
    \        '.' => {\n                beats_vec.push(1);\n            }\n       \
    \     'o' => {\n                beats_vec.push(4);\n            }\n          \
    \  'o|' => {\n                beats_vec.push(2);\n            }\n            _\
    \ => {\n                beats_vec.push(1);\n            }\n        }\n    }\n\
    \    beats_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp4lq6yetp.rs:20:16\n\
    \   |\n20 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Your code here\n\
    \    music_string.chars().map(|&c| {\n        let mut beats = 1;\n        let\
    \ mut last = false;\n        let c_len = c.len();\n        let mut last = false;\n\
    \        if c_len % 2 != 0 {\n            last = true;\n            c_len -= 1;\n\
    \        }\n        if c_len == 0 {\n            beats = 1;\n        }\n     \
    \   if c_len == 1 {\n            beats = 4;\n        }\n        if c_len == 2\
    \ {\n            beats = 2;\n        }\n        if c_len == 3 {\n            beats\
    \ = 1;\n        }\n        if c_len == 4 {\n            beats = 2;\n        }\n\
    \        if c_len == 5 {\n            beats = 1;\n        }\n        if c_len\
    \ == 6 {\n            beats = 2;\n        }\n        if c_len == 7 {\n       \
    \     beats = 2;\n        }\n        if c_len == 8 {\n            beats = 4;\n\
    \        }\n        if c_len == 9 {\n            beats = 4;\n        }\n     \
    \   if c_len == 10 {\n            beats = 4;\n        }\n        if c_len == 11\
    \ {\n            beats = 4;\n        }\n        if c_len == 12 {\n           \
    \ beats = 4;\n        }\n        if c_len == 13 {\n            beats = 4;\n  \
    \      }\n        if c_len == 14 {\n            beats = 4;\n        }\n      \
    \  if c_len == 15 {\n            beats = 4;\n        }\n        if c_len == 16\
    \ {\n            beats = 4;\n        }\n        if c_len == 17 {\n           \
    \ beats = 4;\n        }\n        if c_len == 18 {\n            beats = 4;\n  \
    \      }\n        if c_len == 19 {\n            beats = 4;\n        }\n      \
    \  if c_len == 20 {\n            beats = 4;\n        }\n        if c_len == 21\
    \ {\n            beats = 4;\n        }\n        if c_len == 22 {\n           \
    \ beats = 4;\n        }\n        if c_len == 23 {\n            beats = 4;\n  \
    \      }\n        if c_len == 24 {\n            beats = 4;\n        }\n      \
    \  if c_len == 25 {\n            beats = 4;\n        }\n        if c_len == 26\
    \ {\n            beats = 4;\n        }\n        if c_len == 27 {\n           \
    \ beats = 4;\n        }\n        if c_len == 28 {\n            beats = 4;\n  \
    \      }\n        if c_len == 29 {\n            beats = 4;\n        }\n      \
    \  if c_len == 30 {\n            beats = 4;\n        }\n        if c_len == 31\
    \ {\n            beats = 4;\n        }\n        if c_len == 32 {\n           \
    \ beats = 4;\n        }\n        if c_\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwcpgtwrp.rs:130:3\n\
    \    |\n10  | fn parse_music(music_string: String) -> Vec<isize> {\n    |    \
    \                                                - unclosed delimiter\n11  | \
    \    // Your code here\n12  |     music_string.chars().map(|&c| {\n    |     \
    \                        - unclosed delimiter\n...\n130 | }\n    |   ^\n\nerror:\
    \ expected `{`, found `}`\n   --> /tmp/tmpwcpgtwrp.rs:121:1\n    |\n120 |    \
    \     if c_\n    |         -- this `if` expression has a condition, but no block\n\
    121 | }\n    | ^ expected `{`\n\nerror: expected one of `)`, `,`, `.`, `?`, or\
    \ an operator, found keyword `fn`\n   --> /tmp/tmpwcpgtwrp.rs:123:1\n    |\n121\
    \ | }\n    |  - expected one of `)`, `,`, `.`, `?`, or an operator\n122 | \n123\
    \ | fn main() {\n    | ^^ unexpected token\n\nerror: aborting due to 3 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music: Vec<isize>\
    \ = Vec::new();\n\n    for note in music_string.chars() {\n        if note ==\
    \ 'o' {\n            music.push(4);\n        } else if note == '|' {\n       \
    \     music.push(2);\n        } else if note == '.' {\n            music.push(1);\n\
    \        }\n    }\n\n    music\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp__9ta9ef.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \n    let mut note = String::new();\n    for symbol in music_string {\n      \
    \  note.push_str(&symbol);\n        match symbol {\n            'o' => beats.push(4),\n\
    \            '|' => beats.push(2),\n            '.' => beats.push(1),\n      \
    \      _ => continue,\n        }\n    }\n\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmphspw154u.rs:14:19\n\
    \   |\n14 |     for symbol in music_string {\n   |                   ^^^^^^^^^^^^\
    \ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `String`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmphspw154u.rs:14:9\n   |\n14 |     for symbol in music_string {\n   |\
    \         ^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the\
    \ trait `Sized` is not implemented for `str`\n   = note: all local variables must\
    \ have a statically known size\n   = help: unsized locals are gated as an unstable\
    \ feature\n\nerror[E0277]: the size for values of type `str` cannot be known at\
    \ compilation time\n   --> /tmp/tmphspw154u.rs:14:19\n    |\n14  |     for symbol\
    \ in music_string {\n    |                   ^^^^^^^^^^^^ doesn't have a size\
    \ known at compile-time\n    |\n    = help: the trait `Sized` is not implemented\
    \ for `str`\nnote: required by a bound in `Option`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n   --> /tmp/tmphspw154u.rs:14:5\n\
    \    |\n14  | /     for symbol in music_string {\n15  | |         note.push_str(&symbol);\n\
    16  | |         match symbol {\n17  | |             'o' => beats.push(4),\n...\
    \   |\n21  | |         }\n22  | |     }\n    | |_____^ doesn't have a size known\
    \ at compile-time\n    |\n    = help: the trait `Sized` is not implemented for\
    \ `str`\nnote: required by a bound in `None`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphspw154u.rs:17:13\n   |\n16 |         match symbol {\n   |    \
    \           ------ this expression has type `str`\n17 |             'o' => beats.push(4),\n\
    \   |             ^^^ expected `str`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphspw154u.rs:18:13\n   |\n16 |         match symbol {\n\
    \   |               ------ this expression has type `str`\n17 |             'o'\
    \ => beats.push(4),\n18 |  "
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_array\
    \ = music_string.chars().collect::<Vec<_>>();\n    music_array.sort();\n    let\
    \ mut music_counts = Vec::with_capacity(music_array.len());\n    for (i, c) in\
    \ music_array.into_iter().enumerate() {\n        music_counts.push(i);\n     \
    \   if c == '.' {\n            music_counts.push((i + 3) / 4);\n        }\n  \
    \      if c == 'o' {\n            music_counts.push(4);\n        }\n    }\n  \
    \  music_counts\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7jztoqg4.rs:23:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n23 |     music_counts\n   |     ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut vec: Vec<isize>\
    \ = vec![0; music_string.len()];\n    let mut current_beat = 0;\n    let mut current_note\
    \ = 0;\n    let mut current_interval = 0;\n\n    for c in music_string {\n   \
    \     match c {\n            'o' => current_note += 1,\n            'o|' => current_interval\
    \ += 1,\n            '.|' => current_interval += 1,\n            _ => (),\n  \
    \      }\n        if current_note == 2 {\n            current_beat += 1;\n   \
    \         current_note = 0;\n        } else if current_note == 4 && current_interval\
    \ == 2 {\n            current_interval = 0;\n        } else {\n            vec[current_beat]\
    \ += 1;\n            current_beat = 0;\n            current_interval = 0;\n  \
    \          current_note = 0;\n        }\n    }\n    vec\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpqhas9pgz.rs:19:16\n\
    \   |\n19 |             'o|' => current_interval += 1,\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music = music_string.chars().enumerate().cloned().collect();\n\
    \    let mut result: Vec<isize> = vec![];\n    let mut beat = 0;\n    let mut\
    \ prev_beat = 0;\n    for &(idx, _) in music.iter().skip(1) {\n        let mut\
    \ note = idx;\n        let mut beats = 0;\n        match idx {\n            0x30\
    \ => note = note + 0x30,\n            0x41 => note = note + 0x41,\n          \
    \  0x52 => note = note + 0x52,\n            0x53 => note = note + 0x53,\n    \
    \        0x5b => note = note + 0x5b,\n            0x5c => note = note + 0x5c,\n\
    \            0x5d => note = note + 0x5d,\n            _ => {\n               \
    \ // We cannot safely ignore this note, it is not part of a standard musical scale.\n\
    \                continue;\n            }\n        };\n        let note_is_last\
    \ = note.wrapping_sub(0x20) == 0x20;\n        if note_is_last && beat != prev_beat\
    \ {\n            result.push(beat);\n            beat = 0;\n        }\n      \
    \  beat = beat + 1;\n        prev_beat = beat;\n    }\n    if beat != 0 {\n  \
    \      result.push(beat);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Enumerate<Chars<'_>> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpsx0ht_77.rs:11:50\n     |\n11   |     let music = music_string.chars().enumerate().cloned().collect();\n\
    \     |                                                  ^^^^^^ expected reference,\
    \ found tuple\n     |\n     = note: expected reference `&_`\n                \
    \    found tuple `(usize, char)`\nnote: required by a bound in `cloned`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Enumerate<Chars<'_>>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpsx0ht_77.rs:11:59\n   |\n11 |\
    \        let music = music_string.chars().enumerate().cloned().collect();\n  \
    \ |                                                              ^^^^^^^ method\
    \ cannot be called on `Cloned<Enumerate<Chars<'_>>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Enumerate<Chars<'_>> as Iterator>::Item = &_`\n           which is\
    \ required by `Cloned<Enumerate<Chars<'_>>>: Iterator`\n           `Cloned<Enumerate<Chars<'_>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Enumerate<Chars<'_>>>:\
    \ Iterator`\n\nerror[E0689]: can't call method `wrapping_sub` on ambiguous numeric\
    \ type `{integer}`\n  --> /tmp/tmpsx0ht_77.rs:31:33\n   |\n31 |         let note_is_last\
    \ = note.wrapping_sub(0x20) == 0x20;\n   |                                 ^^^^^^^^^^^^\n\
    \   |\nhelp: you must specify a type for this binding, like `i32`\n   |\n16 |\
    \         let mut note: i32 = idx;\n   |             ~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0599,\
    \ E0689.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beat_count:\
    \ Vec<isize> = vec![];\n\n    let mut current_note = String::new();\n    let mut\
    \ last_note = String::new();\n\n    let mut beats = 0;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' | 'O' | '.' | '.' | '|' => {\n       \
    \         beats += 4;\n                current_note = String::from(&c);\n    \
    \        }\n            '|' | '.' | 'o' | 'O' => {\n                beats += 2;\n\
    \                current_note = String::from(&c);\n            }\n           \
    \ 'o' | 'o' | '.' | '|' => {\n                beats += 1;\n                current_note\
    \ = String::from(&c);\n            }\n            _ => {\n                let\
    \ beat_number = c.to_digit(10) - 1;\n                beat_count.push(beat_number\
    \ * beats);\n                last_note = current_note;\n                current_note\
    \ = String::from(&c);\n                beats = 0;\n            }\n        }\n\
    \    }\n\n    if current_note.is_empty() {\n        beat_count.push(0);\n    }\n\
    \n    beat_count.push(beat_count.len() * beats);\n    last_note.split_whitespace().map(|s|\
    \ s.parse().unwrap()).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<&char>` is not satisfied\n\
    \  --> /tmp/tmpy2wuiovz.rs:21:32\n   |\n21 |                 current_note = String::from(&c);\n\
    \   |                                ^^^^^^^^^^^^ the trait `From<&char>` is not\
    \ implemented for `String`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <String as From<&String>>\n             <String\
    \ as From<&mut str>>\n             <String as From<&str>>\n             <String\
    \ as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n          \
    \   <String as From<char>>\n\nerror[E0277]: the trait bound `String: From<&char>`\
    \ is not satisfied\n  --> /tmp/tmpy2wuiovz.rs:25:32\n   |\n25 |              \
    \   current_note = String::from(&c);\n   |                                ^^^^^^^^^^^^\
    \ the trait `From<&char>` is not implemented for `String`\n   |\n   = help: the\
    \ following other types implement trait `From<T>`:\n             <String as From<&String>>\n\
    \             <String as From<&mut str>>\n             <String as From<&str>>\n\
    \             <String as From<Box<str>>>\n             <String as From<Cow<'a,\
    \ str>>>\n             <String as From<char>>\n\nerror[E0277]: the trait bound\
    \ `String: From<&char>` is not satisfied\n  --> /tmp/tmpy2wuiovz.rs:29:32\n  \
    \ |\n29 |                 current_note = String::from(&c);\n   |             \
    \                   ^^^^^^^^^^^^ the trait `From<&char>` is not implemented for\
    \ `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0369]: cannot subtract `{integer}` from `Option<u32>`\n  --> /tmp/tmpy2wuiovz.rs:32:50\n\
    \   |\n32 |                 let beat_number = c.to_digit(10) - 1;\n   |      \
    \                             -------------- ^ - {integer}\n   |             \
    \                      |\n   |                                   Option<u32>\n\
    \nerror[E0277]: the tr"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec =\n\
    \        music_string.chars().filter_map(|c| match c {\n            'o' => Some(4),\n\
    \            'o|' => Some(2),\n            '.|' => Some(1),\n            _ =>\
    \ None,\n        }).collect();\n    let mut last_beats = beats_vec.clone();\n\
    \    beats_vec.sort_unstable_by(|a, b| a.cmp(b));\n    for beats in beats_vec\
    \ {\n        last_beats.remove(beats);\n    }\n    last_beats.into_iter().map(|beats|\
    \ beats as isize).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp1meg6jr8.rs:14:16\n\
    \   |\n14 |             'o|' => Some(2),\n   |                ^^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut parsed_music:\
    \ Vec<isize> = Vec::new();\n    let mut current_song_start: usize = 0;\n    let\
    \ mut current_song_end: usize = 0;\n\n    let mut music_splitter: Vec<usize> =\
    \ music_string.split_whitespace().collect();\n\n    for music_note in music_splitter\
    \ {\n        if music_note.len() > 1 {\n            if music_note[0] == 'o' {\n\
    \                if current_song_end == 0 {\n                    current_song_start\
    \ = music_note.len();\n                } else if current_song_end != music_note.len()\
    \ {\n                    parsed_music.push(music_note.len() - current_song_end);\n\
    \                    current_song_end = music_note.len();\n                } else\
    \ {\n                    parsed_music.push(music_note.len() - current_song_end);\n\
    \                    current_song_start = music_note.len();\n                }\n\
    \            } else if music_note[0] == 'o|' || music_note[0] == '.|' {\n    \
    \            if current_song_end != 0 {\n                    if music_note.len()\
    \ - current_song_end == 2 {\n                        parsed_music.push(2);\n \
    \                       current_song_end = music_note.len();\n               \
    \     } else if music_note.len() - current_song_end == 1 {\n                 \
    \       parsed_music.push(1);\n                        current_song_end = music_note.len();\n\
    \                    } else if music_note.len() - current_song_end == 4 {\n  \
    \                      parsed_music.push(4);\n                        current_song_end\
    \ = music_note.len();\n                    } else {\n                        parsed_music.push(music_note.len()\
    \ - current_song_end);\n                        current_song_start = music_note.len();\n\
    \                    }\n                } else {\n                    parsed_music.push(music_note.len()\
    \ - current_song_end);\n                    current_song_start = music_note.len();\n\
    \                }\n            } else {\n                panic!(\"unknown note\
    \ {}\", music_note);\n            }\n        } else {\n            panic!(\"unknown\
    \ note {}\", music_note);\n        }\n    }\n    if current_song_start != 0 {\n\
    \        parsed_music.push(current_song_start - music_string.len());\n    }\n\
    \    parsed_music\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpns8shjf7.rs:29:43\n\
    \   |\n29 |             } else if music_note[0] == 'o|' || music_note[0] == '.|'\
    \ {\n   |                                           ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    29 |             } else if music_note[0] == 'o|\" || music_note[0] == \".|' {\n\
    \   |                                           ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0762]:\
    \ unterminated character literal\n  --> /tmp/tmpns8shjf7.rs:29:68\n   |\n29 |\
    \             } else if music_note[0] == 'o|' || music_note[0] == '.|' {\n   |\
    \                                                                    ^^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // TODO: implement function\n\
    \    let music_string = music_string.chars().collect::<String>().trim();\n   \
    \ let mut beats_vec: Vec<isize> = Vec::new();\n\n    // we first split string\
    \ by empty spaces\n    let split_string = music_string.split(\" \").collect::<Vec<&str>>();\n\
    \    for music_element in split_string {\n        // if we find music note then\
    \ we increment our counter\n        if music_element == \"o\" || music_element\
    \ == \"O\" || music_element == \"|\" || music_element == \".\" {\n           \
    \ beats_vec.push(1);\n        } else if music_element == \"o|\" || music_element\
    \ == \"O|\" || music_element == \"|\" {\n            beats_vec.push(0.5);\n  \
    \      } else if music_element == \".|\" || music_element == \".\" {\n       \
    \     beats_vec.push(0.25);\n        } else {\n            panic!(\"Unknown music\
    \ note found: {}\", music_element);\n        }\n    }\n    beats_vec\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjadrxim7.rs:22:28\n   |\n\
    22 |             beats_vec.push(0.5);\n   |                            ^^^ expected\
    \ `isize`, found floating-point number\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjadrxim7.rs:24:28\n   |\n24 |             beats_vec.push(0.25);\n  \
    \ |                            ^^^^ expected `isize`, found floating-point number\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes_vec: Vec<isize>\
    \ = Vec::new();\n    let mut notes_count = 0;\n    for char in music_string {\n\
    \        let note = match char {\n            'o' => notes_count += 1,\n     \
    \       'o|' => notes_count += 0.5,\n            '.|' => notes_count += 0.25,\n\
    \            _ => continue,\n        };\n        notes_vec.push(notes_count);\n\
    \    }\n    notes_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpae_vzws7.rs:16:16\n\
    \   |\n16 |             'o|' => notes_count += 0.5,\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split(\"\
    \ \").map(|item| {\n        if item.len() > 1 {\n            item.chars().filter(|c|\
    \ c != 'o').map(|c| c.to_digit(10)).collect()\n        } else {\n            item.to_digit(10)\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmptzj6fwq2.rs:13:39\n\
    \   |\n13 |             item.chars().filter(|c| c != 'o').map(|c| c.to_digit(10)).collect()\n\
    \   |                                       ^^ no implementation for `&char ==\
    \ char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0599]: no\
    \ method named `to_digit` found for reference `&str` in the current scope\n  -->\
    \ /tmp/tmptzj6fwq2.rs:15:18\n   |\n15 |             item.to_digit(10)\n   |  \
    \                ^^^^^^^^ method not found in `&str`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_str =\
    \ music_string.to_string();\n    music_str.truncate(music_str.len() - 1);\n  \
    \  let mut beats = 0;\n    let mut notes: Vec<isize> = vec![];\n    while music_str.len()\
    \ > 0 {\n        notes.push(music_str.chars().take(3).collect::<Vec<&str>>().len());\n\
    \        music_str.replace(0, 3, String::new());\n        beats += 4;\n    }\n\
    \    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp771v_lnz.rs:16:46\n     |\n16\
    \   |         notes.push(music_str.chars().take(3).collect::<Vec<&str>>().len());\n\
    \     |                                              ^^^^^^^ value of type `Vec<&str>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp771v_lnz.rs:16:20\n\
    \   |\n16 |         notes.push(music_str.chars().take(3).collect::<Vec<&str>>().len());\n\
    \   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |         notes.push(music_str.chars().take(3).collect::<Vec<&str>>().len().try_into().unwrap());\n\
    \   |                                                                        \
    \  ++++++++++++++++++++\n\nerror[E0061]: this function takes 2 arguments but 3\
    \ arguments were supplied\n   --> /tmp/tmp771v_lnz.rs:17:19\n    |\n17  |    \
    \     music_str.replace(0, 3, String::new());\n    |                   ^^^^^^^\
    \ -  -  ------------- supplied 3 arguments\n    |                   |\n    | \
    \                  expected 2 arguments\n    |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.to_owned();\n    music_string.reserve(music_string.len() * 4);\n\
    \    music_string.push_str(\"o|\");\n    let mut beats_vec: Vec<isize> = vec![];\n\
    \    let mut current_beat = 0;\n    loop {\n        match music_string.pop() {\n\
    \            \"o\" => {\n                if current_beat != 4 {\n            \
    \        music_string.push_str(\"o|\");\n                    current_beat += 4;\n\
    \                }\n                beats_vec.push(current_beat);\n          \
    \      current_beat += 4;\n            }\n            \"o|\" => {\n          \
    \      if current_beat != 2 {\n                    music_string.push_str(\"o|\"\
    );\n                    current_beat += 2;\n                }\n              \
    \  beats_vec.push(current_beat);\n                current_beat += 2;\n       \
    \     }\n            \".|\" => {\n                if current_beat != 1 {\n   \
    \                 music_string.push_str(\"o|\");\n                    current_beat\
    \ += 1;\n                }\n                beats_vec.push(current_beat);\n  \
    \              current_beat = 1;\n            }\n            _ => {}\n       \
    \ }\n    }\n    beats_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9u95zw83.rs:18:13\n   |\n\
    17 |         match music_string.pop() {\n   |               ------------------\
    \ this expression has type `Option<char>`\n18 |             \"o\" => {\n   | \
    \            ^^^ expected enum `Option`, found `&str`\n   |\n   = note:   expected\
    \ enum `Option<char>`\n           found reference `&'static str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9u95zw83.rs:26:13\n   |\n17 |         match\
    \ music_string.pop() {\n   |               ------------------ this expression\
    \ has type `Option<char>`\n...\n26 |             \"o|\" => {\n   |           \
    \  ^^^^ expected enum `Option`, found `&str`\n   |\n   = note:   expected enum\
    \ `Option<char>`\n           found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9u95zw83.rs:34:13\n   |\n17 |         match music_string.pop()\
    \ {\n   |               ------------------ this expression has type `Option<char>`\n\
    ...\n34 |             \".|\" => {\n   |             ^^^^ expected enum `Option`,\
    \ found `&str`\n   |\n   = note:   expected enum `Option<char>`\n           found\
    \ reference `&'static str`\n\nwarning: unreachable expression\n  --> /tmp/tmp9u95zw83.rs:45:5\n\
    \   |\n16 | /     loop {\n17 | |         match music_string.pop() {\n18 | |  \
    \           \"o\" => {\n19 | |                 if current_beat != 4 {\n...  |\n\
    43 | |         }\n44 | |     }\n   | |_____- any code following this expression\
    \ is unreachable\n45 |       beats_vec\n   |       ^^^^^^^^^ unreachable expression\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting\
    \ due to 3 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize>\
    \ = Vec::new();\n    let mut last_note = MusicNote::O;\n    let mut last_duration\
    \ = 0;\n    let mut i = 0;\n    let mut last_note_index = 0;\n\n    loop {\n \
    \       let note = if i >= music_string.len() {\n            return beats_vec;\n\
    \        }\n        MusicalNote::from(&music_string[i..]).unwrap();\n        if\
    \ note != last_note {\n            last_duration = music_string.len() - i;\n \
    \           last_note = note;\n            last_note_index = i;\n            i\
    \ += 1;\n        }\n        else {\n            i += 1;\n        }\n        match\
    \ note {\n            MusicNote::O => { beats_vec.push(4); }\n            MusicNote::O\
    \ => {\n                if i < music_string.len() && music_string[i] == MusicNote::O\
    \ {\n                    beats_vec.push(1);\n                }\n             \
    \   else {\n                    beats_vec.push(beats_vec.len() - last_note_index\
    \ + 1);\n                }\n            }\n            MusicNote::O => {\n   \
    \             if i < music_string.len() && music_string[i] == MusicNote::O {\n\
    \                    beats_vec.push(2);\n                }\n                else\
    \ {\n                    beats_vec.push(beats_vec.len() - last_note_index + 2);\n\
    \                }\n            }\n            MusicNote::O => {\n           \
    \     if i < music_string.len() && music_string[i] == MusicNote::O {\n       \
    \             beats_vec.push(1);\n                }\n                else {\n\
    \                    beats_vec.push(beats_vec.len() - last_note_index + 1);\n\
    \                }\n            }\n            MusicNote::O => { beats_vec.push(1);\
    \ }\n            MusicNote::O => {\n                if i < music_string.len()\
    \ && music_string[i] == MusicNote::O {\n                    beats_vec.push(4);\n\
    \                }\n                else {\n                    beats_vec.push(beats_vec.len()\
    \ - last_note_index + 4);\n                }\n            }\n            MusicNote::O\
    \ => {\n                if i < music_string.len() && music_string[i] == MusicNote::O\
    \ {\n                    beats_vec.push(2);\n                }\n             \
    \   else {\n                    beats_vec.push(beats_vec.len() - last_note_index\
    \ + 2);\n                }\n            }\n            MusicNote::O => {\n   \
    \             if i < music_string.len() && music_string[i] == MusicNote::O {\n\
    \                    beats_vec.push(1);\n                }\n                else\
    \ {\n                    beats_vec.push(beats_vec.len() - last_note_index + 1);\n\
    \                }\n            }\n            MusicNote::O => { beats_vec.push(1);\
    \ }\n            Music\n}\n\nfn main() {\n    let candidate = parse_music;\n \
    \   assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5_phzaz2.rs:93:3\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n17 |\
    \     loop {\n   |          - unclosed delimiter\n...\n31 |         match note\
    \ {\n   |                    - this delimiter might not be properly closed...\n\
    ...\n84 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    93 | }\n   |   ^\n\nerror: expected `;`, found `MusicalNote`\n  --> /tmp/tmp5_phzaz2.rs:20:10\n\
    \   |\n20 |         }\n   |          ^ help: add `;` here\n21 |         MusicalNote::from(&music_string[i..]).unwrap();\n\
    \   |         ----------- unexpected token\n\nerror: expected one of `=>`, `@`,\
    \ `if`, or `|`, found `}`\n  --> /tmp/tmp5_phzaz2.rs:84:1\n   |\n83 |        \
    \     Music\n   |                  - expected one of `=>`, `@`, `if`, or `|`\n\
    84 | }\n   | ^ unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `MusicNote`\n  --> /tmp/tmp5_phzaz2.rs:12:25\n   |\n12 |     let mut last_note\
    \ = MusicNote::O;\n   |                         ^^^^^^^^^ use of undeclared type\
    \ `MusicNote`\n\nerror[E0433]: failed to resolve: use of undeclared type `MusicalNote`\n\
    \  --> /tmp/tmp5_phzaz2.rs:21:9\n   |\n21 |         MusicalNote::from(&music_string[i..]).unwrap();\n\
    \   |         ^^^^^^^^^^^ use of undeclared type `MusicalNote`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `MusicNote`\n  --> /tmp/tmp5_phzaz2.rs:32:13\n\
    \   |\n32 |             MusicNote::O => { beats_vec.push(4); }\n   |         \
    \    ^^^^^^^^^ use of undeclared type `MusicNote`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `MusicNote`\n  --> /tmp/tmp5_phzaz2.rs:33:13\n   |\n\
    33 |             MusicNote::O => {\n   |             ^^^^^^^^^ use of undeclared\
    \ type `MusicNote`\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `MusicNote`\n  --> /tmp/tmp5_phzaz2.rs:34:65\n   |\n34 |                 if\
    \ i < music_string.len() && music_string[i] == MusicNote::O {\n   |          \
    \                                                 "
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_per_piece_vec:\
    \ Vec<isize> = vec![];\n    let mut current_beat = 0isize;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => { beats_per_piece_vec.push(current_beat);\
    \ current_beat = 0isize; },\n            'o|' => { beats_per_piece_vec.push(current_beat);\
    \ current_beat = 0isize; },\n            '.|' => { current_beat = beats_per_piece_vec.push(current_beat);\
    \ current_beat = 0isize; },\n            _ => current_beat += 1,\n        }\n\
    \    }\n    beats_per_piece_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpis36up6q.rs:16:16\n\
    \   |\n16 |             'o|' => { beats_per_piece_vec.push(current_beat); current_beat\
    \ = 0isize; },\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beat_counts:\
    \ Vec<isize> = Vec::new();\n    let mut first_beat = true;\n    for note in music_string.chars()\
    \ {\n        match note {\n            'o' => {\n                beat_counts.push(4);\n\
    \                if first_beat {\n                    first_beat = false;\n  \
    \              }\n            }\n            'o|' => {\n                beat_counts.push(2);\n\
    \                if first_beat {\n                    first_beat = false;\n  \
    \              }\n            }\n            '.|' => {\n                beat_counts.push(1);\n\
    \                if first_beat {\n                    first_beat = false;\n  \
    \              }\n            }\n            x => {\n            }\n        }\n\
    \    }\n    beat_counts\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp3wchs13a.rs:21:16\n\
    \   |\n21 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = music_string.chars().collect();\n    beats.sort_by_key(|&x| x);\n    beats.reverse();\n\
    \    beats.iter().take_while(|&x| x != 'o').collect()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmp9swgqo7t.rs:11:54\n     |\n11\
    \   |     let mut beats: Vec<isize> = music_string.chars().collect();\n     |\
    \                                                      ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9swgqo7t.rs:14:39\n\
    \   |\n14 |     beats.iter().take_while(|&x| x != 'o').collect()\n   |       \
    \                                ^^^ expected `isize`, found `char`\n\nerror[E0277]:\
    \ can't compare `&isize` with `char`\n  --> /tmp/tmp9swgqo7t.rs:14:36\n   |\n\
    14 |     beats.iter().take_while(|&x| x != 'o').collect()\n   |              \
    \                      ^^ no implementation for `&isize == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `PartialEq<Rhs>`:\n             f32\n\
    \             f64\n             i128\n             i16\n             i32\n   \
    \          i64\n             i8\n             isize\n           and 6 others\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp9swgqo7t.rs:14:44\n     |\n\
    14   |     beats.iter().take_while(|&x| x != 'o').collect()\n     |          \
    \                                  ^^^^^^^ value of type `Vec<isize>` cannot be\
    \ built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.into_bytes();\n\n    let mut music_string_index = 0;\n    let\
    \ mut beats_per_track = 0;\n    let mut current_track = vec![vec![]];\n    let\
    \ mut current_track_start = 0;\n\n    // Go through each char and parse it into\
    \ beats per track\n    while music_string_index < music_string.len() {\n     \
    \   let mut note_char = '\\0';\n\n        // Parse out note char and check if\
    \ it's valid (a note is single character)\n        let mut char = music_string[music_string_index].to_string();\n\
    \n        if let Some(valid_char) = char.chars().any(|c| c == 'o' || c == '.'\
    \ || c == '|') {\n            note_char = char;\n            music_string_index\
    \ += 1;\n        } else {\n            music_string_index += 1;\n        }\n\n\
    \        // Check if note is valid note (single char)\n        if let Some(valid_char)\
    \ = note_char.chars().any(|c| c == 'o') {\n            // Check if note char is\
    \ 'o'\n            if let Some(valid_char) = note_char.chars().any(|c| c == 'o')\
    \ {\n                // Check if note char is 'o|'\n                if let Some(valid_char)\
    \ = note_char.chars().any(|c| c == '|') {\n                    // Check if note\
    \ char is '.|'\n                    if let Some(valid_char) = note_char.chars().any(|c|\
    \ c == '.') {\n                        current_track[current_track_start].push(i);\n\
    \                    } else {\n                        beats_per_track += 1;\n\
    \                    }\n                } else {\n                    beats_per_track\
    \ += 1;\n                }\n            } else {\n                beats_per_track\
    \ += 1;\n            }\n        } else {\n            beats_per_track += 1;\n\
    \        }\n\n        // Go to next note\n        music_string_index += 1;\n \
    \   }\n\n    if beats_per_track != 4 {\n        beats_per_track += 1;\n    }\n\
    \n    if beats_per_track != 2 {\n        beats_per_track += 1;\n    }\n\n    if\
    \ beats_per_track != 1 {\n        beats_per_track += 1;\n    }\n\n    // Return\
    \ vector of beat numbers for each note\n    current_track.iter().map(|&track|\
    \ track.len()).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpfc1ri115.rs:40:65\n\
    \   |\n40 |                         current_track[current_track_start].push(i);\n\
    \   |                                                                 ^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfc1ri115.rs:25:16\n\
    \   |\n25 |         if let Some(valid_char) = char.chars().any(|c| c == 'o' ||\
    \ c == '.' || c == '|') {\n   |                ^^^^^^^^^^^^^^^^   ------------------------------------------------------\
    \ this expression has type `bool`\n   |                |\n   |               \
    \ expected `bool`, found enum `Option`\n   |\n   = note: expected type `bool`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfc1ri115.rs:26:25\n   |\n20 |         let mut note_char = '\\0';\n \
    \  |                             ---- expected due to this value\n...\n26 |  \
    \           note_char = char;\n   |                         ^^^^ expected `char`,\
    \ found struct `String`\n\nerror[E0599]: no method named `chars` found for type\
    \ `char` in the current scope\n  --> /tmp/tmpfc1ri115.rs:33:45\n   |\n33 |   \
    \      if let Some(valid_char) = note_char.chars().any(|c| c == 'o') {\n   | \
    \                                            ^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `chars` found for type `char` in the current scope\n\
    \  --> /tmp/tmpfc1ri115.rs:35:49\n   |\n35 |             if let Some(valid_char)\
    \ = note_char.chars().any(|c| c == 'o') {\n   |                              \
    \                   ^^^^^ method not found in `char`\n\nerror[E0599]: no method\
    \ named `chars` found for type `char` in the current scope\n  --> /tmp/tmpfc1ri115.rs:37:53\n\
    \   |\n37 |                 if let Some(valid_char) = note_char.chars().any(|c|\
    \ c == '|') {\n   |                                                     ^^^^^\
    \ method not found in `char`\n\nerror[E0599]: no method named `chars` found for\
    \ type `char` in the current scope\n  --> /tmp/tmpfc1ri115.rs:39:57\n   |\n39\
    \ |                     if let Some(valid_char) = note_char.chars().any(|c| c\
    \ == '.') "
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // write your parsing\
    \ here\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphgobxvi9.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n    let mut note = music_string.chars().collect::<String>();\n  \
    \  let mut counter = 0;\n\n    while note != \"\" {\n        let mut index = 0;\n\
    \        note = note.chars().filter(|c| c != \"|\").collect::<String>();\n\n \
    \       match note[..note.len() - 1] {\n            \"o\" => beats.push(counter\
    \ * 4 + 4),\n            \"o|\" => beats.push(counter * 4 + 2),\n            \"\
    .|\" => beats.push(counter),\n            _ => panic!(\"This is not a note!\"\
    ),\n        };\n\n        counter += 1;\n        note = note.chars().filter(|c|\
    \ c != \"|\").collect::<String>();\n    }\n\n    beats\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `char` with `str`\n  --> /tmp/tmpyjhprjdc.rs:17:42\n\
    \   |\n17 |         note = note.chars().filter(|c| c != \"|\").collect::<String>();\n\
    \   |                                          ^^ no implementation for `char\
    \ == str`\n   |\n   = help: the trait `PartialEq<str>` is not implemented for\
    \ `char`\n   = help: the trait `PartialEq` is implemented for `char`\n   = note:\
    \ required because of the requirements on the impl of `PartialEq<&str>` for `&char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyjhprjdc.rs:19:15\n   |\n19 |\
    \         match note[..note.len() - 1] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `str`\n\nerror[E0277]: can't compare `char` with `str`\n\
    \  --> /tmp/tmpyjhprjdc.rs:27:42\n   |\n27 |         note = note.chars().filter(|c|\
    \ c != \"|\").collect::<String>();\n   |                                     \
    \     ^^ no implementation for `char == str`\n   |\n   = help: the trait `PartialEq<str>`\
    \ is not implemented for `char`\n   = help: the trait `PartialEq` is implemented\
    \ for `char`\n   = note: required because of the requirements on the impl of `PartialEq<&str>`\
    \ for `&char`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut vec: Vec<isize>\
    \ = vec![];\n    let mut last_beat = 0;\n    for (i, char) in music_string.chars().enumerate()\
    \ {\n        match char {\n            'o' => {\n                vec.push(i -\
    \ last_beat);\n                last_beat = i;\n            }\n            '|'\
    \ => {\n                if i + 1 != music_string.len() {\n                   \
    \ if music_string[i + 1] == '.' {\n                        vec.push(i - last_beat);\n\
    \                        last_beat = i;\n                    }\n             \
    \   }\n            }\n            _ => {\n                vec.push(i - last_beat);\n\
    \                last_beat = i;\n            }\n        }\n    }\n    vec\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc1c7j3n4.rs:16:26\n   |\n\
    16 |                 vec.push(i - last_beat);\n   |                          ^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |           \
    \      vec.push((i - last_beat).try_into().unwrap());\n   |                  \
    \        +             +++++++++++++++++++++\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpc1c7j3n4.rs:21:24\n   |\n21 |  \
    \                   if music_string[i + 1] == '.' {\n   |                    \
    \    ^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1c7j3n4.rs:22:34\n\
    \   |\n22 |                         vec.push(i - last_beat);\n   |           \
    \                       ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n22 |                         vec.push((i - last_beat).try_into().unwrap());\n\
    \   |                                  +             +++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpc1c7j3n4.rs:28:26\n   |\n28 |  \
    \               vec.push(i - last_beat);\n   |                          ^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n28 |           \
    \      vec.push((i - last_beat).try_into().unwrap());\n   |                  \
    \        +             +++++++++++++++++++++\n\nerror: aborting due to"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars().filter_map(|c|\
    \ match c {\n        'o' => 1,\n        'o|' => 2,\n        '.|' => 3,\n     \
    \   _ => 0,\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmptbdh0kkb.rs:13:12\n\
    \   |\n13 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars()\n\
    \        .map(|c| match c {\n            'o' => 1,\n            '|' => 2,\n  \
    \          '.' => 4,\n            _ => 0,\n        })\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 1, 0, 1, 0, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpynwnjf13.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.trim().to_string();\n    music_string = music_string.replace(\"\
    -\", \".\").replace(\"o\", \"0\");\n    let mut music_string = music_string.chars().collect::<Vec<_>>();\n\
    \    music_string.sort();\n\n    // get rid of empty notes\n    music_string.retain(|&_|\
    \ !char::is_whitespace(_));\n\n    let mut beats: Vec<isize> = music_string.iter().filter(|&_|\
    \ !char::is_whitespace(_)).count();\n\n    for note in music_string {\n      \
    \  let num_beat_after_note = note.chars().filter(|&_| !char::is_whitespace(_)).count();\n\
    \        beats.extend(reverse(num_beat_after_note));\n    }\n\n    beats\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `reverse` in this scope\n  --> /tmp/tmp24zva4v6.rs:23:22\n\
    \   |\n23 |         beats.extend(reverse(num_beat_after_note));\n   |        \
    \              ^^^^^^^ not found in this scope\n\nerror: in expressions, `_` can\
    \ only be used on the left-hand side of an assignment\n  --> /tmp/tmp24zva4v6.rs:17:51\n\
    \   |\n17 |     music_string.retain(|&_| !char::is_whitespace(_));\n   |     \
    \                                              ^ `_` not allowed here\n\nerror:\
    \ in expressions, `_` can only be used on the left-hand side of an assignment\n\
    \  --> /tmp/tmp24zva4v6.rs:19:86\n   |\n19 |     let mut beats: Vec<isize> = music_string.iter().filter(|&_|\
    \ !char::is_whitespace(_)).count();\n   |                                    \
    \                                                  ^ `_` not allowed here\n\n\
    error: in expressions, `_` can only be used on the left-hand side of an assignment\n\
    \  --> /tmp/tmp24zva4v6.rs:22:81\n   |\n22 |         let num_beat_after_note =\
    \ note.chars().filter(|&_| !char::is_whitespace(_)).count();\n   |           \
    \                                                                      ^ `_` not\
    \ allowed here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp24zva4v6.rs:19:33\n\
    \   |\n19 |     let mut beats: Vec<isize> = music_string.iter().filter(|&_| !char::is_whitespace(_)).count();\n\
    \   |                    ----------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `usize`\n   |                    |\n   |      \
    \              expected due to this\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `usize`\n\nerror[E0599]: no method named `chars` found\
    \ for type `char` in the current scope\n  --> /tmp/tmp24zva4v6.rs:22:40\n   |\n\
    22 |         let num_beat_after_note = note.chars().filter(|&_| !char::is_whitespace(_)).count();\n\
    \   |                                        ^^^^^ method not found in `char`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information about an error, try `rustc --expl"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.lines()\n\
    \        .map(|s| {\n            let mut last_beat = s.len();\n            let\
    \ mut note = 0;\n            let mut is_last_beat = false;\n            for c\
    \ in s {\n                note = note.saturating_add(match (c, is_last_beat) {\n\
    \                    ('o', true) => 4,\n                    ('|', true) => 2,\n\
    \                    ('.', true) => 1,\n                    (_, false) => 0,\n\
    \                })\n            }\n            is_last_beat = true;\n       \
    \     note + last_beat\n        })\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&str` is not an iterator\n  --> /tmp/tmp8_63ffdp.rs:16:22\n\
    \   |\n16 |             for c in s {\n   |                      ^ `&str` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait\
    \ `Iterator` is not implemented for `&str`\n   = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `&str`\n\nerror[E0689]: can't\
    \ call method `saturating_add` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp8_63ffdp.rs:17:29\n\
    \   |\n17 |                 note = note.saturating_add(match (c, is_last_beat)\
    \ {\n   |                             ^^^^^^^^^^^^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n14 |             let mut note: i32\
    \ = 0;\n   |                 ~~~~~~~~~~~~~\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `usize`\n    --> /tmp/tmp8_63ffdp.rs:27:10\n\
    \     |\n27   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help:\
    \ the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut note_chords:\
    \ Vec<isize> = music_string.split_whitespace().collect();\n    note_chords\n \
    \       .iter()\n        .filter(|chord| !chord.is_empty())\n        .for_each(|chord|\
    \ {\n            match (chord.chars().skip(1).next().unwrap(), chord.chars().skip(1).next().unwrap())\
    \ {\n                ('o', '.') => note_chords.push(4),\n                ('o',\
    \ 'o') => note_chords.push(2),\n                ('.', 'o') => note_chords.push(2),\n\
    \                (_, _) => {\n                    println!(\"Bad chord: {}\",\
    \ chord);\n                    println!(\"Invalid chord format: {}\", chord);\n\
    \                }\n            }\n        });\n    note_chords\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpmj4vsdcv.rs:11:71\n     |\n11\
    \   |     let mut note_chords: Vec<isize> = music_string.split_whitespace().collect();\n\
    \     |                                                                      \
    \ ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0599]: no method named `is_empty` found for\
    \ reference `&&isize` in the current scope\n  --> /tmp/tmpmj4vsdcv.rs:14:32\n\
    \   |\n14 |         .filter(|chord| !chord.is_empty())\n   |                 \
    \               ^^^^^^^^ method not found in `&&isize`\n\nerror[E0599]: no method\
    \ named `chars` found for reference `&isize` in the current scope\n  --> /tmp/tmpmj4vsdcv.rs:16:26\n\
    \   |\n16 |             match (chord.chars().skip(1).next().unwrap(), chord.chars().skip(1).next().unwrap())\
    \ {\n   |                          ^^^^^ method not found in `&isize`\n\nerror[E0599]:\
    \ no method named `chars` found for reference `&isize` in the current scope\n\
    \  --> /tmp/tmpmj4vsdcv.rs:16:65\n   |\n16 |             match (chord.chars().skip(1).next().unwrap(),\
    \ chord.chars().skip(1).next().unwrap()) {\n   |                             \
    \                                    ^^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_counter\
    \ = vec![0];\n    let music_notes = music_string.chars().enumerate();\n    for\
    \ note in music_notes {\n        let current_beat = note.1;\n        let current_note_length\
    \ = note.0;\n        beats_counter.push(beats_counter.last() + current_note_length);\n\
    \    }\n    beats_counter\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `usize` to `Option<&{integer}>`\n  --> /tmp/tmptq_agjcf.rs:16:49\n\
    \   |\n16 |         beats_counter.push(beats_counter.last() + current_note_length);\n\
    \   |                            -------------------- ^ ------------------- usize\n\
    \   |                            |\n   |                            Option<&{integer}>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Write your code here\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4r8f67al.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.trim_left();\n    let mut music_string_list = music_string.split('|');\n\
    \    let mut music_list: Vec<Vec<isize>> = music_string_list.into_iter().map(\n\
    \        |mut music_string| {\n            music_string\n                .trim_left()\n\
    \                .split(|&mut c| c != 'o')\n                .collect::<Vec<_>>()\n\
    \        }\n    ).collect();\n    music_list = music_list.into_iter().map(\n \
    \       |music_list| {\n            music_list\n                .into_iter()\n\
    \                .map(|mut music_item| {\n                    if music_item ==\
    \ 'o' {\n                        music_item\n                            .parse::<isize>()\n\
    \                            .expect(\"Music string should be valid number\")\n\
    \                    }\n                    else {\n                        music_item\n\
    \                            .parse::<isize>()\n                            .expect(\"\
    Music string should be valid number\")\n                            / 4\n    \
    \                }\n                })\n                .collect()\n        }\n\
    \    ).collect();\n    let mut music_total_length = 0;\n    for mut music_length\
    \ in music_list {\n        music_total_length += music_length\n    }\n    music_list.iter().map(|music_length|\
    \ {\n        music_length\n    }).sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated associated function `core::str::<impl str>::trim_left`:\
    \ superseded by `trim_start`\n  --> /tmp/tmpi5gdr4f7.rs:11:41\n   |\n11 |    \
    \ let mut music_string = music_string.trim_left();\n   |                     \
    \                    ^^^^^^^^^ help: replace the use of the deprecated associated\
    \ function: `trim_start`\n   |\n   = note: `#[warn(deprecated)]` on by default\n\
    \nwarning: use of deprecated associated function `core::str::<impl str>::trim_left`:\
    \ superseded by `trim_start`\n  --> /tmp/tmpi5gdr4f7.rs:16:18\n   |\n16 |    \
    \             .trim_left()\n   |                  ^^^^^^^^^ help: replace the\
    \ use of the deprecated associated function: `trim_start`\n\nerror[E0631]: type\
    \ mismatch in closure arguments\n    --> /tmp/tmpi5gdr4f7.rs:17:18\n     |\n17\
    \   |                 .split(|&mut c| c != 'o')\n     |                  ^^^^^\
    \ ----------------- found signature of `fn(&mut _) -> _`\n     |             \
    \     |\n     |                  expected signature of `fn(char) -> _`\n     |\n\
    \     = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `[closure@/tmp/tmpi5gdr4f7.rs:17:24: 17:41]`\nnote: required by a bound\
    \ in `core::str::<impl str>::split`\n\nerror[E0599]: the method `collect` exists\
    \ for struct `std::str::Split<'_, [closure@/tmp/tmpi5gdr4f7.rs:17:24: 17:41]>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpi5gdr4f7.rs:18:18\n\
    \    |\n17  |                   .split(|&mut c| c != 'o')\n    |             \
    \             ----------------- doesn't satisfy `_: Pattern<'_>`\n18  |      \
    \             .collect::<Vec<_>>()\n    |                    ^^^^^^^ method cannot\
    \ be called on `std::str::Split<'_, [closure@/tmp/tmpi5gdr4f7.rs:17:24: 17:41]>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `[closure@/tmp/tmpi5gdr4f7.rs:17:24: 17:41]:\
    \ Pattern<'_>`\n            which is required by `std::str::Split<'_, [closure@/tmp/tmpi5gdr4f7.rs:17:24:\
    \ 17:41]>: Iterator`\n            `std::str::Split<'_, [closure@/tmp/tmpi5gdr4f7.rs:17:24:\
    \ 17:41]>: Iterator`"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .split_whitespace()\n        .map(|note| note.parse::<usize>())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `Result<usize, ParseIntError>`\n    --> /tmp/tmpvjjtv2xo.rs:14:10\n\
    \     |\n14   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=Result<usize, ParseIntError>>`\n\
    \     |\n     = help: the trait `FromIterator<Result<usize, ParseIntError>>` is\
    \ not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is\
    \ implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = Vec::new();\n\
    \n    // We are going to create all possible notes combinations\n    // and than\
    \ sum up amount of beats for each of them\n    for note in music_string\n    \
    \    .chars()\n        // We skip whitespaces at beginning\n        .skip_while(|&c|\
    \ !c.is_whitespace())\n        .take_while(|&c| !c.is_ascii_digit())\n       \
    \ // We are going to skip over all remaining non-whitespaces and numbers\n   \
    \     .skip_while(|&c| !c.is_whitespace() && !c.is_ascii_digit())\n        .filter(|c|\
    \ !c.is_ascii_digit())\n        // We create all possible combinations using recursion\n\
    \        .chain(create_notes)\n        // We filter out notes that consist of\
    \ only whitespace or only digits\n        .filter(|c| !c.is_whitespace() && c.is_ascii_digit())\n\
    \        // We sum up amount of beats for all possible notes\n        .sum::<isize>()\n\
    \    {\n        notes.push(note);\n    }\n\n    // We count how many beats do\
    \ note last\n    let mut beats = notes.iter().map(|note| {\n        let mut beat\
    \ = 0;\n\n        // We create list of all possible combinations using recursion\n\
    \        for combination in create_notes(note, notes.len()) {\n            //\
    \ We increase beat value with amount of beats from last note\n            beat\
    \ += combination;\n        }\n\n        beat\n    }).sum();\n\n    // We are going\
    \ to take care of remaining notes that lasts more than 4 beats\n    // because\
    \ they may be present in some octaves only\n    for note in notes\n        .iter()\n\
    \        // We are going to skip over all remaining non-whitespaces and numbers\n\
    \        .skip_while(|&c| !c.is_whitespace() && !c.is_ascii_digit())\n       \
    \ // We are going to filter out notes that consist of only whitespace or only\
    \ digits\n        .filter(|c| !c.is_whitespace() && c.is_ascii_digit())\n    \
    \    // We are going to skip over all remaining non-whitespace and numbers\n \
    \       .skip_while(|&c| !c.is_whitespace() && !c.is_ascii_digit())\n        //\
    \ We are going to filter out notes that consist of only whitespace or only digits\n\
    \        .filter(|c| !c.is_whitespace() && !c.is_ascii_digit())\n        // We\
    \ are going to filter out notes that consist of only whitespace or only digits\n\
    \        .filter(|c| !c.is_whitespace() && !c.is_ascii_digit())\n        // We\
    \ are going to take care of octaves that lasts more than 4 beats\n        .filter(|c|\
    \ !c.is_ascii_digit() && c.\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpjzpltsic.rs:61:16\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n61 |         .filter(|c| !c.is_ascii_digit() && c.\n   |    \
    \            ^ unclosed delimiter\n62 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: unexpected token: `)`\n  --> /tmp/tmpjzpltsic.rs:62:1\n   |\n62 | }\n\
    \   | ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpjzpltsic.rs:62:1\n  \
    \ |\n62 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value `create_notes`\
    \ in this scope\n  --> /tmp/tmpjzpltsic.rs:24:16\n   |\n24 |         .chain(create_notes)\n\
    \   |                ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `create_notes` in this scope\n  --> /tmp/tmpjzpltsic.rs:38:28\n\
    \   |\n38 |         for combination in create_notes(note, notes.len()) {\n   |\
    \                            ^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the trait bound `isize: Sum<char>` is not satisfied\n    --> /tmp/tmpjzpltsic.rs:28:10\n\
    \     |\n28   |         .sum::<isize>()\n     |          ^^^ the trait `Sum<char>`\
    \ is not implemented for `isize`\n     |\n     = help: the following other types\
    \ implement trait `Sum<A>`:\n               <f32 as Sum<&'a f32>>\n          \
    \     <f32 as Sum>\n               <f64 as Sum<&'a f64>>\n               <f64\
    \ as Sum>\n               <i128 as Sum<&'a i128>>\n               <i128 as Sum>\n\
    \               <i16 as Sum<&'a i16>>\n               <i16 as Sum>\n         \
    \    and 20 others\nnote: required by a bound in `std::iter::Iterator::sum`\n\n\
    error[E0277]: `isize` is not an iterator\n  --> /tmp/tmpjzpltsic.rs:15:17\n  \
    \ |\n15 |       for note in music_string\n   |  _________________^\n16 | |   \
    \      .chars()\n17 | |         // We skip whitespaces at beginning\n18 | |  \
    \       .skip_while(|&c| !c.is_whitespace())\n...  |\n27 | |         // We sum\
    \ up amount of beats for all possible notes\n28 | |         .sum::<isize>()\n\
    \   | |_______________________^ `isize` is not an iterator\n   |\n   = h"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut result = Vec::new();\n\
    \    let mut notes = music_string.as_bytes()\n        .iter()\n        .map(|&b|\
    \ {\n            let mut temp = b;\n            let c = temp.chars().next();\n\
    \            match c {\n                Some('o') => {\n                    temp\
    \ = b + 'o'.to_vec();\n                    temp[1] = '|'.to_vec();\n         \
    \       }\n                Some('|') => {\n                    temp = b + '|'.to_vec();\n\
    \                    temp[0] = 'o'.to_vec();\n                }\n            \
    \    Some('.') => {\n                    temp = b + '.'.to_vec();\n          \
    \          temp[1] = '|'.to_vec();\n                }\n                _ => panic!(\"\
    Music string contains invalid character, aborting parsing\"),\n            }\n\
    \            temp\n        })\n        .collect();\n    for b in notes {\n   \
    \     notes.retain(|note| !note.eq(b));\n        result.push(notes.count());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `u8` in the current\
    \ scope\n  --> /tmp/tmp9o9ub6sa.rs:16:26\n   |\n16 |             let c = temp.chars().next();\n\
    \   |                          ^^^^^ method not found in `u8`\n\nerror[E0599]:\
    \ no method named `to_vec` found for type `char` in the current scope\n  --> /tmp/tmp9o9ub6sa.rs:19:36\n\
    \   |\n19 |                     temp = b + 'o'.to_vec();\n   |               \
    \                     ^^^^^^ method not found in `char`\n\nerror[E0608]: cannot\
    \ index into a value of type `u8`\n  --> /tmp/tmp9o9ub6sa.rs:20:21\n   |\n20 |\
    \                     temp[1] = '|'.to_vec();\n   |                     ^^^^^^^\n\
    \nerror[E0599]: no method named `to_vec` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp9o9ub6sa.rs:20:35\n   |\n20 |                     temp[1]\
    \ = '|'.to_vec();\n   |                                   ^^^^^^ method not found\
    \ in `char`\n\nerror[E0599]: no method named `to_vec` found for type `char` in\
    \ the current scope\n  --> /tmp/tmp9o9ub6sa.rs:23:36\n   |\n23 |             \
    \        temp = b + '|'.to_vec();\n   |                                    ^^^^^^\
    \ method not found in `char`\n\nerror[E0608]: cannot index into a value of type\
    \ `u8`\n  --> /tmp/tmp9o9ub6sa.rs:24:21\n   |\n24 |                     temp[0]\
    \ = 'o'.to_vec();\n   |                     ^^^^^^^\n\nerror[E0599]: no method\
    \ named `to_vec` found for type `char` in the current scope\n  --> /tmp/tmp9o9ub6sa.rs:24:35\n\
    \   |\n24 |                     temp[0] = 'o'.to_vec();\n   |                \
    \                   ^^^^^^ method not found in `char`\n\nerror[E0599]: no method\
    \ named `to_vec` found for type `char` in the current scope\n  --> /tmp/tmp9o9ub6sa.rs:27:36\n\
    \   |\n27 |                     temp = b + '.'.to_vec();\n   |               \
    \                     ^^^^^^ method not found in `char`\n\nerror[E0608]: cannot\
    \ index into a value of type `u8`\n  --> /tmp/tmp9o9ub6sa.rs:28:21\n   |\n28 |\
    \                     temp[1] = '|'.to_vec();\n   |                     ^^^^^^^\n\
    \nerror[E0599]: no method named `to_vec` found for type `char` in the current\
    \ scope\n  --> /"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    let mut note = String::from(\"\");\n    let mut note_count = vec![0];\n \
    \   let mut last_note = String::from(\"\");\n    music_string.split_whitespace().for_each(|c|\
    \ {\n        match c {\n            'o' | 'o|' => note = c.to_string(),\n    \
    \        '.' | '.|' => note_count = note_count.iter().cloned().collect(),\n  \
    \          _ => note_count = note_count.iter().map(|x| x + 1).collect(),\n   \
    \     }\n    });\n    last_note = note;\n    music_string.split_whitespace().for_each(|c|\
    \ {\n        match c {\n            'o' | 'o|' => note = c.to_string(),\n    \
    \        '.' | '.|' => note_count = note_count.iter().cloned().collect(),\n  \
    \          _ => {\n                let note_count = note_count.iter().cloned().collect();\n\
    \                let beat = if note_count == 0 || note_count == 1 {\n        \
    \            beats\n                } else {\n                    beats.last().unwrap()\
    \ + (4 - (last_note == note || note.contains('|')))\n                };\n    \
    \            beats.push(beat);\n                note_count = vec![0];\n      \
    \          last_note = String::from(\"\");\n                note = c.to_string();\n\
    \            }\n        }\n    });\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp5dr1x9cl.rs:17:22\n\
    \   |\n17 |             'o' | 'o|' => note = c.to_string(),\n   |            \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .lines()\n        .map(|s| s.chars())\n        .map(|c| {\n            let\
    \ mut note = 0;\n            if c[0] >= 'A' && c[0] <= 'G' {\n               \
    \ if c[1] == '#' {\n                    note = 'g';\n                } else if\
    \ c[1] == 'b' {\n                    note = 'a';\n                } else {\n \
    \                   note = c[1] as i8;\n                }\n            }\n   \
    \         if c[0] == 'w' {\n                note = note * 2;\n            }\n\
    \            note\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpw_txa05_.rs:16:16\n\
    \   |\n16 |             if c[0] >= 'A' && c[0] <= 'G' {\n   |                ^^^^\n\
    \nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  --> /tmp/tmpw_txa05_.rs:16:31\n\
    \   |\n16 |             if c[0] >= 'A' && c[0] <= 'G' {\n   |                \
    \               ^^^^\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n\
    \  --> /tmp/tmpw_txa05_.rs:17:20\n   |\n17 |                 if c[1] == '#' {\n\
    \   |                    ^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_txa05_.rs:18:28\n\
    \   |\n15 |             let mut note = 0;\n   |                            - expected\
    \ due to this value\n...\n18 |                     note = 'g';\n   |         \
    \                   ^^^ expected integer, found `char`\n\nerror[E0608]: cannot\
    \ index into a value of type `Chars<'_>`\n  --> /tmp/tmpw_txa05_.rs:19:27\n  \
    \ |\n19 |                 } else if c[1] == 'b' {\n   |                      \
    \     ^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_txa05_.rs:20:28\n\
    \   |\n15 |             let mut note = 0;\n   |                            - expected\
    \ due to this value\n...\n20 |                     note = 'a';\n   |         \
    \                   ^^^ expected integer, found `char`\n\nerror[E0608]: cannot\
    \ index into a value of type `Chars<'_>`\n  --> /tmp/tmpw_txa05_.rs:22:28\n  \
    \ |\n22 |                     note = c[1] as i8;\n   |                       \
    \     ^^^^\n\nerror[E0608]: cannot index into a value of type `Chars<'_>`\n  -->\
    \ /tmp/tmpw_txa05_.rs:25:16\n   |\n25 |             if c[0] == 'w' {\n   |   \
    \             ^^^^\n\nerror: aborting due to 8 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0608.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n    let mut current_beats: isize = 0;\n\n    for note in music_string.chars()\
    \ {\n        match note {\n            'o' => {\n                beats.push(current_beats);\n\
    \                current_beats = 0;\n            }\n            'o|' => {\n  \
    \              beats.push(current_beats);\n                current_beats += 2;\n\
    \            }\n            '.|' => {\n                beats.push(current_beats);\n\
    \                current_beats += 1;\n            }\n            _ => {\n    \
    \            current_beats += 1;\n            }\n        }\n    }\n    beats.push(current_beats);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpnx722dqa.rs:20:16\n\
    \   |\n20 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_vec =\
    \ Vec::new();\n    let mut current_beat = 0;\n    let mut current_beat_piece =\
    \ 0;\n    let mut current_note = String::new();\n    let mut current_note_piece\
    \ = 0;\n    let mut current_note_octave = String::new();\n\n    for note in music_string.chars()\
    \ {\n        let mut last_beat_piece = 0;\n\n        // if we found the beginning\
    \ of next note\n        if note == '.' {\n            last_beat_piece = current_beat_piece;\n\
    \            current_beat_piece = 0;\n            current_note_piece = 0;\n  \
    \          current_note_octave = String::new();\n            current_beat = current_beat\
    \ + 1;\n            music_vec.push(current_beat);\n        } else {\n        \
    \    // if we found the end of next note\n            if note == 'o' {\n     \
    \           // save the octave of current note if it has one\n               \
    \ if let Ok(octave) = current_note_octave.parse::<i32>() {\n                 \
    \   music_vec.push((current_beat - last_beat_piece) / octave);\n             \
    \   } else {\n                    music_vec.push(0);\n                }\n\n  \
    \              // reset current note\n                current_note = String::new();\n\
    \                current_beat_piece = 0;\n                current_note_piece =\
    \ 0;\n                current_note_octave = String::new();\n            } else\
    \ {\n                // otherwise we parse this note\n                let mut\
    \ last_note_piece = 0;\n                // if we had previous note we check if\
    \ it\n                // is quarter note or half note\n                if let\
    \ Ok(note) = current_note.parse::<String>() {\n                    let octave:\
    \ Option<i32> = note.last().map(|c| c.to_digit(10));\n                    let\
    \ note_piece = if let Some(p) = octave.cloned() {\n                        note.clone()\
    \ + &format!(\"{}\", p)\n                    } else {\n                      \
    \  note.clone()\n                    };\n                    if note_piece ==\
    \ '.' {\n                        last_note_piece = current_beat_piece;\n     \
    \                   current_beat_piece = 0;\n                        current_note_piece\
    \ = note_piece;\n                        current_note_octave = octave;\n     \
    \                   current_beat = current_beat + 1;\n                    } else\
    \ {\n                        if note_piece == 'o' {\n                        \
    \    if let Ok(octave) = octave.parse::<i32>() {\n                           \
    \     last_note_piece = (current_beat - last_beat_piece) / octave;\n         \
    \                   } else {\n                                last_note_piece\
    \ = 0;\n                            }\n                        } else {\n    \
    \                        if let Ok(note) = note.parse::<String\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpvv22b1f0.rs:80:3\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n18 |\
    \     for note in music_string.chars() {\n   |                               \
    \       - unclosed delimiter\n...\n29 |         } else {\n   |               \
    \ - unclosed delimiter\n...\n44 |             } else {\n   |                 \
    \   - unclosed delimiter\n...\n49 |                 if let Ok(note) = current_note.parse::<String>()\
    \ {\n   |                                                                  - unclosed\
    \ delimiter\n...\n62 |                     } else {\n   |                    \
    \        - unclosed delimiter\n...\n69 |                         } else {\n  \
    \ |                                - this delimiter might not be properly closed...\n\
    70 |                             if let Ok(note) = note.parse::<String\n71 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n80 | }\n\
    \   |   ^\n\nerror: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or\
    \ `>`, found `}`\n  --> /tmp/tmpvv22b1f0.rs:71:1\n   |\n70 |                 \
    \            if let Ok(note) = note.parse::<String\n   |                     \
    \                                             - expected one of 9 possible tokens\n\
    71 | }\n   | ^ unexpected token\n   |\nhelp: you might have meant to end the type\
    \ parameters here\n   |\n70 |                             if let Ok(note) = note.parse::<String>\n\
    \   |                                                                  +\n\nerror[E0599]:\
    \ `String` is not an iterator\n   --> /tmp/tmpvv22b1f0.rs:50:52\n    |\n50  |\
    \                       let octave: Option<i32> = note.last().map(|c| c.to_digit(10));\n\
    \    |                                                      ^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \       "
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut note_counts\
    \ = Vec::new();\n    let mut note_count = -1;\n\n    for (idx, note) in music_string.chars().enumerate()\
    \ {\n        if note == \"o\" {\n            note_count += 4;\n        } else\
    \ {\n            note_count += 2;\n        }\n\n        note_counts.push(note_count);\n\
    \    }\n\n    return note_counts;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6mc29p1k.rs:15:20\n   |\n\
    15 |         if note == \"o\" {\n   |                    ^^^ expected `char`,\
    \ found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single\
    \ quotes\n   |\n15 |         if note == 'o' {\n   |                    ~~~\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = vec![];\n\
    \    let mut previous_note = String::new();\n    let mut current_note = String::new();\n\
    \    let mut current_beat = 0;\n    let mut last_note = String::new();\n    let\
    \ mut last_beat = 0;\n    for note in music_string.chars() {\n        if note\
    \ == 'o' || note == '|' || note == '.' {\n            if previous_note.len() >\
    \ 0 {\n                notes.push(current_beat - last_beat);\n               \
    \ notes.push(current_beat - last_beat);\n                notes.push(current_beat\
    \ - last_beat);\n                notes.push(current_beat - last_beat);\n     \
    \       }\n            previous_note = current_note;\n            current_note\
    \ = String::new();\n            current_beat = 0;\n        }\n        current_note\
    \ += note.to_string();\n        last_note = note;\n        last_beat = current_beat;\n\
    \    }\n    if !current_note.len() > 0 {\n        notes.push(current_beat - last_beat);\n\
    \    }\n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzmme6fw4.rs:29:25\n   |\n\
    29 |         current_note += note.to_string();\n   |                         ^^^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&str`,\
    \ found struct `String`\n   |                         help: consider borrowing\
    \ here: `&note.to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzmme6fw4.rs:30:21\n\
    \   |\n15 |     let mut last_note = String::new();\n   |                     \
    \    ------------- expected due to this value\n...\n30 |         last_note = note;\n\
    \   |                     ^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut parsed_music\
    \ = Vec::new();\n    for symbol in music_string {\n        parsed_music.push(\n\
    \            match symbol {\n                'o' => 1,\n                'o|' =>\
    \ 2,\n                '.|' => 1,\n                _ => 0,\n            }\n   \
    \     );\n    }\n    parsed_music\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpm0ig6hzz.rs:16:20\n\
    \   |\n16 |                 'o|' => 2,\n   |                    ^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.to_string();\n\n    let mut note_counts: Vec<isize> = Vec::new();\n\
    \n    // O is special case - it represents whole note\n    if music_string.starts_with(\"\
    o o\") {\n        for note in music_string.split_whitespace() {\n            if\
    \ !note.contains(\"|\") {\n                note_counts.push(4);\n            \
    \    continue;\n            }\n\n            let note_name = note.split_whitespace()[0];\n\
    \            let note_count: isize = note.split_whitespace().count();\n      \
    \      let number_of_beats: isize = 2;\n\n            if note_name.contains(\"\
    |\") {\n                note_counts.push(note_count);\n                continue;\n\
    \            }\n\n            // O is special case - it represents whole note\n\
    \            if note_name == \"o\" {\n                note_counts.push(4);\n \
    \               continue;\n            }\n\n            let note_to_beats: Vec<isize>\
    \ = note.split_whitespace()\n                .iter()\n                .map(|note_name|\
    \ note_name_to_beats(note_name))\n                .collect();\n\n            let\
    \ number_of_beats_per_note = note_to_beats.iter().fold(1, |acc, note_to_beats|\
    \ {\n                acc + note_to_beats.len() as isize\n            });\n\n \
    \           note_counts.push(number_of_beats_per_note);\n        }\n    }\n\n\
    \    // O is special case - it represents whole note\n    if music_string.starts_with(\"\
    o\") {\n        for note in music_string.split_whitespace() {\n            if\
    \ !note.contains(\"|\") {\n                note_counts.push(4);\n            \
    \    continue;\n            }\n\n            let note_name = note.split_whitespace()[0];\n\
    \            let note_count: isize = note.split_whitespace().count();\n\n    \
    \        // O is special case - it represents whole note\n            if note_name\
    \ == \"o\" {\n                note_counts.push(4);\n                continue;\n\
    \            }\n\n            let note_to_beats: Vec<isize> = note.split_whitespace()\n\
    \                .iter()\n                .map(|note_name| note_name_to_beats(note_name))\n\
    \                .collect();\n\n            note_counts.push(note_count);\n  \
    \      }\n    }\n\n    // O is special case - it represents whole note\n    if\
    \ music_string.starts_with(\".|\") {\n        for note in music_string.split_whitespace()\
    \ {\n            if !note.contains(\"|\") {\n                note_counts.push(1);\n\
    \                continue;\n            }\n\n            let note_name = note.split_whitespace()[0];\n\
    \            let note_count: isize = note.split_whitespace().count();\n\n    \
    \        // O is special case - it represents whole note\n            if note_name\
    \ == \"o\" {\n                note_counts.push(1);\n                continue\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpy0errp54.rs:101:3\n\
    \    |\n10  | fn parse_music(music_string: String) -> Vec<isize> {\n    |    \
    \                                                - unclosed delimiter\n...\n78\
    \  |     if music_string.starts_with(\".|\") {\n    |                        \
    \               - unclosed delimiter\n79  |         for note in music_string.split_whitespace()\
    \ {\n    |                                                     - unclosed delimiter\n\
    ...\n89  |             if note_name == \"o\" {\n    |                        \
    \         - this delimiter might not be properly closed...\n...\n92  | }\n   \
    \ | - ...as it matches this but it has different indentation\n...\n101 | }\n \
    \   |   ^\n\nerror[E0425]: cannot find function `note_name_to_beats` in this scope\n\
    \  --> /tmp/tmpy0errp54.rs:40:34\n   |\n40 |                 .map(|note_name|\
    \ note_name_to_beats(note_name))\n   |                                  ^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `note_name_to_beats`\
    \ in this scope\n  --> /tmp/tmpy0errp54.rs:70:34\n   |\n70 |                 .map(|note_name|\
    \ note_name_to_beats(note_name))\n   |                                  ^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n\
    \  --> /tmp/tmpy0errp54.rs:23:29\n   |\n23 |             let note_name = note.split_whitespace()[0];\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy0errp54.rs:24:37\n   |\n24 |             let\
    \ note_count: isize = note.split_whitespace().count();\n   |                 \
    \            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |                             |\n   |                             expected\
    \ due to this\n   |\nhelp: you can convert a `usize` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n24 |             let note_count: isize\
    \ = note.split_whitespace().count().try_into().unwrap();\n   |               \
    \                                              "
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n    for (i, letter) in music_string.chars().enumerate() {\n     \
    \   match letter {\n            'o' => beats.push(i / 4),\n            'o|' =>\
    \ beats.push(i / 2),\n            '.|' => beats.push(i / 1),\n            _ =>\
    \ {}\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp85usjt4r.rs:15:16\n\
    \   |\n15 |             'o|' => beats.push(i / 2),\n   |                ^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars()\n\
    \        .filter(|c| *c != 'o')\n        .filter(|c| *c != '|')\n        .filter(|c|\
    \ *c != '.')\n        .map(|c| *c as isize)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp_jqfgkkc.rs:15:18\n\
    \   |\n15 |         .map(|c| *c as isize)\n   |                  ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    let mut beats_str = music_string.as_bytes();\n    let mut last = -1;\n  \
    \  let mut i = 0;\n\n    while !beats_str.contains(&b'|') {\n        if beats_str.len()\
    \ <= i {\n            break;\n        }\n\n        let note = note_to_int(&beats_str[i\
    \ .. i + 1]);\n\n        if note != last {\n            beats.push_back(last);\n\
    \        }\n\n        last = note;\n        i += 1;\n    }\n\n    beats.push_back(last);\n\
    \n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `note_to_int` in this scope\n  --> /tmp/tmplfgv1el8.rs:21:20\n\
    \   |\n21 |         let note = note_to_int(&beats_str[i .. i + 1]);\n   |    \
    \                ^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmplfgv1el8.rs:24:19\n\
    \   |\n24 |             beats.push_back(last);\n   |                   ^^^^^^^^^\
    \ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found\
    \ for struct `Vec<_>` in the current scope\n  --> /tmp/tmplfgv1el8.rs:31:11\n\
    \   |\n31 |     beats.push_back(last);\n   |           ^^^^^^^^^ method not found\
    \ in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split(\"\
    o\").map(|note| {\n        if note == \".\" {\n            1\n        } else if\
    \ note == \"o|\" {\n            2\n        } else if note == \"|\" {\n       \
    \     4\n        } else {\n            0\n        }\n    }).collect()\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpelc1egxf.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec =\
    \ Vec::new();\n    for mut s in music_string.chars().skip_while(|c| *c != '|')\
    \ {\n        let mut note = match s.as_str() {\n            \"o\" | \"o|\" =>\
    \ 1,\n            \".|\" => 2,\n            _ => 0,\n        };\n        let beats\
    \ = note / 4;\n        beats_vec.push(beats);\n        s = &s[beats..].to_ascii_lowercase().chars().next();\n\
    \    }\n    beats_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_str` found for type `char` in the current\
    \ scope\n  --> /tmp/tmp6alv73nd.rs:13:32\n   |\n13 |         let mut note = match\
    \ s.as_str() {\n   |                                ^^^^^^ method not found in\
    \ `char`\n\nerror[E0608]: cannot index into a value of type `char`\n  --> /tmp/tmp6alv73nd.rs:20:14\n\
    \   |\n20 |         s = &s[beats..].to_ascii_lowercase().chars().next();\n   |\
    \              ^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut output_vec:\
    \ Vec<isize> = vec![];\n\n    for music_note in music_string.chars() {\n     \
    \   match music_note {\n            'o' => output_vec.push(4),\n            'o|'\
    \ => output_vec.push(2),\n            '.|' => output_vec.push(1),\n          \
    \  _ => panic!(\"Music note must be in 'o|.' or 'o'.\")\n        }\n    }\n  \
    \  output_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp_4bp9h4y.rs:16:16\n\
    \   |\n16 |             'o|' => output_vec.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.trim_end().to_string();\n\
    \    let mut beats = Vec::new();\n    for note in music_string.chars().filter_map(|c|\
    \ {\n        c.is_ascii_letter() || c.is_digit()\n    }) {\n        match note\
    \ {\n            'o' => beats.push(4),\n            'o|' => beats.push(2),\n \
    \           '.|' => beats.push(1),\n            _ => panic!(\"Note '{}' is invalid\"\
    , note.to_string()),\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpo88ejgtt.rs:18:16\n\
    \   |\n18 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![0;\
    \ 128];\n    let mut current = 0;\n    let mut current_string = 0;\n    let mut\
    \ last = 0;\n    music_string\n        .chars()\n        .filter_map(|c| match\
    \ c {\n            'o' => true\n            | 'o|' => true\n            | '.|'\
    \ => true\n            _ => false,\n        })\n        .for_each(|c|\n      \
    \      match c {\n                'o' => last = (current % 4) == 0 ? last : last\
    \ + 1;\n                '.' => last = (current % 4) == 0 ? last : last + 2;\n\
    \                'o|' => last = (current % 4) == 0 ? last : last + 1;\n      \
    \          _ => (),\n            })\n        .for_each(|c| {\n            match\
    \ c {\n                'o' => beats[current as usize] = last;\n              \
    \  'o|' => beats[current as usize] = last;\n                '.|' => beats[current\
    \ as usize] = last;\n                _ => (),\n            }\n            current\
    \ += 1;\n        })\n        .collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpn2nuue37.rs:19:18\n\
    \   |\n19 |             | 'o|' => true\n   |                  ^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut note_counts = vec![];\n\n    for c in music_string {\n        if\
    \ c.is_ascii() || c.is_whitespace() {\n            continue;\n        }\n    \
    \    if c.is_lowercase() {\n            note_counts.push(0);\n            continue;\n\
    \        }\n        if c == 'o' || c == 'o|' || c == '.|' {\n            note_counts.push(0);\n\
    \            continue;\n        }\n        let note_length: usize = match c.to_string().chars().count()\
    \ {\n            1 => 1,\n            2 => 2,\n            3 => 2,\n         \
    \   4 => 1,\n            _ => {\n                return vec![];\n            }\n\
    \        };\n        note_counts.push(note_length);\n    }\n    note_counts\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpllqjk0k9.rs:22:32\n\
    \   |\n22 |         if c == 'o' || c == 'o|' || c == '.|' {\n   |            \
    \                    ^^^^^^^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n22 |         if c == 'o' || c == 'o|\" || c == \".|'\
    \ {\n   |                                ~~~~~~~~~~~\n\nerror[E0762]: unterminated\
    \ character literal\n  --> /tmp/tmpllqjk0k9.rs:22:45\n   |\n22 |         if c\
    \ == 'o' || c == 'o|' || c == '.|' {\n   |                                   \
    \          ^^^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_array\
    \ = vec![1, 2, 4, 8];\n    let mut music_array = music_string.split_whitespace();\n\
    \n    for note_index in music_array.iter() {\n        let mut note = note_index.to_ascii_lowercase();\n\
    \        note[0] = note[0].to_ascii_lowercase()[0];\n        if note.contains(\"\
    o\") {\n            note.push(\"+\");\n        }\n        if note.contains(\"\
    |\") {\n            note.push(\"-\");\n        }\n        if note.contains(\"\
    .\") {\n            note.push(\"*\");\n        }\n\n        beats_array.push(note.parse().unwrap());\n\
    \    }\n\n    beats_array\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmp2nrakkwq.rs:14:35\n   |\n14 |     for note_index\
    \ in music_array.iter() {\n   |                                   ^^^^ method\
    \ not found in `SplitWhitespace<'_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_ascii_lowercase();\n\
    \    let mut music_vec: Vec<isize> = vec![];\n    let mut last_music_note = String::from(\"\
    .\");\n    let mut last_music_beats = 0;\n    for (i, &c) in music_string.chars().enumerate()\
    \ {\n        if c == '|' {\n            if music_vec.len() > 0 {\n           \
    \     music_vec.push(music_beats(last_music_note, last_music_beats));\n      \
    \      }\n            last_music_note = String::from(\".\");\n            last_music_beats\
    \ = 0;\n        } else {\n            let note = c.to_ascii_lowercase();\n   \
    \         let beats = if note == \"o\" { 4 } else { 2 };\n            last_music_beats\
    \ += beats;\n            last_music_note = note;\n        }\n    }\n    if music_vec.len()\
    \ > 0 {\n        music_vec.push(music_beats(last_music_note, last_music_beats));\n\
    \    }\n    music_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `music_beats` in this scope\n  --> /tmp/tmpqjha2vgt.rs:18:32\n\
    \   |\n18 |                 music_vec.push(music_beats(last_music_note, last_music_beats));\n\
    \   |                                ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `music_beats` in this scope\n  --> /tmp/tmpqjha2vgt.rs:30:24\n\
    \   |\n30 |         music_vec.push(music_beats(last_music_note, last_music_beats));\n\
    \   |                        ^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqjha2vgt.rs:15:13\n   |\n15 |     for (i, &c)\
    \ in music_string.chars().enumerate() {\n   |             ^^     --------------------------------\
    \ this expression has type `Option<(usize, char)>`\n   |             |\n   | \
    \            expected `char`, found reference\n   |             help: you can\
    \ probably remove the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n\
    \           found reference `&_`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.trim();\n    music_string.replace(\".\", \"\");\n    music_string.replace(\"\
    o\", \"1\");\n    music_string.replace(\"|\", \"3\");\n    music_string.replace(\"\
    -\", \"-1\");\n    music_string.parse::<isize>().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4vb_mv3.rs:16:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n16 |     music_string.parse::<isize>().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars()\n\
    \        .filter(|c| c != '|')\n        .map(|c| {\n            match c {\n  \
    \              'o' => 0,\n                'o|' => 1,\n                '.|' =>\
    \ 2,\n                _ => panic!(\"{} is not a legal note\", c),\n          \
    \  }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp6o4wb7lg.rs:16:20\n\
    \   |\n16 |                 'o|' => 1,\n   |                    ^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Your code goes here\n\
    \    let mut beats_to_note = music_string.chars().map(|c| match c {\n        'o'\
    \ => 1,\n        'o|' => 2,\n        '.|' => 4,\n        _ => 0,\n    });\n\n\
    \    for _ in 0..music_string.len() {\n        beats_to_note = beats_to_note.iter().cloned().collect();\n\
    \    }\n    beats_to_note.iter().cloned().collect()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp5ra99hkf.rs:14:12\n\
    \   |\n14 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut output = vec![];\n\
    \n    for note in music_string.chars() {\n        if note == '.' {\n         \
    \   output.push(1);\n        } else {\n            output.push(0);\n        }\n\
    \    }\n\n    output\n}\n\nfn main() {\n    let candidate = parse_music;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0, 0, 0, 0]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpc4iwpxbb.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = music_string.splitn(2,\
    \ \" \");\n    let mut notes_vec: Vec<isize> = Vec::new();\n    notes_vec.push(notes[0].chars().count());\n\
    \    for n in notes[1].chars().rev() {\n        notes_vec.push(notes_vec[notes_vec.len()\
    \ - 1] + n.to_digit(10));\n    }\n    notes_vec\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `std::str::SplitN<'_, &str>`\n\
    \  --> /tmp/tmpsj0iug2v.rs:13:20\n   |\n13 |     notes_vec.push(notes[0].chars().count());\n\
    \   |                    ^^^^^^^^\n\nerror[E0608]: cannot index into a value of\
    \ type `std::str::SplitN<'_, &str>`\n  --> /tmp/tmpsj0iug2v.rs:14:14\n   |\n14\
    \ |     for n in notes[1].chars().rev() {\n   |              ^^^^^^^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = 0; //\
    \ how many beats does current note last?\n\n    // go through each character in\
    \ string\n    for c in music_string.chars() {\n        // if char is '.'\n   \
    \     if c == '.' {\n            // reset counter\n            beats = 0;\n  \
    \      } else if c == 'o' || c == 'o|' {\n            // if char is 'o', remember\
    \ current beat\n            beats += 1;\n            // else if char is 'o|',\
    \ update counter\n        } else {\n            // else increase counter\n   \
    \         beats += 1;\n        }\n    }\n    // return vector with beat counts\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp633h7hh3.rs:19:39\n\
    \   |\n19 |         } else if c == 'o' || c == 'o|' {\n   |                  \
    \                     ^^^\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_chars\
    \ = music_string.chars();\n    let mut beats = vec![];\n    let mut current_beat\
    \ = vec![];\n    let mut current_note = vec![];\n\n    while let Some(next) =\
    \ music_chars.next() {\n        match next {\n            'o' => {\n         \
    \       current_beat.push(4);\n                current_note.push(false);\n   \
    \         }\n            'o|' => {\n                current_beat.push(2);\n  \
    \              current_note.push(false);\n            }\n            '.|' => {\n\
    \                current_beat.push(1);\n                current_note.push(false);\n\
    \            }\n            c => {\n                let mut current_note_index\
    \ = 0;\n\n                while current_note[current_note_index].is_none() {\n\
    \                    current_note_index += 1;\n                }\n\n         \
    \       let current_note_index = current_note_index as usize;\n              \
    \  current_beat[current_note_index] += 1;\n                current_note[current_note_index]\
    \ = true;\n            }\n        }\n    }\n\n    beats.copy_from_slice(&current_beat);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp56ar_hs9.rs:22:16\n\
    \   |\n22 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_note_counts\
    \ = vec![];\n    music_note_counts.clear();\n    let music_notes: Vec<&str> =\
    \ music_string.split_whitespace();\n\n    for note in music_notes {\n        if\
    \ note != \"o\" {\n            music_note_counts.push(0);\n        }\n       \
    \ if note == \"o\" {\n            music_note_counts.push(4);\n        }\n    \
    \    if note == \"|\" {\n            music_note_counts.push(2);\n        }\n \
    \       if note == \".\" {\n            music_note_counts.push(1);\n        }\n\
    \    }\n\n    music_note_counts.iter().sum().unwrap_or_else(|| 0)\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnd9ulzit.rs:13:34\n   |\n\
    13 |     let music_notes: Vec<&str> = music_string.split_whitespace();\n   | \
    \                     ---------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `SplitWhitespace`\n   |                      |\n   |   \
    \                   expected due to this\n   |\n   = note: expected struct `Vec<&str>`\n\
    \              found struct `SplitWhitespace<'_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Solution 1 with map\
    \ and reduce\n    music_string.chars().map(|c| c.to_digit(16) as isize).reduce(|a,\
    \ b| a | b)\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphegfe9aj.rs:12:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n11 |     // Solution 1 with map and reduce\n12 |     music_string.chars().map(|c|\
    \ c.to_digit(16) as isize).reduce(|a, b| a | b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n                found enum `Option<isize>`\n\nerror[E0605]: non-primitive\
    \ cast: `Option<u32>` as `isize`\n  --> /tmp/tmphegfe9aj.rs:12:34\n   |\n12 |\
    \     music_string.chars().map(|c| c.to_digit(16) as isize).reduce(|a, b| a |\
    \ b)\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0605.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.trim();\n    let mut beats = vec![];\n\n    while !music_string.is_empty()\
    \ {\n        let note = music_string.chars().next().unwrap();\n\n        match\
    \ note {\n            '.' => beats.push(4),\n            'o' => beats.push(4),\n\
    \            '|' => beats.push(2),\n            _ => (),\n        }\n\n      \
    \  music_string = music_string.remove(0);\n    }\n\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove` found for reference `&str` in the\
    \ current scope\n  --> /tmp/tmpdrimy117.rs:24:37\n   |\n24 |         music_string\
    \ = music_string.remove(0);\n   |                                     ^^^^^^ method\
    \ not found in `&str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    let mut i = 0;\n    while i < music_string.len() {\n        let note = music_string[i];\n\
    \        i += 1;\n        match note {\n            \"o\" => {\n             \
    \   beats.push(4);\n            },\n            \"o|\" => {\n                beats.push(2);\n\
    \            },\n            \".|\" => {\n                beats.push(1);\n   \
    \         },\n            _ => {\n                let note = music_string[i];\n\
    \                i += 1;\n                beats.push(0);\n                beats.push(0);\n\
    \                beats.push(0);\n                beats.push(0);\n            \
    \    beats.push(0);\n                beats.push(0);\n                beats.push(0);\n\
    \                beats.push(0);\n                beats.push(0);\n            \
    \    beats.push(0);\n                beats.push(0);\n            }\n        }\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8di52zu5.rs:14:20\n\
    \   |\n14 |         let note = music_string[i];\n   |                    ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp8di52zu5.rs:27:28\n   |\n27 |                 let note = music_string[i];\n\
    \   |                            ^^^^^^^^^^^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars().filter(|c|\
    \ *c != '|').filter(|c| *c != 'o').filter(|c| *c != '.').filter(|c| *c != '|').collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpgc9u8kam.rs:11:114\n     |\n11\
    \   |     music_string.chars().filter(|c| *c != '|').filter(|c| *c != 'o').filter(|c|\
    \ *c != '.').filter(|c| *c != '|').collect()\n     |                         \
    \                                                                            \
    \             ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut notes: Vec<isize> = Vec::new();\n\n    for (index, char) in music_string.chars().enumerate()\
    \ {\n        // Check each character for the special cases that mark a note.\n\
    \        if char == \".\" {\n            notes.push(4);\n        } else if char\
    \ == \"|\" {\n            notes.push(2);\n        } else if char == \"o\" {\n\
    \            notes.push(index / 4);\n        } else {\n            // This character\
    \ is not special - it's a regular note.\n            notes.push(index);\n    \
    \    }\n    }\n\n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp40re4ieb.rs:16:20\n   |\n\
    16 |         if char == \".\" {\n   |                    ^^^ expected `char`,\
    \ found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single\
    \ quotes\n   |\n16 |         if char == '.' {\n   |                    ~~~\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp40re4ieb.rs:18:27\n   |\n18 |  \
    \       } else if char == \"|\" {\n   |                           ^^^ expected\
    \ `char`, found `&str`\n   |\nhelp: if you meant to write a `char` literal, use\
    \ single quotes\n   |\n18 |         } else if char == '|' {\n   |            \
    \               ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp40re4ieb.rs:20:27\n\
    \   |\n20 |         } else if char == \"o\" {\n   |                          \
    \ ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write a `char`\
    \ literal, use single quotes\n   |\n20 |         } else if char == 'o' {\n   |\
    \                           ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp40re4ieb.rs:21:24\n\
    \   |\n21 |             notes.push(index / 4);\n   |                        ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n21 |           \
    \  notes.push((index / 4).try_into().unwrap());\n   |                        +\
    \         +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp40re4ieb.rs:24:24\n\
    \   |\n24 |             notes.push(index);\n   |                        ^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n24 |           \
    \  notes.push(index.try_into().unwrap());\n   |                             ++++++++++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_vector\
    \ = Vec::new();\n    let mut counter = 1;\n\n    for ch in music_string {\n  \
    \      match ch {\n            'o' | 'o|' => music_vector.append(counter * 4),\n\
    \            '.|'  => music_vector.append(counter),\n            _      => {},\n\
    \        }\n\n        counter += 1;\n    }\n\n    music_vector\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp0edhdk26.rs:16:22\n\
    \   |\n16 |             'o' | 'o|' => music_vector.append(counter * 4),\n   |\
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut last_note =\
    \ -1;\n    let mut beat = 0;\n    let mut counts = vec![0, 0, 0, 0, 0, 0, 0, 0];\n\
    \    for c in music_string.chars() {\n        if c.is_ascii() {\n            if\
    \ c.to_ascii_lowercase() == 'o' {\n                last_note = c - 'o' as usize;\n\
    \                beat += 4;\n            } else {\n                let len = c.to_ascii_lowercase().len_utf8();\n\
    \                if len == 4 {\n                    counts[last_note as usize\
    \ - 1] += 1;\n                }\n                if len == 2 || len == 3 {\n \
    \                   counts[last_note as usize - 1] += 1;\n                   \
    \ counts[last_note as usize - 1] += 2;\n                }\n                if\
    \ len == 3 || len == 4 {\n                    counts[last_note as usize - 1] +=\
    \ 1;\n                    counts[last_note as usize - 1] += 1;\n             \
    \   }\n                if len == 2 || len == 3 {\n                    counts[last_note\
    \ as usize - 1] += 1;\n                    counts[last_note as usize - 1] += 1;\n\
    \                }\n                if len == 4 {\n                    counts[last_note\
    \ as usize - 1] += 1;\n                    counts[last_note as usize - 1] += 1;\n\
    \                }\n            }\n        }\n    }\n    counts\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `usize` from `char`\n  --> /tmp/tmps96bre5m.rs:17:31\n\
    \   |\n17 |                 last_note = c - 'o' as usize;\n   |              \
    \               - ^ ------------ usize\n   |                             |\n \
    \  |                             char\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmps96bre5m.rs:11:25\n   |\n11 |     let mut\
    \ last_note = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // TODO: implement this\
    \ function\n    return vec![];\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpzwgwcbs3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = music_string.chars().map(|c| {\n        match c {\n            'o' => {\n\
    \                return 4;\n            }\n            'o|' => {\n           \
    \     return 2;\n            }\n            '.|' => {\n                return\
    \ 1;\n            }\n            _ => {\n                return 0;\n         \
    \   }\n        }\n    }).collect();\n\n    beats.iter().for_each(|beat| {\n  \
    \      beat = beat % 8;\n    });\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp6oxel46s.rs:16:16\n\
    \   |\n16 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = music_string.split_whitespace();\n\
    \    let mut beats: Vec<isize> = notes.into_iter().map(|note| {\n        let note\
    \ = note.parse::<u8>().unwrap();\n        if note == 0xF7 {\n            return\
    \ 4;\n        }\n        if note == 0xFE {\n            return 2;\n        }\n\
    \        if note == 0xFE && note != 0xF7 {\n            return 1;\n        }\n\
    \        4\n    }).collect();\n    for beat in beats.iter_mut() {\n        *beat\
    \ = *beat.checked_add(1).unwrap_or(0);\n    }\n    beats\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp_ni3px2p.rs:26:17\n\
    \   |\n26 |         *beat = *beat.checked_add(1).unwrap_or(0);\n   |         \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split(\"\
    \").filter(|&b| b != \"|\").collect()\n        .iter()\n        .map(|b| {\n \
    \           let mut beats: usize = 0;\n            let mut note = match b {\n\
    \                'o' => 4,\n                'o|' => 2,\n                '.|' =>\
    \ 1,\n                _ => panic!(\"{} is not note\", b),\n            };\n  \
    \          while note != 0 {\n                beats += note;\n               \
    \ note /= 2;\n            }\n            beats\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpn04qcv_9.rs:17:20\n\
    \   |\n17 |                 'o|' => 2,\n   |                    ^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut current_note\
    \ = 0;\n    let mut current_note_in_chord = 0;\n    let mut current_chord = 0;\n\
    \    let mut current_chord_index = 0;\n    let mut current_chord_indexes: Vec<isize>\
    \ = vec![];\n    let mut current_chord_last_index = 0;\n    let mut current_chord_last_indexes:\
    \ Vec<isize> = vec![];\n    let mut current_notes_in_chord = vec![];\n    let\
    \ mut current_notes_in_chord_index: Vec<isize> = vec![];\n    let mut current_notes_in_chord_last_index:\
    \ Vec<isize> = vec![];\n    let mut current_notes_not_last = 0;\n    let mut current_notes_not_last_indexes:\
    \ Vec<isize> = vec![];\n    let mut current_notes_not_last_index: Vec<isize> =\
    \ vec![];\n\n    for x in music_string.chars() {\n        match x {\n        \
    \    'o' => current_note += 4,\n            'o|' => current_note += 2,\n     \
    \       '.|' => current_note += 1,\n            _ => (),\n        }\n        current_notes_in_chord.push(current_note);\n\
    \        current_notes_in_chord_index.push(current_note_in_chord);\n        current_notes_in_chord_last_index.push(current_note_in_chord\
    \ - current_note);\n\n        match x {\n            'o' => current_note -= 4,\n\
    \            'o|' => current_note -= 2,\n            '.|' => current_note -= 1,\n\
    \            _ => (),\n        }\n        current_notes_not_last.push(current_note);\n\
    \        current_notes_not_last_index.push(current_notes_not_last);\n        current_notes_not_last_indexes.push(current_notes_not_last_index);\n\
    \n        current_chord += 1;\n        current_chord_indexes.push(current_chord);\n\
    \        current_chord_last_index.push(current_chord - 1);\n        current_chord_last_indexes.push(current_chord_last_index);\n\
    \n        if current_chord_indexes.len() == 4 {\n            current_notes_in_chord.clear();\n\
    \            current_notes_in_chord_index.clear();\n            current_notes_in_chord_last_index.clear();\n\
    \            current_chord_indexes.clear();\n            current_chord_last_indexes.clear();\n\
    \            current_chord = 0;\n            current_note = 0;\n            current_note_in_chord\
    \ = 0;\n            current_chord = 0;\n            current_note = 0;\n      \
    \      current_note_in_chord = 0;\n            current_chord_index = 0;\n    \
    \        current_chord_last_index = 0;\n            current_notes_in_chord_index\
    \ = vec![];\n            current_notes_in_chord_last_index = vec![];\n       \
    \     current_notes_not_last = 0;\n            current_notes_not_last_indexes\
    \ = vec![];\n            current_\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpx5ae25b9.rs:28:16\n\
    \   |\n28 |             'o|' => current_note += 2,\n   |                ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Your code here\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3tutgvec.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.to_string();\n    music_string.replace_all(\" \", \"&nbsp;\"\
    );\n\n    // remove any special chars\n    music_string = music_string.replace(\"\
    (\", \"&#40;\");\n    music_string = music_string.replace(\")\", \"&#41;\");\n\
    \    music_string = music_string.replace(\"-\", \"&#45;\");\n    music_string\
    \ = music_string.replace(\"<\", \"&#60;\");\n    music_string = music_string.replace(\"\
    >\", \"&#62;\");\n    music_string = music_string.replace(\"{\", \"&#123;\");\n\
    \    music_string = music_string.replace(\"}\", \"&#125;\");\n    music_string\
    \ = music_string.replace(\"|\", \"&#124;\");\n    music_string = music_string.replace(\"\
    :\", \"&#58;\");\n    music_string = music_string.replace(\".\", \"&#47;\");\n\
    \    music_string = music_string.replace(\",\", \"&#44;\");\n\n    // convert\
    \ all to lower case\n    music_string = music_string.to_lowercase();\n\n    //\
    \ now parse string\n    let mut music_string_vec = music_string.chars().map(|c|\
    \ match c {\n        'o' => 1,\n        'o|' => 2,\n        '.|' => 4,\n     \
    \   _ => 0,\n    });\n\n    let mut beat_counter = 0;\n    for b in music_string_vec\
    \ {\n        if b == 0 {\n            beat_counter++;\n        }\n    }\n\n  \
    \  return music_string_vec.iter().cloned().collect();\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp7ptv2hk4.rs:33:12\n\
    \   |\n33 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976575
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut result = vec![];\n\
    \n    for c in music_string.chars() {\n        if c == 'o' {\n            result.push(4);\n\
    \        } else if c == '|' {\n            result.push(2);\n        } else if\
    \ c == '.' {\n            result.push(1);\n        } else {\n            let mut\
    \ beats = 0;\n            if c == '#' {\n                beats = 4;\n        \
    \    } else if c == 'b' {\n                beats = 2;\n            } else if c\
    \ == '#' {\n                beats = 1;\n            } else if c == '#' {\n   \
    \             beats = 1;\n            } else if c == '#' {\n                beats\
    \ = 1;\n            } else if c == '#' {\n                beats = 1;\n       \
    \     } else if c == '#' {\n                beats = 1;\n            } else if\
    \ c == 'b' {\n                beats = 1;\n            } else {\n             \
    \   let mut beats_total = 0;\n                while c != '#' && c != 'b' {\n \
    \                   beats_total += 1;\n                    c = music_string.get_char_next_up();\n\
    \                }\n                beats_total += 1;\n                result.push(beats_total);\n\
    \            }\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `get_char_next_up` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpel31u8_3.rs:42:38\n   |\n42 |          \
    \           c = music_string.get_char_next_up();\n   |                       \
    \               ^^^^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .lines()\n        .map(|note| note.split(' ').last())\n        .filter(|note|\
    \ note != \"o\")\n        .map(|note| note.chars().count())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Option<&str>` with `str`\n  --> /tmp/tmps7ynttlh.rs:14:29\n\
    \   |\n14 |         .filter(|note| note != \"o\")\n   |                      \
    \       ^^ no implementation for `Option<&str> == str`\n   |\n   = help: the trait\
    \ `PartialEq<str>` is not implemented for `Option<&str>`\n   = help: the trait\
    \ `PartialEq` is implemented for `Option<T>`\n   = note: required because of the\
    \ requirements on the impl of `PartialEq<&str>` for `&Option<&str>`\n\nerror[E0599]:\
    \ no method named `chars` found for enum `Option` in the current scope\n  -->\
    \ /tmp/tmps7ynttlh.rs:15:26\n   |\n15 |         .map(|note| note.chars().count())\n\
    \   |                          ^^^^^ method not found in `Option<&str>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string_vec\
    \ = music_string.chars().map(|c| match c {\n        'o' => 0,\n        '|' =>\
    \ 1,\n        '.' => 2,\n        _ => 3,\n    }).collect();\n\n    music_string_vec.iter().windows(4).enumerate().map(|(i,\
    \ chunk)| {\n        // This algorithm is O(n log n)\n        let beats_per_chunk:\
    \ usize = chunk.len();\n        let beats_per_music_chunk: usize = music_string_vec.len();\n\
    \        chunk.iter().zip(music_string_vec[i..].iter()).map(|(a, b)| (a as isize\
    \ - b) as isize)\n            .collect::<Vec<_>>()\n            .iter()\n    \
    \        .zip(chunk.iter().take(beats_per_music_chunk).collect())\n          \
    \  .map(|(i, music_beat)| (music_beat as usize) * (beats_per_music_chunk - i))\n\
    \            .sum();\n    })\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmppe1y06m0.rs:18:5\n\
    \   |\n11 |     let music_string_vec = music_string.chars().map(|c| match c {\n\
    \   |         ---------------- consider giving `music_string_vec` a type\n...\n\
    18 |     music_string_vec.iter().windows(4).enumerate().map(|(i, chunk)| {\n \
    \  |     ^^^^^^^^^^^^^^^^ cannot infer type\n   |\n   = note: type must be known\
    \ at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut beats_array: [isize; 128] = Default::default();\n\n    for note in\
    \ music_string.chars() {\n        let note_str = match note {\n            'o'\
    \ => \"WHOLE\",\n            'o|' => \"HALF\",\n            '.|' => \"QUARTER\"\
    ,\n            _ => panic!(\"Unexpected musical note!\"),\n        };\n\n    \
    \    if beats_array[note_str.as_bytes()[0]] >= 4 {\n            beats_array[note_str.as_bytes()[0]]\
    \ += 4;\n        } else {\n            beats_array[note_str.as_bytes()[0]] +=\
    \ 2;\n        }\n    }\n\n    beats_array.iter()\n        .filter_map(|&x| x.checked_add(1).ok())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpmq8n76yh.rs:17:16\n\
    \   |\n17 |             'o|' => \"HALF\",\n   |                ^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes: Vec<isize>\
    \ = Vec::new();\n\n    // Iterate over all characters in the string.\n    for\
    \ c in music_string.chars() {\n        // Ignore the spaces and dots.\n      \
    \  if c == '.' || c == ' ' {\n            continue;\n        }\n\n        // Ignore\
    \ the empty note.\n        if c == '|' {\n            continue;\n        }\n\n\
    \        // If the note was in the special format, parse it!\n        if let Some(note)\
    \ = parse_note(&c) {\n            notes.push(note);\n        }\n\n        // Otherwise,\
    \ just copy the character as-is.\n        else {\n            notes.push(c.to_digit(10).unwrap());\n\
    \        }\n    }\n\n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_note` in this scope\n  --> /tmp/tmp_t__bpe9.rs:26:29\n\
    \   |\n26 |         if let Some(note) = parse_note(&c) {\n   |               \
    \              ^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_t__bpe9.rs:32:24\n   |\n32 |             notes.push(c.to_digit(10).unwrap());\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `u32`\n\
    \   |\nhelp: you can convert a `u32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n32 |             notes.push(c.to_digit(10).unwrap().try_into().unwrap());\n\
    \   |                                               ++++++++++++++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize>\
    \ = vec![0; music_string.len()];\n    let mut beats_str: String = music_string;\n\
    \    let mut current_note_str: String = music_string;\n    while !beats_str.trim().is_empty()\
    \ {\n        let last_note: isize = 0;\n        let last_note_len: usize = 0;\n\
    \        let mut last_note_len_len: usize = 0;\n        let mut note = last_note;\n\
    \        let mut next_note: isize = 0;\n        let mut next_note_len: usize =\
    \ 0;\n        let mut next_note_len_len: usize = 0;\n        let mut new_str:\
    \ String = music_string;\n        for &c in new_str.chars() {\n            match\
    \ c {\n                'o' | 'o|' | '.|' | '.' => {\n                    note\
    \ = note.wrapping_add(1);\n                }\n                _ => break,\n  \
    \          }\n        }\n        for &c in new_str.chars() {\n            match\
    \ c {\n                'o' | 'o|' | '.|' => {\n                    next_note =\
    \ next_note.wrapping_add(1);\n                    beats_vec[beats_vec.len() -\
    \ 1] += 1;\n                }\n                _ => break,\n            }\n  \
    \      }\n        for &c in new_str.chars() {\n            match c {\n       \
    \         'o' | 'o|' | '.|' => {\n                    next_note = next_note.wrapping_add(1);\n\
    \                    beats_vec[beats_vec.len() - 1] += 1;\n                }\n\
    \                _ => break,\n            }\n        }\n        for &c in new_str.chars()\
    \ {\n            match c {\n                'o' | 'o|' | '.|' => {\n         \
    \           next_note = next_note.wrapping_add(1);\n                    beats_vec[beats_vec.len()\
    \ - 1] += 1;\n                }\n                _ => break,\n            }\n\
    \        }\n        for &c in new_str.chars() {\n            match c {\n     \
    \           'o' | 'o|' | '.|' => {\n                    next_note = next_note.wrapping_add(1);\n\
    \                    beats_vec[beats_vec.len() - 1] += 1;\n                }\n\
    \                _ => break,\n            }\n        }\n        for &c in new_str.chars()\
    \ {\n            match c {\n                'o' | 'o|' | '.|' => {\n         \
    \           next_note = next_note.wrapping_add(1);\n                    beats_vec[beats_vec.len()\
    \ - 1] += 1;\n                }\n                _ => break,\n            }\n\
    \        }\n        for &c in new_str.chars() {\n            match c {\n     \
    \           'o' | 'o\n}\n\nfn main() {\n    let candidate = parse_music;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpu82k4qfw.rs:25:26\n\
    \   |\n25 |                 'o' | 'o|' | '.|' | '.' => {\n   |               \
    \           ^--^^\n   |                           |\n   |                    \
    \       help: consider removing the non-printing characters: `|`\n   |\nnote:\
    \ there are non-printing characters, the full sequence is ` | `\n  --> /tmp/tmpu82k4qfw.rs:25:27\n\
    \   |\n25 |                 'o' | 'o|' | '.|' | '.' => {\n   |               \
    \            ^^\n\nerror: character literal may only contain one codepoint\n \
    \ --> /tmp/tmpu82k4qfw.rs:25:33\n   |\n25 |                 'o' | 'o|' | '.|'\
    \ | '.' => {\n   |                                 ^--^^\n   |               \
    \                   |\n   |                                  help: consider removing\
    \ the non-printing characters: `|`\n   |\nnote: there are non-printing characters,\
    \ the full sequence is ` | `\n  --> /tmp/tmpu82k4qfw.rs:25:34\n   |\n25 |    \
    \             'o' | 'o|' | '.|' | '.' => {\n   |                             \
    \     ^^\n\nerror[E0762]: unterminated character literal\n  --> /tmp/tmpu82k4qfw.rs:25:39\n\
    \   |\n25 |                 'o' | 'o|' | '.|' | '.' => {\n   |               \
    \                        ^^^^^^\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut note_counts:\
    \ Vec<isize> = vec![];\n\n    music_string.split(' ').into_iter().for_each(|s|\
    \ {\n        let mut beats: isize = 0;\n        match s.chars().next() {\n   \
    \         'o' => {\n                beats += 4;\n            }\n            'o|'\
    \ => {\n                beats += 2;\n            }\n            '.|' => {\n  \
    \              beats += 1;\n            }\n            _ => {\n              \
    \  // ignore the rest\n            }\n        }\n        note_count += beats;\n\
    \    });\n\n    note_counts\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpq8xbvi75.rs:19:16\n\
    \   |\n19 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes: Vec<isize>\
    \ = Vec::new();\n    let mut current_note = 0;\n    let mut note_length = 4;\n\
    \    let mut has_note = false;\n    let mut i = 0;\n\n    // go through every\
    \ symbol in string\n    for symbol in music_string {\n        // we handle each\
    \ symbol differently depending on the type\n        match symbol {\n         \
    \   'o' => i += 1,\n            '|' => i += note_length,\n            '.' => i\
    \ += note_length / 2,\n            _ => panic!(\"unexpected symbol: {}\", symbol),\n\
    \        }\n        // if the note is finished, check if we have any notes still\
    \ left to process\n        if i == note_length {\n            if has_note {\n\
    \                notes.push(current_note);\n            }\n            has_note\
    \ = false;\n            current_note = 0;\n        }\n        // if the note is\
    \ not finished, check if it is a new note\n        match symbol {\n          \
    \  'o' => has_note = true,\n            _ => panic!(\"unexpected symbol: {}\"\
    , symbol),\n        }\n    }\n\n    // add the last note if it exists\n    if\
    \ has_note {\n        notes.push(current_note);\n    }\n\n    notes\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpf_m92sz1.rs:18:19\n\
    \   |\n18 |     for symbol in music_string {\n   |                   ^^^^^^^^^^^^\
    \ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n  \
    \ = help: the trait `Iterator` is not implemented for `String`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = 0;\n\
    \    let mut note = 0;\n    let mut last_note = -1;\n    let mut last_beat = 0;\n\
    \    let mut current_note = 0;\n\n    for line in music_string.lines() {\n   \
    \     // Ignore blank lines\n        if line.is_empty() {\n            continue;\n\
    \        }\n\n        // Parse the string\n        let line_note = line.chars().next().unwrap();\n\
    \        let line_beat = line.chars().next().unwrap();\n\n        // Check what\
    \ kind of note this is\n        match line_note {\n            'o' => if line_beat\
    \ == '|' { note = note + 1; } else { note = note - 1; },\n            'o|' =>\
    \ if line_beat == '|' { note = note + 1; } else { note = note - 1; beats = beats\
    \ + 1; },\n            '.|' => if line_beat == '|' { note = note + 1; } else {\
    \ note = note - 1; beats = beats + 1; },\n            _ => unreachable!(),\n \
    \       };\n\n        // Check if this note is the one we need to check\n    \
    \    if note == last_note {\n            // Check if this is the last beat\n \
    \           if line_beat == \"|\" {\n                // Add one to beats\n   \
    \             beats += 1;\n            } else {\n                // Subtract one\
    \ from beats\n                beats -= 1;\n            }\n        } else {\n \
    \           // If not, reset beats, note and last_beat\n            beats = 0;\n\
    \            note = 0;\n            last_beat = 0;\n        }\n\n        last_note\
    \ = note;\n        last_beat = line_beat;\n    }\n\n    return beats;\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmplask2z9s.rs:30:16\n\
    \   |\n30 |             'o|' => if line_beat == '|' { note = note + 1; } else\
    \ { note = note - 1; beats = beats + 1; },\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    30 |             'o|\" => if line_beat == \"|' { note = note + 1; } else { note\
    \ = note - 1; beats = beats + 1; },\n   |                ~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0762]: unterminated character literal\n  --> /tmp/tmplask2z9s.rs:30:39\n\
    \   |\n30 |             'o|' => if line_beat == '|' { note = note + 1; } else\
    \ { note = note - 1; beats = beats + 1; },\n   |                             \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // TODO: write your\
    \ parsing logic here\n    vec![0]\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmps1foop63.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .chars()\n        .filter(|c| *c != '|')\n        .filter(|c| *c != 'o')\n\
    \        .filter(|c| *c != '.')\n        .filter(|c| *c != 'O')\n        .filter(|c|\
    \ *c != 'o')\n        .map(|c| {\n            match c {\n                'o' =>\
    \ 4,\n                'O' => 4,\n                '.' => 2,\n                '|'\
    \ => 1,\n                _ => panic!(\"Music string contains invalid character:\
    \ {}\", c),\n            }\n        })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Music string contains invalid character:  '',
    /tmp/tmpzea5mf3m.rs:24:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n\n    for c in music_string.chars() {\n        match c {\n      \
    \      'o' => { beats.append(4); },\n            '|' => { beats.append(2); },\n\
    \            '.' => { beats.append(1); },\n            _ => { panic!(\"Invalid\
    \ music character!\") },\n        }\n    }\n\n    beats\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd119dhea.rs:15:35\n   |\n\
    15 |             'o' => { beats.append(4); },\n   |                          \
    \         ^ expected `&mut Vec<isize>`, found integer\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<isize>`\n                           found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd119dhea.rs:16:35\n   |\n16 |\
    \             '|' => { beats.append(2); },\n   |                             \
    \      ^ expected `&mut Vec<isize>`, found integer\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<isize>`\n                           found type `{integer}`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpd119dhea.rs:17:35\n   |\n17 |\
    \             '.' => { beats.append(1); },\n   |                             \
    \      ^ expected `&mut Vec<isize>`, found integer\n   |\n   = note: expected\
    \ mutable reference `&mut Vec<isize>`\n                           found type `{integer}`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = music_string.chars().collect();\n    let music_string = music_string.clone();\n\
    \    let mut last_beat = music_string[music_string.len() - 1];\n    if music_string[music_string.len()\
    \ - 1] == '.' {\n        last_beat = '.';\n    }\n    if music_string[music_string.len()\
    \ - 1] == '|' {\n        last_beat = '|';\n    }\n    if music_string[music_string.len()\
    \ - 1] == 'o' {\n        last_beat = 'o';\n    }\n    beats.truncate(music_string.len()\
    \ - music_string.chars().count());\n    beats.push(1isize);\n    beats.extend_from_slice(&music_string[..music_string.len()\
    \ - music_string.chars().count()]);\n    beats.insert(0, last_beat);\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmprkqd3lyf.rs:11:54\n     |\n11\
    \   |     let mut beats: Vec<isize> = music_string.chars().collect();\n     |\
    \                                                      ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmprkqd3lyf.rs:13:25\n   |\n13 |     let mut last_beat = music_string[music_string.len()\
    \ - 1];\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmprkqd3lyf.rs:14:8\n   |\n14 |     if music_string[music_string.len()\
    \ - 1] == '.' {\n   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `S"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes: Vec<isize>\
    \ = vec![];\n    let mut prev_notes: Vec<isize> = vec![];\n    let mut prev_octave:\
    \ isize = 0;\n    for (i, note) in music_string.chars().enumerate() {\n      \
    \  notes.push(note);\n\n        if note == '|' {\n            notes.push(1);\n\
    \            notes.push(1);\n            notes.push(1);\n        } else {\n  \
    \          notes.push(0);\n        }\n\n        if note == 'o' {\n           \
    \ if i != 0 {\n                notes.push(0);\n            }\n\n            if\
    \ prev_octave != 0 {\n                notes.push((4 as isize) / prev_octave);\n\
    \            }\n\n            prev_octave += 1;\n            prev_notes.push(notes.len());\n\
    \        } else {\n            prev_notes.push(notes.len());\n        }\n    }\n\
    \n    notes\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpppnon59o.rs:15:20\n   |\n\
    15 |         notes.push(note);\n   |                    ^^^^ expected `isize`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpppnon59o.rs:35:29\n\
    \   |\n35 |             prev_notes.push(notes.len());\n   |                  \
    \           ^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    35 |             prev_notes.push(notes.len().try_into().unwrap());\n   |     \
    \                                   ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpppnon59o.rs:37:29\n   |\n37 |             prev_notes.push(notes.len());\n\
    \   |                             ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n37 |             prev_notes.push(notes.len().try_into().unwrap());\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split_whitespace().filter(|&note|\
    \ note != \"o\" && note != \".\").map(|note| {\n        note.len() as isize\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp6srn0lqd.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut beats = Vec::new();\n    let mut notes = music_string.chars().take_while(|c|\
    \ !c.is_whitespace()).collect();\n    let mut last_note_index = 0;\n    let mut\
    \ note_index = 0;\n    while note_index < notes.len() {\n        let note = notes[note_index].to_string();\n\
    \        let note_type = note[0];\n        if note_type == 'o' {\n           \
    \ beats.push(4);\n            last_note_index = note_index + 1;\n        } else\
    \ if note_type == 'o|' {\n            beats.push(2);\n            last_note_index\
    \ = note_index + 1;\n        } else if note_type == '.' {\n            beats.push(1);\n\
    \            last_note_index = note_index + 1;\n        } else {\n           \
    \ let mut note_count = 1;\n            let mut last_note = notes[note_index];\n\
    \            for i in 2..=last_note_index {\n                let note = notes[i];\n\
    \                let note_type = note[0];\n                if note_type == 'o'\
    \ {\n                    note_count = note_count * 4;\n                } else\
    \ if note_type == 'o|' {\n                    note_count = note_count * 2;\n \
    \               } else if note_type == '.' {\n                    note_count =\
    \ note_count * 1;\n                }\n            }\n            beats.push(note_count);\n\
    \            last_note_index = note_index;\n        }\n        note_index += 1;\n\
    \    }\n    return beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp1x919hsg.rs:22:35\n\
    \   |\n22 |         } else if note_type == 'o|' {\n   |                      \
    \             ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split('\
    \ ').filter(|&c| c == 'o' || c == '|').collect::<Vec<_>>()\n        .into_iter()\n\
    \        .map(|c| if c == '.' { 1 } else { 4 })\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&str` with `char`\n  --> /tmp/tmpi4gsdg47.rs:11:43\n\
    \   |\n11 |     music_string.split(' ').filter(|&c| c == 'o' || c == '|').collect::<Vec<_>>()\n\
    \   |                                           ^^ no implementation for `&str\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `&str` with `char`\n  --> /tmp/tmpi4gsdg47.rs:11:55\n   |\n11 |     music_string.split('\
    \ ').filter(|&c| c == 'o' || c == '|').collect::<Vec<_>>()\n   |             \
    \                                          ^^ no implementation for `&str == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&str`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `&str` with `char`\n  --> /tmp/tmpi4gsdg47.rs:13:23\n   |\n13 |         .map(|c|\
    \ if c == '.' { 1 } else { 4 })\n   |                       ^^ no implementation\
    \ for `&str == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&str`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars()\n\
    \        .filter(|c| *c != '|')\n        .enumerate()\n        .map(|(i, c)| match\
    \ c {\n            'o' => 4,\n            'o|' => 2,\n            '.|' => 1,\n\
    \            _ => panic!(\"Invalid character: {}\", c)\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp16plhptw.rs:16:16\n\
    \   |\n16 |             'o|' => 2,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Create a map to map\
    \ each note to a vector of how many beats does it last\n    let mut note_count\
    \ = HashMap::new();\n    let mut note = music_string.chars().map(|c| {\n     \
    \   if c == ' ' {\n            return i64::MAX;\n        }\n\n        match c\
    \ {\n            'o' => {\n                note_count\n                    .entry(c)\n\
    \                    .or_insert(vec![i64::MAX])\n                    .push(note_count[c].len()\
    \ + 1);\n                note_count\n                    .entry(c)\n         \
    \           .or_insert(vec![i64::MAX])\n                    .push(note_count[c].len()\
    \ + 1);\n            }\n            '|' => {\n                note_count\n   \
    \                 .entry(c)\n                    .or_insert(vec![i64::MAX])\n\
    \                    .push(note_count[c].len() + 1);\n            }\n        \
    \    '.' => {\n                note_count\n                    .entry(c)\n   \
    \                 .or_insert(vec![i64::MAX])\n                    .push(note_count[c].len()\
    \ + 1);\n            }\n            _ => panic!(\"Unexpected character: {}\",\
    \ c),\n        }\n    });\n\n    // We are going to add up the beats for each\
    \ note to arrive at total note count for each note\n    let mut total = 0;\n\n\
    \    for &(_, count) in note {\n        for &(beat, last_beats) in count {\n \
    \           for &mut _ in last_beats {\n                total += beat;\n     \
    \       }\n        }\n    }\n\n    // Go through every key in note_count and append\
    \ their value to the output vector\n    for &(_, count) in note {\n        for\
    \ &(beat, last_beats) in count {\n            for &mut _ in last_beats {\n   \
    \             let count = note_count[&_];\n                note.push(count.clone());\n\
    \            }\n        }\n    }\n\n    note.iter().map(|(_, count)| count.len()).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmpyv51ymf3.rs:12:26\n   |\n12 |     let mut note_count = HashMap::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ in expressions, `_` can only be used on the left-hand side of an assignment\n\
    \  --> /tmp/tmpyv51ymf3.rs:60:41\n   |\n60 |                 let count = note_count[&_];\n\
    \   |                                         ^ `_` not allowed here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyv51ymf3.rs:19:20\n   |\n19 |              \
    \ 'o' => {\n   |  ____________________^\n20 | |                 note_count\n21\
    \ | |                     .entry(c)\n22 | |                     .or_insert(vec![i64::MAX])\n\
    ...  |\n27 | |                     .push(note_count[c].len() + 1);\n28 | |   \
    \          }\n   | |_____________^ expected `i64`, found `()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyv51ymf3.rs:29:20\n   |\n29 |              \
    \ '|' => {\n   |  ____________________^\n30 | |                 note_count\n31\
    \ | |                     .entry(c)\n32 | |                     .or_insert(vec![i64::MAX])\n\
    33 | |                     .push(note_count[c].len() + 1);\n34 | |           \
    \  }\n   | |_____________^ expected `i64`, found `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyv51ymf3.rs:35:20\n   |\n35 |               '.' => {\n\
    \   |  ____________________^\n36 | |                 note_count\n37 | |      \
    \               .entry(c)\n38 | |                     .or_insert(vec![i64::MAX])\n\
    39 | |                     .push(note_count[c].len() + 1);\n40 | |           \
    \  }\n   | |_____________^ expected `i64`, found `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyv51ymf3.rs:48:9\n   |\n48 |     for &(_, count) in note\
    \ {\n   |         ^^^^^^^^^^^    ---- this expression has type `Option<i64>`\n\
    \   |         |\n   |         expected `i64`, found reference\n   |\n   = note:\
    \   expected type `i64`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpyv51ymf3.rs:57:9\n  "
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = Vec::new();\n    let mut current: usize = 0;\n\n    for c in music_string.chars()\
    \ {\n        if c == '.' {\n            current.push(4);\n        } else if c\
    \ == 'o' {\n            current.push(4);\n        } else if c == '|' {\n     \
    \       current.push(2);\n        } else if c == 'o' {\n            current.push(2);\n\
    \        }\n\n        beats.push(current);\n        current.clear();\n    }\n\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmpuj4v35tn.rs:16:21\n   |\n16 |             current.push(4);\n\
    \   |                     ^^^^ method not found in `usize`\n\nerror[E0599]: no\
    \ method named `push` found for type `usize` in the current scope\n  --> /tmp/tmpuj4v35tn.rs:18:21\n\
    \   |\n18 |             current.push(4);\n   |                     ^^^^ method\
    \ not found in `usize`\n\nerror[E0599]: no method named `push` found for type\
    \ `usize` in the current scope\n  --> /tmp/tmpuj4v35tn.rs:20:21\n   |\n20 |  \
    \           current.push(2);\n   |                     ^^^^ method not found in\
    \ `usize`\n\nerror[E0599]: no method named `push` found for type `usize` in the\
    \ current scope\n  --> /tmp/tmpuj4v35tn.rs:22:21\n   |\n22 |             current.push(2);\n\
    \   |                     ^^^^ method not found in `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuj4v35tn.rs:25:20\n   |\n25 |         beats.push(current);\n\
    \   |                    ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n25 |         beats.push(current.try_into().unwrap());\n   |     \
    \                      ++++++++++++++++++++\n\nerror[E0599]: no method named `clear`\
    \ found for type `usize` in the current scope\n  --> /tmp/tmpuj4v35tn.rs:26:17\n\
    \   |\n26 |         current.clear();\n   |                 ^^^^^ method not found\
    \ in `usize`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // TODO: Complete this\
    \ function\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm1iyagg8.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut music_string_to_beats: Vec<isize> = vec![];\n\n    let mut position\
    \ = 0;\n    while position < music_string.len() {\n        match music_string[position]\
    \ {\n            'o' => music_string_to_beats.push(position),\n            'o|'\
    \ => music_string_to_beats.push(position + 1),\n            '.|' => music_string_to_beats.push(position\
    \ + 2),\n            _ => unreachable!(),\n        }\n        position += 1;\n\
    \    }\n    music_string_to_beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpiw_kyu_f.rs:18:16\n\
    \   |\n18 |             'o|' => music_string_to_beats.push(position + 1),\n  \
    \ |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .trim()\n        .chars()\n        .filter(|c| !c.is_ascii() || c != '|' ||\
    \ c != 'o')\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpfkq7cm7n.rs:14:40\n\
    \   |\n14 |         .filter(|c| !c.is_ascii() || c != '|' || c != 'o')\n   | \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: can't\
    \ compare `&char` with `char`\n  --> /tmp/tmpfkq7cm7n.rs:14:52\n   |\n14 |   \
    \      .filter(|c| !c.is_ascii() || c != '|' || c != 'o')\n   |              \
    \                                      ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \   = help: the trait `PartialEq` is implemented for `char`\n\nerror[E0277]: a\
    \ value of type `Vec<isize>` cannot be built from an iterator over elements of\
    \ type `char`\n    --> /tmp/tmpfkq7cm7n.rs:15:10\n     |\n15   |         .collect()\n\
    \     |          ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \     |\n     = help: the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .lines()\n        .map(|line| parse_music_line(line))\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_music_line` in this scope\n \
    \ --> /tmp/tmpksmirk74.rs:13:21\n   |\n13 |         .map(|line| parse_music_line(line))\n\
    \   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut beats = vec![];\n\n    for note in music_string.chars().filter(|c|\
    \ c.is_ascii()) {\n        if note == '.' {\n            beats.push(0);\n    \
    \    } else {\n            let beat_length = note.to_digit(16).unwrap() as isize;\n\
    \            beats.push(beats.last().checked_add(beat_length).unwrap());\n   \
    \     }\n    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmpgkv6xqw0.rs:19:37\n   |\n19 |             beats.push(beats.last().checked_add(beat_length).unwrap());\n\
    \   |                                     ^^^^^^^^^^^ method not found in `Option<&{integer}>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n    let mut current_beat = 1;\n    let mut notes = 0;\n    music_string.split_whitespace().for_each(|note|\
    \ {\n        if note[0] == 'o' {\n            notes += 4;\n        } else if note[0]\
    \ == 'o|' {\n            notes += 2;\n        } else if note[0] == '.|' {\n  \
    \          notes += 1;\n        }\n        beats.push(current_beat);\n       \
    \ current_beat += notes;\n        notes = 1;\n    });\n    beats.push(current_beat);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmptsflqsj1.rs:17:33\n\
    \   |\n17 |         } else if note[0] == 'o|' {\n   |                        \
    \         ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars().filter(|&c|\
    \ c == '|').filter_map(|c| {\n        if c == 'o' {\n            Some(c as isize)\n\
    \        } else {\n            None\n        }\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp8j8gs2n1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = music_string.chars().collect::<Vec<_>>();\n\
    \    let mut beats = vec![];\n    let mut last_note = \"\";\n    let mut last_beat\
    \ = 0;\n    let mut prev_note = String::new();\n    let mut prev_beat = 0;\n \
    \   notes.iter().try_for_each(|c| {\n        match c {\n            '|' => prev_beat\
    \ = 1,\n            'o' => prev_note = \"\",\n            c => {\n           \
    \     if prev_beat == 0 {\n                    beats.push(prev_beat);\n      \
    \          }\n                if prev_note == \"\" {\n                    last_note\
    \ = c.to_string();\n                } else {\n                    last_note =\
    \ c.to_string();\n                }\n                prev_beat = 1;\n        \
    \        prev_note = String::new();\n            }\n        }\n    });\n    for\
    \ beat in beats {\n        beats.push(beat);\n    }\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz_6njib4.rs:20:32\n   |\n\
    15 |     let mut prev_note = String::new();\n   |                         -------------\
    \ expected due to this value\n...\n20 |             'o' => prev_note = \"\",\n\
    \   |                                ^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                                |\n   |                \
    \                expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz_6njib4.rs:26:33\n   |\n13 |     let mut last_note = \"\
    \";\n   |                         -- expected due to this value\n...\n26 |   \
    \                  last_note = c.to_string();\n   |                          \
    \       ^^^^^^^^^^^^^\n   |                                 |\n   |          \
    \                       expected `&str`, found struct `String`\n   |         \
    \                        help: consider borrowing here: `&c.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz_6njib4.rs:28:33\n   |\n13 |     let mut last_note\
    \ = \"\";\n   |                         -- expected due to this value\n...\n28\
    \ |                     last_note = c.to_string();\n   |                     \
    \            ^^^^^^^^^^^^^\n   |                                 |\n   |     \
    \                            expected `&str`, found struct `String`\n   |    \
    \                             help: consider borrowing here: `&c.to_string()`\n\
    \nerror[E0277]: the trait bound `(): Try` is not satisfied\n    --> /tmp/tmpz_6njib4.rs:17:31\n\
    \     |\n17   |       notes.iter().try_for_each(|c| {\n     |  __________________------------_^\n\
    \     | |                  |\n     | |                  required by a bound introduced\
    \ by this call\n18   | |         match c {\n19   | |             '|' => prev_beat\
    \ = 1,\n20   | |             'o' => prev_note = \"\",\n...    |\n33   | |    \
    \     }\n34   | |     });\n     | |_____^ the trait `Try` is not implemented for\
    \ `()`\n     |\nnote: required by a bound in `try_for_each`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an er"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize>\
    \ = vec![];\n    let music_string_split = music_string.split(' ');\n    for note_string\
    \ in music_string_split {\n        let note_string_to_beats: Vec<&str> = note_string.split('|');\n\
    \        let note_string_to_beats = note_string_to_beats.collect();\n        for\
    \ (index, note) in note_string_to_beats.iter().enumerate() {\n            beats_vec.push(index\
    \ * 4);\n            beats_vec.push(index * 4 + 1);\n            beats_vec.push(index\
    \ * 4 + 2);\n            if note != \"o\" {\n                beats_vec.push(index\
    \ * 4 + 1);\n                beats_vec.push(index * 4 + 2);\n                beats_vec.push(index\
    \ * 4 + 3);\n            }\n        }\n    }\n    beats_vec\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjps_afhv.rs:14:47\n   |\n\
    14 |         let note_string_to_beats: Vec<&str> = note_string.split('|');\n \
    \  |                                   ---------   ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `std::str::Split`\n   |                         \
    \          |\n   |                                   expected due to this\n  \
    \ |\n   = note: expected struct `Vec<&str>`\n              found struct `std::str::Split<'_,\
    \ char>`\n\nerror[E0599]: `Vec<&str>` is not an iterator\n   --> /tmp/tmpjps_afhv.rs:15:57\n\
    \    |\n15  |           let note_string_to_beats = note_string_to_beats.collect();\n\
    \    |                                                           ^^^^^^^ `Vec<&str>`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<&str>: Iterator`\n            which is required by `&mut Vec<&str>:\
    \ Iterator`\n            `[&str]: Iterator`\n            which is required by\
    \ `&mut [&str]: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    for note in music_string.chars() {\n        match note {\n            'o'\
    \ => beats.push(4),\n            'o|' => beats.push(2),\n            '.|' => beats.push(1),\n\
    \            _ => {\n                assert!(note.is_ascii());\n             \
    \   let note_id = note as usize;\n                beats.push(beat_count(note_id));\n\
    \            }\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpg03irbif.rs:15:16\n\
    \   |\n15 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = Vec::new();\n    let mut i = 0;\n    while i < music_string.len() {\n    \
    \    // \"o\" means whole note and there are four beats\n        if music_string[i]\
    \ == 'o' {\n            beats.push(4);\n            i += 1;\n        } else {\n\
    \            // \"o|\" means half note and there are two beats\n            if\
    \ music_string[i] == 'o' {\n                beats.push(2);\n                i\
    \ += 1;\n            } else {\n                // \".|\" means quarter note and\
    \ there are one beat\n                if music_string[i] == '|' {\n          \
    \          beats.push(1);\n                    i += 1;\n                } else\
    \ {\n                    // other note or rest => error\n                    panic!(\"\
    {}\", music_string);\n                }\n            }\n        }\n    }\n   \
    \ beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpy03c65wx.rs:15:12\n\
    \   |\n15 |         if music_string[i] == 'o' {\n   |            ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpy03c65wx.rs:20:16\n   |\n20 |             if music_string[i] ==\
    \ 'o' {\n   |                ^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpy03c65wx.rs:25:20\n   |\n25 |                 if music_string[i]\
    \ == '|' {\n   |                    ^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n    "
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut output_vec:\
    \ Vec<isize> = vec![];\n    let mut current_beat: isize = 0;\n    let mut current_note_len:\
    \ isize = 0;\n    music_string.chars().for_each(|c|{\n        match c {\n    \
    \        'o' => output_vec.push(current_beat);\n            'o|' => output_vec.push(current_beat);\n\
    \            'o' => current_beat = 0;\n            '.|' => output_vec.push(current_beat);\n\
    \            '.' => current_beat = 1;\n            ' ' => current_beat = 2;\n\
    \            _ => output_vec.push(current_beat),\n        }\n        current_beat\
    \ += 1;\n        current_note_len = current_beat;\n    });\n    output_vec\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpq4taoo5f.rs:17:16\n\
    \   |\n17 |             'o|' => output_vec.push(current_beat);\n   |         \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = Vec::new();\n    for c in music_string.chars() {\n        match c {\n    \
    \        'o' => beats.push(4),\n            'o|' => beats.push(2),\n         \
    \   '.|' => beats.push(1),\n            _ => beats.push(1),\n        }\n    }\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp4b5nmgh9.rs:15:16\n\
    \   |\n15 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    let mut i = 0;\n    while i < music_string.len() {\n        let char = music_string.chars().nth(i).unwrap().to_string();\n\
    \        match char {\n            \"o\" | \"o|\" => {\n                beats.push(4);\n\
    \                i += 1;\n            }\n            \".|\" => {\n           \
    \     beats.push(1);\n                i += 1;\n            }\n            \".\"\
    \ => i += 1,\n            _ => panic!(\"This string has invalid characters. Try\
    \ '.o' or '.|' or '.'.\"),\n        }\n    }\n    beats\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppz5ds9b6.rs:16:13\n   |\n\
    15 |         match char {\n   |               ---- this expression has type `String`\n\
    16 |             \"o\" | \"o|\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppz5ds9b6.rs:16:19\n\
    \   |\n15 |         match char {\n   |               ---- this expression has\
    \ type `String`\n16 |             \"o\" | \"o|\" => {\n   |                  \
    \ ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppz5ds9b6.rs:20:13\n   |\n15 |         match char {\n   |      \
    \         ---- this expression has type `String`\n...\n20 |             \".|\"\
    \ => {\n   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppz5ds9b6.rs:24:13\n   |\n15 |         match\
    \ char {\n   |               ---- this expression has type `String`\n...\n24 |\
    \             \".\" => i += 1,\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut vec = Vec::new();\n\
    \    music_string.chars()\n        .filter(|c| c.is_ascii())\n        .for_each(|c|\
    \ {\n            match c {\n                'o' => vec.push(4),\n            \
    \    'o|' => vec.push(2),\n                '.|' => vec.push(1),\n            \
    \    _ => (),\n            }\n        });\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpe8xb1x5q.rs:17:20\n\
    \   |\n17 |                 'o|' => vec.push(2),\n   |                    ^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut counts = Vec::new();\n\
    \    let mut music_string = music_string.trim();\n    let mut last_beat = 0;\n\
    \    let mut current_beat = 0;\n    let mut last_note = music_string[0];\n   \
    \ let mut last_note_value = -1;\n    let mut last_note_length = 0;\n    for character\
    \ in music_string {\n        if character == \"|\" || character == \"o\" {\n \
    \           if current_beat > 4 {\n                counts.push(last_note_length);\n\
    \            }\n            current_beat = 0;\n            last_note = character;\n\
    \            last_note_length = 0;\n        } else {\n            match last_note\
    \ {\n                \"o\" => {\n                    last_note_value += 1;\n \
    \                   last_note_length += 1;\n                }\n              \
    \  \"o|\" => {\n                    last_note_value += 2;\n                  \
    \  last_note_length += 2;\n                }\n                \".|\" => {\n  \
    \                  last_note_value += 4;\n                    last_note_length\
    \ += 4;\n                }\n                _ => {\n                    panic!(\"\
    {} is not a valid musical note.\", last_note);\n                }\n          \
    \  }\n            last_note = character;\n            last_note_value = -1;\n\
    \            last_note_length = 0;\n        }\n        current_beat += 1;\n  \
    \  }\n    counts.push(last_note_length);\n    counts\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `str` cannot be indexed by `{integer}`\n  --> /tmp/tmp0y20mn2s.rs:15:25\n\
    \   |\n15 |     let mut last_note = music_string[0];\n   |                   \
    \      ^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<str>` is not implemented for `{integer}`\n   = note: you\
    \ can use `.chars().nth()` or `.bytes().nth()`\n           for more information,\
    \ see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<{integer}>` for `str`\n\
    \nerror[E0277]: `&str` is not an iterator\n  --> /tmp/tmp0y20mn2s.rs:18:22\n \
    \  |\n18 |     for character in music_string {\n   |                      ^^^^^^^^^^^^\
    \ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   =\
    \ help: the trait `Iterator` is not implemented for `&str`\n   = note: required\
    \ because of the requirements on the impl of `IntoIterator` for `&str`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.to_string();\n    let mut music_notes: Vec<isize> = vec![0; 26];\n\
    \n    for i in 0..music_string.len() {\n        if music_string[i] == \".\" ||\
    \ music_string[i] == \"o\" {\n            music_notes[i as usize - 1] += 1;\n\
    \        }\n    }\n    for i in music_notes.iter() {\n        if i > 4 { // if\
    \ note is over 4 beats, it must be a rest\n            music_notes.remove(&i);\n\
    \        }\n    }\n    music_notes\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmposawq_qf.rs:15:12\n\
    \   |\n15 |         if music_string[i] == \".\" || music_string[i] == \"o\" {\n\
    \   |            ^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmposawq_qf.rs:15:38\n\
    \   |\n15 |         if music_string[i] == \".\" || music_string[i] == \"o\" {\n\
    \   |                                      ^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmposawq_qf.rs:20:16\n\
    \   |\n20 |         if i > 4 { // if note is over 4 beats, it must be a rest\n\
    \   |                ^\n   |                |\n   |                expected `&isize`,\
    \ found integer\n   |                help: consider borrowing here: `&4`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmposawq_qf.rs:21:32\n   |\n21 |             music_notes.remove(&i);\n\
    \   |                                ^^ expected `usize`, found `&&isize`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an e"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_per_note\
    \ = vec![];\n    let mut last_note = String::from(\"\");\n    for ch in music_string.chars()\
    \ {\n        if ch == '.' {\n            beats_per_note.push(4);\n           \
    \ last_note = String::from(\"\");\n        } else if ch == 'o' {\n           \
    \ beats_per_note.push(4);\n            last_note = String::from(\"\");\n     \
    \   } else if ch == '|' {\n            beats_per_note.push(2);\n            last_note\
    \ = String::from(\"\");\n        } else if ch == '-' {\n            beats_per_note.push(1);\n\
    \            last_note = String::from(\"\");\n        } else {\n            last_note.push(ch);\n\
    \        }\n    }\n    beats_per_note\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 4, 2, 4, 2, 4, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpfwnr1s25.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beat_count:\
    \ Vec<isize> = vec![];\n    let mut previous_note = String::from(\"\");\n    let\
    \ mut last_note = String::from(\"\");\n    let mut last_beat: usize = 0;\n   \
    \ let mut last_beats_remaining: usize = 0;\n    for c in music_string.chars()\
    \ {\n        if c == ' ' {\n            if previous_note.len() != 0 {\n      \
    \          beat_count = beat_count.iter_mut().map(|b| b + 1).collect();\n    \
    \        }\n            previous_note = String::from(\"\");\n            last_note\
    \ = String::from(\"\");\n            last_beat = 0;\n            last_beats_remaining\
    \ = 0;\n            continue;\n        }\n        if last_note.len() == 0 {\n\
    \            last_beat = c.to_i();\n            last_beats_remaining = 0;\n  \
    \      }\n        if last_beats_remaining > 0 {\n            last_beats_remaining\
    \ -= 1;\n        }\n        if c == last_note {\n            last_beats_remaining\
    \ += 1;\n        }\n        previous_note = last_note;\n        last_note = c;\n\
    \        last_beat = last_beat + 1;\n        last_beats_remaining = last_beats_remaining;\n\
    \    }\n    beat_count = beat_count.iter_mut().map(|b| b + 1).collect();\n   \
    \ beat_count\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `&mut isize`\n  --> /tmp/tmpl1tr46ha.rs:19:62\n\
    \   |\n19 |                 beat_count = beat_count.iter_mut().map(|b| b + 1).collect();\n\
    \   |                                                            - ^ - {integer}\n\
    \   |                                                            |\n   |     \
    \                                                       &mut isize\n   |\nhelp:\
    \ `+` can be used on `isize`, you can dereference `b`\n   |\n19 |            \
    \     beat_count = beat_count.iter_mut().map(|b| *b + 1).collect();\n   |    \
    \                                                        +\n\nerror[E0599]: no\
    \ method named `to_i` found for type `char` in the current scope\n  --> /tmp/tmpl1tr46ha.rs:28:27\n\
    \   |\n28 |             last_beat = c.to_i();\n   |                          \
    \ ^^^^ help: there is an associated function with a similar name: `to_digit`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl1tr46ha.rs:34:17\n   |\n34 |\
    \         if c == last_note {\n   |                 ^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl1tr46ha.rs:38:21\n\
    \   |\n13 |     let mut last_note = String::from(\"\");\n   |                \
    \         ---------------- expected due to this value\n...\n38 |         last_note\
    \ = c;\n   |                     ^- help: try using a conversion method: `.to_string()`\n\
    \   |                     |\n   |                     expected struct `String`,\
    \ found `char`\n\nerror[E0369]: cannot add `{integer}` to `&mut isize`\n  -->\
    \ /tmp/tmpl1tr46ha.rs:42:50\n   |\n42 |     beat_count = beat_count.iter_mut().map(|b|\
    \ b + 1).collect();\n   |                                                - ^ -\
    \ {integer}\n   |                                                |\n   |     \
    \                                           &mut isize\n   |\nhelp: `+` can be\
    \ used on `isize`, you can dereference `b`\n   |\n42 |     beat_count = beat_count.iter_mut().map(|b|\
    \ *b + 1).collect();\n   |                                                +\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed exp"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    for (i, letter) in music_string.chars().enumerate() {\n        let letter:\
    \ isize = letter;\n        beats.push(i as isize);\n        let rest = music_string.chars().skip(i\
    \ + 1).take_while(|&b| b != letter).count();\n        if rest == 1 {\n       \
    \     beats.push(4);\n        }\n        if rest == 2 {\n            beats.push(2);\n\
    \        }\n        if rest == 3 {\n            beats.push(1);\n        }\n  \
    \  }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdbko2oof.rs:13:29\n   |\n\
    13 |         let letter: isize = letter;\n   |                     -----   ^^^^^^\
    \ expected `isize`, found `char`\n   |                     |\n   |           \
    \          expected due to this\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdbko2oof.rs:15:74\n\
    \   |\n15 |         let rest = music_string.chars().skip(i + 1).take_while(|&b|\
    \ b != letter).count();\n   |                                                \
    \                          ^^^^^^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut note_counts\
    \ = Vec::new();\n    let music_string = music_string.trim().to_lowercase();\n\
    \    for note in music_string.chars() {\n        note_counts.push(parse_note(note));\n\
    \    }\n    return note_counts\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_note` in this scope\n  --> /tmp/tmpi4ezsmia.rs:14:26\n\
    \   |\n14 |         note_counts.push(parse_note(note));\n   |                \
    \          ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.to_string();\n\n    // Split note names and rests\n    let mut\
    \ notes = music_string.split_whitespace();\n    notes.next();\n    let mut rests\
    \ = notes.split_whitespace().collect();\n\n    // Parse notes into their respective\
    \ frequencies\n    while let Some(note) = rests.pop() {\n        let mut rest\
    \ = note.chars().collect::<String>();\n        let note = note.to_string();\n\
    \        let rest = rest.trim().to_string();\n\n        // Parse note\n      \
    \  note = note.chars().skip_while(|c| c == ' ' || c == '.').collect::<String>();\n\
    \        note = note.to_string();\n\n        let note = note.trim().parse::<isize>().unwrap();\n\
    \n        if note.len() == 1 {\n            note = note.parse::<usize>().unwrap();\n\
    \        }\n\n        // Parse rest\n        rest = rest.chars().skip_while(|c|\
    \ c == ' ' || c == '.').collect::<String>();\n        rest = rest.to_string();\n\
    \n        // Parse rest\n        rest = rest.trim().parse::<isize>().unwrap();\n\
    \n        // We need to take care of rests that start with a \"-\" because \"\
    o\" doesn't have \"-\".\n        if note.len() == 1 && rest[0] != -256 {\n   \
    \         note = note.parse::<usize>().unwrap();\n            rest = rest.parse::<isize>().unwrap();\n\
    \        }\n\n        notes.push(note + rest);\n    }\n\n    notes\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `split_whitespace` found for struct `SplitWhitespace`\
    \ in the current scope\n  --> /tmp/tmpf279w0lx.rs:16:27\n   |\n16 |     let mut\
    \ rests = notes.split_whitespace().collect();\n   |                          \
    \ ^^^^^^^^^^^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0599]:\
    \ no method named `push` found for struct `SplitWhitespace` in the current scope\n\
    \  --> /tmp/tmpf279w0lx.rs:47:15\n   |\n47 |         notes.push(note + rest);\n\
    \   |               ^^^^ method not found in `SplitWhitespace<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf279w0lx.rs:50:5\n   |\n10 | fn parse_music(music_string:\
    \ String) -> Vec<isize> {\n   |                                         ----------\
    \ expected `Vec<isize>` because of return type\n...\n50 |     notes\n   |    \
    \ ^^^^^ expected struct `Vec`, found struct `SplitWhitespace`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split(|&char|\
    \ char == \".\").map(|string| {\n        let mut current_beat = 0;\n        match\
    \ string.chars().nth(0) {\n            Some('o') => current_beat += 4,\n     \
    \       Some('o|') => current_beat += 2,\n            Some('.|') => current_beat\
    \ += 1,\n            _ => (),\n        }\n        current_beat\n    })\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp_2xrbxoc.rs:15:21\n\
    \   |\n15 |             Some('o|') => current_beat += 2,\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_vec: Vec<isize>\
    \ = Vec::new();\n    let mut cur_note = 0;\n    for c in music_string.chars()\
    \ {\n        music_vec.push(cur_note);\n        cur_note += getchar_to_note_map(c);\n\
    \    }\n    music_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `getchar_to_note_map` in this scope\n\
    \  --> /tmp/tmpqa4ej8p_.rs:15:21\n   |\n15 |         cur_note += getchar_to_note_map(c);\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = 0; //\
    \ Number of beats for each note\n    let mut notes: Vec<isize> = vec![0]; // Vector\
    \ with notes, initialized with zero beats.\n\n    music_string.chars().for_each(|c|\
    \ {\n        notes.push(match c {\n            'o' => { beats = 4; },\n      \
    \      'o|' => { beats = 2; },\n            '.|' => { beats = 1; },\n        \
    \    _ => {\n                unreachable!(\"Can't parse char: {}\", c)\n     \
    \       }\n        });\n    });\n\n    notes\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpdnc0bd0j.rs:17:16\n\
    \   |\n17 |             'o|' => { beats = 2; },\n   |                ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \n    // Split the string into single notes\n    for note in music_string.split_whitespace()\
    \ {\n        // Get the note length and whether it is last or not, and update\
    \ beats\n        let length = note.len();\n        let is_last = if note[length\
    \ - 1] == String::from('.') {\n            true\n        } else {\n          \
    \  false;\n        };\n\n        if let Some(note) = note.parse::<&str>() {\n\
    \            if note.len() == 1 {\n                // Single note of specified\
    \ length\n                if is_last {\n                    beats.push(4);\n \
    \               } else {\n                    beats.push(1);\n               \
    \ }\n            } else if note.len() == 2 {\n                // Half note of\
    \ specified length\n                if is_last {\n                    beats.push(2);\n\
    \                } else {\n                    beats.push(1);\n              \
    \  }\n            } else if note.len() == 3 {\n                // Quater note\
    \ of specified length\n                if is_last {\n                    beats.push(1);\n\
    \                } else {\n                    beats.push(1);\n              \
    \  }\n            } else if note.len() == 4 {\n                // Eighth note\
    \ of specified length\n                if is_last {\n                    beats.push(4);\n\
    \                } else {\n                    beats.push(1);\n              \
    \  }\n            } else {\n                // Unknown note of specified length\n\
    \                panic!(\"Unknown note of length {}\", note.len());\n        \
    \    }\n        } else {\n            panic!(\"Unknown note type {}\", note);\n\
    \        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `str` cannot be indexed by `usize`\n  --> /tmp/tmpz_cqxqdz.rs:17:26\n\
    \   |\n17 |         let is_last = if note[length - 1] == String::from('.') {\n\
    \   |                          ^^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<str>` is not implemented for `usize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<usize>` for `str`\n\
    \nerror[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpz_cqxqdz.rs:20:13\n\
    \   |\n17 |           let is_last = if note[length - 1] == String::from('.') {\n\
    \   |  _______________________-\n18 | |             true\n   | |             ----\
    \ expected because of this\n19 | |         } else {\n20 | |             false;\n\
    \   | |             ^^^^^-\n   | |             |    |\n   | |             |  \
    \  help: consider removing this semicolon\n   | |             expected `bool`,\
    \ found `()`\n21 | |         };\n   | |_________- `if` and `else` have incompatible\
    \ types\n\nerror[E0277]: the trait bound `&str: FromStr` is not satisfied\n  -->\
    \ /tmp/tmpz_cqxqdz.rs:23:34\n   |\n23 |         if let Some(note) = note.parse::<&str>()\
    \ {\n   |                                  ^^^^^ the trait `FromStr` is not implemented\
    \ for `&str`\n   |\n   = help: the trait `FromStr` is implemented for `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz_cqxqdz.rs:23:16\n   |\n23 |\
    \         if let Some(note) = note.parse::<&str>() {\n   |                ^^^^^^^^^^\
    \   -------------------- this expression has type `Result<&str, _>`\n   |    \
    \            |\n   |                expected enum `Result`, found enum `Option`\n\
    \   |\n   = note: expected enum `Result<&str, _>`\n              found enum `Option<_>`\n\
    help: try wrapping the pattern in `Err`\n   |\n23 |         if let Err(Some(note))\
    \ = note.parse::<&str>() {\n   |                ++++          +\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.to_string();\n    let mut music_string = music_string.replace('\
    \ ', '|');\n\n    music_string.chars().filter(|c| *c != '|').take(music_string.len()).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptj7e24mj.rs:12:54\n   |\n\
    12 |     let mut music_string = music_string.replace(' ', '|');\n   |        \
    \                                              ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    12 |     let mut music_string = music_string.replace(' ', \"|\");\n   |      \
    \                                                ~~~\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `char`\n    --> /tmp/tmptj7e24mj.rs:14:73\n     |\n14   |     music_string.chars().filter(|c|\
    \ *c != '|').take(music_string.len()).collect()\n     |                      \
    \                                                   ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n     |\n     = help:\
    \ the trait `FromIterator<char>` is not implemented for `Vec<isize>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![0i32; 128];\n\n    let mut index = 0;\n\n    for note in music_string.chars()\
    \ {\n        if let 'o' | 'o|' =? note {\n            beats[index % 128] += 1;\n\
    \            index /= 128;\n        }\n\n        if let '.' | '..' =? note {\n\
    \            beats[index % 12] -= 1;\n            index /= 12;\n        }\n\n\
    \        if let '.|' =? note {\n            beats[index % 12] += 1;\n        \
    \    index /= 12;\n        }\n\n        if let '|' =? note {\n            beats[index\
    \ % 12] += 1;\n            index /= 12;\n        }\n    }\n\n    beats\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpqy41d2n6.rs:16:25\n\
    \   |\n16 |         if let 'o' | 'o|' =? note {\n   |                        \
    \ ^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = music_string.chars().map(|note|\
    \ {\n        match note {\n            'o' => 0,\n            'o|' => 1,\n   \
    \         '.|' => 2,\n            _ => unimplemented!(),\n        }\n    });\n\
    \n    let mut beats = 0;\n    let mut current_note = 0;\n    let mut current_beat_length\
    \ = 0;\n\n    while notes.len() > 0 {\n        if notes.len() == 1 {\n       \
    \     current_beat_length = notes[0].to_string().len();\n            current_note\
    \ = notes[0].to_string().chars().next().unwrap();\n        } else {\n        \
    \    current_beat_length += notes.last().unwrap().to_string().len();\n       \
    \     current_note = notes.last().unwrap().to_string().chars().next().unwrap();\n\
    \        }\n\n        if current_note == \"o\" {\n            beats += 4;\n  \
    \      }\n\n        if current_note == \"o|\" {\n            beats += 2;\n   \
    \     }\n\n        if current_note == \".|\" {\n            beats += 1;\n    \
    \    }\n\n        notes.last_mut().unwrap().to_string().chars().cloned()\n   \
    \ }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp86ww8zhj.rs:14:16\n\
    \   |\n14 |             'o|' => 1,\n   |                ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    let mut curr_beat = 0;\n    let mut last_note = String::from(\".\");\n  \
    \  for ch in music_string.chars() {\n        match ch {\n            'o' | 'O'\
    \ | '|' => {\n                if last_note.ends_with('|') {\n                \
    \    beats.push(curr_beat as isize);\n                    curr_beat = 0;\n   \
    \             }\n                last_note = String::from(ch.to_string());\n \
    \           }\n            '.' | '#' => {\n                last_note = String::from(ch.to_string());\n\
    \            }\n            c => {\n                curr_beat = curr_beat as isize\
    \ + 1;\n            }\n        }\n    }\n    if last_note.ends_with('|') {\n \
    \       beats.push(curr_beat as isize);\n    }\n    beats\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpicxwutws.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .chars()\n        .filter_map(|c| match c {\n            c if c == 'o' =>\
    \ {\n                if c.is_ascii() || c.is_whitespace() {\n                \
    \    true\n                } else {\n                    false\n             \
    \   }\n            }\n            c if c == '|' => {\n                if c.is_ascii()\
    \ || c.is_whitespace() {\n                    true\n                } else {\n\
    \                    false\n                }\n            }\n            c =>\
    \ {\n                c.is_ascii()\n            }\n        })\n        .take_while(|&c|\
    \ c.is_ascii())\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjyiwm0m2.rs:16:21\n   |\n\
    16 |                     true\n   |                     ^^^^ expected enum `Option`,\
    \ found `bool`\n   |\n   = note: expected enum `Option<_>`\n              found\
    \ type `bool`\nhelp: try wrapping the expression in `Some`\n   |\n16 |       \
    \              Some(true)\n   |                     +++++    +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjyiwm0m2.rs:18:21\n   |\n18 |              \
    \       false\n   |                     ^^^^^ expected enum `Option`, found `bool`\n\
    \   |\n   = note: expected enum `Option<_>`\n              found type `bool`\n\
    help: try wrapping the expression in `Some`\n   |\n18 |                     Some(false)\n\
    \   |                     +++++     +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpjyiwm0m2.rs:23:21\n   |\n23 |                     true\n   |       \
    \              ^^^^ expected enum `Option`, found `bool`\n   |\n   = note: expected\
    \ enum `Option<_>`\n              found type `bool`\nhelp: try wrapping the expression\
    \ in `Some`\n   |\n23 |                     Some(true)\n   |                 \
    \    +++++    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjyiwm0m2.rs:25:21\n\
    \   |\n25 |                     false\n   |                     ^^^^^ expected\
    \ enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n  \
    \            found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n25 |                     Some(false)\n   |                     +++++  \
    \   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjyiwm0m2.rs:29:17\n   |\n\
    29 |                 c.is_ascii()\n   |                 ^^^^^^^^^^^^ expected\
    \ enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n  \
    \            found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n29 |                 Some(c.is_ascii())\n   |                 +++++   \
    \         +\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_vec =\
    \ vec![0; music_string.len()];\n    music_vec.set_len(music_string.len());\n \
    \   let mut current_beat = 0;\n    for music_note_index in 0..music_string.len()\
    \ {\n        let music_note = music_string[music_note_index];\n        if music_note\
    \ == \"o\" {\n            music_vec[music_note_index] = 4;\n            current_beat\
    \ = 4;\n        } else if music_note == \"o|\" {\n            music_vec[music_note_index]\
    \ = 2;\n            current_beat = 2;\n        } else if music_note == \".|\"\
    \ {\n            music_vec[music_note_index] = 1;\n            current_beat =\
    \ 1;\n        } else {\n            assert!(music_note == \"..\");\n         \
    \   current_beat += 1;\n        }\n    }\n    music_vec\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxjf6bfm4.rs:15:26\n\
    \   |\n15 |         let music_note = music_string[music_note_index];\n   |   \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    let mut note = String::from(music_string);\n    while let Some(note) = note.rfind('|')\
    \ {\n        note.clear();\n        let mut rest = note.split_ascii_whitespace();\n\
    \        while let Some(beat) = rest.next().as_digits() {\n            beats.push(beat);\n\
    \        }\n        note = rest.collect();\n    }\n    note.clear();\n    let\
    \ mut rest = note.split_ascii_whitespace();\n    while let Some(beat) = rest.next().as_digits()\
    \ {\n        beats.push(beat);\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clear` found for type `usize` in the current\
    \ scope\n  --> /tmp/tmp3akpg381.rs:14:14\n   |\n14 |         note.clear();\n \
    \  |              ^^^^^ method not found in `usize`\n\nerror[E0599]: no method\
    \ named `split_ascii_whitespace` found for type `usize` in the current scope\n\
    \  --> /tmp/tmp3akpg381.rs:15:29\n   |\n15 |         let mut rest = note.split_ascii_whitespace();\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^ method not found in `usize`\n\
    \nerror[E0599]: no method named `as_digits` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp3akpg381.rs:23:40\n   |\n23 |     while let Some(beat)\
    \ = rest.next().as_digits() {\n   |                                        ^^^^^^^^^\
    \ method not found in `Option<&str>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes: Vec<isize>\
    \ = Vec::new();\n\n    for note in music_string.chars() {\n        notes.push(note\
    \ == \"o\" ? 4 : note == \"o|\" ? 2 : note == \".|\" ? 1 : 0);\n    }\n\n    notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `4`\n\
    \  --> /tmp/tmp0qz9otbf.rs:14:34\n   |\n14 |         notes.push(note == \"o\"\
    \ ? 4 : note == \"o|\" ? 2 : note == \".|\" ? 1 : 0);\n   |                  \
    \               -^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |  \
    \                               |\n   |                                 help:\
    \ missing `,`\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found\
    \ `2`\n  --> /tmp/tmp0qz9otbf.rs:14:53\n   |\n14 |         notes.push(note ==\
    \ \"o\" ? 4 : note == \"o|\" ? 2 : note == \".|\" ? 1 : 0);\n   |            \
    \                                        -^ expected one of `)`, `,`, `.`, `?`,\
    \ or an operator\n   |                                                    |\n\
    \   |                                                    help: missing `,`\n\n\
    error: expected one of `)`, `,`, `.`, `?`, or an operator, found `1`\n  --> /tmp/tmp0qz9otbf.rs:14:72\n\
    \   |\n14 |         notes.push(note == \"o\" ? 4 : note == \"o|\" ? 2 : note ==\
    \ \".|\" ? 1 : 0);\n   |                                                     \
    \                   ^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror:\
    \ expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`,\
    \ `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`,\
    \ `~`, an operator, lifetime, or path, found `0`\n  --> /tmp/tmp0qz9otbf.rs:14:76\n\
    \   |\n14 |         notes.push(note == \"o\" ? 4 : note == \"o|\" ? 2 : note ==\
    \ \".|\" ? 1 : 0);\n   |                                                     \
    \                       ^ expected one of 26 possible tokens\n\nerror: aborting\
    \ due to 4 previous errors\n\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut last_beat: usize\
    \ = 0;\n    let mut beats: Vec<usize> = vec![];\n    for note in music_string.chars()\
    \ {\n        if note.chars().next() != ' ' || note.chars().next() != '#' {\n \
    \           beats.push(last_beat);\n            last_beat = 0;\n        }\n  \
    \      last_beat += 1;\n    }\n    beats.push(last_beat);\n    beats\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chars` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpef4rb9nm.rs:14:17\n   |\n14 |         if note.chars().next()\
    \ != ' ' || note.chars().next() != '#' {\n   |                 ^^^^^ method not\
    \ found in `char`\n\nerror[E0599]: no method named `chars` found for type `char`\
    \ in the current scope\n  --> /tmp/tmpef4rb9nm.rs:14:47\n   |\n14 |         if\
    \ note.chars().next() != ' ' || note.chars().next() != '#' {\n   |           \
    \                                    ^^^^^ method not found in `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpef4rb9nm.rs:21:5\n   |\n10 | fn parse_music(music_string:\
    \ String) -> Vec<isize> {\n   |                                         ----------\
    \ expected `Vec<isize>` because of return type\n...\n21 |     beats\n   |    \
    \ ^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.replace(\"\
    o\", \".\").replace(\"|\", \"o\")\n        .replace(\"|\", \"\")\n        .replace(\"\
    |\", \".\")\n        .replace(\"|\", \".\")\n        .replace(\"|\", \"\")\n \
    \       .replace(\"|\", \".\")\n        .replace(\"|\", \"o\")\n        .replace(\"\
    o\", \"o\");\n\n    let mut result = vec![0; music_string.len()];\n    let mut\
    \ notes: Vec<isize> = vec![0; music_string.len()];\n    let mut current_note =\
    \ 0;\n    let mut current_beat = 0;\n    for c in music_string {\n        if c\
    \ == '.' {\n            current_note += 1;\n            current_beat = 0;\n  \
    \      }\n        if c == 'o' || c == '|' {\n            current_note -= 1;\n\
    \            current_beat += 1;\n        }\n\n        if current_note < 0 {\n\
    \            result[current_beat] += 1;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmp7rk189wh.rs:24:14\n\
    \   |\n24 |     for c in music_string {\n   |              ^^^^^^^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the\
    \ trait `Iterator` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.lines()\n\
    \        .filter_map(|line| {\n            if line.is_empty() {\n            \
    \    None\n            } else {\n                Some(line.chars().filter(|c|\
    \ *c != '|').collect::<Vec<_>>().len())\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmpobh6xzd6.rs:19:10\n     |\n19\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help: the trait\
    \ `FromIterator<usize>` is not implemented for `Vec<isize>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut counter = 0;\n\
    \    let mut beats_per_note = vec![0];\n    for note in music_string.chars() {\n\
    \        match note {\n            'o' => {\n                beats_per_note.push(counter);\n\
    \                counter += 4;\n            }\n            'o|' => {\n       \
    \         beats_per_note.push(counter);\n                counter += 2;\n     \
    \       }\n            '.|' => {\n                beats_per_note.push(counter);\n\
    \                counter += 1;\n            }\n            _ => {\n          \
    \      counter += 1;\n            }\n        }\n    }\n    beats_per_note\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpf5tg0990.rs:19:16\n\
    \   |\n19 |             'o|' => {\n   |                ^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_per_note\
    \ = [4, 2, 2, 1]; // Default beats per note\n    music_string.chars().filter(|c|\n\
    \        c.is_ascii_digit() || c.is_ascii_lowercase_letter() || c.is_ascii_uppercase_letter()\n\
    \    ).for_each(|c| {\n        let digit_int = c.digit(10);\n        let note\
    \ = c.ascii_letter();\n        beats_per_note.iter_mut().for_each(|b| {\n    \
    \        match note.clone() {\n                \"o\" => b +=\n               \
    \     digit_int * 4 as isize,\n                \"o|\" => b += digit_int * 2 as\
    \ isize,\n                \".|\" => b +=\n                    digit_int * 1 as\
    \ isize,\n            }\n        })\n    });\n    beats_per_note\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_lowercase_letter` found for reference\
    \ `&char` in the current scope\n  --> /tmp/tmptc4_mhew.rs:13:33\n   |\n13 |  \
    \       c.is_ascii_digit() || c.is_ascii_lowercase_letter() || c.is_ascii_uppercase_letter()\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `is_ascii_lowercase`\n\nerror[E0599]:\
    \ no method named `is_ascii_uppercase_letter` found for reference `&char` in the\
    \ current scope\n  --> /tmp/tmptc4_mhew.rs:13:66\n   |\n13 |         c.is_ascii_digit()\
    \ || c.is_ascii_lowercase_letter() || c.is_ascii_uppercase_letter()\n   |    \
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: there is an associated function with a similar name: `is_ascii_uppercase`\n\
    \nerror[E0599]: no method named `digit` found for type `char` in the current scope\n\
    \  --> /tmp/tmptc4_mhew.rs:15:27\n   |\n15 |         let digit_int = c.digit(10);\n\
    \   |                           ^^^^^ help: there is an associated function with\
    \ a similar name: `is_digit`\n\nerror[E0599]: no method named `ascii_letter` found\
    \ for type `char` in the current scope\n  --> /tmp/tmptc4_mhew.rs:16:22\n   |\n\
    16 |         let note = c.ascii_letter();\n   |                      ^^^^^^^^^^^^\
    \ method not found in `char`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `&mut {integer}`\n  --> /tmp/tmptc4_mhew.rs:19:24\n\
    \   |\n19 |                   \"o\" => b +=\n   |                          ^ cannot\
    \ use `+=` on type `&mut {integer}`\n   |  ________________________|\n   | |\n\
    20 | |                     digit_int * 4 as isize,\n   | |__________________________________________^\n\
    \   |\nhelp: `+=` can be used on `{integer}`, you can dereference `b`\n   |\n\
    19 |                 \"o\" => *b +=\n   |                        +\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&mut {integer}`\n\
    \  --> /tmp/tmptc4_mhew.rs:21:25\n   |\n21 |                 \"o|\" => b += digit_int\
    \ * 2 as isize,\n   |                         -^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    let mut note = String::new();\n    let mut position = 1;\n    for c in music_string.chars()\
    \ {\n        note = note.push_str(c);\n        if note.len() == 1 && note.chars().first().unwrap()\
    \ == 'o' {\n            note = note.push_str(\"|\");\n        }\n        if note.len()\
    \ == 1 {\n            beats.push(position);\n            position += 1;\n    \
    \        note = String::new();\n        } else {\n            note = note.push_str(\"\
    o|\");\n        }\n    }\n    beats.push(position);\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppbm7b8wb.rs:15:30\n   |\n\
    15 |         note = note.push_str(c);\n   |                              ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppbm7b8wb.rs:15:16\n\
    \   |\n12 |     let mut note = String::new();\n   |                    -------------\
    \ expected due to this value\n...\n15 |         note = note.push_str(c);\n   |\
    \                ^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n   |\n\
    note: method `push_str` modifies its receiver in-place\n  --> /tmp/tmppbm7b8wb.rs:15:21\n\
    \   |\n15 |         note = note.push_str(c);\n   |                ---- ^^^^^^^^\
    \ this call modifies `note` in-place\n   |                |\n   |            \
    \    you probably want to use this value after calling the method...\n   = note:\
    \ ...instead of the `()` output of method `push_str`\n\nerror[E0599]: no method\
    \ named `first` found for struct `Chars` in the current scope\n  --> /tmp/tmppbm7b8wb.rs:16:44\n\
    \   |\n16 |         if note.len() == 1 && note.chars().first().unwrap() == 'o'\
    \ {\n   |                                            ^^^^^ method not found in\
    \ `Chars<'_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppbm7b8wb.rs:17:20\n\
    \   |\n12 |     let mut note = String::new();\n   |                    -------------\
    \ expected due to this value\n...\n17 |             note = note.push_str(\"|\"\
    );\n   |                    ^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n  --> /tmp/tmppbm7b8wb.rs:17:25\n\
    \   |\n17 |             note = note.push_str(\"|\");\n   |                   \
    \ ---- ^^^^^^^^ this call modifies `note` in-place\n   |                    |\n\
    \   |                    you probably want to use this value after calling the\
    \ method...\n   = note: ...instead of the `()` output of method `push_str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmppbm7b8wb.rs:24:20\n   |\n12 |  \
    \   let mut note = String::new();\n   |                    ------------- expected\
    \ due to this value\n...\n24 |             note = note.push_str(\"o|\");\n   |\
    \                "
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .lines()\n        .filter_map(|l| {\n            if l.is_empty() {\n     \
    \           None\n            } else {\n                let mut note = l;\n  \
    \              if note.len() == 1 {\n                    if note.chars().all(|c|\
    \ c == 'o' || c == '|' || c == '.') {\n                        None\n        \
    \            } else {\n                        Some(note)\n                  \
    \  }\n                } else {\n                    None\n                }\n\
    \            }\n        })\n        .map(|note| {\n            if note.len() ==\
    \ 1 {\n                if note.chars().all(|c| c == 'o' || c == '|' || c == '.')\
    \ {\n                    4\n                } else {\n                    note.chars().count()\
    \ as isize\n                }\n            } else {\n                note.chars().count()\
    \ / 2\n            }\n        })\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpt_veciy0.rs:37:17\n\
    \   |\n30 |  /             if note.len() == 1 {\n31 |  |                 if note.chars().all(|c|\
    \ c == 'o' || c == '|' || c == '.') {\n   |  |_________________-\n32 | ||    \
    \                 4\n33 | ||                 } else {\n34 | ||               \
    \      note.chars().count() as isize\n35 | ||                 }\n   | ||_________________-\
    \ expected because of this\n36 |  |             } else {\n37 |  |            \
    \     note.chars().count() / 2\n   |  |                 ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n38 |  |             }\n   |  |_____________-\
    \ `if` and `else` have incompatible types\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    let mut note_symbols = music_string.chars().enumerate().map(|(i, &c)| {\n\
    \        let mut temp: Vec<isize> = vec![];\n        if c == 'o' {\n         \
    \   temp.resize(4);\n            temp[..4] = vec![0, 1, 2];\n        } else if\
    \ c == '.' {\n            temp.resize(4);\n            temp[..4] = vec![0, 1,\
    \ 2, 3];\n        } else if c == '|' {\n            temp.resize(1);\n        \
    \    temp[..1] = vec![0, 1, 2];\n        }\n        beats.extend(temp);\n    \
    \    temp\n    });\n    beats.clone_from(&note_symbols.collect::<Vec<_>>());\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0z2q3ap3.rs:12:70\n   |\n\
    12 |     let mut note_symbols = music_string.chars().enumerate().map(|(i, &c)|\
    \ {\n   |                                                                    \
    \  ^^- expected due to this\n   |                                            \
    \                          |\n   |                                           \
    \                           expected `char`, found reference\n   |           \
    \                                                           help: you can probably\
    \ remove the explicit borrow: `c`\n   |\n   = note:   expected type `char`\n \
    \          found reference `&_`\n\nerror[E0061]: this function takes 2 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmp0z2q3ap3.rs:15:18\n     |\n15 \
    \  |             temp.resize(4);\n     |                  ^^^^^^ - supplied 1\
    \ argument\n     |                  |\n     |                  expected 2 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0z2q3ap3.rs:16:25\n   |\n16 |             temp[..4] = vec![0, 1,\
    \ 2];\n   |             ---------   ^^^^^^^^^^^^^ expected slice `[isize]`, found\
    \ struct `Vec`\n   |             |\n   |             expected due to the type\
    \ of this binding\n   |\n   = note: expected slice `[isize]`\n             found\
    \ struct `Vec<{integer}>`\n   = note: this error originates in the macro `vec`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \  --> /tmp/tmp0z2q3ap3.rs:16:13\n   |\n16 |             temp[..4] = vec![0, 1,\
    \ 2];\n   |             ^^^^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n   = note:\
    \ the left-hand-side of an assignment must have a statically known size\n\nerror[E0061]:\
    \ this function takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmp0z2q3ap3.rs:18:18\n\
    \     |\n18   |             temp.resize(4);\n     |                  ^^^^^^ -\
    \ supplied 1 argument\n     |                  |\n  "
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .as_bytes()\n        .iter()\n        .map(|&c| match c {\n            b'o'\
    \ => 1,\n            b'o|' => 2,\n            b'|' => 4,\n            _ => 0,\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp7jf98jn7.rs:16:13\n\
    \   |\n16 |             b'o|' => 2,\n   |             ^^^^^\n   |\nhelp: if you\
    \ meant to write a byte string literal, use double quotes\n   |\n16 |        \
    \     b\"o|\" => 2,\n   |             ~~~~~\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.split(|&x|\
    \ match x {\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1,\n     \
    \   _ => panic!(\"Invalid musical note found in string: {}\", x),\n    }).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpn10zvmnu.rs:13:12\n\
    \   |\n13 |         'o|' => 2,\n   |            ^^^^^^^\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .chars()\n        .filter_map(|c| match c {\n            'o' => Some(1),\n\
    \            'o|' => Some(2),\n            '.|' => Some(4),\n            _ =>\
    \ None,\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpara1ivbc.rs:15:16\n\
    \   |\n15 |             'o|' => Some(2),\n   |                ^^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = 0; //\
    \ how many beats\n    let mut last_note_length = 0;\n    let mut last_note = \"\
    \";\n\n    for note in music_string.chars() {\n        let mut note_length = 1;\
    \ // how many notes in a beat\n        let mut note_string = \"\";\n        if\
    \ note == \"o\" {\n            last_note = \"o\";\n            last_note_length\
    \ = 4;\n        }\n        note_length += (note == \"o|\") ? 4 : 2;\n        if\
    \ note == \".|\" {\n            last_note = \".|\";\n            last_note_length\
    \ = 1;\n        }\n        if note != \".\" {\n            note_string += note;\n\
    \        }\n        last_note_length += note_length;\n\n        if note == \"\
    o|\" {\n            beats += last_note_length / 4;\n        }\n        if note\
    \ == \".|\" {\n            beats += last_note_length;\n        }\n        last_note\
    \ = note_string;\n        last_note_length = note_length;\n    }\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `4`\n\
    \  --> /tmp/tmp6qzp80go.rs:22:41\n   |\n22 |         note_length += (note == \"\
    o|\") ? 4 : 2;\n   |                                         ^ expected one of\
    \ `.`, `;`, `?`, `}`, or an operator\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6qzp80go.rs:18:20\n   |\n18 |         if note == \"o\" {\n   |     \
    \               ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to\
    \ write a `char` literal, use single quotes\n   |\n18 |         if note == 'o'\
    \ {\n   |                    ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6qzp80go.rs:41:5\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n41 |     beats\n   |     ^^^^^ expected struct `Vec`, found\
    \ integer\n   |\n   = note: expected struct `Vec<isize>`\n                found\
    \ type `{integer}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut counts = vec![0;\
    \ 128];\n    let mut beat_track = vec![0; 128];\n    let mut pos = 0;\n    for\
    \ c in music_string.chars() {\n        // O is treated as note off (count the\
    \ length of note off)\n        if c == 'o' {\n            counts[c] = pos - 1;\n\
    \            pos += 4;\n        } else if c == '|' {\n            counts[c] =\
    \ pos - 2;\n            pos += 2;\n        } else {\n            counts[c] = pos\
    \ - 1;\n            pos += 1;\n        }\n    }\n    for k in counts {\n     \
    \   beat_track[k] += 1;\n    }\n    return beat_track;\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `char`\n  -->\
    \ /tmp/tmpx1tivals.rs:17:13\n   |\n17 |             counts[c] = pos - 1;\n   |\
    \             ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `char`\n\
    \   = note: required because of the requirements on the impl of `Index<char>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `char`\n  --> /tmp/tmpx1tivals.rs:20:13\n   |\n20 |             counts[c]\
    \ = pos - 2;\n   |             ^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `char`\n   = note: required because of the requirements on the\
    \ impl of `Index<char>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `char`\n  --> /tmp/tmpx1tivals.rs:23:13\n   |\n23 |   \
    \          counts[c] = pos - 1;\n   |             ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `char`\n   = note: required because of the requirements\
    \ on the impl of `Index<char>` for `Vec<{integer}>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .chars()\n        .filter(|&c| c != 'o')\n        .filter(|&c| c != '|')\n\
    \        .filter(|&c| c != '.')\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpemmlwgx5.rs:16:10\n     |\n16\
    \   |         .collect()\n     |          ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait\
    \ `FromIterator<char>` is not implemented for `Vec<isize>`\n     = help: the trait\
    \ `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in\
    \ `collect`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![0i32; MUSIC_LENGTH as usize];\n    for music in music_string.chars().skip(1).take(MUSIC_LENGTH\
    \ as usize) {\n        match music.to_ascii_lowercase() {\n            '.' | 'o'\
    \ => {\n                if beats[MUSIC_LENGTH - 1i] as isize != 4 {\n        \
    \            beats[MUSIC_LENGTH - 1i] as isize += 1;\n                }\n    \
    \        }\n            '|' => {\n                if beats[MUSIC_LENGTH - 1i]\
    \ as isize != 2 {\n                    beats[MUSIC_LENGTH - 1i] as isize += 1;\n\
    \                }\n            }\n            _ => {}\n        }\n    }\n   \
    \ beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: invalid suffix `i` for number literal\n  --> /tmp/tmpj1jtwsow.rs:15:41\n\
    \   |\n15 |                 if beats[MUSIC_LENGTH - 1i] as isize != 4 {\n   |\
    \                                         ^^ invalid suffix `i`\n   |\n   = help:\
    \ the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n\n\
    error: invalid suffix `i` for number literal\n  --> /tmp/tmpj1jtwsow.rs:16:42\n\
    \   |\n16 |                     beats[MUSIC_LENGTH - 1i] as isize += 1;\n   |\
    \                                          ^^ invalid suffix `i`\n   |\n   = help:\
    \ the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n\n\
    error: invalid suffix `i` for number literal\n  --> /tmp/tmpj1jtwsow.rs:20:41\n\
    \   |\n20 |                 if beats[MUSIC_LENGTH - 1i] as isize != 2 {\n   |\
    \                                         ^^ invalid suffix `i`\n   |\n   = help:\
    \ the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n\n\
    error: invalid suffix `i` for number literal\n  --> /tmp/tmpj1jtwsow.rs:21:42\n\
    \   |\n21 |                     beats[MUSIC_LENGTH - 1i] as isize += 1;\n   |\
    \                                          ^^ invalid suffix `i`\n   |\n   = help:\
    \ the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n\n\
    error[E0425]: cannot find value `MUSIC_LENGTH` in this scope\n  --> /tmp/tmpj1jtwsow.rs:11:44\n\
    \   |\n11 |     let mut beats: Vec<isize> = vec![0i32; MUSIC_LENGTH as usize];\n\
    \   |                                            ^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `MUSIC_LENGTH` in this scope\n  -->\
    \ /tmp/tmpj1jtwsow.rs:12:52\n   |\n12 |     for music in music_string.chars().skip(1).take(MUSIC_LENGTH\
    \ as usize) {\n   |                                                    ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `MUSIC_LENGTH` in\
    \ this scope\n  --> /tmp/tmpj1jtwsow.rs:15:26\n   |\n15 |                 if beats[MUSIC_LENGTH\
    \ - 1i] as isize != 4 {\n   |                          ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `MUSIC_LENGTH` in this scope\n\
    \  -->"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut parsed_music\
    \ = Vec::new();\n\n    music_string\n        .chars()\n        .filter_map(|c|\
    \ match c {\n            'o' => Some(4),\n            'o|' => Some(2),\n     \
    \       '.|' => Some(1),\n            _ => None,\n        })\n        .for_each(|beats|\
    \ parsed_music.push(beats));\n\n    parsed_music\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmplbdpsj4s.rs:17:16\n\
    \   |\n17 |             'o|' => Some(2),\n   |                ^^^^^^^^^^^^^\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut num_beats =\
    \ vec![];\n    let mut i = 0;\n    loop {\n        let ch = music_string[i];\n\
    \        match ch {\n            ch::'o' => {\n                num_beats.push(i\
    \ * 4);\n                i += 1;\n            }\n            ch::'|' => {\n  \
    \              num_beats.push(i * 2);\n                i += 1;\n            }\n\
    \            ch::'.' => {\n                i += 1;\n            }\n          \
    \  _ => i += 1,\n        }\n    }\n    num_beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `'o'`\n  --> /tmp/tmp8emoedyc.rs:16:17\n\
    \   |\n16 |             ch::'o' => {\n   |                 ^^^ expected identifier\n\
    \nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp8emoedyc.rs:14:18\n\
    \   |\n14 |         let ch = music_string[i];\n   |                  ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nwarning: unreachable expression\n  --> /tmp/tmp8emoedyc.rs:30:5\n\
    \   |\n15 | /         match ch {\n16 | |             ch::'o' => {\n17 | |    \
    \             num_beats.push(i * 4);\n18 | |                 i += 1;\n...  |\n\
    27 | |             _ => i += 1,\n28 | |         }\n   | |_________- any code following\
    \ this expression is unreachable\n29 |       }\n30 |       num_beats\n   |   \
    \    ^^^^^^^^^ unreachable expression\n   |\n   = note: `#[warn(unreachable_code)]`\
    \ on by default\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    let mut last_note = String::from(\".\");\n\n    for c in music_string.chars()\
    \ {\n        let mut last_beat = String::from(\".\");\n        let mut beats_changed\
    \ = false;\n\n        if c == 'o' {\n            if beats_changed {\n        \
    \        beats.push(beats.last().unwrap());\n                beats.push(0);\n\
    \                beats_changed = false;\n            }\n        }\n        else\
    \ if c == '|' {\n            if last_note.to_ascii_lowercase() == \".\" {\n  \
    \              beats_changed = true;\n            }\n            beats_changed\
    \ = true;\n        }\n        else if c == 'o' {\n            beats_changed =\
    \ true;\n        }\n        else if last_note.to_ascii_lowercase() == \".\" {\n\
    \            last_beat = String::from(\".\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \"o\" {\n            last_beat = String::from(\"o\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n      \
    \  else if last_note.to_ascii_lowercase() == \"o\" {\n            last_beat =\
    \ String::from(\"o\");\n        }\n        else if last_note.to_ascii_lowercase()\
    \ == \".\" {\n            last_beat = String::from(\".\");\n        }\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp4e42_f67.rs:91:3\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n14 |\
    \     for c in music_string.chars() {\n   |                                  \
    \ - this delimiter might not be properly closed...\n...\n82 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n91 | }\n   |   ^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp4e42_f67.rs:20:28\n   |\n20 |  \
    \               beats.push(beats.last().unwrap());\n   |                     \
    \       ^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                            |\n   |                            cyclic type\
    \ of infinite size\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4e42_f67.rs:10:41\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![0; 6];\n    music_string.split_whitespace().for_each(|note| {\n     \
    \   let note_type = note[0];\n        let note = note.clone();\n\n        if note_type\
    \ == '.' {\n            beats[2] += 1;\n        } else if note_type == 'o' {\n\
    \            beats[1] += 1;\n        } else if note_type == 'o|' {\n         \
    \   beats[3] += 1;\n        } else {\n            println!(\"Unsupported note\
    \ type!\");\n        }\n    });\n\n    beats.iter().enumerate().filter(|(_, beat)|\
    \ beat % 4 != 0)\n        .map(|(_, beat)| beat / 4)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp6dnbnj9g.rs:20:35\n\
    \   |\n20 |         } else if note_type == 'o|' {\n   |                      \
    \             ^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    let mut note = music_string.chars().skip_while(|&c| !c.is_ascii_digit()).take_while(|&c|\
    \ !c.is_ascii_letter()).collect::<String>();\n    let mut rest = note.chars().skip_while(|&c|\
    \ !c.is_ascii_digit()).collect::<String>();\n    let mut note_last = note.chars().skip_while(|&c|\
    \ c.is_ascii_digit()).collect::<String>();\n    note.clear();\n    rest.clear();\n\
    \    note_last.clear();\n\n    while !note.is_empty() {\n        if note.len()\
    \ < 3 {\n            note.push('.');\n            continue;\n        }\n\n   \
    \     let note_to_int = if note[0] == 'o' { 0 } else if note[0] == '.' { 1 } else\
    \ { 2 };\n        let note_length = note.to_ascii_lowercase().len() + 1;\n\n \
    \       let beat = note.chars().skip_while(|&c| c.is_ascii_digit()).count();\n\
    \n        // For now, notes that last more or less 1 beat are ignored\n      \
    \  // For other notes it is handled differently\n        if beat < note_length\
    \ {\n            beats.push(beat);\n        }\n\n        note.clear();\n     \
    \   rest.clear();\n        note_last.clear();\n    }\n\n    while !rest.is_empty()\
    \ {\n        if rest.len() < 3 {\n            rest.push('.');\n            continue;\n\
    \        }\n\n        let rest = rest.to_ascii_lowercase();\n\n        let rest\
    \ = rest.chars().skip_while(|&c| c.is_ascii_digit()).collect::<String>();\n\n\
    \        let beat = rest.chars().skip_while(|&c| c.is_ascii_digit()).count();\n\
    \n        // For now, notes that last more or less 1 beat are ignored\n      \
    \  // For other notes it is handled differently\n        if beat < rest.len()\
    \ {\n            beats.push(beat);\n        }\n\n        rest.clear();\n    }\n\
    \n    while !note_last.is_empty() {\n        if note_last.len() < 3 {\n      \
    \      note_last.push('.');\n            continue;\n        }\n\n        let note_last\
    \ = note_last.to_ascii_lowercase();\n\n        let note_last = note_last.chars().skip_while(|&c|\
    \ c.is_ascii_digit()).collect::<String>();\n\n        let beat = note_last.chars().skip_while(|&c|\
    \ c.is_ascii_digit()).count();\n\n        // For now, notes that last more or\
    \ less 1 beat are ignored\n        // For other notes it is handled differently\n\
    \        if beat < note_last.len() {\n            beats.push(beat);\n        }\n\
    \n\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpxr1sjbq8.rs:90:3\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n62 |\
    \     while !note_last.is_empty() {\n   |                                 - this\
    \ delimiter might not be properly closed...\n...\n81 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n90 | }\n   |   ^\n\nerror[E0599]:\
    \ no method named `is_ascii_letter` found for type `char` in the current scope\n\
    \  --> /tmp/tmpxr1sjbq8.rs:12:97\n   |\n12 |     let mut note = music_string.chars().skip_while(|&c|\
    \ !c.is_ascii_digit()).take_while(|&c| !c.is_ascii_letter()).collect::<String>();\n\
    \   |                                                                        \
    \                         ^^^^^^^^^^^^^^^ help: there is an associated function\
    \ with a similar name: `is_ascii`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `{integer}`\n  --> /tmp/tmpxr1sjbq8.rs:25:30\n   |\n25 |        \
    \ let note_to_int = if note[0] == 'o' { 0 } else if note[0] == '.' { 1 } else\
    \ { 2 };\n   |                              ^^^^^^^ `String` cannot be indexed\
    \ by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmpxr1sjbq8.rs:25:59\n   |\n25 |         let note_to_int = if note[0]\
    \ == 'o' { 0 } else if note[0] == '.' { 1 } else { 2 };\n   |                \
    \                                           ^^^^^^^ `String` cannot be indexed\
    \ by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes_to_beats:\
    \ Vec<isize> = Vec::new();\n\n    for note in music_string.split(|c| c == 'o'\
    \ || c == '|' || c == '.') {\n        if note == \"o\" {\n            notes_to_beats.push(4);\n\
    \        }\n        if note == \"o|\" {\n            notes_to_beats.push(2);\n\
    \        }\n        if note == \".|\" {\n            notes_to_beats.push(1);\n\
    \        }\n    }\n    notes_to_beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmprnjhttv8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Return empty array\
    \ if music string is empty\n    let mut music_vector = Vec::new();\n    let mut\
    \ music_string_iter = music_string.chars().collect::<String>();\n    let mut note_to_beat\
    \ = 0;\n\n    // Loop over each character in music_string, one at a time\n   \
    \ // - If the character is a single note (a dot), then skip to the last note\n\
    \    // - If the character is a double note, then set the current note to a double\
    \ note (a pipe)\n    // - If the character is an 'o', then set the current note\
    \ to the first note\n    // - Otherwise, set the current note to the next note\n\
    \    for _ in 0..music_string.len() {\n        // Get current character\n    \
    \    let c = music_string_iter.next().unwrap();\n\n        // Skip notes if necessary\n\
    \        match c {\n            'o' => {\n                note_to_beat = 0;\n\
    \            }\n            '.' => {\n                note_to_beat += 1;\n   \
    \         }\n            _ => {}\n        }\n\n        // If a note, then add\
    \ it to the music vector\n        if note_to_beat > 0 {\n            music_vector.push(note_to_beat);\n\
    \        }\n    }\n    music_vector\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `next` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp62rfmy_1.rs:23:35\n   |\n23 |         let c = music_string_iter.next().unwrap();\n\
    \   |                                   ^^^^ method not found in `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.trim_left();\n\
    \    let music_string = music_string.trim_right();\n\n    let mut parsed_music\
    \ = Vec::new();\n    let mut position = 0;\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            parsed_music.push(position);\n       \
    \     position = 0;\n        } else {\n            position += 1;\n        }\n\
    \    }\n    parsed_music.push(position);\n    parsed_music\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpan5rrax6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n\n    for note in music_string.chars() {\n        match note {\n\
    \            'o' => beats.push(4),\n            'o|' => beats.push(2),\n     \
    \       '.|' => beats.push(1),\n            _ => {\n                let mut beats\
    \ = beats.clone();\n                beats.pop();\n                beats.push(1);\n\
    \                beats\n            }\n        }\n    }\n\n    beats\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpw7xxal_n.rs:16:16\n\
    \   |\n16 |             'o|' => beats.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![];\n    let mut current: usize = 0;\n    let mut next_beat: usize = 4;\n\
    \    let mut last_beat: usize = 4;\n    let mut last: usize = 0;\n    for c in\
    \ music_string.chars() {\n        match c {\n            'o' => beats.push(current),\n\
    \            'o|' => beats.push(current - last_beat + next_beat),\n          \
    \  '.|' => beats.push(current - last_beat),\n            _ => {}\n        };\n\
    \        let mut new_current: usize = 0;\n        let mut last_beat: usize = 4;\n\
    \        match c {\n            'o' => new_current = current + 4,\n          \
    \  'o|' => new_current = current + 2,\n            '.|' => new_current = current\
    \ + 1,\n            _ => {}\n        };\n        last_beat = new_current - last_beat;\n\
    \        current = new_current;\n        last_beat = last_beat;\n        next_beat\
    \ = next_beat;\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpzurg3s8r.rs:19:16\n\
    \   |\n19 |             'o|' => beats.push(current - last_beat + next_beat),\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut notes = vec![];\n\
    \    let mut beats = vec![];\n\n    let mut note_chars = music_string.chars();\n\
    \    let mut last_note = String::from(\".\");\n\n    while let Some(note) = note_chars.next()\
    \ {\n        notes.push(*note as isize);\n        last_note = note;\n    }\n\n\
    \    for note in notes {\n        if note != last_note {\n            beats.push(1);\n\
    \        } else {\n            beats.push(4);\n        }\n    }\n\n    return\
    \ beats;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp4zngpitn.rs:18:20\n\
    \   |\n18 |         notes.push(*note as isize);\n   |                    ^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4zngpitn.rs:19:21\n   |\n15 |\
    \     let mut last_note = String::from(\".\");\n   |                         -----------------\
    \ expected due to this value\n...\n19 |         last_note = note;\n   |      \
    \               ^^^^- help: try using a conversion method: `.to_string()`\n  \
    \ |                     |\n   |                     expected struct `String`,\
    \ found `char`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.lines()\n\
    \        .filter(|line| !line.is_empty())\n        .map(|line| line.chars().collect::<Vec<char>>())\n\
    \        .filter(|chars| !chars.is_empty())\n        .map(|chars| chars.iter().fold(1,\
    \ |acc, c| acc + c))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&char` to `{integer}`\n  --> /tmp/tmpnphdkuff.rs:15:56\n\
    \   |\n15 |         .map(|chars| chars.iter().fold(1, |acc, c| acc + c))\n   |\
    \                                                        ^ no implementation for\
    \ `{integer} + &char`\n   |\n   = help: the trait `Add<&char>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.trim();\n    let mut music_string_split: Vec<String> = music_string.split_whitespace();\n\
    \    music_string.clear();\n\n    let mut notes_counter: Vec<isize> = Vec::new();\n\
    \    music_string_split.iter().for_each(|note_string| {\n        if note_string.len()\
    \ <= 1 {\n            notes_counter.push(0);\n        } else {\n            notes_counter.push(note_string.len()\
    \ - 1);\n        }\n    });\n    notes_counter.sort();\n    notes_counter.reverse();\n\
    \    music_string_split.clear();\n\n    for notes_counter_index in notes_counter.iter().cloned()\
    \ {\n        let mut notes_counter_index: isize = notes_counter_index;\n     \
    \   let mut note_string: String = music_string[notes_counter_index..].to_string();\n\
    \        let mut note_string_split: Vec<String> = note_string.split_whitespace();\n\
    \n        note_string.clear();\n\n        for note_string_index in note_string_split.iter().cloned()\
    \ {\n            if note_string_index == \".\" {\n                notes_counter_index\
    \ += 1;\n            }\n            if note_string_index == \"|\" {\n        \
    \        notes_counter_index += 1;\n            }\n            notes_counter_index\
    \ += 1;\n        }\n\n        notes_counter.push(notes_counter_index);\n    }\n\
    \    music_string_split.clear();\n\n    notes_counter\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8s_jy1_g.rs:12:47\n   |\n\
    12 |     let mut music_string_split: Vec<String> = music_string.split_whitespace();\n\
    \   |                                 -----------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `SplitWhitespace`\n   |                \
    \                 |\n   |                                 expected due to this\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `SplitWhitespace<'_>`\n\
    \nerror[E0599]: no method named `clear` found for reference `&str` in the current\
    \ scope\n  --> /tmp/tmp8s_jy1_g.rs:13:18\n   |\n13 |     music_string.clear();\n\
    \   |                  ^^^^^ method not found in `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8s_jy1_g.rs:20:32\n   |\n20 |             notes_counter.push(note_string.len()\
    \ - 1);\n   |                                ^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |             notes_counter.push((note_string.len()\
    \ - 1).try_into().unwrap());\n   |                                +          \
    \           +++++++++++++++++++++\n\nerror[E0277]: the type `str` cannot be indexed\
    \ by `RangeFrom<isize>`\n  --> /tmp/tmp8s_jy1_g.rs:29:39\n   |\n29 |         let\
    \ mut note_string: String = music_string[notes_counter_index..].to_string();\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ string indices are ranges of `usize`\n   |\n   = help: the trait `SliceIndex<str>`\
    \ is not implemented for `RangeFrom<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n\
    \             <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeFrom<isize>>` for `str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8s_jy1_g.rs:30:50\n   |\n30 |         let mut\
    \ note_string_split: Vec<String> = note_string.split_whitespace();\n   |     \
    \                               --------"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    let mut pos = 0;\n    while pos < music_string.len() {\n        let char\
    \ = music_string[pos];\n        if char == 'o' {\n            pos += 1;\n    \
    \        beats.push(4);\n        }\n        if char == 'o|' {\n            pos\
    \ += 1;\n            beats.push(2);\n        }\n        if char == '.|' {\n  \
    \          pos += 1;\n            beats.push(1);\n        }\n        pos += 1;\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpfxstwimz.rs:19:23\n\
    \   |\n19 |         if char == 'o|' {\n   |                       ^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_chars: Vec<&str>\
    \ = music_string.chars().collect();\n    let mut beats = Vec::with_capacity(music_string.len());\n\
    \    for char in music_chars.iter() {\n        let mut beat = 0;\n        if char\
    \ == 'o' {\n            beat = 4;\n        } else if char == '.' {\n         \
    \   beat = 1;\n        } else if char == '|' {\n            beat = 2;\n      \
    \  } else {\n            beat = 3;\n        }\n        for _ in 0..beat {\n  \
    \          beats.push(0);\n        }\n    }\n    beats\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<&str>` cannot be built from an iterator\
    \ over elements of type `char`\n    --> /tmp/tmpfu8lqpm2.rs:11:55\n     |\n11\
    \   |     let music_chars: Vec<&str> = music_string.chars().collect();\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<&str>` cannot be built from `std::iter::Iterator<Item=char>`\n     |\n\
    \     = help: the trait `FromIterator<char>` is not implemented for `Vec<&str>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0277]: can't compare `&&str` with `char`\n\
    \  --> /tmp/tmpfu8lqpm2.rs:15:17\n   |\n15 |         if char == 'o' {\n   |  \
    \               ^^ no implementation for `&&str == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&&str`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n\
    \             <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0277]: can't compare `&&str` with `char`\n \
    \ --> /tmp/tmpfu8lqpm2.rs:17:24\n   |\n17 |         } else if char == '.' {\n\
    \   |                        ^^ no implementation for `&&str == char`\n   |\n\
    \   = help: the trait `PartialEq<char>` is not implemented for `&&str`\n   = help:\
    \ the following other types implement trait `PartialEq<Rhs>`:\n             <&'a\
    \ str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n \
    \            <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror[E0277]: can't compare\
    \ `&&str` with `char`\n  --> /tmp/tmpfu8lqpm"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = vec![0, 0, 0, 0, 0, 0, 0, 0];\n    let mut current_beat = 0;\n    let mut\
    \ note_chars = music_string.chars();\n    let mut current_note = 0;\n\n    for\
    \ char in &note_chars {\n        let is_last_note = char == ' ';\n        if is_last_note\
    \ {\n            beats[current_note] += current_beat;\n            current_beat\
    \ += 1;\n            current_note += 1;\n        } else {\n            if current_note\
    \ > 4 {\n                break;\n            }\n            let char_index: usize\
    \ = char.as_bytes()[0].to_digit(16) - '0'.to_digit(16) - 1;\n            beats[current_note]\
    \ += (beats[current_note - 1] + 4 * (char_index as isize));\n            current_beat\
    \ += 1;\n            current_note += 1;\n        }\n    }\n    beats\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpzso90is6.rs:27:36\n\
    \   |\n27 |             beats[current_note] += (beats[current_note - 1] + 4 *\
    \ (char_index as isize));\n   |                                    ^         \
    \                                          ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n27 -             beats[current_note]\
    \ += (beats[current_note - 1] + 4 * (char_index as isize));\n27 +            \
    \ beats[current_note] += beats[current_note - 1] + 4 * (char_index as isize);\n\
    \   | \n\nerror[E0277]: `&Chars<'_>` is not an iterator\n  --> /tmp/tmpzso90is6.rs:16:17\n\
    \   |\n16 |     for char in &note_chars {\n   |                 -^^^^^^^^^^\n\
    \   |                 |\n   |                 `&Chars<'_>` is not an iterator\n\
    \   |                 help: consider removing the leading `&`-reference\n   |\n\
    \   = help: the trait `Iterator` is not implemented for `&Chars<'_>`\n   = note:\
    \ `Iterator` is implemented for `&mut std::str::Chars<'_>`, but not for `&std::str::Chars<'_>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&Chars<'_>`\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = vec![];\n\
    \    let mut music_string = music_string.to_string();\n    music_string.replace(\"\
    |\".to_string(), \"\").split(\" \").for_each(|note| {\n        if note == \".\"\
    \n            || note == \".\"\n            || note == \".\"\n            || note\
    \ == \".\"\n            || note == \"o\"\n            || note == \"o\"\n     \
    \       || note == \"o\"\n            || note == \"o\"\n            || note ==\
    \ \"o\"\n        {\n            beats.push(4);\n        }\n        elsif note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \          || note == \"o|\"\n            || note == \"o|\"\n            || note\
    \ == \"o|\"\n        {\n            beats.push(2);\n        }\n        elsif note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \          || note == \"o|\"\n            || note == \"o|\"\n        {\n     \
    \       beats.push(1);\n        }\n        elsif note == \"o|\"\n            ||\
    \ note == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\
    \n            || note == \"o|\"\n        {\n            beats.push(1);\n     \
    \   }\n        elsif note == \"o|\"\n            || note == \"o|\"\n         \
    \   || note == \"o|\"\n            || note == \"o|\"\n            || note == \"\
    o|\"\n        {\n            beats.push(1);\n        }\n        elsif note ==\
    \ \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n     \
    \       || note == \"o|\"\n            || note == \"o|\"\n        {\n        \
    \    beats.push(1);\n        }\n        elsif note == \"o|\"\n            || note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \          || note == \"o|\"\n        {\n            beats.push(1);\n        }\n\
    \        elsif note == \"o|\"\n            || note == \"o|\"\n            || note\
    \ == \"o|\"\n            || note == \"o|\"\n            || note == \"o|\"\n  \
    \      {\n            beats.push(1);\n        }\n        elsif note == \"o|\"\n\
    \            || note == \"o|\"\n            || note == \"o|\"\n            ||\
    \ note == \"o|\"\n            || note == \"\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp13qfxey5.rs:96:61\n\
    \   |\n96 |       assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\"\
    )), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n   |  _____________________________________________________________^\n\
    97 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut note_counts:\
    \ Vec<isize> = Vec::new();\n    let mut note_to_beats: Vec<isize> = Vec::new();\n\
    \    let mut notes_without_beat: Vec<isize> = Vec::new();\n    let mut beats:\
    \ Vec<isize> = Vec::new();\n\n    for music_note in music_string.chars() {\n \
    \       note_to_beats.clear();\n        notes_without_beat.clear();\n        note_counts.clear();\n\
    \n        let note = music_note.to_string();\n        let note_to_beat_pos = note.find(\"\
    |\");\n\n        if note_to_beat_pos == Some(note.len() - 1) {\n            note_to_beats.push(note_to_beat_pos\
    \ as isize);\n        } else {\n            note_to_beats.push(note_to_beat_pos\
    \ as isize);\n            notes_without_beats.push(note_to_beat_pos as isize);\n\
    \        }\n\n        let note_pos = note.rfind(\"o|\".to_string());\n\n     \
    \   if note_pos == Some(note.len() - 1) {\n            note_counts.push(note_counts.len()\
    \ as isize);\n        } else {\n            note_counts.push(note_counts.len()\
    \ as isize);\n            notes_without_beats.push(note_pos as isize);\n     \
    \   }\n\n        let note_without_beat_pos = note.rfind(\"o\".to_string());\n\n\
    \        if note_without_beat_pos == Some(note.len() - 1) {\n            note_counts.push(note_counts.len()\
    \ as isize);\n        } else {\n            note_counts.push(note_counts.len()\
    \ as isize);\n            notes_without_beats.push(note_without_beat_pos as isize);\n\
    \        }\n    }\n\n    for note_count in note_counts {\n        beats.push(note_count);\n\
    \    }\n\n    for note_without_beat in notes_without_beats {\n        beats.push(note_counts[note_without_beat]);\n\
    \    }\n\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `notes_without_beats` in this scope\n \
    \ --> /tmp/tmpbgdg4ouc.rs:28:13\n   |\n28 |             notes_without_beats.push(note_to_beat_pos\
    \ as isize);\n   |             ^^^^^^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `notes_without_beat`\n\nerror[E0425]: cannot find value\
    \ `notes_without_beats` in this scope\n  --> /tmp/tmpbgdg4ouc.rs:37:13\n   |\n\
    37 |             notes_without_beats.push(note_pos as isize);\n   |          \
    \   ^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `notes_without_beat`\n\
    \nerror[E0425]: cannot find value `notes_without_beats` in this scope\n  --> /tmp/tmpbgdg4ouc.rs:46:13\n\
    \   |\n46 |             notes_without_beats.push(note_without_beat_pos as isize);\n\
    \   |             ^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `notes_without_beat`\n\nerror[E0425]: cannot find value `notes_without_beats`\
    \ in this scope\n  --> /tmp/tmpbgdg4ouc.rs:54:30\n   |\n54 |     for note_without_beat\
    \ in notes_without_beats {\n   |                              ^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `notes_without_beat`\n\n\
    error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpbgdg4ouc.rs:31:35\n\
    \   |\n31 |         let note_pos = note.rfind(\"o|\".to_string());\n   |     \
    \                        ----- ^^^^^^^^^^^^^^^^ expected an implementor of trait\
    \ `Pattern<'_>`\n   |                             |\n   |                    \
    \         required by a bound introduced by this call\n   |\n   = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n   = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\nhelp: consider borrowing\
    \ here\n   |\n31 |         let note_pos = note.rfind(&\"o|\".to_string());\n \
    \  |                                   +\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n  --> /tmp/tmpbgdg4ouc.rs:40:48\n   |\n40 |       \
    \  let note_without_beat_pos = note.rfind(\"o\".to_string());\n   |          \
    \                                ----- ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    // Implementation here\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprcy9iiqk.rs:10:41\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |    -----------\
    \                          ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let music_string = music_string.to_string();\n\
    \    let mut beats = vec![];\n    let mut note_count = vec![];\n\n    for _ in\
    \ 0..music_string.len() {\n        let mut current_note = music_string[..];\n\
    \        if current_note == \"o\" {\n            let last_note = music_string[..];\n\
    \            if last_note == \"|\" {\n                note_count[0] += 4;\n  \
    \          } else {\n                note_count[0] += 2;\n            }\n    \
    \        current_note = music_string[..];\n        }\n\n        beats.push(current_note.chars().count()\
    \ as isize);\n        let current_note_len = current_note.chars().count();\n \
    \       if current_note_len == 0 {\n            let last_note = music_string[..];\n\
    \            if last_note == \"o\" {\n                note_count[0] += 4;\n  \
    \          } else {\n                note_count[0] += 2;\n            }\n    \
    \        current_note = music_string[..];\n        }\n    }\n\n    for _ in 0..music_string.len()\
    \ {\n        let mut current_note = music_string[..];\n        if current_note\
    \ == \"o\" {\n            let last_note = music_string[..];\n            if last_note\
    \ == \"|\" {\n                note_count[0] += 4;\n            } else {\n    \
    \            note_count[0] += 2;\n            }\n            current_note = music_string[..];\n\
    \        }\n\n        beats.push(current_note.chars().count() as isize);\n   \
    \     let current_note_len = current_note.chars().count();\n        if current_note_len\
    \ == 0 {\n            let last_note = music_string[..];\n            if last_note\
    \ == \"o\" {\n                note_count[0] += 4;\n            } else {\n    \
    \            note_count[0] += 2;\n            }\n            current_note = music_string[..];\n\
    \        }\n    }\n\n    for _ in 0..music_string.len() {\n        let mut current_note\
    \ = music_string[..];\n        if current_note == \"o\" {\n            let last_note\
    \ = music_string[..];\n            if last_note == \"|\" {\n                note_count[0]\
    \ += 4;\n            } else {\n                note_count[0] += 2;\n         \
    \   }\n            current_note = music_string[..];\n        }\n\n        beats.push(current_note.chars().count()\
    \ as isize);\n        let current_note_len = current_note.chars().count();\n \
    \       if current_note_len == 0 {\n            let last_note = music_string[..];\n\
    \            if last_note == \"o\" {\n                note_count[0] += 4;\n  \
    \          } else {\n                note_count[0] += 2;\n            }\n    \
    \        current_note = music_string[..\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5zqg29m5.rs:96:3\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n65 |\
    \     for _ in 0..music_string.len() {\n   |                                 \
    \   - unclosed delimiter\n...\n79 |         if current_note_len == 0 {\n   | \
    \                                 - this delimiter might not be properly closed...\n\
    ...\n87 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    96 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp5zqg29m5.rs:86:40\n\
    \   |\n10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n86 |             current_note = music_string[..\n   |       \
    \                                 ^ unclosed delimiter\n87 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n  --> /tmp/tmp5zqg29m5.rs:16:13\n   |\n16 |  \
    \       let mut current_note = music_string[..];\n   |             ^^^^^^^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\nhelp:\
    \ consider borrowing here\n   |\n16 |         let mut current_note = &music_string[..];\n\
    \   |                                +\n\nerror[E0277]: can't compare `str` with\
    \ `&str`\n  --> /tmp/tmp5zqg29m5.rs:17:25\n   |\n17 |         if current_note\
    \ == \"o\" {\n   |                         ^^ no implementation for `str == &str`\n\
    \   |\n   = help: the trait `PartialEq<&str>` is not implemented for `str`\n \
    \  = help: the following other types implement trait `PartialEq<Rhs>`:\n     \
    \        <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <St"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars().filter(|c|\
    \ *c == 'o').filter(|c| *c != '|').count()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9bwmetb8.rs:11:5\n   |\n\
    10 | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n11 |     music_string.chars().filter(|c| *c == 'o').filter(|c| *c != '|').count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_string\
    \ = music_string.to_string();\n    music_string.replace(\"o|\", \"o\").replace(\"\
    o|\", \"o|\").replace(\"o|\", \"o\").replace(\"o|\", \"o|\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"\
    o|\", \"o|\").replace(\"o|\", \"o|\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"o|\",\
    \ \"o|\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"o|\", \"o|\").replace(\"\
    o|\", \"o|\").replace(\"o|\", \"o|\").replace(\"o|\", \"o|\")\n        .replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"|.|\"\
    , \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|.|\", \"|.\")\n        .replace(\"|.|\", \"|.\").replace(\"\
    |.|\", \"|.\").replace(\"|\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp232ss3iv.rs:39:61\n\
    \   |\n39 |       assert_eq!(candidate(String::from(\"o| .| o| .| o o| o o|\"\
    )), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n   |  _____________________________________________________________^\n\
    40 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.lines()\n\
    \        .map(|l| {\n            let mut splits = l.split_whitespace();\n    \
    \        let note = splits[0];\n            let rest = splits\n              \
    \  .iter()\n                .skip(1)\n                .collect::<Vec<_>>()\n \
    \               .join();\n            note == \".\"\n                ? rest.len()\n\
    \                : note == \"o\"\n                ? rest.len()\n             \
    \   : note.parse::<usize>().unwrap()\n        })\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `rest`\n\
    \  --> /tmp/tmp_p9v35ti.rs:21:19\n   |\n21 |                 ? rest.len()\n  \
    \ |                   ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n\
    \nerror[E0608]: cannot index into a value of type `SplitWhitespace<'_>`\n  -->\
    \ /tmp/tmp_p9v35ti.rs:14:24\n   |\n14 |             let note = splits[0];\n  \
    \ |                        ^^^^^^^^^\n\nerror[E0599]: no method named `iter` found\
    \ for struct `SplitWhitespace` in the current scope\n  --> /tmp/tmp_p9v35ti.rs:16:18\n\
    \   |\n16 |                 .iter()\n   |                  ^^^^ method not found\
    \ in `SplitWhitespace<'_>`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0608.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.trim().lines()\n\
    \        .filter(|l| !l.is_empty())\n        .filter_map(|l| {\n            if\
    \ l.is_empty() {\n                None\n            } else {\n               \
    \ let first_char = l.chars().nth(0).unwrap();\n                match first_char\
    \ {\n                    'o' => Some(4),\n                    'o|' => Some(2),\n\
    \                    '.|' => Some(1),\n                    _ => None,\n      \
    \          }\n            }\n        })\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpa29h3hlf.rs:20:24\n\
    \   |\n20 |                     'o|' => Some(2),\n   |                       \
    \ ^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \n    music_string\n        .split_whitespace()\n        .map(|m| {\n        \
    \    if m.is_empty() {\n                return;\n            }\n\n           \
    \ let mut last = 0;\n            let mut note = m.chars().filter(|c| !c.is_ascii_digit()).next();\n\
    \            let mut rest = m.chars().filter(|c| c.is_ascii_digit()).next();\n\
    \n            while let Some((mut b, mut c)) = last.take_while(|c| *c != '.' &&\
    \ c != '|') {\n                last = c;\n                note += 1;\n       \
    \     }\n\n            while let Some((_, mut c)) = last.take_while(|c| *c ==\
    \ '.') {\n                last = c;\n                note += 1;\n            }\n\
    \n            while let Some((_, mut c)) = last.take_while(|c| *c == '|') {\n\
    \                last = c;\n                note += 1;\n            }\n\n    \
    \        note += 1;\n            note = note % 12;\n            beats.push(note);\n\
    \            *rest = Some((b, c));\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `b` in this scope\n  --> /tmp/tmpg2zn_rhh.rs:42:27\n\
    \   |\n42 |             *rest = Some((b, c));\n   |                          \
    \ ^ help: a local variable with a similar name exists: `m`\n\nerror[E0425]: cannot\
    \ find value `c` in this scope\n  --> /tmp/tmpg2zn_rhh.rs:42:30\n   |\n42 |  \
    \           *rest = Some((b, c));\n   |                              ^ help: a\
    \ local variable with a similar name exists: `m`\n\nerror[E0689]: can't call method\
    \ `take_while` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpg2zn_rhh.rs:24:51\n\
    \   |\n24 |             while let Some((mut b, mut c)) = last.take_while(|c| *c\
    \ != '.' && c != '|') {\n   |                                                \
    \   ^^^^^^^^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n\
    \   |\n20 |             let mut last: i32 = 0;\n   |                 ~~~~~~~~~~~~~\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<char>`\n\
    \  --> /tmp/tmpg2zn_rhh.rs:26:17\n   |\n26 |                 note += 1;\n   |\
    \                 ----^^^^^\n   |                 |\n   |                 cannot\
    \ use `+=` on type `Option<char>`\n\nerror[E0689]: can't call method `take_while`\
    \ on ambiguous numeric type `{integer}`\n  --> /tmp/tmpg2zn_rhh.rs:29:47\n   |\n\
    29 |             while let Some((_, mut c)) = last.take_while(|c| *c == '.') {\n\
    \   |                                               ^^^^^^^^^^\n   |\nhelp: you\
    \ must specify a type for this binding, like `i32`\n   |\n20 |             let\
    \ mut last: i32 = 0;\n   |                 ~~~~~~~~~~~~~\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<char>`\n  --> /tmp/tmpg2zn_rhh.rs:31:17\n\
    \   |\n31 |                 note += 1;\n   |                 ----^^^^^\n   | \
    \                |\n   |                 cannot use `+=` on type `Option<char>`\n\
    \nerror[E0689]: can't call method `take_while` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpg2zn_rhh.rs:34:47\n   |\n34 |             while let Some((_, mut\
    \ c)) = last.take_while(|c| *c == '|') {\n   |                               \
    \     "
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .trim()\n        .split(\"|\")\n        .iter()\n        .cloned()\n     \
    \   .map(|mut note| {\n            if note.is_empty() {\n                return\
    \ -1;\n            }\n\n            if note.chars().nth(1).unwrap().to_ascii_lowercase()\
    \ == note {\n                return 1;\n            }\n\n            note\n  \
    \              .chars()\n                .skip_while(|c| !c.is_ascii() || c >=\
    \ '0' || c <= '9')\n                .take(note.len() - 1)\n                .unwrap()\n\
    \                .parse().unwrap()\n        })\n        .filter(|note| note >=\
    \ -1)\n        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `std::str::Split`\
    \ in the current scope\n  --> /tmp/tmp4trq2cxw.rs:14:10\n   |\n14 |         .iter()\n\
    \   |          ^^^^ method not found in `std::str::Split<'_, &str>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats: Vec<isize>\
    \ = Vec::new();\n    let mut notes = music_string.chars().collect::<String>().trim().split_whitespace();\n\
    \    let mut previous_note = String::from(\"\");\n    for note in notes {\n  \
    \      if note == previous_note {\n            beats.push(beats.last().unwrap()\
    \ + 1);\n        } else {\n            beats.push(1);\n        }\n        previous_note\
    \ = note;\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_g7vb42g.rs:20:25\n   |\n\
    13 |     let mut previous_note = String::from(\"\");\n   |                   \
    \          ---------------- expected due to this value\n...\n20 |         previous_note\
    \ = note;\n   |                         ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                         |\n   |                       \
    \  expected struct `String`, found `&str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut counts = vec![0;\
    \ 12];\n    let mut current_index = 0;\n    let mut previous_index = -1;\n   \
    \ for char in music_string {\n        let char = char.chars().next().unwrap();\n\
    \        if char == ' ' {\n            current_index = 0;\n        } else {\n\
    \            let beat_length = (char == 'o' ? 4 : 2);\n            if previous_index\
    \ == -1 {\n                previous_index = current_index;\n            }\n  \
    \          current_index += beat_length;\n            counts[previous_index] +=\
    \ 1;\n            previous_index = current_index;\n        }\n    }\n    counts[previous_index]\
    \ += 1;\n    counts\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `4`\n\
    \  --> /tmp/tmp617a4mt5.rs:19:46\n   |\n19 |             let beat_length = (char\
    \ == 'o' ? 4 : 2);\n   |                                              ^ expected\
    \ one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`,\
    \ `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`,\
    \ `else`, `extern`, `fn`, `for`, `impl`, `unsafe`, `~`, an operator, lifetime,\
    \ or path, found `2`\n  --> /tmp/tmp617a4mt5.rs:19:50\n   |\n19 |            \
    \ let beat_length = (char == 'o' ? 4 : 2);\n   |                             \
    \                     ^ expected one of 26 possible tokens\n\nerror[E0277]: `String`\
    \ is not an iterator\n  --> /tmp/tmp617a4mt5.rs:14:17\n   |\n14 |     for char\
    \ in music_string {\n   |                 ^^^^^^^^^^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator`\
    \ is not implemented for `String`\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n  --> /tmp/tmp617a4mt5.rs:13:30\n   |\n13 | \
    \    let mut previous_index = -1;\n   |                              ^^ the trait\
    \ `Neg` is not implemented for `usize`\n   |\n   = help: the following other types\
    \ implement trait `Neg`:\n             &f32\n             &f64\n             &i128\n\
    \             &i16\n             &i32\n             &i64\n             &i8\n \
    \            &isize\n           and 8 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars().flat_map(|c|\
    \ {\n        if c == 'o' {\n            vec![4, 2]\n        } else if c == 'o|'\
    \ {\n            vec![1, 1]\n        } else if c == '.|' {\n            vec![1,\
    \ 1]\n        } else {\n            vec![]\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpbkoghnvx.rs:14:27\n\
    \   |\n14 |         } else if c == 'o|' {\n   |                           ^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut music_chars\
    \ = music_string.chars();\n    music_chars.next();\n    music_chars.next();\n\
    \    music_chars.next();\n    music_chars.next();\n\n    let mut beats: Vec<isize>\
    \ = music_chars.collect();\n\n    while !music_chars.is_empty() {\n        let\
    \ next_char = music_chars.next().unwrap();\n        if next_char == \"o\" {\n\
    \            beats.truncate(beats.len());\n            beats.push(4);\n      \
    \  } else if next_char == \"|\" {\n            beats.truncate(beats.len());\n\
    \            beats.push(2);\n        } else if next_char == \".\" {\n        \
    \    beats.truncate(beats.len());\n            beats.push(1);\n        } else\
    \ {\n            panic!(\"Unexpected input!\");\n        }\n    }\n\n    beats\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_empty` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpz6ui5m8p.rs:19:24\n   |\n19 |     while !music_chars.is_empty()\
    \ {\n   |                        ^^^^^^^^ method not found in `Chars<'_>`\n\n\
    error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over\
    \ elements of type `char`\n    --> /tmp/tmpz6ui5m8p.rs:17:45\n     |\n17   | \
    \    let mut beats: Vec<isize> = music_chars.collect();\n     |              \
    \                               ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=char>`\n     |\n     = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz6ui5m8p.rs:21:25\n   |\n21 |         if next_char\
    \ == \"o\" {\n   |                         ^^^ expected `char`, found `&str`\n\
    \   |\nhelp: if you meant to write a `char` literal, use single quotes\n   |\n\
    21 |         if next_char == 'o' {\n   |                         ~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz6ui5m8p.rs:24:32\n   |\n24 |         } else\
    \ if next_char == \"|\" {\n   |                                ^^^ expected `char`,\
    \ found `&str`\n   |\nhelp: if you meant to write a `char` literal, use single\
    \ quotes\n   |\n24 |         } else if next_char == '|' {\n   |              \
    \                  ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz6ui5m8p.rs:27:32\n\
    \   |\n27 |         } else if next_char == \".\" {\n   |                     \
    \           ^^^ expected `char`, found `&str`\n   |\nhelp: if you meant to write\
    \ a `char` literal, use single quotes\n   |\n27 |         } else if next_char\
    \ == '.' {\n   |                                ~~~\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_notes:\
    \ Vec<isize> = Vec::new();\n    let mut current_note = 0;\n    let mut notes =\
    \ music_string.chars().take(music_string.len()).collect::<String>();\n    for\
    \ note in notes {\n        if note == '.' {\n            beats_notes.push(current_note\
    \ * 4);\n            current_note = 0;\n        } else {\n            current_note\
    \ += 1;\n        }\n    }\n    beats_notes.push(current_note * 4);\n    beats_notes\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `String` is not an iterator\n  --> /tmp/tmprjt2c2m_.rs:14:17\n\
    \   |\n14 |     for note in notes {\n   |                 ^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait\
    \ `Iterator` is not implemented for `String`\n   = note: required because of the\
    \ requirements on the impl of `IntoIterator` for `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut result = vec![];\n\
    \    let music_string: &str = music_string.to_string();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => result.push(4),\n            'o|' =>\
    \ result.push(2),\n            '.|' => result.push(1),\n            _ => {}\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpo19rlx0_.rs:16:16\n\
    \   |\n16 |             'o|' => result.push(2),\n   |                ^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    let mut last_note = MusicNote::WholeNote;\n    for note in music_string.chars()\
    \ {\n        if note.to_ascii_lowercase() == 'o' {\n            if last_note ==\
    \ MusicNote::WholeNote {\n                last_note = MusicNote::HalfNote {\n\
    \                    length: 4,\n                    beats: 1,\n             \
    \   };\n            } else {\n                last_note = MusicNote::QuaterNote\
    \ {\n                    length: 2,\n                    beats: 1,\n         \
    \       };\n            }\n        } else if note.to_ascii_lowercase() == 'o|'\
    \ {\n            last_note = MusicNote::HalfNote {\n                length: 2,\n\
    \                beats: 1,\n            };\n        } else if note.to_ascii_lowercase()\
    \ == '.|' {\n            last_note = MusicNote::QuaterNote {\n               \
    \ length: 1,\n                beats: 1,\n            };\n        } else {\n  \
    \          beats.push(1);\n        }\n    }\n    beats.push(4);\n    last_note.beats\
    \ += beats.iter().fold(1, |sum, beat| sum + beat);\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpb29w603d.rs:26:51\n\
    \   |\n26 |         } else if note.to_ascii_lowercase() == 'o|' {\n   |      \
    \                                             ^^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut num_beats: isize\
    \ = 0;\n    let mut current_beat = 0;\n\n    let mut notes: Vec<&str> = music_string.split_whitespace().filter(|&c|\
    \ !c.is_ascii()).collect();\n    let mut last: isize = 0;\n    let mut last_note\
    \ = notes.len() - 1;\n    let mut last_note_bpm = 0.0;\n    while !notes[last_note].is_ascii()\
    \ {\n        last = 0;\n        last_note_bpm = 0.0;\n        last_note = last_note\
    \ - 1;\n    }\n    let note = &notes[last_note];\n\n    // \"o\" -> \"W\", \"\
    O\" -> \"B\", \"B\" -> \"C\", \"C\" -> \"D\", \"D\" -> \"E\", \"E\" -> \"F\"\n\
    \    for mut c in note {\n        match c {\n            'o' | 'O' | 'b' | 'B'\
    \ | 'c' | 'C' | 'd' | 'D' | 'e' | 'E' | 'f' | 'F' => last = 4,\n            'o|'\
    \ | 'O|' | 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|'\
    \ => last = 2,\n            _ => last = 1\n        }\n    }\n\n    notes.iter_mut().skip(last).for_each(|c|\
    \ {\n        match c {\n            'o' | 'O' | 'b' | 'B' | 'c' | 'C' | 'd' |\
    \ 'D' | 'e' | 'E' | 'f' | 'F' => {\n                num_beats += 4;\n        \
    \        current_beat += 4;\n            },\n            'o|' | 'O|' | 'b|' |\
    \ 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => {\n        \
    \        num_beats += 2;\n                current_beat += 2;\n            },\n\
    \            _ => {\n                num_beats += 1;\n                current_beat\
    \ += 1;\n            }\n        }\n    });\n    num_beats -= current_beat;\n \
    \   num_beats -= last_note_bpm;\n    return vec![num_beats]\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpbu2sh0l7.rs:29:16\n\
    \   |\n29 |             'o|' | 'O|' | 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|'\
    \ | 'e|' | 'E|' | 'f|' | 'F|' => last = 2,\n   |                ^--^^\n   |  \
    \               |\n   |                 help: consider removing the non-printing\
    \ characters: `|`\n   |\nnote: there are non-printing characters, the full sequence\
    \ is ` | `\n  --> /tmp/tmpbu2sh0l7.rs:29:17\n   |\n29 |             'o|' | 'O|'\
    \ | 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => last\
    \ = 2,\n   |                 ^^\n\nerror: character literal may only contain one\
    \ codepoint\n  --> /tmp/tmpbu2sh0l7.rs:29:23\n   |\n29 |             'o|' | 'O|'\
    \ | 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => last\
    \ = 2,\n   |                       ^--^^\n   |                        |\n   |\
    \                        help: consider removing the non-printing characters:\
    \ `|`\n   |\nnote: there are non-printing characters, the full sequence is ` |\
    \ `\n  --> /tmp/tmpbu2sh0l7.rs:29:24\n   |\n29 |             'o|' | 'O|' | 'b|'\
    \ | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => last = 2,\n\
    \   |                        ^^\n\nerror: character literal may only contain one\
    \ codepoint\n  --> /tmp/tmpbu2sh0l7.rs:29:30\n   |\n29 |             'o|' | 'O|'\
    \ | 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => last\
    \ = 2,\n   |                              ^--^^\n   |                        \
    \       |\n   |                               help: consider removing the non-printing\
    \ characters: `|`\n   |\nnote: there are non-printing characters, the full sequence\
    \ is ` | `\n  --> /tmp/tmpbu2sh0l7.rs:29:31\n   |\n29 |             'o|' | 'O|'\
    \ | 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|' | 'f|' | 'F|' => last\
    \ = 2,\n   |                               ^^\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmpbu2sh0l7.rs:29:37\n   |\n29 |    \
    \         'o|' | 'O|' | 'b|' | 'B|' | 'c|' | 'C|' | 'd|' | 'D|' | 'e|' | 'E|'\
    \ | 'f|' | 'F|' => last = 2,\n   |                  "
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string.chars().enumerate().map(|(i,\
    \ c)| {\n        match c {\n            'o' => vec![4, 4],\n            'o|' =>\
    \ vec![2, 2],\n            '.|' => vec![1, 1],\n            _ => vec![0],\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpkvc39if7.rs:14:16\n\
    \   |\n14 |             'o|' => vec![2, 2],\n   |                ^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats = Vec::new();\n\
    \    for note in music_string.chars() {\n        if note == 'o' || note == 'o|'\
    \ || note == '.' {\n            beats.push(4);\n        } else {\n           \
    \ beats.push(beats.last().unwrap().checked_add(1).unwrap());\n        }\n    }\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpmdodtdwc.rs:13:38\n\
    \   |\n13 |         if note == 'o' || note == 'o|' || note == '.' {\n   |    \
    \                                  ^^^^^^^^^^^^^^\n   |\nhelp: if you meant to\
    \ write a `str` literal, use double quotes\n   |\n13 |         if note == 'o'\
    \ || note == 'o|\" || note == \".' {\n   |                                   \
    \   ~~~~~~~~~~~~~~\n\nerror[E0762]: unterminated character literal\n  --> /tmp/tmpmdodtdwc.rs:13:53\n\
    \   |\n13 |         if note == 'o' || note == 'o|' || note == '.' {\n   |    \
    \                                                 ^^^\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_per_note\
    \ = vec![];\n    let mut note_count = vec![];\n    let mut current_note = String::new();\n\
    \    let mut current_beat = 0;\n\n    for note in music_string.chars() {\n   \
    \     if !note.is_ascii() {\n            println!(\"Music input should be an ASCII\
    \ string\");\n        }\n\n        current_note += note.to_string();\n\n     \
    \   if current_note == \".\" {\n            note_count = vec![];\n           \
    \ current_note = String::new();\n            current_beat = 0;\n        }\n\n\
    \        if current_note == \"o\" {\n            beats_per_note.push(current_beat\
    \ + 4);\n            current_note = String::new();\n            current_beat =\
    \ 0;\n        }\n\n        if current_note == \"o|\" {\n            beats_per_note.push(current_beat\
    \ + 2);\n            current_note = String::new();\n            current_beat =\
    \ 0;\n        }\n\n        note_count.push(current_beat);\n        current_beat\
    \ += 1;\n    }\n\n    note_count\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz70cpv5h.rs:21:25\n   |\n\
    21 |         current_note += note.to_string();\n   |                         ^^^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&str`,\
    \ found struct `String`\n   |                         help: consider borrowing\
    \ here: `&note.to_string()`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    music_string\n     \
    \   .chars()\n        .enumerate()\n        .filter_map(|(i, char)| {\n      \
    \      // Here is a possible implementation for handling notes starting with accidentals:\n\
    \            // https://stackoverflow.com/questions/5301670/how-to-handle-accidental-pitches-using-regex\n\
    \            char == '.'\n                || (i > 0 && char == \".\" && music_string[i\
    \ - 1] == '|')\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsl9mj5x1.rs:18:38\n   |\n\
    18 |                 || (i > 0 && char == \".\" && music_string[i - 1] == '|')\n\
    \   |                                      ^^^ expected `char`, found `&str`\n\
    \   |\nhelp: if you meant to write a `char` literal, use single quotes\n   |\n\
    18 |                 || (i > 0 && char == '.' && music_string[i - 1] == '|')\n\
    \   |                                      ~~~\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpsl9mj5x1.rs:18:45\n   |\n18 |  \
    \               || (i > 0 && char == \".\" && music_string[i - 1] == '|')\n  \
    \ |                                             ^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsl9mj5x1.rs:17:13\n\
    \   |\n17 | /             char == '.'\n18 | |                 || (i > 0 && char\
    \ == \".\" && music_string[i - 1] == '|')\n   | |_______________________________________________________________________^\
    \ expected enum `Option`, found `bool`\n   |\n   = note: expected enum `Option<_>`\n\
    \              found type `bool`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n17 ~             Some(char == '.'\n18 ~                 || (i > 0 && char\
    \ == \".\" && music_string[i - 1] == '|'))\n   |\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976576
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(String::from(\"\
    o o| .| o| o| .| .| .| .| o o\"))\n/// vec![4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    fn parse_music(music_string: String) -> Vec<isize> {\n    let mut beats_vec: Vec<isize>\
    \ = Vec::new();\n\n    for c in music_string {\n        if c != '.' && c != 'o'\
    \ && c != '|' && c != '|' {\n            panic!(\"Invalid character {} in music\
    \ string\", c);\n        }\n        if c == '.' {\n            beats_vec.push(1);\n\
    \        } else if c == '|' {\n            beats_vec.push(4);\n        } else\
    \ if c == 'o' || c == 'o|' {\n            beats_vec.push(4);\n        }\n    }\n\
    \    beats_vec\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp3g7f1bai.rs:21:39\n\
    \   |\n21 |         } else if c == 'o' || c == 'o|' {\n   |                  \
    \                     ^^^\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0762`.\n"
  stdout: ''
  timestamp: 1659976576
