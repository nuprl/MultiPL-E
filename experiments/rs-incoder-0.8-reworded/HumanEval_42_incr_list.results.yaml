language: rs
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut vec = l.to_vec();\n    for i in vec.iter().rev() {\n        vec.push(*(i\
    \ + 1));\n    }\n    vec\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpv53r7hni.rs:9:18\n\
    \  |\n9 |         vec.push(*(i + 1));\n  |                  ^^^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|n| n + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = Vec::new();\n    let mut i = 0;\n    for x in l {\n     \
    \   *r += x;\n        *r += 1;\n        i += 1;\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `[_]`\n  --> /tmp/tmpqseavb1h.rs:10:9\n   |\n10 |         *r += x;\n   |   \
    \      --^^^^^\n   |         |\n   |         cannot use `+=` on type `[_]`\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `[_]`\n\
    \  --> /tmp/tmpqseavb1h.rs:11:9\n   |\n11 |         *r += 1;\n   |         --^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `[_]`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().filter(|(_, e)| {\n        *e + 1\n   \
    \ }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcnph2izq.rs:8:9\n  |\n8 |\
    \         *e + 1\n  |         ^^^^^^ expected `bool`, found `isize`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `(usize, isize)`\n    --> /tmp/tmpcnph2izq.rs:9:8\n     |\n9    |  \
    \   }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=(usize, isize)>`\n     |\n     = help: the trait\
    \ `FromIterator<(usize, isize)>` is not implemented for `Vec<isize>`\n     = help:\
    \ the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a\
    \ bound in `collect`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l.to_vec();\n    r.into_iter().map(|x| x + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::with_capacity(l.len() + 1);\n    result.extend(l.iter().cloned().map(|n|\
    \ n + 1).collect::<Vec<_>>());\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n --> /tmp/tmpo1ecz8na.rs:9:9\n  |\n9 |         result += 1;\n  | \
    \        ------^^^^^\n  |         |\n  |         cannot use `+=` on type `Vec<_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().cloned().zip(l.iter()).map(|(&x, &y)| x + y).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmptz9pu29l.rs:7:19\n     |\n7    |     l.into_iter().cloned().zip(l.iter()).map(|(&x,\
    \ &y)| x + y).collect()\n     |                   ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmptz9pu29l.rs:7:28\n   |\n7  |\
    \       l.into_iter().cloned().zip(l.iter()).map(|(&x, &y)| x + y).collect()\n\
    \   |                              ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    for elt in l {\n        r.push(*elt + 1)\n \
    \   }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpuyx5l2b7.rs:9:16\n\
    \  |\n9 |         r.push(*elt + 1)\n  |                ^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut acc = vec![l.len()];\n    for i in l {\n        acc[acc.len()\
    \ - i - 1] += 1;\n    }\n    acc\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe3qw9h56.rs:9:25\n  |\n9 |\
    \         acc[acc.len() - i - 1] += 1;\n  |                         ^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \ --> /tmp/tmpe3qw9h56.rs:9:23\n  |\n9 |         acc[acc.len() - i - 1] += 1;\n\
    \  |                       ^ no implementation for `usize - isize`\n  |\n  = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe3qw9h56.rs:11:5\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                ---------- expected `Vec<isize>` because\
    \ of return type\n...\n11 |     acc\n   |     ^^^ expected `isize`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().chain(l.into_iter()).rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp7yslisks.rs:7:31\n\
    \    |\n6   | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n    |             \
    \ - move occurs because `l` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n7   |     l.into_iter().rev().chain(l.into_iter()).rev().collect()\n\
    \    |       -----------             ^ value used here after move\n    |     \
    \  |\n    |       `l` moved due to this method call\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().skip(1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3]`,\n right: `[4, 3, 2]`', /tmp/tmp3kfwff9q.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut s = l;\n    s.iter().cloned().map(|x| x + 1).collect()\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l.clone();\n    for i in v.iter_mut() {\n        *i += 1;\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    let mut res = vec![];\n    for i in l {\n       \
    \ res.push(i);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n --> /tmp/tmpql5u1wve.rs:7:13\n  |\n7 |\
    \     let mut i = 0;\n  |             ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nwarning: value assigned to `i` is never read\n  --> /tmp/tmpql5u1wve.rs:11:9\n\
    \   |\n11 |         i += 1;\n   |         ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ variable does not need to be mutable\n --> /tmp/tmpql5u1wve.rs:7:9\n  |\n7 |\
    \     let mut i = 0;\n  |         ----^\n  |         |\n  |         help: remove\
    \ this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `i`\n  --> /tmp/tmpql5u1wve.rs:11:9\n\
    \   |\n9  |     for i in l {\n   |         -\n   |         |\n   |         first\
    \ assignment to `i`\n   |         help: consider making this binding mutable:\
    \ `mut i`\n10 |         res.push(i);\n11 |         i += 1;\n   |         ^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error; 3 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l;\n    for el in l {\n        r += 1;\n    }\n    r\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n --> /tmp/tmp9_pb8blk.rs:9:9\n  |\n9 |         r += 1;\n  |  \
    \       -^^^^^\n  |         |\n  |         cannot use `+=` on type `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, x)| {\n        *i += 1;\n    \
    \    x\n    }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n --> /tmp/tmp0wu3r_1n.rs:8:9\n\
    \  |\n8 |         *i += 1;\n  |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v: Vec<_> = l.iter().cloned().collect();\n    v.into_iter().for_each(|&i|\
    \ {\n        *i += 1;\n    });\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphkublc_m.rs:8:29\n  |\n8 |\
    \     v.into_iter().for_each(|&i| {\n  |                             ^--\n  |\
    \                             ||\n  |                             |expected due\
    \ to this\n  |                             expected `isize`, found reference\n\
    \  |                             help: did you mean `i`: `&isize`\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut n = l.len();\n    loop {\n        if n <= 1 {\n            break;\n\
    \        }\n        l[n] += 1;\n        n -= 1;\n    }\n    l\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmp0cvy4qoa.rs:12:9\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n12 |         l[n] += 1;\n   |         ^ cannot borrow as mutable\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut s = l.iter().cloned().collect::<Vec<_>>();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.len() < i + 1 {\n            i += 1;\n\
    \        } else {\n            s[i] = s[i] - 1;\n        }\n        i += 1;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 0]`,\n right: `[4, 3, 2]`', /tmp/tmplby1repr.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = l.len() - 1;\n    while i >= 0 { i--; l[i] += 1; }\n    l\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n --> /tmp/tmptlz79eqx.rs:8:23\n\
    \  |\n8 |     while i >= 0 { i--; l[i] += 1; }\n  |                       ^ expected\
    \ expression\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = l;\n    result.push(0);\n    for i in l {\n        result[result.len()\
    \ - 1] += i + 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n --> /tmp/tmppnyo9xm7.rs:9:14\n\
    \  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |              - move\
    \ occurs because `l` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n7 |     let mut result = l;\n  |                      - value moved here\n\
    8 |     result.push(0);\n9 |     for i in l {\n  |              ^ value used here\
    \ after move\n\nerror[E0502]: cannot borrow `result` as immutable because it is\
    \ also borrowed as mutable\n  --> /tmp/tmppnyo9xm7.rs:10:16\n   |\n10 |      \
    \   result[result.len() - 1] += i + 1;\n   |         -------^^^^^^^^^^^^-----\n\
    \   |         |      |\n   |         |      immutable borrow occurs here\n   |\
    \         mutable borrow occurs here\n   |         mutable borrow later used here\n\
    \   |\nhelp: try adding a local storing this...\n  --> /tmp/tmppnyo9xm7.rs:10:16\n\
    \   |\n10 |         result[result.len() - 1] += i + 1;\n   |                ^^^^^^^^^^^^\n\
    help: ...and then using that local here\n  --> /tmp/tmppnyo9xm7.rs:10:9\n   |\n\
    10 |         result[result.len() - 1] += i + 1;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0382, E0502.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    let mut last = -1;\n    for x in l\
    \ {\n        last = x;\n        if x == last + 1 {\n            result += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<_>`\n  --> /tmp/tmplwsvij7m.rs:12:13\n   |\n12 |             result +=\
    \ 1;\n   |             ------^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|&x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplmf457m8.rs:7:28\n  |\n7 |\
    \     l.iter().cloned().map(|&x| x + 1).collect()\n  |                       \
    \     ^--\n  |                            ||\n  |                            |expected\
    \ due to this\n  |                            expected `isize`, found reference\n\
    \  |                            help: did you mean `x`: `&isize`\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().clone().into_iter().rev() + l\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Rev<Rev<std::vec::IntoIter<isize>>>`\n\
    \ --> /tmp/tmpzwgqatrx.rs:7:51\n  |\n7 |     l.into_iter().rev().clone().into_iter().rev()\
    \ + l\n  |     --------------------------------------------- ^ - Vec<isize>\n\
    \  |     |\n  |     Rev<Rev<std::vec::IntoIter<isize>>>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().enumerate().map(|(i, v)| v + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|n| n + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l;\n    v.into_iter().rev().for_each(|&i| *i += 1);\n   \
    \ v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp86sw1eka.rs:8:35\n  |\n8 |\
    \     v.into_iter().rev().for_each(|&i| *i += 1);\n  |                       \
    \            ^--\n  |                                   ||\n  |              \
    \                     |expected due to this\n  |                             \
    \      expected `isize`, found reference\n  |                                \
    \   help: did you mean `i`: `&isize`\n  |\n  = note:   expected type `isize`\n\
    \          found reference `&_`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmphw_btjf8.rs:7:27\n\
    \  |\n7 |     l.into_iter().map(|x| *x + 1).collect()\n  |                   \
    \        ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l.len();\n    v.into_iter().for_each(|&x| *x += 1);\n   \
    \ v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `usize` is not an iterator\n --> /tmp/tmpihpafjoy.rs:8:7\n\
    \  |\n8 |     v.into_iter().for_each(|&x| *x += 1);\n  |       ^^^^^^^^^ `usize`\
    \ is not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `usize: Iterator`\n          which is required by `usize: IntoIterator`\n\
    \          `&usize: Iterator`\n          which is required by `&usize: IntoIterator`\n\
    \          `&mut usize: Iterator`\n          which is required by `&mut usize:\
    \ IntoIterator`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpihpafjoy.rs:9:5\n\
    \  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |                   \
    \             ---------- expected `Vec<isize>` because of return type\n...\n9\
    \ |     v\n  |     ^ expected struct `Vec`, found `usize`\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n               found type `usize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = l.iter().cloned().collect();\n    res[0] = *res.iter().skip(1).next().unwrap()\
    \ + 1;\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmprv7awurm.rs:8:5\n \
    \ |\n7 |     let mut res = l.iter().cloned().collect();\n  |         ------- consider\
    \ giving `res` a type\n8 |     res[0] = *res.iter().skip(1).next().unwrap() +\
    \ 1;\n  |     ^^^ cannot infer type\n  |\n  = note: type must be known at this\
    \ point\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l;\n    v.iter().cloned().rev().for_each(|&x| {\n       \
    \ if *x >= 0 {\n            *x -= 1;\n        } else {\n            *x += 1;\n\
    \        }\n    });\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1miytso4.rs:8:39\n  |\n8 |\
    \     v.iter().cloned().rev().for_each(|&x| {\n  |                           \
    \            ^--\n  |                                       ||\n  |          \
    \                             |expected due to this\n  |                     \
    \                  expected `isize`, found reference\n  |                    \
    \                   help: did you mean `x`: `&isize`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().rev().into_iter().map(|&x| x + 1).collect()\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvwvus4go.rs:7:46\n  |\n7 |\
    \     l.iter().cloned().rev().into_iter().map(|&x| x + 1).collect()\n  |     \
    \                                         ^--\n  |                           \
    \                   ||\n  |                                              |expected\
    \ due to this\n  |                                              expected `isize`,\
    \ found reference\n  |                                              help: did\
    \ you mean `x`: `&isize`\n  |\n  = note:   expected type `isize`\n          found\
    \ reference `&_`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().rev().enumerate().map(|(i, _)| {\n        *i + 1.into()\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n --> /tmp/tmpinny_qqw.rs:8:9\n\
    \  |\n8 |         *i + 1.into()\n  |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = l;\n    for i in &result {\n        *i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpqp99mwc8.rs:7:9\n\
    \  |\n7 |     let mut result = l;\n  |         ----^^^^^^\n  |         |\n  |\
    \         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0594]: cannot assign to `*i`, which is behind a `&` reference\n\
    \ --> /tmp/tmpqp99mwc8.rs:9:9\n  |\n8 |     for i in &result {\n  |          \
    \    ------- this iterator yields `&` references\n9 |         *i += 1;\n  |  \
    \       ^^^^^^^ `i` is a `&` reference, so the data it refers to cannot be written\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0594`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret: Vec<isize> = l;\n    for (i, &val) in ret.iter_mut().enumerate()\
    \ {\n        *val += 1;\n        if *val == 2 {\n            ret[i] = 0;\n   \
    \     }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu1mwqnko.rs:8:13\n  |\n8 |\
    \     for (i, &val) in ret.iter_mut().enumerate() {\n  |             ^^^^    \
    \ -------------------------- this expression has type `Option<(usize, &mut isize)>`\n\
    \  |             |\n  |             types differ in mutability\n  |          \
    \   help: you can probably remove the explicit borrow: `val`\n  |\n  = note: expected\
    \ mutable reference `&mut isize`\n                     found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|&x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplmf457m8.rs:7:28\n  |\n7 |\
    \     l.iter().cloned().map(|&x| x + 1).collect()\n  |                       \
    \     ^--\n  |                            ||\n  |                            |expected\
    \ due to this\n  |                            expected `isize`, found reference\n\
    \  |                            help: did you mean `x`: `&isize`\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|i| i + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut cnt = 0;\n    for el in l {\n    \
    \    if el == cnt {\n            cnt += 1;\n        } else {\n            res.push(cnt);\n\
    \            cnt = el;\n        }\n    }\n    res.push(cnt);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp_dcci_nt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut sum = 0;\n    let mut vec = vec![0; l.len()];\n    for i in 0..l.len()\
    \ {\n        sum += *l;\n        vec[i] = *l;\n        l += 1;\n    }\n    for\
    \ i in 0..vec.len() {\n        vec[i] += sum;\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpfxtny98z.rs:10:13\n   |\n10 |         sum +=\
    \ *l;\n   |             ^^ doesn't have a size known at compile-time\n   |\n \
    \  = help: the trait `Sized` is not implemented for `[isize]`\n\nerror[E0277]:\
    \ cannot add-assign `[isize]` to `{integer}`\n  --> /tmp/tmpfxtny98z.rs:10:13\n\
    \   |\n10 |         sum += *l;\n   |             ^^ no implementation for `{integer}\
    \ += [isize]`\n   |\n   = help: the trait `AddAssign<[isize]>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfxtny98z.rs:11:18\n\
    \   |\n11 |         vec[i] = *l;\n   |         ------   ^^ expected integer, found\
    \ slice `[isize]`\n   |         |\n   |         expected due to the type of this\
    \ binding\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmpfxtny98z.rs:12:9\n   |\n12 |         l +=\
    \ 1;\n   |         -^^^^^\n   |         |\n   |         cannot use `+=` on type\
    \ `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut it = l.iter().cloned();\n    it.into_iter().for_each(|x| x +=\
    \ 1);\n    it\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmqnlnve5.rs:9:5\n  |\n6 |\
    \ fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n...\n9 |     it\n\
    \  |     ^^ expected struct `Vec`, found struct `Cloned`\n  |\n  = note: expected\
    \ struct `Vec<isize>`\n             found struct `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut i = 0;\n    for (&e) in l.iter().enumerate()\
    \ {\n        res.push(*e + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around pattern\n --> /tmp/tmpxdlotbr9.rs:9:9\n\
    \  |\n9 |     for (&e) in l.iter().enumerate() {\n  |         ^  ^\n  |\n  = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n\
    9 -     for (&e) in l.iter().enumerate() {\n9 +     for &e in l.iter().enumerate()\
    \ {\n  | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpxdlotbr9.rs:9:10\n \
    \ |\n9 |     for (&e) in l.iter().enumerate() {\n  |          ^^     --------------------\
    \ this expression has type `Option<(usize, &isize)>`\n  |          |\n  |    \
    \      expected tuple, found reference\n  |          help: you can probably remove\
    \ the explicit borrow: `e`\n  |\n  = note:  expected tuple `(usize, &isize)`\n\
    \          found reference `&_`\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for (i, e) in l.iter_mut().enumerate()\
    \ {\n        *e = *e + 1;\n        result.push(*e);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n --> /tmp/tmp6rllg424.rs:8:10\n  |\n8 |\
    \     for (i, e) in l.iter_mut().enumerate() {\n  |          ^ help: if this is\
    \ intentional, prefix it with an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not declared\
    \ as mutable\n --> /tmp/tmp6rllg424.rs:8:19\n  |\n6 | fn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  |              - help: consider changing this to be mutable:\
    \ `mut l`\n7 |     let mut result = Vec::new();\n8 |     for (i, e) in l.iter_mut().enumerate()\
    \ {\n  |                   ^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, s)| {\n        i + s\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoedprnim.rs:8:13\n  |\n8 |\
    \         i + s\n  |             ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n --> /tmp/tmpoedprnim.rs:8:11\n  |\n8 |     \
    \    i + s\n  |           ^ no implementation for `usize + isize`\n  |\n  = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `usize`\n    --> /tmp/tmpoedprnim.rs:9:8\n\
    \     |\n9    |     }).collect()\n     |        ^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n     = help:\
    \ the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n     =\
    \ help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = l;\n    for i in res.iter_mut().rev() {\n        *i +=\
    \ 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmphw_btjf8.rs:7:27\n\
    \  |\n7 |     l.into_iter().map(|x| *x + 1).collect()\n  |                   \
    \        ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::with_capacity(l.len());\n    for el in l {\n       \
    \ v.push(el + 1);\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l;\n    for x in &mut v {\n        *x += 1;\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    if l.len() < 2 {\n        return l;\n    }\n    let mut acc = l[0];\n\
    \    for &x in &l[1..] {\n        acc += x;\n    }\n    vec![acc]\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6]`,\n right: `[4, 3, 2]`', /tmp/tmp60zdinxo.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmphw_btjf8.rs:7:27\n\
    \  |\n7 |     l.into_iter().map(|x| *x + 1).collect()\n  |                   \
    \        ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in l.iter().cloned().rev() {\n \
    \       res.push(i);\n        res.push(i + 1);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2, 3, 3, 4]`,\n right: `[4, 3, 2]`', /tmp/tmpr78gv033.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    if l.is_empty() {\n        return l;\n    }\n    let mut s = l.iter().cloned().peekable();\n\
    \    loop {\n        match s.next() {\n            Some(v) => v.into_iter().cloned().peekable().next().unwrap()+1,\n\
    \            None => break,\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n  --> /tmp/tmpj_kme_67.rs:13:26\n\
    \   |\n13 |             Some(v) => v.into_iter().cloned().peekable().next().unwrap()+1,\n\
    \   |                          ^^^^^^^^^ `isize` is not an iterator\n   |\n  \
    \ = note: the following trait bounds were not satisfied:\n           `isize: Iterator`\n\
    \           which is required by `isize: IntoIterator`\n           `&isize: Iterator`\n\
    \           which is required by `&isize: IntoIterator`\n           `&mut isize:\
    \ Iterator`\n           which is required by `&mut isize: IntoIterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpj_kme_67.rs:14:21\n   |\n6  | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |             None =>\
    \ break,\n   |                     ^^^^^\n   |                     |\n   |   \
    \                  expected struct `Vec`, found `()`\n   |                   \
    \  help: give it a value of the expected type: `break value`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    incr_list_internal(l, true)\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `incr_list_internal` in this scope\n\
    \ --> /tmp/tmp0yjcf4wg.rs:7:5\n  |\n7 |     incr_list_internal(l, true)\n  | \
    \    ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new = vec![0; l.len()];\n    for i in l.iter().cloned().skip(1)\
    \ {\n        new[i] = new[i - 1] + 1;\n    }\n    new\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n -->\
    \ /tmp/tmpx9tqpif7.rs:9:9\n  |\n9 |         new[i] = new[i - 1] + 1;\n  |    \
    \     ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n --> /tmp/tmpx9tqpif7.rs:9:18\n\
    \  |\n9 |         new[i] = new[i - 1] + 1;\n  |                  ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = l;\n    for i in 0..(ret.size() - 1) {\n        ret[i]\
    \ += 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmplyom29vj.rs:8:22\n  |\n8 |     for i in 0..(ret.size()\
    \ - 1) {\n  |                      ^^^^ help: there is an associated function\
    \ with a similar name: `resize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().collect::<Vec<_>>().reverse() + l\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `Vec<isize>` to `()`\n --> /tmp/tmpc3nionha.rs:7:55\n\
    \  |\n7 |     l.into_iter().rev().collect::<Vec<_>>().reverse() + l\n  |     -------------------------------------------------\
    \ ^ - Vec<isize>\n  |     |\n  |     ()\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut incr: usize = 1;\n    l.iter().cloned().for_each(|&i| {\n   \
    \     *i -= incr;\n        incr += 1;\n    });\n    l\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps11uxhhm.rs:8:33\n  |\n8 |\
    \     l.iter().cloned().for_each(|&i| {\n  |                                 ^--\n\
    \  |                                 ||\n  |                                 |expected\
    \ due to this\n  |                                 expected `isize`, found reference\n\
    \  |                                 help: did you mean `i`: `&isize`\n  |\n \
    \ = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out = vec![];\n    l.iter().cloned().for_each(|x| *out.push(x+1));\n\
    \    out\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `()` cannot be dereferenced\n --> /tmp/tmp7l0s4w8_.rs:8:36\n\
    \  |\n8 |     l.iter().cloned().for_each(|x| *out.push(x+1));\n  |           \
    \                         ^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = l.iter().cloned().peekable();\n    let mut x = i.next();\n\
    \    loop {\n        if !i.next().is_some() {\n            break;\n        }\n\
    \        i += 1;\n    }\n    i.collect::<Vec<isize>>()\n}\n\nfn main() {\n   \
    \ let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Peekable<Cloned<std::slice::Iter<'_, isize>>>`\n  --> /tmp/tmpxq8_rx_g.rs:13:9\n\
    \   |\n13 |         i += 1;\n   |         -^^^^^\n   |         |\n   |       \
    \  cannot use `+=` on type `Peekable<Cloned<std::slice::Iter<'_, isize>>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    (0..l.len()).map(|i| if i < l.len() - 1 {\n        l[i] + 1\n    } else\
    \ {\n        l[i]\n    }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 1]`,\n right: `[4, 3, 2]`', /tmp/tmpex48y1yg.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out = 0;\n    for x in l {\n        *out += 1;\n    }\n    out\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmp0zzzya9w.rs:9:9\n\
    \  |\n9 |         *out += 1;\n  |         ^^^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0zzzya9w.rs:11:5\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                ---------- expected `Vec<isize>` because\
    \ of return type\n...\n11 |     out\n   |     ^^^ expected struct `Vec`, found\
    \ integer\n   |\n   = note: expected struct `Vec<isize>`\n                found\
    \ type `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut rv = l.clone();\n    rv.sort();\n    rv.reverse();\n    rv +=\
    \ 1;\n    rv.into_iter().collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmp0nywm60p.rs:10:5\n   |\n10 |     rv += 1;\n   |\
    \     --^^^^^\n   |     |\n   |     cannot use `+=` on type `Vec<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = Vec::new();\n    for i in l {\n        ret.push(i + 1);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in l {\n        result.push(i + 1);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: -1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    incr_list(l.iter().cloned().collect())\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976094
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip_into(Vec::new(), |i, x| {\n        *i += 1;\n \
    \       x\n    })\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `zip_into` found for struct `Cloned` in the\
    \ current scope\n --> /tmp/tmprv__d4g9.rs:7:23\n  |\n7 |     l.iter().cloned().zip_into(Vec::new(),\
    \ |i, x| {\n  |                       ^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    let mut v = l;\n    while !v.is_empty() {\n\
    \        if r.len() == 0 {\n            r.push(v.clone());\n        } else {\n\
    \            r.push(r.last().unwrap() + 1);\n        }\n        v = v.next();\n\
    \    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `&Vec<isize>`\n  --> /tmp/tmptkspvh8p.rs:13:38\n\
    \   |\n13 |             r.push(r.last().unwrap() + 1);\n   |                 \
    \   ----------------- ^ - {integer}\n   |                    |\n   |         \
    \           &Vec<isize>\n\nerror[E0599]: no method named `next` found for struct\
    \ `Vec<isize>` in the current scope\n  --> /tmp/tmptkspvh8p.rs:15:15\n   |\n15\
    \ |         v = v.next();\n   |               ^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptkspvh8p.rs:17:5\n   |\n6  | fn\
    \ incr_list(l: Vec<isize>) -> Vec<isize> {\n   |                             \
    \   ---------- expected `Vec<isize>` because of return type\n...\n17 |     r\n\
    \   |     ^ expected `isize`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Vec<isize>>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut l = l;\n    let mut i = 0;\n    let mut result: Vec<isize> =\
    \ Vec::new();\n    for x in l {\n        *result + x = i;\n        i += 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0070]: invalid left-hand side of assignment\n  --> /tmp/tmps5oc6pud.rs:11:21\n\
    \   |\n11 |         *result + x = i;\n   |         ----------- ^\n   |       \
    \  |\n   |         cannot assign to this expression\n\nerror[E0369]: cannot add\
    \ `isize` to `[isize]`\n  --> /tmp/tmps5oc6pud.rs:11:17\n   |\n11 |         *result\
    \ + x = i;\n   |         ------- ^ - isize\n   |         |\n   |         [isize]\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0070, E0369.\nFor more information about an error, try `rustc --explain E0070`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut s = l.to_owned();\n    s.into_iter().map(|x| *x+=1).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp6bu66w_w.rs:8:27\n\
    \  |\n8 |     s.into_iter().map(|x| *x+=1).collect()\n  |                    \
    \       ^^\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `()`\n    --> /tmp/tmp6bu66w_w.rs:8:34\n \
    \    |\n8    |     s.into_iter().map(|x| *x+=1).collect()\n     |            \
    \                      ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=()>`\n     |\n     = help: the trait `FromIterator<()>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut rv = l;\n    rv.into_iter().for_each(|x| {\n        *x += 1\n\
    \    })\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpztplnxc9.rs:9:9\n\
    \  |\n9 |         *x += 1\n  |         ^^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpztplnxc9.rs:8:5\n   |\n6  |   fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                  ---------- expected `Vec<isize>` because\
    \ of return type\n7  |       let mut rv = l;\n8  | /     rv.into_iter().for_each(|x|\
    \ {\n9  | |         *x += 1\n10 | |     })\n   | |______^ expected struct `Vec`,\
    \ found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l;\n    v.into_iter().for_each(|&x| *x += 1);\n    v\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp58zqytd9.rs:8:29\n  |\n8 |\
    \     v.into_iter().for_each(|&x| *x += 1);\n  |                             ^--\n\
    \  |                             ||\n  |                             |expected\
    \ due to this\n  |                             expected `isize`, found reference\n\
    \  |                             help: did you mean `x`: `&isize`\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpvg4yfuim.rs:7:19\n     |\n7    |     l.into_iter().cloned().map(|x|\
    \ x + 1).collect()\n     |                   ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `map` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpvg4yfuim.rs:7:28\n   |\n7  |\
    \       l.into_iter().cloned().map(|x| x + 1).collect()\n   |                \
    \              ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut accum = vec![];\n    for (i, v) in l.iter().enumerate() {\n \
    \       accum.push(v + 1);\n        if *accum == vec![i; accum[i - 1].iter().map(|x|\
    \ x + 1).collect::<Vec<_>>().iter().max().unwrap()] {\n            *accum = vec![i];\n\
    \        }\n    }\n    accum\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp2tkqvg6e.rs:10:43\n   |\n10 |         if *accum == vec![i;\
    \ accum[i - 1].iter().map(|x| x + 1).collect::<Vec<_>>().iter().max().unwrap()]\
    \ {\n   |                                           ^^^^ method not found in `isize`\n\
    \nerror[E0277]: can't compare `isize` with `usize`\n  --> /tmp/tmp2tkqvg6e.rs:10:19\n\
    \   |\n10 |         if *accum == vec![i; accum[i - 1].iter().map(|x| x + 1).collect::<Vec<_>>().iter().max().unwrap()]\
    \ {\n   |                   ^^ no implementation for `isize == usize`\n   |\n\
    \   = help: the trait `PartialEq<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `PartialEq<Rhs>`:\n        \
    \     f32\n             f64\n             i128\n             i16\n           \
    \  i32\n             i64\n             i8\n             isize\n           and\
    \ 6 others\n   = note: required because of the requirements on the impl of `PartialEq<Vec<usize>>`\
    \ for `[isize]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2tkqvg6e.rs:11:22\n\
    \   |\n11 |             *accum = vec![i];\n   |             ------   ^^^^^^^ expected\
    \ slice `[isize]`, found struct `Vec`\n   |             |\n   |             expected\
    \ due to the type of this binding\n   |\n   = note: expected slice `[isize]`\n\
    \             found struct `Vec<usize>`\n   = note: this error originates in the\
    \ macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmp2tkqvg6e.rs:11:13\n   |\n11 |             *accum = vec![i];\n\
    \   |             ^^^^^^ doesn't have a size known at compile-time\n   |\n   =\
    \ help: the trait `Sized` is not implemented for `[isize]`\n   = note: the left-hand-side\
    \ of an assignment must have a statically known size\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l.to_owned();\n    for i in v.iter_mut().rev() {\n      \
    \  *i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l;\n    v.iter().cloned().for_each(|x| *x = *x + 1);\n  \
    \  v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp0zl9k_bf.rs:8:36\n\
    \  |\n8 |     v.iter().cloned().for_each(|x| *x = *x + 1);\n  |              \
    \                      ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \ --> /tmp/tmp0zl9k_bf.rs:8:41\n  |\n8 |     v.iter().cloned().for_each(|x| *x\
    \ = *x + 1);\n  |                                         ^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_list = l.iter().cloned().collect::<Vec<_>>();\n    new_list.push(0);\n\
    \    new_list.iter().enumerate().for_each(|(i, e)| {\n        let mut value =\
    \ *e + 1;\n        if value >= *e {\n            *e = *e + 1;\n        }\n   \
    \ });\n    new_list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n --> /tmp/tmp9b_eeizn.rs:9:44\n  |\n9 |\
    \     new_list.iter().enumerate().for_each(|(i, e)| {\n  |                   \
    \                         ^ help: if this is intentional, prefix it with an underscore:\
    \ `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\nwarning: variable\
    \ does not need to be mutable\n  --> /tmp/tmp9b_eeizn.rs:10:13\n   |\n10 |   \
    \      let mut value = *e + 1;\n   |             ----^^^^^\n   |             |\n\
    \   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0594]: cannot assign to `*e`, which is behind a `&`\
    \ reference\n  --> /tmp/tmp9b_eeizn.rs:12:13\n   |\n9  |     new_list.iter().enumerate().for_each(|(i,\
    \ e)| {\n   |                                               - help: consider changing\
    \ this to be a mutable reference: `&mut isize`\n...\n12 |             *e = *e\
    \ + 1;\n   |             ^^^^^^^^^^^ `e` is a `&` reference, so the data it refers\
    \ to cannot be written\n\nerror: aborting due to previous error; 2 warnings emitted\n\
    \nFor more information about this error, try `rustc --explain E0594`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut acc = vec![l.last().unwrap() + 1];\n    for i in l {\n      \
    \  acc.push(i + 1);\n    }\n    acc\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp8_rx8cpg.rs:7:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().enumerate().map(|(i, x)| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut a = l;\n    for i in 0..a.len() {\n        a[i] = a[i] + 1;\n\
    \    }\n    a\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, &item)| (*i + 1).unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcmy9prh.rs:7:44\n  |\n7 |\
    \     l.iter().cloned().enumerate().map(|(i, &item)| (*i + 1).unwrap()).collect()\n\
    \  |                                            ^^^^^- expected due to this\n\
    \  |                                            |\n  |                       \
    \                     expected `isize`, found reference\n  |                 \
    \                           help: you can probably remove the explicit borrow:\
    \ `item`\n  |\n  = note:   expected type `isize`\n          found reference `&_`\n\
    \nerror[E0614]: type `usize` cannot be dereferenced\n --> /tmp/tmpkcmy9prh.rs:7:53\n\
    \  |\n7 |     l.iter().cloned().enumerate().map(|(i, &item)| (*i + 1).unwrap()).collect()\n\
    \  |                                                     ^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, x)| (i + 1, *x + 1))\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp3ynk0tlv.rs:7:56\n\
    \  |\n7 |     l.iter().cloned().enumerate().map(|(i, x)| (i + 1, *x + 1))\n  |\
    \                                                        ^^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3ynk0tlv.rs:7:5\n  |\n6 | fn incr_list(l: Vec<isize>) ->\
    \ Vec<isize> {\n  |                                ---------- expected `Vec<isize>`\
    \ because of return type\n7 |     l.iter().cloned().enumerate().map(|(i, x)| (i\
    \ + 1, *x + 1))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Map`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Map<Enumerate<Cloned<std::slice::Iter<'_, isize>>>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().fold(Vec::new(), |mut vec, i| vec.push(vec.len() + 1))\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph2dfwado.rs:7:58\n  |\n7 |\
    \     l.into_iter().fold(Vec::new(), |mut vec, i| vec.push(vec.len() + 1))\n \
    \ |                                                          ^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     l.into_iter().fold(Vec::new(),\
    \ |mut vec, i| vec.push((vec.len() + 1).try_into().unwrap()))\n  |           \
    \                                               +             +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmph2dfwado.rs:7:49\n  |\n6 | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                ---------- expected\
    \ `Vec<isize>` because of return type\n7 |     l.into_iter().fold(Vec::new(),\
    \ |mut vec, i| vec.push(vec.len() + 1))\n  |                                 \
    \                ^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n \
    \ |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    note: method `push` modifies its receiver in-place\n --> /tmp/tmph2dfwado.rs:7:53\n\
    \  |\n7 |     l.into_iter().fold(Vec::new(), |mut vec, i| vec.push(vec.len() +\
    \ 1))\n  |                                                 --- ^^^^ this call\
    \ modifies `vec` in-place\n  |                                               \
    \  |\n  |                                                 you probably want to\
    \ use this value after calling the method...\n  = note: ...instead of the `()`\
    \ output of method `push`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in l.iter() {\n        *res += 1;\n\
    \        res.push(*i);\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `[_]`\n --> /tmp/tmp3z7fi82_.rs:9:9\n  |\n9 |         *res += 1;\n  |      \
    \   ----^^^^^\n  |         |\n  |         cannot use `+=` on type `[_]`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![l.first()];\n    let mut incr = 1;\n    for x in\
    \ l.iter().rev() {\n        if x == result.last().unwrap() {\n            result.push(*incr);\n\
    \            incr += 1;\n        } else {\n            result.push(x);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `Option<&isize>`\n  --> /tmp/tmpgccu6zrs.rs:10:14\n\
    \   |\n10 |         if x == result.last().unwrap() {\n   |              ^^ no\
    \ implementation for `isize == Option<&isize>`\n   |\n   = help: the trait `PartialEq<Option<&isize>>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n   = note: required because of the requirements\
    \ on the impl of `PartialEq<&Option<&isize>>` for `&isize`\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmpgccu6zrs.rs:11:25\n   |\n\
    11 |             result.push(*incr);\n   |                         ^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgccu6zrs.rs:14:25\n   |\n14 |             result.push(x);\n\
    \   |                         ^ expected enum `Option`, found `&isize`\n   |\n\
    \   = note:   expected enum `Option<&isize>`\n           found reference `&isize`\n\
    help: try wrapping the expression in `Some`\n   |\n14 |             result.push(Some(x));\n\
    \   |                         +++++ +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgccu6zrs.rs:17:5\n   |\n6  | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                ---------- expected `Vec<isize>` because\
    \ of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<Option<&isize>>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut n = l.len();\n    let mut ret = l;\n    for _ in 0..n {\n   \
    \     ret.push(ret.last() + 1);\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Option<&isize>`\n  --> /tmp/tmp82nvjlrq.rs:10:29\n\
    \   |\n10 |         ret.push(ret.last() + 1);\n   |                  ----------\
    \ ^ - {integer}\n   |                  |\n   |                  Option<&isize>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    let mut rv = l.iter().cloned().collect::<Vec<_>>();\n\
    \    rv.sort_unstable();\n    while i < rv.len() {\n        rv[i] = rv[i] + 1;\n\
    \        i += 1;\n    }\n    rv\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4]`,\n right: `[4, 3, 2]`', /tmp/tmplk1g5qmr.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    for _ in l {\n        i += 1;\n    }\n    l.resize(i);\n\
    \    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpxfqj933v.rs:11:7\n     |\n11   |     l.resize(i);\n     |   \
    \    ^^^^^^ - supplied 1 argument\n     |       |\n     |       expected 2 arguments\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret: Vec<isize> = Vec::new();\n    for (i, item) in l.iter().enumerate()\
    \ {\n        ret.push(item + i);\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqabnpqe_.rs:9:25\n  |\n9 |\
    \         ret.push(item + i);\n  |                         ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot add `usize` to `&isize`\n --> /tmp/tmpqabnpqe_.rs:9:23\n\
    \  |\n9 |         ret.push(item + i);\n  |                       ^ no implementation\
    \ for `&isize + usize`\n  |\n  = help: the trait `Add<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().enumerate().map(|(i, x)| i + 1).collect()\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `usize`\n    --> /tmp/tmpxcu2tjdx.rs:7:55\n     |\n7 \
    \   |     l.iter().cloned().enumerate().map(|(i, x)| i + 1).collect()\n     |\
    \                                                       ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=usize>`\n     |\n\
    \     = help: the trait `FromIterator<usize>` is not implemented for `Vec<isize>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut vec = Vec::new();\n    for elem in l {\n        vec.push(elem\
    \ + 1);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut c = Vec::with_capacity(l.len());\n    for (i, val) in l.iter().enumerate()\
    \ {\n        c.push(val + 1);\n        if i < c.len() - 1 {\n            c.push(i\
    \ + 2);\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp874xbu_4.rs:11:20\n   |\n\
    11 |             c.push(i + 2);\n   |                    ^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |             c.push((i + 2).try_into().unwrap());\n\
    \   |                    +     +++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in l.iter().cloned() {\n    \
    \    result.push(i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976054
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut it = l.iter();\n    it.skip(1);\n    let mut res = Vec::new();\n\
    \    let mut i = 0;\n    let mut last_index = -1;\n    loop {\n        if i as\
    \ usize > last_index as usize {\n            res.push(it.next().unwrap() + 1);\n\
    \            last_index = i;\n        } else {\n            res.push(i + 1);\n\
    \        }\n        i += 1;\n        if i == l.len() {\n            break;\n \
    \       }\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp20hdv_ky.rs:20:17\n   |\n\
    20 |         if i == l.len() {\n   |                 ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |         if i == l.len().try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![l.last().clone(), l.last().clone(), l.last().clone(),\
    \ l.last().clone(), l.last().clone()];\n    r[0] += 1;\n    r[1] += 1;\n    r[2]\
    \ += 1;\n    r[3] += 1;\n    r[4] += 1;\n    r\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Option<&isize>`\n --> /tmp/tmpku2mk3mv.rs:8:5\n  |\n8 |     r[0] += 1;\n  |\
    \     ----^^^^^\n  |     |\n  |     cannot use `+=` on type `Option<&isize>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<&isize>`\n\
    \ --> /tmp/tmpku2mk3mv.rs:9:5\n  |\n9 |     r[1] += 1;\n  |     ----^^^^^\n  |\
    \     |\n  |     cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<&isize>`\n  -->\
    \ /tmp/tmpku2mk3mv.rs:10:5\n   |\n10 |     r[2] += 1;\n   |     ----^^^^^\n  \
    \ |     |\n   |     cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpku2mk3mv.rs:11:5\n   |\n11 |     r[3] += 1;\n   |     ----^^^^^\n\
    \   |     |\n   |     cannot use `+=` on type `Option<&isize>`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Option<&isize>`\n\
    \  --> /tmp/tmpku2mk3mv.rs:12:5\n   |\n12 |     r[4] += 1;\n   |     ----^^^^^\n\
    \   |     |\n   |     cannot use `+=` on type `Option<&isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpku2mk3mv.rs:13:5\n   |\n6  | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 |     r\n   |     ^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Option<&isize>>`\n\nerror: aborting due to 6\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut iter = l.iter().cloned().rev();\n    let mut res = vec![];\n\
    \    let mut i = 0;\n    loop {\n        i -= 1;\n        res.push(*iter);\n \
    \       if i == 0 {\n            break;\n        }\n        iter += 1;\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Rev<Cloned<std::slice::Iter<'_, isize>>>` cannot be\
    \ dereferenced\n  --> /tmp/tmp1x8m_cnd.rs:12:18\n   |\n12 |         res.push(*iter);\n\
    \   |                  ^^^^^\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Rev<Cloned<std::slice::Iter<'_, isize>>>`\n  -->\
    \ /tmp/tmp1x8m_cnd.rs:16:9\n   |\n16 |         iter += 1;\n   |         ----^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `Rev<Cloned<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0368, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l.to_owned();\n    v.into_iter().cloned().zip(into_zeroes(&mut\
    \ v)).map(|(a, b)| {\n        match b {\n            0 => a,\n            _ =>\
    \ a + 1,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `into_zeroes` in this scope\n --> /tmp/tmphic_w_am.rs:8:32\n\
    \  |\n8 |     v.into_iter().cloned().zip(into_zeroes(&mut v)).map(|(a, b)| {\n\
    \  |                                ^^^^^^^^^^^ not found in this scope\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \    --> /tmp/tmphic_w_am.rs:8:19\n     |\n8    |     v.into_iter().cloned().zip(into_zeroes(&mut\
    \ v)).map(|(a, b)| {\n     |                   ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmphic_w_am.rs:8:28\n   |\n8  |\
    \       v.into_iter().cloned().zip(into_zeroes(&mut v)).map(|(a, b)| {\n   | \
    \                             ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0425,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(l.iter().cloned().skip(1)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `(isize, isize)`\n    --> /tmp/tmp0qsnf_91.rs:7:54\n \
    \    |\n7    |     l.iter().cloned().zip(l.iter().cloned().skip(1)).collect()\n\
    \     |                                                      ^^^^^^^ value of\
    \ type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(isize, isize)>`\n\
    \     |\n     = help: the trait `FromIterator<(isize, isize)>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(isize::one()).map(|(a, b)| a + b).collect()\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `one` found for type\
    \ `isize` in the current scope\n --> /tmp/tmp9p7w7gtd.rs:7:34\n  |\n7 |     l.iter().cloned().zip(isize::one()).map(|(a,\
    \ b)| a + b).collect()\n  |                                  ^^^ function or associated\
    \ item not found in `isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v: Vec<isize> = l.iter().cloned().collect();\n    v.into_iter().zip(v).for_each(|&(a,\
    \ b)| {\n        *a += 1;\n        *b += 1;\n    });\n    v\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqimobiax.rs:8:36\n  |\n8 |\
    \     v.into_iter().zip(v).for_each(|&(a, b)| {\n  |                         \
    \           ^^^^^^-\n  |                                    |     |\n  |     \
    \                               |     expected due to this\n  |              \
    \                      expected tuple, found reference\n  |\n  = note:  expected\
    \ tuple `(isize, isize)`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp077a8j62.rs:7:31\n\
    \  |\n7 |     l.iter().cloned().map(|x| *x + 1).collect()\n  |               \
    \                ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    l.iter().map(|x| { i += x; x }).collect()\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp8zxd_6js.rs:8:37\n     |\n8\
    \    |     l.iter().map(|x| { i += x; x }).collect()\n     |                 \
    \                    ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = Vec::with_capacity(l.len());\n    ret.extend(l.iter().cloned().map(|x|\
    \ *x + 1));\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpc50gzhvd.rs:8:42\n\
    \  |\n8 |     ret.extend(l.iter().cloned().map(|x| *x + 1));\n  |            \
    \                              ^^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().enumerate().map(|(i, w)| w + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l.into_iter().collect::<Vec<_>>();\n    let mut incr = l.len()\
    \ / 2;\n    while v.len() >= incr {\n        v.push(v.pop() + 1);\n        incr\
    \ /= 2;\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Option<isize>`\n  --> /tmp/tmphs7lsilw.rs:10:24\n\
    \   |\n10 |         v.push(v.pop() + 1);\n   |                ------- ^ - {integer}\n\
    \   |                |\n   |                Option<isize>\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    r.extend(l);\n    let mut sum = 0;\n    for\
    \ &i in r {\n        sum += i;\n    }\n    r.iter().map(|&i| i + 1).collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpld7qd6f1.rs:10:9\n   |\n\
    10 |     for &i in r {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ls = l.iter().cloned().collect::<Vec<isize>>();\n    ls.iter_mut().for_each(|x|\
    \ x += 1); // TODO: remove `.cloned()` and replace with `.clone()`\n    ls\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&mut isize`\n --> /tmp/tmpbjs__4b4.rs:8:32\n  |\n8 |     ls.iter_mut().for_each(|x|\
    \ x += 1); // TODO: remove `.cloned()` and replace with `.clone()`\n  |      \
    \                          -^^^^^\n  |                                |\n  | \
    \                               cannot use `+=` on type `&mut isize`\n  |\nhelp:\
    \ `+=` can be used on `isize`, you can dereference `x`\n  |\n8 |     ls.iter_mut().for_each(|x|\
    \ *x += 1); // TODO: remove `.cloned()` and replace with `.clone()`\n  |     \
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().cloned().map(|x| *x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpt19x8rmu.rs:7:19\n     |\n7    |     l.into_iter().cloned().map(|x|\
    \ *x + 1).collect()\n     |                   ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `map` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpt19x8rmu.rs:7:28\n   |\n7  |\
    \       l.into_iter().cloned().map(|x| *x + 1).collect()\n   |               \
    \               ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for x in l {\n        res.push(x+1);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut cur = 0;\n    let mut ret = Vec::new();\n    for x in l {\n \
    \       ret.push(cur + x);\n        cur += 1;\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpqs05qd9s.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    let mut cur = 0;\n    for (i, e) in l.into_iter().enumerate()\
    \ {\n        res.push(e + cur);\n        cur += e;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 6]`,\n right: `[4, 3, 2]`', /tmp/tmpypgl95nk.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = vec![];\n    v.extend(l);\n    v.into_iter().map(|x| x +\
    \ 1).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    incr_list(l, |x| *x)\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpm2i5vj_h.rs:7:19\n\
    \  |\n7 |     incr_list(l, |x| *x)\n  |                   ^ consider giving this\
    \ closure parameter a type\n  |\n  = note: type must be known at this point\n\n\
    error[E0061]: this function takes 1 argument but 2 arguments were supplied\n -->\
    \ /tmp/tmpm2i5vj_h.rs:7:5\n  |\n7 |     incr_list(l, |x| *x)\n  |     ^^^^^^^^^\
    \ -  ------ supplied 2 arguments\n  |     |\n  |     expected 1 argument\n  |\n\
    note: function defined here\n --> /tmp/tmpm2i5vj_h.rs:6:4\n  |\n6 | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n  |    ^^^^^^^^^ -------------\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0282.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.resize(l.len() + 1, 0);\n    l\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpfc_xbexs.rs:7:5\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |              - help: consider changing this to be mutable: `mut l`\n\
    7 |     l.resize(l.len() + 1, 0);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().chain(l.iter().cloned().skip(1))\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc1sypbbh.rs:7:5\n  |\n6 |\
    \ fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |                           \
    \     ---------- expected `Vec<isize>` because of return type\n7 |     l.iter().cloned().chain(l.iter().cloned().skip(1))\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `std::iter::Chain`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `std::iter::Chain<Cloned<std::slice::Iter<'_, isize>>,\
    \ Skip<Cloned<std::slice::Iter<'_, isize>>>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    for _ in 0..v.len()\
    \ {\n        v.push(*v + 1);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `[isize]`\n --> /tmp/tmp_nltiepo.rs:9:19\n\
    \  |\n9 |         v.push(*v + 1);\n  |                -- ^ - {integer}\n  |  \
    \              |\n  |                [isize]\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|v| v + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut it = l.iter();\n    for _ in 0..l.len() {\n        let x = it.next().unwrap();\n\
    \        it.by_ref().map(|x| x + 1).collect();\n    }\n    l\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmpg2scsk9w.rs:10:36\n\
    \     |\n10   |         it.by_ref().map(|x| x + 1).collect();\n     |        \
    \                            ^^^^^^^ cannot infer type for type parameter `B`\
    \ declared on the associated function `collect`\n     |\n     = note: cannot satisfy\
    \ `_: FromIterator<isize>`\nnote: required by a bound in `collect`\nhelp: consider\
    \ specifying the type argument in the method call\n     |\n10   |         it.by_ref().map(|x|\
    \ x + 1).collect::<B>();\n     |                                           +++++\n\
    help: consider specifying the type argument in the function call\n     |\n10 \
    \  |         it.by_ref().map(|x| x + 1).collect::<B>();\n     |              \
    \                             +++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut n = l.len();\n    let mut new_list = Vec::with_capacity(n.checked_add(1,\
    \ &mut [0])?);\n    for e in l.iter().cloned() {\n        new_list.push(*e + 1);\n\
    \    }\n    new_list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \   --> /tmp/tmp0h1ummuf.rs:8:45\n    |\n8   |     let mut new_list = Vec::with_capacity(n.checked_add(1,\
    \ &mut [0])?);\n    |                                             ^^^^^^^^^^^\
    \ -  -------- supplied 2 arguments\n    |                                    \
    \         |\n    |                                             expected 1 argument\n\
    \    |\nnote: associated function defined here\n    = note: this error originates\
    \ in the macro `uint_impl` (in Nightly builds, run with -Z macro-backtrace for\
    \ more info)\n\nerror[E0277]: the `?` operator can only be used in a function\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \  --> /tmp/tmp0h1ummuf.rs:8:69\n   |\n6  | / fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n7  | |     let mut n = l.len();\n8  | |     let mut new_list = Vec::with_capacity(n.checked_add(1,\
    \ &mut [0])?);\n   | |                                                       \
    \              ^ cannot use the `?` operator in a function that returns `Vec<isize>`\n\
    9  | |     for e in l.iter().cloned() {\n...  |\n12 | |     new_list\n13 | | }\n\
    \   | |_- this function should return `Result` or `Option` to accept `?`\n   |\n\
    \   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for\
    \ `Vec<isize>`\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp0h1ummuf.rs:10:23\n\
    \   |\n10 |         new_list.push(*e + 1);\n   |                       ^^\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0; l.len() + 1; 1];\n    let mut cur = 0;\n   \
    \ let mut i = 0;\n\n    while i < l.len() {\n        if cur + 1 >= result.len()\
    \ {\n            result[cur + 1] = l[i];\n        } else {\n            result[cur\
    \ + 1] = result[cur] + l[i];\n        }\n        cur = cur + 1;\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error: no rules expected the token `;`\n --> /tmp/tmpljuxwpqv.rs:7:41\n\
    \  |\n7 |     let mut result = vec![0; l.len() + 1; 1];\n  |                 \
    \                        ^ no rules expected this token in macro call\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = l;\n    result.iter_mut().for_each(|&x|\
    \ *x += 1);\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxpj8y2rx.rs:8:33\n  |\n8 |\
    \     result.iter_mut().for_each(|&x| *x += 1);\n  |                         \
    \        ^--\n  |                                 ||\n  |                    \
    \             |expected due to this\n  |                                 types\
    \ differ in mutability\n  |                                 help: did you mean\
    \ `x`: `&&mut isize`\n  |\n  = note: expected mutable reference `&mut isize`\n\
    \                     found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut iter = l.into_iter().peekable();\n    let mut i = 0;\n    loop\
    \ {\n        match iter.next() {\n            Some(x) => i += x,\n           \
    \ None => break,\n        }\n    }\n    let mut res = vec![];\n    for _ in l.iter().rev()\
    \ {\n        res.push(i as isize);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmplbxyqf51.rs:16:14\n\
    \    |\n6   | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n    |             \
    \ - move occurs because `l` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n7   |     let mut iter = l.into_iter().peekable();\n    |    \
    \                  ----------- `l` moved due to this method call\n...\n16  | \
    \    for _ in l.iter().rev() {\n    |              ^^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `l`\n    = note: borrow occurs due to deref coercion to `[isize]`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpqg6myuv3.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut s = l;\n    let mut carry = 0;\n    for &x in &mut s {\n    \
    \    if *x != 0 {\n            *x = *x + 1;\n        } else {\n            *x\
    \ = *x + carry;\n            carry = *x / 10;\n            *x %= 10;\n       \
    \ }\n    }\n    while carry > 0 {\n        *s.last_mut().unwrap() += 1;\n    \
    \    s.pop_back();\n        carry -= 1;\n    }\n    vec!s\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `s`\n  --> /tmp/tmptpry2wba.rs:23:9\n\
    \   |\n23 |     vec!s\n   |         ^ expected one of `(`, `[`, or `{`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmptpry2wba.rs:9:9\n  |\n9 |     for &x in &mut\
    \ s {\n  |         ^^    ------ this expression has type `Option<&mut isize>`\n\
    \  |         |\n  |         types differ in mutability\n  |         help: you\
    \ can probably remove the explicit borrow: `x`\n  |\n  = note: expected mutable\
    \ reference `&mut isize`\n                     found reference `&_`\n\nerror[E0599]:\
    \ no method named `pop_back` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmptpry2wba.rs:20:11\n   |\n20 |         s.pop_back();\n   |     \
    \      ^^^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut accum = 0;\n    for i in l {\n        accum += i;\n    }\n  \
    \  incr(accum)\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `incr` in this scope\n  --> /tmp/tmpq23j1bma.rs:11:5\n\
    \   |\n11 |     incr(accum)\n   |     ^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    let mut current = 0;\n    let mut len =\
    \ l.len();\n\n    // For each element in the list\n    for el in l.iter_mut()\
    \ {\n        // If list element is not 1, increment the list element\n       \
    \ if *el != 1 {\n            *el += 1;\n        } else {\n            // If list\
    \ element 1 is found, increment the result list element\n            result[current]\
    \ += 1;\n            // and update the current index\n            current += 1;\n\
    \        }\n    }\n    // Copy the result into a new vector\n    result\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `len`\n --> /tmp/tmpba_xxycv.rs:9:13\n  |\n9\
    \ |     let mut len = l.len();\n  |             ^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_len`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n --> /tmp/tmpba_xxycv.rs:9:9\n\
    \  |\n9 |     let mut len = l.len();\n  |         ----^^^\n  |         |\n  |\
    \         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpba_xxycv.rs:12:15\n   |\n6  | fn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |              - help: consider changing this to be mutable:\
    \ `mut l`\n...\n12 |     for el in l.iter_mut() {\n   |               ^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    if l.len() < 2 {\n        l.into_iter().rev().collect()\n    } else {\n\
    \        l.iter().zip(l.iter().skip(1)).map(|(x, y)| x + y).collect()\n    }\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3]`,\n right: `[4, 3, 2]`', /tmp/tmpllnfw5qh.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(l.iter().cloned().skip(1))\n        .map(|(_, x)|\
    \ x + 1).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2]`,\n right: `[4, 3, 2]`', /tmp/tmpihofxs_g.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().into_iter().map(|&i| i + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptp9tu7kr.rs:7:40\n  |\n7 |\
    \     l.iter().cloned().into_iter().map(|&i| i + 1).collect()\n  |           \
    \                             ^--\n  |                                       \
    \ ||\n  |                                        |expected due to this\n  |  \
    \                                      expected `isize`, found reference\n  |\
    \                                        help: did you mean `i`: `&isize`\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|e| e + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp077a8j62.rs:7:31\n\
    \  |\n7 |     l.iter().cloned().map(|x| *x + 1).collect()\n  |               \
    \                ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut new_list = Vec::new();\n    new_list.extend(l.iter().cloned());\n\
    \    new_list.extend(new_list.iter().cloned());\n    new_list.extend(new_list.iter().cloned());\n\
    \    new_list\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `new_list` as mutable because it is also borrowed\
    \ as immutable\n --> /tmp/tmpnm35gqu9.rs:9:5\n  |\n9 |     new_list.extend(new_list.iter().cloned());\n\
    \  |     ^^^^^^^^^------^---------------^^^^^^^^^^\n  |     |        |      |\n\
    \  |     |        |      immutable borrow occurs here\n  |     |        immutable\
    \ borrow later used by call\n  |     mutable borrow occurs here\n\nerror[E0502]:\
    \ cannot borrow `new_list` as mutable because it is also borrowed as immutable\n\
    \  --> /tmp/tmpnm35gqu9.rs:10:5\n   |\n10 |     new_list.extend(new_list.iter().cloned());\n\
    \   |     ^^^^^^^^^------^---------------^^^^^^^^^^\n   |     |        |     \
    \ |\n   |     |        |      immutable borrow occurs here\n   |     |       \
    \ immutable borrow later used by call\n   |     mutable borrow occurs here\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut l = l;\n    l.iter_mut().for_each(|&x| { *x = *x + 1});\n   \
    \ l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphjfrf9gs.rs:8:28\n  |\n8 |\
    \     l.iter_mut().for_each(|&x| { *x = *x + 1});\n  |                       \
    \     ^--\n  |                            ||\n  |                            |expected\
    \ due to this\n  |                            types differ in mutability\n  |\
    \                            help: did you mean `x`: `&&mut isize`\n  |\n  = note:\
    \ expected mutable reference `&mut isize`\n                     found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    v.extend(l);\n    for x in &v {\n      \
    \  *x += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n\
    \  --> /tmp/tmpg1c5o860.rs:10:9\n   |\n9  |     for x in &v {\n   |          \
    \    -- this iterator yields `&` references\n10 |         *x += 1;\n   |     \
    \    ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0594`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().rev().fold(vec![l.first().unwrap() as isize; 1], nyx(&l)).unwrap()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `nyx` in this scope\n --> /tmp/tmpq4axwcol.rs:7:63\n\
    \  |\n7 |     l.iter().rev().fold(vec![l.first().unwrap() as isize; 1], nyx(&l)).unwrap()\n\
    \  |                                                               ^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `unwrap` found for struct `Vec<isize>`\
    \ in the current scope\n --> /tmp/tmpq4axwcol.rs:7:72\n  |\n7 |     l.iter().rev().fold(vec![l.first().unwrap()\
    \ as isize; 1], nyx(&l)).unwrap()\n  |                                       \
    \                                 ^^^^^^ help: there is an associated function\
    \ with a similar name: `swap`\n\nerror[E0606]: casting `&isize` as `isize` is\
    \ invalid\n --> /tmp/tmpq4axwcol.rs:7:30\n  |\n7 |     l.iter().rev().fold(vec![l.first().unwrap()\
    \ as isize; 1], nyx(&l)).unwrap()\n  |                              ------------------^^^^^^^^^\n\
    \  |                              |\n  |                              cannot cast\
    \ `&isize` as `isize`\n  |                              help: dereference the\
    \ expression: `*l.first().unwrap()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut s = l.iter().cloned().collect::<Vec<_>>();\n    s.into_iter().cloned().for_each(|n|\
    \ {\n        *n += 1;\n    });\n    s\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmp7y86fgu2.rs:8:19\n     |\n8    |     s.into_iter().cloned().for_each(|n|\
    \ {\n     |                   ^^^^^^ expected reference, found `isize`\n     |\n\
    \     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `for_each` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp7y86fgu2.rs:8:28\n   |\n8  |       s.into_iter().cloned().for_each(|n|\
    \ {\n   |                              ^^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut iter = l.iter().cloned();\n    iter.advance_mut(1);\n    iter\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `advance_mut` found for struct `Cloned` in\
    \ the current scope\n --> /tmp/tmpkqcyoggy.rs:8:10\n  |\n8 |     iter.advance_mut(1);\n\
    \  |          ^^^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpkqcyoggy.rs:9:5\n  |\n6 | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n  |                                ---------- expected\
    \ `Vec<isize>` because of return type\n...\n9 |     iter\n  |     ^^^^ expected\
    \ struct `Vec`, found struct `Cloned`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = Vec::new();\n    for (i, e) in l.into_iter().enumerate()\
    \ {\n        if *e == 1 {\n            r.push(i + 1);\n        }\n    }\n    r\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp05nd614e.rs:9:12\n\
    \  |\n9 |         if *e == 1 {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05nd614e.rs:13:5\n   |\n6  | fn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                ---------- expected `Vec<isize>`\
    \ because of return type\n...\n13 |     r\n   |     ^ expected `isize`, found\
    \ `usize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![0; l.len()];\n\n    for i in 0..l.len() {\n   \
    \     result[i] += 1;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[4, 3, 2]`', /tmp/tmphmtewrq9.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().fold(1, |acc, &i| acc + i)\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppmjdxua5.rs:7:28\n  |\n7 |\
    \     l.iter().cloned().fold(1, |acc, &i| acc + i)\n  |                      \
    \      ^ expected struct `Vec`, found integer\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n               found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmppmjdxua5.rs:7:37\n  |\n7 |     l.iter().cloned().fold(1,\
    \ |acc, &i| acc + i)\n  |                                     ^--\n  |       \
    \                              ||\n  |                                     |expected\
    \ due to this\n  |                                     expected `isize`, found\
    \ reference\n  |                                     help: did you mean `i`: `&isize`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0369]:\
    \ cannot add `_` to `Vec<isize>`\n --> /tmp/tmppmjdxua5.rs:7:45\n  |\n7 |    \
    \ l.iter().cloned().fold(1, |acc, &i| acc + i)\n  |                          \
    \               --- ^ - _\n  |                                         |\n  |\
    \                                         Vec<isize>\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = l;\n    let mut i = 5;\n    while i < (l.len() as isize)\
    \ - 1 {\n        ret.push(ret[i] + 1);\n        i += 1;\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_g7focvu.rs:10:18\n\
    \   |\n10 |         ret.push(ret[i] + 1);\n   |                  ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.rev()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmputyxxncy.rs:7:7\n\
    \    |\n7   |       l.rev()\n    |         ^^^ `Vec<isize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|n| n + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().chain(vec![l.last().unwrap() + 1]).collect()\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpjvpod49m.rs:7:36\n\
    \    |\n6   | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n    |             \
    \ - move occurs because `l` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n7   |     l.into_iter().rev().chain(vec![l.last().unwrap() + 1]).collect()\n\
    \    |       -----------                  ^^^^^^^^ value borrowed here after move\n\
    \    |       |\n    |       `l` moved due to this method call\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `l`\n    = note:\
    \ borrow occurs due to deref coercion to `[isize]`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip((l + 1) as usize).collect::<Vec<_>>()\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Vec<isize>`\n --> /tmp/tmpmqiadd_9.rs:7:30\n\
    \  |\n7 |     l.iter().cloned().zip((l + 1) as usize).collect::<Vec<_>>()\n  |\
    \                            - ^ - {integer}\n  |                            |\n\
    \  |                            Vec<isize>\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpmqiadd_9.rs:7:5\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                                ---------- expected `Vec<isize>` because\
    \ of return type\n7 |     l.iter().cloned().zip((l + 1) as usize).collect::<Vec<_>>()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found tuple\n  |\n  = note: expected struct `Vec<isize>`\n        \
    \     found struct `Vec<(isize, _)>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().zip(0..).cloned().collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Zip<Rev<std::vec::IntoIter<isize>>,\
    \ RangeFrom<{integer}>> as Iterator>::Item == &_`\n    --> /tmp/tmpygdj6wfr.rs:7:34\n\
    \     |\n7    |     l.into_iter().rev().zip(0..).cloned().collect()\n     |  \
    \                                ^^^^^^ expected reference, found tuple\n    \
    \ |\n     = note: expected reference `&_`\n                    found tuple `(isize,\
    \ {integer})`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method\
    \ `collect` exists for struct `Cloned<Zip<Rev<std::vec::IntoIter<isize>>, RangeFrom<{integer}>>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpygdj6wfr.rs:7:43\n  \
    \ |\n7  |        l.into_iter().rev().zip(0..).cloned().collect()\n   |       \
    \                                       ^^^^^^^ method cannot be called on `Cloned<Zip<Rev<std::vec::IntoIter<isize>>,\
    \ RangeFrom<{integer}>>>` due to unsatisfied trait bounds\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `<Zip<Rev<std::vec::IntoIter<isize>>,\
    \ RangeFrom<{integer}>> as Iterator>::Item = &_`\n           which is required\
    \ by `Cloned<Zip<Rev<std::vec::IntoIter<isize>>, RangeFrom<{integer}>>>: Iterator`\n\
    \           `Cloned<Zip<Rev<std::vec::IntoIter<isize>>, RangeFrom<{integer}>>>:\
    \ Iterator`\n           which is required by `&mut Cloned<Zip<Rev<std::vec::IntoIter<isize>>,\
    \ RangeFrom<{integer}>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    if l.len() <= 1 {\n        l\n    } else {\n        l.iter().enumerate().filter(|(i,\
    \ v)| v == 1).map(|(idx, val)| {\n            (idx+1, val+1)\n        }).collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpnayqc14a.rs:10:48\n\
    \   |\n10 |         l.iter().enumerate().filter(|(i, v)| v == 1).map(|(idx, val)|\
    \ {\n   |                                                ^^ no implementation\
    \ for `&&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `(usize, isize)`\n  \
    \  --> /tmp/tmpnayqc14a.rs:12:12\n     |\n12   |         }).collect()\n     |\
    \            ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(usize,\
    \ isize)>`\n     |\n     = help: the trait `FromIterator<(usize, isize)>` is not\
    \ implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented\
    \ for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| *x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmphw_btjf8.rs:7:27\n\
    \  |\n7 |     l.into_iter().map(|x| *x + 1).collect()\n  |                   \
    \        ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(l + (l.len() - 1)).cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `usize` to `Vec<isize>`\n --> /tmp/tmpc6449esy.rs:7:29\n\
    \  |\n7 |     l.iter().cloned().zip(l + (l.len() - 1)).cloned().collect()\n  |\
    \                           - ^ ------------- usize\n  |                     \
    \      |\n  |                           Vec<isize>\n\nerror[E0271]: type mismatch\
    \ resolving `<Zip<Cloned<std::slice::Iter<'_, isize>>, _> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmpc6449esy.rs:7:46\n     |\n7    |     l.iter().cloned().zip(l\
    \ + (l.len() - 1)).cloned().collect()\n     |                                \
    \              ^^^^^^ expected reference, found tuple\n     |\n     = note: expected\
    \ reference `&_`\n                    found tuple `(_, _)`\nnote: required by\
    \ a bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct\
    \ `Cloned<Zip<Cloned<std::slice::Iter<'_, isize>>, _>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpc6449esy.rs:7:55\n   |\n7  |        l.iter().cloned().zip(l\
    \ + (l.len() - 1)).cloned().collect()\n   |                                  \
    \                        ^^^^^^^ method cannot be called on `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _> as Iterator>::Item = &_`\n           which is required by `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n           `Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n           which is required by `&mut Cloned<Zip<Cloned<std::slice::Iter<'_,\
    \ isize>>, _>>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0271, E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = l;\n    result.into_iter().for_each(|x| *x += 1);\n\
    \    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpsz4by2a4.rs:8:37\n\
    \  |\n8 |     result.into_iter().for_each(|x| *x += 1);\n  |                 \
    \                    ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().fold(vec![1], |mut acc, x| {\n        if acc.len() == 0\
    \ {\n            acc.push(x)\n        } else {\n            acc.push(x + acc[acc.len()\
    \ - 1])\n        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[]`', /tmp/tmpri59y3e_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().rev().fold(l, |mut l, x| {\n        if x == l.len() - 1 {\n\
    \            l.push(l.len() - 1);\n        } else {\n            l.push(x+1);\n\
    \        }\n        l\n    })\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuungx9vl.rs:8:17\n  |\n8 |\
    \         if x == l.len() - 1 {\n  |                 ^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: can't compare `&isize` with `usize`\n --> /tmp/tmpuungx9vl.rs:8:14\n\
    \  |\n8 |         if x == l.len() - 1 {\n  |              ^^ no implementation\
    \ for `&isize == usize`\n  |\n  = help: the trait `PartialEq<usize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpuungx9vl.rs:9:20\n  |\n\
    9 |             l.push(l.len() - 1);\n  |                    ^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |             l.push((l.len()\
    \ - 1).try_into().unwrap());\n  |                    +           +++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(0..l.len() - 1).map(|(a, b)| a + b).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb01b9r7r.rs:7:60\n  |\n7 |\
    \     l.iter().cloned().zip(0..l.len() - 1).map(|(a, b)| a + b).collect()\n  |\
    \                                                            ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n --> /tmp/tmpb01b9r7r.rs:7:58\n\
    \  |\n7 |     l.iter().cloned().zip(0..l.len() - 1).map(|(a, b)| a + b).collect()\n\
    \  |                                                          ^ no implementation\
    \ for `isize + usize`\n  |\n  = help: the trait `Add<usize>` is not implemented\
    \ for `isize`\n  = help: the following other types implement trait `Add<Rhs>`:\n\
    \            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n      \
    \      <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n          \
    \  <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a\
    \ i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    l.iter().cloned().map(|i|\
    \ i + 1).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable `sum` is assigned to, but never used\n --> /tmp/tmp8dysogk3.rs:7:13\n\
    \  |\n7 |     let mut sum = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_sum` instead\n\nerror[E0382]: borrow\
    \ of moved value: `l`\n   --> /tmp/tmp8dysogk3.rs:11:5\n    |\n6   | fn incr_list(l:\
    \ Vec<isize>) -> Vec<isize> {\n    |              - move occurs because `l` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n7   |     let\
    \ mut sum = 0;\n8   |     for i in l {\n    |              - `l` moved due to\
    \ this implicit call to `.into_iter()`\n...\n11  |     l.iter().cloned().map(|i|\
    \ i + 1).collect::<Vec<_>>()\n    |     ^^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `l`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n8   |     for i in &l {\n    |              +\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = l.iter().cloned().collect();\n    result.into_iter().for_each(|x|\
    \ *x = *x + 1);\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp1zam185j.rs:8:37\n\
    \  |\n8 |     result.into_iter().for_each(|x| *x = *x + 1);\n  |             \
    \                        ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \ --> /tmp/tmp1zam185j.rs:8:42\n  |\n8 |     result.into_iter().for_each(|x| *x\
    \ = *x + 1);\n  |                                          ^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut it = l.iter();\n    let mut acc = 0;\n    let mut i = 0;\n  \
    \  while i < it.len() {\n        let current = it.next().unwrap();\n        if\
    \ i == 0 {\n            acc++;\n        } else {\n            acc += current -\
    \ acc;\n        }\n        i += 1;\n    }\n    acc.into_iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmpq6x9elkn.rs:13:16\n\
    \   |\n13 |             acc++;\n   |                ^^ not a valid postfix operator\n\
    \   |\nhelp: use `+= 1` instead\n   |\n13 |             { let tmp = acc; acc +=\
    \ 1; tmp };\n   |             +++++++++++    ~~~~~~~~~~~~~~~~~\n13 -         \
    \    acc++;\n13 +             acc += 1;\n   | \n\nerror[E0599]: `isize` is not\
    \ an iterator\n  --> /tmp/tmpq6x9elkn.rs:19:9\n   |\n19 |     acc.into_iter().cloned().collect()\n\
    \   |         ^^^^^^^^^ `isize` is not an iterator\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `isize: Iterator`\n           which\
    \ is required by `isize: IntoIterator`\n           `&isize: Iterator`\n      \
    \     which is required by `&isize: IntoIterator`\n           `&mut isize: Iterator`\n\
    \           which is required by `&mut isize: IntoIterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    l.iter().cloned().for_each(|e| {\n        *e += 1;\n\
    \        i += 1;\n    });\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpfr_ugj8r.rs:9:9\n\
    \  |\n9 |         *e += 1;\n  |         ^^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    for i in l {\n        r.push(i + 1);\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n    v.into_iter().for_each(|x|\
    \ *x += 1);\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp2lsvmbgd.rs:8:32\n\
    \  |\n8 |     v.into_iter().for_each(|x| *x += 1);\n  |                      \
    \          ^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    if l.len() == 0 {\n        vec![0]\n    } else {\n        l.iter().cloned().zip(l.iter().cloned().skip(1)).map(|(v,\
    \ w)| v + w).collect()\n    }\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpdelxle6g.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = l;\n    for i in result.iter_mut() {\n        *i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut vec = vec![l.len()..0];\n    vec.into_iter().for_each(|i| vec.push(vec![i]\
    \ + 1));\n    vec\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Vec<std::ops::Range<usize>>`\n\
    \ --> /tmp/tmpv2g9dso3.rs:8:51\n  |\n8 |     vec.into_iter().for_each(|i| vec.push(vec![i]\
    \ + 1));\n  |                                           ------- ^ - {integer}\n\
    \  |                                           |\n  |                        \
    \                   Vec<std::ops::Range<usize>>\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpv2g9dso3.rs:9:5\n  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n  |                                ---------- expected `Vec<isize>` because\
    \ of return type\n...\n9 |     vec\n  |     ^^^ expected `isize`, found struct\
    \ `std::ops::Range`\n  |\n  = note: expected struct `Vec<isize>`\n           \
    \  found struct `Vec<std::ops::Range<usize>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().into_iter().map(|x| x + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = l.clone();\n    for i in result.into_iter().rev() {\n\
    \        result.push(i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `result`\n   --> /tmp/tmpnlrf95ng.rs:9:9\n\
    \    |\n7   |     let mut result = l.clone();\n    |         ---------- move occurs\
    \ because `result` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n8   |     for i in result.into_iter().rev() {\n    |                \
    \     ----------- `result` moved due to this method call\n9   |         result.push(i\
    \ + 1);\n    |         ^^^^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |\nnote: this function takes ownership of the receiver `self`, which moves `result`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    if l.len() < 2 {\n        return l;\n    }\n    let mut result = l;\n\
    \    let mut next_element = l[0];\n    for i in 1..l.len() {\n        if next_element\
    \ == i {\n            next_element += 1;\n        } else {\n            result.push(next_element);\n\
    \            next_element = i;\n        }\n    }\n    result.push(next_element);\n\
    \    result\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphw9qj06o.rs:13:28\n   |\n\
    13 |         if next_element == i {\n   |                            ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |         if next_element\
    \ == i.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphw9qj06o.rs:17:28\n   |\n11 |\
    \     let mut next_element = l[0];\n   |                            ---- expected\
    \ due to this value\n...\n17 |             next_element = i;\n   |           \
    \                 ^ expected `isize`, found `usize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(l + 1).collect::<Vec<_>>()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Vec<isize>`\n --> /tmp/tmpskzteh7y.rs:7:29\n\
    \  |\n7 |     l.iter().cloned().zip(l + 1).collect::<Vec<_>>()\n  |          \
    \                 - ^ - {integer}\n  |                           |\n  |      \
    \                     Vec<isize>\n\nerror[E0308]: mismatched types\n --> /tmp/tmpskzteh7y.rs:7:5\n\
    \  |\n6 | fn incr_list(l: Vec<isize>) -> Vec<isize> {\n  |                   \
    \             ---------- expected `Vec<isize>` because of return type\n7 |   \
    \  l.iter().cloned().zip(l + 1).collect::<Vec<_>>()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found tuple\n  |\n  = note: expected struct `Vec<isize>`\n\
    \             found struct `Vec<(isize, _)>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut s = l;\n    s.iter().cloned().for_each(|&x| {\n        x += 1;\n\
    \    });\n    s\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprc9q0sgu.rs:8:33\n  |\n8 |\
    \     s.iter().cloned().for_each(|&x| {\n  |                                 ^--\n\
    \  |                                 ||\n  |                                 |expected\
    \ due to this\n  |                                 expected `isize`, found reference\n\
    \  |                                 help: did you mean `x`: `&isize`\n  |\n \
    \ = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v: Vec<isize> = l.iter().cloned().collect();\n    v.iter_mut().for_each(|x|\
    \ *x += 1);\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(l.iter().cloned()).map(|(i, j)| i + j).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[6, 4, 2]`,\n right: `[4, 3, 2]`', /tmp/tmp3oh4qogz.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut vec = l;\n    for i in 1..vec.len() {\n        vec[i] = vec[i]\
    \ + 1;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = incr_list;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 3, 2]`,\n right: `[4, 3, 2]`', /tmp/tmppsf02d7d.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut rem = l;\n    let mut i = 1;\n    while rem != vec![] {\n   \
    \     rem = rem.iter().cloned().collect();\n        rem.iter().cloned().for_each(|x|\
    \ {\n            *x += i;\n            i += 1;\n        });\n    }\n    rem.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmptkq1yysh.rs:12:13\n\
    \   |\n12 |             *x += i;\n   |             ^^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for x in l {\n        result.push(*x +\
    \ 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp6jsq_7l1.rs:9:21\n\
    \  |\n9 |         result.push(*x + 1);\n  |                     ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|&i| i + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprnyupqg_.rs:7:24\n  |\n7 |\
    \     l.into_iter().map(|&i| i + 1).collect()\n  |                        ^--\n\
    \  |                        ||\n  |                        |expected due to this\n\
    \  |                        expected `isize`, found reference\n  |           \
    \             help: did you mean `i`: `&isize`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut accum = Vec::with_capacity(l.len());\n    for i in l {\n    \
    \    accum.append(i + 1);\n    }\n    accum\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp69i3_o9r.rs:9:22\n  |\n9 |\
    \         accum.append(i + 1);\n  |                      ^^^^^ expected `&mut\
    \ Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n\
    \                          found type `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().rev().map(|&x| x + 1).collect()\n}\n\nfn main() {\n   \
    \ let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuavg9o0o.rs:7:30\n  |\n7 |\
    \     l.into_iter().rev().map(|&x| x + 1).collect()\n  |                     \
    \         ^--\n  |                              ||\n  |                      \
    \        |expected due to this\n  |                              expected `isize`,\
    \ found reference\n  |                              help: did you mean `x`: `&isize`\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8f6dgrza.rs:7:24\n  |\n7 |\
    \     l.into_iter().map(|&x| x + 1).collect()\n  |                        ^--\n\
    \  |                        ||\n  |                        |expected due to this\n\
    \  |                        expected `isize`, found reference\n  |           \
    \             help: did you mean `x`: `&isize`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut i = 0;\n    let mut r = l;\n    for x in r.iter().cloned() {\n\
    \        *r += 1;\n        r[i] = *r;\n        i += 1;\n    }\n    r\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `[isize]`\n  --> /tmp/tmp9wrx3fo3.rs:10:9\n   |\n10 |         *r += 1;\n   |\
    \         --^^^^^\n   |         |\n   |         cannot use `+=` on type `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9wrx3fo3.rs:11:16\n   |\n11 |\
    \         r[i] = *r;\n   |         ----   ^^ expected `isize`, found slice `[isize]`\n\
    \   |         |\n   |         expected due to the type of this binding\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(l.iter().cloned().map(|&x| *x + 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxauqwegl.rs:7:50\n  |\n7 |\
    \     l.iter().cloned().zip(l.iter().cloned().map(|&x| *x + 1)).collect()\n  |\
    \                                                  ^--\n  |                  \
    \                                ||\n  |                                     \
    \             |expected due to this\n  |                                     \
    \             expected `isize`, found reference\n  |                         \
    \                         help: did you mean `x`: `&isize`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `(isize,\
    \ _)`\n    --> /tmp/tmpxauqwegl.rs:7:63\n     |\n7    |     l.iter().cloned().zip(l.iter().cloned().map(|&x|\
    \ *x + 1)).collect()\n     |                                                 \
    \              ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=(isize,\
    \ _)>`\n     |\n     = help: the trait `FromIterator<(isize, _)>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    incr_list_internal(l, 0)\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `incr_list_internal` in this scope\n\
    \ --> /tmp/tmp82uqnwrn.rs:7:5\n  |\n7 |     incr_list_internal(l, 0)\n  |    \
    \ ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut s = l.to_owned();\n    s.iter_mut().map(|x| *x += 1).collect();\n\
    \    s\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0283]: type annotations needed\n    --> /tmp/tmpv5az3hps.rs:8:35\n\
    \     |\n8    |     s.iter_mut().map(|x| *x += 1).collect();\n     |         \
    \                          ^^^^^^^ cannot infer type for type parameter `B` declared\
    \ on the associated function `collect`\n     |\n     = note: cannot satisfy `_:\
    \ FromIterator<()>`\nnote: required by a bound in `collect`\nhelp: consider specifying\
    \ the type argument in the method call\n     |\n8    |     s.iter_mut().map(|x|\
    \ *x += 1).collect::<B>();\n     |                                          +++++\n\
    help: consider specifying the type argument in the function call\n     |\n8  \
    \  |     s.iter_mut().map(|x| *x += 1).collect::<B>();\n     |               \
    \                           +++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = Vec::new();\n    r.extend_from_slice(l);\n    r.into_iter().map(|x|\
    \ *x + 1).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpquqcydbc.rs:8:25\n  |\n8 |\
    \     r.extend_from_slice(l);\n  |                         ^\n  |            \
    \             |\n  |                         expected `&[_]`, found struct `Vec`\n\
    \  |                         help: consider borrowing here: `&l`\n  |\n  = note:\
    \ expected reference `&[_]`\n                found struct `Vec<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut iter = l.iter();\n    iter.skip(1);\n    iter.fold1(|mut acc,\
    \ x| *acc += x)\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `fold1` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpj0y_14on.rs:9:10\n  |\n9 |     iter.fold1(|mut\
    \ acc, x| *acc += x)\n  |          ^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.iter().cloned().zip(incr(&mut Vec::new()))\n        .map(|(z, x)| z\
    \ + x).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `incr` in this scope\n --> /tmp/tmpm_91k9xw.rs:7:27\n\
    \  |\n7 |     l.iter().cloned().zip(incr(&mut Vec::new()))\n  |              \
    \             ^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().cloned().into_iter().map(|i| i + 1).collect()\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpgcqamuij.rs:7:19\n     |\n7    |     l.into_iter().cloned().into_iter().map(|i|\
    \ i + 1).collect()\n     |                   ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: `Cloned<std::vec::IntoIter<isize>>`\
    \ is not an iterator\n  --> /tmp/tmpgcqamuij.rs:7:28\n   |\n7  |       l.into_iter().cloned().into_iter().map(|i|\
    \ i + 1).collect()\n   |                              ^^^^^^^^^ `Cloned<std::vec::IntoIter<isize>>`\
    \ is not an iterator\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `Cloned<std::vec::IntoIter<isize>>: IntoIterator`\n           `&Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&Cloned<std::vec::IntoIter<isize>>:\
    \ IntoIterator`\n           `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           which is required by `&mut Cloned<std::vec::IntoIter<isize>>: IntoIterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 101
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    if l.len() < 1 {\n        return l;\n    }\n\n    let mut new_list: Vec<isize>\
    \ = l.to_vec();\n    new_list.push(*l.last().unwrap() + 1);\n    new_list\n}\n\
    \nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 2]`,\n right: `[4, 3, 2]`', /tmp/tmpj9nb0zs7.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = l.to_owned();\n    for elt in &mut r {\n        elt += 1;\n\
    \    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&mut isize`\n --> /tmp/tmp8d_wchi5.rs:9:9\n  |\n9 |         elt += 1;\n  |\
    \         ---^^^^^\n  |         |\n  |         cannot use `+=` on type `&mut isize`\n\
    \  |\nhelp: `+=` can be used on `isize`, you can dereference `elt`\n  |\n9 | \
    \        *elt += 1;\n  |         +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "/// Return vector with elements incremented by 1.\n/// >>> incr_list(vec![1,\
    \ 2, 3])\n/// vec![2, 3, 4]\n/// >>> incr_list(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    /// vec![6, 4, 6, 3, 4, 4, 10, 1, 124]\nfn incr_list(l: Vec<isize>) -> Vec<isize>\
    \ {\n    l.into_iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976089
