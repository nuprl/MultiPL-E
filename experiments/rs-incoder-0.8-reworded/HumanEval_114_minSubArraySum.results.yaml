language: rs
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n\n    for num in\
    \ nums.iter() {\n        if min_sum > num {\n            min_sum = num;\n    \
    \    } else {\n            min_sum -= num;\n        }\n    }\n\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp06pcklr5.rs:12:22\n   |\n\
    12 |         if min_sum > num {\n   |                      ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \       if min_sum > *num {\n   |                      +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp06pcklr5.rs:13:23\n   |\n9  |     let mut min_sum = isize::MAX;\n\
    \   |                       ---------- expected due to this value\n...\n13 | \
    \            min_sum = num;\n   |                       ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           min_sum = *num;\n   |                       +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0] as isize;\n    let mut\
    \ prev_sum = nums[0] as isize;\n    let mut min_i = 1;\n    let mut min_j = 1;\n\
    \    let mut i = 1;\n    let mut j = 1;\n    let mut len = nums.len();\n    while\
    \ j < len {\n        // Check if the sum of the current and previous elements\
    \ is less than the current minimum\n        if prev_sum < min_sum {\n        \
    \    min_sum = prev_sum;\n            min_i = i;\n            min_j = j;\n   \
    \     }\n        // If the current sum is less than the minimum, update it\n \
    \       if min_sum > nums[j] {\n            min_sum = nums[j];\n            min_i\
    \ = i;\n            min_j = j;\n        }\n        // Go to the next element in\
    \ the array\n        i += 1;\n        j += 1;\n    }\n    // Return the minimum\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp4cg99gqg.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .filter(|&x| x >\
    \ 0)\n        .cloned()\n        .fold((0, 0), |(min_sum, cur), cur| {\n     \
    \       let new_sum = cur + min_sum;\n            (new_sum, new_sum)\n       \
    \ })\n        .1\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `cur` is bound more than once in this parameter\
    \ list\n  --> /tmp/tmpfkm3pyjt.rs:13:40\n   |\n13 |         .fold((0, 0), |(min_sum,\
    \ cur), cur| {\n   |                                        ^^^ used as parameter\
    \ more than once\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfkm3pyjt.rs:11:26\n\
    \   |\n11 |         .filter(|&x| x > 0)\n   |                          ^\n   |\
    \                          |\n   |                          expected `&isize`,\
    \ found integer\n   |                          help: consider borrowing here:\
    \ `&0`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0415.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut ans = nums.iter().cloned().collect::<Vec<_>>();\n\
    \    ans.sort();\n    let mut min = ans.iter().next().unwrap();\n    for v in\
    \ ans {\n        if v < min {\n            min = v;\n        }\n    }\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpugsnvqf4.rs:13:16\n   |\n\
    13 |         if v < min {\n   |                ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         if v < *min\
    \ {\n   |                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugsnvqf4.rs:14:19\n\
    \   |\n11 |     let mut min = ans.iter().next().unwrap();\n   |              \
    \     -------------------------- expected due to this value\n...\n14 |       \
    \      min = v;\n   |                   ^\n   |                   |\n   |    \
    \               expected `&isize`, found `isize`\n   |                   help:\
    \ consider borrowing here: `&v`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugsnvqf4.rs:17:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .fold::<isize>(0)(|m,\
    \ &x| {\n            if *m > x {\n                *m = x;\n                *m;\n\
    \            }\n        })\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0107]: this associated function takes 2 generic arguments but 1\
    \ generic argument was supplied\n  --> /tmp/tmpc10yngpy.rs:11:10\n   |\n11 | \
    \        .fold::<isize>(0)(|m, &x| {\n   |          ^^^^   ----- supplied 1 generic\
    \ argument\n   |          |\n   |          expected 2 generic arguments\n   |\n\
    help: add missing generic argument\n   |\n11 |         .fold::<isize, F>(0)(|m,\
    \ &x| {\n   |                      +++\n\nerror[E0061]: this function takes 2\
    \ arguments but 1 argument was supplied\n    --> /tmp/tmpc10yngpy.rs:11:10\n \
    \    |\n11   |         .fold::<isize>(0)(|m, &x| {\n     |          ^^^^     \
    \     - supplied 1 argument\n     |          |\n     |          expected 2 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0618]: expected function,\
    \ found `isize`\n  --> /tmp/tmpc10yngpy.rs:9:5\n   |\n9  |        nums\n   | \
    \  _____^\n   |  |_____|\n   | ||\n10 | ||         .iter()\n11 | ||         .fold::<isize>(0)(|m,\
    \ &x| {\n   | ||_________________________^\n12 | |              if *m > x {\n\
    ...  |\n15 | |              }\n16 | |          })\n   | |___________- call expression\
    \ requires function\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0107, E0618.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = nums[0];\n\
    \    for n in nums.iter().skip(1) {\n        if n < 0 {\n            return sum;\n\
    \        }\n        sum += n;\n        min_sum = min(min_sum, n);\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpyi66u3mp.rs:16:19\n\
    \   |\n16 |         min_sum = min(min_sum, n);\n   |                   ^^^\n...\n\
    21 | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n16 |         min_sum\
    \ = main(min_sum, n);\n   |                   ~~~~\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyi66u3mp.rs:12:16\n   |\n12 |         if n < 0 {\n   |        \
    \        ^\n   |                |\n   |                expected `&isize`, found\
    \ integer\n   |                help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .fold(0, |sum, e|\
    \ sum + e)\n        .iter()\n        .fold(0, |acc, i| acc + i)\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6opxe8nk.rs:12:10\n   |\n12 |         .iter()\n   |   \
    \       ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = i32::MAX;\n    let mut min_index\
    \ = Vec::with_capacity(nums.len());\n\n    for (i, &x) in nums.iter().enumerate()\
    \ {\n        min_index.push(i);\n        min_sum = min_sum.min(&x);\n    }\n\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpizkhackr.rs:14:31\n   |\n\
    14 |         min_sum = min_sum.min(&x);\n   |                               ^^\
    \ expected `i32`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpizkhackr.rs:17:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    17 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_so_far = nums[0];\n    for &num in nums.iter().rev()\
    \ {\n        min_so_far = if num < min_so_far {\n            num\n        } else\
    \ {\n            min_so_far + num\n        }\n    }\n    min_so_far\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp23r_risr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().windows(3).fold(0, |mut sum, i| {\n\
    \        sum += *i;\n        sum\n    })\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpoqqnrszu.rs:9:17\n  |\n9 |     nums.iter().windows(3).fold(0,\
    \ |mut sum, i| {\n  |                 ^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n\
    \n    let mut min_sum: isize = 0;\n    let mut min_pos = 0;\n\n    for mut pos\
    \ in 0..nums.len() {\n        min_sum += nums[pos];\n        let mut min = pos;\n\
    \        for index in pos..nums.len() {\n            let sum = nums[index];\n\
    \            if sum < min_sum {\n                min = index;\n            }\n\
    \        }\n        min_pos = min as usize;\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpj8zimm8q.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .enumerate()\n  \
    \      .filter(|(_, v)| v.is_some())\n        .map(|(_, v)| v.unwrap())\n    \
    \    .enumerate()\n        .map(|(i, _)| min(i * v + i, v * (i + 1)))\n      \
    \  .min()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqm5p1z6.rs:15:23\n\
    \   |\n15 |         .map(|(i, _)| min(i * v + i, v * (i + 1)))\n   |         \
    \              ^^^\n...\n19 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    15 |         .map(|(i, _)| main(i * v + i, v * (i + 1)))\n   |               \
    \        ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror[E0425]: cannot find value `v` in this scope\n  --> /tmp/tmpdqm5p1z6.rs:15:31\n\
    \   |\n15 |         .map(|(i, _)| min(i * v + i, v * (i + 1)))\n   |         \
    \                      ^ help: a local variable with a similar name exists: `i`\n\
    \nerror[E0425]: cannot find value `v` in this scope\n  --> /tmp/tmpdqm5p1z6.rs:15:38\n\
    \   |\n15 |         .map(|(i, _)| min(i * v + i, v * (i + 1)))\n   |         \
    \                             ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0599]: no method named `is_some` found for reference `&&isize`\
    \ in the current scope\n  --> /tmp/tmpdqm5p1z6.rs:12:28\n   |\n12 |         .filter(|(_,\
    \ v)| v.is_some())\n   |                            ^^^^^^^ method not found in\
    \ `&&isize`\n\nerror[E0599]: no method named `unwrap` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmpdqm5p1z6.rs:13:25\n   |\n13 |         .map(|(_,\
    \ v)| v.unwrap())\n   |                         ^^^^^^ method not found in `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdqm5p1z6.rs:9:5\n   |\n8  |  \
    \ fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                       \
    \                   ----- expected `isize` because of return type\n9  | /    \
    \ nums\n10 | |         .iter()\n11 | |         .enumerate()\n12 | |         .filter(|(_,\
    \ v)| v.is_some())\n...  |\n15 | |         .map(|(i, _)| min(i * v + i, v * (i\
    \ + 1)))\n16 | |         .min()\n   | |______________^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<_>`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed expl"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut subsum = 0;\n    let mut min_sum = -std::isize::MAX;\n\
    \n    for i in 0..nums.len() {\n        for j in 0..nums.len() {\n           \
    \ subsum += nums[j];\n            if subsum > min_sum {\n                min_sum\
    \ = subsum;\n            }\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `96`,\n right: `1`', /tmp/tmp6_urlf35.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min: isize = 0;\n    for &n in &nums {\n\
    \        if n < 0 {\n            min = n;\n            continue;\n        }\n\
    \        let mut sum_of_elements = 0;\n        for &v in nums.iter() {\n     \
    \       if v < n {\n                break;\n            }\n            sum_of_elements\
    \ += v;\n        }\n        min = if sum_of_elements > min { sum_of_elements }\
    \ else { min };\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp3nvgl2kq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0] as isize;\n    for ele\
    \ in nums.iter().rev() {\n        min_sum = ele if min_sum > ele + min_sum else\
    \ min_sum;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmpsufw26ts.rs:11:23\n   |\n11 |         min_sum\
    \ = ele if min_sum > ele + min_sum else min_sum;\n   |                       ^^\
    \ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut minSum = nums[0] as isize;\n    for i in 1..nums.len() {\n     \
    \   let curSum = minSum + nums[i];\n        minSum = curSum;\n    }\n    minSum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpuho0ns1c.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    for i in 1..nums.len()\
    \ {\n        min_sum = min(min_sum, nums[i] + min_sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpf2aom7rk.rs:11:19\n\
    \   |\n11 |         min_sum = min(min_sum, nums[i] + min_sum);\n   |         \
    \          ^^^\n...\n16 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    11 |         min_sum = main(min_sum, nums[i] + min_sum);\n   |               \
    \    ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut res = nums[0];\n    for i in 1..nums.len()\
    \ {\n        res = min(res, nums[i] + minSubArraySum(&nums[i..i + 1]));\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpndebdbks.rs:11:15\n\
    \   |\n11 |         res = min(res, nums[i] + minSubArraySum(&nums[i..i + 1]));\n\
    \   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n11 |         res = main(res, nums[i] + minSubArraySum(&nums[i..i + 1]));\n\
    \   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use\
    \ std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpndebdbks.rs:11:49\n\
    \   |\n11 |         res = min(res, nums[i] + minSubArraySum(&nums[i..i + 1]));\n\
    \   |                                                 ^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found reference `&[isize]`\nhelp: try using a conversion method\n\
    \   |\n11 |         res = min(res, nums[i] + minSubArraySum((&nums[i..i + 1]).to_vec()));\n\
    \   |                                                 +               ++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum: isize = 0;\n    let mut cur_pos = 0;\n    let mut cur_min =\
    \ nums[0];\n    for &i in nums.iter().rev() {\n        if cur_pos == i {\n   \
    \         sum += cur_min;\n            cur_pos = 0;\n            cur_min = nums[0];\n\
    \        }\n        cur_pos += i;\n        cur_min = min(cur_min, i);\n    }\n\
    \    sum += cur_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpl_9tu0o5.rs:22:19\n\
    \   |\n22 |         cur_min = min(cur_min, i);\n   |                   ^^^\n...\n\
    27 | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n22 |         cur_min\
    \ = main(cur_min, i);\n   |                   ~~~~\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl_9tu0o5.rs:24:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n24 |     sum += cur_min\n   |     ^^^^^^^^^^^^^^\
    \ expected `isize`, found `()`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    match nums.len() {\n        0 => 0,\n        _ =>\
    \ minSubArraySumHelper(vec![nums[0]], nums)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `minSubArraySumHelper` in this scope\n\
    \  --> /tmp/tmprvh3n0kb.rs:11:14\n   |\n11 |         _ => minSubArraySumHelper(vec![nums[0]],\
    \ nums)\n   |              ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0] as isize;\n    let mut s =\
    \ nums[0] as isize;\n    for &i in nums.iter().skip(1) {\n        s = s + i;\n\
    \        if s < min {\n            min = s;\n        }\n    }\n    min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp07rfqe7k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = vec![nums[0]; nums.len()];\n    let\
    \ mut max = vec![nums[0]; nums.len()];\n\n    for &i in 0..nums.len() {\n    \
    \    for &j in 0..nums.len() {\n            if nums[j] - nums[i] + min[j] < min[i]\
    \ {\n                min[i] = nums[j] - nums[i] + min[j];\n            }\n   \
    \         if nums[j] - nums[i] + max[j] > max[i] {\n                max[i] = nums[j]\
    \ - nums[i] + max[j];\n            }\n        }\n    }\n\n    match nums.iter().cloned()\
    \ {\n        vec![0; nums.len() - 1] => {\n            for i in 0..nums.len()\
    \ {\n                min[i] = min[i] as isize;\n                max[i] = max[i]\
    \ as isize;\n            }\n        }\n        _ => panic!(\"Invalid input\"),\n\
    \    }\n    (min.iter().sum(), max.iter().sum())\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: arbitrary expressions aren't allowed in patterns\n  --> /tmp/tmpfai3p4zm.rs:24:9\n\
    \   |\n24 |         vec![0; nums.len() - 1] => {\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfai3p4zm.rs:12:9\n   |\n12 |     for &i in 0..nums.len() {\n  \
    \ |         ^^    ------------- this expression has type `Option<usize>`\n   |\
    \         |\n   |         expected `usize`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `usize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfai3p4zm.rs:13:13\n   |\n13 |         for &j in 0..nums.len() {\n\
    \   |             ^^    ------------- this expression has type `Option<usize>`\n\
    \   |             |\n   |             expected `usize`, found reference\n   |\
    \             help: you can probably remove the explicit borrow: `j`\n   |\n \
    \  = note:   expected type `usize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfai3p4zm.rs:32:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n32 |     (min.iter().sum(), max.iter().sum())\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n\
    \   |\n   = note: expected type `isize`\n             found tuple `(_, _)`\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n\
    \    let mut min_sum = nums[0] as isize;\n    let mut min_range = vec![0; nums.len()].iter().rev();\n\
    \    min_range.for_each(|i| {\n        min_sum = if i >= 0 && i + nums[i] < min_sum\
    \ {\n            i + nums[i]\n        } else {\n            min_sum\n        };\n\
    \    });\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjbc_eqhg.rs:15:27\n   |\n\
    15 |         min_sum = if i >= 0 && i + nums[i] < min_sum {\n   |            \
    \               ^\n   |                           |\n   |                    \
    \       expected reference, found integer\n   |                           help:\
    \ consider borrowing here: `&0`\n   |\n   = note: expected reference `&_`\n  \
    \                 found type `{integer}`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `&{integer}`\n  --> /tmp/tmpjbc_eqhg.rs:15:36\n   |\n15 |    \
    \     min_sum = if i >= 0 && i + nums[i] < min_sum {\n   |                   \
    \                 ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&{integer}`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&{integer}>` for\
    \ `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&{integer}`\n\
    \  --> /tmp/tmpjbc_eqhg.rs:16:17\n   |\n16 |             i + nums[i]\n   |   \
    \              ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&{integer}`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&{integer}>` for\
    \ `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976656
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for &n in nums.iter()\
    \ {\n        if n < 0 {\n            min += -min;\n        } else {\n        \
    \    min = min - n;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775791`,\n right: `1`', /tmp/tmpuyfmei1_.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter()\n        .enumerate()\n        .map(|(idx,\
    \ x)| {\n            if idx > 0 && x - nums[idx-1] < 0 {\n                x -\
    \ nums[idx-1]\n            } else {\n                x\n            }\n      \
    \  })\n        .min()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpnswqjd1e.rs:15:17\n\
    \   |\n12 | /             if idx > 0 && x - nums[idx-1] < 0 {\n13 | |        \
    \         x - nums[idx-1]\n   | |                 --------------- expected because\
    \ of this\n14 | |             } else {\n15 | |                 x\n   | |     \
    \            ^ expected `isize`, found `&isize`\n16 | |             }\n   | |_____________-\
    \ `if` and `else` have incompatible types\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |                 *x\n   |                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnswqjd1e.rs:9:5\n   |\n8  |   fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                          -----\
    \ expected `isize` because of return type\n9  | /     nums.iter()\n10 | |    \
    \     .enumerate()\n11 | |         .map(|(idx, x)| {\n12 | |             if idx\
    \ > 0 && x - nums[idx-1] < 0 {\n...  |\n17 | |         })\n18 | |         .min()\n\
    \   | |______________^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = i32::MAX;\n    for i in 0..nums.len()\
    \ {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += nums[j];\n\
    \        }\n        if sum < min {\n            min = sum;\n        }\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd6epl07h.rs:15:18\n   |\n\
    15 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |         if sum < min.try_into().unwrap() {\n \
    \  |                     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd6epl07h.rs:16:19\n   |\n9  |     let mut min = i32::MAX;\n   |\
    \                   -------- expected due to this value\n...\n16 |           \
    \  min = sum;\n   |                   ^^^ expected `i32`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd6epl07h.rs:19:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n19 |     min\n   |     ^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n19 |     min.try_into().unwrap()\n  \
    \ |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_so_far = i32::MIN;\n    for i in 1..nums.len()\
    \ {\n        let mut so_far = i32::MIN;\n        for j in i..nums.len() {\n  \
    \          so_far += nums[j];\n            if so_far < min_so_far {\n        \
    \        min_so_far = so_far;\n            }\n        }\n    }\n    min_so_far\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1fm2is_s.rs:13:23\n   |\n\
    13 |             so_far += nums[j];\n   |                       ^^^^^^^ expected\
    \ `i32`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `i32`\n \
    \ --> /tmp/tmp1fm2is_s.rs:13:20\n   |\n13 |             so_far += nums[j];\n \
    \  |                    ^^ no implementation for `i32 += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `i32`\n   = help: the following\
    \ other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n\
    \             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n    \
    \         <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n      \
    \       <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n         \
    \    <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fm2is_s.rs:19:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n19 |     min_so_far\n   |     ^^^^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n19 |     min_so_far.try_into().unwrap()\n\
    \   |               ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Find smallest number\n    let mut smallest =\
    \ nums.iter().min_by_key(|x| x).unwrap();\n    // Find smallest number with sum\
    \ zero\n    for i in &nums {\n        if i > 0 {\n            smallest = i if\
    \ smallest < i else smallest;\n        }\n    }\n    smallest\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmp1j0th118.rs:14:26\n   |\n14 |            \
    \ smallest = i if smallest < i else smallest;\n   |                          ^^\
    \ expected one of 8 possible tokens\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1j0th118.rs:13:16\n\
    \   |\n13 |         if i > 0 {\n   |                ^\n   |                |\n\
    \   |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1j0th118.rs:17:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    17 |     smallest\n   |     ^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n17 |     *smallest\n   |     +\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut s = nums[0];\n    for &n in nums[1..] {\n\
    \        if n >= s {\n            s += n;\n        } else {\n            s = n;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp_a0lvhkx.rs:10:15\n   |\n10 |     for &n in\
    \ nums[1..] {\n   |               ^^^^^^^^^ expected an implementor of trait `IntoIterator`\n\
    \   |\n   = note: the trait bound `[isize]: IntoIterator` is not satisfied\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `[isize]`\nhelp: consider borrowing here\n   |\n10 |     for &n in &nums[1..]\
    \ {\n   |               +\n10 |     for &n in &mut nums[1..] {\n   |         \
    \      ++++\n\nerror[E0277]: `[isize]` is not an iterator\n  --> /tmp/tmp_a0lvhkx.rs:10:15\n\
    \   |\n10 |     for &n in nums[1..] {\n   |               ^^^^^^^^^ expected an\
    \ implementor of trait `IntoIterator`\n   |\n   = note: the trait bound `[isize]:\
    \ IntoIterator` is not satisfied\n   = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `[isize]`\nhelp: consider borrowing here\n\
    \   |\n10 |     for &n in &nums[1..] {\n   |               +\n10 |     for &n\
    \ in &mut nums[1..] {\n   |               ++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold(isize::max_value(), |min, x| {\n\
    \        if x <= min {\n            x = min;\n        }\n        min\n    })\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkvwzm26x.rs:10:17\n   |\n\
    10 |         if x <= min {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found `isize`\n   |                 help:\
    \ consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkvwzm26x.rs:11:17\n\
    \   |\n9  |     nums.iter().fold(isize::max_value(), |min, x| {\n   |        \
    \                                        - expected due to this parameter type\n\
    10 |         if x <= min {\n11 |             x = min;\n   |                 ^^^\n\
    \   |                 |\n   |                 expected `&isize`, found `isize`\n\
    \   |                 help: consider borrowing here: `&min`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    for i in nums.iter()\
    \ {\n        min = std::min::min(min, i);\n    }\n    min\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: could not find `min` in `std`\n  --> /tmp/tmpptbw9mgv.rs:11:20\n\
    \   |\n11 |         min = std::min::min(min, i);\n   |                    ^^^\
    \ could not find `min` in `std`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptbw9mgv.rs:13:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     min\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().cloned().filter(|&x| x > 0).min().unwrap_or(0)\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `-6`', /tmp/tmpomw6jrz8.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Initialize answer to Infinity so we don't need\
    \ to check against it later\n    let mut ans = std::isize::MAX;\n\n    // Keep\
    \ track of min sub array sums across all elements of nums\n    // If current sub\
    \ array sum is less than the current minimum, update ans\n    for (i, &elt) in\
    \ nums.iter().enumerate() {\n        // Initialize min sub array sum across all\
    \ elements\n        let mut min = std::isize::MAX;\n\n        // Keep track of\
    \ smallest sub array sum across all elements of nums\n        // If current sub\
    \ array sum is less than the current minimum, update ans\n        for j (i, &elt)\
    \ in nums.iter().enumerate() {\n            if j == i {\n                continue;\n\
    \            }\n\n            // If current sub array sum is less than the current\
    \ minimum, update ans\n            if elt < nums[j] {\n                min = std::isize::MAX;\n\
    \            }\n\n            // If current sub array sum is greater than the\
    \ current minimum, update ans\n            if elt > nums[j] {\n              \
    \  min = std::cmp::min(min, std::cmp::min(elt, nums[j]));\n            }\n   \
    \     }\n\n        // Update ans\n        if min < std::isize::MAX {\n       \
    \     ans = std::cmp::max(ans, min);\n        }\n    }\n\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0531]: cannot find tuple struct or tuple variant `j` in this scope\n\
    \  --> /tmp/tmpsktl9er9.rs:20:13\n   |\n20 |         for j (i, &elt) in nums.iter().enumerate()\
    \ {\n   |             ^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `j` in this scope\n  --> /tmp/tmpsktl9er9.rs:21:16\n   |\n21 |             if\
    \ j == i {\n   |                ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmpsktl9er9.rs:26:27\n\
    \   |\n26 |             if elt < nums[j] {\n   |                           ^ help:\
    \ a local variable with a similar name exists: `i`\n\nerror[E0425]: cannot find\
    \ value `j` in this scope\n  --> /tmp/tmpsktl9er9.rs:31:27\n   |\n31 |       \
    \      if elt > nums[j] {\n   |                           ^ help: a local variable\
    \ with a similar name exists: `i`\n\nerror[E0425]: cannot find value `j` in this\
    \ scope\n  --> /tmp/tmpsktl9er9.rs:32:66\n   |\n32 |                 min = std::cmp::min(min,\
    \ std::cmp::min(elt, nums[j]));\n   |                                        \
    \                          ^ help: a local variable with a similar name exists:\
    \ `i`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0531.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut mins = nums.clone();\n    mins.sort_unstable();\n\
    \    for i in mins.iter().skip(1) {\n        let mut j = i;\n        let mut sum\
    \ = 1;\n        for j in mins.iter().rev() {\n            if *j > i {\n      \
    \          break;\n            }\n            sum += *j;\n        }\n        if\
    \ sum < i {\n            *j -= sum;\n        }\n    }\n    (*mins.iter().rev().sum())\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmp_gsggvxs.rs:24:5\n\
    \   |\n24 |     (*mins.iter().rev().sum())\n   |     ^                       \
    \ ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these\
    \ parentheses\n   |\n24 -     (*mins.iter().rev().sum())\n24 +     *mins.iter().rev().sum()\n\
    \   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_gsggvxs.rs:15:21\n  \
    \ |\n15 |             if *j > i {\n   |                     ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \           if *j > *i {\n   |                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_gsggvxs.rs:20:18\n   |\n20 |         if sum < i {\n  \
    \ |                  ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |         if sum < *i {\n   |           \
    \       +\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Find minimum sum of subarray\n    // We use prefix\
    \ sums so that we can skip checking first element\n    let mut min: isize = nums[0]\
    \ as isize;\n    for x in nums.iter().rev() {\n        if x < min {\n        \
    \    min = x;\n        }\n    }\n\n    // If subarray starts with minimum, just\
    \ use the minimum\n    // We could improve this by checking the first element\
    \ and skipping some number of elements\n    if min == nums[0] {\n        return\
    \ min;\n    }\n\n    // Iterate over numbers in reverse order and find minimum\
    \ sum of subarray\n    // Start with the first element and add the previous minimum\
    \ to the next element in the vector\n    let mut curr_min = nums[0];\n    for\
    \ x in nums.iter().rev() {\n        let mut curr_sum = curr_min + x;\n       \
    \ if curr_sum < min {\n            min = curr_sum;\n        }\n        curr_min\
    \ = x;\n    }\n\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp36e7pt7w.rs:13:16\n   |\n\
    13 |         if x < min {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp36e7pt7w.rs:14:19\n\
    \   |\n11 |     let mut min: isize = nums[0] as isize;\n   |                 \
    \ ----- expected due to this type\n...\n14 |             min = x;\n   |      \
    \             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |             min = *x;\n   |                   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp36e7pt7w.rs:32:20\n   |\n26 |     let mut curr_min\
    \ = nums[0];\n   |                        ------- expected due to this value\n\
    ...\n32 |         curr_min = x;\n   |                    ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n32 |        \
    \ curr_min = *x;\n   |                    +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum: isize = nums.iter().fold(0, |sum,\
    \ i| {\n        if *sum > i {\n            *sum\n        } else {\n          \
    \  *sum += *i;\n            i as isize\n        }\n    });\n    let mut nums_iter\
    \ = nums.iter().cloned();\n    for e in nums_iter.rev().take(min_sum as usize)\
    \ {\n        *min_sum -= *e;\n        if *min_sum < 0 {\n            *min_sum\
    \ = 0;\n            break;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpc067d0cz.rs:10:12\n\
    \   |\n10 |         if *sum > i {\n   |            ^^^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpc067d0cz.rs:11:13\n   |\n11 |\
    \             *sum\n   |             ^^^^\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpc067d0cz.rs:13:13\n   |\n13 |             *sum\
    \ += *i;\n   |             ^^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpc067d0cz.rs:19:9\n   |\n19 |         *min_sum -= *e;\n   |    \
    \     ^^^^^^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpc067d0cz.rs:19:21\n\
    \   |\n19 |         *min_sum -= *e;\n   |                     ^^\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpc067d0cz.rs:20:12\n   |\n\
    20 |         if *min_sum < 0 {\n   |            ^^^^^^^^\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmpc067d0cz.rs:21:13\n   |\n21 |\
    \             *min_sum = 0;\n   |             ^^^^^^^^\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmpc067d0cz.rs:14:13\n   |\n14 |\
    \             i as isize\n   |             -^^^^^^^^^\n   |             |\n  \
    \ |             cannot cast `&isize` as `isize`\n   |             help: dereference\
    \ the expression: `*i`\n\nerror: aborting due to 8 previous errors\n\nSome errors\
    \ have detailed explanations: E0606, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0606`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Initialize min with first element of nums\n \
    \   let mut min_ = nums.first().unwrap();\n    // Find the minimum sum of the\
    \ rest of nums\n    for i in 1..nums.len() {\n        let mut curr_ = min_;\n\
    \        // Iterate through nums starting from ith element\n        for j in 0..i\
    \ {\n            curr_ += nums[j];\n        }\n        min_ = curr_;\n    }\n\
    \    min_\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmpslnb14ym.rs:16:13\n   |\n16 |             curr_ += nums[j];\n\
    \   |             -----^^^^^^^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `&isize`\n   |\nhelp: `+=` can be used on `isize`, you can\
    \ dereference `curr_`\n   |\n16 |             *curr_ += nums[j];\n   |       \
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpslnb14ym.rs:20:5\n \
    \  |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |              \
    \                          ----- expected `isize` because of return type\n...\n\
    20 |     min_\n   |     ^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |     *min_\n   |     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    if nums.len() == 1 {\n        return nums[0];\n    }\n    let mut left =\
    \ nums[0];\n    let mut right = nums[0];\n    for i in 1..nums.len() {\n     \
    \   left = std::min(left, nums[i]);\n        right = std::max(right, nums[i]);\n\
    \    }\n    left + right\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in crate `std`\n  --> /tmp/tmp7o439mzo.rs:18:21\n\
    \   |\n18 |         left = std::min(left, nums[i]);\n   |                    \
    \ ^^^ not found in `std`\n   |\nhelp: consider importing this function\n   |\n\
    1  | use std::cmp::min;\n   |\nhelp: if you import `min`, refer to it directly\n\
    \   |\n18 -         left = std::min(left, nums[i]);\n18 +         left = min(left,\
    \ nums[i]);\n   | \n\nerror[E0425]: cannot find function `max` in crate `std`\n\
    \  --> /tmp/tmp7o439mzo.rs:19:22\n   |\n19 |         right = std::max(right, nums[i]);\n\
    \   |                      ^^^ not found in `std`\n   |\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::max;\n   |\nhelp: if you import `max`,\
    \ refer to it directly\n   |\n19 -         right = std::max(right, nums[i]);\n\
    19 +         right = max(right, nums[i]);\n   | \n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().map(|x| x + 1).min(|a, b| a.partial_cmp(b))\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp5bevexdr.rs:9:37\n\
    \  |\n9 |     nums.iter().map(|x| x + 1).min(|a, b| a.partial_cmp(b))\n  |   \
    \                                  ^ consider giving this closure parameter a\
    \ type\n  |\n  = note: type must be known at this point\n\nerror[E0061]: this\
    \ function takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp5bevexdr.rs:9:32\n\
    \     |\n9    |     nums.iter().map(|x| x + 1).min(|a, b| a.partial_cmp(b))\n\
    \     |                                ^^^ ----------------------- supplied 1\
    \ argument\n     |                                |\n     |                  \
    \              expected 0 arguments\n     |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5bevexdr.rs:9:5\n  |\n\
    8 | fn minSubArraySum(nums: Vec<isize>) -> isize {\n  |                      \
    \                  ----- expected `isize` because of return type\n9 |     nums.iter().map(|x|\
    \ x + 1).min(|a, b| a.partial_cmp(b))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0282, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut res = vec![0];\n    let mut sum = 0;\n \
    \   let mut left = -1;\n    let mut right = 0;\n\n    for i in 0..nums.len() {\n\
    \        if i == 0 {\n            sum += nums[i];\n        } else {\n        \
    \    if nums[i] < nums[left] {\n                sum += nums[i];\n            \
    \    left = i;\n            } else {\n                sum += nums[left];\n   \
    \             right = i;\n            }\n        }\n    }\n\n    for i in 0..(right\
    \ - left) {\n        res.push(sum);\n        sum -= nums[left + i];\n    }\n\n\
    \    res.min_by_key(|x| x.unwrap())\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpo4uq4lcs.rs:11:20\n\
    \   |\n11 |     let mut left = -1;\n   |                    ^^ the trait `Neg`\
    \ is not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmpo4uq4lcs.rs:33:9\n    |\n33  |       res.min_by_key(|x|\
    \ x.unwrap())\n    |           ^^^^^^^^^^ `Vec<isize>` is not an iterator\n  \
    \  |\n    = note: the following trait bounds were not satisfied:\n           \
    \ `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n\
    \            `[isize]: Iterator`\n            which is required by `&mut [isize]:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut curr_min = nums.iter().min().unwrap();\n\
    \    for i in nums.iter().skip(1) {\n        curr_min = min(curr_min, i + curr_min);\n\
    \    }\n    curr_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpeasbdg1q.rs:11:20\n\
    \   |\n11 |         curr_min = min(curr_min, i + curr_min);\n   |            \
    \        ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |\
    \         curr_min = main(curr_min, i + curr_min);\n   |                    ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpeasbdg1q.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     curr_min\n\
    \   |     ^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *curr_min\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .chunks(4)\n        .map(|v| v.iter().sum::<isize>().unwrap())\n\
    \        .min().unwrap()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpepdnjpvx.rs:11:42\n   |\n11 |         .map(|v| v.iter().sum::<isize>().unwrap())\n\
    \   |                                          ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // The sum of any non-zero sub-vector of nums is\
    \ the min of the sum of the\n    // non-zero elements of the sub-vector divided\
    \ by the number of non-zero\n    // elements in the sub-vector\n    let mut min_sum\
    \ = nums[0]; // This is the min of the sub-vector\n    let mut num_nonzero_elements\
    \ = 1; // Number of non-zero elements in the sub-vector\n\n    for n in nums {\n\
    \        if n != 0 {\n            min_sum = min_sum * n + n;\n            num_nonzero_elements\
    \ += 1;\n        }\n    }\n    min_sum / num_nonzero_elements\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `103`,\n right: `1`', /tmp/tmp2q_2ntjp.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = -isize::MAX;\n    let mut curr_sum = 0;\n    let mut curr_sum2\
    \ = 0;\n    for num in nums.iter() {\n        if curr_sum < num {\n          \
    \  min_sum = curr_sum;\n        } else {\n            curr_sum += num;\n     \
    \   }\n        if curr_sum2 < min_sum {\n            min_sum = curr_sum2;\n  \
    \      }\n        curr_sum2 += num;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpq4ima4gf.rs:16:21\n\
    \   |\n16 |         if curr_sum < num {\n   |                     ^ no implementation\
    \ for `isize < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut smallest_sum = nums.iter().fold((0, 0),\
    \ |(mut sum, num)| {\n        loop {\n            let (min_sum, max_sum) = if\
    \ num > 0 {\n                let mut min_sum = *sum;\n                if *sum\
    \ < min_sum {\n                    (min_sum, num)\n                } else {\n\
    \                    (0, num)\n                }\n            } else {\n     \
    \           if *sum < min_sum {\n                    (0, num)\n              \
    \  } else {\n                    (min_sum, num)\n                }\n         \
    \   }\n        }\n    });\n    min_sum_sub(smallest_sum.0, smallest_sum.1, nums)\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcvhznadx.rs:24:14\n   |\n\
    24 |             }\n   |              ^ help: add `;` here\n25 |         }\n \
    \  |         - unexpected token\n\nerror[E0425]: cannot find value `min_sum` in\
    \ this scope\n  --> /tmp/tmpcvhznadx.rs:19:27\n   |\n19 |                 if *sum\
    \ < min_sum {\n   |                           ^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `min_sum` in this scope\n  --> /tmp/tmpcvhznadx.rs:22:22\n\
    \   |\n22 |                     (min_sum, num)\n   |                      ^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `min_sum_sub`\
    \ in this scope\n  --> /tmp/tmpcvhznadx.rs:27:5\n   |\n27 |     min_sum_sub(smallest_sum.0,\
    \ smallest_sum.1, nums)\n   |     ^^^^^^^^^^^ not found in this scope\n\nerror[E0593]:\
    \ closure is expected to take 2 distinct arguments, but it takes a single 2-tuple\
    \ as argument\n --> /tmp/tmpcvhznadx.rs:9:40\n  |\n9 |     let mut smallest_sum\
    \ = nums.iter().fold((0, 0), |(mut sum, num)| {\n  |                         \
    \               ^^^^         ---------------- takes a single 2-tuple as argument\n\
    \  |                                        |\n  |                           \
    \             expected closure that takes 2 distinct arguments\n  |\nhelp: change\
    \ the closure to take multiple arguments instead of a single tuple\n  |\n9 | \
    \    let mut smallest_sum = nums.iter().fold((0, 0), |mut sum, num| {\n  |   \
    \                                                  ~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0593.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut result = nums[0];\n    for i in 1..nums.len() {\n        result\
    \ = min(result, nums[i] + minSubArraySum(&nums[i .. ]));\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpmzu4f8oh.rs:15:18\n\
    \   |\n15 |         result = min(result, nums[i] + minSubArraySum(&nums[i .. ]));\n\
    \   |                  ^^^\n...\n21 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n15 |         result = main(result, nums[i] + minSubArraySum(&nums[i ..\
    \ ]));\n   |                  ~~~~\nhelp: consider importing this function\n \
    \  |\n1  | use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmzu4f8oh.rs:15:55\n\
    \   |\n15 |         result = min(result, nums[i] + minSubArraySum(&nums[i .. ]));\n\
    \   |                                                       ^^^^^^^^^^^^ expected\
    \ struct `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found reference `&[isize]`\nhelp: try using a conversion method\n\
    \   |\n15 |         result = min(result, nums[i] + minSubArraySum((&nums[i ..\
    \ ]).to_vec()));\n   |                                                       +\
    \            ++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for &n in nums\
    \ {\n        let current_sum = n.saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv66vp6xd.rs:28:3\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                                 - unclosed delimiter\n9  |     let mut min_sum\
    \ = isize::MAX;\n10 |     for &n in nums {\n   |                    - this delimiter\
    \ might not be properly closed...\n11 |         let current_sum = n.saturating_add(...\n\
    12 | }\n   | - ...as it matches this but it has different indentation\n...\n28\
    \ | }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found `}`\n  --> /tmp/tmpv66vp6xd.rs:12:1\n   |\n12 | }\n   | ^ expected one\
    \ of `.`, `;`, `?`, `else`, or an operator\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpv66vp6xd.rs:11:1603\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                              - closing delimiter\
    \ possibly meant for this\n...\n11 |         let current_sum = n.saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).saturating_add((*min_sum).sat"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.clone();\n    let mut s = nums.clone();\n\
    \n    let mut cur_min = nums.clone();\n    let mut cur_s = nums.clone();\n\n \
    \   for i in 0..nums.len() {\n        if i < 1 {\n            continue;\n    \
    \    }\n\n        while !s.is_empty() {\n            cur_min = cur_s.clone();\n\
    \            cur_s = s.clone();\n            let mut cur_sum = nums.clone();\n\
    \            for j in 0..cur_s.len() {\n                let mut min_j = cur_min.clone();\n\
    \                while j < min_j.len() {\n                    let cur_sum = cur_sum.add(&min_j[j]);\n\
    \                    cur_min[j] = cur_sum.sub(&cur_min[j]);\n                \
    \    cur_s[j] = cur_s[j] + cur_min[j];\n                    cur_min[j] /= nums[i];\n\
    \                    j += 1;\n                }\n            }\n\n           \
    \ let mut cur_min = cur_min.clone();\n            let mut cur_s = cur_s.clone();\n\
    \            cur_s = cur_s.into_iter().cloned().collect();\n            let mut\
    \ cur_sum = nums.clone();\n            for j in 0..cur_s.len() {\n           \
    \     let mut min_j = cur_min.clone();\n                while j < min_j.len()\
    \ {\n                    let cur_sum = cur_sum.add(&min_j[j]);\n             \
    \       cur_min[j] = cur_sum.sub(&cur_min[j]);\n                    cur_s[j] =\
    \ cur_s[j] + cur_min[j];\n                    cur_min[j] /= nums[i];\n       \
    \             j += 1;\n                }\n            }\n\n            let min_j\
    \ = cur_min.clone();\n            while !min_j.is_empty() {\n                let\
    \ cur_sum = cur_sum.add(&min_j[0]);\n                min_j[0] = 0;\n         \
    \       min_j[0] = cur_sum.sub(&min_j[0]);\n                min_j[0] *= nums[i];\n\
    \            }\n\n            s = cur_s.clone();\n            cur_s = s.into_iter().cloned().collect();\n\
    \            min_j = cur_min.clone();\n            while !min_j.is_empty() {\n\
    \                let cur_sum = cur_sum.add(&min_j[0]);\n                min_j[0]\
    \ = 0;\n                min_j[0] = cur_sum.sub(&min_j[0]);\n                min_j[0]\
    \ *= nums[i];\n            }\n\n            cur_min.clear();\n        }\n\n  \
    \      while !min_s.is_empty() {\n            min_s = min_s.into_iter().cloned().collect();\n\
    \        }\n\n        min_s = min_s.into_iter().cloned().collect();\n    }\n\n\
    \    min_s\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `min_s` in this scope\n  --> /tmp/tmpi2dr_4tp.rs:71:16\n\
    \   |\n71 |         while !min_s.is_empty() {\n   |                ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `min_s` in this scope\n  -->\
    \ /tmp/tmpi2dr_4tp.rs:72:13\n   |\n72 |             min_s = min_s.into_iter().cloned().collect();\n\
    \   |             ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `min_s` in this scope\n  --> /tmp/tmpi2dr_4tp.rs:72:21\n   |\n72 |         \
    \    min_s = min_s.into_iter().cloned().collect();\n   |                     ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `min_s` in this scope\n\
    \  --> /tmp/tmpi2dr_4tp.rs:75:9\n   |\n75 |         min_s = min_s.into_iter().cloned().collect();\n\
    \   |         ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `min_s` in this scope\n  --> /tmp/tmpi2dr_4tp.rs:75:17\n   |\n75 |         min_s\
    \ = min_s.into_iter().cloned().collect();\n   |                 ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `min_s` in this scope\n  -->\
    \ /tmp/tmpi2dr_4tp.rs:78:5\n   |\n78 |     min_s\n   |     ^^^^^ not found in\
    \ this scope\n\nerror[E0599]: no method named `add` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpi2dr_4tp.rs:27:43\n   |\n27 |          \
    \           let cur_sum = cur_sum.add(&min_j[j]);\n   |                      \
    \                     ^^^ method not found in `Vec<isize>`\n\nerror[E0271]: type\
    \ mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n \
    \   --> /tmp/tmpi2dr_4tp.rs:37:39\n     |\n37   |             cur_s = cur_s.into_iter().cloned().collect();\n\
    \     |                                       ^^^^^^ expected reference, found\
    \ `isize`\n     |\n     = note: expected reference `&_`\n                    \
    \ found type `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the\
    \ method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmpi2dr_4tp.rs:37:48\n   |\n\
    37 |               cur_s = cur_s.into_iter().cloned().collect();\n   |"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .windows(2)\n   \
    \     .fold(0, |sum, (_, v)| if v > sum { v } else { sum })\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpi87iwh_a.rs:11:10\n   |\n11 |         .windows(2)\n\
    \   |          ^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut num_min_sum = 0;\n\
    \n    for i in 1..=nums.len() {\n        let n = nums[i-1];\n        sum += n;\n\
    \n        // if the last number was larger than the current\n        // minimum\
    \ sum, then this was a sub-array\n        if sum > num_min_sum {\n           \
    \ num_min_sum = sum;\n        }\n    }\n    num_min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp62fmacy6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0] as isize;\n    for elt in\
    \ nums.iter().skip(1) {\n        if elt < min {\n            min = elt;\n    \
    \    }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpms503b51.rs:11:18\n   |\n\
    11 |         if elt < min {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&isize`, found `isize`\n   |            \
    \      help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpms503b51.rs:12:19\n   |\n9  |     let mut min = nums[0] as isize;\n\
    \   |                   ---------------- expected due to this value\n...\n12 |\
    \             min = elt;\n   |                   ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |             min = *elt;\n\
    \   |                   +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::Ordering::*;\n\n    if nums.is_empty()\
    \ {\n        return 0;\n    }\n    let mut min = nums[0];\n    for &n in nums.iter()\
    \ {\n        let mut min_ = n;\n        for &m in &nums[1..] {\n            if\
    \ *m > min_ {\n                min_ = *m;\n            }\n        }\n        if\
    \ min_ < min {\n            min = min_;\n        }\n    }\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering::*`\n --> /tmp/tmp7go3swp9.rs:9:9\n\
    \  |\n9 |     use std::cmp::Ordering::*;\n  |         ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |\n  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0614]: type\
    \ `isize` cannot be dereferenced\n  --> /tmp/tmp7go3swp9.rs:18:16\n   |\n18 |\
    \             if *m > min_ {\n   |                ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp7go3swp9.rs:19:24\n   |\n19 |        \
    \         min_ = *m;\n   |                        ^^\n\nerror: aborting due to\
    \ 2 previous errors; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().enumerate().min(|a, b| {\n        a.1.min(b.1)\n\
    \    })\n    .1\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp98r53sl0.rs:9:34\n\
    \  |\n9 |     nums.iter().enumerate().min(|a, b| {\n  |                      \
    \            ^ consider giving this closure parameter a type\n  |\n  = note: type\
    \ must be known at this point\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmp98r53sl0.rs:9:29\n     |\n9   \
    \ |       nums.iter().enumerate().min(|a, b| {\n     |  _____________________________^^^_-\n\
    \     | |                             |\n     | |                            \
    \ expected 0 arguments\n10   | |         a.1.min(b.1)\n11   | |     })\n     |\
    \ |_____- supplied 1 argument\n     |\nnote: associated function defined here\n\
    \nerror[E0609]: no field `1` on type `Option<(usize, &isize)>`\n  --> /tmp/tmp98r53sl0.rs:12:6\n\
    \   |\n12 |     .1\n   |      ^\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0061, E0282, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().fold(0, |max, _| max);\n\
    \    for &i in nums.iter().skip(1) {\n        min = if max < i {\n           \
    \ min\n        } else {\n            max = i;\n            min\n        };\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max` in this scope\n  --> /tmp/tmpfb4rriri.rs:11:18\n\
    \   |\n11 |         min = if max < i {\n   |                  ^^^ not found in\
    \ this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n\
    \   |\n\nerror[E0425]: cannot find value `max` in this scope\n  --> /tmp/tmpfb4rriri.rs:14:13\n\
    \   |\n14 |             max = i;\n   |             ^^^ not found in this scope\n\
    \   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold(0, |a, &num| {\n        a + num\n\
    \    })\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpbl_69g_8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().enumerate().filter(|(_, v)| v != 0).map(|(i,\
    \ v)| {\n        assert!(i != 0 && i == v);\n        v - nums[i-1]\n    }).min()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&&isize` with `{integer}`\n --> /tmp/tmpspkp77bv.rs:9:47\n\
    \  |\n9 |     nums.iter().enumerate().filter(|(_, v)| v != 0).map(|(i, v)| {\n\
    \  |                                               ^^ no implementation for `&&isize\
    \ == {integer}`\n  |\n  = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpspkp77bv.rs:10:32\n\
    \   |\n10 |         assert!(i != 0 && i == v);\n   |                         \
    \       ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpspkp77bv.rs:9:5\n   |\n8  |   fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                          ----- expected `isize`\
    \ because of return type\n9  | /     nums.iter().enumerate().filter(|(_, v)| v\
    \ != 0).map(|(i, v)| {\n10 | |         assert!(i != 0 && i == v);\n11 | |    \
    \     v - nums[i-1]\n12 | |     }).min()\n   | |____________^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut min = nums.iter().fold(isize::max, |max, x| min {\n        if x\
    \ > max {\n            x\n        } else {\n            x + max\n        }\n \
    \   });\n\n    for i in 1..nums.len() {\n        let min = nums[i - 1];\n    \
    \    let max = nums[i];\n        let cur = min;\n        while cur < max {\n \
    \           cur += min;\n        }\n        min = cur;\n    }\n\n    min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `if`\n  --> /tmp/tmpcsmhzic_.rs:14:9\n\
    \   |\n13 |     let mut min = nums.iter().fold(isize::max, |max, x| min {\n  \
    \ |                                                         --- while parsing\
    \ this struct\n14 |         if x > max {\n   |         ^^ expected identifier,\
    \ found keyword\n\nerror[E0422]: cannot find struct, variant or union type `min`\
    \ in this scope\n  --> /tmp/tmpcsmhzic_.rs:13:57\n   |\n13 |     let mut min =\
    \ nums.iter().fold(isize::max, |max, x| min {\n   |                          \
    \                               ^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcsmhzic_.rs:31:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n31 |     min\n   |     ^^^ expected `isize`, found\
    \ fn item\n   |\n   = note: expected type `isize`\n           found fn item `fn(isize,\
    \ isize) -> isize {<isize as Ord>::max}`\nhelp: use parentheses to call this function\n\
    \   |\n31 |     min(...)\n   |        +++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0422.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter()\n        .cloned()\n        .windows(4)\n\
    \        .sum()\n        .min()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpdw9hpqiq.rs:11:10\n   |\n11 |         .windows(4)\n\
    \   |          ^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n\n    for (index, &num)\
    \ in nums.iter().enumerate() {\n        for &x in nums[(index + 1):].iter() {\n\
    \            min = min(min, x + num);\n        }\n    }\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `]`\n  --> /tmp/tmpiv93aqtg.rs:12:36\n   |\n\
    12 |         for &x in nums[(index + 1):].iter() {\n   |                     \
    \              -^ expected type\n   |                                   |\n  \
    \ |                                   tried to parse a type due to this\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    for i in 1..nums.len()\
    \ {\n        min_sum = min(min_sum, nums[i]);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp769__pw0.rs:11:19\n\
    \   |\n11 |         min_sum = min(min_sum, nums[i]);\n   |                   ^^^\n\
    ...\n16 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n11 |        \
    \ min_sum = main(min_sum, nums[i]);\n   |                   ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().reduce::<isize>(0,\
    \ |a, b| a.checked_add(b)).unwrap();\n    for i in nums.iter() {\n        if i\
    \ == 0 {\n            continue;\n        }\n        min_sum -= i;\n        if\
    \ min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(&isize, &isize)>` closure, found `isize`\n\
    \    --> /tmp/tmpvzzqt81d.rs:9:35\n     |\n9    |     let mut min_sum = nums.iter().reduce::<isize>(0,\
    \ |a, b| a.checked_add(b)).unwrap();\n     |                                 \
    \  ^^^^^^ expected an `FnMut<(&isize, &isize)>` closure, found `isize`\n     |\n\
    \     = help: the trait `FnMut<(&isize, &isize)>` is not implemented for `isize`\n\
    note: required by a bound in `reduce`\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n    --> /tmp/tmpvzzqt81d.rs:9:35\n     |\n9 \
    \   |     let mut min_sum = nums.iter().reduce::<isize>(0, |a, b| a.checked_add(b)).unwrap();\n\
    \     |                                   ^^^^^^          -  -----------------------\
    \ supplied 2 arguments\n     |                                   |\n     |   \
    \                                expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpvzzqt81d.rs:11:14\n   |\n11 |         if i == 0 {\n   |       \
    \       ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0368]:\
    \ binary assignment operation `-=` cannot be applied to type `&isize`\n  --> /tmp/tmpvzzqt81d.rs:14:9\n\
    \   |\n14 |         min_sum -= i;\n   |         -------^^^^^\n   |         |\n\
    \   |         cannot use `-=` on type `&isize`\n   |\nhelp: `-=` can be used on\
    \ `isize`, you can dereference `min_sum`\n   |\n14 |         *min_sum -= i;\n\
    \   |         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvzzqt81d.rs:15:22\n\
    \   |\n15 |         if min_sum < 0 {\n   |                      ^\n   |      \
    \                |\n   |                      expected `&isize`, found integer\n\
    \   |                      help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ m"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    debugln!(\"minSubArraySum {:?}\", nums);\n    let\
    \ mut min_sum = nums.iter().rev().fold(isize::MIN, isize::MAX);\n    for num in\
    \ nums {\n        min_sum -= *num;\n    }\n    min_sum\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `debugln` in this scope\n --> /tmp/tmp2uown8m8.rs:9:5\n\
    \  |\n9 |     debugln!(\"minSubArraySum {:?}\", nums);\n  |     ^^^^^^^\n\nerror[E0277]:\
    \ expected a `FnMut<(isize, &isize)>` closure, found `isize`\n    --> /tmp/tmp2uown8m8.rs:10:41\n\
    \     |\n10   |     let mut min_sum = nums.iter().rev().fold(isize::MIN, isize::MAX);\n\
    \     |                                         ^^^^ expected an `FnMut<(isize,\
    \ &isize)>` closure, found `isize`\n     |\n     = help: the trait `FnMut<(isize,\
    \ &isize)>` is not implemented for `isize`\nnote: required by a bound in `fold`\n\
    \nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp2uown8m8.rs:12:20\n\
    \   |\n12 |         min_sum -= *num;\n   |                    ^^^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0614.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut low = nums.clone();\n    let mut high =\
    \ nums.clone();\n    let mut sum = 0;\n    loop {\n        if low == high {\n\
    \            break;\n        }\n        let low_index = low.iter().position(|&x|\
    \ x < 0).unwrap_or(0);\n        let high_index = high.iter().position(|&x| x <\
    \ 0).unwrap_or(0);\n        let diff = high[high_index] - low[low_index];\n  \
    \      if diff > 0 {\n            sum += diff;\n            low.pop(low_index);\n\
    \            high.pop(high_index);\n        } else {\n            sum += diff;\n\
    \            high[high_index] += 1;\n            low.push(high[high_index] - 1);\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpab74c86q.rs:21:17\n     |\n21   |             low.pop(low_index);\n\
    \     |                 ^^^ --------- supplied 1 argument\n     |            \
    \     |\n     |                 expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0061]: this function takes 0 arguments but 1\
    \ argument was supplied\n    --> /tmp/tmpab74c86q.rs:22:18\n     |\n22   |   \
    \          high.pop(high_index);\n     |                  ^^^ ---------- supplied\
    \ 1 argument\n     |                  |\n     |                  expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Sort and remove duplicate elements\n    let mut\
    \ sorted_nums = nums.iter().cloned().collect::<Vec<isize>>();\n    sorted_nums.sort_unstable();\n\
    \    sorted_nums.dedup();\n\n    // Initialize total and sum to 0\n    let mut\
    \ total: isize = 0;\n    let mut sum: isize = 0;\n\n    // Iterate until either\
    \ we find an element <= 0 (all elements are 0 or less),\n    // or we reach the\
    \ end of the sorted array and can't find a smaller element\n    while true {\n\
    \        // Find smallest element and add it to sum\n        let idx = sorted_nums.iter().position(|&x|\
    \ x <= 0).unwrap();\n        sum += *sorted_nums[idx];\n\n        // If sum is\
    \ zero, we've found our answer\n        if sum == 0 {\n            break;\n  \
    \      }\n\n        // Update the total by subtracting out the last element\n\
    \        total -= sorted_nums[idx];\n\n        // Remove the last element from\
    \ the sorted list\n        sorted_nums.remove_by_ref(idx);\n    }\n\n    total\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "warning: denote infinite loops with `loop { ... }`\n  --> /tmp/tmplxal0xp8.rs:20:5\n\
    \   |\n20 |     while true {\n   |     ^^^^^^^^^^ help: use `loop`\n   |\n   =\
    \ note: `#[warn(while_true)]` on by default\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmplxal0xp8.rs:23:16\n   |\n23 |         sum +=\
    \ *sorted_nums[idx];\n   |                ^^^^^^^^^^^^^^^^^\n\nerror[E0599]: no\
    \ method named `remove_by_ref` found for struct `Vec<isize>` in the current scope\n\
    \  --> /tmp/tmplxal0xp8.rs:34:21\n   |\n34 |         sorted_nums.remove_by_ref(idx);\n\
    \   |                     ^^^^^^^^^^^^^ method not found in `Vec<isize>`\n\nerror:\
    \ aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed\
    \ explanations: E0599, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut current_sum = nums.iter().sum::<isize>() as isize;\n    let mut\
    \ min_sum = nums.iter().min_by_key(|&n| {\n        n.checked_add(&current_sum).ok()\n\
    \    }).unwrap();\n\n    for n in &nums {\n        min_sum = n.checked_min(&min_sum).ok().unwrap();\n\
    \    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpchtesdoa.rs:15:23\n   |\n\
    15 |         n.checked_add(&current_sum).ok()\n   |                       ^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n15 -         n.checked_add(&current_sum).ok()\n15 +         n.checked_add(current_sum).ok()\n\
    \   | \n\nerror[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpchtesdoa.rs:15:37\n   |\n15 |         n.checked_add(&current_sum).ok()\n\
    \   |                                     ^^ help: there is an associated function\
    \ with a similar name: `or`\n\nerror[E0599]: no method named `checked_min` found\
    \ for reference `&isize` in the current scope\n  --> /tmp/tmpchtesdoa.rs:19:21\n\
    \   |\n19 |         min_sum = n.checked_min(&min_sum).ok().unwrap();\n   |   \
    \                  ^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `checked_div`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchtesdoa.rs:22:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    22 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n22 |     *min_sum\n   |     +\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = vec![0];\n    for x in nums.iter()\
    \ {\n        let mut min = vec![min.last().unwrap() + x, min.last().unwrap()];\n\
    \        min = min.iter().min_by_key(|&n| n).unwrap();\n    }\n    min as isize\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqdqn_agp.rs:11:53\n   |\n\
    11 |         let mut min = vec![min.last().unwrap() + x, min.last().unwrap()];\n\
    \   |                                                     ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |         let mut min = vec![min.last().unwrap() + x, *min.last().unwrap()];\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqdqn_agp.rs:12:15\n   |\n11 |         let mut min = vec![min.last().unwrap()\
    \ + x, min.last().unwrap()];\n   |                       --------------------------------------------------\
    \ expected due to this value\n12 |         min = min.iter().min_by_key(|&n| n).unwrap();\n\
    \   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize, _>`\n         \
    \  found reference `&isize`\n\nerror[E0605]: non-primitive cast: `Vec<isize>`\
    \ as `isize`\n  --> /tmp/tmpqdqn_agp.rs:14:5\n   |\n14 |     min as isize\n  \
    \ |     ^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut result = nums.iter().fold(0, |min, n| min + n);\n    let mut left\
    \ = nums.len() - 1;\n    let mut right = nums.len() - 1;\n    while left >= 0\
    \ && right >= 0 {\n        let leftMax = nums[left] as isize - result;\n     \
    \   let rightMax = nums[right] as isize - result;\n        if leftMax <= rightMax\
    \ {\n            right = right - 1;\n        } else {\n            left = left\
    \ - 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp2z5q9fvu.rs:19:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().enumerate().fold(0, |a, &(n, _)| {\n\
    \        if a < n {\n            a = n;\n        }\n        a\n    })\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfasfo2wj.rs:9:41\n  |\n9 |\
    \     nums.iter().enumerate().fold(0, |a, &(n, _)| {\n  |                    \
    \                     ^^^^^^-\n  |                                         | \
    \    |\n  |                                         |     expected due to this\n\
    \  |                                         expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(usize, &isize)`\n          found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold(0isize, |mut sum, i| {\n      \
    \  if i < (*nums).len() {\n            sum += nums[i];\n            sum\n    \
    \    } else {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0ntk209.rs:10:16\n   |\n\
    10 |         if i < (*nums).len() {\n   |                ^^^^^^^^^^^^^ expected\
    \ `&isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&isize`\n  --> /tmp/tmpq0ntk209.rs:11:20\n   |\n11 |             sum +=\
    \ nums[i];\n   |                    ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut cur_sum: isize = 0;\n    for i in nums.iter().rev() {\n        if\
    \ *i < 0 {\n            return -i;\n        }\n        cur_sum += *i;\n    }\n\
    \    cur_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpq48n5nnb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0\n    }\n\n\
    \    let mut min_so_far = nums[0] as isize;\n    for i in 1..nums.len() {\n  \
    \      min_so_far += nums[i];\n        if min_so_far > nums[i] {\n           \
    \ min_so_far = nums[i];\n        }\n    }\n    min_so_far\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp6xgs6_iw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .enumerate()\n  \
    \      .map(|(idx, val)| {\n            assert!(idx < nums.len());\n         \
    \   assert!(val >= 0);\n            val\n        })\n        .fold(0, |acc, &elem|\
    \ {\n            acc - elem\n        })\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1gl3meaw.rs:14:28\n   |\n\
    14 |             assert!(val >= 0);\n   |                            ^\n   | \
    \                           |\n   |                            expected `&isize`,\
    \ found integer\n   |                            help: consider borrowing here:\
    \ `&0`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cur = nums[0];\n    let mut sum = cur;\n\
    \n    for num in nums.iter().rev() {\n        cur += num;\n        if cur < sum\
    \ {\n            sum = cur;\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpkmx2f_ew.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .cloned()\n     \
    \   .enumerate()\n        .filter(|(_, num)| num.is_some())\n        .map(|(index,\
    \ num)| {\n            let mut ans = nums[index].clone();\n            let mut\
    \ min = nums[index].clone();\n            nums.remove(index);\n            for\
    \ num in nums {\n                let tmp = num - min;\n                ans = ans.checked_add(&tmp).unwrap();\n\
    \                min = num\n            }\n            ans\n        })\n     \
    \   .min()\n        .unwrap()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_some` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp1s35yg2e.rs:13:32\n   |\n13 |         .filter(|(_,\
    \ num)| num.is_some())\n   |                                ^^^^^^^ method not\
    \ found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1s35yg2e.rs:20:39\n\
    \   |\n20 |                 ans = ans.checked_add(&tmp).unwrap();\n   |      \
    \                                 ^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider removing the borrow\n   |\n20 -                 ans = ans.checked_add(&tmp).unwrap();\n\
    20 +                 ans = ans.checked_add(tmp).unwrap();\n   | \n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut low = 0;\n    while j < nums.len() {\n        while i <\
    \ nums.len() && nums[i] > nums[j] {\n            i += 1;\n        }\n        if\
    \ i < nums.len() {\n            sum += nums[i];\n            i += 1;\n       \
    \ }\n        while j < nums.len() && nums[j] < nums[i] {\n            j += 1;\n\
    \        }\n        if j < nums.len() {\n            sum += nums[j];\n       \
    \     j += 1;\n        }\n        if sum < low {\n            low = sum;\n   \
    \     }\n        sum = 0;\n        i += 1;\n        j += 1;\n    }\n    low\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpi97h5o89.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = i32::MAX;\n\n    for idx in 0..nums.len()\
    \ {\n        min_sum = match nums[idx].checked_add((*min_sum).saturating_add(i32::MIN))\
    \ {\n            Some(a) => (*min_sum).saturating_add(a),\n            None =>\
    \ return i32::MAX,\n        };\n    }\n    *min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `i32` cannot be dereferenced\n  --> /tmp/tmpm3ek28iu.rs:12:47\n\
    \   |\n12 |         min_sum = match nums[idx].checked_add((*min_sum).saturating_add(i32::MIN))\
    \ {\n   |                                               ^^^^^^^^^^\n\nerror[E0614]:\
    \ type `i32` cannot be dereferenced\n  --> /tmp/tmpm3ek28iu.rs:13:24\n   |\n13\
    \ |             Some(a) => (*min_sum).saturating_add(a),\n   |               \
    \         ^^^^^^^^^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm3ek28iu.rs:14:28\n\
    \   |\n14 |             None => return i32::MAX,\n   |                       \
    \     ^^^^^^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n14 |     \
    \        None => return i32::MAX.try_into().unwrap(),\n   |                  \
    \                  ++++++++++++++++++++\n\nerror[E0614]: type `i32` cannot be\
    \ dereferenced\n  --> /tmp/tmpm3ek28iu.rs:17:5\n   |\n17 |     *min_sum\n   |\
    \     ^^^^^^^^\n   |\nhelp: parentheses are required to parse this as an expression\n\
    \   |\n11 ~     (for idx in 0..nums.len() {\n12 |         min_sum = match nums[idx].checked_add((*min_sum).saturating_add(i32::MIN))\
    \ {\n13 |             Some(a) => (*min_sum).saturating_add(a),\n14 |         \
    \    None => return i32::MAX,\n15 |         };\n16 ~     })\n   |\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for v in nums.iter()\
    \ {\n        if v > min {\n            min = v;\n        }\n    }\n    min\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkd85j8p.rs:11:16\n   |\n\
    11 |         if v > min {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphkd85j8p.rs:12:19\n\
    \   |\n9  |     let mut min = isize::MAX;\n   |                   ---------- expected\
    \ due to this value\n...\n12 |             min = v;\n   |                   ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n12 |             min = *v;\n   |                   +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ min_index = isize::max_value();\n    for &i in &nums {\n        if i < min_index\
    \ {\n            min_sum = i;\n            min_index = i;\n        }\n       \
    \ if i >= min_index {\n            min_sum = min_index + i;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `1`', /tmp/tmp43q4zvr6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    for &n in nums {\n \
    \       if n >= min {\n            continue;\n        }\n        min = n;\n  \
    \  }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmrfnwyha.rs:10:9\n   |\n\
    10 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut min = std::i32::MAX;\n    let mut current = std::i32::MAX;\n   \
    \ let mut nums_cloned = nums.clone();\n\n    let mut idx = nums.len() - 1;\n \
    \   while idx >= 0 {\n        if nums[idx] > 0 {\n            current += nums[idx];\n\
    \            nums_cloned.remove(idx);\n        } else {\n            if nums[idx]\
    \ + current < min {\n                min = nums[idx] + current;\n            }\n\
    \            nums_cloned.remove(idx);\n        }\n\n        idx -= 1;\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6mj9e6v.rs:20:24\n   |\n\
    20 |             current += nums[idx];\n   |                        ^^^^^^^^^\
    \ expected `i32`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to\
    \ `i32`\n  --> /tmp/tmpe6mj9e6v.rs:20:21\n   |\n20 |             current += nums[idx];\n\
    \   |                     ^^ no implementation for `i32 += isize`\n   |\n   =\
    \ help: the trait `AddAssign<isize>` is not implemented for `i32`\n   = help:\
    \ the following other types implement trait `AddAssign<Rhs>`:\n             <f32\
    \ as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n\
    \             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n  \
    \           <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n     \
    \        <i16 as AddAssign>\n           and 20 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe6mj9e6v.rs:23:28\n   |\n23 |             if nums[idx]\
    \ + current < min {\n   |                            ^^^^^^^ expected `isize`,\
    \ found `i32`\n\nerror[E0277]: cannot add `i32` to `isize`\n  --> /tmp/tmpe6mj9e6v.rs:23:26\n\
    \   |\n23 |             if nums[idx] + current < min {\n   |                 \
    \         ^ no implementation for `isize + i32`\n   |\n   = help: the trait `Add<i32>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6mj9e6v.rs:23:38\n\
    \   |\n23 |             if nums[idx] + current < min {\n   |                 \
    \                     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert\
    \ an `i32` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    23 |             if nums[idx] + current < min.try_into().unwrap() {\n   |    \
    \                                   "
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for el in nums.iter().rev()\
    \ {\n        if el < 0 {\n            return isize::MAX;\n        }\n        if\
    \ min_sum < el {\n            min_sum = el;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl85mm9t1.rs:11:17\n   |\n\
    11 |         if el < 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl85mm9t1.rs:14:22\n\
    \   |\n14 |         if min_sum < el {\n   |                      ^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \       if min_sum < *el {\n   |                      +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl85mm9t1.rs:15:23\n   |\n9  |     let mut min_sum = isize::MAX;\n\
    \   |                       ---------- expected due to this value\n...\n15 | \
    \            min_sum = el;\n   |                       ^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |        \
    \     min_sum = *el;\n   |                       +\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for n in nums {\n      \
    \  if n > 0 {\n            total += n;\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp9eqtxcht.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = std::i32::MAX;\n\
    \n    for i in 0..nums.len() {\n        for j in 0..i {\n            sum += nums[j];\n\
    \            if sum < min_sum {\n                min_sum = sum;\n            }\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75kguiyn.rs:15:22\n   |\n\
    15 |             if sum < min_sum {\n   |                      ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n15 |             if sum < min_sum.try_into().unwrap()\
    \ {\n   |                             ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp75kguiyn.rs:16:27\n   |\n10 |     let mut min_sum = std::i32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n16\
    \ |                 min_sum = sum;\n   |                           ^^^ expected\
    \ `i32`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75kguiyn.rs:20:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    20 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    match nums.len() {\n        1 => nums[0],\n        2 => nums[0] + minSubArraySum(nums[1..]),\n\
    \        _ => nums[0] + minSubArraySum(nums[1..]) + minSubArraySum(nums[2..]),\n\
    \    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmiz86un_.rs:14:39\n   |\n\
    14 |         2 => nums[0] + minSubArraySum(nums[1..]),\n   |                 \
    \                      ^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |                                       |\n   |                          \
    \             expected struct `Vec`, found slice `[isize]`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n               found slice `[isize]`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmiz86un_.rs:15:39\n   |\n15 |         _ => nums[0] + minSubArraySum(nums[1..])\
    \ + minSubArraySum(nums[2..]),\n   |                                       ^^^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |                     \
    \                  |\n   |                                       expected struct\
    \ `Vec`, found slice `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found slice `[isize]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpmiz86un_.rs:15:67\n   |\n15 |         _ => nums[0] + minSubArraySum(nums[1..])\
    \ + minSubArraySum(nums[2..]),\n   |                                         \
    \                          ^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n\
    \   |                                                                   |\n  \
    \ |                                                                   expected\
    \ struct `Vec`, found slice `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found slice `[isize]`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum: isize = 0;\n    for num in nums\
    \ {\n        let sum = num\n            .iter()\n            .cloned()\n     \
    \       .map(|x| x * x)\n            .sum();\n        if sum < min_sum {\n   \
    \         min_sum = sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpikqr93ap.rs:12:14\n   |\n12 |             .iter()\n   |\
    \              ^^^^ method not found in `isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    debug_assert!(nums.len() > 0);\n    let mut min_sum\
    \ = nums.iter().take_while(|x| x > 0).sum();\n    for i in nums.iter().skip(1).take_while(|x|\
    \ x < min_sum) {\n        min_sum = std::cmp::min(min_sum, i);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn6sfezq7.rs:10:54\n   |\n\
    10 |     let mut min_sum = nums.iter().take_while(|x| x > 0).sum();\n   |    \
    \                                                  ^ expected `&&isize`, found\
    \ integer\n\nerror[E0277]: the trait bound `&&isize: Sum<&isize>` is not satisfied\n\
    \    --> /tmp/tmpn6sfezq7.rs:10:57\n     |\n10   |     let mut min_sum = nums.iter().take_while(|x|\
    \ x > 0).sum();\n     |                                                      \
    \   ^^^ the trait `Sum<&isize>` is not implemented for `&&isize`\n     |\n   \
    \  = help: the following other types implement trait `Sum<A>`:\n             \
    \  <f32 as Sum<&'a f32>>\n               <f32 as Sum>\n               <f64 as\
    \ Sum<&'a f64>>\n               <f64 as Sum>\n               <i128 as Sum<&'a\
    \ i128>>\n               <i128 as Sum>\n               <i16 as Sum<&'a i16>>\n\
    \               <i16 as Sum>\n             and 20 others\nnote: required by a\
    \ bound in `std::iter::Iterator::sum`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpn6sfezq7.rs:12:42\n   |\n12 |         min_sum = std::cmp::min(min_sum,\
    \ i);\n   |                                          ^ expected `&isize`, found\
    \ `isize`\n   |\n   = note: expected reference `&&isize`\n              found\
    \ reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6sfezq7.rs:14:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    14 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `&&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n14 |     **min_sum\n   |     ++\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .fold(0, |acc, &i|\
    \ acc + minSubArraySumHelper(&i[..]))\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `minSubArraySumHelper` in this scope\n\
    \  --> /tmp/tmpb59p8ukq.rs:11:34\n   |\n11 |         .fold(0, |acc, &i| acc +\
    \ minSubArraySumHelper(&i[..]))\n   |                                  ^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpb59p8ukq.rs:11:56\n   |\n11 |         .fold(0, |acc, &i| acc +\
    \ minSubArraySumHelper(&i[..]))\n   |                                        \
    \                ^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0608.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut minimum = nums.clone();\n    let mut min_sum_isize\
    \ = nums.clone();\n    for i in 0..nums.len() {\n        for j in i + 1..nums.len()\
    \ {\n            let sum = nums[j] - nums[i];\n            if sum < minimum[j]\
    \ {\n                minimum[j] = sum;\n                min_sum_isize[j] = i;\n\
    \            }\n        }\n    }\n    if minimum.iter().any(|x| *x == 0) || min_sum_isize.iter().any(|x|\
    \ *x == 0) {\n        0\n    } else {\n        minimum.iter().fold(0, |sum, x|\
    \ sum + x)\n    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n   \
    \ assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr80wd2ao.rs:16:36\n   |\n\
    16 |                 min_sum_isize[j] = i;\n   |                 ----------------\
    \   ^ expected `isize`, found `usize`\n   |                 |\n   |          \
    \       expected due to the type of this binding\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n\
    \    let mut min = nums[0];\n    for &i in &nums[1..] {\n        if i + min <\
    \ i {\n            min = i;\n        }\n    }\n    min\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpb4xwrdwl.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum: isize = 0;\n    let mut current_sum:\
    \ isize = 0;\n\n    // find the minimum sum of any non-empty sub-vector of nums\n\
    \    for &x in nums.iter() {\n        current_sum += x;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n    }\n\n    //\
    \ now find the minimum sum of any non-empty sub-vector of the rest of the list\n\
    \    // but without the first element\n    min_sum -= nums[0];\n\n    // return\
    \ the answer\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2`,\n right: `1`', /tmp/tmp1lxoga8j.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .enumerate()\n  \
    \      .filter(|(_, index)| index > 0)\n        .map(|(index, elt)| {\n      \
    \      minSubArraySum(vec![index - 1, elt])\n        })\n        .sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqpmsypxz.rs:12:38\n   |\n\
    12 |         .filter(|(_, index)| index > 0)\n   |                           \
    \           ^ expected `&&isize`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqpmsypxz.rs:14:33\n   |\n14 |             minSubArraySum(vec![index\
    \ - 1, elt])\n   |                                 ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |             minSubArraySum(vec![(index\
    \ - 1).try_into().unwrap(), elt])\n   |                                 +    \
    \     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    debug!(\"minSubArraySum\");\n    let mut min_sum\
    \ = nums.iter().map(|x| x).sum::<isize>().unwrap();\n    for i in 1..nums.len()\
    \ {\n        let mut cur_sum = min_sum;\n        for j in i..nums.len() {\n  \
    \          cur_sum += nums[j];\n            if cur_sum < min_sum {\n         \
    \       min_sum = cur_sum;\n            }\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `debug` in this scope\n --> /tmp/tmp8wi6nxjc.rs:9:5\n\
    \  |\n9 |     debug!(\"minSubArraySum\");\n  |     ^^^^^\n\nerror[E0599]: no method\
    \ named `unwrap` found for type `isize` in the current scope\n  --> /tmp/tmp8wi6nxjc.rs:10:61\n\
    \   |\n10 |     let mut min_sum = nums.iter().map(|x| x).sum::<isize>().unwrap();\n\
    \   |                                                             ^^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = vec![nums.last().unwrap()];\n    let\
    \ mut min_sum = nums.last().unwrap();\n    for x in nums.iter().skip(1) {\n  \
    \      if x + min_sum < min {\n            min_sum = x + min_sum;\n          \
    \  min = vec![x + min_sum];\n        } else {\n            min.insert(min.iter().position(|&x|\
    \ *x == x).unwrap() + 1, x);\n            min_sum = x + min_sum;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp10h1rbwx.rs:12:26\n   |\n\
    12 |         if x + min_sum < min {\n   |                          ^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp10h1rbwx.rs:13:23\n\
    \   |\n10 |     let mut min_sum = nums.last().unwrap();\n   |                \
    \       -------------------- expected due to this value\n...\n13 |           \
    \  min_sum = x + min_sum;\n   |                       ^^^^^^^^^^^\n   |      \
    \                 |\n   |                       expected `&isize`, found `isize`\n\
    \   |                       help: consider borrowing here: `&(x + min_sum)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp10h1rbwx.rs:14:24\n   |\n14 |  \
    \           min = vec![x + min_sum];\n   |                        ^^^^^^^^^^^\n\
    \   |                        |\n   |                        expected `&isize`,\
    \ found `isize`\n   |                        help: consider borrowing here: `&(x\
    \ + min_sum)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp10h1rbwx.rs:16:55\n\
    \   |\n16 |             min.insert(min.iter().position(|&x| *x == x).unwrap()\
    \ + 1, x);\n   |                                                       ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             min.insert(min.iter().position(|&x| *x == *x).unwrap() + 1, x);\n\
    \   |                                                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp10h1rbwx.rs:17:23\n   |\n10 |     let mut min_sum\
    \ = nums.last().unwrap();\n   |                       -------------------- expected\
    \ due to this value\n...\n17 |             min_sum = x + min_sum;\n   |      \
    \                 ^^^^^^^^^^^\n   |                       |\n   |            \
    \           expected `&isize`, found `isize`\n   |                       help:\
    \ consider borrowing here: `&(x + min_sum)`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp10h1rbwx.rs:20:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                       "
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0] as isize;\n    let mut\
    \ i = 0;\n    let mut j = nums.len() - 1;\n\n    while j >= 0 && i < nums.len()\
    \ {\n        if nums[i] > nums[j] {\n            min_sum -= nums[j];\n       \
    \     i += 1;\n        } else {\n            min_sum += nums[j];\n           \
    \ j -= 1;\n        }\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpicvw74oi.rs:19:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut min = nums[0] as isize;\n    let mut sum = 0;\n\n    for n in nums.iter()\
    \ {\n        sum += *n as isize;\n        if sum < min {\n            min = sum;\n\
    \        }\n    }\n\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpbv1wwftv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    match nums.len() {\n        1 => nums[0],\n    \
    \    _ => maxSubArraySum(nums[1..])\n    }\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `maxSubArraySum` in this scope\n  -->\
    \ /tmp/tmpd0s_1v44.rs:11:14\n   |\n11 |         _ => maxSubArraySum(nums[1..])\n\
    \   |              ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // This algorithm uses O(n * k) extra space but\
    \ it's actually O(n log n)\n    // because of the sort in the loop. The sort is\
    \ unnecessary but makes\n    // it easier to visualize what's happening.\n\n \
    \   let mut cur_min_sum = isize::MAX;\n    let mut min_sum = isize::MAX;\n   \
    \ for sum in nums.iter().cloned() {\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum < cur_min_sum {\n            cur_min_sum =\
    \ sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp52ks5uox.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    for el in nums.iter().rev()\
    \ {\n        min = min(el, min);\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmp6gd7skmd.rs:11:15\n\
    \   |\n9  |     let mut min = std::isize::MAX;\n   |         ------- `min` has\
    \ type `isize`\n10 |     for el in nums.iter().rev() {\n11 |         min = min(el,\
    \ min);\n   |               ^^^---------\n   |               |\n   |         \
    \      call expression requires function\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // O(N)\n    for num in nums {\n        if !nums.iter().any(|&x|\
    \ x > num) {\n            return num;\n        }\n    }\n    nums\n        .iter()\n\
    \        .map(|x| x.checked_add(-x).unwrap())\n        .min()\n        .unwrap()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmpozcjsyyx.rs:11:13\n\
    \    |\n8   | fn minSubArraySum(nums: Vec<isize>) -> isize {\n    |          \
    \         ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n9   |     // O(N)\n10  |     for num in nums {\n\
    \    |                ---- `nums` moved due to this implicit call to `.into_iter()`\n\
    11  |         if !nums.iter().any(|&x| x > num) {\n    |             ^^^^^^^^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `nums`\n    = note: borrow occurs due to deref\
    \ coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n10  |     for num in &nums\
    \ {\n    |                +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold((0, 0), |(min_sum,\
    \ num)| {\n        match num {\n            x if min_sum.0 + x < min_sum.1 =>\
    \ (min_sum.0 + x, x),\n            _ => (min_sum.1, min_sum.1),\n        }\n \
    \   });\n\n    // if there are no negative numbers in the vector, just return\
    \ the sum\n    if min_sum.0 > 0 {\n        min_sum.0\n    } else {\n        min_sum.1\
    \ - min_sum.0\n    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0593]: closure is expected to take 2 distinct arguments, but it\
    \ takes a single 2-tuple as argument\n --> /tmp/tmpzpds2jg5.rs:9:35\n  |\n9 |\
    \     let mut min_sum = nums.iter().fold((0, 0), |(min_sum, num)| {\n  |     \
    \                              ^^^^         ---------------- takes a single 2-tuple\
    \ as argument\n  |                                   |\n  |                  \
    \                 expected closure that takes 2 distinct arguments\n  |\nhelp:\
    \ change the closure to take multiple arguments instead of a single tuple\n  |\n\
    9 |     let mut min_sum = nums.iter().fold((0, 0), |min_sum, num| {\n  |     \
    \                                           ~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0593`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    let mut sum = 0;\n\
    \    for &n in nums {\n        sum += n;\n        if sum < min {\n           \
    \ min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4wwsfgf1.rs:11:9\n   |\n\
    11 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = i32::MAX;\n\n    // If nums is\
    \ empty, return 0\n    if nums.is_empty() {\n        return 0;\n    }\n\n    //\
    \ Calculate the sum of first item\n    min_sum += nums[0];\n\n    // Search for\
    \ the next smallest value after the previous one\n    for value in nums.iter().skip(1)\
    \ {\n        // If current value is smaller than the smallest found so far, update\
    \ it\n        if value < min_sum {\n            min_sum = value;\n        }\n\
    \    }\n\n    // Return the result\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5dms1162.rs:17:16\n   |\n\
    17 |     min_sum += nums[0];\n   |                ^^^^^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0277]: cannot add-assign `isize` to `i32`\n  --> /tmp/tmp5dms1162.rs:17:13\n\
    \   |\n17 |     min_sum += nums[0];\n   |             ^^ no implementation for\
    \ `i32 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5dms1162.rs:22:20\n\
    \   |\n22 |         if value < min_sum {\n   |                    ^^^^^^^ expected\
    \ `&isize`, found `i32`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5dms1162.rs:23:23\n\
    \   |\n9  |     let mut min_sum = i32::MAX;\n   |                       --------\
    \ expected due to this value\n...\n23 |             min_sum = value;\n   |   \
    \                    ^^^^^ expected `i32`, found `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5dms1162.rs:28:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n28 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n28 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .enumerate()\n  \
    \      .filter(|(_, x)| x > 0)\n        .map(|(idx, x)| nums[idx] - x)\n     \
    \   .min(|a, b| a < b)\n        .unwrap_or(0)\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxddsym7b.rs:12:30\n   |\n\
    12 |         .filter(|(_, x)| x > 0)\n   |                              ^ expected\
    \ `&&isize`, found integer\n\nerror[E0061]: this function takes 0 arguments but\
    \ 1 argument was supplied\n    --> /tmp/tmpxddsym7b.rs:14:10\n     |\n14   | \
    \        .min(|a, b| a < b)\n     |          ^^^ ------------ supplied 1 argument\n\
    \     |          |\n     |          expected 0 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cur_min = nums.last().unwrap() + nums.last().unwrap();\n\
    \    for i in 2..nums.len() {\n        if nums.len() > i && nums[i] < cur_min\
    \ {\n            cur_min = nums[i];\n        }\n    }\n    cur_min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-20`,\n right: `-14`', /tmp/tmpytezzhrc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter()\n        .enumerate()\n        .map(|(idx,\
    \ num)| {\n            assert!(num != 0, \"Subarray must contain at least one\
    \ element.\");\n            assert!(idx == 0 || nums[idx - 1] != num, \"Subarray\
    \ cannot have duplicates.\");\n            num - nums[idx - 1]\n        })\n \
    \       .min()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpttbooa1p.rs:12:25\n\
    \   |\n12 |             assert!(num != 0, \"Subarray must contain at least one\
    \ element.\");\n   |                         ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpttbooa1p.rs:13:50\n\
    \   |\n13 |             assert!(idx == 0 || nums[idx - 1] != num, \"Subarray cannot\
    \ have duplicates.\");\n   |                                                 \
    \ ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n13 |             assert!(idx == 0 || nums[idx - 1] != *num, \"\
    Subarray cannot have duplicates.\");\n   |                                   \
    \               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpttbooa1p.rs:9:5\n\
    \   |\n8  |   fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |           \
    \                               ----- expected `isize` because of return type\n\
    9  | /     nums.iter()\n10 | |         .enumerate()\n11 | |         .map(|(idx,\
    \ num)| {\n12 | |             assert!(num != 0, \"Subarray must contain at least\
    \ one element.\");\n...  |\n15 | |         })\n16 | |         .min()\n   | |______________^\
    \ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum: isize = 0;\n    for i in 0..nums.len()\
    \ {\n        if nums[i] != 0 && min_sum < nums[i] as isize {\n            min_sum\
    \ = nums[i] as isize;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpm5vg6n14.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = 0;\n    for i in 0..nums.len() {\n        if i + 1 < nums.len()\
    \ && nums[i] + nums[i + 1] > 0 {\n            min_sum += nums[i + 1];\n      \
    \  }\n        min_sum += nums[i];\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `30`,\n right: `1`', /tmp/tmpu2sxxgdl.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Sort the input array and then sum up the minimum\
    \ elements\n    let mut nums = nums.sort_unstable();\n    let mut min_sum: isize\
    \ = 0;\n    let mut i = 1;\n    while i <= nums.len() {\n        // Add the sum\
    \ of the current num to min_sum\n        min_sum += nums.first();\n        //\
    \ Increment i by the current num's size\n        i *= nums.first();\n        //\
    \ Remove the earliest num\n        nums = nums.next();\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpytzz53me.rs:13:21\n   |\n13 |     while i <= nums.len()\
    \ {\n   |                     ^^^ method not found in `()`\n\nerror[E0599]: no\
    \ method named `first` found for unit type `()` in the current scope\n  --> /tmp/tmpytzz53me.rs:15:25\n\
    \   |\n15 |         min_sum += nums.first();\n   |                         ^^^^^\
    \ method not found in `()`\n\nerror[E0599]: no method named `first` found for\
    \ unit type `()` in the current scope\n  --> /tmp/tmpytzz53me.rs:17:19\n   |\n\
    17 |         i *= nums.first();\n   |                   ^^^^^ method not found\
    \ in `()`\n\nerror[E0599]: no method named `next` found for unit type `()` in\
    \ the current scope\n  --> /tmp/tmpytzz53me.rs:19:21\n   |\n19 |         nums\
    \ = nums.next();\n   |                     ^^^^ method not found in `()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // find index of first non zero value\n    let mut\
    \ idx = 0;\n    let mut min_sum = nums[0];\n    for val in &nums[..] {\n     \
    \   if val != 0 {\n            min_sum = std::cmp::min(min_sum, val);\n      \
    \      idx = idx + (val as isize);\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpy1eacddt.rs:13:16\n\
    \   |\n13 |         if val != 0 {\n   |                ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpy1eacddt.rs:14:46\n   |\n14 |             min_sum = std::cmp::min(min_sum,\
    \ val);\n   |                                              ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |  \
    \           min_sum = std::cmp::min(min_sum, *val);\n   |                    \
    \                          +\n\nerror[E0606]: casting `&isize` as `isize` is invalid\n\
    \  --> /tmp/tmpy1eacddt.rs:15:25\n   |\n15 |             idx = idx + (val as isize);\n\
    \   |                         ^---^^^^^^^^^^\n   |                         ||\n\
    \   |                         |help: dereference the expression: `*val`\n   |\
    \                         cannot cast `&isize` as `isize`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0606.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // The input vector needs to be sorted before finding\
    \ the minimum sum.\n    let mut nums_sorted = nums.iter().cloned().sorted();\n\
    \n    if nums_sorted.len() == 0 {\n        return nums[0].clone() as isize;\n\
    \    }\n\n    let mut min_sum = nums[0].clone();\n\n    for &x in nums_sorted\
    \ {\n        if x < 0 {\n            return x; // if x is negative, just return\
    \ x\n        }\n        min_sum -= x;\n    }\n\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmpkv0ej1cj.rs:10:48\n   |\n10 |     let mut nums_sorted\
    \ = nums.iter().cloned().sorted();\n   |                                     \
    \           ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = isize::MAX;\n    let mut sub = Vec::new();\n\
    \    for n in nums.iter() {\n        if n < 0 {\n            return sum;\n   \
    \     }\n        sum = match sum.cmp(&n) {\n            Ordering::Less => sum,\n\
    \            Ordering::Greater => n,\n            Ordering::Equal => {\n     \
    \           // The current sum is the current min of the sub array\n         \
    \       let new_min = sub.iter().min().unwrap();\n                let new_sum\
    \ = sum + n;\n                if new_sum < new_min {\n                    sum\
    \ = new_sum;\n                }\n                new_min\n            }\n    \
    \    };\n        sub.push(n);\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmps0tex5v7.rs:16:13\n   |\n16 |             Ordering::Less => sum,\n \
    \  |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmps0tex5v7.rs:17:13\n\
    \   |\n17 |             Ordering::Greater => n,\n   |             ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmps0tex5v7.rs:18:13\n   |\n18 |             Ordering::Equal\
    \ => {\n   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps0tex5v7.rs:12:16\n   |\n12 |         if n <\
    \ 0 {\n   |                ^\n   |                |\n   |                expected\
    \ `&isize`, found integer\n   |                help: consider borrowing here:\
    \ `&0`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmps0tex5v7.rs:17:34\n\
    \   |\n15 |           sum = match sum.cmp(&n) {\n   |  _______________-\n16 |\
    \ |             Ordering::Less => sum,\n   | |                               ---\
    \ this is found to be of type `isize`\n17 | |             Ordering::Greater =>\
    \ n,\n   | |                                  ^ expected `isize`, found `&isize`\n\
    18 | |             Ordering::Equal => {\n...  |\n26 | |             }\n27 | |\
    \         };\n   | |_________- `match` arms have incompatible types\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n17 |             Ordering::Greater\
    \ => *n,\n   |                                  +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps0tex5v7.rs:22:30\n   |\n22 |                 if new_sum\
    \ < new_min {\n   |                              ^^^^^^^ expected `isize`, found\
    \ reference\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\nhelp: consider dereferencing the borrow\n   |\n22 |                 if\
    \ new_sum < *new_min {\n   |                              +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps0tex5v7.rs:25:17\n   |\n25 |                 new_min\n\
    \   |                 ^^^^^^^ expected `isi"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = vec![0]; // init with 0\n\n    let\
    \ mut i = 0;\n\n    while nums.len() > 0 {\n        let mut min_value = nums[0]\
    \ as isize;\n\n        for i in 1..=nums.len() {\n            if nums[i] < min_value\
    \ {\n                min_value = nums[i];\n            }\n        }\n\n      \
    \  min.push(min_value);\n        nums.remove(&min_value);\n\n        i += 1;\n\
    \    }\n\n    min[0]\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp38u8txl7.rs:23:21\n   |\n\
    23 |         nums.remove(&min_value);\n   |                     ^^^^^^^^^^ expected\
    \ `usize`, found `&isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::i32::MAX;\n    let mut cur_sum\
    \ = 0;\n\n    for i in 0..nums.len() {\n        for j in i..nums.len() {\n   \
    \         cur_sum += nums[j];\n            if cur_sum < min_sum {\n          \
    \      min_sum = cur_sum;\n            }\n        }\n    }\n\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmdnl2sd.rs:15:26\n   |\n\
    15 |             if cur_sum < min_sum {\n   |                          ^^^^^^^\
    \ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |             if cur_sum\
    \ < min_sum.try_into().unwrap() {\n   |                                 ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcmdnl2sd.rs:16:27\n   |\n9  |\
    \     let mut min_sum = std::i32::MAX;\n   |                       -------------\
    \ expected due to this value\n...\n16 |                 min_sum = cur_sum;\n \
    \  |                           ^^^^^^^ expected `i32`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcmdnl2sd.rs:21:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n21 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n21 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    for n in nums.iter()\
    \ {\n        if n < 0 {\n            n = -n;\n        }\n        let mut curr\
    \ = min;\n        for _ in 0..n {\n            if curr > min {\n             \
    \   break;\n            }\n            curr -= nums[n - 1];\n        }\n     \
    \   min = curr as isize;\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7bl8cy41.rs:11:16\n   |\n\
    11 |         if n < 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7bl8cy41.rs:12:17\n\
    \   |\n10 |     for n in nums.iter() {\n   |         - expected due to the type\
    \ of this binding\n11 |         if n < 0 {\n12 |             n = -n;\n   |   \
    \              ^^\n   |                 |\n   |                 expected `&isize`,\
    \ found `isize`\n   |                 help: consider borrowing here: `&-n`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7bl8cy41.rs:15:21\n   |\n15 |  \
    \       for _ in 0..n {\n   |                     ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |         for _ in 0..*n\
    \ {\n   |                     +\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp7bl8cy41.rs:19:21\n   |\n19 |            \
    \ curr -= nums[n - 1];\n   |                     ^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7bl8cy41.rs:21:15\n\
    \   |\n9  |     let mut min = std::i32::MAX;\n   |                   -------------\
    \ expected due to this value\n...\n21 |         min = curr as isize;\n   |   \
    \            ^^^^^^^^^^^^^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7bl8cy41.rs:23:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n23 |     min\n   |     ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n23 |     min.try_into().unwrap()\n   |        ++++++++++++++++"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum: isize = nums[0];\n    for i in 1..nums.len() {\n       \
    \ min_sum = if min_sum > nums[i] { min_sum } else { nums[i] };\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpb2tfgrai.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut min_sum = nums.iter().cloned().sum();\n    let mut max_sum = nums.iter().cloned().sum();\n\
    \n    for num in &nums {\n        min_sum = min_sum.min(num.clone());\n      \
    \  max_sum = max_sum.max(num.clone());\n    }\n\n    min_sum + max_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp7d6by1k_.rs:17:19\n\
    \   |\n13 |     let mut min_sum = nums.iter().cloned().sum();\n   |         -----------\
    \ consider giving `min_sum` a type\n...\n17 |         min_sum = min_sum.min(num.clone());\n\
    \   |                   ^^^^^^^ cannot infer type\n   |\n   = note: type must\
    \ be known at this point\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    debug_assert!(\n        !nums.is_empty(),\n    \
    \    \"minSubArraySum: empty vector\"\n    );\n\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        if num > 0 {\n            min_sum\
    \ = std::cmp::max(\n                std::cmp::max(min_sum, num),\n           \
    \     std::cmp::max(min_sum, nums.iter().rev().next().unwrap())\n            );\n\
    \        }\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm7g3306.rs:16:18\n   |\n\
    16 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgm7g3306.rs:24:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n24 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |  \
    \   *min_sum\n   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return nums.len();\n\
    \    }\n\n    let mut sum = 0;\n    let mut nums_iter = nums.iter();\n    let\
    \ mut current_min = nums_iter.next();\n\n    for num in nums_iter {\n        if\
    \ *current_min > *num {\n            sum += *current_min;\n            current_min\
    \ = num;\n        } else {\n            sum += *num;\n        }\n    }\n\n   \
    \ sum += *current_min;\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppucm9jca.rs:10:16\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n9  |     if\
    \ nums.is_empty() {\n10 |         return nums.len();\n   |                ^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n10 |         return\
    \ nums.len().try_into().unwrap();\n   |                          ++++++++++++++++++++\n\
    \nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmppucm9jca.rs:18:12\n\
    \   |\n18 |         if *current_min > *num {\n   |            ^^^^^^^^^^^^\n\n\
    error[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmppucm9jca.rs:19:20\n\
    \   |\n19 |             sum += *current_min;\n   |                    ^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppucm9jca.rs:20:27\n   |\n15 |\
    \     let mut current_min = nums_iter.next();\n   |                          \
    \ ---------------- expected due to this value\n...\n20 |             current_min\
    \ = num;\n   |                           ^^^ expected enum `Option`, found `&isize`\n\
    \   |\n   = note:   expected enum `Option<&isize>`\n           found reference\
    \ `&isize`\nhelp: try wrapping the expression in `Some`\n   |\n20 |          \
    \   current_min = Some(num);\n   |                           +++++   +\n\nerror[E0614]:\
    \ type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmppucm9jca.rs:26:12\n\
    \   |\n26 |     sum += *current_min;\n   |            ^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = nums.iter().fold(0, |mut sum, i| sum + i);\n    for &x\
    \ in &nums.iter() {\n        min_sum = min_sum - x;\n        if min_sum < 0 {\n\
    \            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&std::slice::Iter<'_, isize>` is not an iterator\n  -->\
    \ /tmp/tmpdwjkuhzi.rs:13:15\n   |\n13 |     for &x in &nums.iter() {\n   |   \
    \            -^^^^^^^^^^^\n   |               |\n   |               `&std::slice::Iter<'_,\
    \ isize>` is not an iterator\n   |               help: consider removing the leading\
    \ `&`-reference\n   |\n   = help: the trait `Iterator` is not implemented for\
    \ `&std::slice::Iter<'_, isize>`\n   = note: `Iterator` is implemented for `&mut\
    \ std::slice::Iter<'_, isize>`, but not for `&std::slice::Iter<'_, isize>`\n \
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&std::slice::Iter<'_, isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_end = nums.len();\n\
    \n    for &n in nums {\n        sum += n;\n        if sum < min_sum {\n      \
    \      min_sum = sum;\n            min_end = nums.iter().position(|x| *x < *n).unwrap();\n\
    \        }\n    }\n\n    min_sum + nums[min_end]\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3a5qorjn.rs:17:9\n   |\n\
    17 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n\n    for n in nums\
    \ {\n        if n < min_sum {\n            min_sum = n;\n        }\n    }\n\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp2v5r5jun.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum: isize = std::i32::MAX;\n    let\
    \ mut min_sum = std::i32::MAX;\n    for i in 0..nums.len() {\n        let curr_sum\
    \ = nums.iter().skip(i).fold(0, |sum, i| sum + i);\n        if curr_sum < min_sum\
    \ {\n            min_sum = curr_sum;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpof37tauu.rs:9:30\n  |\n9 |\
    \     let mut min_sum: isize = std::i32::MAX;\n  |                      -----\
    \   ^^^^^^^^^^^^^ expected `isize`, found `i32`\n  |                      |\n\
    \  |                      expected due to this\n  |\nhelp: you can convert an\
    \ `i32` to an `isize` and panic if the converted value doesn't fit\n  |\n9 | \
    \    let mut min_sum: isize = std::i32::MAX.try_into().unwrap();\n  |        \
    \                                   ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpof37tauu.rs:13:23\n   |\n13 |         if curr_sum < min_sum\
    \ {\n   |                       ^^^^^^^ expected `isize`, found `i32`\n   |\n\
    help: you can convert an `i32` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n13 |         if curr_sum < min_sum.try_into().unwrap() {\n\
    \   |                              ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpof37tauu.rs:14:23\n   |\n10 |     let mut min_sum = std::i32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n14\
    \ |             min_sum = curr_sum;\n   |                       ^^^^^^^^ expected\
    \ `i32`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpof37tauu.rs:17:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    17 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut minSum = 0;\n    for j in 0..nums.len()\
    \ {\n        let mut minDiff = nums[j];\n        for i..nums.len() {\n       \
    \     if i != j {\n                if nums[i] < nums[j] {\n                  \
    \  minDiff = nums[j];\n                } else {\n                    minDiff =\
    \ nums[i];\n                }\n            }\n        }\n        minSum = std::cmp::max(minSum,\
    \ minDiff);\n    }\n    minSum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: missing `in` in `for` loop\n  --> /tmp/tmp7zrmdgn8.rs:12:20\n  \
    \ |\n12 |         for i..nums.len() {\n   |                    ^ help: try adding\
    \ `in` here\n\nerror: expected expression, found `.`\n  --> /tmp/tmp7zrmdgn8.rs:12:20\n\
    \   |\n12 |         for i..nums.len() {\n   |                    ^ expected expression\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = nums[0] as isize;\n    for i in 1..nums.len() {\n     \
    \   min_sum = min(min_sum, nums[i] + minSubArraySum(&nums[i..]));\n    }\n   \
    \ min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpst7dq1li.rs:14:19\n\
    \   |\n14 |         min_sum = min(min_sum, nums[i] + minSubArraySum(&nums[i..]));\n\
    \   |                   ^^^\n...\n19 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n14 |         min_sum = main(min_sum, nums[i] + minSubArraySum(&nums[i..]));\n\
    \   |                   ~~~~\nhelp: consider importing this function\n   |\n1\
    \  | use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpst7dq1li.rs:14:57\n\
    \   |\n14 |         min_sum = min(min_sum, nums[i] + minSubArraySum(&nums[i..]));\n\
    \   |                                                         ^^^^^^^^^^ expected\
    \ struct `Vec`, found `&[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found reference `&[isize]`\nhelp: try using a conversion method\n\
    \   |\n14 |         min_sum = min(min_sum, nums[i] + minSubArraySum((&nums[i..]).to_vec()));\n\
    \   |                                                         +          ++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for i in 0..nums.len()\
    \ {\n        min = min(min, nums[i]);\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmp7mz4ic_j.rs:11:15\n\
    \   |\n9  |     let mut min = isize::MAX;\n   |         ------- `min` has type\
    \ `isize`\n10 |     for i in 0..nums.len() {\n11 |         min = min(min, nums[i]);\n\
    \   |               ^^^--------------\n   |               |\n   |            \
    \   call expression requires function\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold(0, |sum, cur| sum + cur)\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpvef1e3g6.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = 0;\n    for i in 0..nums.len() {\n\
    \        let min_element = &nums[i..i];\n        min.push(min_element.iter().min().unwrap_or(0));\n\
    \    }\n    Vec::from(min).sum()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmpj_2wu2ej.rs:12:13\n   |\n12 |         min.push(min_element.iter().min().unwrap_or(0));\n\
    \   |             ^^^^ method not found in `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj_2wu2ej.rs:12:53\n   |\n12 |         min.push(min_element.iter().min().unwrap_or(0));\n\
    \   |                                                     ^\n   |            \
    \                                         |\n   |                            \
    \                         expected `&isize`, found integer\n   |             \
    \                                        help: consider borrowing here: `&0`\n\
    \nerror[E0277]: the trait bound `Vec<_, _>: From<{integer}>` is not satisfied\n\
    \  --> /tmp/tmpj_2wu2ej.rs:14:5\n   |\n14 |     Vec::from(min).sum()\n   |   \
    \  ^^^^^^^^^ the trait `From<{integer}>` is not implemented for `Vec<_, _>`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <Vec<T, A> as From<Box<[T], A>>>\n             <Vec<T, A> as From<VecDeque<T,\
    \ A>>>\n             <Vec<T> as From<&[T]>>\n             <Vec<T> as From<&mut\
    \ [T]>>\n             <Vec<T> as From<BinaryHeap<T>>>\n             <Vec<T> as\
    \ From<Cow<'a, [T]>>>\n             <Vec<T> as From<[T; N]>>\n             <Vec<u8>\
    \ as From<&str>>\n           and 2 others\n\nerror[E0599]: `Vec<_, _>` is not\
    \ an iterator\n   --> /tmp/tmpj_2wu2ej.rs:14:20\n    |\n14  |       Vec::from(min).sum()\n\
    \    |                      ^^^ `Vec<_, _>` is not an iterator\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `Vec<_, _>: Iterator`\n\
    \            which is required by `&mut Vec<_, _>: Iterator`\n            `[_]:\
    \ Iterator`\n            which is required by `&mut [_]: Iterator`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .skip(1)\n      \
    \  .fold1(|min, x| min + x)\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `fold1` found for struct `Skip` in the current\
    \ scope\n  --> /tmp/tmpp5dj8286.rs:12:10\n   |\n12 |         .fold1(|min, x| min\
    \ + x)\n   |          ^^^^^ method not found in `Skip<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num_i in\
    \ nums {\n        min_sum = min_sum.min(num_i.clone());\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmphz46eaxv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Find the first non-negative number that appears\
    \ in any sub vector\n    let mut min: isize = nums[0];\n    let mut nums_iter\
    \ = nums.iter().cloned().skip(1);\n    for i in nums_iter {\n        if i < 0\
    \ {\n            min = i;\n            break;\n        }\n    }\n\n    // Iterate\
    \ over all sub vectors to find the lowest sum\n    let mut sum_iter: Vec<isize>\
    \ = nums_iter.map(|x| x + min).take_while(|x| x <= nums.len()).collect();\n  \
    \  for i in sum_iter.iter() {\n        if i > min {\n            break;\n    \
    \    }\n    }\n\n    // Return the lowest sum of any sub vector\n    sum_iter.iter().min().unwrap_or(num)\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `num` in this scope\n  --> /tmp/tmpts3vuyuj.rs:28:37\n\
    \   |\n28 |     sum_iter.iter().min().unwrap_or(num)\n   |                   \
    \                  ^^^ help: a local variable with a similar name exists: `nums`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpts3vuyuj.rs:20:83\n   |\n20 |\
    \     let mut sum_iter: Vec<isize> = nums_iter.map(|x| x + min).take_while(|x|\
    \ x <= nums.len()).collect();\n   |                                          \
    \                                         ^^^^^^^^^^ expected `&isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpts3vuyuj.rs:22:16\n\
    \   |\n22 |         if i > min {\n   |                ^^^\n   |              \
    \  |\n   |                expected `&isize`, found `isize`\n   |             \
    \   help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpts3vuyuj.rs:28:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n28 |     sum_iter.iter().min().unwrap_or(num)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n28 |     *sum_iter.iter().min().unwrap_or(num)\n\
    \   |     +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n\n    for elem in nums {\n   \
    \     sum += elem;\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmps_veea2e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for num in nums {\n\
    \        if num > 0 {\n            min = min::min(min, num);\n        }\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `min`\n\
    \  --> /tmp/tmp3fzuowje.rs:12:19\n   |\n12 |             min = min::min(min, num);\n\
    \   |                   ^^^ use of undeclared crate or module `min`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut current_sum\
    \ = isize::MIN;\n    let mut prev_sum = isize::MIN;\n    let mut prev_num: Vec<isize>\
    \ = vec![];\n    for i in nums.iter().rev() {\n        let new_sum = current_sum\
    \ + i;\n        if new_sum < prev_sum {\n            current_sum = new_sum;\n\
    \            prev_sum = new_sum;\n        }\n        if new_sum > prev_sum &&\
    \ prev_sum != isize::MIN {\n            min_sum = prev_sum;\n        }\n     \
    \   prev_num = vec![prev_sum - prev_num.last()];\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `Option<&isize>` from `isize`\n  --> /tmp/tmp1k9cf10y.rs:22:34\n\
    \   |\n22 |         prev_num = vec![prev_sum - prev_num.last()];\n   |       \
    \                           ^ no implementation for `isize - Option<&isize>`\n\
    \   |\n   = help: the trait `Sub<Option<&isize>>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_so_far = nums[0];\n    for i in 1..nums.len() {\n        min_so_far\
    \ = min_so_far + nums[i];\n        if min_so_far > nums[0] {\n            min_so_far\
    \ = nums[0];\n        }\n    }\n    min_so_far\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpgno0rxv3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold(0, |acc, n| acc + n)\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmprz3wlug6.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for i in nums.iter()\
    \ {\n        if i <= 0 {\n            continue;\n        }\n        min = min\
    \ + i;\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpupgnvscn.rs:11:17\n   |\n\
    11 |         if i <= 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .cloned()\n     \
    \   .fold((0.0, 0.0, 0.0), |(min_sum, subsum, curr), num| {\n            (\n \
    \               curr\n                    .min(|a, b| {\n                    \
    \    a.partial_cmp(b).unwrap()\n                    }),\n                min_sum\
    \ + curr, subsum + num,\n            )\n        })\n        .1\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `min` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmpp5li24cb.rs:15:22\n   |\n12 |         .fold((0.0, 0.0, 0.0), |(min_sum,\
    \ subsum, curr), num| {\n   |                                                \
    \   ---- you must specify a type for this binding, like `f32`\n...\n15 |     \
    \                .min(|a, b| {\n   |                      ^^^\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpp5li24cb.rs:18:40\n   |\n18 |\
    \                 min_sum + curr, subsum + num,\n   |                        \
    \                ^ no implementation for `{float} + isize`\n   |\n   = help: the\
    \ trait `Add<isize>` is not implemented for `{float}`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp5li24cb.rs:9:5\n   |\n8  |   fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                          ----- expected `isize`\
    \ because of return type\n9  | /     nums\n10 | |         .iter()\n11 | |    \
    \     .cloned()\n12 | |         .fold((0.0, 0.0, 0.0), |(min_sum, subsum, curr),\
    \ num| {\n...  |\n20 | |         })\n21 | |         .1\n   | |__________^ expected\
    \ `isize`, found floating-point number\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter()\n        .enumerate()\n        .filter(|(&index,\
    \ _)| index > 0)\n        .filter(|(&index, _)| index != nums.len() - 2)\n   \
    \     .fold(0, |acc, &(index, num)| acc + num + nums[index])\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbmq1keua.rs:11:19\n   |\n\
    11 |         .filter(|(&index, _)| index > 0)\n   |                   ^^^^^^ \
    \  - expected due to this\n   |                   |\n   |                   expected\
    \ `usize`, found reference\n   |                   help: you can probably remove\
    \ the explicit borrow: `index`\n   |\n   = note:   expected type `usize`\n   \
    \        found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbmq1keua.rs:12:19\n\
    \   |\n12 |         .filter(|(&index, _)| index != nums.len() - 2)\n   |     \
    \              ^^^^^^   - expected due to this\n   |                   |\n   |\
    \                   expected `usize`, found reference\n   |                  \
    \ help: you can probably remove the explicit borrow: `index`\n   |\n   = note:\
    \   expected type `usize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbmq1keua.rs:13:24\n   |\n13 |         .fold(0, |acc, &(index,\
    \ num)| acc + num + nums[index])\n   |                        ^^^^^^^^^^^^-\n\
    \   |                        |           |\n   |                        |    \
    \       expected due to this\n   |                        expected tuple, found\
    \ reference\n   |\n   = note:  expected tuple `(usize, &isize)`\n           found\
    \ reference `&_`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum_so_far = nums.iter().fold(isize::MIN,\
    \ isize::MAX);\n    let mut min_sum = isize::MIN;\n    for &n in nums.iter().rev()\
    \ {\n        let mut curr_sum = sum_so_far + n;\n        min_sum = std::cmp::min(min_sum,\
    \ curr_sum);\n        sum_so_far = curr_sum;\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(isize, &isize)>` closure, found `isize`\n\
    \    --> /tmp/tmpy1wjf406.rs:9:38\n     |\n9    |     let mut sum_so_far = nums.iter().fold(isize::MIN,\
    \ isize::MAX);\n     |                                      ^^^^ expected an `FnMut<(isize,\
    \ &isize)>` closure, found `isize`\n     |\n     = help: the trait `FnMut<(isize,\
    \ &isize)>` is not implemented for `isize`\nnote: required by a bound in `fold`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().fold(0, |a, b| a.checked_add(a));\n\
    \    for n in nums.iter().skip(1) {\n        min = nums.iter().fold(max, |m, e|\
    \ m.checked_add(*e - n));\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max` in this scope\n  --> /tmp/tmpe99hq1lv.rs:11:32\n\
    \   |\n11 |         min = nums.iter().fold(max, |m, e| m.checked_add(*e - n));\n\
    \   |                                ^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0689]:\
    \ can't call method `checked_add` on ambiguous numeric type `{integer}`\n -->\
    \ /tmp/tmpe99hq1lv.rs:9:48\n  |\n9 |     let mut min = nums.iter().fold(0, |a,\
    \ b| a.checked_add(a));\n  |                                        -       ^^^^^^^^^^^\n\
    \  |                                        |\n  |                           \
    \             you must specify a type for this binding, like `i32`\n\nerror[E0689]:\
    \ can't call method `checked_add` on ambiguous numeric type `{integer}`\n  -->\
    \ /tmp/tmpe99hq1lv.rs:11:46\n   |\n11 |         min = nums.iter().fold(max, |m,\
    \ e| m.checked_add(*e - n));\n   |                                      -    \
    \   ^^^^^^^^^^^\n   |                                      |\n   |           \
    \                           you must specify a type for this binding, like `i32`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0689.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for i in 0..nums.len()\
    \ {\n        let subvec = &nums[..i];\n        let len = subvec.len();\n     \
    \   if len == 0 {\n            continue;\n        }\n        min_sum = subvec\n\
    \            .iter()\n            .map(|n| min(n, min_sum))\n            .sum();\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpa8e9030r.rs:18:22\n\
    \   |\n18 |             .map(|n| min(n, min_sum))\n   |                      ^^^\n\
    ...\n24 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n18 |        \
    \     .map(|n| main(n, min_sum))\n   |                      ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut minimum = nums.iter().min(|a, b| {\n        if *a < *b {\n     \
    \       -a\n        } else {\n            b\n        }\n    });\n\n    let mut\
    \ min = minimum;\n    for (i, &v) in nums.iter().enumerate() {\n        if i ==\
    \ 0 || minimum > v {\n            min = v;\n        }\n\n        let mut v = minimum;\n\
    \        let mut c = v + v;\n\n        // Iterate all possible subvectors\n  \
    \      for (i, &v) in nums.iter().zip(nums.iter().skip(i + 1).rev()).enumerate()\
    \ {\n            if i == 0 || v > v + v {\n                c -= v;\n         \
    \   }\n        }\n\n        if c < minimum {\n            minimum = c;\n     \
    \   }\n    }\n\n    minimum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp6a91og0_.rs:13:40\n\
    \   |\n13 |     let mut minimum = nums.iter().min(|a, b| {\n   |             \
    \                           ^ consider giving this closure parameter a type\n\
    \   |\n   = note: type must be known at this point\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmp6a91og0_.rs:13:35\n\
    \     |\n13   |       let mut minimum = nums.iter().min(|a, b| {\n     |  ___________________________________^^^_-\n\
    \     | |                                   |\n     | |                      \
    \             expected 0 arguments\n14   | |         if *a < *b {\n15   | |  \
    \           -a\n16   | |         } else {\n17   | |             b\n18   | |  \
    \       }\n19   | |     });\n     | |_____- supplied 1 argument\n     |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6a91og0_.rs:23:32\n\
    \   |\n23 |         if i == 0 || minimum > v {\n   |                         \
    \       ^ expected enum `Option`, found `isize`\n   |\n   = note: expected enum\
    \ `Option<&isize>`\n              found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6a91og0_.rs:24:19\n   |\n21 |     let mut min = minimum;\n\
    \   |                   ------- expected due to this value\n...\n24 |        \
    \     min = v;\n   |                   ^ expected enum `Option`, found `isize`\n\
    \   |\n   = note: expected enum `Option<&isize>`\n              found type `isize`\n\
    \nerror[E0369]: cannot add `Option<&isize>` to `Option<&isize>`\n  --> /tmp/tmp6a91og0_.rs:28:23\n\
    \   |\n28 |         let mut c = v + v;\n   |                     - ^ - Option<&isize>\n\
    \   |                     |\n   |                     Option<&isize>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6a91og0_.rs:31:17\n   |\n31 |         for (i,\
    \ &v) in nums.iter().zip(nums.iter().skip(i + 1).rev()).enumerate() {\n   |  \
    \               ^^     ----------------------------------------------------------\
    \ this expression has type `Option<(usize, (&isize, &isize))>`\n   |         \
    \        |\n   |                 expected tuple, found reference\n   |  "
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min = nums.iter().min().unwrap();\n\
    \    for v in nums {\n        if v < min {\n            min = v;\n        }\n\
    \        sum += v;\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpow5nwc6c.rs:12:16\n   |\n\
    12 |         if v < min {\n   |                ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |         if v < *min\
    \ {\n   |                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow5nwc6c.rs:13:19\n\
    \   |\n10 |     let mut min = nums.iter().min().unwrap();\n   |              \
    \     -------------------------- expected due to this value\n...\n13 |       \
    \      min = v;\n   |                   ^\n   |                   |\n   |    \
    \               expected `&isize`, found `isize`\n   |                   help:\
    \ consider borrowing here: `&v`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpow5nwc6c.rs:17:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..nums.len() {\n\
    \        let mut c = nums[i];\n        if i != nums.len() - 1 {\n            c\
    \ += nums[i + 1];\n        }\n        sum += c;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `30`,\n right: `1`', /tmp/tmpimqa5dgv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min = 0;\n    let\
    \ mut max_idx = 0;\n    for &i in nums.iter() {\n        if *i < 0 {\n       \
    \     *i = *i + 1;\n        }\n        sum += *i;\n        if sum > min {\n  \
    \          min = sum;\n            max_idx = i;\n        }\n    }\n    *max_idx\
    \ -= 1;\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp12z71pl4.rs:13:12\n\
    \   |\n13 |         if *i < 0 {\n   |            ^^\n\nerror[E0614]: type `isize`\
    \ cannot be dereferenced\n  --> /tmp/tmp12z71pl4.rs:14:13\n   |\n14 |        \
    \     *i = *i + 1;\n   |             ^^\n\nerror[E0614]: type `isize` cannot be\
    \ dereferenced\n  --> /tmp/tmp12z71pl4.rs:14:18\n   |\n14 |             *i = *i\
    \ + 1;\n   |                  ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp12z71pl4.rs:16:16\n   |\n16 |         sum += *i;\n   |        \
    \        ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp12z71pl4.rs:22:5\n\
    \   |\n22 |     *max_idx -= 1;\n   |     ^^^^^^^^\n   |\nhelp: parentheses are\
    \ required to parse this as an expression\n   |\n12 ~     (for &i in nums.iter()\
    \ {\n13 |         if *i < 0 {\n14 |             *i = *i + 1;\n15 |         }\n\
    16 |         sum += *i;\n17 |         if sum > min {\n ...\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter()\n        .enumerate()\n        .filter(|(_,\
    \ i)| nums[i] != 0)\n        .map(|(i, _)| nums[i])\n        .min()\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&&isize`\n  -->\
    \ /tmp/tmpewghsthp.rs:11:26\n   |\n11 |         .filter(|(_, i)| nums[i] != 0)\n\
    \   |                          ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `&&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<&&isize>`\
    \ for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpewghsthp.rs:9:5\n\
    \   |\n8  |   fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |           \
    \                               ----- expected `isize` because of return type\n\
    9  | /     nums.iter()\n10 | |         .enumerate()\n11 | |         .filter(|(_,\
    \ i)| nums[i] != 0)\n12 | |         .map(|(i, _)| nums[i])\n13 | |         .min()\n\
    \   | |______________^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = i32::MAX;\n    for val in nums.iter().rev()\
    \ {\n        if val > 0 {\n            min = *val + min;\n        }\n    }\n \
    \   min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzn63hubo.rs:11:18\n   |\n\
    11 |         if val > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzn63hubo.rs:12:26\n   |\n12 |             min = *val + min;\n   |  \
    \                        ^^^ expected `isize`, found `i32`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzn63hubo.rs:12:19\n   |\n9  |     let mut min = i32::MAX;\n\
    \   |                   -------- expected due to this value\n...\n12 |       \
    \      min = *val + min;\n   |                   ^^^^^^^^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0277]: cannot add `i32` to `isize`\n  --> /tmp/tmpzn63hubo.rs:12:24\n\
    \   |\n12 |             min = *val + min;\n   |                        ^ no implementation\
    \ for `isize + i32`\n   |\n   = help: the trait `Add<i32>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzn63hubo.rs:15:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    15 |     min\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n15 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().reduce(|min, num|\
    \ min + num);\n    for i in &nums[1..] {\n        if *i < min_sum {\n        \
    \    min_sum = *i;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc3x5pxf0.rs:9:53\n  |\n9 |\
    \     let mut min_sum = nums.iter().reduce(|min, num| min + num);\n  |       \
    \                                              ^^^^^^^^^\n  |                \
    \                                     |\n  |                                 \
    \                    expected `&isize`, found `isize`\n  |                   \
    \                                  help: consider borrowing here: `&(min + num)`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc3x5pxf0.rs:11:17\n   |\n11 |\
    \         if *i < min_sum {\n   |                 ^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3x5pxf0.rs:12:23\n\
    \   |\n9  |     let mut min_sum = nums.iter().reduce(|min, num| min + num);\n\
    \   |                       ---------------------------------------- expected\
    \ due to this value\n...\n12 |             min_sum = *i;\n   |               \
    \        ^^ expected enum `Option`, found `isize`\n   |\n   = note: expected enum\
    \ `Option<&isize>`\n              found type `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc3x5pxf0.rs:15:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n15 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected type `isize`\n              found\
    \ enum `Option<&isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut current_sum\
    \ = 0;\n    for num in nums.iter() {\n        current_sum += num;\n        if\
    \ current_sum < min_sum {\n            min_sum = current_sum;\n        }\n   \
    \ }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp0h87exk3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    for &num in\
    \ nums.iter() {\n        let mut sum = 0;\n        let mut curr_max = num;\n \
    \       for &n in nums.iter() {\n            if curr_max < n {\n             \
    \   break;\n            }\n            sum += n;\n            curr_max = n;\n\
    \        }\n        if sum > min {\n            min = sum;\n        }\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `1`', /tmp/tmpmjs7oucs.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut ans = nums.iter().fold(0, |sum, i| sum +\
    \ i);\n    let mut nums_slice = nums.iter().cloned().skip(1);\n    while nums_slice.any(|n|\
    \ n == 0) {\n        nums_slice = nums_slice.windows(2).flat_map(|w| w.into_iter());\n\
    \    }\n    ans += minSubArraySumHelper(nums_slice, 0);\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `minSubArraySumHelper` in this scope\n\
    \  --> /tmp/tmpq8z8ehot.rs:14:12\n   |\n14 |     ans += minSubArraySumHelper(nums_slice,\
    \ 0);\n   |            ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `windows` found for struct `Skip` in the current scope\n  -->\
    \ /tmp/tmpq8z8ehot.rs:12:33\n   |\n12 |         nums_slice = nums_slice.windows(2).flat_map(|w|\
    \ w.into_iter());\n   |                                 ^^^^^^^ method not found\
    \ in `Skip<Cloned<std::slice::Iter<'_, isize>>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = i32::MAX;\n    let mut cur_min = i32::MAX;\n\
    \    for &n in nums {\n        cur_min = match min {\n            x if x >= n\
    \ => x,\n            x => n,\n        };\n        min = cur_min;\n    }\n    cur_min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeoi07elp.rs:11:9\n   |\n\
    11 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeoi07elp.rs:18:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n18 |     cur_min\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n18 |     cur_min.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_so_far = nums[0] as isize;\n    for\
    \ i in 1..nums.len() {\n        if nums[i] != nums[0] {\n            min_so_far\
    \ = if nums[i] < min_so_far {\n                nums[i]\n            } else {\n\
    \                min_so_far\n            };\n        }\n    }\n    min_so_far\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp4qajjj3u.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ min_element = -1;\n    for i in 0..nums.len() {\n        if min_element == -1\
    \ || nums[i] < nums[min_element] {\n            min_element = i;\n        }\n\
    \        if min_sum > nums[min_element] {\n            min_sum = nums[min_element];\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpyhkrvzjr.rs:10:27\n\
    \   |\n10 |     let mut min_element = -1;\n   |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n   |\n   = help: the following other\
    \ types implement trait `Neg`:\n             &f32\n             &f64\n       \
    \      &i128\n             &i16\n             &i32\n             &i64\n      \
    \       &i8\n             &isize\n           and 8 others\n\nerror[E0277]: the\
    \ trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpyhkrvzjr.rs:12:27\n\
    \   |\n12 |         if min_element == -1 || nums[i] < nums[min_element] {\n  \
    \ |                           ^^ the trait `Neg` is not implemented for `usize`\n\
    \   |\n   = help: the following other types implement trait `Neg`:\n         \
    \    &f32\n             &f64\n             &i128\n             &i16\n        \
    \     &i32\n             &i64\n             &i8\n             &isize\n       \
    \    and 8 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    let mut min = nums[0] as isize;\n    let mut max = nums[0] as isize;\n \
    \   for i in 1..nums.len() {\n        let n = nums[i];\n        let mut j = i;\n\
    \        while j > 0 && nums[j - 1] > n {\n            min = std::cmp::min(min,\
    \ max - nums[j - 1]);\n            j -= 1;\n        }\n\n        max = std::cmp::max(max,\
    \ n);\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpu8lb0gyg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .windows(2)\n        .map(|window|\
    \ window.iter().sum::<isize>())\n        .filter(|window| !window.is_empty())\n\
    \        .min()\n        .unwrap()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_empty` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp55z2w43p.rs:12:34\n   |\n12 |         .filter(|window|\
    \ !window.is_empty())\n   |                                  ^^^^^^^^ method not\
    \ found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold(0isize, |mut acc, &num| {\n   \
    \     acc += num;\n        acc\n    })\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmplo0i0b_y.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_index = 0;\n \
    \   let mut min_val = nums.iter().min().unwrap();\n    for i in nums.iter() {\n\
    \        if i == min_val {\n            sum += min_val;\n            min_index\
    \ += 1;\n        }\n        sum += i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `1`', /tmp/tmpjksqag_2.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = nums[0];\n\n    for num in nums.iter().rev()\
    \ {\n        sum += num;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `1`', /tmp/tmpub5r9e2a.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    debug_assert!(nums.len() > 0);\n    let mut min\
    \ = nums.iter().min().unwrap();\n    let mut min = nums.iter().rev().min().unwrap();\n\
    \    let mut min_sum = 0;\n    for (i, n) in nums.iter().enumerate() {\n     \
    \   let diff = n - min;\n        min_sum += diff * diff;\n        if min_sum <\
    \ 0 {\n            min = n;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `1`', /tmp/tmpag6ky1ez.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::Ordering::{Less,Equal};\n    let mut\
    \ i = 0;\n    let mut min_sum = nums[0] as isize;\n    let mut curr_sum = nums[0]\
    \ as isize;\n    while i < nums.len() {\n        curr_sum += nums[i];\n      \
    \  if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n     \
    \   i += 1;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzvl1jlbw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().cloned().fold(0, |min_sum,\
    \ i| min_sum + i);\n    let mut i = 1;\n    while i + 1 < nums.len() {\n     \
    \   if nums[i + 1] > 0 {\n            min_sum = min_sum + nums[i + 1];\n     \
    \   }\n        i += 1;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `27`,\n right: `1`', /tmp/tmpwan18p3h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().max().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum -= num;\n        if min_sum < 0\
    \ {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `-=` cannot be applied to type\
    \ `&isize`\n  --> /tmp/tmp56w5_hnv.rs:11:9\n   |\n11 |         min_sum -= num;\n\
    \   |         -------^^^^^^^\n   |         |\n   |         cannot use `-=` on\
    \ type `&isize`\n   |\nhelp: `-=` can be used on `isize`, you can dereference\
    \ `min_sum`\n   |\n11 |         *min_sum -= num;\n   |         +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp56w5_hnv.rs:12:22\n   |\n12 |         if min_sum\
    \ < 0 {\n   |                      ^\n   |                      |\n   |      \
    \                expected `&isize`, found integer\n   |                      help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp56w5_hnv.rs:13:23\n\
    \   |\n9  |     let mut min_sum = nums.iter().max().unwrap();\n   |          \
    \             -------------------------- expected due to this value\n...\n13 |\
    \             min_sum = 0;\n   |                       ^\n   |               \
    \        |\n   |                       expected `&isize`, found integer\n   |\
    \                       help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp56w5_hnv.rs:16:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n16 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \   *min_sum\n   |     +\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut curSum = 0;\n    let mut minSum = nums.iter().min().unwrap();\n\
    \    for num in nums {\n        curSum += num;\n        if curSum > minSum {\n\
    \            minSum = curSum;\n        }\n    }\n    minSum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp42cqnicv.rs:13:21\n   |\n\
    13 |         if curSum > minSum {\n   |                     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \       if curSum > *minSum {\n   |                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp42cqnicv.rs:14:22\n   |\n10 |     let mut minSum = nums.iter().min().unwrap();\n\
    \   |                      -------------------------- expected due to this value\n\
    ...\n14 |             minSum = curSum;\n   |                      ^^^^^^\n   |\
    \                      |\n   |                      expected `&isize`, found `isize`\n\
    \   |                      help: consider borrowing here: `&curSum`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp42cqnicv.rs:17:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n17 |     minSum\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    17 |     *minSum\n   |     +\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::mem::uninitialized::<isize>();\n\
    \    for i in 0..nums.len() {\n        let mut cur_min = std::mem::uninitialized::<isize>();\n\
    \        for j in i..nums.len() {\n            cur_min = std::cmp::min(cur_min,\
    \ nums[j] - nums[i]);\n        }\n        min_sum = std::cmp::max(min_sum, cur_min);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "warning: use of deprecated function `std::mem::uninitialized`: use `mem::MaybeUninit`\
    \ instead\n --> /tmp/tmpxbg7cqdl.rs:9:33\n  |\n9 |     let mut min_sum = std::mem::uninitialized::<isize>();\n\
    \  |                                 ^^^^^^^^^^^^^\n  |\n  = note: `#[warn(deprecated)]`\
    \ on by default\n\nwarning: use of deprecated function `std::mem::uninitialized`:\
    \ use `mem::MaybeUninit` instead\n  --> /tmp/tmpxbg7cqdl.rs:11:37\n   |\n11 |\
    \         let mut cur_min = std::mem::uninitialized::<isize>();\n   |        \
    \                             ^^^^^^^^^^^^^\n\nerror[E0133]: call to unsafe function\
    \ is unsafe and requires unsafe function or block\n --> /tmp/tmpxbg7cqdl.rs:9:23\n\
    \  |\n9 |     let mut min_sum = std::mem::uninitialized::<isize>();\n  |     \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n\
    \  |\n  = note: consult the function's documentation for information on how to\
    \ avoid undefined behavior\n\nerror[E0133]: call to unsafe function is unsafe\
    \ and requires unsafe function or block\n  --> /tmp/tmpxbg7cqdl.rs:11:27\n   |\n\
    11 |         let mut cur_min = std::mem::uninitialized::<isize>();\n   |     \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n\
    \   |\n   = note: consult the function's documentation for information on how\
    \ to avoid undefined behavior\n\nerror: aborting due to 2 previous errors; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0133`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0] as isize;\n    let mut max\
    \ = nums[0] as isize;\n    for i in 1..nums.len() {\n        if nums[i] as isize\
    \ > min {\n            min = nums[i];\n        }\n        if nums[i] as isize\
    \ < max {\n            max = nums[i];\n        }\n    }\n    min as isize\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: `<` is interpreted as a start of generic arguments for `isize`,\
    \ not a comparison\n  --> /tmp/tmpkj3pncv9.rs:15:29\n   |\n15 |         if nums[i]\
    \ as isize < max {\n   |                             ^ ----- interpreted as generic\
    \ arguments\n   |                             |\n   |                        \
    \     not interpreted as comparison\n   |\nhelp: try comparing the cast value\n\
    \   |\n15 |         if (nums[i] as isize) < max {\n   |            +         \
    \       +\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = vec![nums.len(), nums.len()];\n\
    \    for i in 0..nums.len() {\n        min_sum[i] = nums[i];\n    }\n    for i\
    \ in 1..nums.len() {\n        for j in i..nums.len() {\n            min_sum[i]\
    \ += min_sum[j];\n        }\n    }\n    min_sum.iter().fold(\n        nums.iter().sum(),\n\
    \        |min_sum, num| {\n            let mut min_sum = *min_sum;\n         \
    \   for k in 0..num.len() {\n                min_sum += num[k];\n            }\n\
    \            min_sum\n        })\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzlk2y6ix.rs:11:22\n   |\n\
    11 |         min_sum[i] = nums[i];\n   |         ----------   ^^^^^^^ expected\
    \ `usize`, found `isize`\n   |         |\n   |         expected due to the type\
    \ of this binding\n\nerror[E0614]: type `isize` cannot be dereferenced\n  -->\
    \ /tmp/tmpzlk2y6ix.rs:21:31\n   |\n21 |             let mut min_sum = *min_sum;\n\
    \   |                               ^^^^^^^^\n\nerror[E0599]: no method named\
    \ `len` found for reference `&usize` in the current scope\n  --> /tmp/tmpzlk2y6ix.rs:22:29\n\
    \   |\n22 |             for k in 0..num.len() {\n   |                        \
    \     ^^^ method not found in `&usize`\n\nerror[E0608]: cannot index into a value\
    \ of type `&usize`\n  --> /tmp/tmpzlk2y6ix.rs:23:28\n   |\n23 |              \
    \   min_sum += num[k];\n   |                            ^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0608, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold(0, |acc, x| acc - x).collect()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `isize` is not an iterator\n --> /tmp/tmpryb_2mxk.rs:9:43\n\
    \  |\n9 |     nums.iter().fold(0, |acc, x| acc - x).collect()\n  |           \
    \                                ^^^^^^^ `isize` is not an iterator\n  |\n  =\
    \ note: the following trait bounds were not satisfied:\n          `isize: Iterator`\n\
    \          which is required by `&mut isize: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .windows(2)\n   \
    \     .min_by_key(|v| {\n            let sum = v[0] + v[1];\n            if sum\
    \ == 0 {\n                0\n            } else {\n                sum\n     \
    \       }\n        })\n        .unwrap_or(0)\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `windows` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpgyz0_u48.rs:11:10\n   |\n11 |         .windows(2)\n\
    \   |          ^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().min(|a, b| a.checked_add(b)).unwrap()\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpc20vp5qc.rs:9:22\n\
    \  |\n9 |     nums.iter().min(|a, b| a.checked_add(b)).unwrap()\n  |         \
    \             ^ consider giving this closure parameter a type\n  |\n  = note:\
    \ type must be known at this point\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n    --> /tmp/tmpc20vp5qc.rs:9:17\n     |\n9   \
    \ |     nums.iter().min(|a, b| a.checked_add(b)).unwrap()\n     |            \
    \     ^^^ ----------------------- supplied 1 argument\n     |                \
    \ |\n     |                 expected 0 arguments\n     |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc20vp5qc.rs:9:5\n\
    \  |\n8 | fn minSubArraySum(nums: Vec<isize>) -> isize {\n  |                \
    \                        ----- expected `isize` because of return type\n9 |  \
    \   nums.iter().min(|a, b| a.checked_add(b)).unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n\
    \  |\n9 |     *nums.iter().min(|a, b| a.checked_add(b)).unwrap()\n  |     +\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0282, E0308.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut minimum = -isize::MAX;\n    let mut index = 0;\n    let mut left\
    \ = &nums[0];\n    let mut right = &nums[0];\n    let mut sum = &nums[0];\n  \
    \  while index < nums.len() {\n        left = &nums[index..];\n        right =\
    \ &nums[index..];\n        sum = &nums[index..];\n        if *right + sum.len()\
    \ <= *left + sum.len() {\n            sum.push(*right + sum.len());\n        }\n\
    \        if *right + sum.len() < minimum {\n            minimum = *right + sum.len();\n\
    \            index = sum.len() - 1;\n        }\n        index += 1;\n    }\n \
    \   minimum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_p41b_p.rs:18:16\n   |\n\
    14 |     let mut left = &nums[0];\n   |                    -------- expected due\
    \ to this value\n...\n18 |         left = &nums[index..];\n   |              \
    \  ^^^^^^^^^^^^^^ expected `isize`, found slice `[isize]`\n   |\n   = note: expected\
    \ reference `&isize`\n              found reference `&[isize]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1_p41b_p.rs:19:17\n   |\n15 |     let mut right\
    \ = &nums[0];\n   |                     -------- expected due to this value\n\
    ...\n19 |         right = &nums[index..];\n   |                 ^^^^^^^^^^^^^^\
    \ expected `isize`, found slice `[isize]`\n   |\n   = note: expected reference\
    \ `&isize`\n              found reference `&[isize]`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1_p41b_p.rs:20:15\n   |\n16 |     let mut sum = &nums[0];\n\
    \   |                   -------- expected due to this value\n...\n20 |       \
    \  sum = &nums[index..];\n   |               ^^^^^^^^^^^^^^ expected `isize`,\
    \ found slice `[isize]`\n   |\n   = note: expected reference `&isize`\n      \
    \        found reference `&[isize]`\n\nerror[E0599]: no method named `len` found\
    \ for reference `&isize` in the current scope\n  --> /tmp/tmp1_p41b_p.rs:21:25\n\
    \   |\n21 |         if *right + sum.len() <= *left + sum.len() {\n   |       \
    \                  ^^^ method not found in `&isize`\n\nerror[E0599]: no method\
    \ named `len` found for reference `&isize` in the current scope\n  --> /tmp/tmp1_p41b_p.rs:21:46\n\
    \   |\n21 |         if *right + sum.len() <= *left + sum.len() {\n   |       \
    \                                       ^^^ method not found in `&isize`\n\nerror[E0599]:\
    \ no method named `push` found for reference `&isize` in the current scope\n \
    \ --> /tmp/tmp1_p41b_p.rs:22:17\n   |\n22 |             sum.push(*right + sum.len());\n\
    \   |                 ^^^^ method not found in `&isize`\n\nerror[E0599]: no method\
    \ named `len` found for reference `&isize` in the current scope\n  --> /tmp/tmp1_p41b_p.rs:22:35\n\
    \   |\n22 |             sum.push(*right + sum.len());\n   |                  \
    \                 ^^^ method not"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum_subarray =\
    \ 0;\n\n    for num in nums {\n        sum += num;\n        if sum > min_sum_subarray\
    \ {\n            min_sum_subarray = sum;\n        }\n    }\n\n    min_sum_subarray\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpedaivd5z.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .map(|n| {\n    \
    \        *n\n        })\n        .enumerate()\n        .min_by(|(n, _), &i| i\
    \ as isize)\n        .unwrap_or_else(|| {\n            0\n        })\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp2oyfue_.rs:15:30\n   |\n\
    15 |         .min_by(|(n, _), &i| i as isize)\n   |                          \
    \    ^^^^^^^^^^ expected enum `std::cmp::Ordering`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp2oyfue_.rs:17:13\n   |\n17 |             0\n\
    \   |             ^ expected tuple, found integer\n   |\n   = note: expected tuple\
    \ `(usize, isize)`\n               found type `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp2oyfue_.rs:9:5\n   |\n8  |   fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                          ----- expected `isize`\
    \ because of return type\n9  | /     nums\n10 | |         .iter()\n11 | |    \
    \     .map(|n| {\n12 | |             *n\n...  |\n17 | |             0\n18 | |\
    \         })\n   | |__________^ expected `isize`, found tuple\n   |\n   = note:\
    \ expected type `isize`\n             found tuple `(usize, isize)`\n\nerror[E0605]:\
    \ non-primitive cast: `(usize, isize)` as `isize`\n  --> /tmp/tmpp2oyfue_.rs:15:30\n\
    \   |\n15 |         .min_by(|(n, _), &i| i as isize)\n   |                   \
    \           ^^^^^^^^^^ an `as` expression can only be used to convert between\
    \ primitive types or to coerce to a specific trait object\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0605.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    for i in 1..nums.len()\
    \ {\n        let current_sum = nums.iter().sum();\n        min_sum = if current_sum\
    \ < min_sum {\n            current_sum\n        } else {\n            min_sum\n\
    \        };\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp95f8hwp7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // The idea is basically the same, but the implementation\
    \ is different since we are traversing a sorted list\n    // and need to keep\
    \ track of the minimum sum.\n    if nums.is_empty() {\n        return 0;\n   \
    \ }\n\n    let mut min = nums[0];\n    let mut min_sum = 1;\n\n    for &n in nums\
    \ {\n        if n >= min {\n            let sum = min + n;\n            if sum\
    \ < min_sum {\n                min_sum = sum;\n            }\n        }\n    \
    \    min = n;\n    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzkyd_dnu.rs:18:9\n   |\n\
    18 |     for &n in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter()\n        .enumerate()\n        .map(|(i,\
    \ &x)| {\n            let mut min_sum = x;\n            let mut prev_sum = x;\n\
    \            if i == 0 {\n                return x;\n            }\n         \
    \   if nums[i - 1] < x {\n                min_sum = nums[i - 1];\n           \
    \ }\n            if i - 1 < x {\n                prev_sum = nums[i - 1];\n   \
    \         }\n            prev_sum + min_sum\n        })\n        .min()\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8j99o9e_.rs:20:24\n   |\n\
    20 |             if i - 1 < x {\n   |                        ^ expected `usize`,\
    \ found `isize`\n   |\nnote: return type inferred to be `usize` here\n  --> /tmp/tmp8j99o9e_.rs:15:24\n\
    \   |\n15 |                 return x;\n   |                        ^\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |             if i - 1 < x.try_into().unwrap() {\n   |       \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8j99o9e_.rs:9:5\n   |\n8  |   fn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n   |                                          ----- expected `isize`\
    \ because of return type\n9  | /     nums.iter()\n10 | |         .enumerate()\n\
    11 | |         .map(|(i, &x)| {\n12 | |             let mut min_sum = x;\n...\
    \  |\n24 | |         })\n25 | |         .min()\n   | |______________^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0]\n    for &n in nums.iter()\
    \ {\n        if n == min {\n            continue;\n        }\n        if n < min\
    \ {\n            min = n;\n        }\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0usq7osc.rs:9:26\n\
    \   |\n9  |     let mut min = nums[0]\n   |                          ^ help: add\
    \ `;` here\n10 |     for &n in nums.iter() {\n   |     --- unexpected token\n\n\
    error: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // Initialize min_sum to be negative infinity to\
    \ represent that the minimum\n    // sum hasn't been found yet.\n    let mut min_sum\
    \ = std::isize::MAX;\n\n    for &num in nums.iter().rev() {\n        let mut sum\
    \ = num;\n        for _ in 0..nums.len() {\n            // If sum is greater than\
    \ or equal to min_sum then ignore all the\n            // nums after the current\
    \ index, otherwise add the nums and update\n            // the sum\n         \
    \   if sum >= min_sum {\n                sum = sum + &nums[_];\n            }\
    \ else {\n                break;\n            }\n        }\n        min_sum =\
    \ sum;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: in expressions, `_` can only be used on the left-hand side of an\
    \ assignment\n  --> /tmp/tmpw06_lidk.rs:20:35\n   |\n20 |                 sum\
    \ = sum + &nums[_];\n   |                                   ^ `_` not allowed\
    \ here\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.len() as isize;\n    let\
    \ mut current = nums[0] as isize;\n    for &x in nums {\n        min_sum = if\
    \ current > x { current } else { min_sum as isize };\n        current = x;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlnkurjw.rs:11:9\n   |\n\
    11 |     for &x in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .fold(0, |min_so_far,\
    \ x| {\n            *min_so_far = if *min_so_far < x { *min_so_far } else { x\
    \ };\n            (*min_so_far)\n        })\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmpbdpfi9o0.rs:13:13\n\
    \   |\n13 |             (*min_so_far)\n   |             ^           ^\n   |\n\
    \   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n\
    \   |\n13 -             (*min_so_far)\n13 +             *min_so_far\n   | \n\n\
    error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpbdpfi9o0.rs:12:13\n\
    \   |\n12 |             *min_so_far = if *min_so_far < x { *min_so_far } else\
    \ { x };\n   |             ^^^^^^^^^^^\n\nerror[E0614]: type `isize` cannot be\
    \ dereferenced\n  --> /tmp/tmpbdpfi9o0.rs:12:30\n   |\n12 |             *min_so_far\
    \ = if *min_so_far < x { *min_so_far } else { x };\n   |                     \
    \         ^^^^^^^^^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n \
    \ --> /tmp/tmpbdpfi9o0.rs:12:48\n   |\n12 |             *min_so_far = if *min_so_far\
    \ < x { *min_so_far } else { x };\n   |                                      \
    \          ^^^^^^^^^^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmpbdpfi9o0.rs:13:13\n   |\n13 |             (*min_so_far)\n   | \
    \            ^^^^^^^^^^^^^\n\nerror: aborting due to 4 previous errors; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.len() == 0 {\n        return 0;\n    }\n\
    \n    let mut min_sum = nums.iter().take(nums.len() - 1).sum();\n    let mut max_sum\
    \ = nums.iter().skip(1).sum();\n    for i in nums.len() - 2 {\n        min_sum\
    \ = min_sum.min(nums[i]);\n        max_sum = max_sum.max(nums[i]);\n    }\n\n\
    \    if min_sum > max_sum {\n        min_sum\n    } else {\n        max_sum\n\
    \    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmp80iwcbm3.rs:15:14\n\
    \   |\n15 |     for i in nums.len() - 2 {\n   |              ^^^^^^^^^^^^^^ `usize`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `usize`\n   = note: if you want to iterate between `start` until a value\
    \ `end`, use the exclusive range syntax `start..end` or the inclusive range syntax\
    \ `start..=end`\n   = note: required because of the requirements on the impl of\
    \ `IntoIterator` for `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976657
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums\n        .iter()\n        .filter(|&x| x !=\
    \ 0)\n        .fold(0, |a, &x| {\n            debug_assert!(x >= 0);\n       \
    \     debug_assert!(x <= a);\n            a\n        })\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpipthsj66.rs:11:24\n\
    \   |\n11 |         .filter(|&x| x != 0)\n   |                        ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::i32::MAX;\n    let mut min_index\
    \ = std::i32::MAX;\n\n    for i in nums.iter().rev().skip(1) {\n        for j\
    \ in nums.iter().rev().skip(i + 1) {\n            let sum = nums[j] + nums[i];\n\
    \            if sum < min_sum {\n                min_sum = sum;\n            \
    \    min_index = j;\n            }\n        }\n    }\n\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpknwege62.rs:13:41\n   |\n\
    13 |         for j in nums.iter().rev().skip(i + 1) {\n   |                  \
    \                       ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |         for j in nums.iter().rev().skip((i + 1).try_into().unwrap())\
    \ {\n   |                                         +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpknwege62.rs:14:23\n\
    \   |\n14 |             let sum = nums[j] + nums[i];\n   |                   \
    \    ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpknwege62.rs:14:33\n\
    \   |\n14 |             let sum = nums[j] + nums[i];\n   |                   \
    \              ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpknwege62.rs:17:29\n   |\n10 |\
    \     let mut min_index = std::i32::MAX;\n   |                         -------------\
    \ expected due to this value\n...\n17 |                 min_index = j;\n   | \
    \                            ^ expected `i32`, found `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpknwege62.rs:22:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n22 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ pani"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut nums_sum = nums.sum();\n    let mut min_sum\
    \ = nums.iter().sum();\n    for v in &nums {\n        assert!(min_sum >= v);\n\
    \        let new_sum = nums_sum + v;\n        min_sum = std::cmp::min(min_sum,\
    \ new_sum);\n        nums_sum = new_sum;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpriiujbez.rs:9:29\n\
    \    |\n9   |       let mut nums_sum = nums.sum();\n    |                    \
    \           ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n     \
    \       which is required by `&mut Vec<isize>: Iterator`\n            `[isize]:\
    \ Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]:\
    \ can't compare `isize` with `&isize`\n  --> /tmp/tmpriiujbez.rs:12:25\n   |\n\
    12 |         assert!(min_sum >= v);\n   |                         ^^ no implementation\
    \ for `isize < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        0\n    } else {\n\
    \        let mut ans = nums[0] as isize;\n        for v in &nums[1..] {\n    \
    \        ans = min(ans, v + ans);\n        }\n        ans\n    }\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpoe4j9x75.rs:14:19\n\
    \   |\n14 |             ans = min(ans, v + ans);\n   |                   ^^^\n\
    ...\n20 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n14 |        \
    \     ans = main(ans, v + ans);\n   |                   ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().cloned().sum();\n    for\
    \ &x in nums {\n        if x < 0 {\n            min -= x;\n        } else {\n\
    \            min += x;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnko4yf4t.rs:10:9\n   |\n\
    10 |     for &x in nums {\n   |         ^^    ---- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n\n    for start in 0..nums.len()\
    \ {\n        for end in start + nums.len() - 1 {\n            let subset = nums[start..end];\n\
    \n            let sum = subset.iter().sum::<isize>();\n\n            if sum <\
    \ min {\n                min = sum;\n            }\n        }\n    }\n\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmp_3m2z7f3.rs:12:20\n\
    \   |\n12 |         for end in start + nums.len() - 1 {\n   |                \
    \    ^^^^^^^^^^^^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait\
    \ `Iterator` is not implemented for `usize`\n   = note: if you want to iterate\
    \ between `start` until a value `end`, use the exclusive range syntax `start..end`\
    \ or the inclusive range syntax `start..=end`\n   = note: required because of\
    \ the requirements on the impl of `IntoIterator` for `usize`\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \  --> /tmp/tmp_3m2z7f3.rs:13:17\n   |\n13 |             let subset = nums[start..end];\n\
    \   |                 ^^^^^^ doesn't have a size known at compile-time\n   |\n\
    \   = help: the trait `Sized` is not implemented for `[isize]`\n   = note: all\
    \ local variables must have a statically known size\n   = help: unsized locals\
    \ are gated as an unstable feature\nhelp: consider borrowing here\n   |\n13 |\
    \             let subset = &nums[start..end];\n   |                          +\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum: isize = 0;\n    for v in nums.iter()\
    \ {\n        for (i, e) in nums.iter().enumerate() {\n            if i != i {\n\
    \                min_sum += *e;\n            }\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3x6a1tv6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = i32::MAX;\n    let mut current_sum\
    \ = 0;\n    for n in nums.iter() {\n        if n >= 0 {\n            current_sum\
    \ += n;\n            min_sum = std::cmp::min(min_sum, current_sum);\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2c95kh8i.rs:12:17\n   |\n\
    12 |         if n >= 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2c95kh8i.rs:14:46\n\
    \   |\n14 |             min_sum = std::cmp::min(min_sum, current_sum);\n   | \
    \                                             ^^^^^^^^^^^ expected `i32`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and panic if the\
    \ converted value doesn't fit\n   |\n14 |             min_sum = std::cmp::min(min_sum,\
    \ current_sum.try_into().unwrap());\n   |                                    \
    \                     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2c95kh8i.rs:17:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n17 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n17 |     min_sum.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    let mut min_idx\
    \ = std::usize::MAX;\n    let mut min_num: isize = nums.iter().max().unwrap();\n\
    \    for i in nums.iter().rev() {\n        if i != min_num {\n            min_num\
    \ += i;\n            min_idx = i;\n        }\n        if min_num < min {\n   \
    \         min = min_num;\n        }\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeuqur3s0.rs:11:30\n   |\n\
    11 |     let mut min_num: isize = nums.iter().max().unwrap();\n   |          \
    \            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |                      |\n   |                      expected due to this\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |     let mut min_num:\
    \ isize = *nums.iter().max().unwrap();\n   |                              +\n\n\
    error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpeuqur3s0.rs:13:14\n\
    \   |\n13 |         if i != min_num {\n   |              ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpeuqur3s0.rs:15:23\n   |\n10 |     let mut min_idx = std::usize::MAX;\n\
    \   |                       --------------- expected due to this value\n...\n\
    15 |             min_idx = i;\n   |                       ^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeuqur3s0.rs:17:22\n\
    \   |\n17 |         if min_num < min {\n   |                      ^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n17 |         if min_num < min.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpeuqur3s0.rs:18:19\n   |\n9  |     let mut min = std::i32::MAX;\n\
    \   |                   ------------- expected due to this value\n...\n18 |  \
    \           min = min_num;\n   |                   ^^^^^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeuqur3s0.rs:21:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of re"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut min_pos = 0;\n\
    \n    // Search for the minimum sum\n    for pos in (0..nums.len()).rev() {\n\
    \        let sum = nums[pos];\n        if sum < min {\n            min = sum;\n\
    \            min_pos = pos;\n        }\n    }\n\n    // If there is no solution,\
    \ return the minimum sum so far\n    if min_pos == nums.len() - 1 {\n        min\n\
    \    } else {\n        // Recurse on the rest of the vector\n        let sum =\
    \ minSubArraySum(nums[min_pos + 1..].iter().cloned());\n        sum + min\n  \
    \  }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1u0e9tj9.rs:26:34\n   |\n\
    26 |         let sum = minSubArraySum(nums[min_pos + 1..].iter().cloned());\n\
    \   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \n    // 1. Find the maximum length of sub-array in nums\n    let mut sub_array_max\
    \ = nums[0];\n    for elem in nums.iter().rev() {\n        if elem > sub_array_max\
    \ {\n            sub_array_max = elem;\n        }\n    }\n\n    // 2. Find the\
    \ number of sub-arrays in nums that is less than the maximum length\n    let mut\
    \ num_less_than_max = nums.len();\n    for elem in nums.iter().rev() {\n     \
    \   if elem <= sub_array_max {\n            num_less_than_max += 1;\n        }\n\
    \    }\n\n    // 3. Find the minimum sum of elements of each sub-array\n    let\
    \ mut min_sum = 0;\n    for i in 0..num_less_than_max {\n        min_sum += nums[sub_array_max\
    \ - i];\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfcsr7qho.rs:16:19\n   |\n\
    16 |         if elem > sub_array_max {\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&sub_array_max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfcsr7qho.rs:17:29\n   |\n14 |     let mut sub_array_max\
    \ = nums[0];\n   |                             ------- expected due to this value\n\
    ...\n17 |             sub_array_max = elem;\n   |                            \
    \ ^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n17 |             sub_array_max = *elem;\n   |                \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfcsr7qho.rs:24:20\n\
    \   |\n24 |         if elem <= sub_array_max {\n   |                    ^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&isize`, found `isize`\n\
    \   |                    help: consider borrowing here: `&sub_array_max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfcsr7qho.rs:32:41\n   |\n32 |         min_sum\
    \ += nums[sub_array_max - i];\n   |                                         ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from\
    \ `isize`\n  --> /tmp/tmpfcsr7qho.rs:32:39\n   |\n32 |         min_sum += nums[sub_array_max\
    \ - i];\n   |                                       ^ no implementation for `isize\
    \ - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfcsr7qho.rs:32:20\n\
    \   |\n32 |         min_sum += nums[sub_array_max - i];\n   |                 "
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().fold(0, |sum, &i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        if i >= min {\n        \
    \    min = i;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpydobb5z4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    for i in nums.iter().rev()\
    \ {\n        if i >= min {\n            min = i;\n        }\n    }\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp743h993t.rs:11:17\n   |\n\
    11 |         if i >= min {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found `isize`\n   |                 help:\
    \ consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp743h993t.rs:12:19\n\
    \   |\n9  |     let mut min = std::isize::MAX;\n   |                   ---------------\
    \ expected due to this value\n...\n12 |             min = i;\n   |           \
    \        ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |             min = *i;\n   |                   +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = i32::MAX;\n    for i in 1..nums.len()\
    \ {\n        if nums[i] == 0 { continue; }\n        let mut sum = i32::MIN;\n\
    \        for j in 1..i {\n            sum += nums[j];\n        }\n        if sum\
    \ < min_sum {\n            min_sum = sum;\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqrjpirjx.rs:14:20\n   |\n\
    14 |             sum += nums[j];\n   |                    ^^^^^^^ expected `i32`,\
    \ found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `i32`\n  --> /tmp/tmpqrjpirjx.rs:14:17\n\
    \   |\n14 |             sum += nums[j];\n   |                 ^^ no implementation\
    \ for `i32 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqrjpirjx.rs:20:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    20 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `i32`\n   |\nhelp:\
    \ you can convert an `i32` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     min_sum.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().map(|v| v + 1).min_by_key(|n| n)\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf6xkw3nm.rs:9:5\n  |\n8 |\
    \ fn minSubArraySum(nums: Vec<isize>) -> isize {\n  |                        \
    \                ----- expected `isize` because of return type\n9 |     nums.iter().map(|v|\
    \ v + 1).min_by_key(|n| n)\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    for &n in nums.iter()\
    \ {\n        min = min + n;\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpop90fx54.rs:11:21\n   |\n\
    11 |         min = min + n;\n   |                     ^ expected `i32`, found\
    \ `isize`\n\nerror[E0277]: cannot add `isize` to `i32`\n  --> /tmp/tmpop90fx54.rs:11:19\n\
    \   |\n11 |         min = min + n;\n   |                   ^ no implementation\
    \ for `i32 + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `i32`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpop90fx54.rs:13:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     min\n   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can\
    \ convert an `i32` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n13 |     min.try_into().unwrap()\n   |        ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    for i in nums.iter()\
    \ {\n        if i > min {\n            min = i;\n        }\n    }\n    min\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj1e9w4g0.rs:11:16\n   |\n\
    11 |         if i > min {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj1e9w4g0.rs:12:19\n\
    \   |\n9  |     let mut min = std::isize::MAX;\n   |                   ---------------\
    \ expected due to this value\n...\n12 |             min = i;\n   |           \
    \        ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |             min = *i;\n   |                   +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum: isize = 0;\n    let mut sum = 0;\n\
    \n    for n in nums {\n        sum += n;\n\n        if min_sum < sum {\n     \
    \       min_sum = sum;\n        }\n    }\n\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp4cl2ormm.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976658
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cur_sum = nums[0]\n    let mut min_sum =\
    \ nums[0]\n    for &n in nums.iter().skip(1) {\n        cur_sum += n;\n      \
    \  if cur_sum > &min_sum {\n            min_sum = cur_sum;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpc5y6fvtf.rs:9:30\n\
    \   |\n9  |     let mut cur_sum = nums[0]\n   |                              ^\
    \ help: add `;` here\n10 |     let mut min_sum = nums[0]\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpc5y6fvtf.rs:10:30\n\
    \   |\n10 |     let mut min_sum = nums[0]\n   |                              ^\
    \ help: add `;` here\n11 |     for &n in nums.iter().skip(1) {\n   |     --- unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc5y6fvtf.rs:13:22\n \
    \  |\n13 |         if cur_sum > &min_sum {\n   |                      ^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n13 -         if cur_sum > &min_sum {\n13 +         if cur_sum > min_sum\
    \ {\n   | \n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976658
