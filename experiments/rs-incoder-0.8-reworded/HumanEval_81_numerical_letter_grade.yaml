name: HumanEval_81_numerical_letter_grade
language: rs
prompt: "/// It is the last week of the semester and the teacher has to give the grades\n\
  /// to students. The teacher has been making her own algorithm for grading.\n///\
  \ The only problem is, she has lost the code she used for grading.\n/// She has\
  \ given you a vector of GPAs for some students and you have to write \n/// a function\
  \ that can output a vector of letter grades using the following table:\n/// GPA\
  \       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A\
  \ \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7       \
  \         B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7\
  \                C\n/// > 1.3                C-\n/// > 1.0                D+ \n\
  /// > 0.7                D \n/// > 0.0                D-\n/// 0.0              \
  \  E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"\
  A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
  A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
  \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
  C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
  \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
  D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n   \
  \ assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"),\
  \ String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
  B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
  D-\")]);\n}\n"
completions: ["    let mut grade_vec: Vec<String> = vec![];\n    for grade in grades\
    \ {\n        if grade > 4.0 && grade <= 4.7 { grade_vec.push(\"A+\"); }\n    \
    \    if grade > 3.8 && grade <= 3.9 { grade_vec.push(\"A-\"); }\n        if grade\
    \ > 3.0 && grade <= 3.8 { grade_vec.push(\"A\"); }\n        if grade > 2.8 &&\
    \ grade <= 2.9 { grade_vec.push(\"B+\"); }\n        if grade > 2.1 && grade <=\
    \ 2.9 { grade_vec.push(\"B\"); }\n        if grade > 1.7 && grade <= 2.1 { grade_vec.push(\"\
    B-\"); }\n        if grade > 1.3 && grade <= 1.7 { grade_vec.push(\"C+\"); }\n\
    \        if grade > 1.0 { grade_vec.push(\"C\"); }\n        if grade > 0.7 { grade_vec.push(\"\
    D\"); }\n        if grade > 0.0 { grade_vec.push(\"D-\"); }\n        if grade\
    \ == 0.0 { grade_vec.push(\"E\"); }\n    }\n    grade_vec", "    let mut letter_grades:\
    \ Vec<String> = vec![];\n    for (i, g) in grades.iter().enumerate() {\n     \
    \   if i > 0 {\n            letter_grades.push(String::from(\"-\"));\n       \
    \ }\n        let new_grade: f64 = g * 2 - 1;\n        letter_grades.push(\n  \
    \          match new_grade {\n                0.0 => \"E\",\n                1.0\
    \ => \"D\",\n                2.0 => \"D+\",\n                3.0 => \"C\",\n \
    \               4.0 => \"C+\",\n                5.0 => \"B\",\n              \
    \  6.0 => \"B+\",\n                7.0 => \"A\",\n                8.0 => \"A+\"\
    ,\n                _ => String::from(\"B+\"),\n            }\n        );\n   \
    \ }\n    letter_grades", "    let mut counter = 1;\n    let mut letter_grade:\
    \ Vec<String> = vec![];\n    \n    for i in grades {\n        letter_grade.push(\
    \ format!(\"{}+\", counter) );\n        counter += i;\n        letter_grade.push(\
    \ format!(\"{}\", counter) );\n        counter -= i;\n        letter_grade.push(\
    \ format!(\"{}-\", counter) );\n    }\n    \n    letter_grade", "    let mut grades_copy\
    \ = grades.clone();\n    let mut letter_grades: Vec<String> = Vec::new();\n  \
    \  \n    let mut grade = grades_copy.len();\n    let mut prev_grade = grades_copy.len()\
    \ - 1;\n    \n    while grade != 0 {\n        if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            grade = grade - 1.0;\n        } else if grade >= 0.9 {\n\
    \            letter_grades.push(String::from(\"A\"));\n            grade = grade\
    \ - 0.9;\n        } else if grade >= 0.8 {\n            letter_grades.push(String::from(\"\
    A-\"));\n            grade = grade - 0.8;\n        } else {\n            letter_grades.push(String::from(\"\
    B+\"));\n            grade = grade - 0.7;\n        }\n    }\n    if prev_grade\
    \ > grades_copy.len() {\n        letter_grades.push(String::from(\"E\"));\n  \
    \  }\n    letter_grades", "    let mut output: Vec<String> = vec![];\n\n    let\
    \ mut grade_counter: usize = 1;\n    for grade in grades {\n        let mut output:\
    \ Vec<String> = vec![];\n\n        output.push(String::from(format!(\"{}\", grade\
    \ as f64)));\n        grade_counter += 1;\n        while grade_counter != 5 {\n\
    \            if grade < 4.0 {\n                if grade_counter > 1 {\n      \
    \              output.push(String::from(\"A+\"));\n                }\n       \
    \         break;\n            }\n            match grade {\n                2.7\
    \ => grade_counter -= 1,\n                2.3 => grade_counter -= 1,\n       \
    \         2.0 => grade_counter -= 1,\n                1.7 => grade_counter -=\
    \ 1,\n                1.3 => grade_counter -= 1,\n                1.0 => grade_counter\
    \ -= 1,\n                0.7 => grade_counter -= 1,\n                0.0 => grade_counter\
    \ -= 1,\n                _ => break,\n            };\n            output.push(String::from(format!(\"\
    {}\", grade as f64)));\n            grade_counter += 1;\n        }\n        output.push(String::from(\"\
    E\"));\n        output\n    }\n    output", "    let mut letter_grades = Vec::new();\n\
    \    let mut temp_grade = grades.clone();\n    while !temp_grade.is_empty() {\n\
    \        let mut gp = 0;\n        while !temp_grade.is_empty() && temp_grade.len()\
    \ > 1 {\n            gp += temp_grade.last().unwrap();\n            temp_grade.pop();\n\
    \        }\n        temp_grade.clear();\n        letter_grades.push(String::from(format!(\"\
    {}+\", gp)));\n    }\n    while !letter_grades.is_empty() {\n        letter_grades.pop();\n\
    \    }\n    letter_grades", "    grades\n        .iter()\n        .enumerate()\n\
    \        .filter(|&(_, grade)| grade > 0)\n        .map(|(i, grade)| {\n     \
    \       match i {\n                0 => String::from(\"A+\"),\n              \
    \  1 => String::from(\"A\"),\n                2 => String::from(\"A-\"),\n   \
    \             3 => String::from(\"B+\"),\n                4 => String::from(\"\
    B\"),\n                5 => String::from(\"B-\"),\n                6 => String::from(\"\
    C+\"),\n                7 => String::from(\"C\"),\n                8 => String::from(\"\
    C-\"),\n                9 => String::from(\"D+\"),\n                _ => String::from(\"\
    D\"),\n            }\n        })", "    if grades.len() == 0 {\n        return\
    \ vec![\"F\"];\n    }\n    \n    let grades_array = grades.iter().map(|x| x.log10()).collect::<Vec<f64>>();\n\
    \    \n    let mut result = vec![];\n    \n    let min = grades_array[0];\n  \
    \  let max = grades_array[grades_array.len() - 1];\n\n    // The loop below is\
    \ for computing the grade\n    // The result will be added to result\n    // when\
    \ it is done.\n    for i in 0..grades_array.len() {\n        let diff = max -\
    \ grades_array[i];\n        if diff <= 0.0 {\n            // The difference is\
    \ positive or zero\n            if diff == 0.0 {\n                result.append(format!(\"\
    {}\", grades_array[i]));\n            } else {\n                result.append(format!(\"\
    -{}\", grades_array[i]));\n            }\n        } else if diff < 0.0 {\n   \
    \         // The difference is negative\n            result.append(format!(\"\
    +{}\", grades_array[i]));\n        } else {\n            // The difference is\
    \ positive and positive\n            if grades_array[i] > min {\n            \
    \    result.append(format!(\"{}\", grades_array[i]));\n            } else {\n\
    \                result.append(format!(\"-{}\", grades_array[i]));\n         \
    \   }\n        }\n    }\n\n    result", "    let mut letter_grades: Vec<String>\
    \ = vec![];\n    let mut min_gpa = grades[0]; // Minimum GPA\n    let mut max_gpa\
    \ = grades.last(); // Maximum GPA\n    for grade in grades.iter().rev() {\n  \
    \      let gpa = grade / max_gpa; // Calculate GPA for this number\n        let\
    \ letter_grade = if gpa >= 2.0 { gpa.to_string() } else { gpa.to_string() };\n\
    \        letter_grades.push(letter_grade);\n        min_gpa = min_gpa.min(gpa);\n\
    \        max_gpa = max_gpa.max(gpa);\n    }\n    let gpa_range = max_gpa - min_gpa;\n\
    \    for grade in grades {\n        let gpa = grade / gpa_range;\n        let\
    \ letter_grade = if gpa >= 2.0 { gpa.to_string() } else { gpa.to_string() };\n\
    \        letter_grades.push(letter_grade);\n    }\n    letter_grades", "    let\
    \ mut grades_clone = grades.clone();\n    let mut letter_grades = vec![];\n  \
    \  for grade in grades_clone {\n        match grade {\n            0...0.9 =>\
    \ {\n                letter_grades.push(String::from(\"A-\"));\n            }\n\
    \            0.9...1.8 => {\n                letter_grades.push(String::from(\"\
    B-\"));\n            }\n            1.8...2.7 => {\n                letter_grades.push(String::from(\"\
    B-\"));\n            }\n            2.7...3.6 => {\n                letter_grades.push(String::from(\"\
    B-\"));\n            }\n            3.6...4.5 => {\n                letter_grades.push(String::from(\"\
    B+\"));\n            }\n            4.5...5.4 => {\n                letter_grades.push(String::from(\"\
    B+\"));\n            }\n            5.4...6.3 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            6.3...7.2 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            7.2...8.1 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            8.1...9.0 => {\n                letter_grades.push(String::from(\"\
    C+\"));\n            }\n            9.0...1.0 => {\n                letter_grades.push(String::from(\"\
    D+\"));\n            }\n            _ => {\n                letter_grades.push(String::from(\"\
    D\"));\n            }\n        }\n    }\n    letter_grades", "    let mut letters\
    \ = vec![];\n    for grade in grades.iter() {\n        let grade = grades[grade\
    \ as usize] as f64;\n        let mut letter = String::from(\"E\");\n        if\
    \ grade > 3.5 {\n            letter = String::from(\"D\");\n        } else if\
    \ grade > 3.0 {\n            letter = String::from(\"C\");\n        } else if\
    \ grade > 2.7 {\n            letter = String::from(\"B\");\n        } else if\
    \ grade > 2.3 {\n            letter = String::from(\"B-\");\n        } else if\
    \ grade > 2.0 {\n            letter = String::from(\"B-\");\n        } else if\
    \ grade > 1.7 {\n            letter = String::from(\"C\");\n        } else if\
    \ grade > 1.3 {\n            letter = String::from(\"C-\");\n        } else if\
    \ grade > 1.0 {\n            letter = String::from(\"D\");\n        } else if\
    \ grade > 0.7 {\n            letter = String::from(\"D+\");\n        }\n     \
    \   letters.push(letter);\n    }\n    letters", "    let mut letters: Vec<String>\
    \ = vec![String::from(\"\")];\n    for g in grades {\n        letters.push(format!(\"\
    {:2.1f}\", g));\n    }\n    letters", "    let mut letter_grades = Vec::new();\n\
    \    let mut previous_grade = grades[0];\n    let mut current_grade = grades[0];\n\
    \    for grade in grades.iter().rev() {\n        previous_grade = current_grade;\n\
    \        current_grade = grade;\n        if current_grade >= previous_grade {\n\
    \            letter_grades.push(String::from(\"A+\"));\n        } else if current_grade\
    \ <= previous_grade {\n            letter_grades.push(String::from(\"A-\"));\n\
    \        } else if current_grade > previous_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else {\n            letter_grades.push(String::from(\"B+\"\
    ));\n        }\n    }\n    letter_grades", "    if grades.len() != 5 {\n     \
    \   panic!(\"The grades vector must contain exactly 5 elements: {:?}\", grades);\n\
    \    }\n\n    let mut grades_ = grades;\n    let mut letter_grades = vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")];\n    let mut last_grade = String::from(\"E\");\n    let mut current_grade_\
    \ = String::from(\"A\");\n    \n    while grades_.len() > 0 {\n        let current_grade\
    \ = grades_.remove(0).unwrap_or(0);\n        if current_grade <= 4 {\n       \
    \     letter_grades.push(current_grade);\n        }\n        \n        if current_grade\
    \ <= 3.7 {\n            letter_grades.push(current_grade);\n        }\n      \
    \  \n        if current_grade <= 3.3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 2.7 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 2.3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 2 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 1.7 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 1.3 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 1 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 0.7 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade <= 0 {\n            letter_grades.push(current_grade);\n\
    \        }\n        \n        if current_grade > last_grade {\n            last_grade\
    \ = current_grade_;\n            current_grade_ = String::from(\"D+\");\n    \
    \    }\n    }\n    \n    letter_grades.push(last_grade);\n    \n    letter_grades",
  "    grades.iter()\n        .map(|grade| {\n            let mut result = String::new();\n\
    \            if grade < 0.0 {\n                result.push_str(\"E\");\n     \
    \           return result;\n            }\n            if grade < 3.0 {\n    \
    \            result.push_str(String::from(\"A\"));\n            } else if grade\
    \ < 4.0 {\n                result.push_str(String::from(\"B+\"));\n          \
    \  } else {\n                result.push_str(String::from(\"B-\"));\n        \
    \    }\n            if grade < 5.0 {\n                result.push_str(String::from(\"\
    C+\"));\n            } else if grade < 6.0 {\n                result.push_str(String::from(\"\
    C\"));\n            } else {\n                result.push_str(String::from(\"\
    C-\"));\n            }\n            if grade < 7.0 {\n                result.push_str(String::from(\"\
    D+\"));\n            } else if grade < 8.0 {\n                result.push_str(String::from(\"\
    D\"));\n            } else {\n                result.push_str(String::from(\"\
    D-\"));\n            }\n            if grade < 9.0 {\n                result.push_str(String::from(\"\
    F\"));\n            } else {\n                result.push_str(String::from(\"\
    F-\"));\n            }\n            result.push_str(String::from(\"E\"));\n  \
    \          result\n        })\n        .collect()", "    let mut results: Vec<String>\
    \ = vec![String::from(\"A+\"),String::from(\"B\"),String::from(\"C\"),String::from(\"\
    D\"),String::from(\"E\")]\n    let mut grade: Vec<f64> = grades.iter().cloned().collect();\n\
    \    let mut grade_prev: f64 = grade[0];\n    let mut i: int = 0;\n    while i\
    \ < grade.len() {\n        if grade[i] == 0.0 {\n            results.push(String::from(\"\
    D\"));\n            break;\n        }\n        if grade_prev == 0.0 {\n      \
    \      grade_prev = grade[i];\n        }\n        if grade[i] < grade_prev {\n\
    \            results.push(String::from(\"A-\"));\n        } else {\n         \
    \   results.push(String::from(\"A-\"));\n            grade_prev = grade[i];\n\
    \        }\n        i += 1;\n    }\n    results", "    let mut grades_copy = grades.clone();\n\
    \    grades_copy.sort();\n    grades_copy.sort_unstable();\n    let mut grade_counter\
    \ = 0;\n    let mut grade_sum = 0;\n    let mut grades_to_return = vec![];\n \
    \   for g in grades_copy {\n        grade_counter = grade_counter + 1;\n     \
    \   if grade_counter == 1 { \n            grades_to_return.push(String::from(\"\
    B+\")); \n            grade_sum = (grade_sum + g) as f64;\n        }\n       \
    \ else if grade_counter == 2 { \n            grades_to_return.push(String::from(\"\
    B\"));\n            grade_sum = (grade_sum + g) as f64;\n        }\n        else\
    \ if grade_counter == 3 { \n            grades_to_return.push(String::from(\"\
    B-\"));\n            grade_sum = (grade_sum + g) as f64;\n        }\n        else\
    \ if grade_counter == 4 { \n            grades_to_return.push(String::from(\"\
    C+\")); \n            grade_sum = (grade_sum + g) as f64;\n        }\n       \
    \ else if grade_counter == 5 { \n            grades_to_return.push(String::from(\"\
    C\"));\n            grade_sum = (grade_sum + g) as f64;\n        }\n        else\
    \ if grade_counter == 6 { \n            grades_to_return.push(String::from(\"\
    C-\"));\n            grade_sum = (grade_sum + g) as f64;\n        }\n        else\
    \ if grade_counter == 7 { \n            grades_to_return.push(String::from(\"\
    D+\")); \n            grade_sum = (grade_sum + g) as f64;\n        }\n       \
    \ else if grade_counter == 8 { \n            grades_to_return.push(String::from(\"\
    D\"));\n            grade_sum = (grade_sum + g) as f64;\n        }\n        else\
    \ if grade_counter == 9 { \n            grades_to_return.push(String::from(\"\
    D-\"));\n            grade_sum = (grade_sum + g) as f64;\n        }\n        else\
    \ if grade_counter == 10 { \n            grades_to_return.push(String::from(\"\
    E\"));\n            grade_sum = (grade_sum + g) as f64;\n        }\n    }\n  \
    \  return grades_to_return", "    grades\n        .iter()\n        .cloned()\n\
    \        .filter_map(|grade| {\n            match grade {\n                0..=1\
    \ => None,\n                _ => Some(grade.to_string()),\n            }\n   \
    \     })\n        .collect()", "    let mut grades_string = grades.clone();\n\
    \    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x| {\n\
    \        match x < 0.0 {\n            true => String::from(\"D-\"),\n        \
    \    false => String::from(\"D+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"E\"),\n     \
    \       false => String::from(\"C\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"B+\"),\n    \
    \        false => String::from(\"B\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"B-\"),\n    \
    \        false => String::from(\"B+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"A-\"),\n    \
    \        false => String::from(\"A+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"A-\"),\n    \
    \        false => String::from(\"A+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * 3);\n    let mut grades_string: Vec<String> = grades_string.into_iter().map(|x|\
    \ {\n        match x < 0.0 {\n            true => String::from(\"A-\"),\n    \
    \        false => String::from(\"A+\"),\n        }\n    }).collect();\n    grades_string.reserve(grades.len()\
    \ * ", "    let mut result = vec![];\n    grades.into_iter().for_each(|grade|\
    \ {\n        if grade > 0.0 {\n            result.push(\"B+\");\n        } else\
    \ if grade <= 3.0 {\n            result.push(\"B-\");\n        } else if grade\
    \ > 3.0 && grade <= 4.0 {\n            result.push(\"A+\");\n        } else if\
    \ grade > 4.0 && grade <= 6.0 {\n            result.push(\"A\");\n        } else\
    \ if grade > 6.0 && grade <= 9.0 {\n            result.push(\"A-\");\n       \
    \ } else if grade > 9.0 && grade <= 10.0 {\n            result.push(\"B\");\n\
    \        } else if grade > 10.0 && grade <= 12.0 {\n            result.push(\"\
    B-\");\n        } else if grade > 12.0 {\n            result.push(\"C\");\n  \
    \      }\n    });\n    result", "    // TODO: You do not need to understand this\
    \ code so you can simply copy and paste this\n    // and replace the function\
    \ body with your own code. Make sure you understand what is happening.\n    //\
    \ Hint: You have to think about the range of grades you have and use the `map`\
    \ function on a\n    // range of grades to get the letter grades.\n    let mut\
    \ letter_grades = Vec::new();\n    for grade in grades {\n        match grade\
    \ {\n            4.0 => letter_grades.push(String::from(\"A+\")),\n          \
    \  > 3.7 => letter_grades.push(String::from(\"A\")),\n            > 3.3 => letter_grades.push(String::from(\"\
    A-\")),\n            > 3.0 => letter_grades.push(String::from(\"B+\")),\n    \
    \        > 2.7 => letter_grades.push(String::from(\"B\")),\n            > 2.3\
    \ => letter_grades.push(String::from(\"B-\")),\n            > 2.0 => letter_grades.push(String::from(\"\
    C+\")),\n            > 1.7 => letter_grades.push(String::from(\"C\")),\n     \
    \       > 1.3 => letter_grades.push(String::from(\"C-\")),\n            > 1.0\
    \ => letter_grades.push(String::from(\"D+\")),\n            > 0.7 => letter_grades.push(String::from(\"\
    D\")),\n            > 0.0 => letter_grades.push(String::from(\"D-\")),\n     \
    \       _ => letter_grades.push(String::from(\"E\")),\n        }\n    }\n    letter_grades",
  "    let mut letter_grades: Vec<String> = Vec::new();\n    for (grade, grade_index)\
    \ in grades.iter().enumerate() {\n        if grade >= 4.0 { letter_grades.push(\"\
    A+\"); }\n        if grade > 3.0 && grade < 4.0 { letter_grades.push(\"A-\");\
    \ }\n        if grade > 3.3 && grade < 3.7 { letter_grades.push(\"B+\"); }\n \
    \       if grade > 3.0 && grade < 3.3 { letter_grades.push(\"B\"); }\n       \
    \ if grade > 2.7 && grade < 3.0 { letter_grades.push(\"B-\"); }\n        if grade\
    \ > 2.3 && grade < 2.7 { letter_grades.push(\"C+\"); }\n        if grade > 2.0\
    \ && grade < 2.3 { letter_grades.push(\"C\"); }\n        if grade > 1.7 && grade\
    \ < 2.0 { letter_grades.push(\"C-\"); }\n        if grade > 1.0 { letter_grades.push(\"\
    D+\"); }\n        if grade > 0.7 { letter_grades.push(\"D\"); }\n        if grade\
    \ < 0.0 { letter_grades.push(\"D-\"); }\n        if grade > 0.0 { letter_grades.push(\"\
    E\"); }\n    }\n    letter_grades", "    let mut grades_set = grades.into_iter().collect::<HashSet<f64>>();\n\
    \    let mut grades_sorted_set = grades.into_iter().sorted().collect::<HashSet<f64>>();\n\
    \n    let mut grades_sorted_by_grade = grades_sorted_set\n        .iter()\n  \
    \      .cloned()\n        .collect::<Vec<(f64, String)>>();\n\n    let mut grades_sorted_by_grade_length\
    \ = grades_sorted_by_grade.len();\n\n    let mut current_grade = grades.first().unwrap();\n\
    \n    let mut current_letter_grade: String;\n\n    let mut previous_grade = grades.last().unwrap();\n\
    \n    while grades_sorted_by_grade_length > 1 {\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length -= 1;\n\n        current_grade -= 1;\n\n\
    \        current_letter_grade = if current_grade < previous_grade {\n        \
    \    \"E\".to_string()\n        } else {\n            let current_letter_grade\
    \ = numerical_letter_grade(grades_set);\n            grades_sorted_by_grade_length\
    \ += 1;\n            current_letter_grade\n        };\n\n        grades_sorted_by_grade_length\
    \ += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\n    \
    \    grades_sorted_by_grade_length += 1;\n\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        if current_grade == previous_grade\
    \ {\n            grades_sorted_by_grade.insert(current_grade);\n        }\n\n\
    \        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade);\n\
    \n        grades_sorted_by_grade_length += 1;\n\n        grades_sorted_by_grade.push(current_letter_grade",
  "    grades\n        .iter()\n        .cloned()\n        .enumerate()\n        .filter(|&(i,\
    \ grade)| grade > 0)\n        .cloned()\n        .map(|(i, grade)| {\n       \
    \     match grade {\n                0 => \"D+\".to_string(),\n              \
    \  1 => \"D\".to_string(),\n                2 => \"C-\".to_string(),\n       \
    \         3 => \"C\".to_string(),\n                4 => \"B-\".to_string(),\n\
    \                5 => \"B\".to_string(),\n                6 => \"A-\".to_string(),\n\
    \                7 => \"A\".to_string(),\n                8 => \"A+\".to_string(),\n\
    \                _ => panic!(\"The given grades are not between 0 and 8: {}\"\
    , grade),\n            }\n        })\n        .collect()", "    let mut letter_grades\
    \ = vec![];\n\n    for grade in grades.iter() {\n        if grade > 4.0 { \n \
    \           letter_grades.push(String::from(\"A+\"));\n        } else if grade\
    \ > 3.7 { \n            letter_grades.push(String::from(\"A\"));\n        } else\
    \ if grade > 3.3 { \n            letter_grades.push(String::from(\"A-\"));\n \
    \       } else if grade > 3.0 { \n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 { \n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 { \n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 { \n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 { \n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n\n    letter_grades", "    let mut letter_grades = vec![];\n\
    \    for grade in grades {\n        if grade > 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else {\n            letter_grades.push(String::from(\"B+\"\
    ));\n        } else if grade > 0.8 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 0.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.4 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.2 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > -0.2 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > -0.4 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.6 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -0.8 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n    }\n    letter_grades", "    let mut letters = Vec::new();\n\
    \n    for grade in grades.iter() {\n        let letter = match grade {\n     \
    \       4.0 => \"A+\".to_string(),\n            _ => match grade-3 {\n       \
    \         1 => \"A\".to_string(),\n                _ => \"A-\".to_string(),\n\
    \            },\n            3.7 => \"A\".to_string(),\n            _ => match\
    \ grade-2 {\n                1 => \"A\".to_string(),\n                _ => \"\
    A-\".to_string(),\n            },\n            3.3 => \"A\".to_string(),\n   \
    \         _ => match grade-1 {\n                1 => \"A\".to_string(),\n    \
    \            _ => \"A-\".to_string(),\n            },\n            3.0 => \"B+\"\
    .to_string(),\n            _ => match grade-2 {\n                1 => \"B\".to_string(),\n\
    \                _ => \"B-\".to_string(),\n            },\n            2.7 =>\
    \ \"B\".to_string(),\n            _ => match grade-2 {\n                1 => \"\
    B\".to_string(),\n                _ => \"B-\".to_string(),\n            },\n \
    \           2.3 => \"B\".to_string(),\n            _ => match grade-1 {\n    \
    \            1 => \"B\".to_string(),\n                _ => \"B-\".to_string(),\n\
    \            },\n            2.0 => \"C+\".to_string(),\n            _ => match\
    \ grade-2 {\n                1 => \"C\".to_string(),\n                _ => \"\
    C-\".to_string(),\n            },\n            1.7 => \"C\".to_string(),\n   \
    \         _ => match grade-1 {\n                1 => \"C\".to_string(),\n    \
    \            _ => \"C-\".to_string(),\n            },\n            1.3 => \"C\"\
    .to_string(),\n            _ => match grade-1 {\n                1 => \"C\".to_string(),\n\
    \                _ => \"C-\".to_string(),\n            },\n            1.0 =>\
    \ \"D+\".to_string(),\n            _ => match grade-2 {\n                1 =>\
    \ \"D\".to_string(),\n                _ => \"D-\".to_string(),\n            },\n\
    \            0.7 => \"D\".to_string(),\n            _ => match grade-1 {\n   \
    \             1 => \"D\".to_string(),\n                _ => \"D-\".to_string(),\n\
    \            },\n            0.0 => \"D\".to_string(),\n            _ => \"D-\"\
    .to_string(),\n        };\n        letters.push(letter);\n    }\n    letters",
  "    let mut grades_map = vec![vec![\"A\"], vec![\"B\"], vec![\"C\"], vec![\"D\"\
    ], vec![\"F\"], vec![\"E\"]];\n    let mut grades_vector = vec![];\n\n    for\
    \ grade in grades {\n        for grade_letter in grades_map {\n            if\
    \ grade < 3.0 {\n                grades_vector.append(grade_letter);\n       \
    \     }\n\n            if grade >= 3.0 && grade < 4.0 {\n                grades_vector.append(grade_letter\
    \ + \"+\");\n            }\n\n            if grade >= 4.0 && grade < 5.0 {\n \
    \               grades_vector.append(grade_letter + \"-\");\n            }\n\n\
    \            if grade >= 5.0 && grade < 6.0 {\n                grades_vector.append(grade_letter\
    \ + \"+\");\n            }\n\n            if grade >= 6.0 {\n                grades_vector.append(grade_letter\
    \ + \"-\");\n            }\n        }\n    }\n\n    grades_vector", "    let mut\
    \ letters = Vec::new();\n    let mut a = grades[0];\n    let mut b = grades[1];\n\
    \    let mut c = grades[2];\n    let mut d = grades[3];\n    let mut e = grades[4];\n\
    \n    if a > 4.0 {\n        letters.push(\"A+\");\n        grades.remove(0);\n\
    \    }\n    if a <= 3.7 {\n        letters.push(\"A\");\n        grades.remove(0);\n\
    \    }\n    if a <= 3.3 {\n        letters.push(\"A-\");\n        grades.remove(0);\n\
    \    }\n    if a >= 3.0 {\n        letters.push(\"B+\");\n        grades.remove(0);\n\
    \    }\n    if a >= 2.7 {\n        letters.push(\"B\");\n        grades.remove(0);\n\
    \    }\n    if a >= 2.3 {\n        letters.push(\"B-\");\n        grades.remove(0);\n\
    \    }\n    if a >= 2.0 {\n        letters.push(\"C+\");\n        grades.remove(0);\n\
    \    }\n    if a >= 1.7 {\n        letters.push(\"C\");\n        grades.remove(0);\n\
    \    }\n    if a >= 1.3 {\n        letters.push(\"C-\");\n        grades.remove(0);\n\
    \    }\n    if a >= 1.0 {\n        letters.push(\"D+\");\n        grades.remove(0);\n\
    \    }\n    if a >= 0.7 {\n        letters.push(\"D\");\n        grades.remove(0);\n\
    \    }\n    if a >= 0.0 {\n        letters.push(\"D-\");\n        grades.remove(0);\n\
    \    }\n    if b > 4.0 {\n        letters.push(\"A+\");\n        grades.remove(1);\n\
    \    }\n    if b <= 3.7 {\n        letters.push(\"A\");\n        grades.remove(1);\n\
    \    }\n    if b <= 3.3 {\n        letters.push(\"A-\");\n        grades.remove(1);\n\
    \    }\n    if b >= 3.0 {\n        letters.push(\"B+\");\n        grades.remove(1);\n\
    \    }\n    if b >= 2.7 {\n        letters.push(\"B\");\n        grades.remove(1);\n\
    \    }\n    if b >= 2.3 {\n        letters.push(\"B-\");\n        grades.remove(1);\n\
    \    }\n    if b >= 2.0 {\n        letters.push(\"C+\");\n        grades.remove(1);\n\
    \    }\n    if b >= 1.7 {\n        letters.push(\"C\");\n        grades.remove(1);\n\
    \    }\n    if b >= 1.3 {\n        letters.push(\"C-\");\n        grades.remove(1);\n\
    \    }\n    if b >= 1.0 {\n        letters.push(\"D+\");\n        grades.remove(1);\n\
    \    }\n    if b >= 0.7 {\n        letters.push", "    let mut grades_vec: Vec<String>\
    \ = vec![];\n    for grade in grades {\n        match grade {\n            0.0\
    \  => grades_vec.push(\"E\"),\n            1.0 => grades_vec.push(\"D+\"),\n \
    \           2.0  => grades_vec.push(\"D\"),\n            3.0  => grades_vec.push(\"\
    C+\"),\n            4.0  => grades_vec.push(\"C\"),\n            5.0  => grades_vec.push(\"\
    B-\"),\n            6.0  => grades_vec.push(\"B\"),\n            7.0  => grades_vec.push(\"\
    A-\"),\n            8.0  => grades_vec.push(\"A\"),\n            9.0  => grades_vec.push(\"\
    A+\"),\n            _   => grades_vec.push(\"F\"),\n        }\n    }\n    grades_vec",
  "    if grades.is_empty() {\n        return vec![String::from(\"E\")];\n    }\n\
    \    let mut letter_grades: Vec<String> = vec![String::from(\"E\")];\n    let\
    \ mut grade_sum: f64 = 0.0;\n    for grade in grades.iter() {\n        if grade\
    \ > 2.7 {\n            letter_grades.push(String::from(\"B+\"));\n           \
    \ grade_sum += grade;\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            grade_sum += grade;\n        } else if grade > 1.7 {\n  \
    \          letter_grades.push(String::from(\"C+\"));\n            grade_sum +=\
    \ grade;\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n            grade_sum += grade;\n        } else if grade > 0.7 {\n  \
    \          letter_grades.push(String::from(\"D+\"));\n            grade_sum +=\
    \ grade;\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D-\"));\n            grade_sum += grade;\n        } else if grade > 0.0 {\n  \
    \          letter_grades.push(String::from(\"D\"));\n            grade_sum +=\
    \ grade;\n        } else {\n            letter_grades.push(String::from(\"C\"\
    ));\n            grade_sum += grade;\n        }\n    }\n    letter_grades.push(format!(\"\
    {}\", grade_sum / grades.len()));\n    letter_grades", "    let mut letter_grades\
    \ = Vec::new();\n    let mut total_grade = 0;\n    for grade in grades {\n   \
    \     total_grade += grade;\n        let percentage = (total_grade - grade) /\
    \ total_grade;\n        if percentage > 0.4 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n        if percentage > 0.3 && percentage < 0.4  {\n     \
    \       letter_grades.push(String::from(\"A\"));\n        }\n        if percentage\
    \ > 0.3 && percentage < 0.4  {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n        if percentage > 0.2 && percentage < 0.3  {\n     \
    \       letter_grades.push(String::from(\"B+\"));\n        }\n        if percentage\
    \ > 0.2 && percentage < 0.3  {\n            letter_grades.push(String::from(\"\
    B\"));\n        }\n        if percentage > 0.2 && percentage < 0.3  {\n      \
    \      letter_grades.push(String::from(\"B-\"));\n        }\n        if percentage\
    \ > 0.1 && percentage < 0.2  {\n            letter_grades.push(String::from(\"\
    C+\"));\n        }\n        if percentage > 0.1 && percentage < 0.2  {\n     \
    \       letter_grades.push(String::from(\"C\"));\n        }\n        if percentage\
    \ > 0.1 && percentage < 0.2  {\n            letter_grades.push(String::from(\"\
    C-\"));\n        }\n        if percentage > 0 && percentage < 0.1  {\n       \
    \     letter_grades.push(String::from(\"D+\"));\n        }\n        if percentage\
    \ > 0 && percentage < 0.1  {\n            letter_grades.push(String::from(\"D\"\
    ));\n        }\n        if percentage > 0 && percentage < 0.1  {\n           \
    \ letter_grades.push(String::from(\"D-\"));\n        }\n        if percentage\
    \ == 0 {\n            letter_grades.push(String::from(\"E\"));\n        }\n  \
    \  }\n    letter_grades", "    let mut letter_grades = vec![];\n    let mut grade_max\
    \ = grades.iter().max().unwrap();\n    for grade in grades.iter() {\n        if\
    \ grade <= grade_max {\n            letter_grades.push(format!(\"{}+\", grade_max\
    \ as char));\n        } else {\n            letter_grades.push(format!(\"{}\"\
    , grade as char));\n        }\n        grade_max = grade;\n    }\n    letter_grades",
  "    let mut grades_letter: Vec<String> = Vec::new();\n    for g in grades {\n \
    \       if g < 0.0 {\n            grades_letter.push(String::from(\"F\"));\n \
    \       } else if g < 1.0 {\n            grades_letter.push(String::from(\"D-\"\
    ));\n        } else if g < 2.0 {\n            grades_letter.push(String::from(\"\
    C-\"));\n        } else if g < 3.0 {\n            grades_letter.push(String::from(\"\
    B-\"));\n        } else if g < 4.0 {\n            grades_letter.push(String::from(\"\
    B-\"));\n        } else if g < 5.0 {\n            grades_letter.push(String::from(\"\
    A-\"));\n        } else if g < 6.0 {\n            grades_letter.push(String::from(\"\
    A-\"));\n        } else if g < 7.0 {\n            grades_letter.push(String::from(\"\
    A+\"));\n        } else if g < 8.0 {\n            grades_letter.push(String::from(\"\
    A+\"));\n        } else if g < 9.0 {\n            grades_letter.push(String::from(\"\
    A+\"));\n        } else if g < 10.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 11.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 12.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 13.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 14.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 15.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 16.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 17.0 {\n            grades_letter.push(String::from(\"\
    C+\"));\n        } else if g < 18.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 19.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 20.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 21.0 {\n            grades_letter.push(String::from(\"\
    B+\"));\n        } else if g < 22.0 {\n            grades_letter.push(", "   \
    \ // Complete this function\n    let mut letter = Vec::new();\n    letter.push(String::from(\"\
    A+\"));\n    if grades[0] >= 3.0 {\n        letter.push(String::from(\"A\"));\n\
    \    }\n    if grades[1] >= 3.7 {\n        letter.push(String::from(\"A-\"));\n\
    \    }\n    if grades[2] >= 3.3 {\n        letter.push(String::from(\"B+\"));\n\
    \    }\n    if grades[3] >= 2.7 {\n        letter.push(String::from(\"B\"));\n\
    \    }\n    if grades[4] >= 2.3 {\n        letter.push(String::from(\"B-\"));\n\
    \    }\n    if grades[5] >= 1.3 {\n        letter.push(String::from(\"C+\"));\n\
    \    }\n    if grades[6] >= 0.7 {\n        letter.push(String::from(\"C\"));\n\
    \    }\n    if grades[7] >= 0.3 {\n        letter.push(String::from(\"C-\"));\n\
    \    }\n    if grades[8] >= 0.0 {\n        letter.push(String::from(\"D+\"));\n\
    \    }\n    if grades[9] >= 0.0 {\n        letter.push(String::from(\"D\"));\n\
    \    }\n    if grades[10] >= 0.0 {\n        letter.push(String::from(\"D-\"));\n\
    \    }\n    if grades[11] >= 0.0 {\n        letter.push(String::from(\"E\"));\n\
    \    }\n    letter", "    let mut grades_copy: Vec<String> = grades.iter().map(|x|\
    \ numerical_letter_grade(x)).collect();\n\n    grades_copy.sort_by_key(|&x| x.to_ascii_lowercase());\n\
    \    grades_copy.push(\"\");\n\n    return grades_copy;", "    let mut letter_grades\
    \ = vec![];\n    for i in 0..grades.len() {\n        match grades[i] {\n     \
    \       4.0 => letter_grades.push(String::from(\"A+\")),\n            _ => if\
    \ grades[i] > 3.7 && grades[i] < 3.3 {\n                letter_grades.push(String::from(\"\
    A\"));\n            } else if grades[i] > 3.3 && grades[i] < 3.0 {\n         \
    \       letter_grades.push(String::from(\"A-\"));\n            } else if grades[i]\
    \ > 2.7 && grades[i] < 2.3 {\n                letter_grades.push(String::from(\"\
    B\"));\n            } else if grades[i] > 2.3 && grades[i] < 2.0 {\n         \
    \       letter_grades.push(String::from(\"B-\"));\n            } else if grades[i]\
    \ > 1.7 && grades[i] < 1.3 {\n                letter_grades.push(String::from(\"\
    C\"));\n            } else if grades[i] > 1.3 && grades[i] < 1.0 {\n         \
    \       letter_grades.push(String::from(\"C-\"));\n            } else if grades[i]\
    \ > 0.7 && grades[i] < 0.3 {\n                letter_grades.push(String::from(\"\
    D\"));\n            } else if grades[i] > 0.3 && grades[i] < 0.0 {\n         \
    \       letter_grades.push(String::from(\"D-\"));\n            } else if grades[i]\
    \ > 0.0 {\n                letter_grades.push(String::from(\"E\"));\n        \
    \    }\n        }\n    }\n    letter_grades", "    let mut grade = grades[grades.len()\
    \ - 1];\n\n    // Find first non zero number in vector and make it 0 \n    //\
    \ then get the difference between the current grade and zero\n    while grade\
    \ > 0.0 {\n        grade = grades[grades.len() - 1];\n    }\n\n    // Find the\
    \ index where the value is greated than the zero \n    // and get the difference\
    \ between the current grade and zero\n    let mut index = grades.len() - 1;\n\
    \    let mut grades = grades.clone();\n\n    // Iterate over the vector until\
    \ you reach the index where \n    // the difference between the current grade\
    \ and zero is greater than zero\n    while index < grades.len() - 1 && grades[index]\
    \ > 0.0 {\n        grade = grades[index];\n        index += 1;\n    }\n\n    //\
    \ At this point you should have all the numbers until \n    // the one that is\
    \ less than zero, which is the last number.\n    // The difference between the\
    \ current grade and the last grade \n    // is zero and you have all the grades\
    \ until the last one\n\n    // The result vector is now empty because \n    //\
    \ you have a 0 that is the last number\n    vec![]", "    let mut letter_grades\
    \ = vec![];\n\n    let mut gpas = grades.iter().cloned();\n    let mut cum_gpa\
    \ = f64::from(0.0);\n    while gpas.len() > 0 {\n        let gpa: f64 = gpas.pop();\n\
    \        let cum_gpa = f64::from(gpa) + cum_gpa;\n\n        letter_grades.push(f64::from(*gpas).to_degrees()\
    \ - cum_gpa.to_degrees());\n    }\n\n    let gpa: f64 = grades.iter().max().unwrap();\n\
    \    letter_grades.push(gpa.to_degrees() - cum_gpa.to_degrees());\n\n    letter_grades",
  "    let mut letter_grades = vec![];\n    for grade in grades {\n        let letter_grade\
    \ = match grade {\n            4.0  => \"A+\",\n            3.7 => \"A\",\n  \
    \          3.3 => \"A-\",\n            3.0 => \"B+\",\n            2.7 => \"B\"\
    ,\n            2.3 => \"B-\",\n            2.0 => \"C+\",\n            1.7 =>\
    \ \"C\",\n            1.3 => \"C-\",\n            1.0 => \"D+\",\n           \
    \ 0.7  => \"D\",\n            0.0  => \"D-\",\n            _   => \"E\",\n   \
    \     };\n        letter_grades.push(letter_grade);\n    }\n    letter_grades",
  "    grades\n        .iter()\n        .enumerate()\n        .map(|(i, grade)| {\n\
    \            if grade < 0.0 {\n                format!(\"{}\", grade - 1.0)\n\
    \            } else {\n                format!(\"{}\", grade)\n            }\n\
    \        })\n        .collect()", "    let mut grades_copy = grades.clone();\n\
    \    grades_copy.pop();\n    grades_copy.sort();\n    let mut grades_sorted =\
    \ vec![];\n    for grade in grades_copy {\n        if grade < 3.0 {\n        \
    \    grades_sorted.push(\"D-\");\n        } else if grade >= 3.0 && grade < 3.3\
    \ {\n            grades_sorted.push(\"B-\");\n        } else if grade >= 3.3 &&\
    \ grade < 3.7 {\n            grades_sorted.push(\"B-\");\n        } else if grade\
    \ >= 3.7 && grade < 4.0 {\n            grades_sorted.push(\"C+\");\n        }\
    \ else if grade >= 4.0 && grade < 4.3 {\n            grades_sorted.push(\"C-\"\
    );\n        } else if grade >= 4.3 && grade < 4.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 4.7 && grade < 5.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 5.0 && grade < 5.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 5.3 && grade < 5.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 5.7 && grade < 6.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 6.0 && grade < 6.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 6.3 && grade < 6.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 6.7 && grade < 7.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 7.0 && grade < 7.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 7.3 && grade < 7.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 7.7 && grade < 8.0 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 8.0 && grade < 8.3 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 8.3 && grade < 8.7 {\n            grades_sorted.push(\"\
    C+\");\n        } else if grade >= 8.7 && grade ", "    let mut letter_grades\
    \ = Vec::new();\n\n    for grade in grades {\n        let grade = grade as f32;\n\
    \        if grade < 3.5 {\n            letter_grades.push(String::from(\"A+\"\
    ));\n        } else if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 2.7 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 1.8 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 1.4 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"D-\"));\n\
    \        }\n    }\n    letter_grades", "    let mut letter_grades = vec![String::from(\"\
    \")];\n    let (min, max) = grades.min().unwrap(), grades.max().unwrap();\n  \
    \  \n    for i in grades.iter() {\n        match i {\n            min => {\n \
    \               for j in (0..).rev() {\n                    letter_grades.insert(j,\
    \ String::from(\"A\"));\n                }\n            },\n            max =>\
    \ {\n                for j in (0..).rev() {\n                    letter_grades.insert(j,\
    \ String::from(\"D\"));\n                }\n            },\n            _ => {\n\
    \                for j in (0..).rev() {\n                    letter_grades.insert(j,\
    \ String::from(\"E\"));\n                }\n            }\n        }\n    }\n\
    \    letter_grades", "    let mut grades_chars = grades.into_iter().map(|grade|\
    \ {\n        if grade >= 3.3 {\n            String::from(\"A+\")\n        } else\
    \ if grade >= 3.0 {\n            String::from(\"A\")\n        } else if grade\
    \ >= 2.7 {\n            String::from(\"B\")\n        } else if grade >= 2.3 {\n\
    \            String::from(\"B+\")\n        } else if grade >= 2.0 {\n        \
    \    String::from(\"B\")\n        } else if grade >= 1.7 {\n            String::from(\"\
    C\")\n        } else if grade >= 1.3 {\n            String::from(\"C+\")\n   \
    \     } else if grade >= 1.0 {\n            String::from(\"C\")\n        } else\
    \ if grade >= 0.7 {\n            String::from(\"D\")\n        } else if grade\
    \ >= 0.3 {\n            String::from(\"D+\")\n        } else if grade >= 0.0 {\n\
    \            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    });\n    grades_chars.collect().collect::<Vec<String>>()",
  "    let grades_sorted = grades.iter().sort();\n    let mut grade_vec = vec![];\n\
    \    for i in grades_sorted {\n        let gpa = *i;\n        if gpa > 3.0 {\n\
    \            grade_vec.push(format!(\"{}+\", gpa));\n        } else if gpa > 2.7\
    \ {\n            grade_vec.push(format!(\"{}\", gpa));\n        } else if gpa\
    \ > 2.3 {\n            grade_vec.push(format!(\"{}-\", gpa));\n        } else\
    \ if gpa > 1.7 {\n            grade_vec.push(format!(\"{}\", gpa));\n        }\
    \ else if gpa > 1.0 {\n            grade_vec.push(format!(\"{}\", gpa));\n   \
    \     } else if gpa > 0.7 {\n            grade_vec.push(format!(\"{}\", gpa));\n\
    \        } else {\n            grade_vec.push(format!(\"{}\", gpa));\n       \
    \ }\n    }\n    grade_vec", "    let mut letter_grades: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade == 0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"D\"));\n\
    \        }\n    }\n    letter_grades", "    let mut grades_iter = grades.iter().cloned();\n\
    \    let mut letter_grades = vec![];\n    while grades_iter.any(|grade| grade\
    \ < 4.0) {\n        let mut new_grade: f64 = grades_iter.next().unwrap();\n  \
    \      while new_grade < 4.0 {\n            letter_grades.push(format!(\"{}+\"\
    , new_grade));\n            new_grade += 5.0;\n        }\n        while new_grade\
    \ >= 4.0 {\n            let grade: f64 = new_grade;\n            letter_grades.push(format!(\"\
    {}\", grade < 3.0 ? \"A\" : \"A-\"));\n            new_grade -= 3.0;\n       \
    \ }\n    }\n    while grades_iter.any(|grade| grade >= 5.0) {\n        let mut\
    \ new_grade: f64 = grades_iter.next().unwrap();\n        while new_grade >= 5.0\
    \ {\n            letter_grades.push(format!(\"{}+\", new_grade));\n          \
    \  new_grade += 4.0;\n        }\n        while new_grade < 5.0 {\n           \
    \ let grade: f64 = new_grade;\n            letter_grades.push(format!(\"{}\",\
    \ grade < 3.0 ? \"B\" : \"B-\"));\n            new_grade -= 3.0;\n        }\n\
    \    }\n    while grades_iter.any(|grade| grade < 5.0) {\n        let mut new_grade:\
    \ f64 = grades_iter.next().unwrap();\n        while new_grade >= 5.0 {\n     \
    \       letter_grades.push(format!(\"{}+\", new_grade));\n            new_grade\
    \ += 4.0;\n        }\n        while new_grade < 5.0 {\n            let grade:\
    \ f64 = new_grade;\n            letter_grades.push(format!(\"{}\", grade < 3.0\
    \ ? \"C\" : \"C-\"));\n            new_grade -= 3.0;\n        }\n    }\n    while\
    \ grades_iter.any(|grade| grade >= 5.0) {\n        let mut new_grade: f64 = grades_iter.next().unwrap();\n\
    \        while new_grade >= 5.0 {\n            letter_grades.push(format!(\"{}+\"\
    , new_grade));\n            new_grade += 4.0;\n        }\n        while new_grade\
    \ < 5.0 {\n            let grade: f64 = new_grade;\n            letter_grades.push(format!(\"\
    {}\", grade < 3.0 ? \"D\" : \"D-\"));\n            new_grade -= 3.0;\n       \
    \ }\n    }\n    letter_grades", "    let mut letters = vec![];\n\n    for grade\
    \ in grades {\n        if grade > 2.3 {\n            letters.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 && grade < 2.3 {\n            letters.push(String::from(\"\
    B\"));\n        } else if grade > 1.7 && grade < 2.0 {\n            letters.push(String::from(\"\
    C+\"));\n        } else if grade > 1.0 && grade < 1.7 {\n            letters.push(String::from(\"\
    C\"));\n        } else if grade > 0.7 && grade < 1.0 {\n            letters.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 && grade < 0.7 {\n            letters.push(String::from(\"\
    C-\"));\n        } else if grade > -0.0 && grade < 0.0 {\n            letters.push(String::from(\"\
    D\"));\n        } else if grade > -1.0 && grade < -0.0 {\n            letters.push(String::from(\"\
    D-\"));\n        } else if grade > -2.0 && grade < -1.0 {\n            letters.push(String::from(\"\
    D-\"));\n        } else if grade > -3.0 && grade < -2.0 {\n            letters.push(String::from(\"\
    D+\"));\n        } else {\n            letters.push(String::from(\"E\"));\n  \
    \      }\n    }\n    letters", "    let mut grades_string = vec![];\n    for grade\
    \ in grades.iter() {\n        if grade > 4.0 {\n            if grade > 3.7 {\n\
    \                if grade > 3.3 {\n                    if grade > 3.0 {\n    \
    \                    if grade > 2.7 {\n                            if grade >\
    \ 2.3 {\n                                if grade > 2.0 {\n                  \
    \                  if grade > 1.7 {\n                                        if\
    \ grade > 1.0 {\n                                            if grade > 0.7 {\n\
    \                                                if grade > 0.0 {\n          \
    \                                          grades_string.push(\"D-\");\n     \
    \                                           } else {\n                       \
    \                             grades_string.push(\"D+\");\n                  \
    \                              }\n                                           \
    \ } else {\n                                                grades_string.push(\"\
    D\");\n                                            }\n                       \
    \                 } else {\n                                            grades_string.push(\"\
    C+\");\n                                        }\n                          \
    \          } else {\n                                        grades_string.push(\"\
    C\");\n                                    }\n                               \
    \ } else {\n                                    grades_string.push(\"B-\");\n\
    \                                }\n                            } else {\n   \
    \                             grades_string.push(\"B+\");\n                  \
    \          }\n                        } else {\n                            grades_string.push(\"\
    B\");\n                        }\n                    } else {\n             \
    \           grades_string.push(\"A-\");\n                    }\n             \
    \   } else {\n                    grades_string.push(\"A+\");\n              \
    \  }\n            } else {\n                grades_string.push(\"A\");\n     \
    \       }\n        } else {\n            grades_string.push(\"E\");\n        }\n\
    \    }\n    grades_string", "    if grades.len() < 1 {\n        return vec![];\n\
    \    }\n    let mut grade_vector = vec![];\n    let mut temp_grade = grades[0];\n\
    \    let mut temp_counter = 0;\n    let mut grade = temp_grade as i32;\n    let\
    \ mut counter = temp_counter as i32;\n    while counter <= grades.len() - 1 {\n\
    \        let mut temp_grade = grades[counter];\n        if temp_grade > grade\
    \ {\n            grade_vector = vec![String::from(temp_grade as char)];\n    \
    \        temp_grade = grades[counter];\n            temp_counter = counter;\n\
    \            grade = temp_grade as i32;\n            counter = temp_counter as\
    \ i32;\n        } else {\n            grade_vector = grade_vector.push(String::from(temp_grade\
    \ as char));\n            temp_grade = grades[counter];\n            temp_counter\
    \ = counter;\n            grade = temp_grade as i32;\n            counter = temp_counter\
    \ as i32;\n        }\n    }\n    grade_vector.push(String::from(\"D\"));\n   \
    \ grade_vector", "    if grades.len() < 3 {\n        return vec![String::from(\"\
    E\")]\n    }\n\n    let mut grades_iter = grades.iter();\n    let mut letter_grades\
    \ = vec![];\n    let mut grade = grades_iter.next();\n    while grade.unwrap()\
    \ < 3.0 {\n        letter_grades.push(String::from(grade.unwrap()));\n       \
    \ grade = grades_iter.next();\n    }\n    if grade.unwrap() > 3.0 {\n        let\
    \ mut previous_grade = grade.unwrap();\n        grades_iter.next();\n        grade\
    \ = grades_iter.next();\n        while grade.unwrap() < previous_grade {\n   \
    \         letter_grades.push(String::from(\"D-\"));\n            grade = grades_iter.next();\n\
    \        }\n        letter_grades.push(String::from(\"D\"));\n    }\n\n    let\
    \ mut grades_iter = grades.iter();\n    let mut letter_grades = vec![];\n    let\
    \ mut grade = grades_iter.next();\n    while grade.unwrap() >= 3.0 {\n       \
    \ letter_grades.push(String::from(grade.unwrap()));\n        grade = grades_iter.next();\n\
    \    }\n    if grade.unwrap() >= 2.0 {\n        let mut previous_grade = grade.unwrap();\n\
    \        grades_iter.next();\n        grade = grades_iter.next();\n        while\
    \ grade.unwrap() >= previous_grade {\n            letter_grades.push(String::from(\"\
    C-\"));\n            grade = grades_iter.next();\n        }\n        letter_grades.push(String::from(\"\
    C\"));\n    }\n    if grade.unwrap() >= 1.0 {\n        let mut previous_grade\
    \ = grade.unwrap();\n        grades_iter.next();\n        grade = grades_iter.next();\n\
    \        while grade.unwrap() >= previous_grade {\n            letter_grades.push(String::from(\"\
    B-\"));\n            grade = grades_iter.next();\n        }\n        letter_grades.push(String::from(\"\
    B\"));\n    }\n    if grade.unwrap() >= 0.7 { // Grade is between 4.0 and 4.7,\
    \ so letter grade is A\n        let mut previous_grade = grade.unwrap();\n   \
    \     grades_iter.next();\n        grade = grades_iter.next();\n        while\
    \ grade.unwrap() >= previous_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n            grade = grades_iter.next();\n        }\n        letter_grades.push(String::from(\"\
    A\"));\n    }\n    if grade.unwrap() > 0.0 {\n        let mut previous_grade =\
    \ grade.unwrap();\n        grades_iter.next();\n        grade = grades_iter.next();\n\
    \        while grade.unwrap() > previous_", "    let mut letter_grades = vec![];\n\
    \    for (i, grade) in grades.iter().enumerate() {\n        letter_grades.push(format!(\"\
    {:?}\", grade > 3.3 ? \"B+\" : (grade > 3.7 ? \"B\" : (grade > 2.3 ? \"B-\" :\
    \ grade > 2.7 ? \"B\" : (grade > 3.0 ? \"B-\" : grade > 1.7 ? \"C\" : (grade >\
    \ 1.3 ? \"C-\" : grade > 1.0 ? \"C\" : (grade > 0.7 ? \"C-\" : grade > 0.0 ? \"\
    D\" : (grade > 0.0 ? \"D-\" : grade > 0.0 ? \"E\" : \"F\")))))));\n    }\n   \
    \ return letter_grades;", "    let mut grades_iter = grades.clone().into_iter();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade;\n\n    while\
    \ grades_iter.any() {\n        // Grade is a float\n        // Current letter\
    \ is a String\n        // Grade is greater than zero\n        // Grade is less\
    \ than or equal to zero\n        // Check if current letter equals current grade\n\
    \        if grades_iter.next().unwrap() > 0.0 {\n            // Yes then current_grade\
    \ was just updated to a float\n            current_grade = grades_iter.next().unwrap();\n\
    \        } else {\n            // No then current_grade was just updated to a\
    \ string\n            current_grade = grades_iter.next().unwrap().to_string();\n\
    \        }\n        // Check to see if current_grade was greater than the last\
    \ letter grade\n        if current_grade > grades.last().unwrap() {\n        \
    \    // Yes then letter_grades is updated to a string\n            letter_grades.push(current_grade.to_string());\n\
    \        } else {\n            // No then letter_grades is updated to a string\n\
    \            letter_grades.push(current_grade);\n        }\n    }\n    letter_grades",
  "    let mut grades_vec = grades;\n    let mut letter_grades = vec![];\n    let\
    \ mut prev = 0.0;\n    let mut temp = 0.0;\n    while grades_vec.len() > 0 {\n\
    \        // find the first non-zero value\n        for i in grades_vec.iter().rev()\
    \ {\n            if *i != 0.0 {\n                temp = *i;\n                grades_vec.retain(|x|\
    \ x != 0.0);\n                break;\n            }\n        }\n        // if\
    \ the grade is less than or equal to 3.5 use letter grade\n        if temp <=\
    \ 3.0 {\n            if temp == prev {\n                if temp >= 4.0 {\n   \
    \                 letter_grades.push(String::from(\"A+\"));\n                }\
    \ else {\n                    letter_grades.push(String::from(\"A\"));\n     \
    \           }\n            } else if temp == prev {\n                if temp >=\
    \ 4.0 {\n                    letter_grades.push(String::from(\"A+\"));\n     \
    \           } else if temp >= 3.7 {\n                    letter_grades.push(String::from(\"\
    A\"));\n                } else if temp >= 3.3 {\n                    letter_grades.push(String::from(\"\
    A- \"));\n                } else if temp >= 3.0 {\n                    letter_grades.push(String::from(\"\
    B+\"));\n                } else if temp >= 2.7 {\n                    letter_grades.push(String::from(\"\
    B\"));\n                } else if temp >= 2.3 {\n                    letter_grades.push(String::from(\"\
    B-\"));\n                } else if temp >= 2.0 {\n                    letter_grades.push(String::from(\"\
    C+\"));\n                } else if temp >= 1.7 {\n                    letter_grades.push(String::from(\"\
    C\"));\n                } else if temp >= 1.3 {\n                    letter_grades.push(String::from(\"\
    C-\"));\n                } else if temp >= 1.0 {\n                    letter_grades.push(String::from(\"\
    D+ \"));\n                } else if temp >= 0.7 {\n                    letter_grades.push(String::from(\"\
    D\"));\n                } else if temp >= 0.0 {\n                    letter_grades.push(String::from(\"\
    D-\"));\n                } else {\n                    letter_grades.push(String::from(\"\
    E\"));\n                }\n            } else {\n                if temp >= 4.0\
    \ {\n                    letter_grades.push(String::from(\"A+\"));\n         \
    \       } else if temp >= 3.7 {\n                    letter_grades.push(String::from(\"\
    A\"));\n                } else if temp >= 3.3 {\n                    letter_grades.push(String::from(\"\
    A- \"));\n                } else if temp >= 3.0 {\n                    letter_grades.push(String::from(\"\
    B+\"));\n                } else if temp >= 2.7 {\n                    letter_grades.push(String::from(\"\
    B\"));\n                } else if temp >= 2.", "    let mut letters = vec![];\n\
    \    let mut gpa = grades.iter().sum();\n\n    for grade in grades {\n       \
    \ match grade {\n            0.0 => letters.push(\"E\"),\n            _ => match\
    \ gpa { \n                0.0 => letters.push(\"D-\"),\n                _ => match\
    \ gpa { \n                    _ => match gpa { \n                        _ =>\
    \ letters.push(\"C-\"),\n                        _ => match gpa { \n         \
    \                   _ => match gpa { \n                                _ => match\
    \ gpa { \n                                    _ => match gpa { \n            \
    \                            _ => match gpa { \n                             \
    \               _ => match gpa { \n                                          \
    \      _ => match gpa { \n                                                   \
    \ _ => match gpa { \n                                                        _\
    \ => match gpa { \n                                                          \
    \  _ => match gpa { \n                                                       \
    \         _ => match gpa { \n                                                \
    \                    _ => match gpa { \n                                     \
    \                                   _ => match gpa { \n                      \
    \                                                      _ => match gpa { \n   \
    \                                                                            \
    \ _ => match gpa { \n                                                        \
    \                            _ => match gpa { \n                             \
    \                                                           _ => match gpa { \n\
    \                                                                            \
    \                _ => match gpa { \n                                         \
    \                                                       _ => match gpa { \n  \
    \                                                                            \
    \                      _ => match gpa { \n                                   \
    \                                                                     _ => match\
    \ gpa { \n                                                                   \
    \                                         _ => match gpa { \n                \
    \                                                                            \
    \                    _ => match gpa { \n                                     \
    \                                                                            \
    \   _ => match gpa { \n                                                      \
    \                                                                  _ => match\
    \ gpa { \n                                                                   \
    \                                                         _ => match gpa { \n\
    \                                                                            \
    \                                                    _ => match gpa { \n     \
    \                                                                            \
    \                                                   _ => match gpa { \n      \
    \                                                                            \
    \                                                      _ => match gpa { \n   \
    \                                                                            \
    \                                                             _ => match gpa {\
    \ \n                                                                         \
    \                                                                       _ => match\
    \ gpa { \n                                                                   \
    \                                                                            \
    \     _ => match gpa { \n                                                    \
    \                                                                            \
    \                        _ => match gpa { \n                                 \
    \                                                                            \
    \                                               _ => match gpa { \n          \
    \                                                                            \
    \                                                                          _ =>\
    \ match gpa { \n                                                             \
    \                                                                            \
    \                           _ => match gpa { \n                              \
    \                                                                            \
    \                                                              _ => match gpa\
    \ { \n                                                                       \
    \                                                                            \
    \                         _ => match gpa { \n                                \
    \                                                                            \
    \                                                                    _ => match\
    \ gpa { \n                                                                   \
    \                                                                            \
    \                                     _ => match gpa { \n                    \
    \                                                                            \
    \                                                                            \
    \            _ => match gpa { \n                                             \
    \                                                                            \
    \                                                                   _ => match\
    \ gpa { \n                                                                   \
    \                                                                            \
    \                                                 _ => match gpa { \n        \
    \                                                                            \
    \                                                                            \
    \                                    _ => match gpa { \n                     \
    \                                                                            \
    \                                                                            \
    \                           _ => match gpa { \n                              \
    \                                                                            \
    \                                                                            \
    \                      _ => match gpa { \n", "    let mut letter_grades = Vec::new();\n\
    \    for i in 0..grades.len() {\n        if grades[i] > 0.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grades[i] < 0.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grades[i] < 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grades[i] < 4.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grades[i] < 5.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grades[i] < 6.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grades[i] < 7.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grades[i] < 8.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grades[i] < 9.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grades[i] < 10.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else {\n            letter_grades.push(String::from(\"D+\"\
    ));\n        }\n    }\n    letter_grades", "    let mut grades_copy = grades.clone();\n\
    \    let mut result = grades.clone();\n    grades_copy.sort_unstable();\n    while\
    \ grades_copy.len() > 0 {\n        let mut idx = grades_copy.iter().position(|&x|\
    \ x < grades_copy.last()).unwrap_or(0);\n        let mut grade = grades_copy[idx..].sum();\n\
    \        if grade < 0.0 {\n            result.push(\"D-\");\n            grades_copy.remove(&grade);\n\
    \        } else {\n            let mut grade = grade as f64;\n            let\
    \ x = grade / 10.0;\n            let y = x - floor(x);\n            grades_copy.remove(idx);\n\
    \            if y > 2.0 {\n                if y > 2.0 {\n                    result.push(\"\
    B-\");\n                } else {\n                    result.push(\"B-\");\n \
    \               }\n            } else if y < -2.0 && (-y).abs() < 2.0 {\n    \
    \            result.push(\"B-\");\n            } else {\n                if y\
    \ < -2.0 {\n                    result.push(\"B-\");\n                } else {\n\
    \                    result.push(\"B-\");\n                }\n            }\n\
    \        }\n    }\n    result", "    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_min = grades.iter().min().unwrap();\n    let grades_mean = grades.iter().mean().unwrap();\n\
    \    let grades_median = grades.iter().median().unwrap();\n    let grades_std\
    \ = grades.iter().std().unwrap();\n    let grades_var = grades.iter().variance().unwrap();\n\
    \    let grades_entropy = grades.iter().entropy().unwrap();\n    let grades_min\
    \ = grades.iter().min().unwrap();\n    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_mean = grades.iter().mean().unwrap();\n    let grades_median =\
    \ grades.iter().median().unwrap();\n    let grades_std = grades.iter().std().unwrap();\n\
    \    let grades_var = grades.iter().variance().unwrap();\n    let grades_entropy\
    \ = grades.iter().entropy().unwrap();\n    let grades_min = grades.iter().min().unwrap();\n\
    \    let grades_max = grades.iter().max().unwrap();\n    let grades_mean = grades.iter().mean().unwrap();\n\
    \    let grades_median = grades.iter().median().unwrap();\n    let grades_std\
    \ = grades.iter().std().unwrap();\n    let grades_var = grades.iter().variance().unwrap();\n\
    \    let grades_entropy = grades.iter().entropy().unwrap();\n    let grades_min\
    \ = grades.iter().min().unwrap();\n    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_mean = grades.iter().mean().unwrap();\n    let grades_median =\
    \ grades.iter().median().unwrap();\n    let grades_std = grades.iter().std().unwrap();\n\
    \    let grades_var = grades.iter().variance().unwrap();\n    let grades_entropy\
    \ = grades.iter().entropy().unwrap();\n    let grades_min = grades.iter().min().unwrap();\n\
    \    let grades_max = grades.iter().max().unwrap();\n    let grades_mean = grades.iter().mean().unwrap();\n\
    \    let grades_median = grades.iter().median().unwrap();\n    let grades_std\
    \ = grades.iter().std().unwrap();\n    let grades_var = grades.iter().variance().unwrap();\n\
    \    let grades_entropy = grades.iter().entropy().unwrap();\n    let grades_min\
    \ = grades.iter().min().unwrap();\n    let grades_max = grades.iter().max().unwrap();\n\
    \    let grades_mean = grades.iter().mean().unwrap();\n    let grades_median =\
    \ grades.iter", "    let mut letters: Vec<String> = vec![];\n    for grade in\
    \ grades {\n        letters.push(match grade {\n            0...5.0 => \"E\",\n\
    \            4.0   => \"A+\",\n            5.0   => \"A\",\n            6.0  \
    \ => \"A-\",\n            7.0   => \"B+\",\n            8.0   => \"B\",\n    \
    \        9.0   => \"B-\",\n            10.0 => \"C+\",\n            11.0 => \"\
    C\",\n            12.0 => \"C-\",\n            13.0 => \"D+\",\n            14.0\
    \ => \"D\",\n            15.0 => \"D-\",\n            _    => \"\".to_string(),\n\
    \        });\n    }\n    letters", "    let mut letter_grades = Vec::new();\n\
    \    \n    for grade in grades {\n        \n        if grade > 1.0 {\n       \
    \     let letter_grade = String::from(\"E\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade == 1.0 {\n     \
    \       let letter_grade = String::from(\"D\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 3.0 {\n      \
    \      let letter_grade = String::from(\"C+\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 2.0 {\n      \
    \      let letter_grade = String::from(\"B+\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 1.7 {\n      \
    \      let letter_grade = String::from(\"A-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 1.0 {\n      \
    \      let letter_grade = String::from(\"A-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.7 {\n      \
    \      let letter_grade = String::from(\"B\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.3 {\n      \
    \      let letter_grade = String::from(\"B-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.1 {\n      \
    \      let letter_grade = String::from(\"C\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        if grade < 0.03 {\n     \
    \       let letter_grade = String::from(\"C-\");\n            letter_grades.push(letter_grade);\n\
    \            continue;\n        }\n        \n        let letter_grade = String::from(\"\
    A\");\n        letter_grades.push(letter_grade);\n    }\n    \n    letter_grades",
  "    let mut letters: Vec<String> = vec![];\n    for grade in grades {\n       \
    \ if grade > 3.7 { \n            letters.push(\"A\");\n        } else if grade\
    \ > 3.3 { \n            letters.push(\"A-\");\n        } else if grade > 3.0 {\
    \ \n            letters.push(\"B+\");\n        } else if grade > 2.7 { \n    \
    \        letters.push(\"B\");\n        } else if grade > 2.3 { \n            letters.push(\"\
    B-\");\n        } else if grade > 2.0 { \n            letters.push(\"C+\");\n\
    \        } else if grade > 1.7 { \n            letters.push(\"C\");\n        }\
    \ else if grade > 1.3 { \n            letters.push(\"C-\");\n        } else if\
    \ grade > 1.0 { \n            letters.push(\"D+\");\n        } else if grade >\
    \ 0.7 { \n            letters.push(\"D\");\n        } else { \n            letters.push(\"\
    D-\");\n        }\n    }\n    return letters", "    let mut grades = grades.clone();\n\
    \    let mut output: Vec<String> = vec![];\n    let mut max_grade: f64;\n    while\
    \ grades.len() > 0 {\n        if grades.len() > 1 {\n            max_grade = grades.iter().max().unwrap();\n\
    \        }\n        if grades.len() == 1 {\n            match grades[0] {\n  \
    \              4.0 => {\n                    let mut letter = String::from(\"\
    A+\");\n                    if grades[0] > max_grade {\n                     \
    \   letter = String::from(\"D+\");\n                    } else {\n           \
    \             letter = String::from(\"D\");\n                    }\n         \
    \           output.push(letter);\n                }\n                3.7 => {\n\
    \                    let mut letter = String::from(\"A\");\n                 \
    \   if grades[0] > max_grade {\n                        letter = String::from(\"\
    D\");\n                    } else {\n                        letter = String::from(\"\
    D+\");\n                    }\n                    output.push(letter);\n    \
    \            }\n                3.3 => {\n                    let mut letter =\
    \ String::from(\"A-\");\n                    if grades[0] > max_grade {\n    \
    \                    letter = String::from(\"D-\");\n                    } else\
    \ {\n                        letter = String::from(\"D\");\n                 \
    \   }\n                    output.push(letter);\n                }\n         \
    \       3.0 => {\n                    let mut letter = String::from(\"B+\");\n\
    \                    if grades[0] > max_grade {\n                        letter\
    \ = String::from(\"D\");\n                    } else {\n                     \
    \   letter = String::from(\"D+\");\n                    }\n                  \
    \  output.push(letter);\n                }\n                2.7 => {\n       \
    \             let mut letter = String::from(\"B\");\n                    if grades[0]\
    \ > max_grade {\n                        letter = String::from(\"D\");\n     \
    \               } else {\n                        letter = String::from(\"D+\"\
    );\n                    }\n                    output.push(letter);\n        \
    \        }\n                2.3 => {\n                    let mut letter = String::from(\"\
    B-\");\n                    if grades[0] > max_grade {\n                     \
    \   letter = String::from(\"D-\");\n                    } else {\n           \
    \             letter = String::from(\"D\");\n                    }\n         \
    \           output.push(letter);\n                }\n                2.0 => {\n\
    \                    let mut letter = String::from(\"C+\");\n                \
    \    if grades[0] > max_grade {\n                        letter = String::from(\"\
    D\");\n                    } else {\n                        letter = String::from(\"\
    D+\");\n                    }\n                    output.push(letter);\n    \
    \            }\n                1.7 => {\n                    let mut ", "   \
    \ let mut letters = vec![];\n\n    for grade in grades {\n        let mut letter_grade\
    \ = String::from(\"\");\n\n        if grade >= 4.0 && grade <= 4.7 { letter_grade\
    \ += \"A+\" }\n        if grade > 3.7 && grade <= 3.8 { letter_grade += \"A\"\
    \ } \n        if grade > 3.3 && grade <= 3.5 { letter_grade += \"A-\" } \n   \
    \     if grade > 3.0 && grade <= 3.7 { letter_grade += \"B+\" } \n        if grade\
    \ > 2.7 && grade <= 3.3 { letter_grade += \"B\" } \n        if grade > 2.3 &&\
    \ grade <= 2.5 { letter_grade += \"B-\" } \n        if grade > 2.0 && grade <=\
    \ 2.7 { letter_grade += \"C+\" }\n        if grade > 1.7 && grade <= 2.3 { letter_grade\
    \ += \"C\" }\n        if grade > 1.3 && grade <= 2.5 { letter_grade += \"C-\"\
    \ } \n        if grade > 1.0 { letter_grade += \"D+\" }\n        if grade > 0.7\
    \ { letter_grade += \"D\" }\n        if grade == 0.0 { letter_grade += \"D-\"\
    \ }\n        if grade < 0.0 { letter_grade += \"E\" }\n\n        letters.push(letter_grade);\n\
    \    }\n\n    return letters;", "    let mut grades_letter = vec![];\n\n    for\
    \ grade in grades {\n        let mut letter_grade = \"\";\n\n        match grade\
    \ {\n            4.0 => {\n                letter_grade = \"A+\";\n          \
    \  },\n            _ => {\n                if grade >= 3.7 {\n               \
    \     letter_grade = \"A\";\n                } else if grade >= 3.3 {\n      \
    \              letter_grade = \"A-\";\n                } else if grade >= 3.0\
    \ {\n                    letter_grade = \"B+\";\n                } else if grade\
    \ >= 2.7 {\n                    letter_grade = \"B\";\n                } else\
    \ if grade >= 2.3 {\n                    letter_grade = \"B-\";\n            \
    \    } else if grade >= 2.0 {\n                    letter_grade = \"C+\";\n  \
    \              } else if grade >= 1.7 {\n                    letter_grade = \"\
    C\";\n                } else if grade >= 1.3 {\n                    letter_grade\
    \ = \"C-\";\n                } else if grade >= 1.0 {\n                    letter_grade\
    \ = \"D+\";\n                } else if grade >= 0.7 {\n                    letter_grade\
    \ = \"D\";\n                } else {\n                    letter_grade = \"D-\"\
    ;\n                }\n            }\n        }\n\n        grades_letter.push(letter_grade);\n\
    \    }\n\n    grades_letter", "    let mut gpa = grades[0];\n    let mut grade\
    \ = String::from(\"E\");\n    for (i, g) in grades.iter().enumerate() {\n    \
    \    if i == grades.len() - 1 {\n            if g > gpa  {\n                gpa\
    \ = g;\n                grade = String::from(\"D+\");\n            }\n       \
    \     if g < gpa  {\n                gpa = g;\n                grade = String::from(\"\
    D-\");\n            }\n            if g == gpa {\n                grade = String::from(\"\
    D\");\n            }\n            if g > gpa {\n                grade = String::from(\"\
    D+\");\n            }\n            if g < gpa {\n                grade = String::from(\"\
    D-\");\n            }\n            if g == gpa {\n                grade = String::from(\"\
    D\");\n            }\n        } else {\n            if g > gpa  {\n          \
    \      gpa = g;\n                grade = String::from(\"B+\");\n            }\n\
    \            if g < gpa  {\n                gpa = g;\n                grade =\
    \ String::from(\"B-\");\n            }\n            if g == gpa {\n          \
    \      grade = String::from(\"B\");\n            }\n            if g > gpa {\n\
    \                grade = String::from(\"B+\");\n            }\n            if\
    \ g < gpa {\n                grade = String::from(\"B-\");\n            }\n  \
    \          if g == gpa {\n                grade = String::from(\"B\");\n     \
    \       }\n        }\n    }\n    vec![grade]", "    let mut grades_sorted = grades.clone();\n\
    \    grades_sorted.sort();\n\n    let mut letter_grades = vec![];\n    let mut\
    \ grades_pos = 0;\n    let mut current_grade: f64;\n    let mut current_letter_grade:\
    \ String;\n\n    // iterate through grades until we find the first zero value\n\
    \    while grades_pos < grades_sorted.len() {\n        // get current grade\n\
    \        current_grade = grades_sorted[grades_pos];\n        // check whether\
    \ this is the last grade\n        if grades_pos == grades_sorted.len() - 1 {\n\
    \            letter_grades.push(current_letter_grade.clone());\n        }\n  \
    \      // check if grade is zero\n        if current_grade == 0 {\n          \
    \  break;\n        }\n        // if this is the first grade\n        if grades_pos\
    \ == 0 {\n            current_letter_grade = String::from(\"A\");\n        }\n\
    \        // if this is a greater grade than last letter grade\n        if current_grade\
    \ > current_letter_grade {\n            // get current letter grade\n        \
    \    current_letter_grade = current_letter_grade.clone();\n        }\n       \
    \ // get next grade\n        grades_pos += 1;\n    }\n    letter_grades", "  \
    \  let mut letter_grades = vec![];\n    for grade in grades {\n        let gpd\
    \ = grade_to_gpd(grade);\n        if gpd > 3.0 {\n            letter_grades.push(format!(\"\
    B+\"));\n        } else if gpd > 2.0 {\n            letter_grades.push(format!(\"\
    B\"));\n        } else if gpd > 1.0 {\n            letter_grades.push(format!(\"\
    B-\"));\n        } else if gpd > 0.7 { \n            letter_grades.push(format!(\"\
    C+\"));\n        } else if gpd > 0.3 { \n            letter_grades.push(format!(\"\
    C\"));\n        } else if gpd > 0.1 { \n            letter_grades.push(format!(\"\
    C-\"));\n        } else if gpd > 0.05 { \n            letter_grades.push(format!(\"\
    D+\"));\n        } else if gpd > 0.01 { \n            letter_grades.push(format!(\"\
    D\"));\n        } else { \n            letter_grades.push(format!(\"E\"));\n \
    \       }\n    }\n    return letter_grades;", "    use std::cmp::Ordering;\n\n\
    \    let mut letter_grades = Vec::new();\n    let sorted_grades = grades.sort_by(|a,\
    \ b| a.partial_cmp(b).unwrap());\n    for (i, grade) in sorted_grades.iter().enumerate()\
    \ {\n        let last_student = i == 0;\n        let mut grade_str = String::from(\"\
    E\");\n        grade_str.push_str(&format!(\"{:+}\", grade));\n        if last_student\
    \ {\n            letter_grades.push(grade_str);\n        } else {\n          \
    \  if grade > 4.0 {\n                grade_str.push_str(&format!(\"+\"));\n  \
    \          } else if grade > 3.7 {\n                grade_str.push_str(&format!(\"\
    -\"));\n            } else if grade > 3.3 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 2.7 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 2.3 {\n                grade_str.push_str(&format!(\"\
    -\"));\n            } else if grade > 1.3 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 1.0 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 0.7 {\n                grade_str.push_str(&format!(\"\
    -\"));\n            } else if grade > 0.3 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            } else if grade > 0.0 {\n                grade_str.push_str(&format!(\"\
    +\"));\n            }\n            letter_grades.push(grade_str);\n        }\n\
    \    }\n    letter_grades", "    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.last().unwrap();\n    let mut grade_level = gpa.floor() as usize;\n\
    \    let mut letter_grade = String::from(\"E\");\n    while grade_level >= 0 {\n\
    \        if grade_level % 2 == 0 {\n            if grade_level == 1 {\n      \
    \          letter_grade += String::from(\"A\");\n            } else if grade_level\
    \ == 2 {\n                letter_grade += String::from(\"A-\");\n            }\
    \ else if grade_level == 3 {\n                letter_grade += String::from(\"\
    B+\");\n            } else if grade_level == 4 {\n                letter_grade\
    \ += String::from(\"B\");\n            } else if grade_level == 5 {\n        \
    \        letter_grade += String::from(\"B-\");\n            } else if grade_level\
    \ == 6 {\n                letter_grade += String::from(\"C+\");\n            }\
    \ else if grade_level == 7 {\n                letter_grade += String::from(\"\
    C\");\n            } else if grade_level == 8 {\n                letter_grade\
    \ += String::from(\"C-\");\n            } else if grade_level == 9 {\n       \
    \         letter_grade += String::from(\"D+\");\n            } else if grade_level\
    \ == 10 {\n                letter_grade += String::from(\"D\");\n            }\
    \ else {\n                letter_grade += String::from(\"D-\");\n            }\n\
    \        } else {\n            if grade_level == 1 {\n                letter_grade\
    \ += String::from(\"A+\");\n            } else if grade_level == 2 {\n       \
    \         letter_grade += String::from(\"A\");\n            } else if grade_level\
    \ == 3 {\n                letter_grade += String::from(\"A-\");\n            }\
    \ else if grade_level == 4 {\n                letter_grade += String::from(\"\
    B+\");\n            } else if grade_level == 5 {\n                letter_grade\
    \ += String::from(\"B\");\n            } else if grade_level == 6 {\n        \
    \        letter_grade += String::from(\"B-\");\n            } else if grade_level\
    \ == 7 {\n                letter_grade += String::from(\"C+\");\n            }\
    \ else if grade_level == 8 {\n                letter_grade += String::from(\"\
    C\");\n            } else if grade_level == 9 {\n                letter_grade\
    \ += String::from(\"C-\");\n            } else if grade_level == 10 {\n      \
    \          letter_grade += String::from(\"D+\");\n            } else if grade_level\
    \ == 11", "    let max_grade_ranking = vec![\"A\",\"B\",\"C\",\"D\",\"E\"];\n\
    \    let min_grade_ranking = vec![\"A\",\"B+\",\"C\",\"D\",\"E-\"];\n    let ranking\
    \ = vec![min_grade_ranking..max_grade_ranking];\n    let ranking_string = &ranking[grades.iter().cmp(&::std::cmp::min)(&grades.iter().len()-2,\
    \ 0)];\n    let letter = grades.iter().map(|grade| {\n        let ranking_position\
    \ = ranking_string.iter().position(|&x| x.contains(&grade.to_string()));\n   \
    \     if ranking_position.is_none() {\n            String::from(\"E\")\n     \
    \   } else {\n            &ranking[ranking_position.unwrap()]\n        }\n   \
    \ }).collect();\n    letter", "    let mut letter_grade = vec![];\n    for grade\
    \ in grades {\n        if grade > 4.0 {\n            letter_grade.push(\"A+\"\
    );\n        } else if grade > 3.7 {\n            letter_grade.push(\"A\");\n \
    \       } else if grade > 3.3 {\n            letter_grade.push(\"A-\");\n    \
    \    } else if grade > 3.0 {\n            letter_grade.push(\"B+\");\n       \
    \ } else if grade > 2.7 {\n            letter_grade.push(\"B\");\n        } else\
    \ if grade > 2.3 {\n            letter_grade.push(\"B-\");\n        } else if\
    \ grade > 2.0 {\n            letter_grade.push(\"C+\");\n        } else if grade\
    \ > 1.7 {\n            letter_grade.push(\"C\");\n        } else if grade > 1.3\
    \ {\n            letter_grade.push(\"C-\");\n        } else if grade > 1.0 {\n\
    \            letter_grade.push(\"D+\");\n        } else if grade > 0.7 {\n   \
    \         letter_grade.push(\"D\");\n        } else if grade > 0.0 {\n       \
    \     letter_grade.push(\"D-\");\n        } else {\n            letter_grade.push(\"\
    E\");\n        }\n    }\n    letter_grade", "    grades\n        .iter()\n   \
    \     .enumerate()\n        .map(|(i, grade)| match grade {\n            0.0 \
    \            => String::from(\"E\"),\n            4.0             => String::from(\"\
    A+\"),\n            3.7             => String::from(\"A\"),\n            3.3 \
    \            => String::from(\"A-\"),\n            3.0             => String::from(\"\
    B+\"),\n            2.7             => String::from(\"B\"),\n            2.3 \
    \            => String::from(\"B-\"),\n            2.0             => String::from(\"\
    C+\"),\n            1.7             => String::from(\"C\"),\n            1.3 \
    \            => String::from(\"C-\"),\n            1.0             => String::from(\"\
    D+\"),\n            0.7             => String::from(\"D\"),\n            _   \
    \           => String::from(\"D-\"),\n        })", "    let mut grades_string\
    \ = grades.to_string();\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut temp: i64 = grades.len() as i64;\n\n    for grade in grades {\n        grades_vec!.push(grades_string[temp\
    \ - grade as usize..temp - grade as usize + 1]);\n        temp -= grade;\n   \
    \ }\n\n    grades_vec", "    let mut letter_grades = Vec::new();\n    for grade\
    \ in grades.iter() {\n        let gpa = if grade < 4.0 { \"A+\" } else if grade\
    \ < 3.7 { \"A\" } else if grade < 3.3 { \"A-\" } else if grade < 3 { \"B+\" }\
    \ else if grade < 2.7 { \"B\" } else if grade < 2.3 { \"B-\" } else if grade <\
    \ 2 { \"C+\" } else if grade < 1.7 { \"C\" } else if grade < 1.3 { \"C-\" } else\
    \ if grade < 1 { \"D+\" } else if grade < 0.7 { \"D\" } else { \"D-\" };\n   \
    \     letter_grades.push(gpa);\n    }\n    letter_grades", "    let mut grades_sorted\
    \ = grades.iter().cloned().sorted().collect::<Vec<f64>>();\n    let mut letter_grades\
    \ = Vec::new();\n    for grade in grades_sorted {\n        match grade {\n   \
    \         0f64 => letter_grades.push(String::from(\"E\")),\n            0..1.f64\
    \ => letter_grades.push(String::from(\"D-\")),\n            1.f64 => letter_grades.push(String::from(\"\
    D+\")),\n            2..3.f64 => letter_grades.push(String::from(\"C\")),\n  \
    \          4..5.f64 => letter_grades.push(String::from(\"B+\")),\n           \
    \ 6..7.f64 => letter_grades.push(String::from(\"B\")),\n            8..9f64 =>\
    \ letter_grades.push(String::from(\"A-\")),\n            _ => continue,\n    \
    \    }\n    }\n    letter_grades", "    if grades.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut result = vec![];\n    let max_grade = grades[0];\n\
    \    let min_grade = grades[0];\n    for grade in grades {\n        if grade >\
    \ max_grade {\n            max_grade = grade;\n        }\n        if grade < min_grade\
    \ {\n            min_grade = grade;\n        }\n    }\n    for grade in grades\
    \ {\n        let grade_value = grade - min_grade;\n        let grade_letter =\
    \ match grade_value {\n            0.0 => \"D\",\n            0.1 => \"D+\",\n\
    \            0.2 => \"D-\",\n            0.3 => \"C-\",\n            0.4 => \"\
    C\",\n            0.5 => \"C+\",\n            0.6 => \"B-\",\n            0.7\
    \ => \"B\",\n            0.8 => \"B+\",\n            0.9 => \"A-\",\n        \
    \    1.0 => \"A\",\n            1.1 => \"A+\",\n            _ => \"E\",\n    \
    \    };\n        result.push(grade_letter);\n    }\n    result", "    let letter_grade:\
    \ HashMap<f64, &str>;\n\n    // A map of GPAs to their letter grade letters\n\
    \    letter_grade =\n        grades\n            .iter()\n            .map(|grade|\
    \ match grade {\n                4.0 => \"A+\",\n                3.7 => \"A\"\
    ,\n                3.3 => \"A-\",\n                3.0 => \"B+\",\n          \
    \      2.7 => \"B\",\n                2.3 => \"B-\",\n                2.0 => \"\
    C+\",\n                1.7 => \"C\",\n                1.3 => \"C-\",\n       \
    \         1.0 => \"D+\",\n                0.7 => \"D\",\n                0.0 =>\
    \ \"D-\",\n                _ => unreachable!(),\n            })\n            .collect();\n\
    \n    grades\n        .iter()\n        .filter(|&grade| grade < 4.0)\n       \
    \ .filter(|&grade| grade < 3.7)\n        .filter(|&grade| grade < 3.3)\n     \
    \   .filter(|&grade| grade < 3.0)\n        .filter(|&grade| grade < 2.7)\n   \
    \     .filter(|&grade| grade < 2.3)\n        .filter(|&grade| grade < 2.0)\n \
    \       .filter(|&grade| grade < 1.7)\n        .filter(|&grade| grade < 1.3)\n\
    \        .filter(|&grade| grade < 1.0)\n        .filter(|&grade| grade < 0.7)\n\
    \        .filter(|&grade| grade < 0.0)\n        .map(|grade| letter_grade.entry(grade).or_insert(String::from(\"\
    E\")))\n        .collect()", "    let (min_grade, max_grade) = grades.min(|a,\
    \ b| b.partial_cmp(a));\n    grades.iter().filter(|&x| x > 0.0).map(|x| x / max_grade).collect::<Vec<String>>()",
  "    let (min_grade, max_grade) = grades.into_iter().minmax();\n\n    if max_grade\
    \ - min_grade < 0.001 {\n        vec![\"E\", \"A+\", \"A\", \"A-\", \"B+\", \"\
    B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"D\"]\n    } else\
    \ {\n        let mut letter_grades = vec![\"E\"];\n        for grade in grades\
    \ {\n            let grade = (grade - min_grade) / max_grade;\n            letter_grades.push(String::from(\"\
    \" + grade));\n        }\n        letter_grades\n    }", "    if grades.len()\
    \ < 12 {\n        return vec![String::from(\"E\")];\n    }\n    let mut letter:\
    \ Vec<String> = vec![];\n    let grade = grades[grades.len() - 12].sqrt();\n \
    \   let mut i = 0;\n    while grade > 1.0 {\n        if grade > i {\n        \
    \    i += 1;\n        } else {\n            i -= 1;\n        }\n        letter\
    \ = vec![String::from(&*(i + 1)).to_string()] + letter;\n        grade = grade\
    \ - i;\n    }\n    letter = vec![String::from(&*(grade))] + letter;\n    letter",
  "    let mut letter_grades = vec![];\n    for grade in grades {\n        match grade\
    \ {\n            4 => letter_grades.push(String::from(\"A+\")),\n            3.7\
    \ => letter_grades.push(String::from(\"A\")),\n            3.3 => letter_grades.push(String::from(\"\
    A-\")),\n            3.0 => letter_grades.push(String::from(\"B+\")),\n      \
    \      2.7 => letter_grades.push(String::from(\"B\")),\n            2.3 => letter_grades.push(String::from(\"\
    B-\")),\n            2.0 => letter_grades.push(String::from(\"C+\")),\n      \
    \      1.7 => letter_grades.push(String::from(\"C\")),\n            1.3 => letter_grades.push(String::from(\"\
    C-\")),\n            1.0 => letter_grades.push(String::from(\"D+\")),\n      \
    \      0.7 => letter_grades.push(String::from(\"D\")),\n            0.0 => letter_grades.push(String::from(\"\
    D-\")),\n            _ => letter_grades.push(String::from(\"E\")),\n        }\n\
    \    }\n    letter_grades", "    let mut grades_sum = grades.reduce(0, |a, b|\
    \ a + b);\n\n    let mut grades_so_far = vec![];\n    grades_so_far.push(\"E\"\
    );\n\n    for grade in grades.iter().rev() {\n        if grades_sum > 0.0 {\n\
    \            grades_so_far.push(String::from(\"D-\"));\n            grades_sum\
    \ -= 1.0;\n        } else if grades_sum < 0.0 {\n            grades_so_far.push(String::from(\"\
    D+\"));\n            grades_sum += 1.0;\n        } else {\n            grades_so_far.push(String::from(\"\
    D\"));\n            grades_sum = 0.0;\n        }\n\n        if grade > 3.0 {\n\
    \            grades_so_far.push(String::from(\"B-\"));\n            grades_sum\
    \ += 2.0;\n        } else if grade < 2.0 {\n            grades_so_far.push(String::from(\"\
    B+\"));\n            grades_sum -= 2.0;\n        } else if grade < 3.0 {\n   \
    \         grades_so_far.push(String::from(\"B\"));\n            grades_sum = 0.0;\n\
    \        }\n\n        if grade > 2.0 {\n            grades_so_far.push(String::from(\"\
    B-\"));\n            grades_sum += 1.0;\n        } else if grade < 2.0 {\n   \
    \         grades_so_far.push(String::from(\"B+\"));\n            grades_sum -=\
    \ 1.0;\n        } else if grade < 3.0 {\n            grades_so_far.push(String::from(\"\
    B\"));\n            grades_sum = 0.0;\n        }\n\n        if grade > 1.0 {\n\
    \            grades_so_far.push(String::from(\"B-\"));\n            grades_sum\
    \ += 1.0;\n        } else if grade < 1.0 {\n            grades_so_far.push(String::from(\"\
    B+\"));\n            grades_sum -= 1.0;\n        } else if grade < 2.0 {\n   \
    \         grades_so_far.push(String::from(\"B\"));\n            grades_sum = 0.0;\n\
    \        }\n\n        if grade > 0.7 {\n            grades_so_far.push(String::from(\"\
    B-\"));\n            grades_sum += 1.0;\n        } else if grade < 0.7 {\n   \
    \         grades_so_far.push(String::from(\"B+\"));\n            grades_sum -=\
    \ 1.0;\n        } else if grade < 1.0 {\n            grades_so_far.push(String::from(\"\
    B\"));\n            grades_sum = 0.0;\n        }\n\n        if grade > 0.", '    grades.iter().filter(|&x|
    x <= 3.0).map(|x| format!("{}", x).to_string()).collect::<Vec<String>>()', " \
    \   grades\n        .iter()\n        .enumerate()\n        .filter(|(index, _)|\
    \ index != grades.len() - 1)\n        .filter(|(_, grade)| grade > 0.0)\n    \
    \    .filter_map(|(index, _)| {\n            let grade = grades[index];\n    \
    \        match grade {\n                1.0 => \"D+\".to_string(),\n         \
    \       _ => match grades[index + 1] {\n                    2.0 => \"B-\".to_string(),\n\
    \                    _ => \"B-\".to_string(),\n                },\n          \
    \  }\n        })", "    let mut grades = grades;\n    let mut letter_grades: Vec<String>\
    \ = vec![String::from(\"\")];\n\n    for grade in grades {\n        let mut letter_grade\
    \ = String::from(\"\");\n        \n        if grade < 4.0{\n            letter_grade\
    \ = String::from(\"A+\");\n        }else if grade < 3.0{\n            letter_grade\
    \ = String::from(\"A\");\n        }else if grade < 2.7{\n            letter_grade\
    \ = String::from(\"A-\");\n        }else if grade < 2.3{\n            letter_grade\
    \ = String::from(\"B+\");\n        }else if grade < 2.0{\n            letter_grade\
    \ = String::from(\"B\");\n        }else if grade < 1.7{\n            letter_grade\
    \ = String::from(\"B-\");\n        }else if grade < 1.3{\n            letter_grade\
    \ = String::from(\"C+\");\n        }else if grade < 1.0{\n            letter_grade\
    \ = String::from(\"C\");\n        }else if grade < 0.7{\n            letter_grade\
    \ = String::from(\"C-\");\n        }else if grade < 0.6{\n            letter_grade\
    \ = String::from(\"D+\");\n        }else if grade < 0.4{\n            letter_grade\
    \ = String::from(\"D\");\n        }else if grade < 0.3{\n            letter_grade\
    \ = String::from(\"D-\");\n        }else if grade < 0.2{\n            letter_grade\
    \ = String::from(\"E\");\n        }else if grade < 0.0{\n            letter_grade\
    \ = String::from(\"F\");\n        }else{\n            letter_grade = String::from(\"\
    F\");\n        }\n        \n        letter_grades.push(letter_grade);\n    }\n\
    \    \n    letter_grades", "    let mut grades_vec = grades.to_vec();\n    let\
    \ mut counter = grades_vec.len() - 1;\n    let mut letter_grades = Vec::new();\n\
    \n    loop {\n        counter = counter - 1;\n\n        if grades_vec[counter]\
    \ < 1.0 {\n            letter_grades.push(String::from(\"D-\"));\n           \
    \ break;\n        }\n        \n        if grades_vec[counter] == 1.0 {\n     \
    \       if grades_vec[counter + 1] == 1.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            if grades_vec[counter\
    \ + 1] < 1.0 {\n                letter_grades.push(String::from(\"B+\"));\n  \
    \              break;\n            }\n            \n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n\n        if grades_vec[counter] == 0.0\
    \ {\n            if grades_vec[counter + 1] == 0.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            if grades_vec[counter\
    \ + 1] < 0.0 {\n                letter_grades.push(String::from(\"A-\"));\n  \
    \              break;\n            }\n            \n            letter_grades.push(String::from(\"\
    A-\"));\n            break;\n        }\n\n        if grades_vec[counter] >= 0.0\
    \ && grades_vec[counter + 1] < 0.0 && grades_vec[counter + 1] > 0.0 {\n      \
    \      if grades_vec[counter + 1] == 0.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            if grades_vec[counter\
    \ + 1] == 1.0 {\n                letter_grades.push(String::from(\"A+\"));\n \
    \               break;\n            }\n            \n            letter_grades.push(String::from(\"\
    A-\"));\n            break;\n        }\n\n        if grades_vec[counter] >= 0.0\
    \ && grades_vec[counter + 1] >= 0.0 && grades_vec[counter + 1] < 1.0 {\n     \
    \       if grades_vec[counter + 1] == 0.0 {\n                letter_grades.push(String::from(\"\
    B-\"));\n                break;\n            }\n            \n            letter_grades.push(String::from(\"\
    A+\"));\n            break;\n        }\n\n        if grades_vec[counter] >= 0.0\
    \ && grades_vec[counter + 1] == 1.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            break;\n        }\n        \n        if grades_vec[counter]\
    \ >= 1.0 {\n            letter_grades.push(String::from(\"C+\"));\n          \
    \  break;\n        }\n        \n        letter_grades.push(String::from(\"C\"\
    ));\n        break;\n    }\n\n    letter_grades", "    let mut grades_counter:\
    \ usize = 0;\n    let mut grade_vec: Vec<String> = Vec::new();\n    let mut min:\
    \ f64 = std::f64::MIN;\n    let mut max: f64 = std::f64::MAX;\n\n    for grade\
    \ in grades {\n        grades_counter += 1;\n        if grade > max {\n      \
    \      max = grade;\n        }\n        if grade < min {\n            min = grade;\n\
    \        }\n    }\n\n    for grade in grades {\n        let grade = grade - (max\
    \ - min) as f64;\n        let grade = grade / grades_counter;\n        let letter_grade:\
    \ String = match grade {\n            0..=1 => \"D+\",\n            1..=2 => \"\
    D\",\n            2..=3 => \"C-\",\n            3..=4 => \"C\",\n            4..=5\
    \ => \"B-\",\n            5..=6 => \"B\",\n            6..=7 => \"B-\",\n    \
    \        7..=8 => \"B\",\n            8..=9 => \"B-\",\n            10..=11 =>\
    \ \"B\",\n            12..=13 => \"B-\",\n            13..=14 => \"B\",\n    \
    \        15..=16 => \"B-\",\n            16..=17 => \"B\",\n            18..=19\
    \ => \"B-\",\n            20..=21 => \"B\",\n            22..=23 => \"B-\",\n\
    \            24..=25 => \"B\",\n            26..=27 => \"B-\",\n            28..=29\
    \ => \"B\",\n            30..=31 => \"B-\",\n            32..=33 => \"B\",\n \
    \           34..=35 => \"B-\",\n            36..=37 => \"B\",\n            38..=39\
    \ => \"B-\",\n            40..=41 => \"B\",\n            42.. <= 44 => \"B-\"\
    ,\n            45..=46 => \"B\",\n            47..=48 => \"B-\",\n           \
    \ 49..=50 => \"B\",\n            50..=51 => \"B-\",\n            52 <= 53 => \"\
    B-\",\n            54..=55 => \"B\",\n            56..=57 => \"B-\",\n       \
    \     58..=59 => \"B\",\n            60..=61 => \"B-\",\n            62 <= 63\
    \ => \"B-\",\n            64..=65 => \"B\",\n            66..=67 => \"B-\",\n",
  "    let mut letter_grades = vec![];\n    let mut count = 0;\n    for grade in grades\
    \ {\n        count = count + 1;\n        if count % 2 == 0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else {\n            letter_grades.push(String::from(\"B\"));\n\
    \        }\n    }\n    if grades.len() > 0 {\n        letter_grades.push(String::from(\"\
    E\"));\n    }\n    letter_grades", "    let mut letter_grades = Vec::new();\n\
    \    let mut total_grades = grades.iter().fold(0.0, |sum, grade| {\n        let\
    \ (grade, mut total) = sum.max(0.0);\n        if grade == 0.0 { 0.0 } else { total\
    \ + (grade as f64).sqrt() }\n    });\n    let mut letter = String::new();\n\n\
    \    for grade in grades.iter() {\n        let letter_grade = total_grades.min(0.0).max(0.0);\n\
    \        total_grades -= letter_grade;\n        if letter_grade == 0.0 { 0.0 }\
    \ else { letter += String::from(\"A-\"); }\n        letter += String::from(\"\"\
    \ + letter_grade as char);\n    }\n    letter_grades.push(letter);\n    letter_grades",
  "    let mut letter_grades = vec![];\n\n    // The GPA must be greater than 3.0\n\
    \    let mut gpa = grades.min().unwrap();\n    while gpa > 3.0 {\n        if gpa\
    \ == 4.0 {\n            letter_grades.push(String::from(\"A+\"));\n        } else\
    \ if gpa > 3.7 {\n            letter_grades.push(String::from(\"A\"));\n     \
    \   } else if gpa > 3.3 {\n            letter_grades.push(String::from(\"A-\"\
    ));\n        } else if gpa > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if gpa > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if gpa > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if gpa > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if gpa > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if gpa > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if gpa > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if gpa > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if gpa > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n\n        // The GPA must be less than 2.0\n        gpa = grades.max().unwrap();\n\
    \    }\n    letter_grades", "    let mut grades_letter = vec![\"A+\".to_string(),\
    \ \"B\".to_string(), \"B-\".to_string(), \"C\".to_string(), \"C-\".to_string(),\
    \ \"D\".to_string()];\n    for grade in grades {\n        if grade > 3.0 {\n \
    \           grades_letter.push(\"A\".to_string());\n        } else if grade >\
    \ 2.7 {\n            grades_letter.push(\"B\".to_string());\n        } else if\
    \ grade > 2.3 {\n            grades_letter.push(\"B-\".to_string());\n       \
    \ } else if grade > 1.7 {\n            grades_letter.push(\"C\".to_string());\n\
    \        } else if grade > 1.3 {\n            grades_letter.push(\"C-\".to_string());\n\
    \        } else if grade > 0.7 {\n            grades_letter.push(\"D\".to_string());\n\
    \        } else if grade > 0.3 {\n            grades_letter.push(\"D-\".to_string());\n\
    \        } else {\n            grades_letter.push(\"E\".to_string());\n      \
    \  }\n    }\n    grades_letter", "    grades\n        .iter()\n        .map(|x|\
    \ {\n            if x < 3.0 {\n                String::from(\"A+\")\n        \
    \    } else if x < 3.3 {\n                String::from(\"A\")\n            } else\
    \ if x < 3.7 {\n                String::from(\"A-\")\n            } else if x\
    \ < 3.0 {\n                String::from(\"B+\")\n            } else if x < 3.3\
    \ {\n                String::from(\"B\")\n            } else if x < 3.7 {\n  \
    \              String::from(\"B-\")\n            } else if x < 3.0 {\n       \
    \         String::from(\"C+\")\n            } else if x < 3.3 {\n            \
    \    String::from(\"C\")\n            } else if x < 3.7 {\n                String::from(\"\
    C-\")\n            } else if x < 3.0 {\n                String::from(\"D+\")\n\
    \            } else if x < 3.3 {\n                String::from(\"D\")\n      \
    \      } else if x < 3.7 {\n                String::from(\"D-\")\n           \
    \ } else if x < 3.0 {\n                String::from(\"E\")\n            } else\
    \ {\n                String::from(\"F\")\n            }\n        })\n        .collect()",
  "    if grades.len() == 0 {\n        return vec![\"F\"];\n    }\n\n    let mut grades:\
    \ Vec<String> = vec![\"F\"];\n\n    if grades[0] <= 5.0 { grades.push(\"A+\");\
    \ }\n    if grades[0] > 5.0 && grades[0] <= 7.0 { grades.push(\"A\"); }\n    if\
    \ grades[0] > 7.0 && grades[0] <= 9.0 { grades.push(\"A-\"); }\n    if grades[0]\
    \ > 9.0 && grades[0] <= 11.0 { grades.push(\"B+\"); }\n    if grades[0] > 11.0\
    \ && grades[0] <= 13.0 { grades.push(\"B\"); }\n    if grades[0] > 13.0 && grades[0]\
    \ <= 15.0 { grades.push(\"B-\"); }\n    if grades[0] > 15.0 && grades[0] <= 17.0\
    \ { grades.push(\"C+\"); }\n    if grades[0] > 17.0 && grades[0] <= 19.0 { grades.push(\"\
    C\"); }\n    if grades[0] > 19.0 && grades[0] <= 21.0 { grades.push(\"C-\"); }\n\
    \    if grades[0] > 21.0 { grades.push(\"D+\"); }\n    if grades[0] > 22.0 { grades.push(\"\
    D\"); }\n    if grades[0] > 22.0 { grades.push(\"D-\"); }\n    if grades[0] >\
    \ 22.0 { grades.push(\"E\"); }\n\n    return grades;", '    // TODO: Your code
    here', "    let mut result = vec![String::new(); grades.len()];\n    for grade\
    \ in grades {\n        match grade {\n            0.0 => result.push(String::from(\"\
    D-\")), \n            0.7 => result.push(String::from(\"D\")), \n            0.8\
    \ => result.push(String::from(\"D+\")), \n            1.0 => result.push(String::from(\"\
    C\")),\n            1.1 => result.push(String::from(\"C+\")),\n            1.2\
    \ => result.push(String::from(\"B+\")),\n            1.3 => result.push(String::from(\"\
    B\")),\n            1.4 => result.push(String::from(\"A-\")),\n            1.5\
    \ => result.push(String::from(\"A-\")),\n            _ => {\n                if\
    \ grade < 3.0 {\n                    result.push(String::from(\"A+\")); \n   \
    \             } else if grade < 4.0 {\n                    result.push(String::from(\"\
    A\")); \n                } else if grade < 5.0 {\n                    result.push(String::from(\"\
    A-\"));\n                } else {\n                    result.push(String::from(\"\
    B+\"));\n                }\n            }\n        }\n    }\n    result", "  \
    \  grades\n        .iter()\n        .enumerate()\n        .filter_map(|(i, g)|\
    \ {\n            if i < 3 {\n                Some(String::from(\n            \
    \        format!(\"{}\", g + 0.0).to_string(),\n                ))\n         \
    \   } else {\n                Some(String::from(\n                    format!(\"\
    {}\", g * 100).to_string(),\n                ))\n            }\n        })\n \
    \       .collect::<Vec<_>>()", "    let mut letter_grades: Vec<String> = vec![];\n\
    \    for i in 0..grades.len() {\n        let current_grade = grades.nth(i);\n\
    \        match current_grade {\n            0 => letter_grades.push(String::from(\"\
    E\")),\n            1 => letter_grades.push(String::from(\"D-\")),\n         \
    \   2 => letter_grades.push(String::from(\"C-\")),\n            3 => letter_grades.push(String::from(\"\
    B-\")),\n            4 => letter_grades.push(String::from(\"B-\")),\n        \
    \    5 => letter_grades.push(String::from(\"A-\")),\n            6 => letter_grades.push(String::from(\"\
    A-\")),\n            7 => letter_grades.push(String::from(\"A+\")),\n        \
    \    8 => letter_grades.push(String::from(\"B+\")),\n            9 => letter_grades.push(String::from(\"\
    C+\")),\n            10 => letter_grades.push(String::from(\"D+\")),\n       \
    \     11 => letter_grades.push(String::from(\"D+\")),\n            12 => letter_grades.push(String::from(\"\
    D+\")),\n            _ => return,\n        }\n    }\n    letter_grades", "   \
    \ let mut grades_vec: Vec<String> = vec![String::from(\"A+\")];\n    for grade\
    \ in grades.iter() {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    A-\"));\n        } else if grade < 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade < 2.7 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade < 2.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade < 1.7 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade < 1.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec", "    let mut letter_grades: Vec<String> =\
    \ vec![];\n    let mut temp_grade: f64 = 0;\n    let mut max_grade: f64 = grades.iter().max().unwrap();\n\
    \    \n    for grade in grades.iter() {\n        // If it's the same as the current\
    \ grade\n        if grade == temp_grade {\n            temp_grade += 0.3;\n  \
    \      } else {\n            temp_grade += 0.1;\n        }\n        \n       \
    \ // If it's greater than the max_grade - 0.2\n        if grade > max_grade -\
    \ 0.2 {\n            max_grade += 0.2;\n        }\n        \n        \n      \
    \  if grade > max_grade {\n            max_grade = grade;\n        }\n       \
    \ \n        if grade <= 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            break;\n        }\n        \n        let grades_str = String::from(\"\
    {:0.1f}\".to_string()).to_string();\n        let grades_str2 = String::from(\"\
    {:0.1f}\".to_string()).to_string();\n        \n        if grade < 0.0 {\n    \
    \        letter_grades.push(String::from(\"D-\"));\n        } else if grade <=\
    \ 0.2 {\n            letter_grades.push(String::from(\"B-\"));\n        } else\
    \ if grade <= 0.5 {\n            letter_grades.push(String::from(\"B-\"));\n \
    \       } else if grade <= 0.8 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.2 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.4 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 1.8 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.2 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.4 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.8 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 3.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        ", "    let mut lettergrades = vec![];\n\n    for grade in grades\
    \ {\n        let letter_grade = match grade {\n            0.0  => \"E\",\n  \
    \          0.1  => \"D-\",\n            0.2  => \"C-\",\n            0.3  => \"\
    B-\",\n            0.4  => \"B-\",\n            0.5  => \"B-\",\n            0.6\
    \  => \"B-\",\n            0.7  => \"B-\",\n            0.8  => \"B-\",\n    \
    \        0.9  => \"B-\",\n            1.0 => \"B-\",\n            1.1 => \"B-\"\
    ,\n            1.2 => \"B-\",\n            1.3 => \"B-\",\n            1.4 =>\
    \ \"B-\",\n            1.5 => \"B-\",\n            1.6 => \"B-\",\n          \
    \  1.7 => \"B-\",\n            1.8 => \"B-\",\n            1.9 => \"B-\",\n  \
    \          2.0 => \"B-\",\n            2.1 => \"B-\",\n            2.2 => \"B-\"\
    ,\n            2.3 => \"B-\",\n            2.4 => \"B-\",\n            2.5 =>\
    \ \"B-\",\n            2.6 => \"B-\",\n            2.7 => \"B-\",\n          \
    \  2.8 => \"B-\",\n            2.9 => \"B-\",\n            3.0 => \"B-\",\n  \
    \          3.1 => \"B-\",\n            3.2 => \"B-\",\n            3.3 => \"B-\"\
    ,\n            3.4 => \"B-\",\n            3.5 => \"B-\",\n            3.6 =>\
    \ \"B-\",\n            3.7 => \"B-\",\n            3.8 => \"B-\",\n          \
    \  3.9 => \"B-\",\n            4.0 => \"B-\",\n            > 4.0 => \"A+\",\n\
    \        };\n\n        lettergrades.push(letter_grade);\n    }\n\n    lettergrades",
  '    // Write your code here', "    let mut grades_sorted = grades.sort_unstable();\n\
    \    let mut grades_sorted = grades_sorted.rev();\n    let mut letter_grades =\
    \ Vec::new();\n    let mut grade = grades_sorted[0];\n    let mut grade_counter\
    \ = 0;\n    let mut grade_counter2 = 1;\n    let mut i = 0;\n    loop {\n    \
    \    if grade_counter2 % 5 == 0 && grade_counter % 5 == 0 {\n            grade_counter2\
    \ = 0;\n            letter_grades.push(String::from(\"E\"));\n        }\n    \
    \    if i == grades_sorted.len() {\n            break;\n        }\n        if\
    \ grade <= grades_sorted[i] {\n            grade += 0.1;\n            grade_counter\
    \ += 1;\n            grade_counter2 += 1;\n        } else {\n            grade\
    \ -= 0.1;\n            grade_counter += 1;\n            grade_counter2 += 1;\n\
    \        }\n        i += 1;\n    }\n    letter_grades", "    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_max = 0.0; // maximum grade\n    let\
    \ mut grades_min = 1.0; // minimum grade\n    for grade in grades {\n        if\
    \ grades_max < grade {\n            grades_max = grade;\n        }\n        if\
    \ grades_min > grade {\n            grades_min = grade;\n        }\n    }\n  \
    \  let grades_range = grades_max - grades_min;\n\n    for grade in grades {\n\
    \        let letter = if grades_range > 0.0 {\n            if grade <= grades_min\
    \ {\n                \"E\";\n            } else if grade > grades_max {\n    \
    \            \"D\";\n            } else {\n                let grades_range =\
    \ grade - grades_min;\n                if grades_range <= 0.3 {\n            \
    \        \"C\";\n                } else if grades_range <= 0.7 && grades_range\
    \ > 0.3 {\n                    \"B\";\n                } else if grades_range\
    \ <= 1.3 && grades_range > 0.7 && grades_range > 0.3 {\n                    \"\
    A\";\n                } else {\n                    let grades_range_float = grades_range.floor();\n\
    \                    let grades_range_float_f = grades_range_float.to_f();\n \
    \                   if grades_range_float_f == 0.01 {\n                      \
    \  \"A\";\n                    } else if grades_range_float_f == 0.03 {\n    \
    \                    \"A-\";\n                    } else if grades_range_float_f\
    \ == 0.07 {\n                        \"B+\";\n                    } else if grades_range_float_f\
    \ == 0.13 {\n                        \"B\";\n                    } else if grades_range_float_f\
    \ == 0.17 {\n                        \"B-\";\n                    } else if grades_range_float_f\
    \ == 0.20 {\n                        \"C+\";\n                    } else if grades_range_float_f\
    \ == 0.24 {\n                        \"C\";\n                    } else if grades_range_float_f\
    \ == 0.27 {\n                        \"C-\";\n                    } else if grades_range_float_f\
    \ == 0.30 {\n                        \"D+\";\n                    } else if grades_range_float_f\
    \ == 0.33 {\n                        \"D\";\n                    } else if grades_range_float_f\
    \ == 0.36 {\n                        \"D-\";\n                    } else {\n \
    \                       \"F\";\n                    }\n                }\n   \
    \         }\n        } else {\n            \"F\";\n        }\n        grades_vec.push(letter);\n\
    \    }\n    grades_vec", "    let mut grades_vec: Vec<String> = vec![];\n    for\
    \ i in grades.iter() {\n        match i {\n            4.0 => \"A+\".to_string(),\n\
    \            3.7 => \"A\".to_string(),\n            3.3 => \"A-\".to_string(),\n\
    \            3.0 => \"B+\".to_string(),\n            2.7 => \"B\".to_string(),\n\
    \            2.3 => \"B-\".to_string(),\n            2.0 => \"C+\".to_string(),\n\
    \            1.7 => \"C\".to_string(),\n            1.3 => \"C-\".to_string(),\n\
    \            1.0 => \"D+\".to_string(),\n            0.7 => \"D\".to_string(),\n\
    \            _ => \"E\".to_string()\n        }\n        grades_vec.push(grades_vec);\n\
    \    }\n    grades_vec", "    if grades.len() < 7 {\n        vec![String::from(\"\
    \")]\n    }\n    else if grades[0] <= 3.5 {\n        let mut letter_grade = String::from(\"\
    \");\n        for grade in grades {\n            if grade > 3.5 {\n          \
    \      letter_grade += \"A-\";\n            }\n            else if grade <= 2.3\
    \ {\n                letter_grade += \"B-\";\n            }\n            else\
    \ if grade <= 1.7 {\n                letter_grade += \"C-\";\n            }\n\
    \            else if grade <= 1.0{\n                letter_grade += \"D-\";\n\
    \            }\n            else if grade <= 0.7{\n                letter_grade\
    \ += \"D\";\n            }\n            else if grade <= 0.0{\n              \
    \  letter_grade += \"D+\";\n            }\n            else if grade < 3.0{\n\
    \                letter_grade += \"C\";\n            }\n            else if grade\
    \ < 2.7 {\n                letter_grade += \"B\";\n            }\n           \
    \ else if grade < 3.0 {\n                letter_grade += \"A\";\n            }\n\
    \            else if grade < 4.0 {\n                letter_grade += \"A+\";\n\
    \            }\n            else {\n                letter_grade += \"E\";\n \
    \           }\n        }\n        vec![letter_grade]\n    }\n    else {\n    \
    \    let mut letter_grade = String::from(\"\");\n        for grade in grades {\n\
    \            if grade > 3.0 {\n                letter_grade += \"B-\";\n     \
    \       }\n            else if grade <= 2.7{\n                letter_grade +=\
    \ \"B-\";\n            }\n            else if grade <= 1.7{\n                letter_grade\
    \ += \"C-\";\n            }\n            else if grade <= 1.0{\n             \
    \   letter_grade += \"D-\";\n            }\n            else if grade <= 0.7{\n\
    \                letter_grade += \"D\";\n            }\n            else if grade\
    \ <= 0.0{\n                letter_grade += \"D+\";\n            }\n          \
    \  else if grade < 3.0{\n                letter_grade += \"C\";\n            }\n\
    \            else if grade < 2.7 {\n                letter_grade += \"B\";\n \
    \           }\n            else if grade < 3.0 {\n                letter_grade\
    \ += \"A\";\n            }\n            else if grade < 4.0 {\n              \
    \  letter_grade += \"A+\";\n            }\n            else {\n              \
    \  letter_grade += \"E\";\n            }\n        }\n        vec![letter_grade]\n\
    \    }", "    grades.iter().map(|x| {\n        if x < 0.0 || x > 1.0 {\n     \
    \       return String::from(\"E\");\n        }\n        \n        let mut grade:\
    \ usize = 0;\n        if x > 3.0 {\n            grade = 1;\n        }\n      \
    \  if x > 2.3 {\n            grade = 2;\n        }\n        if x > 1.7 {\n   \
    \         grade = 3;\n        }\n        if x > 1.3 {\n            grade = 4;\n\
    \        }\n        if x > 1.0 {\n            grade = 5;\n        }\n        if\
    \ x > 0.7 {\n            grade = 6;\n        }\n        if x > 0.0 {\n       \
    \     grade = 7;\n        }\n        \n        String::from(vec![\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"][grade])\n    }).collect()", "    let mut letter_grades = vec![String::from(\"\
    E\")];\n    for i in grades.iter() {\n        let mut letter_grade = String::from(\"\
    E\");\n        let mut temp_grade = String::from(\"E\");\n        if i <= 3 {\n\
    \            temp_grade = String::from(\"A\");\n        } else if i <= 3.3 {\n\
    \            temp_grade = String::from(\"A-\");\n        } else if i <= 3.7 {\n\
    \            temp_grade = String::from(\"B+\");\n        } else if i <= 4.0 {\n\
    \            temp_grade = String::from(\"B\");\n        } else if i <= 4.3 {\n\
    \            temp_grade = String::from(\"B-\");\n        } else if i <= 4.7 {\n\
    \            temp_grade = String::from(\"C+\");\n        } else if i <= 5.0 {\n\
    \            temp_grade = String::from(\"C\");\n        } else if i <= 5.3 {\n\
    \            temp_grade = String::from(\"C-\");\n        } else if i <= 5.7 {\n\
    \            temp_grade = String::from(\"D+\");\n        } else if i <= 6.0 {\n\
    \            temp_grade = String::from(\"D\");\n        } else if i <= 6.3 {\n\
    \            temp_grade = String::from(\"D-\");\n        } else {\n          \
    \  temp_grade = String::from(\"F\");\n        }\n        letter_grades.push(temp_grade);\n\
    \    }\n    return letter_grades;", "    grades\n        .iter()\n        .enumerate()\n\
    \        .filter_map(|(i, grade)| if grade < 1.0 || grade > 0.7 { return None\
    \ })\n        .map(|(i, grade)| if grade < 1.0 { String::from(\"D-\") } else {\
    \ String::from(\"D\") })\n        .collect::<Vec<String>>()", "    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut highest_gpa = grades.iter().max();\n    grades_vec.push(String::from(\"\
    E\"));\n\n    for grade in grades {\n        if grade > highest_gpa {\n      \
    \      highest_gpa = grade;\n        }\n        grades_vec.push(match grade {\n\
    \            0.0 < _ => \"D\",\n            0.7 <= _ => \"D\",\n            1.3\
    \ <= _ => \"C\",\n            1.7 <= _ => \"C\",\n            2.3 <= _ => \"B\"\
    ,\n            2.7 <= _ => \"B\",\n            3.3 <= _ => \"B\",\n          \
    \  3.7 <= _ => \"B\",\n            4.0 <= _ => \"A+\",\n            4.7 <= _ =>\
    \ \"A+\",\n            5.3 <= _ => \"A+\",\n            5.7 <= _ => \"A+\",\n\
    \            6.3 <= _ => \"A+\",\n            6.7 <= _ => \"A+\",\n          \
    \  _ => \"A\",\n        });\n    }\n    grades_vec", "    let mut grades_vec:\
    \ Vec<String> = vec![];\n    for (i, grade) in grades.iter().enumerate() {\n \
    \       if grade > 3.0 { \n            grades_vec.push(String::from(format!(\"\
    {}-\", i + 1))); \n        }\n        if grade < 3.0 {\n            grades_vec.push(String::from(format!(\"\
    +{}-\", i + 1)));\n        }\n        if grade > 1.7 { \n            grades_vec.push(String::from(format!(\"\
    {}+\", i + 1))); \n        }\n        if grade < 1.7 { \n            grades_vec.push(String::from(format!(\"\
    -{}+\", i + 1)));\n        }\n        if grade > 2.3 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 2.3 { \n            grades_vec.push(String::from(format!(\"\
    +{}\", i + 1))); \n        }\n        if grade > 2.7 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 2.7 { \n            grades_vec.push(String::from(format!(\"\
    -{}\", i + 1))); \n        }\n        if grade > 3.0 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 3.0 { \n            grades_vec.push(String::from(format!(\"\
    -{}\", i + 1))); \n        }\n        if grade > 3.7 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 3.7 { \n            grades_vec.push(String::from(format!(\"\
    +{}\", i + 1))); \n        }\n        if grade > 4.0 { \n            grades_vec.push(String::from(format!(\"\
    {}\", i + 1))); \n        }\n        if grade < 4.0 { \n            grades_vec.push(String::from(format!(\"\
    -{}\", i + 1))); \n        }\n    }\n    grades_vec", "    let mut letter_grades\
    \ = vec![];\n    for grade in grades {\n        if grade < 4.0 {\n           \
    \ letter_grades.push(String::from(\"A+\"));\n        } else if grade < 4.3 {\n\
    \            letter_grades.push(String::from(\"A\"));\n        } else if grade\
    \ < 4.6 {\n            letter_grades.push(String::from(\"A-\"));\n        } else\
    \ if grade < 5.0 {\n            letter_grades.push(String::from(\"B+\"));\n  \
    \      } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 5.6 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 6.6 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 7.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 7.6 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 8.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"D-\"));\n\
    \        }\n    }\n    letter_grades", "    grades.iter().map(|g| {\n        match\
    \ g {\n            0.0 => \"D-\",\n            0.7 => \"D\",\n            1.0\
    \ => \"C-\",\n            1.7 => \"C\",\n            2.0 => \"B-\",\n        \
    \    2.7 => \"B\",\n            3.0 => \"B-\",\n            3.3 => \"B\",\n  \
    \          3.7 => \"B+\",\n            4.0 => \"A+\",\n            4.3 => \"A\"\
    ,\n            4.7 => \"A+\",\n            _ => panic!(\"Wrong grade: {}\", g),\n\
    \        }\n    }).collect()", "    let mut letters: Vec<String> = vec![\"A\"\
    , \"B\", \"C\", \"D\", \"E\"];\n    let mut sum: f64 = grades.iter().sum();\n\
    \    if sum > 0 {\n        letters.insert(grades.iter().skip(1).all(|&x| x >=\
    \ 4.0).collect::<String>(), sum as char);\n    }\n    letters", "    let mut letter_grade\
    \ = vec![];\n    let total_gpa = grades.iter().sum();\n    let mut total_percentage\
    \ = total_gpa as f32;\n    \n    for gpa in grades {\n        \n        // For\
    \ each grade \n        // multiply gpa by 100\n        // and take integer part\
    \ of the result\n        // add 1 to it\n        // divide it by total number\
    \ of grades\n        // and multiply it by 100\n        // divide it by 100\n\
    \        // round it down to an int\n        // then append it to the grade\n\
    \        total_percentage = total_percentage * (100 / grades.len()) as f32;\n\
    \        \n        if total_percentage < 3 {\n            letter_grade.push(String::from(\"\
    E\"));\n            break;\n        }\n        \n        letter_grade.push(String::from(\n\
    \            format!(\"{}+\", \n                (gpa * 100 + 1).round() / total_percentage\n\
    \            )\n        ));\n        \n        if total_percentage < 5 {\n   \
    \         letter_grade.push(String::from(\"D-\"));\n            break;\n     \
    \   }\n        \n        letter_grade.push(String::from(\n            format!(\"\
    {}\", \n                (gpa * 100 + 1).round() / total_percentage\n         \
    \   )\n        ));\n        \n        if total_percentage < 6 {\n            letter_grade.push(String::from(\"\
    D+\"));\n            break;\n        }\n        \n        letter_grade.push(String::from(\n\
    \            format!(\"{}\", \n                (gpa * 100 + 1).round() / total_percentage\n\
    \            )\n        ));\n        \n        if total_percentage < 8 {\n   \
    \         letter_grade.push(String::from(\"C-\"));\n            break;\n     \
    \   }\n        \n        letter_grade.push(String::from(\n            format!(\"\
    {}\", \n                (gpa * 100 + 1).round() / total_percentage\n         \
    \   )\n        ));\n        \n        if total_percentage < 10 {\n           \
    \ letter_grade.push(String::from(\"C\"));\n            break;\n        }\n   \
    \     \n        if total_percentage < 12 {\n            letter_grade.push(String::from(\"\
    B-\"));\n            break;\n        }\n        \n        letter_grade.push(String::from(\n\
    \            format!(\"{}\", \n                (gpa * 100 + 1).round() / total_percentage\n\
    \            )\n        ));\n        \n        if total_percentage < 14 {\n  \
    \          letter_grade.push(String::from(\"B\"));\n            break;\n     \
    \   }\n        \n        if total_percentage < 16 {\n            letter_grade.push(String::from(\"\
    A-\"));\n            break;\n        }\n        \n        letter_grade.push(String::from(\n\
    \            ", "    let grades = grades.clone();\n    grades.sort();\n    let\
    \ mut grades_iter = grades.into_iter().enumerate();\n    let mut grades_count\
    \ = grades.len() as u8;\n    let mut letter_grades = Vec::new();\n    for grade\
    \ in grades_iter {\n        if grade > grades[grades_count - 1] {\n          \
    \  grades_count -= 1;\n            grades_iter.next();\n        }\n        let\
    \ grade_str = String::from(\"D-\");\n        if grade < grades[grades_count -\
    \ 1] {\n            grades_count -= 1;\n            grades_iter.next();\n    \
    \        let grade_str = String::from(\"D+\");\n        }\n        letter_grades.push(grade_str);\n\
    \    }\n    letter_grades", "    let mut letter_grades = Vec::new();\n    for\
    \ grade in grades {\n        let letter_grade = match grade {\n            4.0\
    \         => \"A+\",\n            _ > 3.7   => \"A\",\n            _ > 3.3   =>\
    \ \"A-\",\n            _ > 3.0   => \"B+\",\n            _ > 2.7   => \"B\",\n\
    \            _ > 2.3   => \"B-\",\n            _ > 2.0   => \"C+\",\n        \
    \    _ > 1.7   => \"C\",\n            _ > 1.3   => \"C-\",\n            _ > 1.0\
    \   => \"D+\",\n            _ > 0.7   => \"D\",\n            _ > 0.0   => \"D-\"\
    ,\n            _ => return vec![\"E\"].iter().cloned().collect(),\n        };\n\
    \        letter_grades.push(letter_grade);\n    }\n    letter_grades", "    let\
    \ mut grades_str = String::new();\n\n    let mut total_gpa = grades.sum();\n \
    \   for i in 0..grades.len() {\n        let gpa = grades[i];\n        let letter\
    \ = if total_gpa <= 3.0 {\n            String::from(\"A+\")\n        } else if\
    \ total_gpa <= 4.0 {\n            String::from(\"A\")\n        } else if total_gpa\
    \ <= 5.0 {\n            String::from(\"A-\")\n        } else if total_gpa <= 6.0\
    \ {\n            String::from(\"B+\")\n        } else if total_gpa <= 7.0 {\n\
    \            String::from(\"B\")\n        } else if total_gpa <= 8.0 {\n     \
    \       String::from(\"B-\")\n        } else if total_gpa <= 9.0 {\n         \
    \   String::from(\"C+\")\n        } else if total_gpa <= 10.0 {\n            String::from(\"\
    C\")\n        } else if total_gpa <= 11.0 {\n            String::from(\"C-\")\n\
    \        } else if total_gpa <= 12.0 {\n            String::from(\"D+\")\n   \
    \     } else if total_gpa <= 13.0 {\n            String::from(\"D\")\n       \
    \ } else if total_gpa <= 14.0 {\n            String::from(\"D-\")\n        } else\
    \ if total_gpa <= 15.0 {\n            String::from(\"E\")\n        } else { String::from(\"\
    E\"); }\n\n        grades_str.push_str(&letter);\n        total_gpa -= gpa;\n\
    \    }\n    grades_str.push_str(\"E\");\n    grades_str.split_whitespace().collect::<Vec<String>>()",
  "    if grades.len() == 0 {\n        return vec![\"E\".to_string()];\n    }\n  \
    \  let mut grades_slice = grades.to_vec();\n    let grades_len = grades_slice.len();\n\
    \    let mut prev_grade: f64 = 0;\n    let mut next_grade: f64 = 0;\n    let mut\
    \ grades: Vec<String> = vec![\"E\".to_string()];\n    let mut index = grades_slice.len()\
    \ - 1;\n    grades.insert(0, grades_slice[index].to_string());\n    while index\
    \ >= 0 {\n        if grades_slice[index] == 0.0 {\n            index -= 1;\n \
    \           continue;\n        }\n        if grades_slice[index] > prev_grade\
    \ {\n            next_grade = prev_grade;\n        } else {\n            next_grade\
    \ = grades_slice[index];\n        }\n        grades.insert(0, next_grade.to_string());\n\
    \        prev_grade = next_grade;\n        index -= 1;\n    }\n    grades", " \
    \   let mut grades_clone = grades;\n    grades_clone.pop();\n    let mut letter_grades\
    \ = vec![\"D-\"];\n    let mut min_grade: f64 = grades.first().unwrap();\n   \
    \ let mut grades_idx = 0;\n\n    // Loop through the vector and find the lowest\
    \ grade and \n    // put it in the letter_grades vector\n    for grade in grades_clone\
    \ {\n        if grade < min_grade {\n            min_grade = grade;\n        \
    \    grades_idx = grades_clone.iter().position(|x| x == grade).unwrap();\n   \
    \     }\n    }\n\n    // loop through all the grades in the vector to see which\
    \ grade is \n    // the lowest grade and put it in the letter_grades vector\n\
    \    while grades_idx != grades_clone.len() - 1 {\n        if grades_clone[grades_idx]\
    \ > min_grade {\n            letter_grades.push(format!(\"{}-\", grades_clone[grades_idx]));\n\
    \        } else {\n            letter_grades.push(format!(\"+{}\", grades_clone[grades_idx]));\n\
    \        }\n        grades_idx += 1;\n    }\n\n    // Finally add the letter grade\
    \ for the last student\n    letter_grades.push(format!(\"+{}\", grades_clone[grades_idx]));\n\
    \n    letter_grades", "    let len = grades.len();\n    let mut letter_grades\
    \ = vec![];\n    let mut curr_grade : f64 = 0.0;\n    let mut prev_grade : f64\
    \ = 0.0;\n\n    for grade in grades {\n        let mut grade = grade - prev_grade;\n\
    \        if grade >= 3.0 {\n            grade -= 3.0;\n            curr_grade\
    \ += 4.0;\n        }\n        if grade <= 2.0 {\n            grade -= 2.0;\n \
    \           curr_grade += 3.0;\n        }\n        if grade < 3.0 {\n        \
    \    grade -= 2.0;\n            curr_grade += 2.0;\n        }\n        if grade\
    \ > 3.0 {\n            grade -= 3.0;\n            curr_grade += 1.0;\n       \
    \ }\n        letter_grades.push(String::from(\"B+\") if grade == 2.7 || grade\
    \ == 2.3 || grade == 2.0 || grade == 1.7 || grade == 1.3 || grade == 1.0 || grade\
    \ == 0.7 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade == 0.0 || grade\
    \ == 0.0 || grade == 0.0 ", "    let mut grades = grades;\n    let mut letter_grades\
    \ = vec![];\n    grades.pop();\n    grades.pop();\n    for grade in grades.iter()\
    \ {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            break;\n        }\n        if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        if grade < 3.7 {\n           \
    \ letter_grades.push(String::from(\"C+\"));\n            break;\n        }\n \
    \       if grade < 4.0 {\n            letter_grades.push(String::from(\"B-\"));\n\
    \            break;\n        }\n        if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if grade < 4.7 {\n           \
    \ letter_grades.push(String::from(\"A-\"));\n            break;\n        }\n \
    \       if grade < 5.0 {\n            letter_grades.push(String::from(\"A+\"));\n\
    \            break;\n        }\n        if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            break;\n        }\n        if grade < 5.7 {\n           \
    \ letter_grades.push(String::from(\"A-\"));\n            break;\n        }\n \
    \       if grade < 6.0 {\n            letter_grades.push(String::from(\"D+\"));\n\
    \            break;\n        }\n        if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n            break;\n        }\n        if grade < 6.7 {\n           \
    \ letter_grades.push(String::from(\"D-\"));\n            break;\n        }\n \
    \   }\n    letter_grades", "    let mut letter_grades: Vec<String> = vec![];\n\
    \    for (i, grade) in grades.iter().enumerate() {\n        letter_grades.push((grades[i]\
    \ + 5.0).to_string());\n        if i != grades.len() - 1 {\n            letter_grades.push(String::from(\"\
    +\"));\n        }\n    }\n    letter_grades", "    match grades.len() {\n    \
    \    1 => vec![\"A\"],\n        2 => vec![\"A+\"],\n        3 => vec![\"A-\"],\n\
    \        4 => vec![\"B+\"],\n        5 => vec![\"B\"],\n        6 => vec![\"B-\"\
    ],\n        7 => vec![\"C+\"],\n        8 => vec![\"C\"],\n        9 => vec![\"\
    C-\"],\n        10 => vec![\"D+\"],\n        11 => vec![\"D\"],\n        12 =>\
    \ vec![\"D-\"],\n        13 => vec![\"E\"],\n        _ => vec![\"NA\"],\n    }",
  "    let mut grades_copy = grades.clone();\n    let mut letter_grade = vec![];\n\
    \    for i in 0..grades.len() {\n        if grades[i] > 0.0 {\n            let\
    \ grade: f64 = grades_copy[i as usize];\n            \n            if grade >\
    \ 3.0 {\n                letter_grade.push(\"B+\");\n            } else if grade\
    \ > 2.7 {\n                letter_grade.push(\"B\");\n            } else if grade\
    \ > 2.3 {\n                letter_grade.push(\"B-\");\n            } else if grade\
    \ > 2.0 {\n                letter_grade.push(\"C+\");\n            } else if grade\
    \ > 1.7 {\n                letter_grade.push(\"C\");\n            } else if grade\
    \ > 1.3 {\n                letter_grade.push(\"C-\");\n            } else if grade\
    \ > 1.0 {\n                letter_grade.push(\"D+\");\n            } else if grade\
    \ > 0.7 {\n                letter_grade.push(\"D\");\n            } else if grade\
    \ > 0.0 {\n                letter_grade.push(\"D-\");\n            } else {\n\
    \                letter_grade.push(\"E\");\n            }\n        }\n    }\n\
    \    letter_grade", '    // Your code here', '    // Write your code here', " \
    \   let mut letter_grades: Vec<String> = vec![];\n    let mut current_grade =\
    \ grades.first();\n    for grade in grades.iter() {\n        if grade > current_grade\
    \ {\n            letter_grades.push(String::from(numerical_letter_grade(vec![current_grade])))\n\
    \        }\n        if grade < current_grade {\n            letter_grades.push(String::from(\"\
    E\"))\n        } else {\n            if grade == 0.0 {\n                letter_grades.push(String::from(\"\
    E\"))\n            } else {\n                let letter_grade = match grade {\n\
    \                    1.0 => \"A+\",\n                    2.0 => \"A\",\n     \
    \               3.0 => \"A-\",\n                    4.0 => \"B+\",\n         \
    \           5.0 => \"B\",\n                    6.0 => \"B-\",\n              \
    \      7.0 => \"C+\",\n                    8.0 => \"C\",\n                   \
    \ 9.0 => \"C-\",\n                    10.0 => \"D+\",\n                    11.0\
    \ => \"D\",\n                    12.0 => \"D-\",\n                    13.0 =>\
    \ \"E\",\n                    14.0 => \"F\",\n                    15.0 => \"F\"\
    ,\n                    16.0 => \"F\",\n                    17.0 => \"F\",\n  \
    \                  18.0 => \"F\",\n                    19.0 => \"F\",\n      \
    \              20.0 => \"F\",\n                    20.0 => \"F\",\n          \
    \          20.0 => \"F\",\n                    20.0 => \"F\",\n              \
    \      20.0 => \"F\",\n                    20.0 => \"F\",\n                  \
    \  20.0 => \"F\",\n                    20.0 => \"F\",\n                    20.0\
    \ => \"F\",\n                    20.0 => \"F\",\n                    20.0 => \"\
    F\",\n                    20.0 => \"F\",\n                    20.0 => \"F\",\n\
    \                    20.0 => \"F\",\n                    20.0 => \"F\",\n    \
    \                20.0 => \"F\",\n                    20.0 => \"F\",\n        \
    \            20.0 => \"F\",\n                    20.0 => \"F\",\n            \
    \        20.0 => \"F\",\n                    20.0 => \"F\",\n                \
    \    20.0 => \"F\",\n                    20.0 => \"F\",\n                    20.0\
    \ => \"F\",\n                    20.0 => \"F\",\n                    20.0 => \"\
    F\",\n                    20.0 => \"F\",\n                    20.0 => \"F\",\n\
    \                    20.0 => \"F\",\n                    20.0 => \"F\",\n    \
    \                20.0 => \"F\",\n                    20.0 => \"F\",\n        \
    \            20.0 => \"F\",\n                    20.0 => \"F\",\n            \
    \        20.0 => \"F\",\n                    20.0 => \"F\",\n                \
    \    20.0 => \"F\",\n                    20.", "    let mut grades_len = grades.len();\n\
    \    let mut letter_grades: Vec<String> = vec![];\n    while grades_len > 0 {\n\
    \        let grade = grades.pop().unwrap();\n        let letter = match grade\
    \ {\n            4.0 => \"A+\",\n            > 3.7 => \"A\",\n            > 3.3\
    \ => \"A-\",\n            > 3.0 => \"B+\",\n            > 2.7 => \"B\",\n    \
    \        > 2.3 => \"B-\",\n            > 2.0 => \"C+\",\n            > 1.7 =>\
    \ \"C\",\n            > 1.3 => \"C-\",\n            > 1.0 => \"D+\",\n       \
    \     > 0.7 => \"D\",\n            > 0.0 => \"D-\",\n            0.0 => \"E\"\
    ,\n        };\n        letter_grades.push(letter);\n    }\n    letter_grades",
  "    let mut letter_grades: Vec<String> = vec![];\n    for grade in grades.iter()\
    \ {\n        let mut grade_letter = String::from(\"\");\n        if grade >= 3.0\
    \ {\n            grade_letter = format!(\"{}+\", grade - 3.0);\n        } else\
    \ if grade < 3.0 {\n            grade_letter = format!(\"{}\", grade);\n     \
    \   } else {\n            grade_letter = format!(\"{}\", grade);\n        }\n\
    \        letter_grades.push(grade_letter);\n    }\n    return letter_grades;",
  "    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec_len: Vec<f64>\
    \ = vec![];\n    for grade in grades {\n        grades_vec_len.push(grade);\n\
    \    }\n\n    while grades_vec_len.len() > 1 {\n        let grade = grades_vec_len.iter().max().unwrap();\n\
    \        let mut last_index = 0;\n\n        for index in grades_vec_len.iter().skip(1)\
    \ {\n            if grades_vec_len[index] > grade {\n                last_index\
    \ = index;\n            }\n        }\n\n        grades_vec_len = grades_vec_len.iter().take(last_index\
    \ + 1).collect();\n        grades_vec.push(grade);\n    }\n    grades_vec.push(grades_vec_len[0]);\n\
    \n    grades_vec", "    grades.iter().enumerate().map(|(index, grade)| {\n   \
    \     match grade {\n            4 => \"A+\",\n            0..3 => \"A\",\n  \
    \          3.7 => \"A- \",\n            3.3 => \"B+\",\n            2.7 => \"\
    B\",\n            2.3 => \"B-\",\n            2.0 => \"C+\",\n            1.7\
    \ => \"C\",\n            1.3 => \"C-\",\n            1.0 => \"D+\",\n        \
    \    0.7 => \"D\",\n            _ => \"D-\",\n            0 => \"E\"\n       \
    \ }\n    }).collect()", "    let mut grades_vec = vec![String::new(), String::new(),\
    \ String::new(), String::new(), String::new(), String::new(), String::new()];\n\
    \    grades_vec[0] = String::from(\"A+\");\n    for grade in grades.iter() {\n\
    \        if grade >= 3.0 {\n            grades_vec[1] = String::from(\"A\");\n\
    \        } else if grade > 2.0 && grade <= 3.0 {\n            grades_vec[1] =\
    \ String::from(\"A-\");\n        } else if grade > 1.7 && grade <= 2.0 {\n   \
    \         grades_vec[1] = String::from(\"B\");\n        } else if grade > 1.3\
    \ && grade <= 1.7 {\n            grades_vec[1] = String::from(\"B-\");\n     \
    \   } else if grade > 1.0 && grade <= 1.3 {\n            grades_vec[1] = String::from(\"\
    C\");\n        } else if grade > 0.7 && grade <= 1.0 {\n            grades_vec[1]\
    \ = String::from(\"C-\");\n        } else if grade > 0.3 && grade <= 0.7 {\n \
    \           grades_vec[1] = String::from(\"D\");\n        } else if grade > 0.0\
    \ && grade <= 0.3 {\n            grades_vec[1] = String::from(\"D+\");\n     \
    \   } else {\n            grades_vec[1] = String::from(\"E\");\n        }\n  \
    \  }\n    grades_vec", "    let mut grades_strings: Vec<String> = vec![String::from(\"\
    \".to_string());\n    for grade in grades {\n        if grade > 3 {\n        \
    \    grades_strings.push(String::from(\"D+\".to_string()));\n        } else if\
    \ grade > 2.7 {\n            grades_strings.push(String::from(\"B\".to_string()));\n\
    \        } else if grade > 2.3 {\n            grades_strings.push(String::from(\"\
    B-\".to_string()));\n        } else if grade > 2 {\n            grades_strings.push(String::from(\"\
    C+\".to_string()));\n        } else if grade > 1.7 {\n            grades_strings.push(String::from(\"\
    C\".to_string()));\n        } else if grade > 1.3 {\n            grades_strings.push(String::from(\"\
    C-\".to_string()));\n        } else if grade > 1 {\n            grades_strings.push(String::from(\"\
    D-\".to_string()));\n        } else if grade > 0.7 {\n            grades_strings.push(String::from(\"\
    D\".to_string()));\n        } else if grade > 0.3 {\n            grades_strings.push(String::from(\"\
    E\".to_string()));\n        } else {\n            grades_strings.push(String::from(\"\
    A\".to_string()));\n        }\n    }\n    grades_strings", "    let mut grades_str\
    \ = grades.iter().cloned().collect::<Vec<String>>();\n    for grade in grades_str.iter()\
    \ {\n        if grade > 3.0 && grade < 3.7 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 3.7).unwrap(), String::from(\"A\"));\n        } else if grade > 3.3 &&\
    \ grade < 3.7 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 3.3).unwrap(), String::from(\"A-\"));\n        } else if grade > 2.0 &&\
    \ grade < 3.0 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 2.0).unwrap(), String::from(\"B+\"));\n        } else if grade > 2.7 &&\
    \ grade < 3.0 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 2.7).unwrap(), String::from(\"B\"));\n        } else if grade > 2.3 &&\
    \ grade < 2.7 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 2.3).unwrap(), String::from(\"B-\"));\n        } else if grade > 1.7 &&\
    \ grade < 3.0 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 1.7).unwrap(), String::from(\"C+\"));\n        } else if grade > 1.3 &&\
    \ grade < 1.7 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 1.3).unwrap(), String::from(\"C\"));\n        } else if grade > 1.0 &&\
    \ grade < 1.3 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 1.0).unwrap(), String::from(\"D+\"));\n        } else if grade > 0.7 &&\
    \ grade < 1.0 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 0.7).unwrap(), String::from(\"D\"));\n        } else if grade > 0.0 &&\
    \ grade < 0.7 {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 0.0).unwrap(), String::from(\"D-\"));\n        } else {\n            grades_str.insert(grades_str.iter().position(|&x|\
    \ *x > 0.0).unwrap(), String::from(\"E\"));\n        }\n    }\n    grades_str",
  "    let mut letter_grades: Vec<String> = vec![];\n    for grade in grades.iter()\
    \ {\n        if grade >= 3.5 {\n            letter_grades.push(\"A+\");\n    \
    \    } else if grade > 3.0 {\n            letter_grades.push(\"A\");\n       \
    \ } else if grade > 2.7 {\n            letter_grades.push(\"B+\");\n        }\
    \ else if grade > 2.3 {\n            letter_grades.push(\"B\");\n        } else\
    \ if grade > 1.7 { \n            letter_grades.push(\"C+\");\n        } else if\
    \ grade > 1.3 { \n            letter_grades.push(\"C\");\n        } else if grade\
    \ > 1.0 { \n            letter_grades.push(\"D+\");\n        } else if grade >\
    \ 0.7 { \n            letter_grades.push(\"D\");\n        } else {\n         \
    \   letter_grades.push(\"D-\");\n        }\n    }\n    letter_grades", "    grades.into_iter().map(|f|\
    \ {\n        match f {\n            f if f <= 3.0 => \"A+\".to_string(),\n   \
    \         f if f > 3.0 and f < 3.7 => \"A\".to_string(),\n            f if f >\
    \ 3.7 && f < 4.0 => \"A-\".to_string(),\n            f if f > 4.0 and f < 4.7\
    \ => \"B+\".to_string(),\n            f if f > 4.7 && f < 5.0 => \"B\".to_string(),\n\
    \            f if f > 5.0 and f < 5.7 => \"B-\".to_string(),\n            f if\
    \ f > 5.7 && f < 6.0 => \"C+\".to_string(),\n            f if f > 6.0 and f <\
    \ 6.7 => \"C\".to_string(),\n            f if f > 6.7 and f < 7.0 => \"C-\".to_string(),\n\
    \            f if f > 7.0 and f < 7.7 => \"D+\".to_string(),\n            f if\
    \ f > 7.7 and f < 8.0 => \"D\".to_string(),\n            f if f > 8.0 and f <\
    \ 8.7 => \"D-\".to_string(),\n            _ => \"E\".to_string(),\n        }\n\
    \    }).collect()", "    let mut grades_strings: Vec<String> = vec![];\n    let\
    \ mut current_grade: f64 = 0.0;\n    for grade in grades {\n        current_grade\
    \ += grade;\n        grades_strings.push_back(format!(\"{}\", current_grade));\n\
    \    }\n    grades_strings", "    let mut grade_array: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade < 3.9 {\n            grade_array.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            grade_array.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            grade_array.push(String::from(\"\
    C+\"));\n        } else if grade < 6.0 {\n            grade_array.push(String::from(\"\
    C\"));\n        } else if grade < 7.0 {\n            grade_array.push(String::from(\"\
    D+\"));\n        } else if grade < 8.0 {\n            grade_array.push(String::from(\"\
    D\"));\n        } else if grade < 9.0 {\n            grade_array.push(String::from(\"\
    D-\"));\n        } else if grade < 10.0 {\n            grade_array.push(String::from(\"\
    E\"));\n        } else {\n            grade_array.push(String::from(\"F\"));\n\
    \        }\n    }\n    grade_array", "    if grades.len() == 0 {\n        return\
    \ vec![\"E\"];\n    }\n    if grades.len() == 1 {\n        return vec![\n    \
    \        format!(\"{}\", grades[0] < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n\
    \    if grades.len() == 2 {\n        return vec![\n            format!(\"{}\"\
    , grades[0] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\", grades[1] < 3.0\
    \ ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len() == 3 {\n        return\
    \ vec![\n            format!(\"{}\", grades[0] < 3.0 ? \"A\" : \"B\"),\n     \
    \       format!(\"{}\", grades[1] < 3.0 ? \"A\" : \"B\"),\n            format!(\"\
    {}\", grades[2] < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len()\
    \ == 4 {\n        return vec![\n            format!(\"{}\", grades[0] < 3.0 ?\
    \ \"A\" : \"B\"),\n            format!(\"{}\", grades[1] < 3.0 ? \"A\" : \"B\"\
    ),\n            format!(\"{}\", grades[2] < 3.0 ? \"A\" : \"B\"),\n          \
    \  format!(\"{}\", grades[3] < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n    if\
    \ grades.len() == 5 {\n        return vec![\n            format!(\"{}\", grades[0]\
    \ < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\", grades[1] < 3.0 ? \"A\"\
    \ : \"B\"),\n            format!(\"{}\", grades[2] < 3.0 ? \"A\" : \"B\"),\n \
    \           format!(\"{}\", grades[3] < 3.0 ? \"A\" : \"B\"),\n            format!(\"\
    {}\", grades[4] < 3.0 ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len()\
    \ == 6 {\n        return vec![\n            format!(\"{}\", grades[0] < 3.0 ?\
    \ \"A\" : \"B\"),\n            format!(\"{}\", grades[1] < 3.0 ? \"A\" : \"B\"\
    ),\n            format!(\"{}\", grades[2] < 3.0 ? \"A\" : \"B\"),\n          \
    \  format!(\"{}\", grades[3] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\"\
    , grades[4] < 3.0 ? \"A\" : \"B\"),\n            format!(\"{}\", grades[5] < 3.0\
    \ ? \"A\" : \"B\"),\n        ];\n    }\n    if grades.len() == 7 {\n        return\
    \ vec![\n            format!(\"{}\", grades[0] < 3.0 ? \"A\" : \"B\"),\n     \
    \       format!(\"{}", "    let grades_sum = grades.iter().sum();\n\n    // if\
    \ grades_sum > 3.7, grade is A+\n    // if grades_sum > 3.3, grade is A- \n  \
    \  // if grades_sum > 3.0, grade is B+\n    // if grades_sum > 2.7, grade is B\n\
    \    // if grades_sum > 2.3, grade is B-\n    // if grades_sum > 2.0, grade is\
    \ C+\n    // if grades_sum > 1.7, grade is C\n    // if grades_sum > 1.3, grade\
    \ is C-\n    // if grades_sum > 1.0, grade is D+\n    // if grades_sum > 0.7,\
    \ grade is D\n    // if grades_sum > 0.0, grade is D-\n    // if grades_sum <\
    \ 0.0, grade is E\n    match grades_sum {\n        1.0 => vec![\"D+\"],\n    \
    \    2.0 => vec![\"D\"],\n        3.0 => vec![\"C\"],\n        4.0 => vec![\"\
    B\"],\n        5.0 => vec![\"B+\"],\n        6.0 => vec![\"A-\"],\n        7.0\
    \ => vec![\"A-\"],\n        _ => vec![\"E\"]\n    }", "    let mut letter_grades\
    \ = vec![\"E\".to_string()];\n    for grade in grades {\n        if grade < 3.0\
    \ {\n            letter_grades.push(String::from(\"A\"));\n        } else if grade\
    \ < 4.0 {\n            letter_grades.push(String::from(\"B\"));\n        } else\
    \ if grade < 5.0 {\n            letter_grades.push(String::from(\"C\"));\n   \
    \     } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades", '    // TODO', "    let mut letter_grades\
    \ = vec![];\n    let mut max = 0.0f64;\n    for grade in grades {\n        if\
    \ grade > max {\n            max = grade;\n        }\n    }\n    for grade in\
    \ grades {\n        if grade >= max {\n            let letter_grade = String::from(\"\
    E\");\n            if grade < max {\n                letter_grade = String::from(\n\
    \                    \"D\"\n                );\n                if grade > max\
    \ {\n                    letter_grade = String::from(\n                      \
    \  \"C\"\n                    );\n                    if grade > max {\n     \
    \                   letter_grade = String::from(\n                           \
    \ \"B\"\n                        );\n                        if grade > max {\n\
    \                            letter_grade = String::from(\n                  \
    \              \"A\"\n                            );\n                       \
    \ }\n                    }\n                }\n            }\n            letter_grades.push(letter_grade);\n\
    \        }\n    }\n    letter_grades", "    grades.iter()\n        .enumerate()\n\
    \        .map(|(idx, grade)| {\n            if grade > 0.0 {\n               \
    \ match grade {\n                    0..=5.0 => String::from(\"A\"),\n       \
    \             5.1..=10.0 => String::from(\"A-\"),\n                    10.0..=15.0\
    \ => String::from(\"B\"),\n                    15.0..=20.0 => String::from(\"\
    B-\"),\n                    20.0..=30.0 => String::from(\"C\"),\n            \
    \        30.0..=35.0 => String::from(\"C-\"),\n                    35.0..=40.0\
    \ => String::from(\"D\"),\n                    40.0..=45.0 => String::from(\"\
    D-\"),\n                    45.0..=55.0 => String::from(\"E\"),\n            \
    \        55.0..=95.0 => String::from(\"F\"),\n                    _ => String::from(\"\
    E\"),\n                }\n            } else {\n                String::from(\"\
    D\")\n            }\n        })\n        .collect()", "    grades.iter().map(|x|\
    \ x.to_string()).filter_map(|x| match x {\n        x if x < 0.0 => None,\n   \
    \     x if x > 0.0 => Some(x.to_string()),\n        _ => Some(String::from(\"\
    E\")),\n    }).collect::<Vec<String>>()", "    let mut letter_grades = vec![];\n\
    \    for grade in grades {\n        let grade = grade as f64;\n        if grade\
    \ <= 0 {\n            continue;\n        }\n        if grade < 3.0 {\n       \
    \     letter_grades.push(\"A+\");\n        } else if grade < 3.7 {\n         \
    \   letter_grades.push(\"A\");\n        } else if grade < 4.0 {\n            letter_grades.push(\"\
    A-\");\n        } else if grade < 5.0 {\n            letter_grades.push(\"B+\"\
    );\n        } else if grade < 6.0 {\n            letter_grades.push(\"B\");\n\
    \        } else if grade < 7.0 {\n            letter_grades.push(\"B-\");\n  \
    \      } else if grade < 8.0 {\n            letter_grades.push(\"C+\");\n    \
    \    } else if grade < 9.0 {\n            letter_grades.push(\"C\");\n       \
    \ } else if grade < 10.0 {\n            letter_grades.push(\"C-\");\n        }\
    \ else if grade < 11.0 {\n            letter_grades.push(\"D+\");\n        } else\
    \ if grade < 12.0 {\n            letter_grades.push(\"D\");\n        } else if\
    \ grade < 13.0 {\n            letter_grades.push(\"D-\");\n        } else if grade\
    \ < 14.0 {\n            letter_grades.push(\"E\");\n        } else {\n       \
    \     letter_grades.push(\"F\");\n        }\n    }\n    letter_grades", "    let\
    \ mut letter_grades: Vec<String> = vec![];\n\n    for grade in grades.iter() {\n\
    \        let letter_grade = (grade as f64 / 4.0) as u32;\n        letter_grades.push(string_letter_grade(&letter_grade));\n\
    \    }\n\n    letter_grades", "    let mut grades_vec: Vec<String> = grades.iter().map(|x|\
    \ {\n        if x <= 3.0 {\n            String::from(\"A+\")\n        } else if\
    \ x <= 3.3 {\n            String::from(\"A\")\n        } else if x <= 3.7 {\n\
    \            String::from(\"A-\")\n        } else if x <= 4.0 {\n            String::from(\"\
    B+\")\n        } else if x <= 4.3 {\n            String::from(\"B\")\n       \
    \ } else if x <= 4.7 {\n            String::from(\"B+\")\n        } else if x\
    \ <= 5.0 {\n            String::from(\"C+\")\n        } else if x <= 5.3 {\n \
    \           String::from(\"C\")\n        } else if x <= 5.7 {\n            String::from(\"\
    C+\")\n        } else if x <= 6.0 {\n            String::from(\"D+\")\n      \
    \  } else if x <= 6.3 {\n            String::from(\"D\")\n        } else if x\
    \ <= 6.7 {\n            String::from(\"D+\")\n        } else {\n            String::from(\"\
    E\")\n        }\n    }).collect();\n    grades_vec.sort();\n    grades_vec", " \
    \   let grades_sum: f64 = grades.iter().sum();\n    let grades_range: f64 = grades.iter().max()\
    \ - grades.iter().min();\n    let grades_avg: f64 = grades_sum / grades.len();\n\
    \    let grades_avg_range: f64 = grades_range / grades.len();\n    let mut grades_avg\
    \ = grades_avg;\n    let mut grades_avg_range = grades_avg_range;\n    let mut\
    \ grades_range: f64 = grades_range;\n    let mut grades_sum: f64 = grades_sum;\n\
    \    let mut grades_diff: f64 = 0.0;\n    let mut grades_min_diff: f64 = grades.iter().min().unwrap();\n\
    \    let mut grades_max_diff: f64 = grades.iter().max().unwrap();\n    let mut\
    \ grades_sum: f64 = grades.iter().sum();\n    let grades_avg_range: f64 = grades.iter().max()\
    \ - grades.iter().min();\n    let grades_avg: f64 = grades_sum / grades.len();\n\
    \    let grades_avg_range: f64 = grades_range / grades.len();\n    let mut grades_avg\
    \ = grades_avg;\n    let mut grades_avg_range = grades_avg_range;\n    let mut\
    \ grades_range: f64 = grades_range;\n    let mut grades_sum: f64 = grades.iter().sum();\n\
    \    let grades_avg_range: f64 = grades.iter().max() - grades.iter().min();\n\
    \    let grades_avg: f64 = grades_sum / grades.len();\n    let grades_avg_range:\
    \ f64 = grades_range / grades.len();\n    let mut grades_avg = grades_avg;\n \
    \   let mut grades_avg_range = grades_avg_range;\n    let mut grades_range: f64\
    \ = grades_range;\n    let mut grades_sum: f64 = grades.iter().sum();\n    let\
    \ grades_avg_range: f64 = grades.iter().max() - grades.iter().min();\n    let\
    \ grades_avg: f64 = grades_sum / grades.len();\n    let grades_avg_range: f64\
    \ = grades_range / grades.len();\n    let mut grades_avg = grades_avg;\n    let\
    \ mut grades_avg_range = grades_avg_range;\n    let mut grades_range: ", "   \
    \ grades\n        .iter()\n        .enumerate()\n        .filter(|(_, grade)|\
    \ grade > 0)\n        .map(|(_, grade)| {\n            format!(\"{}{}\", grade\
    \ / grades.len() as f64, grade % grades.len() as f64).to_string()\n        })\n\
    \        .collect()", "    let mut grades_str = vec![];\n    for i in grades.iter()\
    \ {\n        let x = i % 10;\n        let y = i / 10;\n        let n = x.pow(2).floor();\n\
    \        let d = n.pow(2).floor();\n        if y == 0 {\n            if n == 0\
    \ {\n                grades_str.push(String::from(\"E\"));\n            } else\
    \ {\n                grades_str.push(String::from(\"D-\"));\n            }\n \
    \       } else if x == 0 {\n            if d > 5 {\n                grades_str.push(String::from(\"\
    B-\"));\n            } else {\n                grades_str.push(String::from(\"\
    B-\"));\n            }\n        } else if y == 1 {\n            if d == 3 {\n\
    \                grades_str.push(String::from(\"C+\"));\n            } else {\n\
    \                grades_str.push(String::from(\"C\"));\n            }\n      \
    \  } else if x == 1 {\n            if d > 6 {\n                grades_str.push(String::from(\"\
    B-\"));\n            } else {\n                grades_str.push(String::from(\"\
    B+\"));\n            }\n        } else if d == 2 {\n            grades_str.push(String::from(\"\
    C\"));\n        } else if n == 2 {\n            if d > 4 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B\"));\n            }\n        } else if d == 3 {\n            grades_str.push(String::from(\"\
    C+\"));\n        } else if n == 3 {\n            if d > 5 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B+\"));\n            }\n        } else if d == 4 {\n            grades_str.push(String::from(\"\
    C\"));\n        } else if n == 4 {\n            if d > 6 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B-\"));\n            }\n        } else if d == 5 {\n            grades_str.push(String::from(\"\
    C+\"));\n        } else if n == 5 {\n            if d > 7 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B+\"));\n            }\n        } else if d == 6 {\n            grades_str.push(String::from(\"\
    C-\"));\n        } else if n == 6 {\n            if d > 8 {\n                grades_str.push(String::from(\"\
    B+\"));\n            } else {\n                grades_str.push(String::from(\"\
    B-\"));\n            }\n        } else if d == 7 {\n            grades_", "  \
    \  if grades.len() == 0 {\n        return vec![];\n    }\n\n    let mut letter_grades\
    \ = vec![];\n    let mut highest_grade = grades[0];\n\n    for grade in grades.iter()\
    \ {\n        if grade > highest_grade {\n            highest_grade = grade;\n\
    \        }\n    }\n\n    for grade in grades.iter() {\n        let grade = grade\
    \ as f64;\n        let letter = match grade {\n            4.0 => \"A+\",\n  \
    \          3.7 => \"A\",\n            3.3 => \"A-\",\n            3.0 => \"B+\"\
    ,\n            2.7 => \"B\",\n            2.3 => \"B-\",\n            2.0 => \"\
    C+\",\n            1.7 => \"C\",\n            1.3 => \"C-\",\n            1.0\
    \ => \"D+\",\n            0.7 => \"D\",\n            _ => \"D-\",\n          \
    \  0.0 => \"E\",\n            _ => \"E\",\n        };\n\n        letter_grades.push(letter);\n\
    \    }\n\n    letter_grades.sort();\n\n    letter_grades", "    if grades.len()\
    \ < 5 {\n        return vec![String::from(\"E\")];\n    }\n    let mut total_grade\
    \ = 0;\n    let mut current_grade: u8;\n    for grade in grades.iter() {\n   \
    \     total_grade += grade as f64;\n    }\n    current_grade = total_grade / 5.0;\n\
    \    let current_grade = current_grade as f64;\n    \n    if current_grade <=\
    \ 4.0{\n        return vec![String::from(\"A+\")];\n    }\n    if current_grade\
    \ <= 3.7{\n        return vec![String::from(\"A\")];\n    }\n    if current_grade\
    \ <= 3.3{\n        return vec![String::from(\"A-\")];\n    }\n    if current_grade\
    \ <= 3.0{\n        return vec![String::from(\"B+\")];\n    }\n    if current_grade\
    \ <= 2.7{\n        return vec![String::from(\"B\")];\n    }\n    if current_grade\
    \ <= 2.3{\n        return vec![String::from(\"B-\")];\n    }\n    if current_grade\
    \ <= 2.0{\n        return vec![String::from(\"C+\")];\n    }\n    if current_grade\
    \ <= 1.7{\n        return vec![String::from(\"C\")];\n    }\n    if current_grade\
    \ <= 1.3{\n        return vec![String::from(\"C-\")];\n    }\n    if current_grade\
    \ <= 1.0{\n        return vec![String::from(\"D+\")];\n    }\n    if current_grade\
    \ <= 0.7{\n        return vec![String::from(\"D\")];\n    }\n    if current_grade\
    \ <= 0.0{\n        return vec![String::from(\"D-\")];\n    }\n    return vec![String::from(\"\
    E\")];", "    let len = grades.len();\n    let mut grades_str: Vec<String> = vec![\"\
    \".to_string(); 6];\n    for i in 0..6 {\n        grades_str[i] = String::from(\"\
    \");\n        if grades[i] != 0.0 {\n            if grades[i] < 3.0 {\n      \
    \          grades_str[i] = String::from(\"A+\");\n            } else if grades[i]\
    \ > 3.0 && grades[i] < 4.0 {\n                grades_str[i] = String::from(\"\
    A\");\n            } else if grades[i] > 4.0 && grades[i] < 5.0 {\n          \
    \      grades_str[i] = String::from(\"A-\");\n            } else if grades[i]\
    \ > 5.0 && grades[i] < 6.0 {\n                grades_str[i] = String::from(\"\
    B+\");\n            } else if grades[i] > 6.0 && grades[i] < 7.0 {\n         \
    \       grades_str[i] = String::from(\"B\");\n            } else if grades[i]\
    \ > 7.0 && grades[i] < 8.0 {\n                grades_str[i] = String::from(\"\
    B-\");\n            } else if grades[i] > 8.0 && grades[i] < 9.0 {\n         \
    \       grades_str[i] = String::from(\"C+\");\n            } else if grades[i]\
    \ > 9.0 && grades[i] < 10.0 {\n                grades_str[i] = String::from(\"\
    C\");\n            } else if grades[i] > 10.0 && grades[i] < 11.0 {\n        \
    \        grades_str[i] = String::from(\"C-\");\n            } else if grades[i]\
    \ > 11.0 && grades[i] < 12.0 {\n                grades_str[i] = String::from(\"\
    D+\");\n            } else if grades[i] > 12.0 {\n                grades_str[i]\
    \ = String::from(\"D\");\n            } else {\n                grades_str[i]\
    \ = String::from(\"D-\");\n            }\n        }\n    }\n    grades_str", " \
    \   let mut grades_sorted = grades.iter().cloned().sort();\n    let mut grades_counter:\
    \ Vec<usize> = grades_sorted.iter().cloned().map(|x| x).collect();\n    \n   \
    \ for i in 0..grades_counter.len() {\n        if grades_counter[i] == grades_sorted.len()\
    \ - 1 {\n            grades_counter[i] = 0;\n        } else {\n            grades_counter[i]++;\n\
    \            break;\n        }\n    }\n    \n    let mut current_grade: String\
    \ = String::new();\n    for grade in grades_sorted {\n        if grades_counter[grade]\
    \ == 1 {\n            current_grade += format!(\"{}+\", grade);\n        } else\
    \ {\n            current_grade += format!(\"{}{}\", grade, \n                match\
    \ grades_counter[grade] {\n                    0 => \"-\",\n                 \
    \   1 => \"-\",\n                    _ => \"\"\n                }\n          \
    \  );\n        }\n    }\n    \n    current_grade.trim()", "    let mut grades_iter\
    \ = grades.iter();\n    let mut grade_iter = grades_iter.enumerate();\n    let\
    \ mut grades: Vec<String> = vec![];\n    let mut num_grades = grades_iter.count();\n\
    \    grade_iter.move_to_first();\n    while num_grades > 0 {\n        let (idx,\
    \ grade_) = grade_iter.next().unwrap();\n        if idx < num_grades - 1 {\n \
    \           let (next_idx, next_grade_) = grade_iter.next().unwrap();\n      \
    \      if grade_ > next_grade_ {\n                grades.push(String::from(\"\
    A+\"));\n                num_grades -= 1;\n            } else {\n            \
    \    grades.push(String::from(\"A-\"));\n                num_grades -= 1;\n  \
    \          }\n        } else {\n            if grade_ > 3.0 {\n              \
    \  grades.push(String::from(\"B+\"));\n                num_grades -= 1;\n    \
    \        } else {\n                grades.push(String::from(\"B-\"));\n      \
    \          num_grades -= 1;\n            }\n        }\n    }\n    grades", " \
    \   let grades = grades.sort_unstable();\n    let mut grades_len = grades.len();\n\
    \    let mut letter_grades = vec![\"E\"];\n    while grades_len > 0 {\n      \
    \  let mut curr = grades[grades_len - 1];\n        let mut prev = grades[grades_len\
    \ - 2];\n        if curr < prev {\n            grades[grades_len - 2] = curr;\n\
    \            grades[grades_len - 1] = prev;\n        }\n        grades_len -=\
    \ 1;\n        letter_grades.push(String::from(\"A+\".to_string()));\n        if\
    \ grades[grades_len - 1] >= 3.9 {\n            letter_grades.push(String::from(\"\
    A\".to_string()));\n        }\n        if grades[grades_len - 1] >= 3.7 {\n  \
    \          letter_grades.push(String::from(\"A-\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 3.3 {\n            letter_grades.push(String::from(\"\
    B+\".to_string()));\n        }\n        if grades[grades_len - 1] >= 3.0 {\n \
    \           letter_grades.push(String::from(\"B\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 2.7 {\n            letter_grades.push(String::from(\"\
    B-\".to_string()));\n        }\n        if grades[grades_len - 1] >= 2.3 {\n \
    \           letter_grades.push(String::from(\"C+\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 2.0 {\n            letter_grades.push(String::from(\"\
    C\".to_string()));\n        }\n        if grades[grades_len - 1] >= 1.7 {\n  \
    \          letter_grades.push(String::from(\"C-\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\".to_string()));\n        }\n        if grades[grades_len - 1] >= 0.7 {\n \
    \           letter_grades.push(String::from(\"D\".to_string()));\n        }\n\
    \        if grades[grades_len - 1] >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\".to_string()));\n        }\n    }\n    letter_grades", '    // TODO: Write
    your code here.', "    let grades_sum = grades.iter().sum();\n    let letter_grade\
    \ = match grades_sum {\n        0 => \"E\",\n        _ => {\n            let average\
    \ = grades.iter().sum() / grades.len();\n            let grade = grades.iter()\n\
    \                .enumerate()\n                .filter(|(_, item)| item >= average)\n\
    \                .next()\n                .unwrap();\n\n            if grade ==\
    \ 0 {\n                vec![String::from(\"E\")]\n            } else if grade\
    \ == grades.len() {\n                vec![String::from(\"D-\")]\n            }\
    \ else {\n                vec![String::from(\"D\")]\n            }\n        }\n\
    \    };\n\n    vec![letter_grade.clone(), String::from(\"D+\")]", "    let mut\
    \ letter_grades = Vec::new();\n\n    // The first letter grade is A+\n    letter_grades.push(String::from(\"\
    A+\"));\n    \n    // The second letter grade is A \n    if grades[0] < 3.0 {\n\
    \        letter_grades.push(String::from(\"A\"));\n    }\n    \n    // The third\
    \ letter grade is A- \n    if grades[0] > 2.7 {\n        letter_grades.push(String::from(\"\
    A-\"));\n    }\n\n    // The fourth letter grade is B+\n    if grades[1] < 3.0\
    \ {\n        letter_grades.push(String::from(\"B+\"));\n    }\n    \n    // The\
    \ fifth letter grade is B \n    if grades[1] > 2.7 {\n        letter_grades.push(String::from(\"\
    B\"));\n    }\n    \n    // The sixth letter grade is B-\n    if grades[1] < 2.3\
    \ {\n        letter_grades.push(String::from(\"B-\"));\n    }\n    \n    // The\
    \ seventh letter grade is C+\n    if grades[2] < 3.0 {\n        letter_grades.push(String::from(\"\
    C+\"));\n    }\n    \n    // The eighth letter grade is C\n    if grades[2] >\
    \ 2.7 {\n        letter_grades.push(String::from(\"C\"));\n    }\n    \n    //\
    \ The ninth letter grade is C-\n    if grades[2] < 2.3 {\n        letter_grades.push(String::from(\"\
    C-\"));\n    }\n    \n    // The tenth letter grade is D+\n    if grades[3] <\
    \ 3.0 {\n        letter_grades.push(String::from(\"D+\"));\n    }\n    \n    //\
    \ The eleventh letter grade is D \n    if grades[3] > 2.7 {\n        letter_grades.push(String::from(\"\
    D\"));\n    }\n    \n    // The twelfth letter grade is D-\n    if grades[3] <\
    \ 2.3 {\n        letter_grades.push(String::from(\"D-\"));\n    }\n    \n    //\
    \ The last letter grade is E\n    if grades[4] < 0.0 {\n        letter_grades.push(String::from(\"\
    E\"));\n    }\n\n    letter_grades", "    let mut grades_iter = grades.iter();\n\
    \    let mut letter_grades = vec![];\n    let mut temp_grade = grades.first().unwrap();\n\
    \    let mut grades_len = grades.len();\n    loop {\n        if temp_grade >=\
    \ 4.0 && grades_len > 0 {\n            letter_grades.push(String::from(\"A+\"\
    ));\n        }\n        temp_grade -= 3.0;\n        if temp_grade >= 3.0 && grades_len\
    \ > 0 {\n            letter_grades.push(String::from(\"A\"));\n        }\n   \
    \     temp_grade -= 2.0;\n        if temp_grade >= 2.0 && grades_len > 0 {\n \
    \           letter_grades.push(String::from(\"A-\"));\n        }\n        temp_grade\
    \ -= 1.7;\n        if temp_grade >= 1.7 && grades_len > 0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n        temp_grade -= 1.3;\n        if temp_grade >= 1.3 &&\
    \ grades_len > 0 {\n            letter_grades.push(String::from(\"B\"));\n   \
    \     }\n        temp_grade -= 0.7;\n        if temp_grade >= 0.7 && grades_len\
    \ > 0 {\n            letter_grades.push(String::from(\"B-\"));\n        }\n  \
    \      temp_grade -= 0.0;\n        if temp_grade >= 0.0 && grades_len > 0 {\n\
    \            letter_grades.push(String::from(\"C+\"));\n        }\n        temp_grade\
    \ -= 0.3;\n        if temp_grade >= 0.3 && grades_len > 0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n        temp_grade -= 0.0;\n        if temp_grade >= 0.0 &&\
    \ grades_len > 0 {\n            letter_grades.push(String::from(\"C-\"));\n  \
    \      }\n        temp_grade -= 0.0;\n        if temp_grade >= 0.0 && grades_len\
    \ > 0 {\n            letter_grades.push(String::from(\"D+\"));\n        }\n  \
    \      temp_grade -= 0.0;\n        if temp_grade >= 0.0 && grades_len > 0 {\n\
    \            letter_grades.push(String::from(\"D\"));\n        }\n        temp_grade\
    \ -= 0.0;\n        if temp_grade >= 0.0 && grades_len > 0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n        if grades_len == 0 {\n            break;\n       \
    \ }\n        if temp_grade < 0.0 {\n            break;\n        }\n        grades_len\
    \ -= 1;\n    }\n    letter_grades", "    let mut grades_copy = grades;\n    let\
    \ mut letter_grades = vec![];\n\n    if grades_copy.len() < 6 {\n        return\
    \ letter_grades;\n    }\n\n    for grade in grades_copy {\n        if grade >\
    \ 3.0 {\n            letter_grades.push(String::from(\"B+\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 2.3\
    \ {\n            letter_grades.push(String::from(\"B-\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 1.7\
    \ {\n            letter_grades.push(String::from(\"C\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 1.0\
    \ {\n            letter_grades.push(String::from(\"D+\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n            grades_copy.remove(0);\n        }\n\n        if grade > 0.3\
    \ {\n            letter_grades.push(String::from(\"D-\"));\n            grades_copy.remove(0);\n\
    \        }\n\n        if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            grades_copy.remove(0);\n        }\n    }\n\n    if grades_copy.len()\
    \ > 0 {\n        letter_grades.push(String::from(\"E\"));\n    }\n\n    letter_grades",
  "    let mut letters = vec![String::from(\"E\")];\n    for grade in grades {\n \
    \       let grade = grade / 4.0;\n        let grade = if grade > 3.7 { 4.0 - grade\
    \ } else { grade };\n        let grade = grade - 0.3;\n        let grade = if\
    \ grade > 2.7 { 4.0 - grade } else { grade };\n        let grade = grade - 0.2;\n\
    \        let grade = if grade > 1.7 { 4.0 - grade } else { grade };\n        let\
    \ grade = grade - 0.1;\n        let grade = if grade > 1.3 { 4.0 - grade } else\
    \ { grade };\n        let grade = grade - 0.07;\n        let grade = if grade\
    \ > 1.0 { 4.0 - grade } else { grade };\n        let grade = grade - 0.05;\n \
    \       let grade = if grade > 0.0 { 4.0 - grade } else { grade };\n        let\
    \ grade = grade + 0.0;\n        let grade = if grade < 0.0 { grade } else { grade\
    \ };\n        letters.push(String::from(format!(\"{:.1}\", grade)));\n    }\n\
    \    letters", "    let mut letter_grades: Vec<String> = vec![];\n\n    for grade\
    \ in grades {\n        if grade >= 4.0f64 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade <= 3.7f64 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade <= 3.3f64 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade <= 3.0f64 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade <= 2.7f64 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade <= 2.3f64 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade <= 2.0f64 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade <= 1.7f64 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade <= 1.3f64 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade <= 1.0f64 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade <= 0.7f64 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade <= 0.0f64 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n\n    letter_grades", "    if grades.len() == 0 {\n       \
    \ return vec![\"E\"];\n    }\n\n    let mut letter_grades: Vec<String> = vec![\"\
    E\"];\n\n    for grade in grades {\n        let letter: Result<String, String>\
    \ = match grade {\n            4.0 => Ok(\"A+\"),\n            > 3.7 => Ok(\"\
    A\"),\n            > 3.3 => Ok(\"A-\"),\n            > 3.0 => Ok(\"B+\"),\n  \
    \          > 2.7 => Ok(\"B\"),\n            > 2.3 => Ok(\"B-\"),\n           \
    \ > 2.0 => Ok(\"C+\"),\n            > 1.7 => Ok(\"C\"),\n            > 1.3 =>\
    \ Ok(\"C-\"),\n            > 1.0 => Ok(\"D+\"),\n            > 0.7 => Ok(\"D\"\
    ),\n            _ => Err(format!(\"Invalid grade: {}\", grade)),\n        };\n\
    \n        if let Err(err) = letter {\n            std::fs::write(\"error.log\"\
    , err.to_string()).unwrap();\n            std::process::exit(1);\n        }\n\n\
    \        letter_grades.push(letter.unwrap());\n    }\n\n    return letter_grades;",
  "    let mut result = vec![String::from(\"E\")];\n    for i in 0..grades.len() {\n\
    \        let grade = grades[i];\n        if grade >= 3.0 {\n            result.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.0 && grade < 3.7 {\n            result.push(String::from(\"\
    A\"));\n        } else if grade >= 3.7 && grade < 3.3 {\n            result.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.3 && grade < 3.0 {\n            result.push(String::from(\"\
    B+\"));\n        } else if grade >= 3.0 && grade < 2.7 {\n            result.push(String::from(\"\
    B\"));\n        } else if grade >= 2.7 && grade < 2.3 {\n            result.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.3 && grade < 2.0 {\n            result.push(String::from(\"\
    C+\"));\n        } else if grade >= 2.0 && grade < 1.7 {\n            result.push(String::from(\"\
    C\"));\n        } else if grade >= 1.7 && grade < 1.3 {\n            result.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.3 && grade < 1.0 {\n            result.push(String::from(\"\
    D+\"));\n        } else if grade >= 1.7 && grade < 0.7 {\n            result.push(String::from(\"\
    D\"));\n        } else if grade >= 0.7 && grade < 0.0 {\n            result.push(String::from(\"\
    D-\"));\n        } else {\n            result.push(String::from(\"E\"));\n   \
    \     }\n    }\n    result", "    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades.iter() {\n        let mut min_grade = 4.0;\n        let\
    \ mut max_grade = 5.0;\n        let mut counter = 0;\n\n        while grade >\
    \ max_grade {\n            counter = 0;\n            max_grade += 2.0;\n     \
    \   }\n\n        while grade < min_grade {\n            counter = 0;\n       \
    \     min_grade -= 2.0;\n        }\n\n        grades_vec.push(String::from(format!(\"\
    {:+}\", min_grade)));\n        grades_vec.push(String::from(format!(\"{:+}\",\
    \ max_grade)));\n        grades_vec.push(String::from(format!(\"{:+}\", grade)));\n\
    \        grades_vec.push(String::from(format!(\"{:+}\", counter)));\n    }\n\n\
    \    grades_vec", "    let mut letter_grade: Vec<String> = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grade.push(String::from(\"\
    A-\"));\n        } else if grade < 3.3 {\n            letter_grade.push(String::from(\"\
    A-\"));\n        } else if grade < 3.7 {\n            letter_grade.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 4.7 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 5.0 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 5.3 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 5.7 {\n            letter_grade.push(String::from(\"\
    B+\"));\n        } else if grade < 6.0 {\n            letter_grade.push(String::from(\"\
    B\"));\n        } else if grade < 6.3 {\n            letter_grade.push(String::from(\"\
    B\"));\n        } else if grade < 6.7 {\n            letter_grade.push(String::from(\"\
    B\"));\n        } else if grade < 7.0 {\n            letter_grade.push(String::from(\"\
    B-\"));\n        } else if grade < 7.3 {\n            letter_grade.push(String::from(\"\
    B-\"));\n        } else if grade < 7.7 {\n            letter_grade.push(String::from(\"\
    B-\"));\n        } else if grade < 8.0 {\n            letter_grade.push(String::from(\"\
    C-\"));\n        } else if grade < 8.3 {\n            letter_grade.push(String::from(\"\
    C-\"));\n        } else if grade < 8.7 {\n            letter_grade.push(String::from(\"\
    C-\"));\n        } else if grade < 9.0 {\n            letter_grade.push(String::from(\"\
    C+\"));\n        } else if grade < 9.3 {\n            letter_grade.push(String::from(\"\
    C+\"));\n        } else if grade < 9.7 {\n            letter_grade.push(String::from(\"\
    C+\"));\n        } else if grade < 10.0 {\n            letter_grade.push(String::from(\"\
    C\"));\n        } else if grade < 10.3 {\n            letter_grade.push(", " \
    \   let mut letter_grades = vec![];\n    let mut total = grades.reduce((0.0, 0.0)).unwrap();\n\
    \    let mut max_grade = grades.iter().max().unwrap();\n    for grade in grades\
    \ {\n        let (min_grade, max_grade) = grades.iter().min().unwrap();\n    \
    \    let grade = grade / max_grade;\n        let letter_grade = match grade {\n\
    \            4.0 => 'A+',\n            > 3.7 => 'A',\n            > 3.3 => 'A-',\n\
    \            > 3.0 => 'B+',\n            > 2.7 => 'B',\n            > 2.3 => 'B-',\n\
    \            > 2.0 => 'C+',\n            > 1.7 => 'C',\n            > 1.3 => 'C-',\n\
    \            > 1.0 => 'D+',\n            > 0.7 => 'D',\n            > 0.0 => 'D-',\n\
    \            0.0 => 'E'\n        };\n        for _ in 0..letter_grade.len() {\n\
    \            total += 1.0;\n        }\n        if total == max_grade {\n     \
    \       letter_grades.push(letter_grade);\n        }\n    }\n    letter_grades",
  "    let grades = grades.to_owned();\n    let mut grades_vector = vec![];\n    let\
    \ mut sum = 0.0;\n    let mut total = 0.0;\n    let mut temp_grade = grades.iter().find(|&grade|\
    \ grade < 4.0).unwrap();\n    for grade in grades.iter() {\n        let grade\
    \ = grade - temp_grade;\n        temp_grade = grade;\n        sum += grade;\n\
    \        total += grade;\n        if grade >= 2.0 && grade < 3.0 {\n         \
    \   grades_vector.push(String::from(\"A-\"));\n        }\n        if grade >=\
    \ 3.0 && grade < 4.0 {\n            grades_vector.push(String::from(\"A+\"));\n\
    \        }\n        if grade >= 4.0 && grade < 5.0 {\n            grades_vector.push(String::from(\"\
    B+\"));\n        }\n        if grade >= 5.0 && grade < 6.0 {\n            grades_vector.push(String::from(\"\
    B\"));\n        }\n        if grade >= 6.0 && grade < 7.0 {\n            grades_vector.push(String::from(\"\
    B-\"));\n        }\n        if grade >= 7.0 && grade < 8.0 {\n            grades_vector.push(String::from(\"\
    C+\"));\n        }\n        if grade >= 8.0 && grade < 9.0 {\n            grades_vector.push(String::from(\"\
    C\"));\n        }\n        if grade >= 9.0 && grade < 10.0 {\n            grades_vector.push(String::from(\"\
    C-\"));\n        }\n        if grade >= 10.0 && grade < 11.0 {\n            grades_vector.push(String::from(\"\
    D+\"));\n        }\n        if grade >= 11.0 && grade < 12.0 {\n            grades_vector.push(String::from(\"\
    D\"));\n        }\n        if grade >= 12.0 && grade < 13.0 {\n            grades_vector.push(String::from(\"\
    D-\"));\n        }\n        if grade >= 13.0 && grade < 14.0 {\n            grades_vector.push(String::from(\"\
    E\"));\n        }\n        if grade >= 14.0 {\n            grades_vector.push(String::from(\"\
    F\"));\n        }\n    }\n    grades_vector.push(String::from(\"F\"));\n    if\
    \ sum == total {\n        grades_vector\n    }\n    else {\n        grades_vector\n\
    \    }", "    let mut letters = Vec::new();\n    let mut letter_grade_table: Vec<Vec<u8>>\
    \ = vec![\n        vec![1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],\n\
    \        vec![0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n\
    \        vec![0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\n        vec![0,0,0,0,0,0,0,0,0,0,0,",
  "    grades\n        .iter()\n        .zip(grades.iter().cloned())\n        .map(|(a,\
    \ b)| *a == *b ? \"C\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.01 ? \"D\"\
    \ : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.1 ? \"F\" : (*a >= *b && (*a -\
    \ *b).abs().cmp(&0.00) < 0.2 ? \"F+\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.3 ? \"F-\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.4 ? \"B-\" : (*a\
    \ >= *b && (*a - *b).abs().cmp(&0.00) < 0.5 ? \"B-\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.6 ? \"A-\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 0.7 ? \"A-\" : (*a\
    \ >= *b && (*a - *b).abs().cmp(&0.00) < 0.8 ? \"A+\" : (*a >= *b && (*a - *b).abs().cmp(&0.00)\
    \ < 0.9 ? \"A+\" : (*a >= *b && (*a - *b).abs().cmp(&0.00) < 1.0 ? \"A\" : \"\"\
    ))))))\n        .collect()", "    let grades_copy = grades.clone();\n    let mut\
    \ letter_grade = vec![String::from(\"\")];\n    while grades_copy.len() > 0 {\n\
    \        let mut grade = grades_copy.pop().unwrap();\n        let mut grade_copy\
    \ = grade;\n        \n        if grade > 3.0 {\n            if grade > 3.7 {\n\
    \                if grade > 3.3 {\n                    if grade > 3.0 {\n    \
    \                    if grade > 2.7 {\n                            if grade >\
    \ 2.3 {\n                                if grade > 2.0 {\n                  \
    \                  if grade > 1.7 {\n                                        if\
    \ grade > 1.0 {\n                                            if grade > 0.7 {\n\
    \                                                if grade > 0.0 {\n          \
    \                                          letter_grade.push(String::from(\"D-\"\
    ));\n                                                    continue\n          \
    \                                      }\n                                   \
    \         }\n                                        }\n                     \
    \               }\n                                }\n                       \
    \     }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        \n        if grade > 2.0 {\n            if\
    \ grade > 2.7 {\n                if grade > 2.3 {\n                    if grade\
    \ > 2.0 {\n                        if grade > 1.7 {\n                        \
    \    if grade > 1.0 {\n                                letter_grade.push(String::from(\"\
    D+\"));\n                                continue\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n        \n        if grade > 1.0 {\n            if grade\
    \ > 1.7 {\n                if grade > 1.3 {\n                    if grade > 1.0\
    \ {\n                        if grade > 0.7 {\n                            if\
    \ grade > 0.0 {\n                                letter_grade.push(String::from(\"\
    D\"));\n                                continue\n                           \
    \ }\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        \n        if grade > 0.7 {\n            if grade\
    \ > 0.0 {\n                letter_grade.push(String::from(\"D-\"));\n        \
    \        continue\n            }\n        }\n        \n        if grade > 0.0\
    \ {\n            letter_grade.push(String::from(\"E\"));\n            continue\n\
    \        }\n        \n        if grade < 0.0 {\n            letter_grade.push(String::from(\"\
    F\"));\n            continue\n        }\n        \n        if grade < 1.0 {\n\
    \            letter_grade.push(String::from(\"F-\"));\n            continue\n\
    \        }\n        \n        if grade < 2.0 {\n            letter_grade.push(String::from(\"\
    F+\"));\n            continue\n        }\n        \n        if grade < 3.0 {\n\
    \            letter_grade.push(String::from(\"F\"));\n            continue\n \
    \       }\n        \n        if grade < 3.7 {\n            letter_grade.push(String::from(\"\
    F\"));\n            continue\n        }\n", "    let mut letter_grade = Vec::new();\n\
    \    for grade in grades {\n        if grade > 4.0 {\n            letter_grade.push(\"\
    A+\");\n        }\n        if grade > 3.7 {\n            letter_grade.push(\"\
    A\");\n        }\n        if grade > 3.3 {\n            letter_grade.push(\"A\"\
    );\n        }\n        if grade > 3.0 {\n            letter_grade.push(\"B+\"\
    );\n        }\n        if grade > 2.7 {\n            letter_grade.push(\"B\");\n\
    \        }\n        if grade > 2.3 {\n            letter_grade.push(\"B\");\n\
    \        }\n        if grade > 2.0 {\n            letter_grade.push(\"C+\");\n\
    \        }\n        if grade > 1.7 {\n            letter_grade.push(\"C\");\n\
    \        }\n        if grade > 1.3 {\n            letter_grade.push(\"C\");\n\
    \        }\n        if grade > 1.0 {\n            letter_grade.push(\"D+\");\n\
    \        }\n        if grade > 0.7 {\n            letter_grade.push(\"D\");\n\
    \        }\n        if grade > 0.0 {\n            letter_grade.push(\"D\");\n\
    \        }\n        if grade <= 0.0 {\n            letter_grade.push(\"E\");\n\
    \        }\n    }\n    letter_grade", "    let mut letter_grades = vec![];\n \
    \   for grade in grades.iter().cloned() {\n        if grade < 3.0 {\n        \
    \    letter_grades.push(String::from(\"A+\"));\n        } else if grade < 4.0\
    \ {\n            letter_grades.push(String::from(\"A\"));\n        } else if grade\
    \ < 3.7 {\n            letter_grades.push(String::from(\"A-\"));\n        } else\
    \ if grade < 3.3 {\n            letter_grades.push(String::from(\"B+\"));\n  \
    \      } else if grade < 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"D-\"));\n\
    \        }\n    }\n    return letter_grades;", "    let mut letter_grade = vec![];\n\
    \n    for grade in grades {\n        if grade > 4.0 && grade < 5.0 {\n       \
    \     letter_grade.push(\"A+\");\n        } else if grade > 3.0 && grade < 4.0\
    \ {\n            letter_grade.push(\"A\");\n        } else if grade > 2.0 && grade\
    \ < 3.0 {\n            letter_grade.push(\"A-\");\n        } else if grade > 1.7\
    \ && grade < 2.0 {\n            letter_grade.push(\"B+\");\n        } else if\
    \ grade > 1.3 && grade < 1.7 {\n            letter_grade.push(\"B\");\n      \
    \  } else if grade > 0.7 && grade < 1.3 {\n            letter_grade.push(\"B-\"\
    );\n        } else if grade > 0.0 && grade < 0.7 {\n            letter_grade.push(\"\
    C+\");\n        } else if grade > -0.7 && grade < -0.0 {\n            letter_grade.push(\"\
    C\");\n        } else if grade > -1.3 && grade < -0.7 {\n            letter_grade.push(\"\
    C-\");\n        } else if grade > -1.0 && grade < -1.3 {\n            letter_grade.push(\"\
    D+\");\n        } else if grade > -1.7 && grade < -1.0 {\n            letter_grade.push(\"\
    D\");\n        } else if grade < -1.0 {\n            letter_grade.push(\"D-\"\
    );\n        } else {\n            letter_grade.push(\"E\");\n        }\n    }\n\
    \n    letter_grade", "    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades.iter() {\n        letter_grades.push(match grade {\n            4 =>\
    \ \"A+\".to_string(),\n            3.7 => \"A\".to_string(),\n            3.3\
    \ => \"A+\".to_string(),\n            3.0 => \"B+\".to_string(),\n           \
    \ 2.7 => \"B\".to_string(),\n            2.3 => \"B-\".to_string(),\n        \
    \    2.0 => \"C+\".to_string(),\n            1.7 => \"C\".to_string(),\n     \
    \       1.3 => \"C-\".to_string(),\n            1.0 => \"D+\".to_string(),\n \
    \           0.7 => \"D\".to_string(),\n            0.0 => \"D-\".to_string(),\n\
    \            0.0 => \"E\".to_string()\n        })\n    }\n    letter_grades",
  "    let mut letters: Vec<String> = vec![];\n\n    for grade in grades.iter() {\n\
    \        match grade {\n            4.0 => letters.push(\"A+\".to_owned()),\n\
    \            3.7 => letters.push(\"A\".to_owned()),\n            3.3 => letters.push(\"\
    A-\".to_owned()),\n            3.0 => letters.push(\"B+\".to_owned()),\n     \
    \       2.7 => letters.push(\"B\".to_owned()),\n            2.3 => letters.push(\"\
    B-\".to_owned()),\n            2.0 => letters.push(\"C+\".to_owned()),\n     \
    \       1.7 => letters.push(\"C\".to_owned()),\n            1.3 => letters.push(\"\
    C-\".to_owned()),\n            1.0 => letters.push(\"D+\".to_owned()),\n     \
    \       0.7 => letters.push(\"D\".to_owned()),\n            0.0 => letters.push(\"\
    D-\".to_owned()),\n            _ => letters.push(\"E\".to_owned()),\n        }\n\
    \    }\n    return letters", "    let mut grades_len = grades.len();\n    let\
    \ mut letters = vec![];\n\n    grades\n        .iter()\n        .try_for_each(|grade|\
    \ {\n            if grade < 3.0 {\n                letters.push(String::from(\"\
    A+\"));\n            } else if grade < 3.3 {\n                letters.push(String::from(\"\
    A-\"));\n            } else if grade < 3.7 {\n                letters.push(String::from(\"\
    A\"));\n            } else if grade < 4.0 {\n                letters.push(String::from(\"\
    B+\"));\n            } else if grade < 4.3 {\n                letters.push(String::from(\"\
    B\"));\n            } else if grade < 4.7 {\n                letters.push(String::from(\"\
    B-\"));\n            } else if grade < 5.0 {\n                letters.push(String::from(\"\
    C+\"));\n            } else if grade < 5.3 {\n                letters.push(String::from(\"\
    C\"));\n            } else if grade < 5.7 {\n                letters.push(String::from(\"\
    C-\"));\n            } else if grade < 6.0 {\n                letters.push(String::from(\"\
    D+\"));\n            } else if grade < 6.3 {\n                letters.push(String::from(\"\
    D\"));\n            } else if grade < 6.7 {\n                letters.push(String::from(\"\
    D-\"));\n            } else if grade < 7.0 {\n                letters.push(String::from(\"\
    E\"));\n            } else {\n                letters.push(String::from(\"F\"\
    ));\n            }\n        });\n    letters", "    let grades_len = grades.len();\n\
    \    let grades_len = grades.len();\n    let mut letters = Vec::new();\n    let\
    \ mut grade = grades[0];\n    let mut i = 1;\n    while i < grades_len {\n   \
    \     letters.push(\"D-\");\n        if grade <= grades[i] {\n            letters.push(\"\
    A\");\n            i += 1;\n            continue;\n        }\n        if grade\
    \ <= grades[i] - 3 && grade > grades[i] - 1 {\n            letters.push(\"A-\"\
    );\n            i += 1;\n            continue;\n        }\n        if grade <=\
    \ grades[i] - 2 && grade > grades[i] - 1 {\n            letters.push(\"B+\");\n\
    \            i += 1;\n            continue;\n        }\n        if grade <= grades[i]\
    \ - 1 && grade > grades[i] - 0 {\n            letters.push(\"B\");\n         \
    \   i += 1;\n            continue;\n        }\n        if grade <= grades[i] -\
    \ 0 && grade > grades[i] - 0 {\n            letters.push(\"B-\");\n          \
    \  i += 1;\n            continue;\n        }\n        if grade <= grades[i] -\
    \ 1 && grade > grades[i] - 0 {\n            letters.push(\"C+\");\n          \
    \  i += 1;\n            continue;\n        }\n        if grade <= grades[i] -\
    \ 2 && grade > grades[i] - 0 {\n            letters.push(\"C\");\n           \
    \ i += 1;\n            continue;\n        }\n        if grade <= grades[i] - 3\
    \ && grade > grades[i] - 0 {\n            letters.push(\"C-\");\n            i\
    \ += 1;\n            continue;\n        }\n        if grade <= grades[i] - 4 &&\
    \ grade > grades[i] - 0 {\n            letters.push(\"D\");\n            i +=\
    \ 1;\n            continue;\n        }\n        letters.push(\"E\");\n       \
    \ i += 1;\n    }\n    letters", "    let mut letter_grades: Vec<String> = vec![];\n\
    \    let mut sum: f64 = 0.0;\n    for grade in grades {\n        sum += grade;\n\
    \        letter_grades.push(String::from(format!(\"{}+\", sum)));\n        sum\
    \ += 1.0;\n        letter_grades.push(String::from(format!(\"{}\", sum)));\n \
    \   }\n    let mut count = 0;\n    letter_grades.push(String::from(\"E\"));\n\
    \    for grade in grades {\n        if grade < 0.0 {\n            count += 1;\n\
    \        }\n        if count == letter_grades.len() {\n            letter_grades.push(String::from(\"\
    E\"));\n            count = 0;\n        }\n    }\n    letter_grades", "    let\
    \ mut grades_string = Vec::new();\n\n    for grade in grades {\n        if grade\
    \ >= 4.0 {\n            grades_string.push(String::from(\"A+\"));\n        } else\
    \ if grade < 3.7 && grade > 3.0 {\n            grades_string.push(String::from(\"\
    A\"));\n        } else if grade < 3.3 && grade > 2.7 {\n            grades_string.push(String::from(\"\
    A-\"));\n        } else if grade < 3.0 && grade > 2.3 {\n            grades_string.push(String::from(\"\
    B+\"));\n        } else if grade < 2.7 && grade > 2.0 {\n            grades_string.push(String::from(\"\
    B\"));\n        } else if grade < 2.3 && grade > 1.7 {\n            grades_string.push(String::from(\"\
    B-\"));\n        } else if grade < 2.0 && grade > 1.0 {\n            grades_string.push(String::from(\"\
    C+\"));\n        } else if grade < 1.7 && grade > 0.7 {\n            grades_string.push(String::from(\"\
    C\"));\n        } else if grade < 1.3 && grade > 0.0 {\n            grades_string.push(String::from(\"\
    C-\"));\n        } else if grade < 1.0 {\n            grades_string.push(String::from(\"\
    D+\"));\n        } else if grade < 0.7 {\n            grades_string.push(String::from(\"\
    D\"));\n        } else if grade < 0.0 {\n            grades_string.push(String::from(\"\
    D-\"));\n        } else {\n            grades_string.push(String::from(\"E\"));\n\
    \        }\n    }\n\n    grades_string", "    let mut grades_slice = grades.to_owned();\n\
    \    let mut letter_grades = Vec::new();\n\n    while grades_slice.len() > 0 {\n\
    \        let grade = grades_slice.pop().unwrap();\n        let grades_remaining\
    \ = grades_slice;\n\n        if grade > 0 && grade <= 1.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        }\n\n        if grade > 1 && grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        }\n\n        if grade >= 3.1 && grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        }\n\n        if grade > 3.7 && grade <= 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        }\n\n        if grade > 4.0 && grade < 5.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        }\n\n        if grade > 5.0 && grade <= 6.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        }\n\n        if grade > 6.0 && grade < 7.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        }\n\n        if grade > 7.0 && grade < 8.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        }\n\n        if grade > 8.0 && grade <= 9.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        }\n\n        if grade > 9.0 && grade <= 10.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        }\n\n        if grade > 10.0 && grade < 11.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        }\n\n        if grade > 11.0 && grade <= 12.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        }\n\n        if grade > 12.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        }\n    }\n\n    letter_grades", "    grades.iter().map(|x| match\
    \ x {\n        x if x < 3.0 => \"A+\".to_string(),\n        x if x < 3.7 => \"\
    A\".to_string(),\n        x if x < 3.3 => \"A-\".to_string(),\n        x if x\
    \ < 3.0 => \"B+\".to_string(),\n        x if x < 2.7 => \"B\".to_string(),\n \
    \       x if x < 2.3 => \"B-\".to_string(),\n        x if x < 2.0 => \"C+\".to_string(),\n\
    \        x if x < 1.7 => \"C\".to_string(),\n        x if x < 1.3 => \"C-\".to_string(),\n\
    \        x if x < 1.0 => \"D+\".to_string(),\n        x if x < 0.7 => \"D\".to_string(),\n\
    \        x if x < 0.0 => \"D-\".to_string(),\n        x if x == 0.0 => \"E\".to_string(),\n\
    \        _ => \"\".to_string(),\n    }).collect()", "    let mut letter_grades\
    \ = vec![\"A+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\",\
    \ \"E\"];\n    for i in 0..grades.len() {\n        let mut letter_grade = String::from(\"\
    \");\n        if grades[i] > 3.0 {\n            letter_grade = \"A\";\n      \
    \  } else if grades[i] > 2.7 {\n            letter_grade = \"B\";\n        } else\
    \ if grades[i] > 2.3 {\n            letter_grade = \"B-\";\n        } else if\
    \ grades[i] > 1.9 {\n            letter_grade = \"C+\";\n        } else if grades[i]\
    \ > 1.3 {\n            letter_grade = \"C\";\n        } else if grades[i] > 0.7\
    \ {\n            letter_grade = \"C-\";\n        } else if grades[i] > 0.3 {\n\
    \            letter_grade = \"D+\";\n        } else if grades[i] > 0.0 {\n   \
    \         letter_grade = \"D\";\n        } else {\n            letter_grade =\
    \ \"D-\";\n        }\n        letter_grades.push(letter_grade);\n    }\n    return\
    \ letter_grades;", "    let grades_copy = grades;\n    grades_copy.pop();\n  \
    \  let mut grades_copy = grades_copy.iter();\n    let mut letters: Vec<String>\
    \ = vec![String::from(\"\")];\n    let mut current_gps = 0.0;\n    let mut current_letter:\
    \ String = String::from(\"\");\n    while let Some(grade_num) = grades_copy.pop()\
    \ {\n        if grade_num > current_gps {\n            current_gps = grade_num;\n\
    \        }\n        if grade_num >= 3.3 {\n            current_letter = String::from(\"\
    \");\n            current_gps = grade_num;\n        }\n        letters.push((current_gps\
    \ as f64).to_string() + \"(\" + current_letter + \")\");\n    }\n    letters",
  "    let grades: Vec<f64> = grades.iter().collect();\n    let num_grades = grades.len();\n\
    \    let mut letter_grades = vec![String::new(); num_grades];\n    if num_grades\
    \ > 0 {\n        let mut current_grade = grades[0];\n        let mut current_letter_grade\
    \ = String::new();\n        for i in 1..num_grades {\n            if current_grade\
    \ < grades[i] {\n                if current_letter_grade != String::new() {\n\
    \                    letter_grades[i] = current_letter_grade;\n              \
    \  }\n                let mut new_letter_grade = String::new();\n            \
    \    new_letter_grade.push_str(current_grade.to_string());\n                new_letter_grade.push_str(\"\
    \ \");\n                new_letter_grade.push_str(\"A-\");\n                current_letter_grade\
    \ = new_letter_grade;\n                current_grade = grades[i];\n          \
    \  } else {\n                current_letter_grade.push_str(\" \");\n         \
    \       current_grade -= grades[i];\n            }\n        }\n        if current_letter_grade\
    \ != String::new() {\n            letter_grades[i] = current_letter_grade;\n \
    \       }\n    }\n    letter_grades", "    let mut letter_grade: Vec<String> =\
    \ Vec::new();\n\n    grades.iter().for_each(|grade| {\n        let mut letter_grade:\
    \ String = String::new();\n\n        if grade >= 4.0 && grade < 5.0 {\n      \
    \      letter_grade += \"A+\";\n        } else if grade >= 3.7 && grade < 4.0\
    \ {\n            letter_grade += \"A\";\n        } else if grade >= 3.3 && grade\
    \ < 3.7 {\n            letter_grade += \"A-\";\n        } else if grade >= 3.0\
    \ && grade < 3.3 {\n            letter_grade += \"B+\";\n        } else if grade\
    \ >= 2.7 && grade < 3.0 {\n            letter_grade += \"B\";\n        } else\
    \ if grade >= 2.3 && grade < 2.7 {\n            letter_grade += \"B-\";\n    \
    \    } else if grade >= 2.0 && grade < 2.3 {\n            letter_grade += \"C+\"\
    ;\n        } else if grade >= 1.7 && grade < 2.0 {\n            letter_grade +=\
    \ \"C\";\n        } else if grade >= 1.3 && grade < 1.7 {\n            letter_grade\
    \ += \"C-\";\n        } else if grade >= 1.0 && grade < 1.3 {\n            letter_grade\
    \ += \"D+\";\n        } else if grade >= 0.7 && grade < 1.0 {\n            letter_grade\
    \ += \"D\";\n        } else if grade < 0.0 {\n            letter_grade += \"D-\"\
    ;\n        } else if grade < 0.0 {\n            letter_grade += \"E\";\n     \
    \   } else {\n            letter_grade += \"E\";\n        }\n\n        letter_grade.push_str(&*letter_grade);\n\
    \    });\n\n    letter_grade", "    let mut grades_sorted = grades.clone();\n\
    \    grades_sorted.sort();\n    let mut grades_iter = grades_sorted.iter();\n\
    \    let mut i = 0;\n    let mut letters = Vec::new();\n    loop {\n        if\
    \ grades_iter.next().unwrap() <= 3.0 {\n            letters.push(i);\n       \
    \     i += 1;\n            if i == 3 {\n                break;\n            }\n\
    \        } else {\n            break;\n        }\n    }\n    return letters;",
  "    let mut grades_string = vec![];\n    for grade in grades.iter() {\n       \
    \ match grade {\n            4 => grades_string.push(String::from(\"A+\")),\n\
    \            3.7 => grades_string.push(String::from(\"A\")),\n            3.3\
    \ => grades_string.push(String::from(\"A-\")),\n            3.0 => grades_string.push(String::from(\"\
    B+\")),\n            2.7 => grades_string.push(String::from(\"B\")),\n       \
    \     2.3 => grades_string.push(String::from(\"B-\")),\n            2.0 => grades_string.push(String::from(\"\
    C+\")),\n            1.7 => grades_string.push(String::from(\"C\")),\n       \
    \     1.3 => grades_string.push(String::from(\"C-\")),\n            1.0 => grades_string.push(String::from(\"\
    D+\")),\n            0.7 => grades_string.push(String::from(\"D\")),\n       \
    \     0.0 => grades_string.push(String::from(\"D-\")),\n            _ => grades_string.push(String::from(\"\
    E\")),\n        }\n    }\n    grades_string", "    \n    grades.iter().enumerate().filter(|(i,\
    \ grade_number)| grade_number > 0).map(|(i, grade)| {\n        // if grades is\
    \ positive, it is better to take letter grade with higher grade\n        let letter_grade\
    \ = if grade > grades[i - 1] {\n            \"A+\"\n        } else if grade <\
    \ grades[i - 1] {\n            \"D-\"\n        } else {\n            \"C\"\n \
    \       };\n        Vec::new().push(String::from(letter_grade));\n    }).collect()",
  "    let mut letters = vec![String::new(); grades.len()];\n\n    for (gpa, grade)\
    \ in grades.iter().zip(letters) {\n        let gpa = gpa as f64;\n\n        if\
    \ gpa <= 3.0 {\n            grade += \"A+\";\n        }\n        if gpa <= 3.7\
    \ {\n            grade += \"A\";\n        }\n        if gpa <= 3.3 {\n       \
    \     grade += \"A-\";\n        }\n        if gpa <= 3.0 {\n            grade\
    \ += \"B+\";\n        }\n        if gpa <= 2.7 {\n            grade += \"B\";\n\
    \        }\n        if gpa <= 2.3 {\n            grade += \"B-\";\n        }\n\
    \        if gpa <= 2.0 {\n            grade += \"C+\";\n        }\n        if\
    \ gpa <= 1.7 {\n            grade += \"C\";\n        }\n        if gpa <= 1.3\
    \ {\n            grade += \"C-\";\n        }\n        if gpa <= 1.0 {\n      \
    \      grade += \"D+\";\n        }\n        if gpa <= 0.7 {\n            grade\
    \ += \"D\";\n        }\n        if gpa <= 0.0 {\n            grade += \"D-\";\n\
    \        }\n        if gpa <= 0.0 {\n            grade += \"E\";\n        }\n\
    \    }\n\n    letters", "    let grades_sum = grades.iter().fold(0, |acc, x| acc\
    \ + x);\n    let mut grade_letters = Vec::new();\n    if grades_sum < 4.0 {\n\
    \        grade_letters.push(String::from(\"E\"));\n    } else if grades_sum <\
    \ 3.0 {\n        grade_letters.push(String::from(\"D-\"));\n    } else if grades_sum\
    \ < 3.3 {\n        grade_letters.push(String::from(\"C\"));\n    } else if grades_sum\
    \ < 2.7 {\n        grade_letters.push(String::from(\"B+\"));\n    } else if grades_sum\
    \ < 2.3 {\n        grade_letters.push(String::from(\"B\"));\n    } else if grades_sum\
    \ < 2.0 {\n        grade_letters.push(String::from(\"B-\"));\n    } else if grades_sum\
    \ < 1.7 {\n        grade_letters.push(String::from(\"A-\"));\n    } else if grades_sum\
    \ < 1.3 {\n        grade_letters.push(String::from(\"A\"));\n    } else if grades_sum\
    \ < 1.0 {\n        grade_letters.push(String::from(\"A+\"));\n    } else if grades_sum\
    \ < 0.7 {\n        grade_letters.push(String::from(\"D\"));\n    } else if grades_sum\
    \ < 0.0 {\n        grade_letters.push(String::from(\"D+\"));\n    } else {\n \
    \       grade_letters.push(String::from(\"C+\"));\n    }\n    grade_letters",
  "    let mut letter_grade = vec![];\n    for grade in grades {\n        if grade\
    \ >= 4.0 { letter_grade.push(\"A+\"); }\n        if grade >= 3.7 { letter_grade.push(\"\
    A\"); }\n        if grade >= 3.3 { letter_grade.push(\"A-\"); }\n        if grade\
    \ >= 3.0 { letter_grade.push(\"B+\"); }\n        if grade >= 2.7 { letter_grade.push(\"\
    B\"); }\n        if grade >= 2.3 { letter_grade.push(\"B-\"); }\n        if grade\
    \ >= 2.0 { letter_grade.push(\"C+\"); }\n        if grade >= 1.7 { letter_grade.push(\"\
    C\"); }\n        if grade >= 1.3 { letter_grade.push(\"C-\"); }\n        if grade\
    \ >= 1.0 { letter_grade.push(\"D+\"); }\n        if grade >= 0.7 { letter_grade.push(\"\
    D\"); }\n        if grade < 0.0 { letter_grade.push(\"D-\"); }\n        if grade\
    \ < 0.7 { letter_grade.push(\"E\"); }\n    }\n    letter_grade", "    if grades.iter().any(|x|\
    \ x != 0.0) {\n        grades.iter().filter(|x| x != 0.0).collect()\n    } else\
    \ {\n        vec![\"D\"]\n    }", "    let mut letter_grades = vec![];\n    let\
    \ mut total_gpa = grades.iter().sum();\n    let mut total_points = 0;\n    let\
    \ mut i = 1;\n    while total_points > 0 && i < grades.len() {\n        if total_gpa\
    \ * (1.0 / i) >= grades[i] {\n            letter_grades.push((grades[i] as f64\
    \ * 4.0) as String);\n            total_gpa = grades.iter().filter(|&x| x > grades[i]).sum();\n\
    \            total_points += grades[i] - total_gpa;\n        } else {\n      \
    \      letter_grades.push((grades[i] as f64 * 3.3) as String);\n            total_gpa\
    \ = grades.iter().filter(|&x| x > grades[i]).sum();\n            total_points\
    \ += grades[i] - total_gpa;\n        }\n        i += 1;\n    }\n    if total_points\
    \ == 0 {\n        letter_grades.push((\"E\" as String));\n    }\n    letter_grades",
  "    let mut letter_grades: Vec<String> = Vec::new();\n    let mut temp_grades:\
    \ Vec<f64> = grades.clone();\n    for i in (0..grades.len()).rev() {\n       \
    \ if grades[i] != 0.0 {\n            temp_grades[i] = grades[i];\n        } else\
    \ {\n            temp_grades[i] = temp_grades[i - 1] - 0.1;\n        }\n     \
    \   let temp: f64 = temp_grades[i];\n        let temp_result: usize = match temp\
    \ {\n            0.7 => 0,\n            0.3 => 1,\n            0.2 => 2,\n   \
    \         0.1 => 3,\n            _ => 4,\n        };\n        letter_grades.push(String::from(&\"\
    E\".chars()[temp_result as usize]));\n    }\n    letter_grades", "    let mut\
    \ letter_grades = vec![];\n    let mut highest_grade = 0.0;\n    for grade in\
    \ grades.iter().cloned() {\n        letter_grades.push(match grade {\n       \
    \     0.0 => String::from(\"E\"),\n            1.0 => String::from(\"A\"),\n \
    \           2.0 => String::from(\"B\"),\n            3.0 => String::from(\"C\"\
    ),\n            4.0 => String::from(\"D\"),\n            5.0 => String::from(\"\
    E\"),\n            _ => String::from(\"F\"),\n        });\n        if grade >\
    \ highest_grade {\n            highest_grade = grade;\n        }\n    }\n    let\
    \ mut letters = vec![];\n    highest_grade -= 1.0;\n    while highest_grade >\
    \ 0.0 {\n        letters.push(match highest_grade {\n            0..1.0 => String::from(\"\
    A\"),\n            2.0..3.0 => String::from(\"A-\"),\n            4.0..5.0 =>\
    \ String::from(\"B+\"),\n            6.0..7.0 => String::from(\"B\"),\n      \
    \      8.0..9.0 => String::from(\"B-\"),\n            10.0..11.0 => String::from(\"\
    C+\"),\n            12.0..13.0 => String::from(\"C\"),\n            14.0..15.0\
    \ => String::from(\"C-\"),\n            16.0..17.0 => String::from(\"D+\"),\n\
    \            18.0..19.0 => String::from(\"D\"),\n            20.0..20.0 => String::from(\"\
    D-\"),\n            _ => String::from(\"F\"),\n        });\n        highest_grade\
    \ -= 1.0;\n    }\n    letter_grades", "    let mut lettergrades = vec![];\n\n\
    \    for grade in grades {\n        if grade > 4.0 {\n            if grade > 3.7\
    \ {\n                if grade > 3.3 {\n                    if grade > 2.7 {\n\
    \                        if grade > 2.3 {\n                            if grade\
    \ > 1.7 {\n                                if grade > 1.3 {\n                \
    \                    if grade > 0.7 {\n                                      \
    \  if grade > 0.3 {\n                                            if grade > 0.0\
    \ {\n                                                if grade < 1.0 {\n      \
    \                                              lettergrades.push(String::from(\"\
    D+\"))\n                                                }\n                  \
    \                          }\n                                        }\n    \
    \                                }\n                                }\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }\n    }\n    lettergrades"]
stop_tokens:
- "\n}"
