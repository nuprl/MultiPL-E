language: rs
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).split(' ').collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp55c2qvin.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).split(' ').collect::<Vec<_>>().join(\"\
    \ \")\n  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", (0..n).collect::<Vec<_>>().join(\"\
    , \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n --> /tmp/tmpbjeor19q.rs:7:17\n\
    \  |\n6 | fn string_sequence(n: isize) -> String {\n  |                      \
    \                  - closing delimiter possibly meant for this\n7 |     String::from(format!(\"\
    {}\", (0..n).collect::<Vec<_>>().join(\", \"))\n  |                 ^ unclosed\
    \ delimiter\n8 | }\n  | ^ mismatched closing delimiter\n\nerror[E0599]: the method\
    \ `join` exists for struct `Vec<isize>`, but its trait bounds were not satisfied\n\
    \ --> /tmp/tmpbjeor19q.rs:7:59\n  |\n7 |     String::from(format!(\"{}\", (0..n).collect::<Vec<_>>().join(\"\
    , \"))\n  |                                                           ^^^^ method\
    \ cannot be called on `Vec<isize>` due to unsatisfied trait bounds\n  |\n  = note:\
    \ the following trait bounds were not satisfied:\n          `[isize]: Join<_>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp1u_617fk.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_utf8_lossy(\n        &(\n            (0..n)\n\
    \            .map(|x| format!(\"{}\", x))\n            .collect()\n        ),\n\
    \    )\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `[u8]` cannot be built from an iterator over\
    \ elements of type `String`\n    --> /tmp/tmpg0ps8ety.rs:8:9\n     |\n7    | \
    \      String::from_utf8_lossy(\n     |       ----------------------- required\
    \ by a bound introduced by this call\n8    | /         &(\n9    | |          \
    \   (0..n)\n10   | |             .map(|x| format!(\"{}\", x))\n11   | |      \
    \       .collect()\n12   | |         ),\n     | |_________^ value of type `[u8]`\
    \ cannot be built from `std::iter::Iterator<Item=String>`\n     |\n     = help:\
    \ the trait `FromIterator<String>` is not implemented for `[u8]`\nnote: required\
    \ by a bound in `collect`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg0ps8ety.rs:7:5\n\
    \   |\n6  |   fn string_sequence(n: isize) -> String {\n   |                 \
    \                  ------ expected `String` because of return type\n7  | /   \
    \  String::from_utf8_lossy(\n8  | |         &(\n9  | |             (0..n)\n10\
    \ | |             .map(|x| format!(\"{}\", x))\n11 | |             .collect()\n\
    12 | |         ),\n13 | |     )\n   | |     ^- help: try using a conversion method:\
    \ `.to_string()`\n   | |_____|\n   |       expected struct `String`, found enum\
    \ `Cow`\n   |\n   = note: expected struct `String`\n                found enum\
    \ `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp1u_617fk.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    \"0\".repeat(n).concat()\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc7j5x54_.rs:7:16\n  |\n7 |\
    \     \"0\".repeat(n).concat()\n  |                ^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     \"0\".repeat(n.try_into().unwrap()).concat()\n\
    \  |                 ++++++++++++++++++++\n\nerror[E0599]: no method named `concat`\
    \ found for struct `String` in the current scope\n --> /tmp/tmpc7j5x54_.rs:7:19\n\
    \  |\n7 |     \"0\".repeat(n).concat()\n  |                   ^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", String::new()).to_string()\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" \"`,\n right: `\"0\"`', /tmp/tmp78o_frvs.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    \"0 \".repeat(n).trim()\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_igz817l.rs:7:17\n  |\n7 |\
    \     \"0 \".repeat(n).trim()\n  |                 ^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     \"0 \".repeat(n.try_into().unwrap()).trim()\n\
    \  |                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_igz817l.rs:7:5\n  |\n6 | fn string_sequence(n: isize) -> String\
    \ {\n  |                                 ------ expected `String` because of return\
    \ type\n7 |     \"0 \".repeat(n).trim()\n  |     ^^^^^^^^^^^^^^^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n  |     |\n  |     expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", (0..n).collect())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpg57ccf07.rs:7:20\n\
    \  |\n7 |     format!(\"{} \", (0..n).collect())\n  |                    ^^^^^^^^^^^^^^^^\
    \ cannot infer type for type parameter `T` declared on the associated function\
    \ `new_display`\n  |\n  = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider\
    \ specifying the type argument in the method call\n  |\n7 |     format!(\"{} \"\
    , (0..n).collect::<B>())\n  |                                  +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptylymo4w.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{:?}\", from_str(&to_str(&vec![0; n]))).to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `from_str` in this scope\n --> /tmp/tmpajl4j99y.rs:7:21\n\
    \  |\n7 |     format!(\"{:?}\", from_str(&to_str(&vec![0; n]))).to_owned()\n \
    \ |                     ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `to_str` in this scope\n --> /tmp/tmpajl4j99y.rs:7:31\n  |\n7\
    \ |     format!(\"{:?}\", from_str(&to_str(&vec![0; n]))).to_owned()\n  |    \
    \                           ^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpajl4j99y.rs:7:47\n  |\n7 |     format!(\"{:?}\", from_str(&to_str(&vec![0;\
    \ n]))).to_owned()\n  |                                               ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     format!(\"{:?}\", from_str(&to_str(&vec![0;\
    \ n.try_into().unwrap()]))).to_owned()\n  |                                  \
    \              ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        String::from(\"0\")\n    } else\
    \ {\n        let mut s = String::from(\"0 \");\n        for i in 1..n {\n    \
    \        s.push_str(&format!(\"{} \", i));\n        }\n        s\n    }\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 \"`,\n right: `\"0 1 2 3\"`', /tmp/tmpr_ls28gu.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for _ in 0..n {\n\
    \        result.push_str(\" \");\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpabzpir3c.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for _ in 0..n\
    \ {\n        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0   \"`,\n right: `\"0 1 2 3\"`', /tmp/tmpt9te6ux1.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{:?}\", (0..n).map(|_| String::from(_)).collect())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: in expressions, `_` can only be used on the left-hand side of an\
    \ assignment\n --> /tmp/tmpt8tl_kvb.rs:7:49\n  |\n7 |     format!(\"{:?}\", (0..n).map(|_|\
    \ String::from(_)).collect())\n  |                                           \
    \      ^ `_` not allowed here\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    use std::iter;\n    iter::repeat(0).take(n).collect()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5qa3tx92.rs:8:26\n  |\n8 |\
    \     iter::repeat(0).take(n).collect()\n  |                          ^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     iter::repeat(0).take(n.try_into().unwrap()).collect()\n\
    \  |                           ++++++++++++++++++++\n\nerror[E0277]: a value of\
    \ type `String` cannot be built from an iterator over elements of type `{integer}`\n\
    \    --> /tmp/tmp5qa3tx92.rs:8:29\n     |\n8    |     iter::repeat(0).take(n).collect()\n\
    \     |                             ^^^^^^^ value of type `String` cannot be built\
    \ from `std::iter::Iterator<Item={integer}>`\n     |\n     = help: the trait `FromIterator<{integer}>`\
    \ is not implemented for `String`\n     = help: the following other types implement\
    \ trait `FromIterator<A>`:\n               <String as FromIterator<&'a char>>\n\
    \               <String as FromIterator<&'a str>>\n               <String as FromIterator<Box<str>>>\n\
    \               <String as FromIterator<Cow<'a, str>>>\n               <String\
    \ as FromIterator<String>>\n               <String as FromIterator<char>>\nnote:\
    \ required by a bound in `collect`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for (i, _) in 0..n {\n\
    \        if i == 0 {\n            s.push('0');\n        }\n        s.push(' ').push(\"\
    0123456789\").to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3fdo9o02.rs:8:9\n  |\n8 |\
    \     for (i, _) in 0..n {\n  |         ^^^^^^    ---- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found tuple\n\
    \  |\n  = note: expected type `isize`\n            found tuple `(_, _)`\n\nerror[E0599]:\
    \ no method named `push` found for unit type `()` in the current scope\n  -->\
    \ /tmp/tmp3fdo9o02.rs:12:21\n   |\n12 |         s.push(' ').push(\"0123456789\"\
    ).to_string();\n   |                     ^^^^ method not found in `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", range(n).map(|n| format!(\"{}\", n)).collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpcmtp_arz.rs:7:19\n\
    \  |\n7 |     format!(\"{}\", range(n).map(|n| format!(\"{}\", n)).collect::<String>())\n\
    \  |                   ^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\n        format!(\"{}\", (0..n).map(|i|\
    \ format!(\"{}\", i)).collect()),\n    )\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpk33nt4dc.rs:8:23\n\
    \  |\n8 |         format!(\"{}\", (0..n).map(|i| format!(\"{}\", i)).collect()),\n\
    \  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer\
    \ type for type parameter `T` declared on the associated function `new_display`\n\
    \  |\n  = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider\
    \ specifying the type argument in the method call\n  |\n8 |         format!(\"\
    {}\", (0..n).map(|i| format!(\"{}\", i)).collect::<B>()),\n  |               \
    \                                                +++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", range(n).map(|i| i.to_string()).collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpaq9c6qyl.rs:7:19\n\
    \  |\n7 |     format!(\"{}\", range(n).map(|i| i.to_string()).collect::<String>())\n\
    \  |                   ^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} {}\", 0, n)\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 0\"`,\n right: `\"0\"`', /tmp/tmpnqup_5fe.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", (0..n).collect::<String>()))\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp51xt8uep.rs:7:39\n     |\n7 \
    \   |     String::from(format!(\"{}\", (0..n).collect::<String>()))\n     |  \
    \                                     ^^^^^^^ value of type `String` cannot be\
    \ built from `std::iter::Iterator<Item=isize>`\n     |\n     = help: the trait\
    \ `FromIterator<isize>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    \"0 1 2 3 4 5\".split(\" \").collect::<Vec<String>>()[..n].join(\"\
    , \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpx5rvlh3s.rs:7:30\n     |\n7  \
    \  |     \"0 1 2 3 4 5\".split(\" \").collect::<Vec<String>>()[..n].join(\", \"\
    )\n     |                              ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror[E0277]: the type `[String]` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmpx5rvlh3s.rs:7:5\n  |\n7 |     \"0 1 2 3 4 5\".split(\" \").collect::<Vec<String>>()[..n].join(\"\
    , \")\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[String]>`\
    \ is not implemented for `RangeTo<isize>`\n  = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n            <RangeTo<usize> as SliceIndex<[T]>>\n\
    \            <RangeTo<usize> as SliceIndex<str>>\n  = note: required because of\
    \ the requirements on the impl of `Index<RangeTo<isize>>` for `Vec<String>`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut res = String::from(\"\");\n    for _ in 0..n\
    \ {\n        res.push_str(\" \")\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmp52kqzvx0.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 1 2 3 4 5\".to_string())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 3 4 5\"`,\n right: `\"0\"`', /tmp/tmph3kfhl0k.rs:12:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for _ in 0..n\
    \ {\n        s += \" \";\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0   \"`,\n right: `\"0 1 2 3\"`', /tmp/tmp6awmo0vk.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", String::new()).to_string().into_iter().take(n).collect().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp7x87gyap.rs:7:47\n    |\n7 \
    \  |       format!(\"{} \", String::new()).to_string().into_iter().take(n).collect().join(\"\
    \ \")\n    |                                                 ^^^^^^^^^\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `String:\
    \ Iterator`\n            which is required by `String: IntoIterator`\n       \
    \     `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", format_str::format_in_range(0, n, \"\
    \"));\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `format_str`\n\
    \ --> /tmp/tmpd4t2234s.rs:7:19\n  |\n7 |     format!(\"{}\", format_str::format_in_range(0,\
    \ n, \"\"));\n  |                   ^^^^^^^^^^ use of undeclared crate or module\
    \ `format_str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpd4t2234s.rs:6:33\n\
    \  |\n6 | fn string_sequence(n: isize) -> String {\n  |    ---------------   \
    \           ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for i in 1..n\
    \ {\n        s += \" \".to_string();\n        s += i.to_string();\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqisa3d_e.rs:9:14\n  |\n9 |\
    \         s += \" \".to_string();\n  |              ^^^^^^^^^^^^^^^\n  |     \
    \         |\n  |              expected `&str`, found struct `String`\n  |    \
    \          help: consider borrowing here: `&\" \".to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqisa3d_e.rs:10:14\n   |\n10 |         s += i.to_string();\n\
    \   |              ^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&i.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_iter(n.into_iter().map(|x| x.to_string()).collect())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n --> /tmp/tmpfgojvywy.rs:7:13\n  |\n7\
    \ |     String::from_iter(n.into_iter().map(|x| x.to_string()).collect())\n  |\
    \             ^^^^^^^^^ function or associated item not found in `String`\n  |\n\
    \  = help: items from traits can only be used if the trait is in scope\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n  |\n1 | use std::iter::FromIterator;\n  |\nhelp: there is an associated\
    \ function with a similar name\n  |\n7 |     String::from_utf8(n.into_iter().map(|x|\
    \ x.to_string()).collect())\n  |             ~~~~~~~~~\n\nerror[E0599]: `isize`\
    \ is not an iterator\n --> /tmp/tmpfgojvywy.rs:7:25\n  |\n7 |     String::from_iter(n.into_iter().map(|x|\
    \ x.to_string()).collect())\n  |                         ^^^^^^^^^ `isize` is\
    \ not an iterator\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `isize: Iterator`\n          which is required by `isize: IntoIterator`\n\
    \          `&isize: Iterator`\n          which is required by `&isize: IntoIterator`\n\
    \          `&mut isize: Iterator`\n          which is required by `&mut isize:\
    \ IntoIterator`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut buf = String::new();\n    for &c in 0..n {\n\
    \        write_number(&mut buf, c);\n    }\n    buf\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `write_number` in this scope\n --> /tmp/tmpytllig3g.rs:9:9\n\
    \  |\n9 |         write_number(&mut buf, c);\n  |         ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpytllig3g.rs:8:9\n\
    \  |\n8 |     for &c in 0..n {\n  |         ^^    ---- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `c`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmprgqvxi0f.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n {\n  \
    \      s += i.to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9bgvjrfn.rs:9:14\n  |\n9 |\
    \         s += i.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&i.to_string()`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_str(format!(\"0 {} 1 2 3 4 5\", n))\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_str` found for\
    \ struct `String` in the current scope\n --> /tmp/tmpua_0mzjc.rs:7:13\n  |\n7\
    \ |     String::from_str(format!(\"0 {} 1 2 3 4 5\", n))\n  |             ^^^^^^^^\
    \ function or associated item not found in `String`\n  |\n  = help: items from\
    \ traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n  |\n1 | use std::str::FromStr;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} {}\", 0, (1..n).map(|i| i).collect::<Vec<_>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpb7xprwsm.rs:7:63\n  |\n7 |   \
    \  format!(\"{} {}\", 0, (1..n).map(|i| i).collect::<Vec<_>>().join(\" \"))\n\
    \  |                                                               ^^^^ method\
    \ cannot be called on `Vec<isize>` due to unsatisfied trait bounds\n  |\n  = note:\
    \ the following trait bounds were not satisfied:\n          `[isize]: Join<_>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"0 1 2 3 4 5\", n)\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: argument never used\n --> /tmp/tmp9obfzcil.rs:7:28\n  |\n7 |   \
    \  format!(\"0 1 2 3 4 5\", n)\n  |             -------------  ^ argument never\
    \ used\n  |             |\n  |             formatting specifier missing\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(&format!(\"{} \", 0..(n+1)))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpammgzi87.rs:7:34\n  |\n7 |     String::from(&format!(\"{} \", 0..(n+1)))\n\
    \  |                                  ^^^^^^^^ `std::ops::Range<isize>` cannot\
    \ be formatted with the default formatter\n  |\n  = help: the trait `std::fmt::Display`\
    \ is not implemented for `std::ops::Range<isize>`\n  = note: in format strings\
    \ you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note:\
    \ this error originates in the macro `$crate::__export::format_args` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} {}\", n, (n - 1).to_string())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 -1\"`,\n right: `\"0\"`', /tmp/tmp8_hdxvi2.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 \".to_string() + str::repeat(\"1 \"\
    , n).rstrip() + \"5 \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4gh730y0.rs:7:55\n  |\n7 |\
    \     String::from(\"0 \".to_string() + str::repeat(\"1 \", n).rstrip() + \"5\
    \ \")\n  |                                                       ^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     String::from(\"0 \".to_string()\
    \ + str::repeat(\"1 \", n.try_into().unwrap()).rstrip() + \"5 \")\n  |       \
    \                                                 ++++++++++++++++++++\n\nerror[E0599]:\
    \ no method named `rstrip` found for struct `String` in the current scope\n -->\
    \ /tmp/tmp4gh730y0.rs:7:58\n  |\n7 |     String::from(\"0 \".to_string() + str::repeat(\"\
    1 \", n).rstrip() + \"5 \")\n  |                                             \
    \             ^^^^^^ help: there is an associated function with a similar name:\
    \ `trim`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp9c6j5hrq.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).as_str()\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpynpm6v_8.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).as_str()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> /tmp/tmpynpm6v_8.rs:7:5\n\
    \  |\n6 | fn string_sequence(n: isize) -> String {\n  |                      \
    \           ------ expected `String` because of return type\n7 |     format!(\"\
    {}\", 0..n).as_str()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ conversion method: `.to_string()`\n  |     |\n  |     expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_str(\n        format!(\"0 {} \", &format!(\"\
    1 {} \", n.to_string())[..])[..],\n    )\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_str` found for\
    \ struct `String` in the current scope\n --> /tmp/tmphlwitt71.rs:7:13\n  |\n7\
    \ |     String::from_str(\n  |             ^^^^^^^^ function or associated item\
    \ not found in `String`\n  |\n  = help: items from traits can only be used if\
    \ the trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n  |\n1 | use std::str::FromStr;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp1u_617fk.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(&format!(\"{}\", n).split())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmp7bu9q0pd.rs:7:36\n     |\n7    |     String::from(&format!(\"\
    {}\", n).split())\n     |                                    ^^^^^- supplied 0\
    \ arguments\n     |                                    |\n     |             \
    \                       expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0277]: the trait bound `String: From<&std::str::Split<'_,\
    \ _>>` is not satisfied\n --> /tmp/tmp7bu9q0pd.rs:7:5\n  |\n7 |     String::from(&format!(\"\
    {}\", n).split())\n  |     ^^^^^^^^^^^^ the trait `From<&std::str::Split<'_, _>>`\
    \ is not implemented for `String`\n  |\n  = help: the following other types implement\
    \ trait `From<T>`:\n            <String as From<&String>>\n            <String\
    \ as From<&mut str>>\n            <String as From<&str>>\n            <String\
    \ as From<Box<str>>>\n            <String as From<Cow<'a, str>>>\n           \
    \ <String as From<char>>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0277.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", (0..n).collect()))\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpmfjwnr84.rs:7:32\n\
    \  |\n7 |     String::from(format!(\"{}\", (0..n).collect()))\n  |           \
    \                     ^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\
    \ declared on the associated function `new_display`\n  |\n  = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\nhelp: consider specifying the type\
    \ argument in the method call\n  |\n7 |     String::from(format!(\"{}\", (0..n).collect::<B>()))\n\
    \  |                                              +++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::from(\"0\");\n    for i in\
    \ 0..n {\n        result += \" \"\n            + String::from(&i.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `String` to `&str`\n  --> /tmp/tmpoi9dxvsx.rs:10:13\n\
    \   |\n9  |         result += \" \"\n   |                   --- &str\n10 |   \
    \          + String::from(&i.to_string());\n   |             ^ ----------------------------\
    \ String\n   |             |\n   |             `+` cannot be used to concatenate\
    \ a `&str` with a `String`\n   |\nhelp: create an owned `String` on the left and\
    \ add a borrow on the right\n   |\n9  ~         result += \" \".to_owned()\n10\
    \ ~             + &String::from(&i.to_string());\n   |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmprgqvxi0f.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp1u_617fk.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", from_str_radix(n as u64, 10).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `from_str_radix` in this scope\n -->\
    \ /tmp/tmp5bu6bprc.rs:7:19\n  |\n7 |     format!(\"{}\", from_str_radix(n as u64,\
    \ 10).unwrap())\n  |                   ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 1 2 3 4 5\").split_whitespace().collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp5tij7e6r.rs:7:52\n     |\n7  \
    \  |     String::from(\"0 1 2 3 4 5\").split_whitespace().collect::<Vec<String>>().join(\"\
    \ \")\n     |                                                    ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \     |\n     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", String::from(format!(\"{}\", n)));\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp55fy6lmm.rs:6:33\n  |\n6 |\
    \ fn string_sequence(n: isize) -> String {\n  |    ---------------           \
    \   ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n7 |     format!(\"{} \"\
    , String::from(format!(\"{}\", n)));\n  |                                    \
    \               - help: remove this semicolon\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpccv29e36.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", isize_to_string(n)).rstrip())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isize_to_string` in this scope\n -->\
    \ /tmp/tmpuaw409j6.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", isize_to_string(n)).rstrip())\n\
    \  |                                 ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", range(n).collect::<String>()))\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpzv51bugz.rs:7:33\n\
    \  |\n7 |     String::from(format!(\"{} \", range(n).collect::<String>()))\n \
    \ |                                 ^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this function\n  |\n1 | use std::slice::range;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n).map(|_| String::from(\"0\")).join()\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmp6tues8eg.rs:7:39\n  |\n7 |     (0..n).map(|_| String::from(\"\
    0\")).join()\n  |                                       ^^^^ method not found\
    \ in `Map<std::ops::Range<isize>, [closure@/tmp/tmp6tues8eg.rs:7:16: 7:37]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n).into_owned()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_owned` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpwfgkzzs4.rs:7:22\n  |\n7 |     format!(\"{}\"\
    , n).into_owned()\n  |                      ^^^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..=n).join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmphqxai2g7.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmphqxai2g7.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        String::from(\"0\")\n    } else\
    \ {\n        let mut s = String::from(\"0 \");\n        for n in n..=1 {\n   \
    \         s.push_str(&format!(\"{} \", n));\n        }\n        s\n    }\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0 1 2 3\"`', /tmp/tmpe5x767_0.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", take(n).map(|i| i.to_string()).collect())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `take` in this scope\n --> /tmp/tmphr7huzly.rs:7:19\n\
    \  |\n7 |     format!(\"{}\", take(n).map(|i| i.to_string()).collect())\n  | \
    \                  ^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this function\n  |\n1 | use std::mem::take;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    s.push_str(\"0\");\n\
    \    for i in 1..n {\n        s.push_str(\" \");\n        s.push_str(&format!(\"\
    {}\", i).unwrap());\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp42reykxh.rs:11:38\n   |\n11 |         s.push_str(&format!(\"\
    {}\", i).unwrap());\n   |                                      ^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp9c6j5hrq.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n).map(|i| format!(\"{}\", i)).collect()\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpzi_if6r7.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptylymo4w.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmp9azi7mhr.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n {\n  \
    \      s += String::from(\"{}\");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3fww46y9.rs:9:14\n  |\n9 |\
    \         s += String::from(\"{}\");\n  |              ^^^^^^^^^^^^^^^^^^\n  |\
    \              |\n  |              expected `&str`, found struct `String`\n  |\
    \              help: consider borrowing here: `&String::from(\"{}\")`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} {}\", n, \"0\".repeat(n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp452fnam7.rs:7:36\n  |\n7 |\
    \     format!(\"{} {}\", n, \"0\".repeat(n))\n  |                            \
    \        ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n7 |     format!(\"\
    {} {}\", n, \"0\".repeat(n.try_into().unwrap()))\n  |                        \
    \             ++++++++++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n)\n        .map(|x| format!(\"\
    {}\", x).to_string())\n        .collect::<Vec<_>>())\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `Vec<String>` doesn't implement `std::fmt::Display`\n -->\
    \ /tmp/tmpsjcmlrax.rs:7:19\n  |\n7 |       format!(\"{}\", (0..n)\n  |  ___________________^\n\
    8 | |         .map(|x| format!(\"{}\", x).to_string())\n9 | |         .collect::<Vec<_>>())\n\
    \  | |____________________________^ `Vec<String>` cannot be formatted with the\
    \ default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `Vec<String>`\n  = note: in format strings you may be able to use `{:?}`\
    \ (or {:#?} for pretty-print) instead\n  = note: this error originates in the\
    \ macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0\")\n        .to_string()\n        .replace(\"\
    1\", \"2\")\n        .replace(\"2\", \"3\")\n        .replace(\"3\", \"4\")\n\
    \        .replace(\"4\", \"5\")\n        .replace(\"5\", \"6\")\n        .replace(\"\
    6\", \"7\")\n        .replace(\"7\", \"8\")\n        .replace(\"8\", \"9\")\n\
    \        .replace(\"9\", \"10\")\n        .replace(\"10\", \"11\")\n        .replace(\"\
    11\", \"12\")\n        .replace(\"12\", \"13\")\n        .replace(\"13\", \"14\"\
    )\n        .replace(\"14\", \"15\")\n        .replace(\"15\", \"16\")\n      \
    \  .replace(\"16\", \"17\")\n        .replace(\"17\", \"18\")\n        .replace(\"\
    18\", \"19\")\n        .replace(\"19\", \"20\")\n        .replace(\"20\", \"21\"\
    )\n        .replace(\"21\", \"22\")\n        .replace(\"22\", \"23\")\n      \
    \  .replace(\"23\", \"24\")\n        .replace(\"24\", \"25\")\n        .replace(\"\
    25\", \"26\")\n        .replace(\"26\", \"27\")\n        .replace(\"27\", \"28\"\
    )\n        .replace(\"28\", \"29\")\n        .replace(\"29\", \"30\")\n      \
    \  .replace(\"30\", \"31\")\n        .replace(\"31\", \"32\")\n        .replace(\"\
    32\", \"33\")\n        .replace(\"33\", \"34\")\n        .replace(\"34\", \"35\"\
    )\n        .replace(\"35\", \"36\")\n        .replace(\"36\", \"37\")\n      \
    \  .replace(\"37\", \"38\")\n        .replace(\"38\", \"39\")\n        .replace(\"\
    39\", \"40\")\n        .replace(\"40\", \"41\")\n        .replace(\"41\", \"42\"\
    )\n        .replace(\"42\", \"43\")\n        .replace(\"43\", \"44\")\n      \
    \  .replace(\"44\", \"45\")\n        .replace(\"45\", \"46\")\n        .replace(\"\
    46\", \"47\")\n        .replace(\"47\", \"48\")\n        .replace(\"48\", \"49\"\
    )\n        .replace(\"49\", \"50\")\n        .replace(\"50\", \"51\")\n      \
    \  .replace(\"51\", \"52\")\n        .replace(\"52\", \"53\")\n        .replace(\"\
    53\", \"54\")\n        .replace(\"54\", \"55\")\n        .replace(\"55\", \"56\"\
    )\n        .replace(\"56\", \"57\")\n        .replace(\"57\", \"58\")\n      \
    \  .replace(\"58\", \"59\")\n        .replace(\"59\", \"60\")\n        .replace(\"\
    60\", \"61\")\n        .replace(\"61\", \"62\")\n        .replace(\"62\", \"63\"\
    )\n        .replace(\"63\", \"64\")\n        .replace(\"64\", \"65\")\n      \
    \  .replace(\"65\", \"66\")\n        .replace(\"66\", \"67\")\n        .replace(\"\
    67\", \"68\")\n        .replace(\"68\", \"69\")\n        .replace(\"69\", \"70\"\
    )\n        .replace(\"70\", \"71\")\n        .replace(\"71\", \"72\")\n      \
    \  .replace(\"72\", \"73\")\n        .replace(\"73\", \"74\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpbvmtcfq8.rs:88:67\n\
    \   |\n88 |       assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9\
    \ 10\"));\n   |  ___________________________________________________________________^\n\
    89 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    use std::str::{self, FromStr};\n    let mut builder:\
    \ StringBuilder = StringBuilder::new();\n    for _ in 0..n {\n        builder.append_str(\"\
    \ \").unwrap();\n    }\n    builder.into_boxed_str()\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `StringBuilder`\n\
    \ --> /tmp/tmpafvqynk5.rs:8:38\n  |\n8 |     let mut builder: StringBuilder =\
    \ StringBuilder::new();\n  |                                      ^^^^^^^^^^^^^\
    \ use of undeclared type `StringBuilder`\n\nerror[E0412]: cannot find type `StringBuilder`\
    \ in this scope\n --> /tmp/tmpafvqynk5.rs:8:22\n  |\n8 |     let mut builder:\
    \ StringBuilder = StringBuilder::new();\n  |                      ^^^^^^^^^^^^^\
    \ not found in this scope\n\nwarning: unused imports: `FromStr`, `self`\n -->\
    \ /tmp/tmpafvqynk5.rs:7:20\n  |\n7 |     use std::str::{self, FromStr};\n  | \
    \                   ^^^^  ^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on\
    \ by default\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0412, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::from(\"0\");\n    for i in\
    \ 1..n {\n        result = &result + &String::from(i.to_string());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&String` to `&String`\n --> /tmp/tmpvpdu66gs.rs:9:26\n\
    \  |\n9 |         result = &result + &String::from(i.to_string());\n  |      \
    \            ------- ^ ---------------------------- &String\n  |             \
    \     |       |\n  |                  |       `+` cannot be used to concatenate\
    \ two `&str` strings\n  |                  &String\n  |\n  = note: string concatenation\
    \ requires an owned `String` on the left\nhelp: remove the borrow to obtain an\
    \ owned `String`\n  |\n9 -         result = &result + &String::from(i.to_string());\n\
    9 +         result = result + &String::from(i.to_string());\n  | \n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n {\n  \
    \      s.append(&format!(\"{}\", i));\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp2drds511.rs:9:11\n  |\n9 |         s.append(&format!(\"\
    {}\", i));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"\");\n    for i in 0..n {\n\
    \        s += i.to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnmo9ve1i.rs:9:14\n  |\n9 |\
    \         s += i.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&i.to_string()`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret = String::from(\"0\");\n    for _ in 0..n\
    \ {\n        ret += \" \";\n        ret += \"0\";\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 0 0 0\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp74s98h75.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", (0..n).collect()))\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpz9nk3n2p.rs:7:33\n\
    \  |\n7 |     String::from(format!(\"{} \", (0..n).collect()))\n  |          \
    \                       ^^^^^^^^^^^^^^^^ cannot infer type for type parameter\
    \ `T` declared on the associated function `new_display`\n  |\n  = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\nhelp: consider specifying the type\
    \ argument in the method call\n  |\n7 |     String::from(format!(\"{} \", (0..n).collect::<B>()))\n\
    \  |                                               +++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::from(\"\");\n    for num in\
    \ 0..n {\n        string.push_str(&format!(\"{} \", num));\n    }\n    string\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpgwxfr9om.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::with_capacity(n);\n    for _ in\
    \ 0..n {\n        s.push(\" \");\n    }\n    for n in 0..n {\n        s.push(n);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzvh7v6xg.rs:7:39\n  |\n7 |\
    \     let mut s = String::with_capacity(n);\n  |                             \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n7 |     let\
    \ mut s = String::with_capacity(n.try_into().unwrap());\n  |                 \
    \                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpzvh7v6xg.rs:9:16\n  |\n9 |         s.push(\" \");\n  |         \
    \       ^^^ expected `char`, found `&str`\n  |\nhelp: if you meant to write a\
    \ `char` literal, use single quotes\n  |\n9 |         s.push(' ');\n  |      \
    \          ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzvh7v6xg.rs:12:16\n\
    \   |\n12 |         s.push(n);\n   |                ^ expected `char`, found `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n <= 0 {\n        String::from(\"0\")\n    } else\
    \ {\n        let mut buffer = String::new();\n        for _ in 0..n {\n      \
    \      buffer.push_str(\" \");\n            buffer.push('0');\n        }\n   \
    \     buffer\n    }\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" 0 0 0\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpoq55iqn8.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_utf8_lossy(range(n).collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmp4mhr7vg9.rs:7:29\n\
    \  |\n7 |     String::from_utf8_lossy(range(n).collect::<String>())\n  |     \
    \                        ^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this function\n  |\n1 | use std::slice::range;\n  |\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp4mhr7vg9.rs:7:5\n  |\n6 | fn string_sequence(n: isize) ->\
    \ String {\n  |                                 ------ expected `String` because\
    \ of return type\n7 |     String::from_utf8_lossy(range(n).collect::<String>())\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n  |     |\n  |     expected struct `String`,\
    \ found enum `Cow`\n  |\n  = note: expected struct `String`\n               found\
    \ enum `Cow<'_, str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n).fold(String::from(\"\"), |mut buf, i| {\n   \
    \     buf.push_str(\" \");\n        buf += i.to_string();\n        buf\n    })\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprjuxo7a4.rs:9:16\n  |\n9 |\
    \         buf += i.to_string();\n  |                ^^^^^^^^^^^^^\n  |       \
    \         |\n  |                expected `&str`, found struct `String`\n  |  \
    \              help: consider borrowing here: `&i.to_string()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::with_capacity(n);\n    for\
    \ _ in 0..n {\n        result.push('0');\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqsh91p_m.rs:7:44\n  |\n7 |\
    \     let mut result = String::with_capacity(n);\n  |                        \
    \                    ^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    7 |     let mut result = String::with_capacity(n.try_into().unwrap());\n  |  \
    \                                           ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 1 2 3 4 5\")\n        .lines()\n  \
    \      .enumerate()\n        .map(|(index, line)| format!(\"{} {}\", index + 1,\
    \ line))\n        .collect::<Vec<_>>()\n        .join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1 0 1 2 3 4 5\"`,\n right: `\"0\"`', /tmp/tmp3w_ryym7.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for _ in 0..n {\n  \
    \      s.push_str(\" \")\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpbcwfxzc1.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{:?}\", (0..n).collect::<Vec<_>>())\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"[]\"`,\n right: `\"0\"`', /tmp/tmpvtnaobav.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_str(&format!(\"{} \", n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_str` found for\
    \ struct `String` in the current scope\n --> /tmp/tmpi84fqg5g.rs:7:13\n  |\n7\
    \ |     String::from_str(&format!(\"{} \", n))\n  |             ^^^^^^^^ function\
    \ or associated item not found in `String`\n  |\n  = help: items from traits can\
    \ only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n  |\n1 | use std::str::FromStr;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..=n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp0lzirpf4.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..=n))\n\
    \  |                                 ^^^^^ `RangeInclusive<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeInclusive<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n).map(|i| format!(\"{}\", i))\n        .collect::<Vec<_>>()\n\
    \        .join(' ')\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp87uzo4sd.rs:9:15\n  |\n9 |\
    \         .join(' ')\n  |               ^^^ expected `&str`, found `char`\n  |\n\
    help: if you meant to write a `str` literal, use double quotes\n  |\n9 |     \
    \    .join(\" \")\n  |               ~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut builder = String::new();\n    for _ in 0..n\
    \ {\n        builder.push('0');\n    }\n    builder\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmp9mkdulho.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 1 2 3 4 5\")\n        .split_whitespace()\n\
    \        .chunks(n)\n        .map(|chunk| format!(\"{} \", chunk.collect::<Vec<String>>()))\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `chunks` found for struct `SplitWhitespace`\
    \ in the current scope\n --> /tmp/tmpen_3iadl.rs:9:10\n  |\n9 |         .chunks(n)\n\
    \  |          ^^^^^^ method not found in `SplitWhitespace<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    strings(n).join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `strings` in this scope\n --> /tmp/tmpb68kd8zp.rs:7:5\n\
    \  |\n7 |     strings(n).join(\" \")\n  |     ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n).map(String::from).collect()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \ --> /tmp/tmpvy8_4k2v.rs:7:5\n  |\n7 |     (0..n).map(String::from).collect()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <String as From<&String>>\n            <String as From<&mut str>>\n\
    \            <String as From<&str>>\n            <String as From<Box<str>>>\n\
    \            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\
    \nerror[E0277]: the trait bound `String: From<isize>` is not satisfied\n --> /tmp/tmpvy8_4k2v.rs:7:16\n\
    \  |\n7 |     (0..n).map(String::from).collect()\n  |                ^^^^^^^^^^^^\
    \ the trait `From<isize>` is not implemented for `String`\n  |\n  = help: the\
    \ following other types implement trait `From<T>`:\n            <String as From<&String>>\n\
    \            <String as From<&mut str>>\n            <String as From<&str>>\n\
    \            <String as From<Box<str>>>\n            <String as From<Cow<'a, str>>>\n\
    \            <String as From<char>>\n\nerror[E0277]: the trait bound `String:\
    \ From<isize>` is not satisfied\n --> /tmp/tmpvy8_4k2v.rs:7:5\n  |\n7 |     (0..n).map(String::from).collect()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<isize>` is not implemented\
    \ for `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <String as From<&String>>\n            <String as From<&mut str>>\n\
    \            <String as From<&str>>\n            <String as From<Box<str>>>\n\
    \            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n).collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpuhn8ke9l.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n).collect::<String>())\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: `String` is not\
    \ an iterator\n   --> /tmp/tmpuhn8ke9l.rs:7:38\n    |\n7   |       String::from(format!(\"\
    {}\", 0..n).collect::<String>())\n    |                                      \
    \  ^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `&mut String: Iterator`\n\
    \            `str: Iterator`\n            which is required by `&mut str: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut iter = iter::repeat(0usize).take(n);\n    let\
    \ mut s = String::new();\n    for e in iter {\n        s.push_fmt(\" {}\", e);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `iter`\n\
    \ --> /tmp/tmpsf2_iy0l.rs:7:20\n  |\n7 |     let mut iter = iter::repeat(0usize).take(n);\n\
    \  |                    ^^^^ use of undeclared crate or module `iter`\n\nerror[E0599]:\
    \ no method named `push_fmt` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpsf2_iy0l.rs:10:11\n   |\n10 |         s.push_fmt(\" {}\", e);\n\
    \   |           ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `push`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0433, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for i in 1..n\
    \ {\n        s += String::from(&format!(\"{} \", i));\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf2j9ku3d.rs:9:14\n  |\n9 |\
    \         s += String::from(&format!(\"{} \", i));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(&format!(\"{}\
    \ \", i))`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for _ in 0..n {\n  \
    \      s.push_str(\"0\");\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpnkse0u9n.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp9c6j5hrq.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", isize_to_string(n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isize_to_string` in this scope\n -->\
    \ /tmp/tmp323iohh7.rs:7:20\n  |\n7 |     format!(\"{} \", isize_to_string(n))\n\
    \  |                    ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0i64..n).trim())\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppobm2u6v.rs:7:39\n  |\n7 |\
    \     String::from(format!(\"{} \", 0i64..n).trim())\n  |                    \
    \                   ^ expected `i64`, found `isize`\n\nerror[E0277]: `std::ops::Range<i64>`\
    \ doesn't implement `std::fmt::Display`\n --> /tmp/tmppobm2u6v.rs:7:33\n  |\n\
    7 |     String::from(format!(\"{} \", 0i64..n).trim())\n  |                  \
    \               ^^^^^^^ `std::ops::Range<i64>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<i64>`\n  = note: in format strings you may be able to use `{:?}`\
    \ (or {:#?} for pretty-print) instead\n  = note: this error originates in the\
    \ macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut seq = String::new();\n    seq.push_str(\"\"\
    );\n    for s in range(n).rev() {\n        let mut s = String::from(\"0\");\n\
    \        for _ in 0.s..s {\n            seq.push(i);\n        }\n    }\n    seq\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpleb1q1sa.rs:9:14\n\
    \  |\n9 |     for s in range(n).rev() {\n  |              ^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this function\n  |\n1 | use std::slice::range;\n\
    \  |\n\nerror[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpleb1q1sa.rs:12:22\n\
    \   |\n12 |             seq.push(i);\n   |                      ^ help: a local\
    \ variable with a similar name exists: `n`\n\nerror[E0610]: `{integer}` is a primitive\
    \ type and therefore doesn't have fields\n  --> /tmp/tmpleb1q1sa.rs:11:20\n  \
    \ |\n11 |         for _ in 0.s..s {\n   |                    ^\n\nerror[E0277]:\
    \ the trait bound `String: Step` is not satisfied\n  --> /tmp/tmpleb1q1sa.rs:11:18\n\
    \   |\n11 |         for _ in 0.s..s {\n   |                  ^^^^^^ the trait\
    \ `Step` is not implemented for `String`\n   |\n   = help: the following other\
    \ types implement trait `Step`:\n             char\n             i128\n      \
    \       i16\n             i32\n             i64\n             i8\n           \
    \  isize\n             u128\n           and 5 others\n   = note: required because\
    \ of the requirements on the impl of `Iterator` for `std::ops::Range<String>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `std::ops::Range<String>`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0425, E0610.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmprgqvxi0f.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for _ in 0..n {\n\
    \        result.push_str(\" \");\n    }\n    let mut last = result.clone();\n\
    \    for _i in 0..n {\n        if _i > 0 {\n            result.push_str(&\" \"\
    );\n        }\n        result.push_str(last);\n        last = last.clone();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv75bit98.rs:16:25\n   |\n\
    16 |         result.push_str(last);\n   |                         ^^^^\n   | \
    \                        |\n   |                         expected `&str`, found\
    \ struct `String`\n   |                         help: consider borrowing here:\
    \ `&last`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", String::new()).unwrap()\n        +\
    \ String::from(format!(\"{:?} \", 0)).unwrap()\n        + String::from(format!(\"\
    {:?} \", n)).unwrap()\n        + String::from(\"...\")\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpc_bfvzoi.rs:7:35\n  |\n7 |     format!(\"{} \",\
    \ String::new()).unwrap()\n  |                                   ^^^^^^ method\
    \ not found in `String`\n\nerror[E0599]: no method named `unwrap` found for struct\
    \ `String` in the current scope\n --> /tmp/tmpc_bfvzoi.rs:8:45\n  |\n8 |     \
    \    + String::from(format!(\"{:?} \", 0)).unwrap()\n  |                     \
    \                        ^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `unwrap` found for struct `String` in the current scope\n -->\
    \ /tmp/tmpc_bfvzoi.rs:9:45\n  |\n9 |         + String::from(format!(\"{:?} \"\
    , n)).unwrap()\n  |                                             ^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpqqf0u02y.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n).map(|i| format!(\"{}\", i)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmp0xfp_uu6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut builder = String::from(\"0\");\n    for _ in\
    \ 0..n {\n        builder.push_front(\" \");\n    }\n    builder.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_front` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpjoemk2jv.rs:9:17\n  |\n9 |         builder.push_front(\"\
    \ \");\n  |                 ^^^^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for _i in 0..n\
    \ {\n        s += String::from(\" \");\n        s += String::from(\"0123456789\"\
    );\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiqrtopd9.rs:9:14\n  |\n9 |\
    \         s += String::from(\" \");\n  |              ^^^^^^^^^^^^^^^^^\n  | \
    \             |\n  |              expected `&str`, found struct `String`\n  |\
    \              help: consider borrowing here: `&String::from(\" \")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiqrtopd9.rs:10:14\n   |\n10 |         s += String::from(\"\
    0123456789\");\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |           \
    \   |\n   |              expected `&str`, found struct `String`\n   |        \
    \      help: consider borrowing here: `&String::from(\"0123456789\")`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", String::new().into_iter().collect())\n\
    \        .into_string()\n        .unwrap()\n        .split(' ')\n        .collect::<Vec<_>>()\n\
    \        .enumerate()\n        .map(|(i, s)| s.to_string())\n        .filter_map(|i|\
    \ match i {\n            Some(0) => None,\n            Some(index) => Some(index\
    \ as isize + 1).to_string(),\n            None => None,\n        })\n        .collect::<Vec<_>>()\n\
    \        .collect::<String>() + \" \"\n        + format!(\"{} \", String::new().into_iter().collect())\n\
    \        .into_string()\n        .unwrap()\n        .split(' ')\n        .collect::<Vec<_>>()\n\
    \        .enumerate()\n        .map(|(i, s)| s.to_string())\n        .filter_map(|i|\
    \ match i {\n            Some(0) => None,\n            Some(index) => Some(index\
    \ as isize + 2).to_string(),\n            None => None,\n        })\n        .collect::<Vec<_>>()\n\
    \        .collect::<String>()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpxkw6enpj.rs:7:34\n    |\n7 \
    \  |       format!(\"{} \", String::new().into_iter().collect())\n    |      \
    \                              ^^^^^^^^^\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `String: IntoIterator`\n            `&String: Iterator`\n   \
    \         which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Sized`\n            which is required by `str: IntoIterator`\n\
    \            `str: Iterator`\n            which is required by `str: IntoIterator`\n\
    \            `&str: Iterator`\n            which is required by `&str: IntoIterator`\n\
    \            `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror[E0599]: `Option<isize>` doesn't implement `std::fmt::Display`\n\
    \   --> /tmp/tmpxkw6enpj.rs:16:53\n    |\n16  |               Some(index) => Some(index\
    \ as isize + 1).to_string(),\n    |                                          \
    \             ^^^^^^^^^ `Option<isize>` cannot be formatted with the default formatter\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<isize>: std::fmt::Display`\n            which is required by `Option<isize>:\
    \ ToString`\n\nerror[E0599]: the method `into_iter` exists for struct `String`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpxkw6enpj.rs:21:40\n\
    \    |\n21  |           + format!(\"{} \", String::new().into_iter().collect())\n\
    \    |                                          ^^^^^^^^^\n    |\n    = note:\
    \ the following trait bounds were not satisfied:\n            `String: Iterator`\n\
    \            which is required by `String: IntoIterator`\n            `&String:\
    \ Iterator`\n            which is required by `&String: IntoIterator`\n      \
    \      `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0 \");\n    for i in 0..n\
    \ {\n        s += String::from(\" \").to_string();\n        s += String::from(i\
    \ as char).to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9r4rsygq.rs:9:14\n  |\n9 |\
    \         s += String::from(\" \").to_string();\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from(\" \").to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9r4rsygq.rs:10:14\n   |\n10 |\
    \         s += String::from(i as char).to_string();\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&String::from(i as char).to_string()`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmp9r4rsygq.rs:10:27\n\
    \   |\n10 |         s += String::from(i as char).to_string();\n   |          \
    \                 ^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead\
    \ (via a `u32`)\n  --> /tmp/tmp9r4rsygq.rs:10:27\n   |\n10 |         s += String::from(i\
    \ as char).to_string();\n   |                           ^^^^^^^^^\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    \"0 1 2 3 4 5\".to_string().split_whitespace().collect::<Vec<_>>().join(\"\
    \ \")\n        .to_string()\n        .trim()\n        .parse::<isize>()\n    \
    \    .unwrap()\n        .to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpl6cs64f1.rs:11:10

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpjl463dl_.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptylymo4w.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpqqf0u02y.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} {:?}\", n, n)\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 0\"`,\n right: `\"0\"`', /tmp/tmp7dc9y1dc.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", n).to_string()).to_string()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpbuwcli7l.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpf4wa9s2d.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", range(0)))\n        .to_string()\n\
    \        .split_whitespace()\n        .collect::<Vec<_>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmpgdmw5xbr.rs:7:33\n\
    \  |\n7 |     String::from(format!(\"{} \", range(0)))\n  |                  \
    \               ^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::from(\"0\");\n    for _ in\
    \ 0..n {\n        result.push_str(\" \".to_string());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdah44qzs.rs:9:25\n  |\n9 |\
    \         result.push_str(\" \".to_string());\n  |                         ^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected `&str`, found\
    \ struct `String`\n  |                         help: consider borrowing here:\
    \ `&\" \".to_string()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", format!(\"{}\", 0).chars().enumerate().take(n\
    \ + 1).collect())\n}\n\nfn main() {\n    let candidate = string_sequence;\n  \
    \  assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw_z82mze.rs:7:61\n  |\n7 |\
    \     format!(\"{}\", format!(\"{}\", 0).chars().enumerate().take(n + 1).collect())\n\
    \  |                                                             ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |     format!(\"{}\", format!(\"\
    {}\", 0).chars().enumerate().take((n + 1).try_into().unwrap()).collect())\n  |\
    \                                                             +     +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} {}\", 0..(n + 1))\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: 2 positional arguments in format string, but there is 1 argument\n\
    \ --> /tmp/tmpfgyf25i6.rs:7:14\n  |\n7 |     format!(\"{} {}\", 0..(n + 1))\n\
    \  |              ^^ ^^   ----------\n\nerror[E0277]: `std::ops::Range<isize>`\
    \ doesn't implement `std::fmt::Display`\n --> /tmp/tmpfgyf25i6.rs:7:22\n  |\n\
    7 |     format!(\"{} {}\", 0..(n + 1))\n  |                      ^^^^^^^^^^ `std::ops::Range<isize>`\
    \ cannot be formatted with the default formatter\n  |\n  = help: the trait `std::fmt::Display`\
    \ is not implemented for `std::ops::Range<isize>`\n  = note: in format strings\
    \ you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note:\
    \ this error originates in the macro `$crate::__export::format_args` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmprgqvxi0f.rs:7:26\n     |\n7 \
    \   |     format!(\"{}\", (0..n).collect::<String>())\n     |                \
    \          ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    match n {\n        0 => String::from(\"0\"),\n     \
    \   _ => String::from(\n            \"{} \".repeat(n).format(String::from(\"{}\"\
    )).to_string(),\n        ),\n    }\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprc1o86v1.rs:10:26\n   |\n\
    10 |             \"{} \".repeat(n).format(String::from(\"{}\")).to_string(),\n\
    \   |                          ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |             \"{} \".repeat(n.try_into().unwrap()).format(String::from(\"\
    {}\")).to_string(),\n   |                           ++++++++++++++++++++\n\nerror[E0599]:\
    \ no method named `format` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmprc1o86v1.rs:10:29\n   |\n10 |             \"{} \".repeat(n).format(String::from(\"\
    {}\")).to_string(),\n   |                             ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for _ in 0..n\
    \ {\n        s += \" \";\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0   \"`,\n right: `\"0 1 2 3\"`', /tmp/tmp6awmo0vk.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"\");\n    for _i in 0..n\
    \ {\n        s += String::from(\" \");\n        s += String::from(\"0\".to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfrnziqvt.rs:9:14\n  |\n9 |\
    \         s += String::from(\" \");\n  |              ^^^^^^^^^^^^^^^^^\n  | \
    \             |\n  |              expected `&str`, found struct `String`\n  |\
    \              help: consider borrowing here: `&String::from(\" \")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfrnziqvt.rs:10:14\n   |\n10 |         s += String::from(\"\
    0\".to_string());\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |     \
    \         |\n   |              expected `&str`, found struct `String`\n   |  \
    \            help: consider borrowing here: `&String::from(\"0\".to_string())`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptylymo4w.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    string_from_iterate(String::from(\"0\"), n)\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_from_iterate` in this scope\n\
    \ --> /tmp/tmpzhcoqy4b.rs:7:5\n  |\n7 |     string_from_iterate(String::from(\"\
    0\"), n)\n  |     ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0\") + \" \"\n        + String::from_iter(\n\
    \            (0..n).map(|i| String::from(format!(\"{}\", i)))\n              \
    \  .collect::<Vec<_>>()\n        )\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n --> /tmp/tmpgkn2culs.rs:8:19\n  |\n8\
    \ |         + String::from_iter(\n  |                   ^^^^^^^^^ function or\
    \ associated item not found in `String`\n  |\n  = help: items from traits can\
    \ only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n  |\n1 | use std::iter::FromIterator;\n\
    \  |\nhelp: there is an associated function with a similar name\n  |\n8 |    \
    \     + String::from_utf8(\n  |                   ~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    let mut i = 0;\n\
    \    while i < n {\n        result.push_str(&format!(\"{}\", i));\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpwqnsd_u4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..=n).collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpbe5nw5g0.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).collect::<String>()\n\
    \  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: `String` is not an iterator\n\
    \   --> /tmp/tmpbe5nw5g0.rs:7:26\n    |\n7   |       format!(\"{}\", 0..=n).collect::<String>()\n\
    \    |                            ^^^^^^^ `String` is not an iterator; try calling\
    \ `.chars()` or `.bytes()`\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `&mut String: Iterator`\n            `str: Iterator`\n            which is\
    \ required by `&mut str: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", range(n).join(\" \"))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmp5t7q5mne.rs:7:20\n\
    \  |\n7 |     format!(\"{} \", range(n).join(\" \"))\n  |                    ^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this function\n  |\n\
    1 | use std::slice::range;\n  |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    match n.cmp(&n) {\n        -1 => String::from(\"\"),\n\
    \        1 => String::from(\"0\"),\n        _ => String::from(\" \").join(1..n).to_owned(),\n\
    \    }\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9kwpq0tp.rs:8:9\n  |\n7 |\
    \     match n.cmp(&n) {\n  |           --------- this expression has type `std::cmp::Ordering`\n\
    8 |         -1 => String::from(\"\"),\n  |         ^^ expected enum `std::cmp::Ordering`,\
    \ found integer\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9kwpq0tp.rs:9:9\n\
    \  |\n7 |     match n.cmp(&n) {\n  |           --------- this expression has type\
    \ `std::cmp::Ordering`\n8 |         -1 => String::from(\"\"),\n9 |         1 =>\
    \ String::from(\"0\"),\n  |         ^ expected enum `std::cmp::Ordering`, found\
    \ integer\n\nerror[E0599]: no method named `join` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp9kwpq0tp.rs:10:32\n   |\n10 |         _ =>\
    \ String::from(\" \").join(1..n).to_owned(),\n   |                           \
    \     ^^^^ method not found in `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_utf8(\n        &[\n            b'0',\n\
    \            b'1',\n            b'2',\n            b'3',\n            b'4',\n\
    \            b'5',\n            b'6',\n            b'7',\n            b'8',\n\
    \            b'9',\n            b'a',\n            b'b',\n            b'c',\n\
    \            b'd',\n            b'e',\n            b'f',\n            b'g',\n\
    \            b'h',\n            b'i',\n            b'j',\n            b'k',\n\
    \            b'l',\n            b'm',\n            b'n',\n            b'o',\n\
    \            b'p',\n            b'q',\n            b'r',\n            b's',\n\
    \            b't',\n            b'u',\n            b'v',\n            b'w',\n\
    \            b'x',\n            b'y',\n            b'z',\n            b'A',\n\
    \            b'B',\n            b'C',\n            b'D',\n            b'E',\n\
    \            b'F',\n            b'G',\n            b'H',\n            b'I',\n\
    \            b'J',\n            b'K',\n            b'L',\n            b'M',\n\
    \            b'N',\n            b'O',\n            b'P',\n            b'Q',\n\
    \            b'R',\n            b'S',\n            b'T',\n            b'U',\n\
    \            b'V',\n            b'W',\n            b'X',\n            b'Y',\n\
    \            b'Z',\n            b'0',\n            b'1',\n            b'2',\n\
    \            b'3',\n            b'4',\n            b'5',\n            b'6',\n\
    \            b'7',\n            b'8',\n            b'9',\n            b'a',\n\
    \            b'b',\n            b'c',\n            b'd',\n            b'e',\n\
    \            b'f',\n            b'g',\n            b'h',\n            b'i',\n\
    \            b'j',\n            b'k',\n            b'l',\n            b'm',\n\
    \            b'n',\n            b'o',\n            b'p',\n            b'q',\n\
    \            b'r',\n            b's',\n            b't',\n            b'u',\n\
    \            b'v',\n            b'w',\n            b'x',\n            b'y',\n\
    \            b'z',\n            b'A',\n            b'B',\n            b'C',\n\
    \            b'D',\n            b'E',\n            b'F',\n            b'G',\n\
    \            b'H',\n            b'I',\n            b'J',\n            b'K',\n\
    \            b'L',\n            b'M',\n            b'N',\n\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n   --> /tmp/tmp_iihapy7.rs:8:10\n\
    \    |\n6   | fn string_sequence(n: isize) -> String {\n    |                \
    \                        - closing delimiter possibly meant for this\n7   |  \
    \   String::from_utf8(\n8   |         &[\n    |          ^ unclosed delimiter\n\
    ...\n122 | }\n    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmp_iihapy7.rs:8:9\n    |\n8   | /         &[\n9   | |  \
    \           b'0',\n10  | |             b'1',\n11  | |             b'2',\n... \
    \  |\n121 | |\n122 | | }\n    | |_^ expected struct `Vec`, found `&[u8; 112]`\n\
    \    |\n    = note: expected struct `Vec<u8>`\n            found reference `&[u8;\
    \ 112]`\nhelp: try using a conversion method\n    |\n8   ~         (&[\n9   |\
    \             b'0',\n10  |             b'1',\n11  |             b'2',\n12  | \
    \            b'3',\n13  |             b'4',\n  ...\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmp_iihapy7.rs:7:5\n    |\n6   |   fn string_sequence(n:\
    \ isize) -> String {\n    |                                   ------ expected\
    \ `String` because of return type\n7   | /     String::from_utf8(\n8   | |   \
    \      &[\n9   | |             b'0',\n10  | |             b'1',\n...   |\n121\
    \ | |\n122 | | }\n    | |_^ expected struct `String`, found enum `Result`\n  \
    \  |\n    = note: expected struct `String`\n                 found enum `Result<String,\
    \ FromUtf8Error>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for i in 0..n\
    \ {\n        s += ' ' + i::to_string(10);\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `i`\n\
    \ --> /tmp/tmpxnew7dd0.rs:9:20\n  |\n9 |         s += ' ' + i::to_string(10);\n\
    \  |                    ^ use of undeclared crate or module `i`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmptylymo4w.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"0 {} \", n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 0 \"`,\n right: `\"0\"`', /tmp/tmploes52f6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::from(\"0\");\n    for _ in\
    \ 1..n {\n        result.push(' ');\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0  \"`,\n right: `\"0 1 2 3\"`', /tmp/tmpto6wezlc.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::from(\"0 \");\n    for i in\
    \ 1..n {\n        result.append(&i.to_string());\n        result.append(' ');\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpglo9xww2.rs:9:16\n  |\n9 |         result.append(&i.to_string());\n\
    \  |                ^^^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `append` found for struct `String` in the current scope\n  --> /tmp/tmpglo9xww2.rs:10:16\n\
    \   |\n10 |         result.append(' ');\n   |                ^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"\");\n    for i in 0..n {\n\
    \        s += \" \".to_string();\n        s += String::from(*i).to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxz7gl7l5.rs:9:14\n  |\n9 |\
    \         s += \" \".to_string();\n  |              ^^^^^^^^^^^^^^^\n  |     \
    \         |\n  |              expected `&str`, found struct `String`\n  |    \
    \          help: consider borrowing here: `&\" \".to_string()`\n\nerror[E0614]:\
    \ type `isize` cannot be dereferenced\n  --> /tmp/tmpxz7gl7l5.rs:10:27\n   |\n\
    10 |         s += String::from(*i).to_string();\n   |                        \
    \   ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxz7gl7l5.rs:10:14\n  \
    \ |\n10 |         s += String::from(*i).to_string();\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&String::from(*i).to_string()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", n))\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpxpeji670.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format_args!(\"{} \", 0..=n).collect())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpv_dseoid.rs:7:38\n  |\n7 |     String::from(format_args!(\"{} \"\
    , 0..=n).collect())\n  |                                      ^^^^^ `RangeInclusive<isize>`\
    \ cannot be formatted with the default formatter\n  |\n  = help: the trait `std::fmt::Display`\
    \ is not implemented for `RangeInclusive<isize>`\n  = note: in format strings\
    \ you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note:\
    \ this error originates in the macro `format_args` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0599]: the method `collect` exists\
    \ for struct `Arguments<'_>`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmpv_dseoid.rs:7:45\n    |\n7   |       String::from(format_args!(\"{}\
    \ \", 0..=n).collect())\n    |                                               ^^^^^^^\
    \ method cannot be called on `Arguments<'_>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Arguments<'_>: Iterator`\n            which is required by `&mut Arguments<'_>:\
    \ Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\n        n.to_string()\n            .to_string()\n\
    \            .chars()\n            .take(n)\n            .collect::<String>()\n\
    \            .join(\" \")\n    )\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1x0pc_f8.rs:11:19\n   |\n\
    11 |             .take(n)\n   |                   ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |             .take(n.try_into().unwrap())\n   |\
    \                    ++++++++++++++++++++\n\nerror[E0599]: no method named `join`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp1x0pc_f8.rs:13:14\n\
    \   |\n13 |             .join(\" \")\n   |              ^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", (0..n).collect::<String>()))\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmp51xt8uep.rs:7:39\n     |\n7 \
    \   |     String::from(format!(\"{}\", (0..n).collect::<String>()))\n     |  \
    \                                     ^^^^^^^ value of type `String` cannot be\
    \ built from `std::iter::Iterator<Item=isize>`\n     |\n     = help: the trait\
    \ `FromIterator<isize>` is not implemented for `String`\n     = help: the following\
    \ other types implement trait `FromIterator<A>`:\n               <String as FromIterator<&'a\
    \ char>>\n               <String as FromIterator<&'a str>>\n               <String\
    \ as FromIterator<Box<str>>>\n               <String as FromIterator<Cow<'a, str>>>\n\
    \               <String as FromIterator<String>>\n               <String as FromIterator<char>>\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975690
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{:0>3} \", n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"000 \"`,\n right: `\"0\"`', /tmp/tmpcqhkmv24.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).unwrap_or_else(String::new)\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmppcuw63xo.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).unwrap_or_else(String::new)\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `unwrap_or_else`\
    \ found for struct `String` in the current scope\n --> /tmp/tmppcuw63xo.rs:7:25\n\
    \  |\n7 |     format!(\"{}\", 0..n).unwrap_or_else(String::new)\n  |         \
    \                ^^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for i in 0..n\
    \ {\n        s += String::from((i * 10).to_string());\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpax1c9r8m.rs:9:14\n  |\n9 |\
    \         s += String::from((i * 10).to_string());\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |              |\n  |              expected `&str`, found struct `String`\n\
    \  |              help: consider borrowing here: `&String::from((i * 10).to_string())`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        String::from(\"0\")\n    } else\
    \ {\n        let mut s = String::from(\"0 \");\n        for _i in 0..n {\n   \
    \         s.push_str(&format!(\"{} \", _i + 1));\n        }\n        s\n    }\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 3 \"`,\n right: `\"0 1 2 3\"`', /tmp/tmp8hi4t44i.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{:?}\", range(n as usize))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmplalf3rhg.rs:7:21\n\
    \  |\n7 |     format!(\"{:?}\", range(n as usize))\n  |                     ^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this function\n  |\n\
    1 | use std::slice::range;\n  |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", String::from(0)).to_string().split_whitespace().collect::<Vec<_>>()\n\
    \        .into_iter()\n        .map(|n| format!(\"{}\", n + 1))\n        .collect::<Vec<_>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<{integer}>` is not satisfied\n\
    \ --> /tmp/tmpust0clvl.rs:7:19\n  |\n7 |     format!(\"{}\", String::from(0)).to_string().split_whitespace().collect::<Vec<_>>()\n\
    \  |                   ^^^^^^^^^^^^ the trait `From<{integer}>` is not implemented\
    \ for `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <String as From<&String>>\n            <String as From<&mut str>>\n\
    \            <String as From<&str>>\n            <String as From<Box<str>>>\n\
    \            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\
    \nerror[E0369]: cannot add `{integer}` to `&str`\n --> /tmp/tmpust0clvl.rs:9:34\n\
    \  |\n9 |         .map(|n| format!(\"{}\", n + 1))\n  |                      \
    \          - ^ - {integer}\n  |                                |\n  |        \
    \                        &str\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", String::from(\"0\") + &[1..n])\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd77_qefa.rs:7:40\n  |\n7 |\
    \     format!(\"{} \", String::from(\"0\") + &[1..n])\n  |                   \
    \                     ^^^^^^^ expected `str`, found array of 1 element\n  |\n\
    \  = note: expected reference `&str`\n             found reference `&[std::ops::Range<isize>;\
    \ 1]`\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n..).trim())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeFrom<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpi8zxttt7.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", n..).trim())\n\
    \  |                                 ^^^ `RangeFrom<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeFrom<isize>`\n  = note: in format strings you may\
    \ be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_str(&format!(\"0 1 2 3 4 5\", n))\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error: argument never used\n --> /tmp/tmpgrpuko5e.rs:7:46\n  |\n7 |   \
    \  String::from_str(&format!(\"0 1 2 3 4 5\", n))\n  |                       \
    \        -------------  ^ argument never used\n  |                           \
    \    |\n  |                               formatting specifier missing\n\nerror[E0599]:\
    \ no function or associated item named `from_str` found for struct `String` in\
    \ the current scope\n --> /tmp/tmpgrpuko5e.rs:7:13\n  |\n7 |     String::from_str(&format!(\"\
    0 1 2 3 4 5\", n))\n  |             ^^^^^^^^ function or associated item not found\
    \ in `String`\n  |\n  = help: items from traits can only be used if the trait\
    \ is in scope\nhelp: the following trait is implemented but not in scope; perhaps\
    \ add a `use` for it:\n  |\n1 | use std::str::FromStr;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmp_vudez69.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp4h7dy4_4.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n)\n  |     \
    \               ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        error(\"string_sequence expects\
    \ positive number\");\n    }\n    format!(\"{} \", vec![n..=n].as_slice())\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `error` in this scope\n --> /tmp/tmpbel5yyjq.rs:8:9\n\
    \  |\n8 |         error(\"string_sequence expects positive number\");\n  |   \
    \      ^^^^^ not found in this scope\n\nerror[E0277]: `[RangeInclusive<isize>]`\
    \ doesn't implement `std::fmt::Display`\n  --> /tmp/tmpbel5yyjq.rs:10:20\n   |\n\
    10 |     format!(\"{} \", vec![n..=n].as_slice())\n   |                    ^^^^^^^^^^^^^^^^^^^^^^\
    \ `[RangeInclusive<isize>]` cannot be formatted with the default formatter\n \
    \  |\n   = help: the trait `std::fmt::Display` is not implemented for `[RangeInclusive<isize>]`\n\
    \   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print)\
    \ instead\n   = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        String::from(\"0\".to_string())\n\
    \    } else {\n        let mut s = String::from(\"0 \");\n        for _ in 0..n\
    \ {\n            s.push(' ');\n        }\n        s\n    }\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0    \"`,\n right: `\"0 1 2 3\"`', /tmp/tmp9hj830tl.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmp_vudez69.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `[isize]: Join<_>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for _ in 0..n {\n\
    \        result.append(\" \")\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpqvwioqtq.rs:9:16\n  |\n9 |         result.append(\"\
    \ \")\n  |                ^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for i in 0..n\
    \ {\n        s += \" \" + std::to_string(i);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_string` in crate `std`\n --> /tmp/tmpa8clellg.rs:9:25\n\
    \  |\n9 |         s += \" \" + std::to_string(i);\n  |                       \
    \  ^^^^^^^^^ not found in `std`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", n))\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpxpeji670.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        return String::from(\"0\");\n \
    \   }\n    let mut string = String::from(\"\");\n    for _ in 0..n {\n       \
    \ string.push_str(\" \");\n    }\n    string.push_str(n);\n    string\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgfdop1bh.rs:14:21\n   |\n\
    14 |     string.push_str(n);\n   |                     ^ expected `&str`, found\
    \ `isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut str = \"\".to_string();\n    for _ in 0..n {\n\
    \        str += String::from(\"0\");\n    }\n    String::from(str)\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoy60_dvc.rs:9:16\n  |\n9 |\
    \         str += String::from(\"0\");\n  |                ^^^^^^^^^^^^^^^^^\n\
    \  |                |\n  |                expected `&str`, found struct `String`\n\
    \  |                help: consider borrowing here: `&String::from(\"0\")`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", RangeInclusive(0, n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function, tuple struct or tuple variant `RangeInclusive`\
    \ in this scope\n --> /tmp/tmpene4bk5d.rs:7:20\n  |\n7 |     format!(\"{} \",\
    \ RangeInclusive(0, n))\n  |                    ^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    use std::ascii::AsciiExt;\n    use std::str::FromStr;\n\
    \n    let mut s = String::new();\n    for i in 0..n {\n        s += String::from(format!(\"\
    {} \", i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::ascii::AsciiExt`\n --> /tmp/tmpwtabpcgm.rs:7:9\n\
    \  |\n7 |     use std::ascii::AsciiExt;\n  |         ^^^^^^^^^^^^^^^^^^^^\n  |\n\
    \  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import:\
    \ `std::str::FromStr`\n --> /tmp/tmpwtabpcgm.rs:8:9\n  |\n8 |     use std::str::FromStr;\n\
    \  |         ^^^^^^^^^^^^^^^^^\n\nwarning: use of deprecated trait `std::ascii::AsciiExt`:\
    \ use inherent methods instead\n --> /tmp/tmpwtabpcgm.rs:7:21\n  |\n7 |     use\
    \ std::ascii::AsciiExt;\n  |                     ^^^^^^^^\n  |\n  = note: `#[warn(deprecated)]`\
    \ on by default\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwtabpcgm.rs:12:14\n\
    \   |\n12 |         s += String::from(format!(\"{} \", i));\n   |            \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&String::from(format!(\"{} \", i))`\n\nerror: aborting due to previous error;\
    \ 3 warnings emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\n        format!(\"{}\", vec![\n     \
    \       0 .. n\n                .to_string()\n                .chars()\n     \
    \           .map(|c| c.to_string())\n                .collect::<Vec<_>>()\n  \
    \      ])\n    )\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvlu6cgoc.rs:9:18\n   |\n\
    9  |               0 .. n\n   |  __________________^\n10 | |                 .to_string()\n\
    11 | |                 .chars()\n12 | |                 .map(|c| c.to_string())\n\
    13 | |                 .collect::<Vec<_>>()\n   | |____________________________________^\
    \ expected integer, found struct `Vec`\n   |\n   = note: expected type `{integer}`\n\
    \            found struct `Vec<String>`\n\nerror[E0277]: `Vec<std::ops::Range<{integer}>>`\
    \ doesn't implement `std::fmt::Display`\n  --> /tmp/tmpvlu6cgoc.rs:8:23\n   |\n\
    8  |           format!(\"{}\", vec![\n   |  _______________________^\n9  | | \
    \            0 .. n\n10 | |                 .to_string()\n11 | |             \
    \    .chars()\n12 | |                 .map(|c| c.to_string())\n13 | |        \
    \         .collect::<Vec<_>>()\n14 | |         ])\n   | |_________^ `Vec<std::ops::Range<{integer}>>`\
    \ cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display`\
    \ is not implemented for `Vec<std::ops::Range<{integer}>>`\n   = note: in format\
    \ strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n\
    \   = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n)\n        .map(|x| String::from(format!(\"{}\"\
    , x)))\n        .collect()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpryzw9_xm.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpe5546e4x.rs:7:19\n\
    \  |\n7 |     format!(\"{}\", (0..n).collect())\n  |                   ^^^^^^^^^^^^^^^^\
    \ cannot infer type for type parameter `T` declared on the associated function\
    \ `new_display`\n  |\n  = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider\
    \ specifying the type argument in the method call\n  |\n7 |     format!(\"{}\"\
    , (0..n).collect::<B>())\n  |                                 +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for _ in 0..n {\n  \
    \      s.push('0');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpfdpufl3p.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        empty_sequence()\n    } else {\n\
    \        format!(\"{} {}\", string_sequence1(0), string_sequence1(n - 1))\n  \
    \  }\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `empty_sequence` in this scope\n -->\
    \ /tmp/tmpew3j4brr.rs:8:9\n  |\n8 |         empty_sequence()\n  |         ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `string_sequence1`\
    \ in this scope\n  --> /tmp/tmpew3j4brr.rs:10:26\n   |\n10 |         format!(\"\
    {} {}\", string_sequence1(0), string_sequence1(n - 1))\n   |                 \
    \         ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `string_sequence1` in this scope\n  --> /tmp/tmpew3j4brr.rs:10:47\n\
    \   |\n10 |         format!(\"{} {}\", string_sequence1(0), string_sequence1(n\
    \ - 1))\n   |                                               ^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n > 1 {\n        string_sequence(n - 1).to_string()\n\
    \    } else {\n        String::from(\"0\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpzk_hj26n.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from_str(\n        format!(\"{}\", (0..n).collect::<String>()),\n\
    \    )\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_str` found for\
    \ struct `String` in the current scope\n --> /tmp/tmp9lr0p4er.rs:7:13\n  |\n7\
    \ |     String::from_str(\n  |             ^^^^^^^^ function or associated item\
    \ not found in `String`\n  |\n  = help: items from traits can only be used if\
    \ the trait is in scope\nhelp: the following trait is implemented but not in scope;\
    \ perhaps add a `use` for it:\n  |\n1 | use std::str::FromStr;\n  |\n\nerror[E0277]:\
    \ a value of type `String` cannot be built from an iterator over elements of type\
    \ `isize`\n    --> /tmp/tmp9lr0p4er.rs:8:30\n     |\n8    |         format!(\"\
    {}\", (0..n).collect::<String>()),\n     |                              ^^^^^^^\
    \ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 1 2 3 4 5\").split_whitespace().collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 3 4 5\"`,\n right: `\"0\"`', /tmp/tmp1iy3ydac.rs:12:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"0 {} \", n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 0 \"`,\n right: `\"0\"`', /tmp/tmpumaq4ko3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n > 0 {\n        let mut s = String::new();\n   \
    \     for ii in 0..n-1 {\n            s.push_str(&format!(\"{} \", ii));\n   \
    \     }\n        s\n    } else {\n        \"0\"\n    }\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp79aa8urw.rs:14:9\n   |\n\
    6  | fn string_sequence(n: isize) -> String {\n   |                          \
    \       ------ expected `String` because of return type\n...\n14 |         \"\
    0\"\n   |         ^^^- help: try using a conversion method: `.to_string()`\n \
    \  |         |\n   |         expected struct `String`, found `&str`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    use std::fmt;\n    use std::iter::from_range;\n    from_range(0..n)\n\
    \        .into_iter()\n        .map(|x| format!(\"{}\", x).to_string())\n    \
    \    .collect()\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0432]: unresolved import `std::iter::from_range`\n --> /tmp/tmpko41_1ia.rs:8:9\n\
    \  |\n8 |     use std::iter::from_range;\n  |         ^^^^^^^^^^^^^^^^^^^^^ no\
    \ `from_range` in `iter`\n\nwarning: unused import: `std::fmt`\n --> /tmp/tmpko41_1ia.rs:7:9\n\
    \  |\n7 |     use std::fmt;\n  |         ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror: aborting due to previous error; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0432`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for _ in 0..n {\n  \
    \      s += String::from(\" \");\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr3xm3usb.rs:9:14\n  |\n9 |\
    \         s += String::from(\" \");\n  |              ^^^^^^^^^^^^^^^^^\n  | \
    \             |\n  |              expected `&str`, found struct `String`\n  |\
    \              help: consider borrowing here: `&String::from(\" \")`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for i in 0..n\
    \ {\n        s += \" \".to_string();\n        s += i;\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp35cyauvg.rs:9:14\n  |\n9 |\
    \         s += \" \".to_string();\n  |              ^^^^^^^^^^^^^^^\n  |     \
    \         |\n  |              expected `&str`, found struct `String`\n  |    \
    \          help: consider borrowing here: `&\" \".to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp35cyauvg.rs:10:14\n   |\n10 |         s += i;\n\
    \   |              ^ expected `&str`, found `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n <= 0 {\n        String::from(\"0\")\n    } else\
    \ {\n        let mut buf = String::with_capacity(n * 3);\n        let mut digits\
    \ = 0..=n;\n        for d in digits {\n            buf.push_str(&format_arg(d));\n\
    \        }\n        buf\n    }\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `format_arg` in this scope\n  --> /tmp/tmp9721u5nf.rs:13:27\n\
    \   |\n13 |             buf.push_str(&format_arg(d));\n   |                  \
    \         ^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9721u5nf.rs:10:45\n   |\n10 |         let mut buf = String::with_capacity(n\
    \ * 3);\n   |                                             ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |         let mut buf = String::with_capacity((n\
    \ * 3).try_into().unwrap());\n   |                                           \
    \  +     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", numbers_as_str(n))\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numbers_as_str` in this scope\n -->\
    \ /tmp/tmpwjwly8no.rs:7:19\n  |\n7 |     format!(\"{}\", numbers_as_str(n))\n\
    \  |                   ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    string_seq_impl(String::new(), n)\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_seq_impl` in this scope\n -->\
    \ /tmp/tmptc14twi9.rs:7:5\n  |\n7 |     string_seq_impl(String::new(), n)\n  |\
    \     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmprqz6b5p5.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut str: String = String::new();\n    for (i, &v)\
    \ in n.iter().enumerate() {\n        if i == 0 {\n            str += &v;\n   \
    \     } else {\n            str += &format!(\"{} \", v);\n        }\n    }\n \
    \   str\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpveijtwnl.rs:8:22\n  |\n8 |     for (i, &v) in n.iter().enumerate()\
    \ {\n  |                      ^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n -->\
    \ /tmp/tmpveijtwnl.rs:8:14\n  |\n8 |     for (i, &v) in n.iter().enumerate() {\n\
    \  |              ^ doesn't have a size known at compile-time\n  |\n  = help:\
    \ the trait `Sized` is not implemented for `str`\n  = note: all local variables\
    \ must have a statically known size\n  = help: unsized locals are gated as an\
    \ unstable feature\n\nerror[E0277]: the size for values of type `str` cannot be\
    \ known at compilation time\n   --> /tmp/tmpveijtwnl.rs:12:36\n    |\n12  |  \
    \           str += &format!(\"{} \", v);\n    |                              \
    \      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `ArgumentV1::<'a>::new_display`\n\
    \    = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\n        format!(\"{}\", 0..n).into_iter().collect::<Vec<_>>().join(\"\
    \ \")\n    )\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpzt1dlgty.rs:8:23\n  |\n8 |         format!(\"{}\", 0..n).into_iter().collect::<Vec<_>>().join(\"\
    \ \")\n  |                       ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `into_iter`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmpzt1dlgty.rs:8:29\n    |\n8   |           format!(\"{}\", 0..n).into_iter().collect::<Vec<_>>().join(\"\
    \ \")\n    |                               ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Sized`\n            which is required by `str: IntoIterator`\n\
    \            `str: Iterator`\n            which is required by `str: IntoIterator`\n\
    \            `&str: Iterator`\n            which is required by `&str: IntoIterator`\n\
    \            `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", &(0..n).collect::<String>())\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n    --> /tmp/tmpocg0y8pd.rs:7:28\n     |\n7 \
    \   |     format!(\"{} \", &(0..n).collect::<String>())\n     |              \
    \              ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \     |\n     = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \     = help: the following other types implement trait `FromIterator<A>`:\n \
    \              <String as FromIterator<&'a char>>\n               <String as FromIterator<&'a\
    \ str>>\n               <String as FromIterator<Box<str>>>\n               <String\
    \ as FromIterator<Cow<'a, str>>>\n               <String as FromIterator<String>>\n\
    \               <String as FromIterator<char>>\nnote: required by a bound in `collect`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(n.to_string()).as_slice().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `as_slice` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpw2erpe55.rs:7:33\n  |\n7 |     String::from(n.to_string()).as_slice().to_string()\n\
    \  |                                 ^^^^^^^^ method not found in `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"0\");\n    for _ in 0..n\
    \ {\n        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0   \"`,\n right: `\"0 1 2 3\"`', /tmp/tmpt9te6ux1.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).trim()\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpwbd3ipvn.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).trim()\n  |\
    \                   ^^^^ `std::ops::Range<isize>` cannot be formatted with the\
    \ default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwbd3ipvn.rs:7:5\n\
    \  |\n6 | fn string_sequence(n: isize) -> String {\n  |                      \
    \           ------ expected `String` because of return type\n7 |     format!(\"\
    {}\", 0..n).trim()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n  |     |\n  |     expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n)\n        .into_iter()\n        .map(String::from)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n\
    \ --> /tmp/tmpcntn336l.rs:7:5\n  |\n7 | /     (0..n)\n8 | |         .into_iter()\n\
    9 | |         .map(String::from)\n  | |__________________________^ the trait `From<isize>`\
    \ is not implemented for `String`\n  |\n  = help: the following other types implement\
    \ trait `From<T>`:\n            <String as From<&String>>\n            <String\
    \ as From<&mut str>>\n            <String as From<&str>>\n            <String\
    \ as From<Box<str>>>\n            <String as From<Cow<'a, str>>>\n           \
    \ <String as From<char>>\n\nerror[E0277]: the trait bound `String: From<isize>`\
    \ is not satisfied\n --> /tmp/tmpcntn336l.rs:9:14\n  |\n9 |         .map(String::from)\n\
    \  |              ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for\
    \ `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n\
    \            <String as From<&String>>\n            <String as From<&mut str>>\n\
    \            <String as From<&str>>\n            <String as From<Box<str>>>\n\
    \            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\
    \nerror[E0277]: the trait bound `String: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpcntn336l.rs:7:5\n   |\n7  | /     (0..n)\n8  | |         .into_iter()\n\
    9  | |         .map(String::from)\n10 | |         .collect()\n   | |__________________^\
    \ the trait `From<isize>` is not implemented for `String`\n   |\n   = help: the\
    \ following other types implement trait `From<T>`:\n             <String as From<&String>>\n\
    \             <String as From<&mut str>>\n             <String as From<&str>>\n\
    \             <String as From<Box<str>>>\n             <String as From<Cow<'a,\
    \ str>>>\n             <String as From<char>>\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::with_capacity(n);\n    s.push_str(\"\
    0 \");\n    for i in 1..n {\n        s.push_str(&format!(\"{} \", i));\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyd9ikeda.rs:7:39\n  |\n7 |\
    \     let mut s = String::with_capacity(n);\n  |                             \
    \          ^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n  |\n7 |     let\
    \ mut s = String::with_capacity(n.try_into().unwrap());\n  |                 \
    \                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 \".to_string())\n        .to_string()\n\
    \        .as_bytes()\n        .iter()\n        .take(n as usize)\n        .cloned()\n\
    \        .map(|x| x.to_ascii_lowercase().to_string())\n        .collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpea2zf4e0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::from(\"\");\n    for _ in 0..n {\n\
    \        s += \" \";\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpogngwk8p.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975692
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo7bzzpel.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975691
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n > 0 {\n        String::from(\n            (n as\
    \ usize).to_string()\n                .chars()\n                .filter_map(|c|\
    \ *c > '9' || (*c >= '0' && *c <= '9'))\n                .collect::<Vec<Char>>()\n\
    \                .join(\" \")\n                .to_string(),\n        )\n    }\
    \ else {\n        String::from(\"0\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `Char` in this scope\n  --> /tmp/tmpc5oax5wd.rs:12:32\n\
    \   |\n12 |                 .collect::<Vec<Char>>()\n   |                    \
    \            ^^^^\n   |\nhelp: a builtin type with a similar name exists\n   |\n\
    12 |                 .collect::<Vec<char>>()\n   |                           \
    \     ~~~~\nhelp: you might be missing a type parameter\n   |\n6  | fn string_sequence<Char>(n:\
    \ isize) -> String {\n   |                   ++++++\n\nerror[E0614]: type `char`\
    \ cannot be dereferenced\n  --> /tmp/tmpc5oax5wd.rs:11:33\n   |\n11 |        \
    \         .filter_map(|c| *c > '9' || (*c >= '0' && *c <= '9'))\n   |        \
    \                         ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n\
    \  --> /tmp/tmpc5oax5wd.rs:11:46\n   |\n11 |                 .filter_map(|c| *c\
    \ > '9' || (*c >= '0' && *c <= '9'))\n   |                                   \
    \           ^^\n\nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpc5oax5wd.rs:11:59\n\
    \   |\n11 |                 .filter_map(|c| *c > '9' || (*c >= '0' && *c <= '9'))\n\
    \   |                                                           ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc5oax5wd.rs:11:33\n   |\n11 |              \
    \   .filter_map(|c| *c > '9' || (*c >= '0' && *c <= '9'))\n   |              \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found `bool`\n   |\n   = note: expected enum `Option<_>`\n              found\
    \ type `bool`\nhelp: try wrapping the expression in `Some`\n   |\n11 |       \
    \          .filter_map(|c| Some(*c > '9' || (*c >= '0' && *c <= '9')))\n   | \
    \                                +++++                                    +\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0412, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659975692
