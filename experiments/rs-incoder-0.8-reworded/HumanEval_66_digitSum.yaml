name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(String::from(\"\
  \"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"))\n/// 131\n/// >>> digitSum(String::from(\"\
  abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"\
  woArBld\"))\n/// 131\n/// >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ['    s.chars().filter(|c| c.is_ascii_uppercase()).sum()', '    digitSum(&s.chars().collect::<Vec<_>>())',
  "    if s.is_empty() {\n        return 0;\n    }\n    let mut sum = 0;\n    let\
    \ mut s = s;\n    loop {\n        match s.chars().next() {\n            Some('\
    \ ') => break,\n            Some('a'..'z') | Some('A'..'Z') => sum += *s.chars().next().unwrap(),\n\
    \            Some('0'..'9') | Some('a'..'z') | Some('A'..'Z') => {\n         \
    \       let next = s.chars().next().unwrap();\n                sum += (*next -\
    \ '0').into();\n            }\n            _ => unreachable!(),\n        }\n \
    \       s = s.chars().skip(1).collect::<String>().to_string();\n    }\n    sum",
  '    s.chars().filter(|c| c.is_digit()).fold(0, |acc, c| acc + c.to_digit())', " \
    \   s.chars().map(|c| c as isize)\n        .filter(|c| c < 32)\n        .sum()",
  "    s.chars().filter(|c| *c >= '0' && *c <= '9').fold(0, |acc, c| acc + *c - '0')",
  "    let mut n = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c >=\
    \ '0' && c <= '9' {\n            n = n * 10 + c - '0';\n        } else {\n   \
    \         break;\n        }\n    }\n    n", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        sum += c as isize;\n    }\n    return sum;", "    let mut\
    \ sum = 0;\n    for i in s.chars() {\n        if i.is_uppercase() {\n        \
    \    sum += i.to_digit(10);\n        }\n    }\n    return sum;", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        let digit = c - '0';\n        if\
    \ digit > 0 {\n            sum += digit;\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n\n    for c in s.chars() {\n        if *c >= 'A' && *c <= 'Z'\
    \ {\n            sum += (*c - 'A' + 10);\n        }\n    }\n\n    return sum;",
  "    let mut ret = 0;\n    let mut chars = s.chars();\n    while let Some(Ok(c))\
    \ = chars.next() {\n        if c >= '0' && c <= '9' {\n            ret += c -\
    \ '0';\n        }\n    }\n    ret", "    let mut sum = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c < '0' || c > '9' {\n            continue;\n        }\n     \
    \   sum += c - '0';\n        if i == s.len() - 1 {\n            sum += s.len()\
    \ - i;\n        }\n    }\n    sum", '    digitSumHelper(s.chars().sum::<i32>(),
    0)', "    let mut total = 0;\n    for (i, c) in s.chars().enumerate() {\n    \
    \    if i > 0 && c >= 'A' && c <= 'Z' {\n            total += c - 'A' + 10;\n\
    \        }\n    }\n    return total;", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c >= '0' && c <= '9' {\n            sum += c - '0';\n        }\n\
    \    }\n    sum", "    let mut s = s;\n    let mut total = 0;\n    while !s.is_empty()\
    \ {\n        let n = s.chars().filter(|c| c.is_ascii_uppercase()).count();\n \
    \       if n >= 2 {\n            total += n - 1;\n        }\n        s = &s[..];\n\
    \    }\n    total", '    digitSumAux("", s)', "    s.chars().filter(|c| *c >=\
    \ 'A' && *c <= 'Z' && *c != 'a').sum()", "    let mut sum: isize = 0;\n\n    for\
    \ c in s.chars() {\n        sum += c.to_digit();\n    }\n\n    sum", "    let\
    \ mut total = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n  \
    \          total += c.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n  \
    \      } else {\n            total += c.chars().filter(|c| *c >= 'A' && *c <=\
    \ 'Z').count();\n        }\n    }\n    total", "    let mut sum = 0;\n    let\
    \ mut len = s.len();\n    for &i in s.chars().filter_map(|c| c.is_ascii_uppercase().unwrap())\
    \ {\n        sum += i;\n        len -= 1;\n    }\n    len", '    s.chars().map(|c|
    c.to_digit(10)).sum::<isize>()', "    let mut result = usize::MAX;\n    s.into_chars().for_each(|c|\
    \ {\n        result = match c {\n            'a' => result + 97,\n           \
    \ 'b' => result + 98,\n            'c' => result + 99,\n            'd' => result\
    \ + 100,\n            'e' => result + 101,\n            'f' => result + 102,\n\
    \            'g' => result + 103,\n            'h' => result + 104,\n        \
    \    'i' => result + 105,\n            'j' => result + 106,\n            'k' =>\
    \ result + 107,\n            'l' => result + 108,\n            'm' => result +\
    \ 109,\n            'n' => result + 110,\n            'o' => result + 111,\n \
    \           'p' => result + 112,\n            'q' => result + 113,\n         \
    \   'r' => result + 114,\n            's' => result + 115,\n            't' =>\
    \ result + 116,\n            'u' => result + 117,\n            'v' => result +\
    \ 118,\n            'w' => result + 119,\n            'x' => result + 120,\n \
    \           'y' => result + 121,\n            'z' => result + 122,\n         \
    \   _ => return,\n        };\n    });\n    result", "    if s.len() == 0 {\n \
    \       return 0;\n    }\n    let mut sum: isize = 0;\n    for c in s.chars()\
    \ {\n        if c >= 'A' && c <= 'Z' {\n            sum += c - 'A' as isize;\n\
    \        } else {\n            sum += c as isize;\n        }\n    }\n    return\
    \ sum;", "    let mut sum = 0;\n    for ch in s.chars() {\n        if ch.is_upper()\
    \ {\n            sum += ch.code().unwrap();\n        }\n    }\n    sum", "   \
    \ let mut sum = 0;\n    for d in s.chars() {\n        sum = sum + d.as_digit().unwrap().to_usize();\n\
    \    }\n    sum", "    let mut sum = 0;\n    for &c in s {\n        if c > '9'\
    \ {\n            sum += c - '0';\n        } else {\n            sum += c - 'a'\
    \ + 10;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        let cs = c.to_ascii_uppercase();\n        sum += cs;\n    }\n   \
    \ sum", '    digits(s).iter().sum::<usize>().unwrap()', "    let mut result =\
    \ 0;\n    for &c in s.chars() {\n        result += (c - '0') as isize;\n    }\n\
    \    result", "    // Initialize sum to zero and add to sum as we process characters\
    \ in s\n    let mut sum = 0;\n\n    // Iterate over characters in s\n    for c\
    \ in s.chars() {\n        // Convert character to ASCII code\n        let ascii\
    \ = (c as i32).to_ascii_lowercase();\n\n        // If ASCII code > 70 add it to\
    \ sum\n        if ascii > 70 {\n            sum += ascii;\n        }\n    }\n\n\
    \    // Return sum\n    sum", "    let mut sum = 0;\n    for &c in s.chars() {\n\
    \        sum = match c {\n            '0' => 0,\n            '1' => 1,\n     \
    \       '2' => 2,\n            '3' => 3,\n            '4' => 4,\n            '5'\
    \ => 5,\n            '6' => 6,\n            '7' => 7,\n            '8' => 8,\n\
    \            '9' => 9,\n            _ => sum + c.as_bytes()[0] as isize,\n   \
    \     };\n    }\n    sum", "    let mut res = 0;\n    for &c in s {\n        if\
    \ c >= '0' && c <= '9' {\n            res += c - '0';\n        }\n    }\n    res",
  "    let mut sum = isize::MIN;\n    let mut digits = String::from(s);\n    while\
    \ !digits.is_empty() {\n        let digit = digits.chars().next().unwrap();\n\
    \        sum += digit;\n        digits.clear();\n    }\n    sum", "    if s.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut result = 0;\n    let mut s = s;\n\
    \    while !s.is_empty() {\n        let c = s.chars().next().unwrap().to_digit(10);\n\
    \        result += (c - '0');\n        s = &s[1..];\n    }\n    result", "   \
    \ let mut sum = 0;\n    for c in s.chars() {\n        sum += c as isize - (c as\
    \ usize);\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        sum += if c.is_upper() { 0x41 + c.code() } else { c.code() };\n    }\n\
    \    return sum;", '    s.chars().fold(0, |sum, ch| sum + ch as isize)', "   \
    \ use std::ascii::AsciiExt;\n\n    s.chars().filter(|c| c >= 'a' && c <= 'z').sum()",
  "    let mut n = 0;\n    let mut max = 0;\n    for c in s.chars() {\n        if\
    \ max < c.code() {\n            max = c.code();\n        }\n    }\n    for (i,\
    \ c) in s.chars().enumerate() {\n        let code = c.code();\n        if code\
    \ > max {\n            n = max;\n            max = code;\n        }\n        n\
    \ += code - max;\n    }\n    n", "    s.chars().filter(|x| *x > 'z').sum::<usize>()",
  "    let mut res = 0;\n    for i in s.chars() {\n        match i {\n           \
    \ Ok(c) if c > '9' && c < 'A' as i8 => {\n                res += c - '0';\n  \
    \          }\n            Ok(c) if c > 'z' as i8 => {\n                res +=\
    \ c - 'a' + 10;\n            }\n            Ok(c) if c > 'Z' as i8 => {\n    \
    \            res += c - 'A' + 10;\n            }\n            _ => {\n       \
    \         panic!(\"String {} doesn't contain any digits\", s);\n            }\n\
    \        }\n    }\n    res", '    digitSum3(s.as_bytes()).0', "    let mut sum\
    \ = 0;\n    for i in s.chars() {\n        if i < 'A' || i > 'Z' {\n          \
    \  continue;\n        }\n        sum += i as isize;\n    }\n    sum", "    use\
    \ std::str::Chars;\n\n    if s.is_empty() {\n        return 0;\n    }\n\n    let\
    \ mut sum = 0;\n    for ch in s.chars().filter_map(|c| match c {\n        c if\
    \ Chars::is_ascii_digit(c) => Some(c.to_digit(10)),\n        _ => None,\n    })\
    \ {\n        sum += *ch;\n    }\n\n    return sum;", '    s.chars().sum();', " \
    \   let mut accum = 0;\n    let mut digits = String::new();\n    for c in s.chars()\
    \ {\n        accum += c.to_ascii_uppercase().wrapping_add(1).unwrap();\n     \
    \   if accum >= 10 { digits.push_str(&format!(\"{}\", accum).as_str()); }\n  \
    \      accum -= 10;\n    }\n    digits.len()", '    s.chars().filter(|c| c.is_ascii_upper()).sum()',
  "    let mut accum: isize = 0;\n    let len = s.len();\n    for i in s.chars() {\n\
    \        accum = accum * 10 + (*i as u8);\n    }\n    accum", "    let mut sum\
    \ = 0;\n\n    for c in s.chars() {\n        if c <= '9' {\n            sum +=\
    \ c - '0';\n        }\n        else {\n            sum += 10 - c - 'a' + 10;\n\
    \        }\n    }\n\n    sum", "    let mut sum = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() {\n            sum += c.to_digit(10).unwrap()\
    \ as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c > '0' && c <= '9' {\n            sum += c - '0';\n        }\n\
    \    }\n    sum", "    // Write your code in an optimized version for speed.\n\
    \    let mut s = s;\n    let mut sum = 0;\n\n    for &c in s.chars() {\n     \
    \   if c < b'A' {\n            sum += c - b'0';\n        }\n    }\n    sum", " \
    \   s.chars().fold<isize>(0, |acc, c| {\n        acc * 10 + (c - '0')\n    })",
  '    s.chars().fold(0, |acc, c| acc + c.to_digit(10).unwrap())', '    s.chars().filter(|c|
    c.is_ascii_uppercase()).sum()', "    // Implement this function.\n    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        sum += ch.to_digit(10);\n    }\n\
    \    sum", "    let mut sum: usize = 0;\n    for c in s.chars() {\n        if\
    \ c < 128 {\n            sum += c;\n        }\n    }\n    return sum;", "    let\
    \ mut chars = s.chars().map(|c| c as usize).collect::<Vec<usize>>();\n    chars.sort_unstable();\n\
    \    let mut sum = 0;\n    for c in chars.iter().rev() {\n        if c < '0' ||\
    \ c > '9' {\n            break;\n        }\n        sum += (c - '0') as usize;\n\
    \    }\n    sum", '    digitSumHelper(s.as_bytes()) as isize', "    s.chars()\n\
    \        .filter(|c| c.is_ascii_uppercase())\n        .count()", "    let mut\
    \ sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if !c.is_ascii_uppercase()\
    \ {\n            continue;\n        }\n        for _ in 0 .. i {\n           \
    \ sum += 1;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for i in s.chars()\
    \ {\n        if i.is_uppercase() {\n            sum += i.ascii().unwrap();\n \
    \       }\n    }\n    sum", "    let mut res = 0;\n    for c in s.chars().filter_map(|c|\
    \ {\n        if c.is_uppercase() {\n            res += c.as_byte().to_digit(10).unwrap();\n\
    \        }\n        Ok(c)\n    }) {\n        res += c;\n    }\n    res", '    digitSum_recursive(s)',
  "    let mut res = 0;\n    let mut s = s.chars();\n\n    while let Some(c) = s.next()\
    \ {\n        if c > 'z' {\n            c -= 'a' as isize;\n        } else {\n\
    \            res += c;\n        }\n    }\n\n    res", '    sum(s.chars().filter_map(|c|
    c.ascii_upper()));', '    digitSum(s) |> to_digitSum', "    let mut accum = 0;\n\
    \    for c in s.chars() {\n        if c.is_upper() {\n            accum += c.to_digit(10);\n\
    \        }\n    }\n    accum", "    let mut acc = 0;\n    for &d in s.chars().filter(|c|\
    \ c.is_ascii_uppercase()) {\n        acc += d;\n    }\n    acc", '    s.chars().map(|c|
    c as usize).sum::<isize>()', "    match s.chars().filter_map(|c| c.to_ascii_uppercase())\
    \ {\n        Some(uppercase) => uppercase.iter().sum::<isize>(),\n        None\
    \ => 0,\n    }", "    let mut sum = 0;\n    for c in s.chars() {\n        if ('A'\
    \ <= c && c <= 'Z') {\n            sum += c - 'A' + 10;\n        } else if ('a'\
    \ <= c && c <= 'z') {\n            sum += c - 'a' + 10;\n        }\n    }\n  \
    \  sum", "    let mut s: Vec<_> = s.chars().collect();\n    let mut sum = 0;\n\
    \    for (i, c) in s.iter().enumerate() {\n        if i > 0 && c <= 'z' {\n  \
    \          sum += c + 32 - 'a' as isize;\n        } else if c >= 'A' {\n     \
    \       sum += c - 'A' as isize;\n        } else {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().filter(|&c| c.is_numeric()).sum()',
  "    s.iter()\n        .filter_map(|c| {\n            match c.to_digit(10) {\n \
    \               None => None,\n                Some(d) => Some(c + d),\n     \
    \       }\n        })\n        .sum()", "    let mut sum = 0;\n    for &d in s.chars()\
    \ {\n        sum += d.to_digit(10);\n    }\n    sum", "    // Your code here\n\
    \    let mut sum = 0;\n    for char in s.chars() {\n        if char >= 'a' &&\
    \ char <= 'z' {\n            sum += char - 'a' + 10;\n        }\n    }\n    return\
    \ sum;", "    let mut sum = s.len();\n    for i in 0..s.len() {\n        if s[i..].chars().map(|c|\
    \ c.to_ascii_digit()).sum() > 0 {\n            sum += s[i..].chars().map(|c| c.to_ascii_digit()).sum();\n\
    \        }\n    }\n    sum", "    if s.is_empty() {\n        return 0;\n    }\n\
    \n    // The current sum\n    let mut sum = 0;\n\n    // Initialize our iterator\
    \ to our string\n    let mut s = String::from(s);\n\n    // Iterate over the string\n\
    \    for i in s.chars().cloned() {\n        // Convert the char into a digit and\
    \ add to our sum\n        let digit = i as u32;\n        sum += digit;\n    }\n\
    \n    // Return our result\n    sum", "    let mut sum = 0;\n    for ch in s.chars()\
    \ {\n        if ch.is_upper() {\n            sum += ch.code();\n        }\n  \
    \  }\n    sum", '    digitSumHelper(s, 0, 0, false, 0)', '    s.chars().filter(|c|
    c > 64 && c < 91).sum()', '    s.chars().filter(|c| c.is_ascii()).fold(0, |sum,
    _| sum + c.as_byte().unwrap());', "    let mut num: isize = 0;\n    for &ch in\
    \ s {\n        if ch >= '0' && ch <= '9' {\n            num = num + ch - '0';\n\
    \        }\n    }\n    num", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        match c {\n            '0' => sum += 0,\n            '1' => sum += 1,\n\
    \            '2' => sum += 2,\n            '3' => sum += 3,\n            '4' =>\
    \ sum += 4,\n            '5' => sum += 5,\n            '6' => sum += 6,\n    \
    \        '7' => sum += 7,\n            '8' => sum += 8,\n            '9' => sum\
    \ += 9,\n            _ => sum += c - '0' + 1,\n        }\n    }\n    sum", " \
    \   let mut sum = 0;\n    for ch in s.chars() {\n        sum += ch as isize;\n\
    \    }\n    return sum;", "    let mut chars = s.chars();\n\n    chars.take_while(|&x|\
    \ x >= '0' && x <= '9').count()", '    s.chars().fold(0, |sum, _| sum + _ as isize)',
  "    s.chars().map(|c| if c.is_uppercase() { c } else\n                        {\
    \ c as isize }).sum::<isize>()", '    digitSumImpl(s)', '    digitSumHelper(s.as_bytes())',
  "    let mut total: isize = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            total += c.digits() as isize;\n        }\n    }\n    return total;",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c > '9' || c < '0' {\n\
    \            sum += c - '0';\n        } else {\n            sum += 10 + c - '0';\n\
    \        }\n    }\n    sum", "    let mut sum = usize::MAX;\n    for c in s.chars()\
    \ {\n        if c < b'0' || (c > b'9' && c < b'A' && c > b'F') {\n           \
    \ continue;\n        }\n        sum += (c - b'0') as usize;\n    }\n    sum",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if *c >= '0' && *c <= '9'\
    \ {\n            sum += *c - '0';\n        }\n    }\n    sum", '    digitSumHelper(s.as_bytes())',
  "    s.as_bytes()\n        .iter()\n        .map(|byte| byte.iter().sum::<u8>())\n\
    \        .sum()", "    // Step 1: Convert s to an iterator.\n    let mut it =\
    \ s.chars().enumerate();\n\n    // Step 2: Loop over it and add the uppercase\
    \ characters.\n    let mut sum = std::i32::MAX;\n    for (char_idx, char) in it\
    \ {\n        if char.is_upper() {\n            sum += char_idx.to_string().parse().unwrap()\
    \ as isize;\n        }\n    }\n\n    // Step 3: Return sum.\n    sum", "    let\
    \ mut sum = 0;\n\n    for (i, ch) in s.chars().enumerate() {\n        if ch >=\
    \ '0' && ch <= '9' {\n            sum += ch as isize;\n        }\n    }\n\n  \
    \  sum", "    let mut result = 0;\n    let mut current_digit = 0;\n    for c in\
    \ s.chars() {\n        // Get sum of digit in lower case.\n        if c.is_lowercase()\
    \ {\n            current_digit += c.digit();\n        }\n        // Get sum of\
    \ digit in upper case.\n        if !c.is_lowercase() {\n            current_digit\
    \ += c.digit();\n        }\n        // Get sum of digit in mixed case.\n     \
    \   if c.is_lowercase() && !c.is_uppercase() {\n            current_digit += c.digit();\n\
    \        }\n        // Get sum of digit in upper case but in mixed case.\n   \
    \     if !c.is_lowercase() && c.is_uppercase() {\n            current_digit +=\
    \ c.digit();\n        }\n        // Update sum.\n        result += current_digit;\n\
    \    }\n    result", "    match (s.chars(), s.chars().map(|c| *c.to_digit()).sum())\
    \ {\n        ((), _) => 0,\n        (chars, sum) => chars\n            .iter()\n\
    \            .map(|c| if c <= '9' { c - '0' } else { c - 'a' + 10 })\n       \
    \     .sum::<i32>() +\n            sum,\n    }", "    let mut total: isize = 0;\n\
    \    for i in s.chars() {\n        if i >= 'A' && i <= 'Z' {\n            total\
    \ += (i + 'a' - 'A').to_digit();\n        }\n    }\n    return total;", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9' {\n\
    \            sum += c - '0';\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    let mut s = String::from(s);\n    for c in s.chars() {\n        if c.is_upper()\
    \ {\n            sum += c.to_digit(10);\n        }\n    }\n    return sum;", '    s.chars().filter(|c|
    c.is_ascii_upper()).sum()', '    digitSumHelper(s.chars()).unwrap_or_else(|_|
    panic!())', "    let mut sum = 0;\n    for &c in s.chars() {\n        if c < '0'\
    \ || c > '9' {\n            continue;\n        }\n        sum += c.to_digit(10).unwrap();\n\
    \    }\n    return sum;", "    let mut sum = 0;\n    let len = s.len();\n    for\
    \ i in 0..len {\n        let d = s.chars().nth(i).unwrap();\n        let c = d.code().unwrap();\n\
    \        if c < '0' || c > '9' {\n            continue;\n        }\n        sum\
    \ += c - '0';\n    }\n    sum", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()",
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c >= '0' && c <= '9'\
    \ {\n            sum += c - '0';\n        } else {\n            return sum;\n\
    \        }\n    }\n    return sum;", "    let mut total = 0usize;\n    for c in\
    \ s.chars() {\n        if c.is_upper() {\n            total += c.to_digit(10).unwrap();\n\
    \        }\n    }\n    total", "    let mut sum = 0;\n    for i in s.chars() {\n\
    \        let x = i.to_ascii_lowercase();\n        if x < '0' {\n            sum\
    \ += x;\n        }\n    }\n    sum", "    s.chars().filter(|&c| c <= 'Z').fold(0,\
    \ |sum, c| sum + c + 10);", "    match *s.chars().filter(|c| c.is_ascii()).rev()\
    \ {\n        Some(s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()) => s.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').sum(),\n        Some(s.chars().filter(|c| c >= 'a' &&\
    \ c <= 'z').sum()) => s.chars().filter(|c| c >= '0' && c <= '9').sum(),\n    \
    \    _ => s.chars().filter(|c| c >= '0' && c <= '9').sum(),\n    }", "    s.chars().filter(|c|\
    \ c > '0' and c < '9').sum()", '    digitSumImpl(s, 0)', "    let mut sum = 0;\n\
    \    for &c in s.chars() {\n        if c > '9' {\n            sum -= (c - '0');\n\
    \        } else {\n            sum += c - '0';\n        }\n    }\n    sum", " \
    \   let mut sum = 0;\n    for &s in s.chars() {\n        sum += s.code_point();\n\
    \    }\n    return sum;", "    s.chars().filter(|c| c >= 'a' && c <= 'z').sum()",
  '    s.chars().enumerate().map(|(i, c)| c.to_digit(10)).sum::<isize>()', "    let\
    \ mut result = s.chars().sum();\n\n    if let Some(first_nonspace) = s.find(|c|\
    \ !c.is_ascii_alphanumeric()) {\n        result = (result - first_nonspace) as\
    \ isize;\n    }\n\n    result", '    s.chars().sum::<usize>()', "    let mut s\
    \ = s;\n    s.trim_right();\n    if let Some(last_digit) = s.chars().last_mut()\
    \ {\n        if last_digit == '0' {\n            return 0;\n        }\n      \
    \  let mut accum = 0;\n        while let Some(digit) = s.chars().nth(s.len() -\
    \ 1) {\n            if digit == '0' {\n                break;\n            }\n\
    \            accum = accum + (digit as isize);\n            s = &s[1..];\n   \
    \     }\n        accum = accum - last_digit as isize;\n        return accum;\n\
    \    }\n    0", "    let mut sum = 0;\n    for c in s.chars() {\n        sum +=\
    \ if c.is_upper() {\n            10\n        } else {\n            c.code()\n\
    \        };\n    }\n    sum", "    let mut sum = 0isize;\n\n    for &c in s.chars()\
    \ {\n        if !c.is_ascii_uppercase() {\n            continue;\n        }\n\n\
    \        sum += c.to_digit(10);\n    }\n\n    sum", "    match s.chars() {\n \
    \       chars => {\n            let mut sum = 0;\n            for c in chars.iter()\
    \ {\n                sum += c.as_bytes().reduce(|a, &b| a + b as isize);\n   \
    \         }\n            sum\n        }\n    }", '    digitSumHelper(s.chars(),
    |c| c.is_uppercase()).unwrap()', "    if s.is_empty() {\n        return 0;\n \
    \   }\n    let mut sum = 0;\n    let mut i = 0;\n    let mut chars: Vec<_> = s.chars().collect();\n\
    \    while i < chars.len() {\n        if chars[i] > '9' && chars[i] < 'A' {\n\
    \            sum += chars[i] - '0';\n            i += 1;\n        } else if chars[i]\
    \ > 'Z' && chars[i] < 'a' {\n            sum += chars[i] - 'A' + 10;\n       \
    \     i += 1;\n        } else {\n            sum += chars[i] - 'a' + 10;\n   \
    \         i += 1;\n        }\n    }\n    return sum;", '    s.chars().sum::<u32>().checked_add()',
  '    digitSumHelper(&s).sum', "    // Return zero if s is empty\n    if s.is_empty()\
    \ {\n        return 0;\n    }\n\n    // Return sum of ASCII codes of all upper\
    \ characters in s\n    // and subtract sum of ASCII codes of lower characters\
    \ in s\n    // to obtain the sum of ASCII codes of all upper characters\n    //\
    \ in s minus the sum of ASCII codes of lower characters\n    // of s.\n    let\
    \ mut res = 0;\n    let mut len = s.len();\n    while len > 0 {\n        res +=\
    \ (s.chars().filter(|c| *c >= 'A' && *c <= 'Z').sum::<usize>() -\n           \
    \     s.chars().filter(|c| *c >= 'a' && *c <= 'z').sum::<usize>()) as isize;\n\
    \        len -= 1;\n    }\n\n    // Return sum\n    res", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c < 'A' || c > 'Z' {\n            continue;\n\
    \        }\n        if c > 'a' {\n            sum += (c - 'A') as isize;\n   \
    \     }\n    }\n    sum", '    digitSumHelper(s.as_bytes(), s.len())', "    let\
    \ mut sum = 0;\n    for i in s.chars().enumerate().filter(|(_, c)| c >= 'A' &&\
    \ c <= 'Z') {\n        sum += c as isize - 'A' as isize;\n    }\n    sum", " \
    \   let mut sum: isize = 0;\n    for c in s.chars() {\n        sum += (c as usize)\
    \ - 'a' as isize;\n    }\n    return sum;", "    // TODO: Implement me\n    return\
    \ 0; // TODO: implement the function", "    s.chars().filter(|c| *c >= 'A' &&\
    \ *c <= 'Z').sum()", "    let mut sum = 0;\n    let mut last_digit = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if i > 0 {\n            last_digit\
    \ = c - last_digit;\n        }\n        if last_digit > 0 {\n            sum +=\
    \ last_digit;\n            last_digit = 0;\n        }\n    }\n    sum", "    s.chars().filter(|&c|\
    \ c >= '0' && c <= '9').sum()", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            sum += c.as_bytes().iter().max().unwrap();\n\
    \        }\n    }\n    sum as isize", "    if s.is_empty() {\n        0\n    }\n\
    \    let mut sum = 0;\n    let mut n = s.len();\n    while n > 0 {\n        if\
    \ n % 2 != 0 {\n            sum += *s.chars().nth(n / 2).unwrap();\n        }\n\
    \        n /= 2;\n    }\n    sum", "    let mut res = 0;\n\n    for c in s.chars()\
    \ {\n        if c.is_upper() {\n            res += c.digit();\n        }\n   \
    \ }\n\n    res", "    s.chars()\n        .filter(|c| c >= 'a' && c <= 'z')\n \
    \       .map(|c| c - 'a' + 10)\n        .sum()", '    s.chars().fold(0, |acc,
    c| acc + c.to_digit(10).unwrap());', "    if s.is_empty() {\n        return 0;\n\
    \    }\n\n    let mut sum = 0;\n    for c in s.chars() {\n        if c < '0' ||\
    \ '9' < c {\n            return sum;\n        }\n        sum += c - '0';\n   \
    \ }\n    return sum;", "    s.chars().filter(|&x| x >= '0' && x <= '9').count()",
  '    s.chars().filter(|c| c.is_ascii()).fold(0, |sum, ch| sum + ch.to_digit(10).unwrap())',
  "    let mut n = 0;\n    let mut s = s;\n    while let Some(ch) = s.next() {\n \
    \       match ch {\n            'a' => {\n                if let Some(ch) = s.next()\
    \ {\n                    match ch {\n                        'a' => {\n      \
    \                      if let Some(ch) = s.next() {\n                        \
    \        match ch {\n                                    'a' => {\n          \
    \                              n += 128;\n                                   \
    \ }\n                                    _     => n,\n                       \
    \         }\n                                n += ch - 'a' as isize;\n       \
    \                     }\n                        }\n                        'b'\
    \ => {\n                            if let Some(ch) = s.next() {\n           \
    \                     match ch {\n                                    'a' => {\n\
    \                                        n += 128;\n                         \
    \           }\n                                    _     => n,\n             \
    \                   }\n                                n += ch - 'a' as isize;\n\
    \                            }\n                        }\n                  \
    \      'c' => {\n                            if let Some(ch) = s.next() {\n  \
    \                              match ch {\n                                  \
    \  'a' => {\n                                        n += 128;\n             \
    \                       }\n                                    _     => n,\n \
    \                               }\n                                n += ch - 'a'\
    \ as isize;\n                            }\n                        }\n      \
    \                  'd' => {\n                            if let Some(ch) = s.next()\
    \ {\n                                match ch {\n                            \
    \        'a' => {\n                                        n += 128;\n       \
    \                             }\n                                    _     =>\
    \ n,\n                                }\n                                n +=\
    \ ch - 'a' as isize;\n                            }\n                        }\n\
    \                        'e' => {\n                            if let Some(ch)\
    \ = s.next() {\n                                match ch {\n                 \
    \                   'a' => {\n                                        n += 128;\n\
    \                                    }\n                                    _\
    \     => n,\n                                }\n                             \
    \   n += ch - 'a' as isize;\n                            }\n                 \
    \       }\n                        'f' => {\n                            if let\
    \ Some(ch) = s.next() {\n                                match ch {\n        \
    \                            'a' => {\n                                      \
    \  n += 128;\n                                    }\n                        \
    \            _     => n,\n                                }\n                \
    \                n += ch - 'a' as isize;\n                            }\n    \
    \                    }\n                        'g' => {\n                   \
    \         if let Some(ch) = s.next() {\n                                match\
    \ ch {\n                                    'a' => {\n                       \
    \                 n += 128;\n                                    }\n         \
    \                           _     => n,\n                                }\n \
    \                               n += ch - 'a' as isize;\n                    \
    \        }\n                        }\n                        'h' => {\n    \
    \                        if let Some(ch) = s.next() {\n                      \
    \          match ch {\n                                    'a' => {\n        \
    \                                n += 128;\n                                 \
    \   }\n                                    _     => n,\n                     \
    \           }\n                                n += ch - 'a' as isize;\n     \
    \                       }\n                        }\n                       \
    \ 'i' => {\n                            if let Some(ch) = s.", "    let mut result\
    \ = 0;\n    for c in s.chars() {\n        if c <= '9' {\n            result +=\
    \ c - '0';\n        } else {\n            result += 10 - 'a' + c - 'A';\n    \
    \    }\n    }\n    result", "    let mut digits = vec![];\n    let mut sum = 0;\n\
    \    for i in s.chars() {\n        let c = *i;\n        if c >= 'A' && c <= 'Z'\
    \ {\n            sum += (c - 'A') as isize;\n        } else {\n            digits.push(c\
    \ as isize);\n        }\n    }\n    sum * 26 + digits.iter().sum::<usize>()",
  "    let mut sum = 0;\n    for ch in s.chars() {\n        if let Some(ch) = (*ch\
    \ as u8).to_ascii_lowercase() {\n            sum += ch;\n        }\n    }\n  \
    \  sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c.to_ascii_lowercase().unwrap();\n        }\n    }\n \
    \   sum", "    s.chars().filter(|c| c >= '0' && c <= '9').sum()", "    let mut\
    \ sum = 0;\n    for ch in s.chars() {\n        if ch.code() >= 'a' && ch.code()\
    \ <= 'z' {\n            sum += ch.code() as isize;\n        }\n    }\n    return\
    \ sum;", "    let mut total = 0;\n    for i in s.chars() {\n        if i.is_upper()\
    \ {\n            total += i.code_point().unwrap();\n        }\n    }\n    total",
  "    let mut sum = 0;\n    for (i, _) in s.chars().zip(s.chars().skip(1)) {\n  \
    \      if i > 0 && i % 2 == 0 {\n            sum += i;\n        }\n    }\n   \
    \ sum", "    let mut sum = 0;\n    let mut i = 0;\n    while i < s.len() {\n \
    \       if s.chars().any(|c| c >= 'A' && c <= 'Z') {\n            sum += c.to_digit(10).unwrap();\n\
    \        }\n        i += 1;\n    }\n    sum", "    debug_assert!(s.is_ascii_lowercase());\n\
    \n    let mut res = 0;\n    for (i, &c) in s.chars().enumerate() {\n        let\
    \ c = c.to_digit(10).unwrap();\n        let c = (c - '0').abs();\n        if c\
    \ > 96 {\n            continue;\n        }\n        res += c;\n    }\n    res",
  "    if s.is_empty() {\n        return 0;\n    }\n    let mut sum = 0;\n    for\
    \ ch in s.chars() {\n        if ch >= '0' && ch <= '9' {\n            sum += ch\
    \ as isize - '0';\n        }\n    }\n    return sum;", '    s.chars().map(|c|
    c.to_digit()).sum()', "    let mut sum: isize = 0;\n    let mut i = 0;\n\n   \
    \ while i < s.len() {\n        if s.chars()[i].is_uppercase() {\n            sum\
    \ += s.chars()[i].as_byte().unwrap().to_ascii_lowercase().unwrap();\n        \
    \    i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\n    sum",
  "    let mut sum = 0;\n\n    for i in s.chars() {\n        if i.is_upper() {\n \
    \           sum += i.code().unwrap();\n        }\n    }\n\n    sum", "    s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').sum()", '    digitSumHelper(s.chars(), 0, s.len(), s.len())',
  "    s.chars().filter(|c| c >= '0' && c <= '9').count()", "    s.chars()\n     \
    \   .filter(|c| c.is_ascii_uppercase())\n        .sum()", "    let mut sum = 0;\n\
    \    for i in s.chars() {\n        if *i < '0' || *i > '9' {\n            sum\
    \ += *i;\n        } else {\n            sum += *i as isize;\n        }\n    }\n\
    \    sum", "    let len = s.len();\n    char::from_code(s.chars().next().unwrap()).ascii_upper().sum()",
  "    let mut sum = 0;\n    for &c in &s {\n        sum = sum + c.as_digit(10);\n\
    \    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c >= '0' && c <= '9' {\n            sum += c - '0';\n        } else {\n    \
    \        return sum;\n        }\n    }\n\n    return sum;", "    let mut sum =\
    \ 0;\n    for (i, &c) in s.chars().enumerate() {\n        sum += if c >= 'A' &&\
    \ c <= 'Z' { c - 'A' + 1 } else { 0 };\n        if i % 2 == 0 { sum += c }\n \
    \   }\n    return sum", "    let len = s.len();\n    if len == 0 {\n        return\
    \ 0;\n    }\n    let mut res = 0;\n    for c in s.chars() {\n        res += c.to_ascii_uppercase().unwrap().to_digit(10).unwrap();\n\
    \    }\n    res", "    s.chars().filter(|c| c >= 'A' && c <= 'Z').sum()", "  \
    \  s.chars()\n        .filter(|c| *c >= 'a' && *c <= 'z')\n        .filter(|c|\
    \ *c >= 'A' && *c <= 'Z')\n        .sum()", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_upper() {\n            sum += c.to_digit(10);\n\
    \        }\n    }\n    sum", "    s.chars().filter_map(|c| match c {\n       \
    \ '0'...'9' => c.to_digit(10),\n        _ => 0,\n    }).sum::<isize>()", "   \
    \ let mut res = 0;\n    for i in s.chars() {\n        res += i.to_digit(10);\n\
    \    }\n    res", "    let mut accum = 0;\n    for &ch in s.chars() {\n      \
    \  if ch.is_uppercase() {\n            accum += ch.to_digit(10);\n        }\n\
    \    }\n    accum", "    let len = s.len();\n    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c < 'A' || c > 'Z' {\n            continue;\n      \
    \  }\n        sum += c - 'A';\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c >= 'A' && (c <= 'Z' || c == '_') {\n        \
    \    sum += (c - 'A') as isize;\n        }\n    }\n    sum", '    s.chars().sum();',
  '    digitSum_0(s)', "    // TODO: Optimize by removing mutable references?\n  \
    \  let mut sum = 0;\n    let mut i = 0;\n\n    while i < s.len() {\n        let\
    \ c = s[i]\n            .chars()\n            .filter(|c| c.is_uppercase())\n\
    \            .collect::<Vec<_>>()\n            .len();\n\n        sum += c;\n\
    \        i += 1;\n    }\n\n    sum", "    s.chars()\n        .filter(|c| c >=\
    \ 'a' && c <= 'z')\n        .map(|c| c as isize + ('A' as isize))\n        .sum()",
  "    s.chars().filter(|c| c >= '0' && c <= '9').sum()", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_upper() {\n            sum += c.to_digit(10);\n\
    \        }\n    }\n    sum", '    digitSum2(s.into_bytes()).0', "    let mut sum\
    \ = 0;\n    for (i, &ch) in s.chars().enumerate() {\n        if *ch >= '0' &&\
    \ *ch <= '9' {\n            sum += *ch as isize - '0';\n        }\n    }\n   \
    \ return sum;", '    digitSum(s, 0, String::from(""), 0)', "    if s.is_empty()\
    \ {\n        return 0\n    }\n\n    let mut sum = 0;\n    let mut s = s.to_string();\n\
    \    let mut i = 0;\n\n    while i < s.len() {\n        let c = s.chars().next().unwrap();\n\
    \        sum += c as isize - '0';\n        i += 1;\n    }\n\n    sum", '    digitSumHelper(s.as_bytes()).unwrap()',
  "    let mut total = 0;\n    let mut len = s.len();\n    let mut digits = HashSet::new();\n\
    \    let mut last_digit = 0;\n    while len > 0 {\n        last_digit = digits.get(s.chars().last().unwrap());\n\
    \        let digit = (s.chars().count() - 1 - last_digit).unwrap();\n        total\
    \ += digit;\n        digits.insert(digit);\n        len -= 1;\n    }\n    total",
  "    let mut accum: isize = s.chars().fold(0, |mut accum, c| {\n        let char\
    \ = c.to_ascii_lowercase();\n        accum + char::to_digit(char)\n    });\n \
    \   accum", "    let mut sum = 0 as isize;\n\n    for &c in s.chars() {\n    \
    \    if c.is_uppercase() {\n            sum += c.to_digit(10);\n        }\n  \
    \  }\n\n    sum", "    s.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()",
  "    s.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()", "    let mut sum = 0;\n\
    \    for c in s {\n        sum += c.to_ascii_digit().unwrap();\n    }\n    sum",
  "    let mut sum = 0;\n\n    for &c in s.chars() {\n        if c.is_upper() {\n\
    \            sum += c.code_point();\n        }\n    }\n\n    sum"]
stop_tokens:
- "\n}"
