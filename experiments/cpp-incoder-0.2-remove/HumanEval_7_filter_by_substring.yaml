name: HumanEval_7_filter_by_substring
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings\
  \ only for ones that contain given substring\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
  \ strings, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
  xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
  , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
  trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"\
  grunt\", (std::string)\"prune\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    for (auto &s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &str : strings) {\n       \
    \ if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for(auto &s : strings) {\n        if(s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto &string\
    \ : strings) {\n        if (string.find(substring) != std::string::npos) {\n \
    \           result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &str : strings) {\n        if (str.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(str);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto &string\
    \ : strings) {\n        if (string.find(substring) != std::string::npos) {\n \
    \           result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &string : strings) {\n        if(string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &str : strings) {\n        if(str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &str : strings) {\n\
    \        if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &str : strings) {\n       \
    \ if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &s : strings) {\n        if(s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &str : strings) {\n       \
    \ if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for(auto &str : strings) {\n        if(str.find(substring)\
    \ != std::string::npos) {\n            result.push_back(str);\n        }\n   \
    \ }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &str : strings) {\n        if(str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &str : strings) {\n       \
    \ if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for(auto\
    \ &s: strings) {\n        if(s.find(substring) != std::string::npos) {\n     \
    \       result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string &str : strings) {\n        if (str.find(substring)\
    \ != std::string::npos) {\n            result.push_back(str);\n        }\n   \
    \ }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &str : strings) {\n       \
    \ if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &str : strings) {\n        if(str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &str : strings) {\n        if(str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &str : strings) {\n        if (str.find(substring) != std::string::npos) {\n\
    \            result.push_back(str);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (auto &string : strings) {\n   \
    \     if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &str : strings) {\n       \
    \ if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for(auto &s : strings) {\n        if(s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    for (auto &s\
    \ : strings) {\n        if (s.find(substring) != std::string::npos) {\n      \
    \      result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &str : strings) {\n        if(str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
