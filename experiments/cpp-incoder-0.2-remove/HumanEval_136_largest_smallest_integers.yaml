name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a list.\n// If there is no negative or\
  \ positive integers, return them as None.\n// Examples:\nstd::tuple<std::optional<long>,\
  \ std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6})))\
  \ == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(a, b);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = 0, b = 0, c = 0, d = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = i;\n        } else if (i >\
    \ 0){\n            b = i;\n        }\n    }\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            c = i;\n        } else if (i > 0){\n            d\
    \ = i;\n        }\n    }\n    if (a > b) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    } else if (b > c) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    } else if (a > c) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    } else if (b > d) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    } else if (c > d) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    } else {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }", "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest), std::make_optional(smallest));",
  '    // Your code here', "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    auto it = std::max_element(lst.begin(), lst.end());\n\
    \    if (it == lst.end()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    auto it2 = std::min_element(lst.begin(), lst.end());\n    if (it2\
    \ == lst.end()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::distance(it, lst.end())),\
    \ std::optional<long>(std::distance(it2, lst.end())));", "    long a = 0, b =\
    \ 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i < 0) {\n         \
    \   if (a < 0)\n                a = i;\n        } else if (i > 0)\n          \
    \  if (b < 0)\n                b = i;\n            else\n                c = i;\n\
    \        else\n            d = i;\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0){\n    \
    \        largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    std::optional<long> max_val =\
    \ std::nullopt;\n    std::optional<long> min_val = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            max_val = i;\n        } else if\
    \ (i > 0 && max_val == std::nullopt) {\n            max_val = i;\n        } else\
    \ if (i > 0 && min_val == std::nullopt) {\n            min_val = i;\n        }\n\
    \    }\n    return std::make_tuple(max_val, min_val);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (long i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long a = 0, b = 0, c = 0, d = 0;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = i;\n        }\
    \ else if (i > 0)\n            b = i;\n        else\n            c = i;\n    }\n\
    \    if (a > b)\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    if (b < c)\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  '    // Your code here', "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        }\n        else if (i > 0)\n   \
    \         if (largest_positive > 0)\n                largest_positive = i;\n \
    \   }\n    return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    std::optional<long> largest = std::nullopt;\n    std::optional<long> smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::max(largest, i);\n            }\n   \
    \     } else {\n            if (smallest == std::nullopt) {\n                smallest\
    \ = i;\n            } else {\n                smallest = std::min(smallest, i);\n\
    \            }\n        }\n    }\n    return std::make_tuple(largest, smallest);",
  "    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    long smallest_positive = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ > i) {\n                largest_negative = i;\n            }\n        } else\
    \ if (i > 0) {\n            if (largest_positive < i) {\n                largest_positive\
    \ = i;\n            }\n        } else {\n            if (smallest_positive > i)\
    \ {\n                smallest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    // Write your code here\n    std::optional<long> max_val = std::nullopt;\n\
    \    std::optional<long> min_val = std::nullopt;\n    for (long i : lst) {\n \
    \       if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n \
    \           min_val = i;\n        }\n    }\n    return std::make_tuple(max_val,\
    \ min_val);", "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = i;\n        }\
    \ else if (i > 0){\n            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    std::optional<long> max_val = std::nullopt;\n\
    \    std::optional<long> min_val = std::nullopt;\n    for (auto i : lst) {\n \
    \       if (i < 0) {\n            max_val = i;\n        } else if (i > max_val)\
    \ {\n            max_val = i;\n        }\n        if (i < 0) {\n            min_val\
    \ = i;\n        } else if (i > min_val) {\n            min_val = i;\n        }\n\
    \    }\n    return std::make_tuple(max_val, min_val);", "    long max_negative\
    \ = std::numeric_limits<long>::min();\n    long min_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_negative = i;\n\
    \        } else if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        } else if (i > 0){\n            b = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < 0) {\n            c = i;\n \
    \       } else if (i > 0){\n            d = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    std::optional<long> max_val = std::nullopt;\n\
    \    std::optional<long> min_val = std::nullopt;\n    for (auto i : lst) {\n \
    \       if (i < 0) {\n            max_val = i;\n        } else if (i > 0) {\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(max_val,\
    \ min_val);", "    std::optional<long> largest;\n    std::optional<long> smallest;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > 0 && i < largest) {\n            smallest = i;\n       \
    \ }\n    }\n    return std::make_tuple(largest, smallest);", '    // Your code
    here', "    long largest = std::numeric_limits<long>::max();\n    long smallest\
    \ = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            largest = i;\n        } else if (i > largest) {\n      \
    \      largest = i;\n        }\n        if (i < 0) {\n            smallest = i;\n\
    \        } else if (i > smallest) {\n            smallest = i;\n        }\n  \
    \  }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0)\n         \
    \   min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", '    // Your code here', "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (long i : lst) {\n        if (i < 0)\
    \ {\n            a = i;\n        } else if (i > 0)\n            b = i;\n    }\n\
    \    return std::make_tuple(a, b);", "    std::optional<long> max_val = std::nullopt;\n\
    \    std::optional<long> min_val = std::nullopt;\n    for (auto i : lst) {\n \
    \       if (i < 0) {\n            max_val = i;\n        } else if (i > 0) {\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(max_val,\
    \ min_val);", "    long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            a = i;\n        } else if (i > 0){\n      \
    \      b = i;\n        } else {\n            c = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            d = i;\n        } else if\
    \ (i > 0){\n            c = i;\n        } else {\n            b = i;\n       \
    \ }\n    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    std::optional<long>\
    \ a;\n    std::optional<long> b;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            a = i;\n        } else if (i > 0){\n            b = i;\n    \
    \    }\n    }\n    return std::make_tuple(a, b);", '    // Your code here', '    //
    Your code here', '    // Your code here', '    // Your code here', "    std::optional<long>\
    \ largest;\n    std::optional<long> smallest;\n    for (long i : lst) {\n    \
    \    if (i < 0) {\n            largest = i;\n        } else if (i > 0 && i < largest)\
    \ {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(largest,\
    \ smallest);", "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > 0){\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest),\
    \ std::make_optional(smallest));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n\
    \    auto smallest = std::min_element(lst.begin(), lst.end());\n    if (largest\
    \ == lst.end()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    if (smallest == lst.end()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::optional<long>(largest->second),\
    \ std::optional<long>(smallest->second));", "    std::optional<long> max_val =\
    \ std::nullopt;\n    std::optional<long> min_val = std::nullopt;\n    for (auto\
    \ val : lst) {\n        if (val < 0) {\n            max_val = val;\n        }\
    \ else if (val > 0) {\n            min_val = val;\n        }\n    }\n    return\
    \ std::make_tuple(max_val, min_val);", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest), std::make_optional(smallest));",
  "    std::optional<long> largest;\n    std::optional<long> smallest;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest = i;\n        } else if\
    \ (i > 0 && i < largest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(largest, smallest);", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    if (smallest == lst.end()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end())));", "  \
    \  long a = 0, b = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            a = std::max(a, i);\n        } else if (i >\
    \ b) {\n            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", '    // Your code here', "    // Write your code\
    \ here\n    std::optional<long> largest;\n    std::optional<long> smallest;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > 0 && i < largest) {\n            smallest = i;\n       \
    \ }\n    }\n    return std::make_tuple(largest, smallest);", "    long a = 0,\
    \ b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n     \
    \       a = i;\n        } else if (i > 0){\n            b = i;\n        } else\
    \ {\n            c = i;\n        }\n    }\n    if (c > d) {\n        return std::make_tuple(std::nullopt,\
    \ b);\n    } else {\n        return std::make_tuple(std::nullopt, a);\n    }",
  "    std::optional<long> max_int;\n    std::optional<long> min_int;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            max_int = i;\n        } else if\
    \ (i > 0){\n            min_int = i;\n        }\n    }\n    return std::make_tuple(max_int,\
    \ min_int);", "    long max_val = std::numeric_limits<long>::min();\n    long\
    \ min_val = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n    \
    \    if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n    \
    \        min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    if (lst.size() == 0) {\n        return\
    \ std::make_tuple(std::nullopt, std::nullopt);\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end() && smallest == lst.end()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::optional<long>(largest->second),\
    \ std::optional<long>(smallest->second));", '    // Your code here', "    long\
    \ a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n\
    \            if (a < 0)\n                a = i;\n        } else if (i > 0)\n \
    \           if (b > 0)\n                b = i;\n            else\n           \
    \     c = i;\n        else\n            d = i;\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = 0, b = 0;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            a = std::max(a, i);\n        } else if (i >\
    \ 0){\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", '    // Your code here', "    std::optional<long>\
    \ max_val;\n    std::optional<long> min_val;\n    for (auto i : lst) {\n     \
    \   if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n     \
    \       min_val = i;\n        }\n    }\n    return std::make_tuple(max_val, min_val);",
  "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    if (largest == lst.end())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    if\
    \ (smallest == lst.end()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end())));", "  \
    \  // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        } else if (i > 0)\n            if\
    \ (largest_positive > 0)\n                largest_positive = i;\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    std::optional<long> max_val = std::nullopt;\n    std::optional<long> min_val\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  max_val = i;\n        } else if (i > 0) {\n            min_val = i;\n     \
    \   }\n    }\n    return std::make_tuple(max_val, min_val);", "    long a = 0,\
    \ b = 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i < 0) {\n     \
    \       a = i;\n        } else if (i > 0){\n            b = i;\n        } else\
    \ {\n            c = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < 0) {\n            d = i;\n        } else if (i > 0){\n            c = i;\n\
    \        } else {\n            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b), std::optional<long>(c), std::optional<long>(d));", " \
    \   long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ max_negative = std::numeric_limits<long>::min();\n    long min_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_negative = i;\n\
    \        } else if (i > 0) {\n            min_positive = i;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(max_negative), std::optional<long>(min_positive));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n        \
    \    b = std::min(b, i);\n        } else {\n            c = std::max(c, i);\n\
    \            d = std::min(d, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    std::optional<long> max_int;\n    std::optional<long>\
    \ min_int;\n    for (long i : lst) {\n        if (i < 0) {\n            max_int\
    \ = i;\n        } else if (i > 0) {\n            min_int = i;\n        }\n   \
    \ }\n    return std::make_tuple(max_int, min_int);", "    // Write your code here\n\
    \    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            if (largest_negative < i) {\n                largest_negative\
    \ = i;\n            }\n        } else {\n            if (largest_positive > i)\
    \ {\n                largest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ max_negative = std::numeric_limits<long>::min();\n    long min_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_negative = i;\n\
    \        } else if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > 0){\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest),\
    \ std::make_optional(smallest));", "    std::optional<long> largest;\n    std::optional<long>\
    \ smallest;\n    for(long i : lst) {\n        if (i < 0) {\n            largest\
    \ = i;\n        } else if (i > 0 && i < largest) {\n            smallest = i;\n\
    \        }\n    }\n    return std::make_tuple(largest, smallest);", "    // Write\
    \ your code here\n    long largest = std::numeric_limits<long>::max();\n    long\
    \ smallest = std::numeric_limits<long>::min();\n    for (long i : lst) {\n   \
    \     if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = 0, b = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            a = std::max(a, i);\n        } else if (i >\
    \ b) {\n            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long a = 0, b = 0, c = 0, d = 0;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (a < 0)\n    \
    \            a = i;\n        } else if (i > 0)\n            if (b < 0)\n     \
    \           b = i;\n            else\n                c = i;\n        else\n \
    \           d = i;\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = 0, b = 0;\n    for (auto i : lst) {\n\
    \        if (i < 0) {\n            a = std::max(a, i);\n        } else {\n   \
    \         b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for(auto i\
    \ : lst) {\n        if(i<0) {\n            if(i>largest_negative) {\n        \
    \        largest_negative = i;\n            }\n        } else {\n            if(i>largest_positive)\
    \ {\n                largest_positive = i;\n            }\n        }\n    }\n\
    \    return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    std::optional<long>\
    \ max;\n    std::optional<long> min;\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            max = std::max(*max, i);\n        } else if (i > 0){\n \
    \           min = std::min(*min, i);\n        } else {\n            max = std::max(*max,\
    \ i);\n            min = std::min(*min, i);\n        }\n    }\n    return std::make_tuple(max,\
    \ min);", "    long largest = std::numeric_limits<long>::max();\n    long smallest\
    \ = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            largest = i;\n        } else if (i > 0)\n            smallest\
    \ = i;\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::nullopt,\
    \ std::nullopt);", "    if (lst.size() == 0) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>(std::nullopt, std::nullopt);\n    }\n    long largest =\
    \ *std::max_element(lst.begin(), lst.end());\n    long smallest = *std::min_element(lst.begin(),\
    \ lst.end());\n    return std::tuple<std::optional<long>, std::optional<long>>(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    // Write your code here\n    long\
    \ largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", '    // Your code here', '    // Your code
    here', "    long a = 0, b = 0, smallest = 0, largest = 0;\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            a = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        } else if (i < smallest) {\n          \
    \  smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\
    \ {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    std::optional<long> largest;\n    std::optional<long>\
    \ smallest;\n    for (long i : lst) {\n        if (i < 0) {\n            largest\
    \ = i;\n        } else if (i > 0 && i < largest) {\n            smallest = i;\n\
    \        }\n    }\n    return std::make_tuple(largest, smallest);", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > 0) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    long smallest_negative\
    \ = std::numeric_limits<long>::max();\n    long smallest_positive = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  } else {\n            smallest_negative = i;\n            smallest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive), std::make_optional(smallest_negative),\
    \ std::make_optional(smallest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\n\
    \            b = std::min(b, i);\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = 0, b = 0, c = 0, d = 0;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0)\n            a = std::max(a,\
    \ lst[i]);\n        else if (lst[i] > 0)\n            b = std::min(b, lst[i]);\n\
    \        else\n            c = std::max(c, lst[i]);\n        d = std::min(d, lst[i]);\n\
    \    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            a = i;\n        } else if (i > 0){\n            b = i;\n \
    \       }\n    }\n    for (auto i : lst) {\n        if (i < 0) {\n           \
    \ c = i;\n        } else if (i > 0){\n            d = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  '    // Your code here', "    if (lst.size() == 0) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    auto largest = *std::max_element(lst.begin(), lst.end());\n\
    \    auto smallest = *std::min_element(lst.begin(), lst.end());\n    return std::make_tuple(largest,\
    \ smallest);", "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    std::optional<long>\
    \ largest = std::nullopt;\n    std::optional<long> smallest = std::nullopt;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt)\
    \ {\n                largest = i;\n            } else {\n                largest\
    \ = std::max<long>(largest, i);\n            }\n        } else if (i > 0 && smallest\
    \ == std::nullopt) {\n            smallest = i;\n        } else {\n          \
    \  smallest = std::min<long>(smallest, i);\n        }\n    }\n    return std::make_tuple(largest,\
    \ smallest);", "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    std::optional<long> max_int;\n    std::optional<long> min_int;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            max_int = i;\n        } else if\
    \ (i > 0){\n            min_int = i;\n        }\n    }\n    return std::make_tuple(max_int,\
    \ min_int);", "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            if (a < 0)\n                a = i;\n        } else if (i >\
    \ 0)\n            if (b < 0)\n                b = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            if (c < 0)\n           \
    \     c = i;\n        } else if (i > 0)\n            if (d < 0)\n            \
    \    d = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    std::optional<long> max;\n    std::optional<long>\
    \ min;\n    for (long i : lst) {\n        if (i < 0) {\n            max = std::max(*max,\
    \ i);\n        } else if (i > 0){\n            min = std::min(*min, i);\n    \
    \    }\n    }\n    return std::make_tuple(max, min);", "    std::optional<long>\
    \ max_int;\n    std::optional<long> min_int;\n    for (long i : lst) {\n     \
    \   if (i < 0) {\n            max_int = i;\n        } else if (i > 0){\n     \
    \       min_int = i;\n        }\n    }\n    return std::make_tuple(max_int, min_int);",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            max_val = std::max<long>(max_val,\
    \ i);\n        } else if (i > 0){\n            min_val = std::min<long>(min_val,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\
    \ {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for(long i : lst) {\n        if(i < 0) {\n            largest_negative =\
    \ i;\n        }\n        else if(i > 0){\n            largest_positive = i;\n\
    \        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = i;\n        }\
    \ else if (i > 0){\n            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n\
    \    auto smallest = std::min_element(lst.begin(), lst.end());\n    if (largest\
    \ == lst.end() && smallest == lst.end()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end())));", "  \
    \  long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ largest_negative = 0, largest_positive = 0;\n    long smallest_negative = std::numeric_limits<long>::max(),\
    \ smallest_positive = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            if (largest_negative < 0)\n           \
    \     largest_negative = i;\n            else\n                smallest_negative\
    \ = i;\n        } else {\n            if (largest_positive < 0)\n            \
    \    largest_positive = i;\n            else\n                smallest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive), std::make_optional(smallest_negative),\
    \ std::make_optional(smallest_positive));", "    long a = 0, b = 0, c = 0, d =\
    \ 0;\n    for (auto i : lst) {\n        if (i < 0) {\n            a = i;\n   \
    \     } else if (i > 0){\n            b = i;\n        } else {\n            c\
    \ = i;\n        }\n    }\n    for (auto i : lst) {\n        if (i < 0) {\n   \
    \         d = i;\n        } else if (i > 0){\n            c = i;\n        } else\
    \ {\n            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0){\n            min_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a, b);",
  "    if (lst.size() == 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    if (largest == lst.end())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    if\
    \ (smallest == lst.end()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end())));", "  \
    \  long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0)\n         \
    \   min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::optional<long> max_int;\n    std::optional<long>\
    \ min_int;\n    for (long i : lst) {\n        if (i < 0) {\n            max_int\
    \ = i;\n        } else if (i > 0){\n            min_int = i;\n        }\n    }\n\
    \    return std::make_tuple(max_int, min_int);", '    // Your code here', "  \
    \  long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    std::optional<long> max_val =\
    \ std::nullopt;\n    std::optional<long> min_val = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            max_val = i;\n        } else if\
    \ (i > 0) {\n            min_val = i;\n        }\n    }\n    return std::make_tuple(max_val,\
    \ min_val);", "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = 0, b = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n            a\
    \ = std::max(a, i);\n        } else if (i > 0){\n            b = std::min(b, i);\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    if (lst.size() == 0) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(a,\
    \ b);", "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else if (i >\
    \ largest_positive) {\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else {\n    \
    \        if (largest_positive > i) {\n                largest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    std::optional<long> max_val =\
    \ std::nullopt;\n    std::optional<long> min_val = std::nullopt;\n    for (auto\
    \ val : lst) {\n        if (val < 0) {\n            max_val = std::max(max_val,\
    \ val);\n        } else if (val > 0) {\n            min_val = std::min(min_val,\
    \ val);\n        } else {\n            return std::make_tuple(max_val, min_val);\n\
    \        }\n    }\n    return std::make_tuple(max_val, min_val);", '    // Your
    code here', "    long a = 0, b = 0, max_val = 0, min_val = INT_MAX;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = i;\n        } else if (i >\
    \ max_val) {\n            max_val = i;\n        } else if (i < min_val) {\n  \
    \          min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(max_val));", '    // Your code here', "    long a = 0, b\
    \ = 0, c = 0, d = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if\
    \ (lst[i] < 0) {\n            a = std::max(a, lst[i]);\n        } else if (lst[i]\
    \ > 0) {\n            b = std::min(b, lst[i]);\n        } else {\n           \
    \ c = std::max(c, lst[i]);\n            d = std::min(d, lst[i]);\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            a = i;\n        } else if (i > 0){\n            b = i;\n \
    \       } else {\n            c = i;\n        }\n    }\n    if (a > b) {\n   \
    \     d = a;\n    } else {\n        d = b;\n    }\n    if (c > d) {\n        d\
    \ = c;\n    } else {\n        d = a;\n    }\n    return std::make_tuple(std::optional<long>(d),\
    \ std::optional<long>(a));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\
    \ {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\
    \ {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>();\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end() && smallest == lst.end()) {\n        return std::tuple<std::optional<long>,\
    \ std::optional<long>>();\n    }\n    return std::tuple<std::optional<long>, std::optional<long>>(largest,\
    \ smallest);", "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0){\n            b = std::min(b, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    std::optional<long> largest;\n    std::optional<long> smallest;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest.has_value()) {\n \
    \               smallest = largest;\n                largest = std::nullopt;\n\
    \            } else {\n                largest = i;\n            }\n        }\
    \ else if (i > 0 && smallest.has_value()) {\n            smallest = i;\n     \
    \   }\n    }\n    return std::make_tuple(largest, smallest);", "    long a = 0,\
    \ b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n     \
    \       if (a < 0)\n                a = i;\n        } else if (i > 0)\n      \
    \      if (b < 0)\n                b = i;\n            else\n                c\
    \ = i;\n        else\n            d = i;\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\
    \ {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = 0, b = 0, c = 0, d = 0;\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            a = i;\n        } else if (i >\
    \ 0){\n            b = i;\n        }\n    }\n    for (auto i : lst) {\n      \
    \  if (i < 0) {\n            c = i;\n        } else if (i > 0){\n            d\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest), std::make_optional(smallest));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0)\n            b = std::min(b, i);\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    std::optional<long>\
    \ max_val = std::nullopt;\n    std::optional<long> min_val = std::nullopt;\n \
    \   for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n   \
    \     } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(max_val, min_val);", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ > i) {\n                largest_negative = i;\n            }\n        } else\
    \ if (i > 0) {\n            if (largest_positive < i) {\n                largest_positive\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    std::optional<long> max_val =\
    \ std::nullopt;\n    std::optional<long> min_val = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            max_val = i;\n        } else if\
    \ (i > 0){\n            min_val = i;\n        }\n    }\n    return std::make_tuple(max_val,\
    \ min_val);", "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Write\
    \ your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    std::optional<long> max_val = std::nullopt;\n    std::optional<long> min_val\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  max_val = i;\n        } else if (i > 0) {\n            min_val = i;\n     \
    \   }\n    }\n    return std::make_tuple(max_val, min_val);", "    std::optional<long>\
    \ max_val;\n    std::optional<long> min_val;\n    for (long i : lst) {\n     \
    \   if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n     \
    \       min_val = i;\n        }\n    }\n    return std::make_tuple(max_val, min_val);",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::make_optional(largest), std::make_optional(smallest));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n        \
    \    b = std::min(b, i);\n        } else {\n            c = std::max(c, i);\n\
    \            d = std::min(d, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::nullopt, std::nullopt);", "    //\
    \ Write your code here\n    long a = 0, b = 0, c = 0, d = 0;\n    for (auto i\
    \ : lst) {\n        if (i < 0) {\n            a = i;\n        } else if (i > 0){\n\
    \            b = i;\n        } else {\n            c = i;\n        }\n    }\n\
    \    if (a > b) {\n        d = a;\n    } else {\n        d = b;\n    }\n    if\
    \ (c > d) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n   \
    \ } else {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  '    // Your code here', "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0){\n\
    \            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", '    // Your code here', "    long a = 0, b = 0,\
    \ c = 0, d = 0;\n    for (auto i : lst) {\n        if (i < 0) {\n            a\
    \ = i;\n        } else if (i > 0){\n            b = i;\n        } else {\n   \
    \         c = i;\n        }\n    }\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            d = i;\n        } else if (i > 0){\n            c = i;\n \
    \       } else {\n            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.size() == 0) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n\
    \    auto smallest = std::min_element(lst.begin(), lst.end());\n    if (largest\
    \ == lst.end() && smallest == lst.end()) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    return std::make_tuple(std::optional<long>(std::distance(largest,\
    \ smallest)), std::optional<long>(std::distance(smallest, lst.end())));", "  \
    \  long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            a = i;\n        } else if (i > 0){\n            b = i;\n \
    \       } else {\n            c = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            d = i;\n        } else if (i > 0){\n  \
    \          c = i;\n        } else {\n            b = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(a), std::optional<long>(b));", " \
    \   // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0)\n         \
    \   min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", '    // Your code here', "    long a =\
    \ std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0) {\n            b = std::min(b, i);\n        }\n   \
    \ }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Write\
    \ your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::make_optional(largest_negative), std::make_optional(largest_positive));",
  "    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0)\n     \
    \       largest_positive = i;\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    // Write your code here\n    long\
    \ largest_negative = 0, largest_positive = 0;\n    long smallest_negative = std::numeric_limits<long>::max(),\
    \ smallest_positive = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest_negative = i;\n        } else if\
    \ (i > 0){\n            largest_positive = i;\n        } else {\n            smallest_negative\
    \ = i;\n            smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive), std::make_optional(smallest_negative),\
    \ std::make_optional(smallest_positive));", "    long a = 0, b = 0, smallest =\
    \ std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            a = i;\n        } else if (i > smallest) {\n            b\
    \ = smallest;\n            smallest = i;\n        } else {\n            b = i;\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0) {\n   \
    \         largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    long smallest_positive = std::numeric_limits<long>::max();\n\
    \    long smallest_negative = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0){\n            largest_positive = i;\n        } else {\n \
    \           smallest_positive = i;\n        }\n        if (i < 0) {\n        \
    \    smallest_negative = i;\n        }\n    }\n    return std::make_tuple(std::make_optional(largest_negative),\
    \ std::make_optional(largest_positive), std::make_optional(smallest_positive),\
    \ std::make_optional(smallest_negative));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    std::optional<long> max_val = std::nullopt;\n\
    \    std::optional<long> min_val = std::nullopt;\n    for (auto i : lst) {\n \
    \       if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n \
    \           min_val = i;\n        }\n    }\n    return std::make_tuple(max_val,\
    \ min_val);", "    long a = 0, b = 0, largest = std::nullopt, biggest = std::nullopt;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            if (a < 0)\n    \
    \            a = i;\n        } else if (i > 0)\n            if (b < 0)\n     \
    \           b = i;\n            else\n                largest = std::make_optional(std::max(a,\
    \ i));\n            else\n                biggest = std::make_optional(std::min(b,\
    \ i));\n    }\n    return std::make_tuple(largest, biggest);"]
stop_tokens:
- "\n}"
