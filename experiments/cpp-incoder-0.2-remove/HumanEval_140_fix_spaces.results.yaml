language: cpp
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('\
    \  ') != std::string::npos) {\n        std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpitzv5sry.cpp:8:19: warning: multi-character character constant\
    \ [-Wmultichar]\n    8 |     if (text.find('  ') != std::string::npos) {\n   \
    \   |                   ^~~~\n/tmp/tmpitzv5sry.cpp:9:48: warning: multi-character\
    \ character constant [-Wmultichar]\n    9 |         std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n      |                                           \
    \     ^~~~\n/tmp/tmpitzv5sry.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpitzv5sry.cpp:8:19: warning: overflow in conversion from \u2018int\u2019\
    \ to \u2018char\u2019 changes value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n\
    \    8 |     if (text.find('  ') != std::string::npos) {\n      |            \
    \       ^~~~\n/tmp/tmpitzv5sry.cpp:9:57: error: no matching function for call\
    \ to \u2018replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n    9 |         std::replace(text.begin(), text.end(), ' \
    \ ', '-');\n      |                                                         ^\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpitzv5sry.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note: candidate:\
    \ \u2018template<class _FIter, class _Tp> void std::replace(_FIter, _FIter, const\
    \ _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpitzv5sry.cpp:9:57:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |         std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n      |                                                       \
    \  ^\nIn file included from /usr/include/c++/9/algorithm:71,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n              \
    \   from /tmp/tmpitzv5sry.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _"
  stdout: ''
  timestamp: 1660133013
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2 && s[s.size() - 2] == ' ' && s[s.size() - 1] ==\
    \ ' ') {\n        s.replace(s.size() - 2, s.size() - 1, '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputtuunzn.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmputtuunzn.cpp:10:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   10 |         s.replace(s.size()\
    \ - 2, s.size() - 1, '-');\n      |                                          \
    \        ^\nIn file included from /usr/include/c++/9/string:55,\n            \
    \     from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmputtuunzn.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmputtuunzn.cpp:10:47:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   10 |         s.replace(s.size() - 2, s.size() - 1, '-');\n      |        \
    \                                       ^~~\n      |                         \
    \                      |\n      |                                            \
    \   char\nIn file included from /usr/inc"
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        size_t next = s.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        s.replace( pos, next - pos,\
    \ \"_\" );\n        pos = next + 1;\n    }\n    if (s.size() > 2) {\n        size_t\
    \ prev = s.find(' ', pos);\n        if (prev == std::string::npos) {\n       \
    \     prev = s.size() - 1;\n        }\n        s.replace( prev, s.size() - prev,\
    \ \"-\" );\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpiwa1_qaq: /tmp/tmpiwa1_qaq.cpp:28: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if(found == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\"\
    );\n            pos = found + 1;\n        }\n    }\n    return fixed_text;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n    }\n    size_t pos2 = result.find_first_not_of(\" \", pos);\n\
    \    while (pos2 != std::string::npos) {\n        result.replace(pos2, 1, \"-\"\
    );\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    size_t\
    \ len = fixed_text.size();\n    while (pos < len) {\n        size_t next_space\
    \ = fixed_text.find(' ', pos);\n        if (next_space == std::string::npos) {\n\
    \            fixed_text.replace(pos, 1, \" \");\n            pos += 1;\n     \
    \   } else {\n            fixed_text.replace(pos, 1, \" \");\n            pos\
    \ = next_space + 1;\n        }\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpcf4t63b0: /tmp/tmpcf4t63b0.cpp:24: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = \"\";\n    size_t pos = 0;\n    while(pos\
    \ < text.length()) {\n        pos = text.find(\"  \", pos);\n        if(pos !=\
    \ std::string::npos) {\n            fixed_text += text.substr(0, pos);\n     \
    \       fixed_text += \"_\";\n            pos = pos + 2;\n        }\n        else\
    \ {\n            fixed_text += text.substr(pos);\n        }\n    }\n    return\
    \ fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\" \"\
    , pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n     \
    \   pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n        pos++;\n    }\n    while(result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \" \");\n \
    \       pos++;\n    }\n    while(result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpne_uf9xc.cpp:74:32: warning: missing terminating \" character\n\
    \   74 |         result.replace(pos, 1, \"\n      |                          \
    \      ^\n/tmp/tmpne_uf9xc.cpp:74:32: error: missing terminating \" character\n\
    \   74 |         result.replace(pos, 1, \"\n      |                          \
    \      ^ \n/tmp/tmpne_uf9xc.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpne_uf9xc.cpp:75:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   75 | }\n      | ^\n/tmp/tmpne_uf9xc.cpp:76:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   76 | int main() {\n     \
    \ |            ^\n/tmp/tmpne_uf9xc.cpp:83:1: error: expected \u2018}\u2019 at\
    \ end of input\n   83 | }\n      | ^\n/tmp/tmpne_uf9xc.cpp:6:42: note: to match\
    \ this \u2018{\u2019\n    6 | std::string fix_spaces(std::string text) {\n   \
    \   |                                          ^\n/tmp/tmpne_uf9xc.cpp:83:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   83 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('\
    \  ') != std::string::npos) {\n        std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpitzv5sry.cpp:8:19: warning: multi-character character constant\
    \ [-Wmultichar]\n    8 |     if (text.find('  ') != std::string::npos) {\n   \
    \   |                   ^~~~\n/tmp/tmpitzv5sry.cpp:9:48: warning: multi-character\
    \ character constant [-Wmultichar]\n    9 |         std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n      |                                           \
    \     ^~~~\n/tmp/tmpitzv5sry.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpitzv5sry.cpp:8:19: warning: overflow in conversion from \u2018int\u2019\
    \ to \u2018char\u2019 changes value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n\
    \    8 |     if (text.find('  ') != std::string::npos) {\n      |            \
    \       ^~~~\n/tmp/tmpitzv5sry.cpp:9:57: error: no matching function for call\
    \ to \u2018replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n    9 |         std::replace(text.begin(), text.end(), ' \
    \ ', '-');\n      |                                                         ^\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpitzv5sry.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note: candidate:\
    \ \u2018template<class _FIter, class _Tp> void std::replace(_FIter, _FIter, const\
    \ _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpitzv5sry.cpp:9:57:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |         std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n      |                                                       \
    \  ^\nIn file included from /usr/include/c++/9/algorithm:71,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n              \
    \   from /tmp/tmpitzv5sry.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    size_t pos2 = result.find_first_not_of(\"\
    \ \", pos);\n    while(pos2 != std::string::npos) {\n        result.replace(pos2,\
    \ 1, \"-\");\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp09ow6c81: /tmp/tmp09ow6c81.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    if (result.size() > 2) {\n        pos\
    \ = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, \" \");\n            pos++;\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqhhkuxv6: /tmp/tmpqhhkuxv6.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" _ \")\n        s.replace(s.begin(),\
    \ s.begin() + 2, \" -\");\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp58i6qnzd: /tmp/tmp58i6qnzd.cpp:18: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        size_t next = result.find_first_of(' ', pos);\n\
    \        if(next == std::string::npos) {\n            next = result.length();\n\
    \        }\n        result.replace(pos, next - pos, \"_\");\n        pos = next\
    \ + 1;\n    }\n    if(result.length() > 2) {\n        size_t pos = 0;\n      \
    \  while(pos < result.length()) {\n            size_t next = result.find_first_of('\
    \ ', pos);\n            if(next == std::string::npos) {\n                next\
    \ = result.length();\n            }\n            result.replace(pos, next - pos,\
    \ \"-\");\n            pos = next + 1;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpkzo6wcnp: /tmp/tmpkzo6wcnp.cpp:32: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n    }\n    if (result.size() > 2) {\n        pos = 0;\n        while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxvmgbj87: /tmp/tmpxvmgbj87.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    size_t pos = 0;\n    size_t prev\
    \ = 0;\n    while(pos < fixed.length()) {\n        pos = fixed.find_first_of('\
    \ ', prev);\n        if(pos == fixed.length()) break;\n        fixed.replace(pos,\
    \ 1, \" \");\n        prev = pos + 1;\n    }\n    pos = fixed.find_first_of('\
    \ ');\n    while(pos != fixed.length()) {\n        fixed.replace(pos, 1, \" \"\
    );\n        pos = fixed.find_first_of(' ', pos + 1);\n    }\n    return fixed;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133014
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if(pos != std::string::npos) {\n            result.replace(pos, 1, \"\
    \ \");\n        }\n    }\n    pos = 0;\n    while(pos < result.length()) {\n \
    \       pos = result.find_first_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while(pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while(pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    while((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, \" \");\n        pos++;\n\
    \    }\n    while((pos = result.find(\"  \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, \"-\");\n        pos++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp2kg1wgsm: /tmp/tmp2kg1wgsm.cpp:26: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t next_pos = fixed_text.find(' ', pos);\n\
    \        if(next_pos == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" \");\n\
    \            fixed_text.replace(next_pos, 1, \"-\");\n        }\n        pos =\
    \ next_pos + 1;\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmplbvn4aej: /tmp/tmplbvn4aej.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \"\
    \ \");\n        pos++;\n    }\n    while((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.replace(pos, 1, \" \");\n        pos++;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpvn3eo1lx: /tmp/tmpvn3eo1lx.cpp:22: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    std::replace(out.begin(), out.end(),\
    \ ' ', '_');\n    if (out.size() > 2) {\n        std::replace(out.begin(), out.end(),\
    \ ' ', '-');\n    }\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpq9dtgmcu: /tmp/tmpq9dtgmcu.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpcl17657g: /tmp/tmpcl17657g.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        size_t next = find_if(result.begin() + pos, result.end(),\
    \ [](char ch) {\n            return !std::isspace(ch);\n        });\n        if\
    \ (next == result.end()) {\n            break;\n        }\n        size_t prev\
    \ = find_if(result.begin(), result.begin() + next, [](char ch) {\n           \
    \ return !std::isspace(ch);\n        });\n        if (prev == result.begin())\
    \ {\n            pos = next;\n        } else {\n            size_t len = next\
    \ - prev;\n            if (len > 2) {\n                pos = prev;\n         \
    \       while (pos < result.length() && result[pos] == ' ') {\n              \
    \      pos++;\n                }\n                while (pos < result.length()\
    \ && result[pos] == '-') {\n                    pos++;\n                }\n  \
    \              result.erase(prev, len);\n            } else {\n              \
    \  pos = next;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsosvdf_5.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpsosvdf_5.cpp:10:30: error: cannot convert \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018size_t\u2019 {aka \u2018long\
    \ unsigned int\u2019} in initialization\n   10 |         size_t next = find_if(result.begin()\
    \ + pos, result.end(), [](char ch) {\n      |                       ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                              |\n      |                             \
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\n   11\
    \ |             return !std::isspace(ch);\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \   12 |         });\n      |         ~~                    \n/tmp/tmpsosvdf_5.cpp:13:18:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018size_t\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   13 |         if (next == result.end()) {\n      |            \
    \ ~~~~ ^~ ~~~~~~~~~~~~\n      |             |                 |\n      |     \
    \        |                 std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >}\n      |             size_t {aka long unsigned\
    \ int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n   \
    \              from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsosvdf_5.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl"
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    for(size_t i = 0; i < out.size();\
    \ i++) {\n        if(out[i] == ' ') {\n            out[i] = '_';\n        }\n\
    \    }\n    size_t count = 0;\n    for(size_t i = 0; i < out.size(); i++) {\n\
    \        if(out[i] == ' ') {\n            count++;\n        }\n        if(count\
    \ == 2) {\n            out[i] = '-';\n            count = 0;\n        }\n    }\n\
    \    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmptq92y4dq: /tmp/tmptq92y4dq.cpp:30: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxvmgbj87: /tmp/tmpxvmgbj87.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    for(auto &c: out) {\n        if(c\
    \ == ' ') {\n            c = '_';\n        }\n    }\n    for(auto &c: out) {\n\
    \        if(c == ' ' && out.size() > 2) {\n            c = '-';\n        }\n \
    \   }\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n  \
    \  assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpb0qjgmcz: /tmp/tmpb0qjgmcz.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size()\
    \ > 2) {\n        std::replace(text.begin(), text.end(), ' ', '-');\n    }\n \
    \   return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmps3768bfs: /tmp/tmps3768bfs.cpp:18: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    for(size_t i = 0; i < out.size();\
    \ i++) {\n        if(out[i] == ' ') {\n            out[i] = '_';\n        }\n\
    \    }\n    for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' '\
    \ && out[i+1] == ' ') {\n            out[i] = '-';\n        }\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpz2qhidxx: /tmp/tmpz2qhidxx.cpp:25: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = \"\";\n    size_t pos = 0;\n    size_t\
    \ prev = 0;\n    while(pos < text.size()) {\n        size_t next = text.find_first_of('\
    \ ', pos);\n        if(next == std::string::npos) {\n            fixed_text +=\
    \ text.substr(pos);\n            break;\n        }\n        fixed_text += text.substr(prev,\
    \ next - prev);\n        fixed_text += \"_\";\n        pos = next + 1;\n     \
    \   prev = next;\n    }\n    if(pos < text.size()) {\n        fixed_text += text.substr(pos);\n\
    \    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4c_4ixkx: /tmp/tmp4c_4ixkx.cpp:28: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t found = res.find_first_of(' ', pos);\n        if(found !=\
    \ std::string::npos) {\n            res.replace(found, 1, '_');\n            pos\
    \ = found + 1;\n        }\n        else {\n            pos = res.size();\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnetb1un.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpbnetb1un.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(size_t&, int, char)\u2019\n   12 | \
    \            res.replace(found, 1, '_');\n      |                            \
    \          ^\nIn file included from /usr/include/c++/9/string:55,\n          \
    \       from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbnetb1un.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpbnetb1un.cpp:12:35:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   12 |             res.replace(found, 1, '_');\n      |                    \
    \               ^~~\n      |                                   |\n      |    \
    \                               char\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41"
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.length()) {\n        size_t next = fixed_text.find(' ', pos);\n\
    \        if(next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" \");\n\
    \            fixed_text.replace(next, 1, \"_\");\n        }\n        pos = next\
    \ + 1;\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpb5pgj0w5: /tmp/tmpb5pgj0w5.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        size_t pos = 0;\n        while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n            result.replace(pos, 1, \" \");\n      \
    \      pos = result.find(\" \", pos + 1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpjeygpvta: /tmp/tmpjeygpvta.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t space_pos = fixed_text.find(' ', pos);\n\
    \        if(space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, \" \");\n            fixed_text.replace(space_pos + 1, 1, \"-\");\n     \
    \       pos = space_pos + 1;\n        } else {\n            pos = fixed_text.size();\n\
    \        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpmg4421fk: /tmp/tmpmg4421fk.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('\
    \  ') != std::string::npos) {\n        std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpitzv5sry.cpp:8:19: warning: multi-character character constant\
    \ [-Wmultichar]\n    8 |     if (text.find('  ') != std::string::npos) {\n   \
    \   |                   ^~~~\n/tmp/tmpitzv5sry.cpp:9:48: warning: multi-character\
    \ character constant [-Wmultichar]\n    9 |         std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n      |                                           \
    \     ^~~~\n/tmp/tmpitzv5sry.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpitzv5sry.cpp:8:19: warning: overflow in conversion from \u2018int\u2019\
    \ to \u2018char\u2019 changes value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n\
    \    8 |     if (text.find('  ') != std::string::npos) {\n      |            \
    \       ^~~~\n/tmp/tmpitzv5sry.cpp:9:57: error: no matching function for call\
    \ to \u2018replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n    9 |         std::replace(text.begin(), text.end(), ' \
    \ ', '-');\n      |                                                         ^\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpitzv5sry.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note: candidate:\
    \ \u2018template<class _FIter, class _Tp> void std::replace(_FIter, _FIter, const\
    \ _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpitzv5sry.cpp:9:57:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |         std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n      |                                                       \
    \  ^\nIn file included from /usr/include/c++/9/algorithm:71,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n              \
    \   from /tmp/tmpitzv5sry.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _"
  stdout: ''
  timestamp: 1660133013
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        std::string sub = res.substr(pos,\
    \ next - pos);\n        pos = next;\n        if(sub.empty()) {\n            continue;\n\
    \        }\n        size_t prev = res.rfind(' ', pos);\n        if(prev == std::string::npos)\
    \ {\n            prev = res.size();\n        }\n        if(prev == pos) {\n  \
    \          res.replace(prev, 1, \"-\");\n        }\n        else {\n         \
    \   res.replace(prev, prev + 1, \"\");\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        result.replace(result.find(\" \"), 2, \" \");\n        result.replace(result.find(\"\
    \ \"), 1, \" \");\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = \"\";\n    size_t pos = 0;\n    while(pos\
    \ < text.size()) {\n        size_t next_pos = text.find(' ', pos);\n        if(next_pos\
    \ == std::string::npos) {\n            fixed_text += text[pos];\n            pos++;\n\
    \        } else {\n            fixed_text += text[pos];\n            fixed_text\
    \ += \"_\";\n            pos = next_pos + 1;\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpt226efuo: /tmp/tmpt226efuo.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    size_t pos = 0;\n    while(pos <\
    \ fixed.length()) {\n        size_t next = fixed.find(' ', pos);\n        if(next\
    \ == fixed.length()) next = fixed.length();\n        fixed.replace(pos, next-pos,\
    \ \"_\");\n        pos = next + 1;\n    }\n    if(fixed.length() > 2 && fixed.substr(0,\
    \ 2) == \"___\") {\n        fixed = fixed.substr(2);\n    }\n    return fixed;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2 && result.substr(0, 2) == \"___\") {\n\
    \        result.replace(result.begin(), result.begin() + 2, \"\");\n        result.replace(result.begin()\
    \ + 2, result.end(), \"\");\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqbmzyjd5: /tmp/tmpqbmzyjd5.cpp:20: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2 && s[s.size() - 2] == ' ' && s[s.size() - 1] ==\
    \ ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w47zqna.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp_w47zqna.cpp:10:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   10 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /usr/include/c++/9/string:55,\n            \
    \     from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_w47zqna.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp_w47zqna.cpp:10:47:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   10 |         s.replace(s.size() - 2, s.size() - 1, ' ');\n      |        \
    \                                       ^~~\n      |                         \
    \                      |\n      |                                            \
    \   char\nIn file included from /usr/inc"
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if(pos == std::string::npos) {\n            break;\n        }\n     \
    \   result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if(pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \" \");\n    }\n    if(result.length()\
    \ > 2) {\n        pos = 0;\n        while(pos < result.length()) {\n         \
    \   pos = result.find_first_not_of(\"  \", pos);\n            if(pos == std::string::npos)\
    \ {\n                break;\n            }\n            result.replace(pos, 2,\
    \ \" \");\n            pos = result.find_first_not_of(\"  \", pos + 2);\n    \
    \        if(pos == std::string::npos) {\n                break;\n            }\n\
    \            result.replace(pos, 2, \" \");\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpaqt32r39: /tmp/tmpaqt32r39.cpp:40: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t prev = pos;\n        pos = res.find_first_not_of(\" \", pos);\n\
    \        if(pos == std::string::npos) {\n            break;\n        }\n     \
    \   size_t next = res.find_first_of(\" \", pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        std::string sub = res.substr(prev,\
    \ next - prev);\n        if(sub.empty()) {\n            continue;\n        }\n\
    \        if(sub.back() == ' ' && sub.size() > 2) {\n            sub.back() = '-';\n\
    \        }\n        res = res.substr(0, prev) + sub + res.substr(next);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if(found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.find(\" \", pos + 1);\n        }\n\
    \        else {\n            pos = fixed_text.size();\n        }\n    }\n    if(fixed_text.size()\
    \ > 2) {\n        size_t pos = 0;\n        while(pos < fixed_text.size()) {\n\
    \            size_t found = fixed_text.find(\" \", pos);\n            if(found\
    \ != std::string::npos) {\n                fixed_text.replace(pos, 1, \" \");\n\
    \                pos = fixed_text.find(\" \", pos + 1);\n            }\n     \
    \       else {\n                pos = fixed_text.size();\n            }\n    \
    \    }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqgr4zybm: /tmp/tmpqgr4zybm.cpp:37: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133015
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos != std::string::npos) {\n            result.replace(pos, 1, \"\
    \ \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length()) {\n\
    \        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \"\
    \ \");\n        pos = res.find(\" \", pos + 1);\n    }\n    if (res.size() > 2)\
    \ {\n        res.replace(pos, 2, \" \");\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed.find_first_of(' ', pos)) != std::string::npos) {\n        fixed.replace(pos,\
    \ 1, \" \");\n        pos = fixed.find_first_of(' ', pos + 1);\n    }\n    pos\
    \ = 0;\n    while ((pos = fixed.find_first_of('  ', pos)) != std::string::npos)\
    \ {\n        fixed.replace(pos, 1, \" \");\n        pos = fixed.find_first_of('\
    \  ', pos + 1);\n    }\n    return fixed;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmppa0tb3g8: /tmp/tmppa0tb3g8.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133015
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n   \
    \ while ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n      \
    \  fixed_text.replace(pos, 2, \"-\");\n        pos++;\n    }\n    \n    return\
    \ fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmplfgkjd25: /tmp/tmplfgkjd25.cpp:20: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.find_first_of(' ') != std::string::npos) {\n       \
    \ std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqvi8bt6_: /tmp/tmpqvi8bt6_.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    std::string space_replaced\
    \ = \"_\";\n    std::string consecutive_replaced = \"-\";\n    size_t pos = 0;\n\
    \    size_t pos_count = 0;\n    while(pos < fixed_text.size()) {\n        pos\
    \ = fixed_text.find(space_replaced, pos);\n        if(pos == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, consecutive_replaced);\n         \
    \   pos = fixed_text.find(space_replaced, pos);\n            pos_count++;\n  \
    \      } else {\n            pos_count++;\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size()\
    \ > 2 && text.substr(0, 2) == \" \") {\n        std::replace(text.begin(), text.begin()\
    \ + 2, ' ', '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp8eu1zsd8: /tmp/tmp8eu1zsd8.cpp:18: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.length()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if(found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, std::string(\"-\"));\n            fixed_text.replace(found, 2, std::string(\"\
    -\"));\n            pos = found + 1;\n        } else {\n            pos = fixed_text.length();\n\
    \        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpkd29x7v2: /tmp/tmpkd29x7v2.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.length() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpye9wgzd8.cpp:10:52: warning: multi-character character constant\
    \ [-Wmultichar]\n   10 |         std::replace(result.begin(), result.end(), '\
    \  ', '-');\n      |                                                    ^~~~\n\
    /tmp/tmpye9wgzd8.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpye9wgzd8.cpp:10:61: error: no matching function for call to \u2018\
    replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n   10 |         std::replace(result.begin(), result.end(),\
    \ '  ', '-');\n      |                                                       \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          \
    \       from /tmp/tmpye9wgzd8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpye9wgzd8.cpp:10:61:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   10 |         std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n      |                                         \
    \                    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpye9wgzd8.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/ps"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \"\
    \ \");\n        pos = res.find(\" \", pos + 1);\n    }\n    if (res.size() > 2)\
    \ {\n        res.replace(pos, res.size() - 2, \" \");\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133016
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n    }\n    while((pos = result.find(\" \", pos + 1)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, \" \");\n    }\n    while((pos = result.find(\"\
    \  \", pos)) != std::string::npos) {\n        result.replace(pos, 2, \"-\");\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos = fixed_text.find(\"  \", pos);\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp78au7go9: /tmp/tmp78au7go9.cpp:18: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    if (result.size() > 2) {\n        pos\
    \ = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, \" \");\n            pos++;\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqhhkuxv6: /tmp/tmpqhhkuxv6.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n\
    \    size_t pos = 0;\n    while(pos < s.size()) {\n        if(s[pos] == ' ') {\n\
    \            s[pos] = '_';\n            pos++;\n        }\n        else if(s[pos]\
    \ == '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n      \
    \  else if(s[pos] == '-') {\n            s[pos] = '_';\n            pos++;\n \
    \       }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n     \
    \       pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos]\
    \ = ' ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n  \
    \          s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos]\
    \ == '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n      \
    \  else if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n \
    \       }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n     \
    \       pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos]\
    \ = ' ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n  \
    \          s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos]\
    \ == '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n      \
    \  else if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n \
    \       }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n     \
    \       pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos]\
    \ = ' ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n  \
    \          s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos]\
    \ == '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n      \
    \  else if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n \
    \       }\n        else if(s[pos] == '_') {\n            s[pos] = ' ';\n     \
    \       pos++;\n        }\n        else if(s[pos] == '_') {\n            s[pos]\
    \ = ' ';\n            pos++;\n        }\n        else if(s[pos] == '_') {\n  \
    \          s[pos] = ' ';\n            pos++;\n        }\n        else if(s[pos]\
    \ == '_') {\n            s[pos] = ' ';\n            pos++;\n        }\n      \
    \  else if(s[pos] == '_') {\n            s[pos] = ' ';\n            pos++;\n \
    \       }\n        \n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg103ewlv.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpg103ewlv.cpp:8:38: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n    8 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpg103ewlv.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2049:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, const\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019 <near match>\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpg103ewlv.cpp:8:35:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \    8 |     s.replace(s.begin(), s.end(), ' ');\n      |           "
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    for(size_t i = 0; i < out.size();\
    \ i++) {\n        if(out[i] == ' ') {\n            out[i] = '_';\n        }\n\
    \    }\n    \n    size_t prev = 0, pos = 0;\n    while(pos < out.size()) {\n \
    \       pos = out.find(' ', prev);\n        if(pos == std::string::npos) {\n \
    \           pos = out.size();\n        }\n        out.replace(pos, 1, out[prev]);\n\
    \        prev = pos + 1;\n    }\n    \n    if(out.size() > 2) {\n        size_t\
    \ prev = 0, pos = 0;\n        while(pos < out.size()) {\n            pos = out.find('\
    \ ', prev);\n            if(pos == std::string::npos) {\n                pos =\
    \ out.size();\n            }\n            out.replace(pos, 1, out[prev]);\n  \
    \          prev = pos + 1;\n        }\n    }\n    \n    return out;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmparu2ke_k.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmparu2ke_k.cpp:20:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(size_t&, int, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   20 |         out.replace(pos, 1, out[prev]);\n\
    \      |                                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmparu2ke_k.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmparu2ke_k.cpp:20:38:\
    \ error: invalid conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n\
    \   20 |         out.replace(pos, 1, out[prev]);\n      |                    \
    \                  ^\n      |                                      |\n      |\
    \                                      __gnu_cxx::__alloc_traits<std::alloc"
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdto5t6u.cpp:9:38: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpjdto5t6u.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpjdto5t6u.cpp:9:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:62,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmpjdto5t6u.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note:\
    \ candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjdto5t6u.cpp:9:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjdto5t6u.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = \"\";\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ')\
    \ {\n            fixed_text += \"_\";\n            i++;\n        } else if (text[i]\
    \ == ' ' && text[i + 1] == ' ') {\n            fixed_text += \"-\";\n        \
    \    i += 2;\n        } else {\n            fixed_text += text[i];\n         \
    \   i++;\n        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpx7u1mfbi: /tmp/tmpx7u1mfbi.cpp:30: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = \"\";\n    \n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            fixed_text += \"_\";\n   \
    \     }\n        else {\n            fixed_text += text[i];\n        }\n    }\n\
    \    \n    if(fixed_text.find(\"__\") != std::string::npos) {\n        fixed_text\
    \ = fixed_text.replace(\"__\", \"-\");\n    }\n    \n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0r4o45u.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpj0r4o45u.cpp:19:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\
    \n   19 |         fixed_text = fixed_text.replace(\"__\", \"-\");\n      |   \
    \                                               ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpj0r4o45u.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1893 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_C"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res = res.substr(0, pos)\
    \ + \"_\" + res.substr(pos + 1);\n    }\n    while ((pos = res.find(\"  \", pos))\
    \ != std::string::npos) {\n        res = res.substr(0, pos) + \"-\" + res.substr(pos\
    \ + 2);\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp5agal9us: /tmp/tmp5agal9us.cpp:22: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqs6uhv8o: /tmp/tmpqs6uhv8o.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.length()) {\n        size_t next = fixed_text.find(' ', pos);\n\
    \        if(next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.length();\n        } else {\n     \
    \       fixed_text.replace(pos, next - pos, \" \");\n            pos = next +\
    \ 1;\n        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpbi68hkyi: /tmp/tmpbi68hkyi.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.find_first_not_of(' ') != std::string::npos) {\n\
    \        std::replace(result.begin(), result.end(), ' ', '-');\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpttnul8j3: /tmp/tmpttnul8j3.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed.find(' ', pos)) != std::string::npos) {\n        fixed.replace(pos,\
    \ 1, \" \");\n        fixed.replace(pos, 1, \" \");\n        pos = fixed.find('\
    \ ', pos + 1);\n    }\n    return fixed;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp79mzw29o: /tmp/tmp79mzw29o.cpp:19: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos++;\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpa20ogvyu: /tmp/tmpa20ogvyu.cpp:18: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    for(size_t i = 0; i < out.size();\
    \ i++) {\n        if(out[i] == ' ') {\n            out[i] = '_';\n        }\n\
    \    }\n    size_t count = 0;\n    for(size_t i = 0; i < out.size(); i++) {\n\
    \        if(out[i] == ' ') {\n            count++;\n        }\n        else {\n\
    \            if(count > 1) {\n                out.insert(i, '-');\n          \
    \  }\n            count = 0;\n        }\n    }\n    return out;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzng69q7.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmptzng69q7.cpp:20:34: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(size_t&, char)\u2019\n   20 |       \
    \          out.insert(i, '-');\n      |                                  ^\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptzng69q7.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note:   candida"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    for(size_t i = 0; i < fixed_text.size();\
    \ i++) {\n        if(fixed_text[i] == ' ') {\n            fixed_text[i] = '_';\n\
    \        }\n        if(fixed_text[i] == ' ' && fixed_text[i+1] == ' ') {\n   \
    \         fixed_text[i] = '-';\n        }\n    }\n    return fixed_text;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpe45mgn9j: /tmp/tmpe45mgn9j.cpp:23: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    size_t pos = 0;\n    while(pos < s.size())\
    \ {\n        size_t next = s.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        s.replace(pos, next - pos,\
    \ \"_\");\n        pos = next + 1;\n    }\n    return s;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp0tysma7s: /tmp/tmp0tysma7s.cpp:21: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    \n    size_t\
    \ pos = 0;\n    \n    while(pos < text.size()) {\n        if(text[pos] == ' ')\
    \ {\n            text.erase(pos, 1);\n            text.insert(pos, \"-\");\n \
    \           pos += 1;\n        }\n        else {\n            pos += 1;\n    \
    \    }\n    }\n    \n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp43nv_uy8: /tmp/tmp43nv_uy8.cpp:29: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n\
    \    size_t pos = 0;\n    while(pos < s.size()) {\n        size_t next = s.find('\
    \ ', pos);\n        if(next == std::string::npos) {\n            next = s.size();\n\
    \        }\n        s.replace(pos, next, ' ');\n        pos = next + 1;\n    }\n\
    \    while(pos < s.size()) {\n        size_t next = s.find(' ', pos);\n      \
    \  if(next == std::string::npos) {\n            next = s.size();\n        }\n\
    \        s.replace(pos, next, '-');\n        pos = next + 1;\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fkx2qpu.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp9fkx2qpu.cpp:8:38: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n    8 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9fkx2qpu.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2049:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, const\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019 <near match>\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp9fkx2qpu.cpp:8:35:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \    8 |     s.replace(s.begin(), s.end(), ' ');\n      |           "
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpcl17657g: /tmp/tmpcl17657g.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.length()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if (found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = found + 1;\n        }\n        else {\n      \
    \      pos = fixed_text.length();\n        }\n    }\n    if (fixed_text.find(\"\
    \  \", pos) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"-\"\
    );\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_pl3oju1: /tmp/tmp_pl3oju1.cpp:27: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if(pos != std::string::npos) {\n            result.replace(pos, 1, \"\
    \ \");\n        }\n        pos = result.find_first_of(\" \", pos);\n        if(pos\
    \ != std::string::npos) {\n            result.replace(pos, 1, \" \");\n      \
    \  }\n    }\n    size_t pos = 0;\n    while(pos < result.length()) {\n       \
    \ pos = result.find_first_not_of(\"  \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.replace(pos, 2, \"-\");\n        }\n        pos = result.find_first_of(\"\
    \  \", pos);\n        if(pos != std::string::npos) {\n            result.replace(pos,\
    \ 2, \"-\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsqpda_co.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpsqpda_co.cpp:19:12: error: redeclaration of \u2018size_t pos\u2019\n\
    \   19 |     size_t pos = 0;\n      |            ^~~\n/tmp/tmpsqpda_co.cpp:8:12:\
    \ note: \u2018size_t pos\u2019 previously declared here\n    8 |     size_t pos\
    \ = 0;\n      |            ^~~\n"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.length()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if (found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = found + 1;\n        }\n        else {\n      \
    \      pos = fixed_text.length();\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpfjy5vr5m: /tmp/tmpfjy5vr5m.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    while((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        if(pos == 0 || result[pos-1] != \" \") {\n\
    \            result.replace(pos, 1, \" \");\n        }\n        pos++;\n    }\n\
    \    while((pos = result.find(\" \", pos)) != std::string::npos) {\n        if(pos\
    \ == 0 || result[pos-1] != \" \") {\n            result.replace(pos, 1, \"-\"\
    );\n        }\n        pos++;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpslwln6cp.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpslwln6cp.cpp:14:41: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   14 |         if(pos == 0 || result[pos-1] !=\
    \ \" \") {\n      |                                         ^~~\n/tmp/tmpslwln6cp.cpp:20:41:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   20 |         if(pos == 0 || result[pos-1] != \" \") {\n      |           \
    \                              ^~~\n"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ',\
    \ '-');\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4qsuk5b6: /tmp/tmp4qsuk5b6.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    std::string spaces = \"_\"\
    ;\n    std::string consecutive_spaces = \"-\";\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.length()) {\n        pos = fixed_text.find(spaces, pos);\n    \
    \    if(pos != std::string::npos) {\n            fixed_text.replace(pos, spaces.length(),\
    \ consecutive_spaces);\n            pos += consecutive_spaces.length();\n    \
    \    }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp_r99ky1g: /tmp/tmp_r99ky1g.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(true)\
    \ {\n        pos = fixed_text.find(\"  \", pos);\n        if(pos == std::string::npos)\
    \ {\n            break;\n        }\n        fixed_text.replace(pos, 2, \"_\");\n\
    \        pos = fixed_text.find(\"  \", pos);\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp54ws_q84: /tmp/tmp54ws_q84.cpp:22: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    // Replace all spaces\
    \ with underscores\n    size_t pos = 0;\n    while (pos < fixed_text.size()) {\n\
    \        if (fixed_text[pos] == ' ') {\n            fixed_text[pos] = '_';\n \
    \           pos++;\n        }\n        else {\n            break;\n        }\n\
    \    }\n    \n    // If there are more than 2 consecutive spaces, replace all\
    \ consecutive spaces with -\n    pos = 0;\n    while (pos < fixed_text.size())\
    \ {\n        if (fixed_text[pos] == ' ') {\n            if (pos == fixed_text.size()\
    \ - 1) {\n                fixed_text[pos] = '-';\n            }\n            else\
    \ {\n                fixed_text[pos] = '-';\n                pos++;\n        \
    \    }\n        }\n        else {\n            break;\n        }\n    }\n    \n\
    \    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n \
    \   assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp3wbbu___: /tmp/tmp3wbbu___.cpp:43: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) break;\n        result.replace(pos, 1,\
    \ \" \");\n        pos = result.find_first_not_of(\" \", pos + 1);\n        if\
    \ (pos == std::string::npos) break;\n        result.replace(pos, 1, \" \");\n\
    \        pos = result.find_first_not_of(\" \", pos + 1);\n        if (pos == std::string::npos)\
    \ break;\n        result.replace(pos, 1, \"-\");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) break;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp2rmtzuea: /tmp/tmp2rmtzuea.cpp:26: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \"\
    \ \");\n        pos++;\n    }\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        if (pos > 0 && res[pos - 1] == ' ') {\n            res.replace(pos,\
    \ 1, \" \");\n            pos++;\n        } else {\n            res.replace(pos,\
    \ 1, \"-\");\n            pos++;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpazs038lu: /tmp/tmpazs038lu.cpp:27: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    pos = 0;\n\
    \    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    pos = 0;\n\
    \    while ((pos = result.find(\"  \", pos)) != std::string::npos) {\n       \
    \ result.replace(pos, 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n\
    \    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, \" \");\n        pos = result.find(\"  \"\
    , pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \" \");\n        pos\
    \ = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"\
    \  \", pos)) != std::string::npos) {\n        result.replace(pos, 2, \" \");\n\
    \        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n\
    \    while ((pos = result.find(\"  \", pos)) != std::string::npos) {\n       \
    \ result.replace(pos, 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n\
    \    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, \" \");\n        pos = result.find(\"  \"\
    , pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \" \");\n        pos\
    \ = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos = result.find(\"\
    \  \", pos)) != std::string::npos) {\n        result.replace(pos, 2, \" \");\n\
    \        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n    while ((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n    }\n    pos = 0;\n\
    \    while ((pos = result.find(\"  \", pos)) != std::string::npos) {\n       \
    \ result.replace(pos, 2, \" \");\n        pos = result.find(\"  \", pos + 2);\n\
    \    }\n    pos = 0;\n    while ((pos = result.find(\"  \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, \" \n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu6xzsbux.cpp:75:32: warning: missing terminating \" character\n\
    \   75 |         result.replace(pos, 2, \"\n      |                          \
    \      ^\n/tmp/tmpu6xzsbux.cpp:75:32: error: missing terminating \" character\n\
    \   75 |         result.replace(pos, 2, \"\n      |                          \
    \      ^ \n/tmp/tmpu6xzsbux.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpu6xzsbux.cpp:76:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   76 | }\n      | ^\n/tmp/tmpu6xzsbux.cpp:77:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   77 | int main() {\n     \
    \ |            ^\n/tmp/tmpu6xzsbux.cpp:84:1: error: expected \u2018}\u2019 at\
    \ end of input\n   84 | }\n      | ^\n/tmp/tmpu6xzsbux.cpp:6:42: note: to match\
    \ this \u2018{\u2019\n    6 | std::string fix_spaces(std::string text) {\n   \
    \   |                                          ^\n/tmp/tmpu6xzsbux.cpp:84:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   84 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if(pos != std::string::npos) {\n            result.insert(pos, \"_\"\
    );\n        }\n        pos = result.find_first_of(\" \", pos);\n        if(pos\
    \ != std::string::npos) {\n            result.insert(pos, \"-\");\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp___l48el: /tmp/tmp___l48el.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n    }\n    size_t pos2 = result.find_first_not_of(\" \", pos);\n\
    \    while (pos2 != std::string::npos) {\n        result.replace(pos2, 1, \"-\"\
    );\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    std::replace(out.begin(), out.end(),\
    \ ' ', '_');\n    std::replace(out.begin(), out.end(), '\\t', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\n', '_');\n    std::replace(out.begin(), out.end(), '\\r', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\v', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\f', '_');\n    std::replace(out.begin(), out.end(), '\\a', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\e', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\v', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin(), out.end(), '\\s', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n    std::replace(out.begin(), out.end(), '\\h', '_');\n\
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n    std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n    std::replace(out.begin\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75vi3tqx.cpp:17:42: warning: unknown escape sequence: '\\s'\n \
    \  17 |     std::replace(out.begin(), out.end(), '\\s', '_');\n      |       \
    \                                   ^~~~\n/tmp/tmp75vi3tqx.cpp:18:42: warning:\
    \ unknown escape sequence: '\\h'\n   18 |     std::replace(out.begin(), out.end(),\
    \ '\\h', '_');\n      |                                          ^~~~\n/tmp/tmp75vi3tqx.cpp:19:42:\
    \ warning: unknown escape sequence: '\\s'\n   19 |     std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n      |                                          ^~~~\n\
    /tmp/tmp75vi3tqx.cpp:20:42: warning: unknown escape sequence: '\\h'\n   20 | \
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n      |              \
    \                            ^~~~\n/tmp/tmp75vi3tqx.cpp:21:42: warning: unknown\
    \ escape sequence: '\\s'\n   21 |     std::replace(out.begin(), out.end(), '\\\
    s', '_');\n      |                                          ^~~~\n/tmp/tmp75vi3tqx.cpp:22:42:\
    \ warning: unknown escape sequence: '\\h'\n   22 |     std::replace(out.begin(),\
    \ out.end(), '\\h', '_');\n      |                                          ^~~~\n\
    /tmp/tmp75vi3tqx.cpp:23:42: warning: unknown escape sequence: '\\s'\n   23 | \
    \    std::replace(out.begin(), out.end(), '\\s', '_');\n      |              \
    \                            ^~~~\n/tmp/tmp75vi3tqx.cpp:24:42: warning: unknown\
    \ escape sequence: '\\h'\n   24 |     std::replace(out.begin(), out.end(), '\\\
    h', '_');\n      |                                          ^~~~\n/tmp/tmp75vi3tqx.cpp:25:42:\
    \ warning: unknown escape sequence: '\\s'\n   25 |     std::replace(out.begin(),\
    \ out.end(), '\\s', '_');\n      |                                          ^~~~\n\
    /tmp/tmp75vi3tqx.cpp:26:42: warning: unknown escape sequence: '\\h'\n   26 | \
    \    std::replace(out.begin(), out.end(), '\\h', '_');\n      |              \
    \                            ^~~~\n/tmp/tmp75vi3tqx.cpp:27:42: warning: unknown\
    \ escape sequence: '\\s'\n   27 |     std::replace(out.begin(), out.end(), '\\\
    s', '_');\n      |                                          ^~~~\n/tmp/tmp75vi3tqx.cpp:28:42:\
    \ warning: unknown e"
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) break;\n        result.replace(pos, 1,\
    \ \" \");\n        pos = result.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) break;\n        result.replace(pos, 1, \"-\");\n     \
    \   pos = result.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ break;\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpsickv8vs: /tmp/tmpsickv8vs.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133018
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_of(' ', pos);\n      \
    \  if (pos == std::string::npos) break;\n        result.insert(pos, \"_\");\n\
    \        pos = result.find_first_of(' ', pos + 1);\n        if (pos == std::string::npos)\
    \ break;\n        result.insert(pos, \"-\");\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133023
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    size_t pos = 0;\n    while(pos <\
    \ fixed.length()) {\n        size_t next = fixed.find_first_of(' ', pos);\n  \
    \      if(next == fixed.length()) next = fixed.length();\n        fixed.replace(pos,\
    \ next - pos, \"_\");\n        pos = next + 1;\n    }\n    if(fixed.length() >\
    \ 2) {\n        fixed = fixed.replace(fixed.find_last_of('_'), fixed.length(),\
    \ \"-\");\n    }\n    return fixed;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133023
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.find_first_of(' ') != std::string::npos) {\n       \
    \ std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqvi8bt6_: /tmp/tmpqvi8bt6_.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t next_pos = res.find(' ', pos);\n        if(next_pos == std::string::npos)\
    \ {\n            res.replace(pos, 1, \" \");\n            pos += 1;\n        }\
    \ else {\n            std::string temp = res.substr(pos, next_pos - pos);\n  \
    \          pos = next_pos + 1;\n            if(temp.find_first_not_of(\"- \")\
    \ == std::string::npos) {\n                res.replace(pos, 1, \" \");\n     \
    \           pos += 1;\n            } else {\n                temp = temp.substr(0,\
    \ temp.find_first_not_of(\"- \"));\n                res.replace(pos, 1, temp);\n\
    \                pos += temp.find_first_not_of(\"- \") + 1;\n            }\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp50dmnahy: /tmp/tmp50dmnahy.cpp:31: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if(pos == std::string::npos) break;\n        result.replace(pos, 1, \"\
    \ \");\n        pos = result.find_first_not_of(\" \", pos);\n        if(pos ==\
    \ std::string::npos) break;\n        result.replace(pos, 1, \"-\");\n        pos\
    \ = result.find_first_not_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ break;\n        result.replace(pos, 1, \" \");\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpoymnw86y: /tmp/tmpoymnw86y.cpp:24: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if(pos != std::string::npos) {\n            result.insert(pos, \"_\"\
    );\n        }\n        pos = result.find_first_of(\" \", pos);\n        if(pos\
    \ != std::string::npos) {\n            result.insert(pos, \"-\");\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp___l48el: /tmp/tmp___l48el.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            break;\n        }\n    \
    \    result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \"-\");\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp5u9lz9p2: /tmp/tmp5u9lz9p2.cpp:30: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos != std::string::npos) {\n            result.replace(pos, 1, \"\
    \ \");\n        }\n        pos = result.find_first_of(\" \", pos);\n        if\
    \ (pos != std::string::npos) {\n            result.replace(pos, 1, \" \");\n \
    \       }\n    }\n    pos = 0;\n    while (pos < result.length()) {\n        pos\
    \ = result.find_first_not_of(\"  \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 2, \"-\");\n        }\n        pos = result.find_first_of(\"\
    \  \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 2, \"-\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4zn27nif: /tmp/tmp4zn27nif.cpp:34: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133018
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos = fixed_text.find(\"  \", pos + 2);\n    }\n    return\
    \ fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpwxin63i_: /tmp/tmpwxin63i_.cpp:18: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        result.replace(pos, result.size() - 2, \" \");\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while (pos <\
    \ res.size()) {\n        if (res[pos] == ' ') {\n            res[pos] = '_';\n\
    \            while (pos < res.size() && res[pos] == ' ') pos++;\n            if\
    \ (pos == res.size()) break;\n            res[pos] = '-';\n            while (pos\
    \ < res.size() && res[pos] == ' ') pos++;\n        }\n        pos++;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp4c_1z2mz: /tmp/tmp4c_1z2mz.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = \"\";\n    int i = 0;\n    int j = 0;\n\
    \    while (i < text.length()) {\n        if (text[i] == ' ') {\n            fixed_text\
    \ += \"_\";\n            i++;\n        } else {\n            fixed_text += text[i];\n\
    \            i++;\n        }\n    }\n    while (j < fixed_text.length()) {\n \
    \       if (fixed_text[j] == ' ') {\n            fixed_text[j] = '-';\n      \
    \      j++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpqndo007e: /tmp/tmpqndo007e.cpp:34: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    std::replace(fixed.begin(), fixed.end(),\
    \ ' ', '_');\n    std::replace(fixed.begin(), fixed.end(), '  ', '-');\n    return\
    \ fixed;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kn3egmm.cpp:9:46: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(fixed.begin(), fixed.end(), '  ', '-');\n\
    \      |                                              ^~~~\n/tmp/tmp6kn3egmm.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmp6kn3egmm.cpp:9:55:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(fixed.begin(),\
    \ fixed.end(), '  ', '-');\n      |                                          \
    \             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmp6kn3egmm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6kn3egmm.cpp:9:55:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(fixed.begin(), fixed.end(),\
    \ '  ', '-');\n      |                                                       ^\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6kn3egmm.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:  "
  stdout: ''
  timestamp: 1660133019
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos != std::string::npos) {\n            result.replace(pos, 1, \"\
    \ \");\n        }\n    }\n    if (result.length() > 2) {\n        pos = 0;\n \
    \       while (pos < result.length()) {\n            pos = result.find_first_of(\"\
    \ \", pos);\n            if (pos != std::string::npos) {\n                result.replace(pos,\
    \ 1, \" \");\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos++;\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpa20ogvyu: /tmp/tmpa20ogvyu.cpp:18: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace((pos), 1,\
    \ \" \");\n    }\n    if (res.size() > 2) {\n        res.replace((pos), 2, \"\
    \ \");\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n   \
    \ size_t prev_pos = 0;\n    \n    while (pos < fixed_text.size()) {\n        pos\
    \ = fixed_text.find(\"  \", pos);\n        if (pos == std::string::npos) {\n \
    \           pos = fixed_text.find(\"  \", prev_pos);\n        }\n        if (pos\
    \ != std::string::npos) {\n            fixed_text.replace(pos, 2, \"-\");\n  \
    \      }\n        prev_pos = pos;\n        pos = fixed_text.find(\"  \", pos);\n\
    \    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmphbouru0t: /tmp/tmphbouru0t.cpp:28: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    std::replace(s.begin(), s.end(), ' ', '-');\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpm2ipb_9r: /tmp/tmpm2ipb_9r.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res = res.substr(0, pos)\
    \ + \"_\" + res.substr(pos + 1);\n        pos = res.find(\" \", pos);\n    }\n\
    \    if (res.size() > 2) {\n        res = res.substr(0, res.size() - 2) + \"-\"\
    ;\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpdg8ty_le: /tmp/tmpdg8ty_le.cpp:20: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdto5t6u.cpp:9:38: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpjdto5t6u.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpjdto5t6u.cpp:9:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:62,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmpjdto5t6u.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5: note:\
    \ candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjdto5t6u.cpp:9:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjdto5t6u.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    // Replace all spaces\
    \ with underscores\n    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n\
    \        char c = fixed_text[pos];\n        if(c == ' ') {\n            fixed_text[pos]\
    \ = '_';\n        } else {\n            pos++;\n        }\n    }\n    \n    //\
    \ Replace consecutive spaces with -\n    pos = 0;\n    while(pos < fixed_text.size())\
    \ {\n        char c = fixed_text[pos];\n        if(c == ' ') {\n            fixed_text[pos]\
    \ = '-';\n        } else {\n            pos++;\n        }\n    }\n    \n    return\
    \ fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpvr3u5ho0: /tmp/tmpvr3u5ho0.cpp:38: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"-\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (result.length() > 2) {\n        result.replace(pos, result.length() -\
    \ 2, std::string(\"-\"));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133020
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while(pos\
    \ < result.length()) {\n        size_t next = result.find(' ', pos);\n       \
    \ if(next == std::string::npos) {\n            next = result.length();\n     \
    \   }\n        \n        size_t prev = result.rfind(' ', pos);\n        if(prev\
    \ == std::string::npos) {\n            prev = result.length();\n        }\n  \
    \      \n        if(next - prev > 2) {\n            next = result.find(' ', pos);\n\
    \            while(next != std::string::npos) {\n                result.insert(next,\
    \ \"-\");\n                next = result.find(' ', next + 1);\n            }\n\
    \        }\n        pos = next;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133024
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \" \");\n        pos = result.find(\"  \", pos);\n    }\n    pos = 0;\n \
    \   while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133024
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \"_\");\n        pos = result.find(\"  \", pos + 2);\n    }\n    while ((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \"-\");\n        pos = result.find(\"  \", pos + 2);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp36pfeshp: /tmp/tmp36pfeshp.cpp:22: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t space_pos = fixed_text.find(' ', pos);\n\
    \        if(space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, \" \");\n            pos = space_pos + 1;\n        }\n        else {\n  \
    \          pos = fixed_text.size();\n        }\n    }\n    while(pos < fixed_text.size())\
    \ {\n        size_t space_pos = fixed_text.find(' ', pos);\n        if(space_pos\
    \ != std::string::npos) {\n            fixed_text.replace(space_pos, 1, \" \"\
    );\n            pos = space_pos + 1;\n        }\n        else {\n            pos\
    \ = fixed_text.size();\n        }\n    }\n    return fixed_text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpiuayr73f: /tmp/tmpiuayr73f.cpp:34: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        std::string sub = res.substr(pos,\
    \ next - pos);\n        pos = next + 1;\n        while(pos < res.size() && res[pos]\
    \ == ' ') {\n            pos++;\n        }\n        if(pos < res.size() && res[pos]\
    \ == ' ') {\n            res[pos] = '_';\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpd9yvas1_: /tmp/tmpd9yvas1_.cpp:28: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t prev = pos;\n        pos = res.find(\" \", pos);\n       \
    \ if(pos == std::string::npos) {\n            pos = res.size();\n        }\n \
    \       res[prev] = '_';\n        pos = res.find(\" \", pos);\n        if(pos\
    \ == std::string::npos) {\n            pos = res.size();\n        }\n        res[prev]\
    \ = '-';\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpcrb600a5: /tmp/tmpcrb600a5.cpp:26: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \"\
    \ \");\n        pos++;\n    }\n    if (res.size() > 2) {\n        res.replace(pos,\
    \ 2, \" \");\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) break;\n        result.replace(pos, 1,\
    \ \" \");\n        pos = result.find_first_not_of(\" \", pos + 1);\n        if\
    \ (pos == std::string::npos) break;\n        result.replace(pos, 1, \" \");\n\
    \    }\n    if (result.length() > 2 && result.substr(0, 2) == \" \") {\n     \
    \   result.replace(result.begin(), result.begin() + 2, \"\");\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpwrgrz21u: /tmp/tmpwrgrz21u.cpp:24: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n   \
    \ \n    while(pos < fixed_text.size()) {\n        size_t next = fixed_text.find('\
    \ ', pos);\n        \n        if(next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.size();\n        } else {\n       \
    \     fixed_text.replace(pos, next - pos, \" \");\n            pos = next;\n \
    \       }\n    }\n    \n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpoqq31z7n: /tmp/tmpoqq31z7n.cpp:27: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2 && result.substr(0, 2) == \" \") {\n \
    \       result.replace(result.begin(), result.begin() + 2, \"\");\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpskrc5lp1: /tmp/tmpskrc5lp1.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ (pos < fixed_text.length()) {\n        size_t next = fixed_text.find(' ', pos);\n\
    \        if (next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" \");\n\
    \            fixed_text.replace(next, 1, \"_\");\n        }\n        pos = next\
    \ + 1;\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpgkj7_opr: /tmp/tmpgkj7_opr.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while (pos <\
    \ res.size()) {\n        size_t next = res.find(' ', pos);\n        if (next ==\
    \ std::string::npos) {\n            next = res.size();\n        }\n        std::string\
    \ sub = res.substr(pos, next - pos);\n        pos = next + 1;\n        if (sub.empty())\
    \ {\n            continue;\n        }\n        if (sub.back() == ' ' && sub.size()\
    \ > 2) {\n            std::string sub2 = sub.substr(0, sub.size() - 1);\n    \
    \        std::string sub3 = sub.substr(sub.size() - 1);\n            res = res.substr(0,\
    \ pos) + sub2 + \"-\" + sub3;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmps5t6n3b7: /tmp/tmps5t6n3b7.cpp:30: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        pos = res.find_first_not_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            res.replace(pos, 1, \" \");\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            res.replace(pos,\
    \ 1, \" \");\n        }\n        pos = res.find_first_not_of(\" \", pos);\n  \
    \      if(pos != std::string::npos) {\n            res.replace(pos, 1, \" \");\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp3o0uk1hq: /tmp/tmp3o0uk1hq.cpp:27: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n    }\n    size_t pos2 = result.find_first_not_of(\" \", pos);\n\
    \    while (pos2 != std::string::npos) {\n        result.replace(pos2, 1, \"-\"\
    );\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133019
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if(found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos = found + 1;\n        }\n        else\
    \ {\n            pos = fixed_text.size();\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp6ihe6vb5: /tmp/tmp6ihe6vb5.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = \"\";\n    int i = 0;\n    while (i <\
    \ text.length()) {\n        if (text[i] == ' ') {\n            fixed_text += \"\
    _\";\n            i++;\n        }\n        else if (text[i] == ' ' && text[i+1]\
    \ == ' ') {\n            fixed_text += \"-\";\n            i += 2;\n        }\n\
    \        else {\n            fixed_text += text[i];\n            i++;\n      \
    \  }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpgcjswhig: /tmp/tmpgcjswhig.cpp:30: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t space_pos = fixed_text.find(\" \", pos);\n\
    \        if (space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, \" \");\n            fixed_text.replace(space_pos + 1, 1, \"-\");\n     \
    \       pos = space_pos + 1;\n        } else {\n            pos = fixed_text.size();\n\
    \        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpea1y5p78: /tmp/tmpea1y5p78.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t found = fixed_text.find(\" \", pos);\n\
    \        if(found != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, std::to_string(\" \"));\n            pos = fixed_text.find(\" \", pos + 1);\n\
    \        }\n        else if(fixed_text.size() > 2) {\n            fixed_text.replace(pos,\
    \ 1, std::to_string(\" \"));\n            pos = fixed_text.find(\" \", pos + 1);\n\
    \        }\n        else {\n            pos = fixed_text.find(\" \", pos + 1);\n\
    \        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcp0slbg.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpgcp0slbg.cpp:12:58: error: no matching function for call to \u2018\
    to_string(const char [2])\u2019\n   12 |             fixed_text.replace(pos, 1,\
    \ std::to_string(\" \"));\n      |                                           \
    \               ^\nIn file included from /usr/include/c++/9/string:55,\n     \
    \            from /usr/include/c++/9/bits/locale_classes.h:40,\n             \
    \    from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgcp0slbg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019 <near\
    \ match>\n 6549 |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note:   conversion of argument 1 would be ill-formed:\n/tmp/tmpgcp0slbg.cpp:12:55:\
    \ error: invalid conversion from \u2018const char*\u2019 to \u2018int\u2019 [-fpermissive]\n\
    \   12 |             fixed_text.replace(pos, 1, std::to_string(\" \"));\n    \
    \  |                                                       ^~~\n      |      \
    \                                                 |\n      |                 \
    \                                      const char*\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,"
  stdout: ''
  timestamp: 1660133020
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos != std::string::npos) {\n            result.replace(pos, 1, \"\
    \ \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length()) {\n\
    \        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \" \");\n        }\n    }\n    pos = 0;\n    while (pos < result.length())\
    \ {\n        pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsdk92qr.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpxsdk92qr.cpp:91:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   91 | int main() {\n      |            ^\n/tmp/tmpxsdk92qr.cpp:98:1:\
    \ error: expected \u2018}\u2019 at end of input\n   98 | }\n      | ^\n/tmp/tmpxsdk92qr.cpp:86:35:\
    \ note: to match this \u2018{\u2019\n   86 |     while (pos < result.length())\
    \ {\n      |                                   ^\n/tmp/tmpxsdk92qr.cpp:98:1: error:\
    \ expected \u2018}\u2019 at end of input\n   98 | }\n      | ^\n/tmp/tmpxsdk92qr.cpp:6:42:\
    \ note: to match this \u2018{\u2019\n    6 | std::string fix_spaces(std::string\
    \ text) {\n      |                                          ^\n/tmp/tmpxsdk92qr.cpp:98:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   98 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos = pos + 2;\n    }\n    pos = 0;\n    while ((pos = fixed_text.find(\"\
    \ \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 1, \"-\"\
    );\n        pos = pos + 1;\n    }\n    return fixed_text;\n}\nint main() {\n \
    \   auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpzhtacl25: /tmp/tmpzhtacl25.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133020
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(true)\
    \ {\n        pos = fixed_text.find(\"  \", pos);\n        if (pos == std::string::npos)\
    \ break;\n        fixed_text.replace(pos, 2, \"_\");\n        pos++;\n    }\n\
    \    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n \
    \   assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpvau_lofs: /tmp/tmpvau_lofs.cpp:20: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n   \
    \ \n    while (pos < fixed_text.length()) {\n        size_t space_pos = fixed_text.find('\
    \ ', pos);\n        \n        if (space_pos != std::string::npos) {\n        \
    \    fixed_text.replace(space_pos, 1, \" \");\n            fixed_text.replace(space_pos\
    \ + 1, 1, \"-\");\n        }\n        \n        pos = fixed_text.find(' ', pos\
    \ + 1);\n    }\n    \n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpwxfjs582: /tmp/tmpwxfjs582.cpp:27: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqs6uhv8o: /tmp/tmpqs6uhv8o.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \"\
    \ \");\n        pos = res.find(\" \", pos + 1);\n    }\n    if (res.size() > 2)\
    \ {\n        res.replace(pos, 2, \" \");\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '_', ' ');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpf47en_k0: /tmp/tmpf47en_k0.cpp:16: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos = pos + 2;\n    }\n    return fixed_text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpmp577eci: /tmp/tmpmp577eci.cpp:18: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxvmgbj87: /tmp/tmpxvmgbj87.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '_', ' ');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpf47en_k0: /tmp/tmpf47en_k0.cpp:16: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ',\
    \ '-');\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4qsuk5b6: /tmp/tmp4qsuk5b6.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n   \
    \ \n    while (pos < fixed_text.size()) {\n        size_t space_pos = fixed_text.find('\
    \ ', pos);\n        if (space_pos != std::string::npos) {\n            fixed_text.replace(space_pos,\
    \ 1, \" \");\n            fixed_text.replace(space_pos + 1, 1, \"-\");\n     \
    \       pos = space_pos + 1;\n        } else {\n            pos = fixed_text.size();\n\
    \        }\n    }\n    \n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpujlx98j6: /tmp/tmpujlx98j6.cpp:27: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpcl17657g: /tmp/tmpcl17657g.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos, 1, \"\
    \ \");\n        pos++;\n    }\n    if (res.size() > 2) {\n        res.replace(res.begin()\
    \ + 2, res.end(), \" \");\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpgbo0b4kf: /tmp/tmpgbo0b4kf.cpp:20: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    while((pos\
    \ = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, \"-\");\n        pos = result.find(\"  \", pos + 2);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp8e6oir76: /tmp/tmp8e6oir76.cpp:22: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    while((pos = result.find(\"  \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 2, \"-\");\n        pos++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpsiv545f_: /tmp/tmpsiv545f_.cpp:22: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.find_first_not_of(' ') != std::string::npos) {\n   \
    \     std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmph22rlugy: /tmp/tmph22rlugy.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n    }\n    if (result.size() > 2) {\n        pos = 0;\n        while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, \"-\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133026
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    size_t\
    \ len = fixed_text.size();\n    while (pos < len) {\n        size_t next = fixed_text.find('\
    \ ', pos);\n        if (next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = len + 1;\n        } else {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = next + 1;\n        }\n    }\n    return fixed_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpspptc2ue: /tmp/tmpspptc2ue.cpp:24: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2) {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '-');\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpxvmgbj87: /tmp/tmpxvmgbj87.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '_', ' ');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpjr52ihm3: /tmp/tmpjr52ihm3.cpp:15: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ',\
    \ '-');\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp4qsuk5b6: /tmp/tmp4qsuk5b6.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133017
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, \"-\");\n         \
    \   pos = result.find(\" \", pos + 1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpacjua0qp: /tmp/tmpacjua0qp.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.find_first_not_of(' ') != std::string::npos) {\n   \
    \     std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmph22rlugy: /tmp/tmph22rlugy.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    size_t pos = 0;\n   \
    \ while (pos < fixed_text.length()) {\n        size_t next = fixed_text.find('\
    \ ', pos);\n        if (next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.length();\n        } else {\n     \
    \       fixed_text.replace(pos, next - pos + 1, \" \");\n            pos = next\
    \ + 1;\n        }\n    }\n    \n    if (fixed_text.size() > 2) {\n        size_t\
    \ pos = 0;\n        while (pos < fixed_text.length()) {\n            size_t next\
    \ = fixed_text.find(' ', pos);\n            if (next == std::string::npos) {\n\
    \                fixed_text.replace(pos, 1, \" \");\n                pos = fixed_text.length();\n\
    \            } else {\n                fixed_text.replace(pos, next - pos + 1,\
    \ \"-\");\n                pos = next + 1;\n            }\n        }\n    }\n\
    \    \n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpumx6ppt1: /tmp/tmpumx6ppt1.cpp:39: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' \
    \ ', '-');\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp83dyq8du.cpp:10:42: warning: multi-character character constant\
    \ [-Wmultichar]\n   10 |         std::replace(s.begin(), s.end(), '  ', '-');\n\
    \      |                                          ^~~~\n/tmp/tmp83dyq8du.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmp83dyq8du.cpp:10:51:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   10 |      \
    \   std::replace(s.begin(), s.end(), '  ', '-');\n      |                    \
    \                               ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp83dyq8du.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp83dyq8du.cpp:10:51:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   10 |         std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                                   ^\nIn\
    \ file included from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp83dyq8du.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:   template argument\
    \ de"
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        res[pos] = '_';\n    \
    \    pos = next;\n    }\n    while(pos < res.size()) {\n        size_t next =\
    \ res.find(' ', pos);\n        if(next == std::string::npos) {\n            next\
    \ = res.size();\n        }\n        res[pos] = '-';\n        pos = next;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpidk6c409: /tmp/tmpidk6c409.cpp:29: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n            pos++;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpm090jtmh: /tmp/tmpm090jtmh.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxopiygi.cpp:10:52: warning: multi-character character constant\
    \ [-Wmultichar]\n   10 |         std::replace(result.begin(), result.end(), '\
    \  ', '-');\n      |                                                    ^~~~\n\
    /tmp/tmpqxopiygi.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpqxopiygi.cpp:10:61: error: no matching function for call to \u2018\
    replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int, char)\u2019\n   10 |         std::replace(result.begin(), result.end(),\
    \ '  ', '-');\n      |                                                       \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          \
    \       from /tmp/tmpqxopiygi.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqxopiygi.cpp:10:61:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   10 |         std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n      |                                         \
    \                    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqxopiygi.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/ps"
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed.find(\" \", pos)) != std::string::npos) {\n        fixed.replace(pos,\
    \ 1, \" \");\n        fixed.replace(pos, 1, \" \");\n        pos++;\n    }\n \
    \   if (fixed.find(\"  \", pos) != std::string::npos) {\n        fixed.replace(pos,\
    \ 1, \" \");\n        fixed.replace(pos, 1, \" \");\n    }\n    return fixed;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpt9aztwk_: /tmp/tmpt9aztwk_.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos++;\n    }\n    size_t pos2 = result.find_first_not_of(\"\
    \ \", pos);\n    while (pos2 != std::string::npos) {\n        result.replace(pos2,\
    \ 1, \"-\");\n        pos2 = result.find_first_not_of(\" \", pos2 + 1);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmprf19b54q: /tmp/tmprf19b54q.cpp:23: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while(pos\
    \ < fixed_text.size()) {\n        size_t pos_space = fixed_text.find(\" \", pos);\n\
    \        if(pos_space != std::string::npos) {\n            fixed_text.replace(pos_space,\
    \ pos_space + 1, std::string(\"_\"));\n            pos = pos_space + 1;\n    \
    \    }\n        else {\n            pos = fixed_text.size();\n        }\n    }\n\
    \    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n \
    \   assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmppn1ta6bi: /tmp/tmppn1ta6bi.cpp:24: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.size() > 2 && res[0] == res[res.size() - 1]) {\n   \
    \     std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx1w339qf: /tmp/tmpx1w339qf.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        if(res[pos] == ' ') {\n            res[pos] = '_';\n            pos++;\n\
    \        }\n        else if(res[pos] == ' ' && pos != 0) {\n            res[pos]\
    \ = '-';\n            pos++;\n        }\n        pos++;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpphs50kuh: /tmp/tmpphs50kuh.cpp:26: int main(): Assertion `candidate(("Yellow
    Yellow  Dirty  Fellow")) == ("Yellow_Yellow__Dirty__Fellow")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    \n    // Replace all spaces\
    \ with underscores\n    for(size_t i = 0; i < fixed_text.size(); i++) {\n    \
    \    if(fixed_text[i] == ' ') {\n            fixed_text[i] = '_';\n        }\n\
    \    }\n    \n    // Replace consecutive spaces with -\n    size_t i = 0;\n  \
    \  while(i < fixed_text.size()) {\n        if(fixed_text[i] == ' ') {\n      \
    \      fixed_text[i] = '-';\n            i++;\n        }\n        i++;\n    }\n\
    \    \n    return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpvoytc3z3: /tmp/tmpvoytc3z3.cpp:33: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed = text;\n    size_t pos = 0;\n    while (pos\
    \ < fixed.length()) {\n        if (fixed[pos] == ' ') {\n            fixed.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        } else if (fixed[pos]\
    \ == ' ' && pos != fixed.length() - 1) {\n            fixed.replace(pos, 1, std::string(\"\
    -\"));\n            pos += 1;\n        } else {\n            pos += 1;\n     \
    \   }\n    }\n    return fixed;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp7wnloubi: /tmp/tmp7wnloubi.cpp:25: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '_', ' ');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpf47en_k0: /tmp/tmpf47en_k0.cpp:16: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133021
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, \" \");\n        pos = result.find(\" \", pos + 1);\n    }\n    size_t pos2\
    \ = result.find(\" \");\n    if (pos2 != std::string::npos) {\n        result.replace(pos2,\
    \ 1, \"-\");\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp445y2r7z: /tmp/tmp445y2r7z.cpp:22: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos += 2;\n    }\n    if (fixed_text.find(\"  \", pos) !=\
    \ std::string::npos) {\n        fixed_text.replace(pos, 2, \"-\");\n    }\n  \
    \  return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpyultbpvi: /tmp/tmpyultbpvi.cpp:21: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ (pos < fixed_text.size()) {\n        size_t next_space = fixed_text.find(' ',\
    \ pos);\n        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.size();\n        } else {\n       \
    \     fixed_text.replace(pos, 1, \" \");\n            pos = next_space + 1;\n\
    \        }\n    }\n    return fixed_text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmp7xosf8_v: /tmp/tmp7xosf8_v.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    size_t pos\
    \ = 0;\n    while(pos < text.size()) {\n        size_t next = text.find(' ', pos);\n\
    \        if(next == std::string::npos) {\n            next = text.size();\n  \
    \      }\n        text.erase(text.begin() + pos, text.begin() + next);\n     \
    \   pos = next + 1;\n    }\n    if(text.size() > 2) {\n        text.erase(text.begin()\
    \ + 2, text.end());\n    }\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpfje5xkje: /tmp/tmpfje5xkje.cpp:24: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string out = text;\n    for(auto &c : out) {\n        if(c\
    \ != ' ') {\n            out += '_';\n        }\n    }\n    for(auto &c : out)\
    \ {\n        if(c != ' ' && c != '_') {\n            out += '-';\n        }\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n \
    \   assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpfubrkwyw: /tmp/tmpfubrkwyw.cpp:22: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        res[pos] = '_';\n    \
    \    pos = next;\n    }\n    while(pos < res.size()) {\n        size_t next =\
    \ res.find(' ', pos);\n        if(next == std::string::npos) {\n            next\
    \ = res.size();\n        }\n        res[pos] = '-';\n        pos = next;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpidk6c409: /tmp/tmpidk6c409.cpp:29: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx5807o7s: /tmp/tmpx5807o7s.cpp:17: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        res.replace(pos, 1, res[pos]);\n\
    \        pos = next;\n    }\n    while(pos < res.size()) {\n        size_t next\
    \ = res.find(' ', pos);\n        if(next == std::string::npos) {\n           \
    \ next = res.size();\n        }\n        res.replace(pos, 1, res[pos]);\n    \
    \    pos = next;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzuu73fyd.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpzuu73fyd.cpp:14:37: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(size_t&, int, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   14 |         res.replace(pos, 1, res[pos]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzuu73fyd.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpzuu73fyd.cpp:14:37:\
    \ error: invalid conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n\
    \   14 |         res.replace(pos, 1, res[pos]);\n      |                     \
    \                ^\n      |                                     |\n      |   \
    \                                  __gnu_cxx::__alloc_traits<std::allocator<c"
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '_', ' ');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpjr52ihm3: /tmp/tmpjr52ihm3.cpp:15: int main(): Assertion `candidate(("Mudasir
    Hanif ")) == ("Mudasir_Hanif_")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" _ \")\n        s.replace(s.begin(),\
    \ s.begin() + 2, \" \");\n    return s;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmplz47osae: /tmp/tmplz47osae.cpp:18: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::replace(text.begin(), text.end(), ' ', '_');\n    std::replace(text.begin(),\
    \ text.end(), '_', ' ');\n    std::replace(text.begin(), text.end(), '  ', ' ');\n\
    \    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7wx1mmu.cpp:9:44: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(text.begin(), text.end(), '  ', ' ');\n\
    \      |                                            ^~~~\n/tmp/tmpb7wx1mmu.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpb7wx1mmu.cpp:9:53:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(text.begin(),\
    \ text.end(), '  ', ' ');\n      |                                           \
    \          ^\nIn file included from /usr/include/c++/9/algorithm:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmpb7wx1mmu.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpb7wx1mmu.cpp:9:53:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(text.begin(), text.end(),\
    \ '  ', ' ');\n      |                                                     ^\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpb7wx1mmu.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1: note:   template ar"
  stdout: ''
  timestamp: 1660133022
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), '  ', '-');\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0qbkbrz.cpp:9:50: warning: multi-character character constant\
    \ [-Wmultichar]\n    9 |     std::replace(std::begin(res), std::end(res), '  ',\
    \ '-');\n      |                                                  ^~~~\n/tmp/tmpg0qbkbrz.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n    9 |     std::replace(std::begin(res),\
    \ std::end(res), '  ', '-');\n      |                                        \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4401 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4401:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpg0qbkbrz.cpp:9:59:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n    9 |     std::replace(std::begin(res), std::end(res),\
    \ '  ', '-');\n      |                                                       \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:71,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmpg0qbkbrz.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:174:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::replace(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, const\
    \ _Tp&, const _Tp&)\u2019\n  174 | replace(_ExecutionPolicy&& __exec, _ForwardIterator\
    \ __first, _ForwardIterator __last, const _Tp& __old_value,\n      | ^~~~~~~\n\
    /usr/include/c++/9/pstl/glue_algorit"
  stdout: ''
  timestamp: 1660133013
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string s = text;\n    size_t pos = 0;\n    while(pos < s.size())\
    \ {\n        pos = s.find_first_not_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            s.erase(pos, 1);\n        }\n        pos = s.find_first_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            s.insert(pos,\
    \ \"-\");\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpw6k76c5_: /tmp/tmpw6k76c5_.cpp:23: int main(): Assertion `candidate(("Example"))
    == ("Example")'' failed.

    '
  stdout: ''
  timestamp: 1660133022
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
    \ text) {\n    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.find_first_of(' ') != std::string::npos) {\n       \
    \ std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'tmpqvi8bt6_: /tmp/tmpqvi8bt6_.cpp:19: int main(): Assertion `candidate(("Exa   mple"))
    == ("Exa-mple")'' failed.

    '
  stdout: ''
  timestamp: 1660133014
