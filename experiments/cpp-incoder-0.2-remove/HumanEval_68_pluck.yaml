name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a list, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given array is empty, return [].\n// Example 1:\n// Explanation: 2 has\
  \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n\
  // Example 4:\n// Explanation: 0 is the smallest value, but  there are two zeros,\n\
  // so we will choose the first zero, which has the smallest index.\n// Constraints:\n\
  // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8})))\
  \ == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n \
  \   assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    // Your code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    int smalest_even_index = 0;\n  \
    \  long smalest_even_value_pos = 0;\n    int smalest_even_index_pos = 0;\n   \
    \ long smalest_even_value_neg = 0;\n    int smalest_even_index_neg = 0;\n    long\
    \ smalest_even_value_zero = 0;\n    int smalest_even_index_zero = 0;\n    long\
    \ smalest_even_value_one = 0;\n    int smalest_even_index_one = 0;\n    long smalest_even_value_two\
    \ = 0;\n    int smalest_even_index_two = 0;\n    long smalest_even_value_three\
    \ = 0;\n    int smalest_even_index_three = 0;\n    long smalest_even_value_four\
    \ = 0;\n    int smalest_even_index_four = 0;\n    long smalest_even_value_five\
    \ = 0;\n    int smalest_even_index_five = 0;\n    long smalest_even_value_six\
    \ = 0;\n    int smalest_even_index_six = 0;\n    long smalest_even_value_seven\
    \ = 0;\n    int smalest_even_index_seven = 0;\n    long smalest_even_value_eight\
    \ = 0;\n    int smalest_even_index_eight = 0;\n    long smalest_even_value_nine\
    \ = 0;\n    int smalest_even_index_nine = 0;\n    long smalest_even_value_ten\
    \ = 0;\n    int smalest_even_index_ten = 0;\n    long smalest_even_value_eleven\
    \ = 0;\n    int smalest_even_index_eleven = 0;\n    long smalest_even_value_twelve\
    \ = 0;\n    int smalest_even_index_twelve = 0;\n    long smalest_even_value_thirteen\
    \ = 0;\n    int smalest_even_index_thirteen = 0;\n    long smalest_even_value_fourteen\
    \ = 0;\n    int smalest_even_index_fourteen = 0;\n    long smalest_even_value_fifteen\
    \ = 0;\n    int smalest_even_index_fifteen = 0;\n    long smalest_even_value_sixteen\
    \ = 0;\n    int smalest_even_index_sixteen = 0;\n    long smalest_even_value_seventeen\
    \ = 0;\n    int smalest_even_index_seventeen = 0;\n    long smalest_even_value_eighteen\
    \ = 0;\n    int smalest_even_index_eighteen = 0;\n    long smalest_even_value_nineteen\
    \ = 0;\n    int smalest_even_index_nineteen = 0;\n    long smalest_even_value_twenty\
    \ = 0;\n    int smalest_even_index_twenty = 0;", "    // code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_temp\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n", "    long smalest_value = arr[0];\n    long smalest_index = 0;\n  \
    \  long smallest_even_value = 0;\n    std::vector<long> result;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            if(smallest_even_value\
    \ < arr[i]) {\n                smallest_even_value = arr[i];\n               \
    \ smalest_value = arr[i];\n                smalest_index = i;\n            }\n\
    \        }\n    }\n    if(smallest_even_value == 0) {\n        return result;\n\
    \    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // Your code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_temp = 0;\n\
    \    long smalest_even_index_temp_temp = 0;\n    long smalest_even_index_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ smalest_even_index_temp_temp_temp_temp_temp_temp_temp = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n  \
    \  long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_of_",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index_value);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n      \
    \  result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    long even_value = 0;\n    long index = 0;\n    long size = arr.size();\n\
    \    for (long i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0) {\n     \
    \       even_value = arr[i];\n            index = i;\n        }\n        if (arr[i]\
    \ < smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = index;\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value == 0) {\n                smalest_value = arr[i];\n  \
    \              smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value=0;\n  \
    \  long smalest_index=0;\n    long smallest_value=INT_MAX;\n    long smallest_index=0;\n\
    \    long smallest_even_value=INT_MAX;\n    long smallest_even_count=0;\n    long\
    \ smallest_even_node=INT_MAX;\n    long smallest_even_node_index=0;\n    long\
    \ smallest_even_node_even_value=INT_MAX;\n    long smallest_even_node_even_count=0;\n\
    \    long smallest_even_node_even_node_index=0;\n    long smallest_even_node_even_node_even_value=INT_MAX;\n\
    \    long smallest_even_node_even_node_even_count=0;\n    long smallest_even_node_even_node_even_node_index=0;\n\
    \    long smallest_even_node_even_node_even_node_even_value=INT_MAX;\n    long\
    \ smallest_even_node_even_node_even_node_even_count=0;\n    long smallest_even_node_even_node_even_node_even_node_index=0;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_value=INT_MAX;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_count=0;\n   \
    \ long smallest_even_node_even_node_even_node_even_node_even_node_index=0;\n \
    \   long smallest_even_node_even_node_even_node_even_node_even_node_even_value=INT_MAX;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_node_even_count=0;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_node_even_node_index=0;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_node_even_node_even_value=INT_MAX;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_node_even_node_even_count=0;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_node_even_node_even_node_index=0;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_node_even_node_even_node_even_value=INT_MAX;\n\
    \    long smallest_even_node_even_node_even_node_even_node_even_node_even_node_even_node_even_count=0;\n\
    \    long smalle", "    // code here\n    long smalest_value = 0;\n    int smallest_index\
    \ = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n\
    \            if(arr[i] < smalest_value){\n                smalest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    int\
    \ smallest_index = 0;\n    int size = arr.size();\n    for (int i = 0; i < size;\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            smalest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    if (smalest_value == 0)\
    \ {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smallest_index\
    \ = arr[0];\n    long index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smallest_index = index;\n        }\n        if (arr[i] % 2 == 0)\
    \ {\n            index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smallest_index);\n    } else {\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    // code here\n    long smallest_value = 0;\n\
    \    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_count\
    \ = 0;\n    long index = 0;\n    long even_value = 0;\n    long even_count = 0;\n\
    \    long even_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0) {\n            even_value = arr[i];\n            even_count++;\n\
    \        } else {\n            if (even_count > smallest_even_count) {\n     \
    \           smallest_even_value = even_value;\n                smallest_even_count\
    \ = even_count;\n                smallest_even_index = even_index;\n         \
    \   }\n            even_value = 0;\n            even_count = 0;\n            even_index++;\n\
    \        }\n    }\n    if (smallest_even_count == 0) {\n        return {};\n \
    \   }\n    if (smallest_even_count == 1) {\n        smallest_value = smallest_even_value;\n\
    \        smallest_index = smallest_even_index;\n    } else {\n        smallest_value\
    \ = arr[smallest_even_index];\n        smallest_index = smallest_even_index;\n\
    \    }\n    std::vector<long> result;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n \
    \       }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smallest_even_value = arr[0];\n    long smallest_even_index =\
    \ 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (arr[i] < smallest_even_value) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \ }\n        else if (arr[i] < smallest_even_value) {\n            smallest_even_value\
    \ = arr[i];\n            smallest_even_index = i;\n        }\n        else if\
    \ (arr[i] == smallest_even_value) {\n            if (i < smallest_even_index)\
    \ {\n                smallest_even_index = i;\n            }\n        }\n    }\n\
    \    std::vector<long> result;\n    if (smallest_even_value == arr[0]) {\n   \
    \     result.push_back(smallest_even_value);\n        result.push_back(smallest_even_index);\n\
    \    }\n    else {\n        result.push_back(smallest_even_value);\n        result.push_back(smallest_even_index);\n\
    \    }\n    return result;", "    // Your code here\n    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    long smallest_even_value = 0;\n    long\
    \ smallest_even_index = 0;\n    long smallest_value_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_even_value == 0) {\n                smallest_even_value = arr[i];\n\
    \                smallest_even_index = i;\n            } else if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        } else if (arr[i] < smallest_even_value) {\n  \
    \          smallest_even_value = arr[i];\n            smallest_even_index = i;\n\
    \        }\n    }\n    std::vector<long> result;\n    if (smallest_even_value\
    \ != 0) {\n        result.push_back(smallest_even_value);\n        result.push_back(smallest_even_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> ans;\n\
    \    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n    return\
    \ ans;", "    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_value_pos = 0;\n\
    \    long smalest_even_index_pos = 0;\n    long smalest_even_value_neg = 0;\n\
    \    long smalest_even_index_neg = 0;\n    long smalest_index_neg = 0;\n    long\
    \ smalest_value_neg = 0;\n    long smalest_index_pos = 0;\n    long smalest_value_pos\
    \ = 0;\n    long smalest_index_neg = 0;\n    long smalest_value_neg = 0;\n   \
    \ long smalest_index_pos = 0;\n    long smalest_value_pos = 0;\n    long smalest_index_neg\
    \ = 0;\n    long smalest_value_neg = 0;\n    long smalest_index_pos = 0;\n   \
    \ long smalest_value_pos = 0;\n    long smalest_index_neg = 0;\n    long smalest_value_neg\
    \ = 0;\n    long smalest_index_pos = 0;\n    long smalest_value_pos = 0;\n   \
    \ long smalest_index_neg = 0;\n    long smalest_value_neg = 0;\n    long smalest_index_pos\
    \ = 0;\n    long smalest_value_pos = 0;\n    long smalest_index_neg = 0;\n   \
    \ long smalest_value_neg = 0;\n    long smalest_index_pos = 0;\n    long smalest_value_pos\
    \ = 0;\n    long smalest_index_neg = 0;\n    long smalest_value_neg = 0;\n   \
    \ long smalest_index_pos = 0;\n    long smalest_value_pos = 0;\n    long smalest_index_neg\
    \ = 0;\n    long smalest_value_neg = 0;\n    long smalest_index_pos = 0;\n   \
    \ long smalest_value_pos = 0;\n    long smalest_index_neg = 0;\n    long smalest_value_neg\
    \ = 0;\n    long smalest_index_pos = 0;\n    long smalest_value_pos = 0;\n   \
    \ long smalest_index_neg = 0;\n    long smalest_value_neg = 0;\n    long smalest_index_pos\
    \ = 0;\n    long smalest_value_pos = 0;\n    long smalest_index_neg = 0;\n   \
    \ long smalest_value_neg = 0;\n    long smalest_index_pos = 0;\n    long smalest_value_pos\
    \ = 0;\n    long smalest_index_neg = 0;\n    long smalest_value_neg = 0;\n   \
    \ long smalest_index_pos = 0;\n    long smalest_value_pos = 0;\n    long smalest_index_",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n      \
    \  result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0, smalest_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> ans;\n    if (smalest_value != 0) {\n        ans.push_back(smalest_value);\n\
    \        ans.push_back(smalest_index);\n    }\n    return ans;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long index = 0;\n    for\
    \ (auto i : arr) {\n        if (i % 2 == 0) {\n            if (smalest_value ==\
    \ 0) {\n                smalest_value = i;\n                smalest_index = index;\n\
    \            } else if (smalest_value < i) {\n                smalest_value =\
    \ i;\n                smalest_index = index;\n            }\n            index++;\n\
    \        }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n\
    \    return {smalest_value, smalest_index};", "    // code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smallest_index = 0;\n    long smallest_value\
    \ = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n       \
    \         smallest_value = arr[i];\n                smallest_index = i;\n    \
    \        } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if (smallest_value == 0) {\n        return {};\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] == smallest_value) {\n   \
    \         index = i;\n        }\n    }\n    smalest_value = smallest_value;\n\
    \    smalest_index = index;\n    return { smalest_value, smalest_index };", " \
    \   long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n      \
    \  result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_value_pos = 0;\n    long smalest_even_index_pos\
    \ = 0;\n    long smalest_even_value_neg = 0;\n    long smalest_even_index_neg\
    \ = 0;\n    long smalest_even_value_zero = 0;\n    long smalest_even_index_zero\
    \ = 0;\n    long smalest_even_value_one = 0;\n    long smalest_even_index_one\
    \ = 0;\n    long smalest_even_value_two = 0;\n    long smalest_even_index_two\
    \ = 0;\n    long smalest_even_value_three = 0;\n    long smalest_even_index_three\
    \ = 0;\n    long smalest_even_value_four = 0;\n    long smalest_even_index_four\
    \ = 0;\n    long smalest_even_value_five = 0;\n    long smalest_even_index_five\
    \ = 0;\n    long smalest_even_value_six = 0;\n    long smalest_even_index_six\
    \ = 0;\n    long smalest_even_value_seven = 0;\n    long smalest_even_index_seven\
    \ = 0;\n    long smalest_even_value_eight = 0;\n    long smalest_even_index_eight\
    \ = 0;\n    long smalest_even_value_ten = 0;\n    long smalest_even_index_ten\
    \ = 0;\n    long smalest_even_value_eleven = 0;\n    long smalest_even_index_eleven\
    \ = 0;\n    long smalest_even_value_twelve = 0;\n    long smalest_even_index_twelve\
    \ = 0;\n    long smalest_even_value_thirteen = 0;\n    long smalest_even_index_thirteen\
    \ = 0;\n    long smalest_even_value_fourteen = 0;\n    long smalest_even_index_fourteen\
    \ = 0;\n    long smalest_even_value_fifteen = 0;\n    long smalest_even_index_fifteen\
    \ = 0;\n    long smalest_even_value_sixteen = 0;\n    long smalest_even_index_sixteen\
    \ = 0;\n    long smalest_even_value_seventeen = 0;\n    long smalest_even_index_seventeen\
    \ = 0;\n    long smalest_even_value_eighteen = 0;\n    long smalest_even_index_eighteen\
    \ = 0;\n    long smalest_even_value_nineteen = 0;\n    long smalest_even_index_nineteen\
    \ = 0;\n    long smalest_even_value_twenty = 0;\n    long smalest_even_index_twent",
  "    // code here\n    long smalest_value = arr[0];\n    int smalest_index = 0;\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    // code here\n    long\
    \ smallest_value = 0;\n    long smallest_index = 0;\n    long max_value = arr[0];\n\
    \    long max_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_value) {\n            max_value = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] == max_value) {\n            if (arr[i] % 2 == 0) {\n           \
    \     if (smallest_value == 0) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                } else {\n         \
    \           if (arr[i] < smallest_value) {\n                        smallest_value\
    \ = arr[i];\n                        smallest_index = i;\n                   \
    \ }\n                }\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = arr[0];\n    int smalest_index = 0;\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long min_value = arr[0];\n    long min_index = 0;\n    for (int i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < min_value) {\n           \
    \ min_value = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_value\
    \ % 2 == 0) {\n        smalest_value = min_value;\n        smalest_index = min_index;\n\
    \    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    // write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index_of_smalest_value = 0;\n \
    \   long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_", "    // write your code here\n    long smalest_value=0;\n\
    \    long smalest_index=0;\n    long smallest_value=arr[0];\n    long smallest_index=0;\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]<smallest_value){\n    \
    \        smallest_value=arr[i];\n            smallest_index=i;\n        }\n  \
    \  }\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==smallest_value){\n\
    \            smalest_value=arr[i];\n            smalest_index=i;\n        }\n\
    \    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    long index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n     \
    \   if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n     \
    \       smalest_index = i;\n        }\n    }\n    if (smalest_value == 0) {\n\
    \        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] / 2;\n            } else if\
    \ (smalest_value == arr[i]) {\n                smalest_index = i;\n          \
    \      smalest_even_value = arr[i] / 2;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_even_value = arr[i] / 2;\n            }\n    \
    \    }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    // write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    long smalest_index_value = 0;\n    long smalest_index_value_2 = 0;\n\
    \    long smalest_index_value_3 = 0;\n    long smalest_index_value_4 = 0;\n  \
    \  long smalest_index_value_5 = 0;\n    long smalest_index_value_6 = 0;\n    long\
    \ smalest_index_value_7 = 0;\n    long smalest_index_value_8 = 0;\n    long smalest_index_value_9\
    \ = 0;\n    long smalest_index_value_10 = 0;\n    long smalest_index_value_11\
    \ = 0;\n    long smalest_index_value_12 = 0;\n    long smalest_index_value_13\
    \ = 0;\n    long smalest_index_value_14 = 0;\n    long smalest_index_value_15\
    \ = 0;\n    long smalest_index_value_16 = 0;\n    long smalest_index_value_17\
    \ = 0;\n    long smalest_index_value_18 = 0;\n    long smalest_index_value_19\
    \ = 0;\n    long smalest_index_value_20 = 0;\n    long smalest_index_value_21\
    \ = 0;\n    long smalest_index_value_22 = 0;\n    long smalest_index_value_23\
    \ = 0;\n    long smalest_index_value_24 = 0;\n    long smalest_index_value_25\
    \ = 0;\n    long smalest_index_value_26 = 0;\n    long smalest_index_value_27\
    \ = 0;\n    long smalest_index_value_28 = 0;\n    long smalest_index_value_29\
    \ = 0;\n    long smalest_index_value_30 = 0;\n    long smalest_index_value_31\
    \ = 0;\n    long smalest_index_value_32 = 0;\n    long smalest_index_value_33\
    \ = 0;\n    long smalest_index_value_34 = 0;\n    long smalest_index_value_35\
    \ = 0;\n    long smalest_index_value_36 = 0;\n    long smalest_index_value_37\
    \ = 0;\n    long smalest_index_value_38 = 0;\n    long smalest_index_value_39\
    \ = 0;\n    long smalest_index_value_40 = 0;\n    long smalest_index_value_41\
    \ = 0;\n    long smalest_index_value_42 = 0;\n    long smalest_index_value_43\
    \ = 0;\n    long smalest_index_value_44 = 0;\n    long smalest_index_value_45\
    \ = 0;\n    long smalest_index_value_46 = 0;\n    long smalest_index_value_47\
    \ = 0;\n    long smalest_index_value_48 = 0;\n    long smalest_index_value_49\
    \ = 0;\n    long smalest_index_value_50 = 0;\n", "    // Your code here\n    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    // write your code here\n    long smallest_value = 0;\n\
    \    long smallest_index = 0;\n    long index = 0;\n    long value = 0;\n    long\
    \ temp = 0;\n    long count = 0;\n    long sum = 0;\n    long temp2 = 0;\n   \
    \ long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 =\
    \ 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long\
    \ temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n\
    \    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;", "    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = arr[0];\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smallest_even_value) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_even_value) {\n       \
    \ result.push_back(smallest_even_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smallest_value = 0;\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    long smallest_index_of_smallest_value\
    \ = 0;\n    long smallest_index_of_smallest_value2 = 0;\n    long smallest_index_of_smallest_value3\
    \ = 0;\n    long smallest_index_of_smallest_value4 = 0;\n    long smallest_index_of_smallest_value5\
    \ = 0;\n    long smallest_index_of_smallest_value6 = 0;\n    long smallest_index_of_smallest_value7\
    \ = 0;\n    long smallest_index_of_smallest_value8 = 0;\n    long smallest_index_of_smallest_value9\
    \ = 0;\n    long smallest_index_of_smallest_value10 = 0;\n    long smallest_index_of_smallest_value11\
    \ = 0;\n    long smallest_index_of_smallest_value12 = 0;\n    long smallest_index_of_smallest_value13\
    \ = 0;\n    long smallest_index_of_smallest_value14 = 0;\n    long smallest_index_of_smallest_value15\
    \ = 0;\n    long smallest_index_of_smallest_value16 = 0;\n    long smallest_index_of_smallest_value17\
    \ = 0;\n    long smallest_index_of_smallest_value18 = 0;\n    long smallest_index_of_smallest_value19\
    \ = 0;\n    long smallest_index_of_smallest_value20 = 0;\n    long smallest_index_of_smallest_value21\
    \ = 0;\n    long smallest_index_of_smallest_value22 = 0;\n    long smallest_index_of_smallest_value23\
    \ = 0;\n    long smallest_index_of_smallest_value24 = 0;\n    long smallest_index_of_smallest_value25\
    \ = 0;\n    long smallest_index_of_smallest_value26 = 0;\n    long smallest_index_of_smallest_value27\
    \ = 0;\n    long smallest_index_of_smallest_value28 = 0;\n    long smallest_index_of_smallest_value29\
    \ = 0;\n    long smallest_index_of_smallest_value30 = 0;\n    long smallest_index_of_smallest_value31\
    \ = 0;\n    long smallest_index_of_smallest_value32 = 0;\n    long smallest_index_of_smallest_value33\
    \ = 0;\n    long smallest_index_of_smallest_value34 = 0;\n    long smallest_index_of_smallest_value35\
    \ = 0;\n    long smallest_index_of_smallest_value36 = 0;\n    long smallest_index_of_smallest_value37\
    \ = 0;\n    long smallest_index_of_smallest_value38 = 0;\n    long smallest_index_of_smallest_value39\
    \ = 0;\n    long smallest_index_", "    // code here\n    long smalest_value =\
    \ 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_in_array = 0;\n    long\
    \ smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array = 0;\n\
    \    long smalest_even_index_in_array_in_array_in_array_in_array_in_array = 0;\n\
    \    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n      \
    \  result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_2 = 0;\n    long smalest_even_index_3 = 0;\n    long\
    \ smalest_even_index_4 = 0;\n    long smalest_even_index_5 = 0;\n    long smalest_even_index_6\
    \ = 0;\n    long smalest_even_index_7 = 0;\n    long smalest_even_index_8 = 0;\n\
    \    long smalest_even_index_9 = 0;\n    long smalest_even_index_10 = 0;\n   \
    \ long smalest_even_index_11 = 0;\n    long smalest_even_index_12 = 0;\n    long\
    \ smalest_even_index_13 = 0;\n    long smalest_even_index_14 = 0;\n    long smalest_even_index_15\
    \ = 0;\n    long smalest_even_index_16 = 0;\n    long smalest_even_index_17 =\
    \ 0;\n    long smalest_even_index_18 = 0;\n    long smalest_even_index_19 = 0;\n\
    \    long smalest_even_index_20 = 0;\n    long smalest_even_index_21 = 0;\n  \
    \  long smalest_even_index_22 = 0;\n    long smalest_even_index_23 = 0;\n    long\
    \ smalest_even_index_24 = 0;\n    long smalest_even_index_25 = 0;\n    long smalest_even_index_26\
    \ = 0;\n    long smalest_even_index_27 = 0;\n    long smalest_even_index_28 =\
    \ 0;\n    long smalest_even_index_29 = 0;\n    long smalest_even_index_30 = 0;\n\
    \    long smalest_even_index_31 = 0;\n    long smalest_even_index_32 = 0;\n  \
    \  long smalest_even_index_33 = 0;\n    long smalest_even_index_34 = 0;\n    long\
    \ smalest_even_index_35 = 0;\n    long smalest_even_index_36 = 0;\n    long smalest_even_index_37\
    \ = 0;\n    long smalest_even_index_38 = 0;\n    long smalest_even_index_39 =\
    \ 0;\n    long smalest_even_index_40 = 0;\n    long smalest_even_index_41 = 0;\n\
    \    long smalest_even_index_42 = 0;\n    long smalest_even_index_43 = 0;\n  \
    \  long smalest_even_index_44 = 0;\n    long smalest_even_index_45 = 0;\n    long\
    \ smalest_even_index_46 = 0;\n    long smalest_even_index_47 = 0;\n    long smalest_even_index_48\
    \ = 0;\n    long smalest_even_index_49", "    long smalest_value = arr[0];\n \
    \   long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n   \
    \         smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index_value = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n                smalest_index_value = arr[i];\n   \
    \         } else if (smalest_index_value > arr[i]) {\n                smalest_index_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0, smalest_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_value != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = arr[0];\n\
    \    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n    \
    \    if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n    \
    \        smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index\
    \ = 0;\n    long even_value = 0;\n    long even_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smallest_even_value) {\n                smallest_even_value = arr[i];\n  \
    \              smallest_even_index = i;\n            }\n            if (arr[i]\
    \ == smallest_even_value) {\n                even_value = arr[i];\n          \
    \      even_index = i;\n            }\n        }\n    }\n    if (smallest_even_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(even_value);\n\
    \    result.push_back(even_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n                smalest_index_of_smalest_value2 = i;\n            } else\
    \ if (smalest_value == arr[i]) {\n                smalest_index_of_smalest_value\
    \ = i;\n                smalest_index_of_smalest_value2 = i;\n            } else\
    \ if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n                smalest_index_of_smalest_value2 = i;\n            }\n\
    \        }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n\
    \    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    if (smalest_index_of_smalest_value == smalest_index_of_smalest_value2) {\n\
    \        res.push_back(smalest_index_of_smalest_value);\n    }\n    return res;",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smallest_index\
    \ = INT_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < smallest_index) {\n            smallest_index = arr[i];\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index2 = 0;\n    long smalest_even_index_count_min_index2_index\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index = 0;\n    long smalest_even_index_count_min_index2_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2_index2 = 0;\n\
    \    long smalest_even_index_count_min_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_", "    long smalest_value = 0;\n    long smalest_index =\
    \ 0;\n    long index = 0;\n    long value = 0;\n    for (auto i : arr) {\n   \
    \     if (i % 2 == 0) {\n            if (value < smalest_value) {\n          \
    \      smalest_value = value;\n                smalest_index = index;\n      \
    \      }\n            index = i;\n            value = i;\n        } else {\n \
    \           if (value < smalest_value) {\n                smalest_value = value;\n\
    \                smalest_index = index;\n            }\n        }\n    }\n   \
    \ if (smalest_value == 0) {\n        return {};\n    }\n    return {smalest_value,\
    \ smalest_index};", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = arr[0];\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value\
    \ = 0;\n    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_of_smalest_", "    // code here\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smallest_value) {\n            smallest_value =\
    \ arr[i];\n            smallest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    int\
    \ smalest_index = 0;\n    long smalest_even_value = 0;\n    int smalest_even_index\
    \ = 0;\n    long smalest_even_value_index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n                smalest_even_value_index = i;\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_even_value_index = i;\n            } else\
    \ if (smalest_value == arr[i] && smalest_even_value_index == i) {\n          \
    \      smalest_even_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0 && arr.size() > 0) {\n        smalest_value = arr[0];\n        smalest_index\
    \ = arr.size() - 1;\n        smalest_even_value = arr[0] % (arr.size() - 1);\n\
    \        smalest_even_index = arr.size() - 1;\n        smalest_even_value_index\
    \ = arr.size() - 1;\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \        result.push_back(smalest_even_value);\n        result.push_back(smalest_even_index);\n\
    \        result.push_back(smalest_even_value_index);\n        return result;\n\
    \    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    result.push_back(smalest_even_value);\n    result.push_back(smalest_even_index);\n\
    \    result.push_back(smalest_even_value_index);\n    return result;", "    //\
    \ Your code here\n    long smallest_even_value = 0;\n    long smallest_index =\
    \ 0;\n    long smallest_value = 0;\n    long smallest_index2 = 0;\n    long smallest_value2\
    \ = 0;\n    long smallest_index3 = 0;\n    long smallest_value3 = 0;\n    long\
    \ smallest_index4 = 0;\n    long smallest_value4 = 0;\n    long smallest_index5\
    \ = 0;\n    long smallest_value5 = 0;\n    long smallest_index6 = 0;\n    long\
    \ smallest_value6 = 0;\n    long smallest_index7 = 0;\n    long smallest_value7\
    \ = 0;\n    long smallest_index8 = 0;\n    long smallest_value8 = 0;\n    long\
    \ smallest_index9 = 0;\n    long smallest_value9 = 0;\n    long smallest_index10\
    \ = 0;\n    long smallest_value10 = 0;\n    long smallest_index11 = 0;\n    long\
    \ smallest_value11 = 0;\n    long smallest_index12 = 0;\n    long smallest_value12\
    \ = 0;\n    long smallest_index13 = 0;\n    long smallest_value13 = 0;\n    long\
    \ smallest_index14 = 0;\n    long smallest_value14 = 0;\n    long smallest_index15\
    \ = 0;\n    long smallest_value15 = 0;\n    long smallest_index16 = 0;\n    long\
    \ smallest_value16 = 0;\n    long smallest_index17 = 0;\n    long smallest_value17\
    \ = 0;\n    long smallest_index18 = 0;\n    long smallest_value18 = 0;\n    long\
    \ smallest_index19 = 0;\n    long smallest_value19 = 0;\n    long smallest_index20\
    \ = 0;\n    long smallest_value20 = 0;\n    long smallest_index21 = 0;\n    long\
    \ smallest_value21 = 0;\n    long smallest_index22 = 0;\n    long smallest_value22\
    \ = 0;\n    long smallest_index23 = 0;\n    long smallest_value23 = 0;\n    long\
    \ smallest_index24 = 0;\n    long smallest_value24 = 0;\n    long smallest_index25\
    \ = 0;\n    long smallest_value25 = 0;\n    long smallest_index26 = 0;\n    long\
    \ smallest_value26 = 0;\n    long smallest_index27 = 0;\n    long smallest_value27\
    \ = 0;\n    long smallest_index28 = 0;\n    long smallest_value28 = 0;\n    long\
    \ smallest_index29 = 0;\n    long smallest_value29 = 0;\n    long smallest_index30\
    \ = 0;\n    long smallest_value30 = 0;\n    long smallest_index31 = 0;\n    long\
    \ smallest_value31 = 0;\n    long smallest_index32 = 0;\n    long smallest_value",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n       \
    \     smalest_value = arr[i];\n            smalest_index = i;\n        }\n   \
    \ }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n      \
    \  result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = INT_MIN;\n\
    \    long smalest_index = 0;\n    long smalest_index_value = INT_MIN;\n    long\
    \ smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n  \
    \  long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_value = INT_MIN;\n\
    \    long smalest_index_value = INT_MIN;\n    long smalest_index_", "    // code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_value_counter\
    \ = 0;\n    long smalest_even_index_counter = 0;\n    long smalest_even_value_counter2\
    \ = 0;\n    long smalest_even_index_counter2 = 0;\n    long smalest_even_value_counter3\
    \ = 0;\n    long smalest_even_index_counter3 = 0;\n    long smalest_even_value_counter4\
    \ = 0;\n    long smalest_even_index_counter4 = 0;\n    long smalest_even_value_counter5\
    \ = 0;\n    long smalest_even_index_counter5 = 0;\n    long smalest_even_value_counter6\
    \ = 0;\n    long smalest_even_index_counter6 = 0;\n    long smalest_even_value_counter7\
    \ = 0;\n    long smalest_even_index_counter7 = 0;\n    long smalest_even_value_counter8\
    \ = 0;\n    long smalest_even_index_counter8 = 0;\n    long smalest_even_value_counter9\
    \ = 0;\n    long smalest_even_index_counter9 = 0;\n    long smalest_even_value_counter10\
    \ = 0;\n    long smalest_even_index_counter10 = 0;\n    long smalest_even_value_counter11\
    \ = 0;\n    long smalest_even_index_counter11 = 0;\n    long smalest_even_value_counter12\
    \ = 0;\n    long smalest_even_index_counter12 = 0;\n    long smalest_even_value_counter13\
    \ = 0;\n    long smalest_even_index_counter13 = 0;\n    long smalest_even_value_counter14\
    \ = 0;\n    long smalest_even_index_counter14 = 0;\n    long smalest_even_value_counter15\
    \ = 0;\n    long smalest_even_index_counter15 = 0;\n    long smalest_even_value_counter16\
    \ = 0;\n    long smalest_even_index_counter16 = 0;\n    long smalest_even_value_counter17\
    \ = 0;\n    long smalest_even_index_counter17 = 0;\n    long smalest_even_value_counter18\
    \ = 0;\n    long smalest_even_index_counter18 = 0;\n    long smalest_even_value_counter19\
    \ = 0;\n    long smalest_even_index_counter19 = 0;\n    long smalest_even_value_counter20\
    \ = 0;\n    long smalest_even_index_counter20 = 0;\n    long smalest_even_value_counter21\
    \ = 0;\n    long smalest_even_index_counter21 = 0;\n    long smalest_even_value_counter22\
    \ = 0;\n    long smalest_even_index_counter22 = 0;\n", "    // code here\n   \
    \ long smalest_value = 0;\n    long smalest_index = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_value = 0;\n    long index = 0;\n    for (auto i : arr)\
    \ {\n        if (i % 2 == 0) {\n            if (smallest_value == 0) {\n     \
    \           smallest_value = i;\n                smallest_index = index;\n   \
    \         } else if (smallest_value < i) {\n                smallest_value = i;\n\
    \                smallest_index = index;\n            }\n            index++;\n\
    \        } else {\n            if (smallest_value == 0) {\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            } else if (smallest_value\
    \ < i) {\n                smallest_value = i;\n                smallest_index\
    \ = index;\n            }\n            index++;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_value == 0) {\n        return result;\n    }\n   \
    \ result.push_back(smallest_value);\n    result.push_back(smallest_index);\n \
    \   return result;", "    // Your code here\n    long smalest_value = arr[0];\n\
    \    long smalest_index = 0;\n    long index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == arr[i])\
    \ {\n                smalest_index = i;\n            }\n        }\n    }\n   \
    \ std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    long smallest_even_value\
    \ = arr[0];\n    long smallest_even_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n        else if (arr[i] < smallest_even_value)\
    \ {\n            smallest_even_value = arr[i];\n            smallest_even_index\
    \ = i;\n        }\n        else if (arr[i] == smallest_even_value) {\n       \
    \     if (i < smallest_even_index) {\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smallest_even_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_even_index);\n    return result;", "    // write\
    \ your code here\n    long smalest_value = 0, smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // code here\n    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_even_index_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array = 0;\n    long smallest_even_index_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array = 0;\n\
    \    long smallest_even_index_in_array_in_array_in_array_in_array_in_array = 0;\n\
    \    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smallest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_",
  "    // write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    // code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long index = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0)\
    \ {\n            if (smallest_value == 0) {\n                smallest_value =\
    \ i;\n                smallest_index = index;\n            } else if (smallest_value\
    \ < i) {\n                smallest_value = i;\n                smallest_index\
    \ = index;\n            }\n            index++;\n        }\n    }\n    if (smallest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long min_value = arr[0];\n    long\
    \ min_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ < min_value) {\n            min_value = arr[i];\n            min_index = i;\n\
    \        }\n        if (arr[i] < smalest_value) {\n            smalest_value =\
    \ arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long index = 0;\n    long even_value\
    \ = 0;\n    long even_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            even_value = arr[i];\n          \
    \  even_index = i;\n        }\n        if (arr[i] < smallest_value) {\n      \
    \      smallest_value = arr[i];\n            smallest_index = i;\n        }\n\
    \        if (arr[i] < smallest_even_value) {\n            smallest_even_value\
    \ = arr[i];\n            smallest_even_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_even_index != smallest_index) {\n        result.push_back(smallest_even_value);\n\
    \        result.push_back(smallest_even_index);\n    } else {\n        result.push_back(smallest_value);\n\
    \        result.push_back(index);\n    }\n    return result;", "    // write your\
    \ code here\n    long smalest_value=0;\n    long smalest_index=0;\n    long smalest_index_value=0;\n\
    \    long smalest_index_value2=0;\n    long smalest_index_value3=0;\n    long\
    \ smalest_index_value4=0;\n    long smalest_index_value5=0;\n    long smalest_index_value6=0;\n\
    \    long smalest_index_value7=0;\n    long smalest_index_value8=0;\n    long\
    \ smalest_index_value9=0;\n    long smalest_index_value10=0;\n    long smalest_index_value11=0;\n\
    \    long smalest_index_value12=0;\n    long smalest_index_value13=0;\n    long\
    \ smalest_index_value14=0;\n    long smalest_index_value15=0;\n    long smalest_index_value16=0;\n\
    \    long smalest_index_value17=0;\n    long smalest_index_value18=0;\n    long\
    \ smalest_index_value19=0;\n    long smalest_index_value20=0;\n    long smalest_index_value21=0;\n\
    \    long smalest_index_value22=0;\n    long smalest_index_value23=0;\n    long\
    \ smalest_index_value24=0;\n    long smalest_index_value25=0;\n    long smalest_index_value26=0;\n\
    \    long smalest_index_value27=0;\n    long smalest_index_value28=0;\n    long\
    \ smalest_index_value29=0;\n    long smalest_index_value30=0;\n    long smalest_index_value31=0;\n\
    \    long smalest_index_value32=0;\n    long smalest_index_value33=0;\n    long\
    \ smalest_index_value34=0;\n    long smalest_index_value35=0;\n    long smalest_index_value36=0;\n\
    \    long smalest_index_value37=0;\n    long smalest_index_value38=0;\n    long\
    \ smalest_index_value39=0;\n    long smalest_index_value40=0;\n    long smalest_index_value41=0;\n\
    \    long smalest_index_value42=0;\n    long smalest_index_value43=0;\n    long\
    \ smalest_index_value44=0;\n    long smalest_index_value45=0;\n    long smalest_index_value46=0;\n\
    \    long smalest_index_value47=0;\n    long smalest_index_value48=0;\n    long\
    \ smalest_index_value49=0;\n    ", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_value = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_value == 0) {\n                smallest_value = arr[i];\n        \
    \        smallest_index = i;\n            } else if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> res;\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;", "    // code here\n   \
    \ long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_2 = 0;\n\
    \    long smalest_even_index_3 = 0;\n    long smalest_even_index_4 = 0;\n    long\
    \ smalest_even_index_5 = 0;\n    long smalest_even_index_6 = 0;\n    long smalest_even_index_7\
    \ = 0;\n    long smalest_even_index_8 = 0;\n    long smalest_even_index_9 = 0;\n\
    \    long smalest_even_index_10 = 0;\n    long smalest_even_index_11 = 0;\n  \
    \  long smalest_even_index_12 = 0;\n    long smalest_even_index_13 = 0;\n    long\
    \ smalest_even_index_14 = 0;\n    long smalest_even_index_15 = 0;\n    long smalest_even_index_16\
    \ = 0;\n    long smalest_even_index_17 = 0;\n    long smalest_even_index_18 =\
    \ 0;\n    long smalest_even_index_19 = 0;\n    long smalest_even_index_20 = 0;\n\
    \    long smalest_even_index_21 = 0;\n    long smalest_even_index_22 = 0;\n  \
    \  long smalest_even_index_23 = 0;\n    long smalest_even_index_24 = 0;\n    long\
    \ smalest_even_index_25 = 0;\n    long smalest_even_index_26 = 0;\n    long smalest_even_index_27\
    \ = 0;\n    long smalest_even_index_28 = 0;\n    long smalest_even_index_29 =\
    \ 0;\n    long smalest_even_index_30 = 0;\n    long smalest_even_index_31 = 0;\n\
    \    long smalest_even_index_32 = 0;\n    long smalest_even_index_33 = 0;\n  \
    \  long smalest_even_index_34 = 0;\n    long smalest_even_index_35 = 0;\n    long\
    \ smalest_even_index_36 = 0;\n    long smalest_even_index_37 = 0;\n    long smalest_even_index_38\
    \ = 0;\n    long smalest_even_index_39 = 0;\n    long smalest_even_index_40 =\
    \ 0;\n    long smalest_even_index_41 = 1;\n    long smalest_even_index_42 = 1;\n\
    \    long smalest_even_index_43 = 1;\n    long smalest_even_index_44 = 1;\n  \
    \  long smalest_even_index_45 = 1;\n    long smalest_even_index_46 = 1;\n    long\
    \ smalest_even_index_47 = 1;\n    long smalest_even_index_48 = 1;\n    long smalest_even",
  "    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n  \
    \  long smallest_index = 0;\n    long smallest_value = 0;\n    long index = 0;\n\
    \    long value = 0;\n    long even_value = 0;\n    long even_index = 0;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        value = arr[i];\n        even_value\
    \ = value % 2;\n        if (value == 0) {\n            even_value = 0;\n     \
    \   }\n        if (value == 1) {\n            even_value = 1;\n        }\n   \
    \     if (smalest_value == 0) {\n            smalest_value = value;\n        \
    \    smalest_index = i;\n        } else if (smalest_value == 1) {\n          \
    \  if (smalest_index > i) {\n                smalest_value = value;\n        \
    \        smalest_index = i;\n            }\n        } else if (smalest_value ==\
    \ 2) {\n            if (smalest_index > i) {\n                smalest_value =\
    \ value;\n                smalest_index = i;\n            }\n        } else if\
    \ (smalest_value == 3) {\n            if (smalest_index > i) {\n             \
    \   smalest_value = value;\n                smalest_index = i;\n            }\n\
    \        } else if (smalest_value == 4) {\n            if (smalest_index > i)\
    \ {\n                smalest_value = value;\n                smalest_index = i;\n\
    \            }\n        } else if (smalest_value == 5) {\n            if (smalest_index\
    \ > i) {\n                smalest_value = value;\n                smalest_index\
    \ = i;\n            }\n        } else if (smalest_value == 6) {\n            if\
    \ (smalest_index > i) {\n                smalest_value = value;\n            \
    \    smalest_index = i;\n            }\n        } else if (smalest_value == 7)\
    \ {\n            if (smalest_index > i) {\n                smalest_value = value;\n\
    \                smalest_index = i;\n            }\n        } else if (smalest_value\
    \ == 8) {\n            if (smalest_index > i) {\n                smalest_value\
    \ = value;\n                smalest_index = i;\n            }\n        } else\
    \ if (smalest_value == 9) {\n            if (smalest_index > i) {\n          \
    \      smalest_value = value;\n                smalest_index = i;\n          \
    \  }\n        } else if (smalest_value == 10) {\n            if (smalest_index\
    \ > i) {\n                smalest_value = value;\n                smalest_index\
    \ = i;\n            }\n        } else if (smalest_value == 11) {\n           \
    \ if (smalest_index > i) {\n                smalest_value = value;\n         \
    \       smalest_index = i;\n            }\n        } else if (smalest_value ==\
    \ 12) {\n            if (smalest_index > i) {\n                smalest_value =\
    \ value;\n                smalest_index = i;\n            }\n        } else if\
    \ (smalest_value == 13) {\n            if (smalest_index > i) {", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    int\
    \ smalest_index = 0;\n    long smalest_even_value = 0;\n    int smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] / 2;\n                smalest_even_index = i;\n            } else if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n                smalest_even_value = arr[i] / 2;\n\
    \                smalest_even_index = i;\n            }\n        } else if (arr[i]\
    \ % 2 != 0) {\n            if (smalest_value == 0) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] / 2;\n                smalest_even_index = i;\n            } else if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n                smalest_even_value = arr[i] / 2;\n\
    \                smalest_even_index = i;\n            }\n        }\n    }\n  \
    \  if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    result.push_back(smalest_even_value);\n    result.push_back(smalest_even_index);\n\
    \    return result;", "    // code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n            if (smalest_value == arr[i]) {\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == arr[i]) {\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            }\n       \
    \     if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_index_value = arr[i];\n\
    \            }\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count\
    \ = 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index2\
    \ = 0;\n    long smalest_even_index_count_min_index3 = 0;\n    long smalest_even_index_count_min_index4\
    \ = 0;\n    long smalest_even_index_count_min_index5 = 0;\n    long smalest_even_index_count_min_index6\
    \ = 0;\n    long smalest_even_index_count_min_index7 = 0;\n    long smalest_even_index_count_min_index8\
    \ = 0;\n    long smalest_even_index_count_min_index9 = 0;\n    long smalest_even_index_count_min_index10\
    \ = 0;\n    long smalest_even_index_count_min_index11 = 0;\n    long smalest_even_index_count_min_index12\
    \ = 0;\n    long smalest_even_index_count_min_index13 = 0;\n    long smalest_even_index_count_min_index14\
    \ = 0;\n    long smalest_even_index_count_min_index15 = 0;\n    long smalest_even_index_count_min_index16\
    \ = 0;\n    long smalest_even_index_count_min_index17 = 0;\n    long smalest_even_index_count_min_index18\
    \ = 0;\n    long smalest_even_index_count_min_index19 = 0;\n    long smalest_even_index_count_min_index20\
    \ = 0;\n    long smalest_even_index_count_min_index21 = 0;\n    long smalest_even_index_count_min_index22\
    \ = 0;\n    long smalest_even_index_count_min_index23 = 0;\n    long smalest_even_index_count_min_index24\
    \ = 0;\n    long smalest_even_index_count_min_index25 = 0;\n    long smalest_even_index_count_min_index26\
    \ = 0;\n    long smalest_even_index_count_min_index27 = 0;\n    long smalest_even_index_count_min_index28\
    \ = 0;\n    long smalest_even_index_count_min_index29 = 0;\n    long smalest_even_index_count_min_index30\
    \ = 0;\n    long smalest_even_index_count_min_index31 = 0;\n    long smalest_even_index_count_min_index32\
    \ = 0;\n    long smalest_even_index_count_min_index33 = 0;\n    long smalest_even_index_count_min_index34\
    \ = 0;\n    long smalest_even", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_value = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n            if (smallest_value\
    \ == 0) {\n                smallest_value = i;\n                smallest_index\
    \ = index;\n            } else if (smallest_value < i) {\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            }\n            index++;\n\
    \        }\n    }\n    std::vector<long> result;\n    if (smallest_value != 0)\
    \ {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_sum\
    \ = 0;\n    long smalest_even_index_count_sum_max = 0;\n    long smalest_even_index_count_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_",
  "    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n  \
    \  long smallest_index = 0;\n    long smallest_value = 0;\n    long index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \ }\n    smalest_value = smallest_value;\n    smalest_index = smallest_index;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    long smallest_index = 0;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] < arr[0]) {\n            smallest_index = i;\n       \
    \     smalest_value = arr[i];\n        } else if (arr[i] == arr[0]) {\n      \
    \      if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ ans;\n    if (smalest_index != 0) {\n        ans.push_back(smalest_value);\n\
    \        ans.push_back(smalest_index);\n    } else {\n        ans.push_back(smalest_value);\n\
    \    }\n    return ans;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> ans;\n    if (smalest_value != 0) {\n        ans.push_back(smalest_value);\n\
    \        ans.push_back(smalest_index);\n    }\n    return ans;", "    // code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4 =\
    \ 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n    ", "    // Your code here\n    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_index = 0;\n    long smalest_even_index_count_value\
    \ = 0;\n    long smalest_even_index_count_index2 = 0;\n    long smalest_even_index_count_value2\
    \ = 0;\n    long smalest_even_index_count_index3 = 0;\n    long smalest_even_index_count_value3\
    \ = 0;\n    long smalest_even_index_count_index4 = 0;\n    long smalest_even_index_count_value4\
    \ = 0;\n    long smalest_even_index_count_index5 = 0;\n    long smalest_even_index_count_value5\
    \ = 0;\n    long smalest_even_index_count_index6 = 0;\n    long smalest_even_index_count_value6\
    \ = 0;\n    long smalest_even_index_count_index7 = 0;\n    long smalest_even_index_count_value7\
    \ = 0;\n    long smalest_even_index_count_index8 = 0;\n    long smalest_even_index_count_value8\
    \ = 0;\n    long smalest_even_index_count_index9 = 0;\n    long smalest_even_index_count_value9\
    \ = 0;\n    long smalest_even_index_count_index10 = 0;\n    long smalest_even_index_count_value10\
    \ = 0;\n    long smalest_even_index_count_index11 = 0;\n    long smalest_even_index_count_value11\
    \ = 0;\n    long smalest_even_index_count_index12 = 0;\n    long smalest_even_index_count_value12\
    \ = 0;\n    long smalest_even_index_count_index13 = 0;\n    long smalest_even_index_count_value13\
    \ = 0;\n    long smalest_even_index_count_index14 = 0;\n    long smalest_even_index_count_value14\
    \ = 0;\n    long smalest_even_index_count_index15 = 0;\n    long smalest_even_index_count_value15\
    \ = 0;\n    long smalest_even_index_count_index16 = 0;\n    long smalest_even_index_count_value16\
    \ = 0;\n    long smalest_even_index_count_index17 = 0;\n    long smalest_even_index_count_value17\
    \ = 0;\n    long smalest_even_index_count_index18 = 0;\n    long smalest_even_index_count_value18\
    \ = 0;\n    long smalest_even_index_count_index19 = 0;\n    long smalest_even_index_count_value19\
    \ = 0;\n    long smalest_even_index_count_index20 = 0;\n    long smalest_even",
  "    // code here\n    long smalest_value=0;\n    long smalest_index=0;\n    long\
    \ smallest_value=0;\n    long smallest_index=0;\n    long max_value=0;\n    long\
    \ max_index=0;\n    long temp=0;\n    long temp2=0;\n    long temp3=0;\n    long\
    \ temp4=0;\n    long temp5=0;\n    long temp6=0;\n    long temp7=0;\n    long\
    \ temp8=0;\n    long temp9=0;\n    long temp10=0;\n    long temp11=0;\n    long\
    \ temp12=0;\n    long temp13=0;\n    long temp14=0;\n    long temp15=0;\n    long\
    \ temp16=0;\n    long temp17=0;\n    long temp18=0;\n    long temp19=0;\n    long\
    \ temp20=0;\n    long temp21=0;\n    long temp22=0;\n    long temp23=0;\n    long\
    \ temp24=0;\n    long temp25=0;\n    long temp26=0;\n    long temp27=0;\n    long\
    \ temp28=0;\n    long temp29=0;\n    long temp30=0;\n    long temp31=0;\n    long\
    \ temp32=0;\n    long temp33=0;\n    long temp34=0;\n    long temp35=0;\n    long\
    \ temp36=0;\n    long temp37=0;\n    long temp38=0;\n    long temp39=0;\n    long\
    \ temp40=0;\n    long temp41=0;\n    long temp42=0;\n    long temp43=0;\n    long\
    \ temp44=0;\n    long temp45=0;\n    long temp46=0;\n    long temp47=0;\n    long\
    \ temp48=0;\n    long temp49=0;\n    long temp50=0;\n    long temp51=0;\n    long\
    \ temp52=0;\n    long temp53=0;\n    long temp54=0;\n    long temp55=0;\n    long\
    \ temp56=0;\n    long temp57=0;\n    long temp58=0;\n    long temp59=0;\n    long\
    \ temp60=0;\n    long temp61=0;\n    long temp62=0;\n    long temp63=0;\n    long\
    \ temp64=0;\n    long temp65=0;\n    long temp66=0;\n    long temp67=0;\n    long\
    \ temp68=0;\n    long temp69=0;\n    long temp70=0;\n    long temp71=0;\n    long\
    \ temp72=0;\n    long temp73=0;\n    long temp74=0;\n    long temp75=0;\n    long\
    \ temp76=0;\n    long temp77=0;\n    long ", "    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array = 0;\n    long\
    \ smalest_even_index_in_array_in_array_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    // code here\n    long smallest_value = arr[0];\n    long\
    \ smallest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_count\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            smallest_even_count++;\n            if (smallest_even_count\
    \ == smallest_even_value && smallest_even_count > 1) {\n                smallest_even_value\
    \ = smallest_even_count;\n                smallest_index = i;\n            }\n\
    \        }\n    }\n    std::vector<long> result;\n    if (smallest_even_count\
    \ == 1) {\n        result.push_back(smallest_even_value);\n        result.push_back(smallest_index);\n\
    \    } else {\n        result.push_back(smallest_even_value);\n    }\n    return\
    \ result;", "    long smalest_value = arr[0];\n    long smalest_index = 0;\n \
    \   for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // code here\n    long\
    \ smalest_value = 0;\n    int smallest_index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_value = 0;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n        if (arr[i] == smallest_value)\
    \ {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n  \
    \  result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    for (auto i : arr) {\n        if\
    \ (i % 2 == 0) {\n            if (smalest_value == 0) {\n                smalest_value\
    \ = i;\n                smalest_index = i;\n                smalest_index_value\
    \ = i;\n            } else if (smalest_index_value < i) {\n                smalest_value\
    \ = i;\n                smalest_index = i;\n                smalest_index_value\
    \ = i;\n            } else if (smalest_index_value == i) {\n                smalest_index_value\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smallest_index = 0;\n    long smallest_value = 0;\n    long index = 0;\n   \
    \ for (auto i : arr) {\n        if (i % 2 == 0) {\n            if (smallest_value\
    \ == 0) {\n                smallest_value = i;\n                smallest_index\
    \ = index;\n            } else if (smallest_value < i) {\n                smallest_value\
    \ = i;\n                smallest_index = index;\n            }\n            index++;\n\
    \        }\n    }\n    if (smallest_value == 0) {\n        return {};\n    }\n\
    \    std::vector<long> result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index2 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n      \
    \          smalest_value = arr[i];\n                smalest_index = i;\n     \
    \       } else if (smalest_value < arr[i]) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long index = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n  \
    \          if (smalest_value == 0) {\n                smalest_value = i;\n   \
    \             smalest_index = index;\n            } else if (smalest_value < i)\
    \ {\n                smalest_value = i;\n                smalest_index = index;\n\
    \            }\n            index++;\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    // code here\n    long\
    \ smalest_value=0;\n    long smalest_index=0;\n    long smalest_even_value=0;\n\
    \    long smalest_even_node=0;\n    long smalest_even_node_index=0;\n    long\
    \ smalest_even_node_even_value=0;\n    long smalest_even_node_index=0;\n    long\
    \ smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_node_even_value_index=0;\n    long smalest_even_node_index=0;\n\
    \    long smalest_even_", "    // code here\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n  \
    \      if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = arr[0];\n  \
    \  long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \        }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index\
    \ = 0;\n    long smallest_index = 0;\n    long index = 0;\n    long even_value\
    \ = 0;\n    long even_index = 0;\n    long even_smallest_index = 0;\n    long\
    \ even_smallest_value = 0;\n    long even_smallest_even_index = 0;\n    long even_smallest_even_value\
    \ = 0;\n    long even_smallest_index2 = 0;\n    long even_smallest_value2 = 0;\n\
    \    long even_smallest_even_index2 = 0;\n    long even_smallest_even_value2 =\
    \ 0;\n    long even_smallest_index3 = 0;\n    long even_smallest_value3 = 0;\n\
    \    long even_smallest_even_index3 = 0;\n    long even_smallest_even_value3 =\
    \ 0;\n    long even_smallest_index4 = 0;\n    long even_smallest_value4 = 0;\n\
    \    long even_smallest_even_index4 = 0;\n    long even_smallest_even_value4 =\
    \ 0;\n    long even_smallest_index5 = 0;\n    long even_smallest_value5 = 0;\n\
    \    long even_smallest_even_index5 = 0;\n    long even_smallest_even_value5 =\
    \ 0;\n    long even_smallest_index6 = 0;\n    long even_smallest_value6 = 0;\n\
    \    long even_smallest_even_index6 = 0;\n    long even_smallest_even_value6 =\
    \ 0;\n    long even_smallest_index7 = 0;\n    long even_smallest_value7 = 0;\n\
    \    long even_smallest_even_index7 = 0;\n    long even_smallest_even_value7 =\
    \ 0;\n    long even_smallest_index8 = 0;\n    long even_smallest_value8 = 0;\n\
    \    long even_smallest_even_index8 = 0;\n    long even_smallest_even_value8 =\
    \ 0;\n    long even_smallest_index9 = 0;\n    long even_smallest_value9 = 0;\n\
    \    long even_smallest_even_index9 = 0;\n    long even_smallest_even_value9 =\
    \ 0;\n    long even_smallest_index10 = 0;\n    long even_smallest_value10 = 0;\n\
    \    long even_smallest_even_index10 = 0;\n    long even_smallest_even_value10\
    \ = 0;\n    long even_smallest_index11 = 0;\n    long even_smallest_value11 =\
    \ 0;\n    long even_smallest_even_index11 = 0;\n    long even_smallest_even_value11\
    \ = 0;\n    long even_smallest_index12 = 0;\n", "    // code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smallest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        } else {\n            if (smallest_index == 0) {\n   \
    \             smallest_index = i;\n            } else if (smallest_index < i)\
    \ {\n                smallest_index = i;\n            }\n        }\n    }\n  \
    \  std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    if (smallest_index != 0)\
    \ {\n        result.push_back(arr[smallest_index]);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    // code here\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n \
    \       if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smallest_value % 2 == 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smallest_index = 0;\n    long smallest_value = 0;\n    long index = 0;\n   \
    \ long value = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n     \
    \       value = i;\n            index = i;\n        }\n    }\n    for (auto i\
    \ : arr) {\n        if (i % 2 == 0) {\n            if (value < smallest_value)\
    \ {\n                smallest_value = value;\n                smallest_index =\
    \ index;\n            }\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(smallest_value);\n\
    \    ans.push_back(smallest_index);\n    return ans;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_even_value = arr[i]\
    \ / 2;\n                smalest_even_index = i;\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_even_index = i;\n            }\n     \
    \   }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    if (smalest_even_index != smalest_index) {\n        res.push_back(smalest_even_index);\n\
    \    }\n    return res;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long even_value = 0;\n    for (auto i : arr) {\n        if (i % 2\
    \ == 0) {\n            even_value = i;\n        }\n        if (i == smalest_value)\
    \ {\n            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n   \
    \     result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n    \
    \    if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n    \
    \        smalest_index = i;\n        }\n    }\n    if (smalest_value == 0) {\n\
    \        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n \
    \       if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_value_pos = 0;\n    long smalest_even_index_pos\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] % 2;\n                smalest_even_index = i;\n                smalest_even_value_pos\
    \ = i;\n                smalest_even_index_pos = i;\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_even_value_pos = i;\n                smalest_even_index_pos\
    \ = i;\n            }\n        } else if (smalest_value == 0) {\n            smalest_even_value_pos\
    \ = i;\n            smalest_even_index_pos = i;\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    if (smalest_even_value_pos == smalest_even_index)\
    \ {\n        res.push_back(smalest_even_value);\n        res.push_back(smalest_even_index);\n\
    \    } else {\n        res.push_back(smalest_even_value);\n        res.push_back(smalest_even_index);\n\
    \        res.push_back(smalest_even_value_pos);\n        res.push_back(smalest_even_index_pos);\n\
    \    }\n    return res;", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;", "    // code here\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n \
    \       if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smallest_value % 2 == 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_index != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    int smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n        \
    \        smalest_value = arr[i];\n                smalest_index = i;\n       \
    \     } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    long\
    \ index = 0;\n    long value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            value = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (value == 0) {\n        return {};\n    }\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = index;\n            }\n        }\n\
    \    }\n    std::vector<long> ans;\n    ans.push_back(smallest_value);\n    ans.push_back(smallest_index);\n\
    \    return ans;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    long index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n     \
    \   if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n     \
    \       smalest_index = i;\n        }\n    }\n    if (smalest_value == 0) {\n\
    \        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // code here\n    long\
    \ smallest_value = 0;\n    long smallest_index = 0;\n    long index = 0;\n   \
    \ long value = 0;\n    long i = 0;\n    for (i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0) {\n            value = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (value == 0) {\n        return {};\n    }\n \
    \   for (i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n     \
    \       if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = index;\n            }\n        }\n    }\n  \
    \  return {smallest_value, smallest_index};", "    long smalest_value = arr[0];\n\
    \    long smalest_index = 0;\n    long smallest_even_value = arr[0];\n    long\
    \ smallest_even_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value) {\n\
    \                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n        if (arr[i] < smalest_value) {\n    \
    \        smalest_value = arr[i];\n            smalest_index = i;\n        }\n\
    \    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    // code here\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0 || smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \         }\n        }\n    }\n    std::vector<long> ans;\n    if (smalest_value\
    \ != 0) {\n        ans.push_back(smalest_value);\n        ans.push_back(smalest_index);\n\
    \    }\n    return ans;", "    // code here\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    long smallest_value = INT_MIN;\n    long smallest_index = 0;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    long\
    \ index = 0;\n    long value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            value = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (value == 0) {\n        return {};\n    }\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = index;\n            }\n        }\n\
    \    }\n    std::vector<long> res;\n    res.push_back(smallest_value);\n    res.push_back(smallest_index);\n\
    \    return res;", "    // Your code here\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] / 2;\n            } else if\
    \ (smalest_value == arr[i]) {\n                smalest_index = i;\n          \
    \      smalest_even_value = arr[i] / 2;\n            } else if (smalest_value\
    \ == arr[i] && smalest_even_value == arr[i] / 2) {\n                smalest_index\
    \ = i;\n                smalest_even_value = arr[i] / 2;\n            }\n    \
    \    }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smallest_index = INT_MAX;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < smallest_index) {\n            smallest_index =\
    \ arr[i];\n        }\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != INT_MAX) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_index_value %\
    \ 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index\
    \ + 1);\n    }\n    return result;", "    long smalest_value = arr[0];\n    long\
    \ smalest_index = 0;\n    long index = 0;\n    for (auto i : arr) {\n        if\
    \ (i % 2 == 0) {\n            if (smalest_value == i) {\n                smalest_index\
    \ = index;\n            }\n            smalest_value = i;\n            index =\
    \ i;\n        }\n    }\n    if (smalest_index == 0) {\n        return {};\n  \
    \  }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n  \
    \  result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smalest_value = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n            smalest_index_of_smalest_value\
    \ = i;\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index_of_smalest_value);\n    return result;", " \
    \   // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_of_",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long index =\
    \ 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n            if (smalest_value\
    \ < i) {\n                smalest_value = i;\n                smalest_index =\
    \ index;\n            }\n            index++;\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    return {smalest_value, smalest_index};",
  "    // Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long\
    \ smalest_even_index_temp = 0;\n    long smalest_even_index_temp2 = 0;\n    long\
    \ smalest_even_index_temp3 = 0;\n    long smalest_even_index_temp4 = 0;\n    long\
    \ smalest_even_index_temp5 = 0;\n    long smalest_even_index_temp6 = 0;\n    long\
    \ smalest_even_index_temp7 = 0;\n    long smalest_even_index_temp8 = 0;\n    long\
    \ smalest_even_index_temp9 = 0;\n    long smalest_even_index_temp10 = 0;\n   \
    \ long smalest_even_index_temp11 = 0;\n    long smalest_even_index_temp12 = 0;\n\
    \    long smalest_even_index_temp13 = 0;\n    long smalest_even_index_temp14 =\
    \ 0;\n    long smalest_even_index_temp15 = 0;\n    long smalest_even_index_temp16\
    \ = 0;\n    long smalest_even_index_temp17 = 0;\n    long smalest_even_index_temp18\
    \ = 0;\n    long smalest_even_index_temp19 = 0;\n    long smalest_even_index_temp20\
    \ = 0;\n    long smalest_even_index_temp21 = 0;\n    long smalest_even_index_temp22\
    \ = 0;\n    long smalest_even_index_temp23 = 0;\n    long smalest_even_index_temp24\
    \ = 0;\n    long smalest_even_index_temp25 = 0;\n    long smalest_even_index_temp26\
    \ = 0;\n    long smalest_even_index_temp27 = 0;\n    long smalest_even_index_temp28\
    \ = 0;\n    long smalest_even_index_temp29 = 0;\n    long smalest_even_index_temp30\
    \ = 0;\n    long smalest_even_index_temp31 = 0;\n    long smalest_even_index_temp32\
    \ = 0;\n    long smalest_even_index_temp33 = 0;\n    long smalest_even_index_temp34\
    \ = 0;\n    long smalest_even_index_temp35 = 0;\n    long smalest_even_index_temp36\
    \ = 0;\n    long smalest_even_index_temp37 = 0;\n    long smalest_even_index_temp38\
    \ = 0;\n    long smalest_even_index_temp39 = 0;\n    long smalest_even_index_temp40\
    \ = 0;\n    long smalest_even_index_temp41 = 0;\n    long smalest_even_index_temp42\
    \ = 0;\n    long smalest_even_index_temp43 = 0;\n    long smalest_", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    long\
    \ smallest_even_value = 0;\n    long index = 0;\n    long even_value = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n \
    \           even_value = arr[i];\n            index = i;\n        }\n        if\
    \ (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n        \
    \    smallest_index = index;\n            smallest_even_value = even_value;\n\
    \        }\n    }\n    std::vector<long> result;\n    if (smallest_value == 0)\
    \ {\n        return result;\n    }\n    result.push_back(smallest_value);\n  \
    \  result.push_back(smallest_index);\n    result.push_back(smallest_even_value);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long\
    \ smalest_even_index_index = 0;\n    long smalest_even_index_value = 0;\n    long\
    \ smalest_even_index_index2 = 0;\n    long smalest_even_index_index3 = 0;\n  \
    \  long smalest_even_index_index4 = 0;\n    long smalest_even_index_index5 = 0;\n\
    \    long smalest_even_index_index6 = 0;\n    long smalest_even_index_index7 =\
    \ 0;\n    long smalest_even_index_index8 = 0;\n    long smalest_even_index_index9\
    \ = 0;\n    long smalest_even_index_index10 = 0;\n    long smalest_even_index_index11\
    \ = 0;\n    long smalest_even_index_index12 = 0;\n    long smalest_even_index_index13\
    \ = 0;\n    long smalest_even_index_index14 = 0;\n    long smalest_even_index_index15\
    \ = 0;\n    long smalest_even_index_index16 = 0;\n    long smalest_even_index_index17\
    \ = 0;\n    long smalest_even_index_index18 = 0;\n    long smalest_even_index_index19\
    \ = 0;\n    long smalest_even_index_index20 = 0;\n    long smalest_even_index_index21\
    \ = 0;\n    long smalest_even_index_index22 = 0;\n    long smalest_even_index_index23\
    \ = 0;\n    long smalest_even_index_index24 = 0;\n    long smalest_even_index_index25\
    \ = 0;\n    long smalest_even_index_index26 = 0;\n    long smalest_even_index_index27\
    \ = 0;\n    long smalest_even_index_index28 = 0;\n    long smalest_even_index_index29\
    \ = 0;\n    long smalest_even_index_index30 = 0;\n    long smalest_even_index_index31\
    \ = 0;\n    long smalest_even_index_index32 = 0;\n    long smalest_even_index_index33\
    \ = 0;\n    long smalest_even_index_index34 = 0;\n    long smalest_even_index_index35\
    \ = 0;\n    long smalest_even_index_index36 = 0;\n    long smalest_even_index_index37\
    \ = 0;\n    long smalest_even_index_index38 = 0;\n    long smalest_even_index_index39\
    \ = 0;\n    long smalest_even_index_index40 = 0;\n    long smalest_even_index_index41\
    \ = 0;\n    long smalest_even_index_index42 = 0;\n    long smalest_even_index_index43\
    \ = 0;\n", "    // code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long index = 0;\n    long value = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    ", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n\
    \    long smalest_index_value_temp = 0;\n    long smalest_index_value_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp = 0;\n    long smalest_index_value_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp = 0;\n\
    \    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n \
    \   long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\
    \    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_index_value_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_",
  "    long smalest_value = arr[0];\n    long smallest_index = -1;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n     \
    \       smalest_value = arr[i];\n            smallest_index = i;\n        }\n\
    \    }\n    if (smallest_index == -1) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = arr[0];\n\
    \    int smalest_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \        }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n \
    \   long smallest_even_value = 0;\n    long smallest_even_index = 0;\n    long\
    \ index = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n          \
    \  if (smallest_even_value == 0) {\n                smallest_even_value = i;\n\
    \                smallest_even_index = index;\n            } else {\n        \
    \        if (i < smallest_even_value) {\n                    smallest_even_value\
    \ = i;\n                    smallest_even_index = index;\n                }\n\
    \            }\n        }\n        index++;\n    }\n    std::vector<long> result;\n\
    \    if (smallest_even_value == 0) {\n        return result;\n    }\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_even_index);\n    return result;", "    // code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long index = 0;\n    long value = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      value = arr[i];\n            index = i;\n        }\n    }\n    if (value\
    \ == 0) {\n        return {};\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < value) {\n     \
    \           smalest_value = value;\n                smalest_index = index;\n \
    \           }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value <\
    \ arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n            if (smalest_value < arr[i]) {\n           \
    \     smalest_value = arr[i];\n                smalest_index = i;\n          \
    \  }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_even_value\
    \ == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_even_value);\n        result.push_back(smalest_even_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_value_pos = 0;\n    long smalest_even_index_pos = 0;\n \
    \   long smalest_even_value_neg = 0;\n    long smalest_even_index_neg = 0;\n \
    \   long smalest_even_value_zero = 0;\n    long smalest_even_index_zero = 0;\n\
    \    long smalest_even_value_one = 0;\n    long smalest_even_index_one = 0;\n\
    \    long smalest_even_value_two = 0;\n    long smalest_even_index_two = 0;\n\
    \    long smalest_even_value_three = 0;\n    long smalest_even_index_three = 0;\n\
    \    long smalest_even_value_four = 0;\n    long smalest_even_index_four = 0;\n\
    \    long smalest_even_value_five = 0;\n    long smalest_even_index_five = 0;\n\
    \    long smalest_even_value_six = 0;\n    long smalest_even_index_six = 0;\n\
    \    long smalest_even_value_seven = 0;\n    long smalest_even_index_seven = 0;\n\
    \    long smalest_even_value_eight = 0;\n    long smalest_even_index_eight = 0;\n\
    \    long smalest_even_value_nine = 0;\n    long smalest_even_index_nine = 0;\n\
    \    long smalest_even_value_ten = 0;\n    long smalest_even_index_ten = 0;\n\
    \    long smalest_even_value_eleven = 0;\n    long smalest_even_index_eleven =\
    \ 0;\n    long smalest_even_value_twelve = 0;\n    long smalest_even_index_twelve\
    \ = 0;\n    long smalest_even_value_thirteen = 0;\n    long smalest_even_index_thirteen\
    \ = 0;\n    long smalest_even_value_fourteen = 0;\n    long smalest_even_index_fourteen\
    \ = 0;\n    long smalest_even_value_fifteen = 0;\n    long smalest_even_index_fifteen\
    \ = 0;\n    long smalest_even_value_sixteen = 0;\n    long smalest_even_index_sixteen\
    \ = 0;\n    long smalest_even_value_seventeen = 0;\n    long smalest_even_index_seventeen\
    \ = 0;\n    long smalest_even_value_eighteen = 0;\n    long smalest_even_index_eighteen\
    \ = 0;\n    long smalest_even_value_nineteen = 0;\n    long smalest_even_index_nineteen\
    \ = 0;\n    long sm", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_value_found = 0;\n    long smalest_even_index_found = 0;\n\
    \    long smalest_index_found = 0;\n    long smalest_index_found2 = 0;\n    long\
    \ smalest_index_found3 = 0;\n    long smalest_index_found4 = 0;\n    long smalest_index_found5\
    \ = 0;\n    long smalest_index_found6 = 0;\n    long smalest_index_found7 = 0;\n\
    \    long smalest_index_found8 = 0;\n    long smalest_index_found9 = 0;\n    long\
    \ smalest_index_found10 = 0;\n    long smalest_index_found11 = 0;\n    long smalest_index_found12\
    \ = 0;\n    long smalest_index_found13 = 0;\n    long smalest_index_found14 =\
    \ 0;\n    long smalest_index_found15 = 0;\n    long smalest_index_found16 = 0;\n\
    \    long smalest_index_found17 = 0;\n    long smalest_index_found18 = 0;\n  \
    \  long smalest_index_found19 = 0;\n    long smalest_index_found20 = 0;\n    long\
    \ smalest_index_found21 = 0;\n    long smalest_index_found22 = 0;\n    long smalest_index_found23\
    \ = 0;\n    long smalest_index_found24 = 0;\n    long smalest_index_found25 =\
    \ 0;\n    long smalest_index_found26 = 0;\n    long smalest_index_found27 = 0;\n\
    \    long smalest_index_found28 = 0;\n    long smalest_index_found29 = 0;\n  \
    \  long smalest_index_found30 = 0;\n    long smalest_index_found31 = 0;\n    long\
    \ smalest_index_found32 = 0;\n    long smalest_index_found33 = 0;\n    long smalest_index_found34\
    \ = 0;\n    long smalest_index_found35 = 0;\n    long smalest_index_found36 =\
    \ 0;\n    long smalest_index_found37 = 0;\n    long smalest_index_found38 = 0;\n\
    \    long smalest_index_found39 = 0;\n    long smalest_index_found40 = 0;\n  \
    \  long smalest_index_found41 = 0;\n    long smalest_index_found42 = 0;\n    long\
    \ smalest_index_found43 = 0;\n    long smalest_index_found44 = 0;\n    long smalest_index_found45\
    \ = 0;\n    long smalest_index_found46 = 0;\n    long ", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n \
    \   for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            smalest_even_value = arr[i];\n            smalest_index = i;\n  \
    \      }\n        else if (arr[i] < smalest_even_value) {\n            smalest_even_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n        else if (arr[i]\
    \ == smalest_even_value) {\n            smalest_index = i;\n        }\n    }\n\
    \    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    int smallest_index = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    long smalest_value=arr[0];\n    long\
    \ smalest_index=0;\n    long smallest_value=arr[0];\n    long smallest_index=0;\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<smallest_value){\n\
    \                smallest_value=arr[i];\n                smallest_index=i;\n \
    \           }\n        }\n        else{\n            if(arr[i]<smalest_value){\n\
    \                smalest_value=arr[i];\n                smalest_index=i;\n   \
    \         }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smallest_index = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    if (smallest_index ==\
    \ -1) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // code here\n    long smalest_value = arr[0];\n  \
    \  long smalest_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n    \
    \    if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n    \
    \        smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    long smalest_index_value3\
    \ = 0;\n    long smalest_index_value4 = 0;\n    long smalest_index_value5 = 0;\n\
    \    long smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n    long\
    \ smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n    long smalest_index_value10\
    \ = 0;\n    long smalest_index_value11 = 0;\n    long smalest_index_value12 =\
    \ 0;\n    long smalest_index_value13 = 0;\n    long smalest_index_value14 = 0;\n\
    \    long smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n  \
    \  long smalest_index_value17 = 0;\n    long smalest_index_value18 = 0;\n    long\
    \ smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n    long smalest_index_value21\
    \ = 0;\n    long smalest_index_value22 = 0;\n    long smalest_index_value23 =\
    \ 0;\n    long smalest_index_value24 = 0;\n    long smalest_index_value25 = 0;\n\
    \    long smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n  \
    \  long smalest_index_value28 = 0;\n    long smalest_index_value29 = 0;\n    long\
    \ smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n    long smalest_index_value32\
    \ = 0;\n    long smalest_index_value33 = 0;\n    long smalest_index_value34 =\
    \ 0;\n    long smalest_index_value35 = 0;\n    long smalest_index_value36 = 0;\n\
    \    long smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n  \
    \  long smalest_index_value39 = 0;\n    long smalest_index_value40 = 0;\n    long\
    \ smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n    long smalest_index_value43\
    \ = 0;\n    long smalest_index_value44 = 0;\n    long smalest_index_value45 =\
    \ 0;\n    long smalest_index_value46 = 0;\n    long smalest_index_value47 = 0;\n\
    \    long smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n  \
    \  long smalest_index_value", "    long smalest_value = arr[0];\n    int smallest_index\
    \ = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smallest_index = i;\n  \
    \      }\n    }\n    if (smallest_index == -1) {\n        return {};\n    }\n\
    \    std::vector<long> ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smallest_index);\n\
    \    return ans;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    long smallest_even_value = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smallest_even_value == 0) {\n   \
    \     return result;\n    }\n    result.push_back(smallest_even_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smallest_index\
    \ = -1;\n    long smallest_even_value = arr[0];\n    long smallest_even_index\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smallest_even_value) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \     if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_even_index != -1) {\n        result.push_back(smallest_even_value);\n\
    \        result.push_back(smallest_even_index);\n    } else {\n        result.push_back(smallest_value);\n\
    \        result.push_back(-1);\n    }\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_of_smalest_value =\
    \ 0;\n    long smalest_index_of_smalest_value2 = 0;\n    long smalest_index_of_smalest_value3\
    \ = 0;\n    long smalest_index_of_smalest_value4 = 0;\n    long smalest_index_of_smalest_value5\
    \ = 0;\n    long smalest_index_of_smalest_value6 = 0;\n    long smalest_index_of_smalest_value7\
    \ = 0;\n    long smalest_index_of_smalest_value8 = 0;\n    long smalest_index_of_smalest_value9\
    \ = 0;\n    long smalest_index_of_smalest_value10 = 0;\n    long smalest_index_of_smalest_value11\
    \ = 0;\n    long smalest_index_of_smalest_value12 = 0;\n    long smalest_index_of_smalest_value13\
    \ = 0;\n    long smalest_index_of_smalest_value14 = 0;\n    long smalest_index_of_smalest_value15\
    \ = 0;\n    long smalest_index_of_smalest_value16 = 0;\n    long smalest_index_of_smalest_value17\
    \ = 0;\n    long smalest_index_of_smalest_value18 = 0;\n    long smalest_index_of_smalest_value19\
    \ = 0;\n    long smalest_index_of_smalest_value20 = 0;\n    long smalest_index_of_smalest_value21\
    \ = 0;\n    long smalest_index_of_smalest_value22 = 0;\n    long smalest_index_of_smalest_value23\
    \ = 0;\n    long smalest_index_of_smalest_value24 = 0;\n    long smalest_index_of_smalest_value25\
    \ = 0;\n    long smalest_index_of_smalest_value26 = 0;\n    long smalest_index_of_smalest_value27\
    \ = 0;\n    long smalest_index_of_smalest_value28 = 0;\n    long smalest_index_of_smalest_value29\
    \ = 0;\n    long smalest_index_of_smalest_value30 = 0;\n    long smalest_index_of_smalest_value31\
    \ = 0;\n    long smalest_index_of_smalest_value32 = 0;\n    long smalest_index_of_smalest_value33\
    \ = 0;\n    long smalest_index_of_smalest_value34 = 0;\n    long smalest_index_of_smalest_value35\
    \ = 0;\n    long smalest_index_of_smalest_value", "    // code here\n    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;", "    // code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n       \
    \         smallest_value = arr[i];\n                smallest_index = i;\n    \
    \        } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_value != 0) {\n       \
    \ result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    // Your code here\n    long smalest_value =\
    \ arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smallest_index = 0;\n    long smallest_value\
    \ = 0;\n    long index = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0)\
    \ {\n            if (smallest_value == 0) {\n                smallest_value =\
    \ i;\n                smallest_index = index;\n            } else if (smallest_value\
    \ < i) {\n                smallest_value = i;\n                smallest_index\
    \ = index;\n            }\n            index++;\n        }\n    }\n    if (smallest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            } else {\n                if (arr[i] < smalest_value) {\n  \
    \                  smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_temp\
    \ = 0;\n    long smalest_even_index_temp_temp = 0;\n    long smalest_even_index_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ smalest_even_index_temp_temp_temp_temp_temp_temp_temp = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long sm", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_count = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            smalest_even_value = arr[i];\n            smalest_even_count++;\n\
    \            if (smalest_even_count == 1) {\n                smalest_even_index\
    \ = i;\n            }\n        }\n        if (arr[i] < smalest_value) {\n    \
    \        smalest_value = arr[i];\n            smalest_index = i;\n        }\n\
    \    }\n    if (smalest_even_count == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    if (smalest_even_count == 1) {\n        result.push_back(smalest_even_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smallest_even_value\
    \ != 0) {\n        result.push_back(smallest_even_value);\n        result.push_back(smallest_even_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index2 = 0;\n    long smalest_even_index_count_min_index3\
    \ = 0;\n    long smalest_even_index_count_min_index4 = 0;\n    long smalest_even_index_count_min_index5\
    \ = 0;\n    long smalest_even_index_count_min_index6 = 0;\n    long smalest_even_index_count_min_index7\
    \ = 0;\n    long smalest_even_index_count_min_index8 = 0;\n    long smalest_even_index_count_min_index9\
    \ = 0;\n    long smalest_even_index_count_min_index10 = 0;\n    long smalest_even_index_count_min_index11\
    \ = 0;\n    long smalest_even_index_count_min_index12 = 0;\n    long smalest_even_index_count_min_index13\
    \ = 0;\n    long smalest_even_index_count_min_index14 = 0;\n    long smalest_even_index_count_min_index15\
    \ = 0;\n    long smalest_even_index_count_min_index16 = 0;\n    long smalest_even_index_count_min_index17\
    \ = 0;\n    long smalest_even_index_count_min_index18 = 0;\n    long smalest_even_index_count_min_index19\
    \ = 0;\n    long smalest_even_index_count_min_index20 = 0;\n    long smalest_even_index_count_min_index21\
    \ = 0;\n    long smalest_even_index_count_min_index22 = 0;\n    long smalest_even_index_count_min_index23\
    \ = 0;\n    long smalest_even_index_count_min_index24 = 0;\n    long smalest_even_index_count_min_index25\
    \ = 0;\n    long smalest_even_index_count_min_index26 = 0;\n    long smalest_even_index_count_min_index27\
    \ = 0;\n    long smalest_even_index_count_min_index28 = 0;\n    long smalest_even_index_count_min_index29\
    \ = 0;\n    long smalest_even_index_count_min_index30 = 0;\n    long smalest_even_index_count_min_index31\
    \ = 0;\n    long smalest_even_index_count_min_index32 = 0;\n    long smalest_even_index_count_min_index33\
    \ = 0;\n    long smalest_even_index_count_min_index34 = 0;\n    long smalest_even"]
stop_tokens:
- "\n}"
