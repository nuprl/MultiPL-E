name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  std::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string encoded = message;\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        char c = encoded[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            encoded[i] = c + 2;\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            encoded[i] = c + 2;\n        } else if (c >= '0' && c <= '9') {\n\
    \            encoded[i] = c + 1;\n        }\n    }\n    return encoded;", "  \
    \  std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        ans += c;\n    }\n    for(int i = 0; i\
    \ < ans.length(); i++) {\n        char c = ans[i];\n        ans[i] = c;\n    }\n\
    \    for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n     \
    \   ans[i] = c;\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        ans[i] = c;\n    }\n    return ans;", "    std::string\
    \ encodedMessage;\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encodedMessage += message[i];\n\
    \        }\n        else if(message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encodedMessage += message[i];\n        }\n        else if(message[i] >=\
    \ '0' && message[i] <= '9') {\n            encodedMessage += message[i];\n   \
    \     }\n        else if(message[i] == '.' || message[i] == '!' || message[i]\
    \ == '?') {\n            encodedMessage += message[i];\n        }\n        else\
    \ if(message[i] == '-') {\n            encodedMessage += message[i];\n       \
    \ }\n        else if(message[i] == '_') {\n            encodedMessage += message[i];\n\
    \        }\n        else if(message[i] == '/') {\n            encodedMessage +=\
    \ message[i];\n        }\n        else if(message[i] == '\\\\') {\n          \
    \  encodedMessage += message[i];\n        }\n        else if(message[i] == '@')\
    \ {\n            encodedMessage += message[i];\n        }\n        else if(message[i]\
    \ == '#') {\n            encodedMessage += message[i];\n        }\n        else\
    \ if(message[i] == '$') {\n            encodedMessage += message[i];\n       \
    \ }\n        else if(message[i] == '%') {\n            encodedMessage += message[i];\n\
    \        }\n        else if(message[i] == '^') {\n            encodedMessage +=\
    \ message[i];\n        }\n        else if(message[i] == '&') {\n            encodedMessage\
    \ += message[i];\n        }\n        else if(message[i] == '*') {\n          \
    \  encodedMessage += message[i];\n        }\n        else if(message[i] == '(')\
    \ {\n            encodedMessage += message[i];\n        }\n        else if(message[i]\
    \ == ')') {\n            encodedMessage += message[i];\n        }\n        else\
    \ if(message[i] == '[') {\n            encodedMessage += message[i];\n       \
    \ }\n        else if(message[i] == ']') {\n            encodedMessage += message[i];\n\
    \        }\n        else if(message[i] == '{') {\n            encodedMessage +=\
    \ message[i];\n        }\n        else if(message[i] == '}') {\n            encodedMessage\
    \ += message[i];\n        }\n        else if(message[i] == '|') {\n          \
    \  encodedMessage += message[i];\n        }\n        else if(message[i] == '~')\
    \ {\n            encodedMessage += message[i];\n        }\n        else if(message[i]\
    \ == '>') {\n            encodedMessage += message[i];\n        }\n        else\
    \ if(message[i] == '<') {\n            encodedMessage += message[i];\n       \
    \ }\n        else if(message[i] == '?') {\n            encodedMessage += message[i];\n\
    \        }\n        else if(message[i] == '!') {\n            encodedMessage +=\
    \ message[i];\n        }\n        else if(message[i] == '=') {\n            encodedMessage ",
  "    std::string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encoded += c;\n        }\n        else\
    \ {\n            char nextLetter = message[i+1];\n            char nextVowel =\
    \ message[i+2];\n            char nextVowel2 = message[i+3];\n            if(c\
    \ == 'a') {\n                if((nextLetter == 'a') && (nextVowel == 'a') && (nextVowel2\
    \ == 'a')) {\n                    encoded += 'A';\n                }\n       \
    \         else if((nextLetter == 'a') && (nextVowel == 'e') && (nextVowel2 ==\
    \ 'a')) {\n                    encoded += 'E';\n                }\n          \
    \      else if((nextLetter == 'a') && (nextVowel == 'i') && (nextVowel2 == 'a'))\
    \ {\n                    encoded += 'I';\n                }\n                else\
    \ if((nextLetter == 'a') && (nextVowel == 'o') && (nextVowel2 == 'a')) {\n   \
    \                 encoded += 'O';\n                }\n                else if((nextLetter\
    \ == 'a') && (nextVowel == 'u') && (nextVowel2 == 'a')) {\n                  \
    \  encoded += 'U';\n                }\n                else if((nextLetter ==\
    \ 'e') && (nextVowel == 'a') && (nextVowel2 == 'a')) {\n                    encoded\
    \ += 'A';\n                }\n                else if((nextLetter == 'e') && (nextVowel\
    \ == 'e') && (nextVowel2 == 'a')) {\n                    encoded += 'E';\n   \
    \             }\n                else if((nextLetter == 'e') && (nextVowel ==\
    \ 'i') && (nextVowel2 == 'a')) {\n                    encoded += 'I';\n      \
    \          }\n                else if((nextLetter == 'e') && (nextVowel == 'o')\
    \ && (nextVowel2 == 'a')) {\n                    encoded += 'O';\n           \
    \     }\n                else if((nextLetter == 'e') && (nextVowel == 'u') &&\
    \ (nextVowel2 == 'a')) {\n                    encoded += 'U';\n              \
    \  }\n                else if((nextLetter == 'i') && (nextVowel == 'a') && (nextVowel2\
    \ == 'a')) {\n                    encoded += 'A';\n                }\n       \
    \         else if((nextLetter == 'i') && (nextVowel == 'e') && (nextVowel2 ==\
    \ 'a')) {\n                    encoded += 'E';\n                }\n          \
    \      else if((nextLetter == 'i') && (nextVowel == 'i') ", "    std::string encodedMessage\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            encodedMessage\
    \ += c;\n        } else if (c >= 'A' && c <= 'Z') {\n            encodedMessage\
    \ += c;\n        } else if (c >= '0' && c <= '9') {\n            encodedMessage\
    \ += c;\n        } else if (c == '.') {\n            encodedMessage += c;\n  \
    \      } else if (c == '!') {\n            encodedMessage += c;\n        } else\
    \ if (c == '?') {\n            encodedMessage += c;\n        } else if (c == '-')\
    \ {\n            encodedMessage += c;\n        } else if (c == '_') {\n      \
    \      encodedMessage += c;\n        } else if (c == '/') {\n            encodedMessage\
    \ += c;\n        } else if (c == '\\\\') {\n            encodedMessage += c;\n\
    \        } else if (c == '(') {\n            encodedMessage += c;\n        } else\
    \ if (c == ')') {\n            encodedMessage += c;\n        } else if (c == '*')\
    \ {\n            encodedMessage += c;\n        } else if (c == '+') {\n      \
    \      encodedMessage += c;\n        } else if (c == '=') {\n            encodedMessage\
    \ += c;\n        } else if (c == '[') {\n            encodedMessage += c;\n  \
    \      } else if (c == ']') {\n            encodedMessage += c;\n        } else\
    \ if (c == '{') {\n            encodedMessage += c;\n        } else if (c == '}')\
    \ {\n            encodedMessage += c;\n        } else if (c == '%') {\n      \
    \      encodedMessage += c;\n        } else if (c == '~') {\n            encodedMessage\
    \ += c;\n        } else if (c == '^') {\n            encodedMessage += c;\n  \
    \      } else if (c == '&') {\n            encodedMessage += c;\n        } else\
    \ if (c == '|') {\n            encodedMessage += c;\n        } else if (c == '<')\
    \ {\n            encodedMessage += c;\n        } else if (c == '>') {\n      \
    \      encodedMessage += c;\n        } else if (c == '!') {\n            encodedMessage\
    \ += c;\n        } else if (c == '~') {\n            encodedMessage += c;\n  \
    \      } else if (c == '@') {\n            encodedMessage += c;\n        } else\
    \ if (c == '#') {\n            encodedMessage += c;\n        } else if (c == '$')\
    \ {\n            encodedMessage += c;\n        } else if (c == '%') {\n      \
    \      encodedMessage += c;\n        } else if (c == '^') {\n            encodedMessage\
    \ += c;\n        } else if (c == '&') {\n            encodedMessage += c;\n  \
    \      } else if (c == '*') {\n            encodedMessage += c;\n        } else\
    \ if (c == '(') {\n            encodedMessage += c;\n        } else if (c == ')')\
    \ {\n            encodedMessage += c;\n        } else if (c == '+') {\n      \
    \      encodedMessage += c;\n        } else if (c == '=') {\n            encodedMessage\
    \ += c;\n        } else if (c == '[') {\n            encodedMessage += ", "  \
    \  std::string encoded = message;\n    for(int i = 0; i < encoded.length(); i++)\
    \ {\n        if(isalpha(encoded[i])) {\n            char c = encoded[i];\n   \
    \         int index = c - 'a';\n            char newC = encoded[index];\n    \
    \        encoded[index] = c;\n            encoded[i] = newC;\n        }\n    }\n\
    \    return encoded;", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        ans += (c >= 'a' && c <= 'z') ? c : ((c >= 'A' && c <= 'Z') ? c :\
    \ ((c >= '0' && c <= '9') ? c + 2 : c));\n    }\n    return ans;", "    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       if (message[i] >= 'a' && message[i] <= 'z') {\n            encodedMessage\
    \ += message[i];\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encodedMessage += message[i];\n        }\n        else\
    \ if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i]\
    \ == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encodedMessage\
    \ += message[i];\n        }\n        else {\n            encodedMessage += message[i];\n\
    \        }\n    }\n    return encodedMessage;", "    std::string encoded = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            c += ('a' - 'A');\n        }\n\
    \        encoded.append(1, c);\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(isalpha(c)) {\n            ans += tolower(c);\n  \
    \      }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c =\
    \ ans[i];\n        if(isalpha(c)) {\n            ans[i] = tolower(ans[i]+2);\n\
    \        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c\
    \ = ans[i];\n        if(isalpha(c)) {\n            ans[i] = tolower(ans[i]-1);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            ans += message[i];\n        }\n        else if(message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            ans += message[i];\n        }\n\
    \        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n           \
    \ ans += message[i];\n        }\n        else {\n            ans += 'a';\n   \
    \     }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ ('A' <= c && c <= 'Z') {\n            encoded += c;\n        }\n        else\
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  char nextLetter = message[i+1];\n            if (nextLetter == 'a' || nextLetter\
    \ == 'e' || nextLetter == 'i' || nextLetter == 'o' || nextLetter == 'u') {\n \
    \               encoded += nextLetter;\n            }\n            else {\n  \
    \              encoded += c;\n            }\n        }\n        else {\n     \
    \       encoded += c;\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans += (char)(c + ('a' - 'a' + 1));\n        } else if (c >=\
    \ 'A' && c <= 'Z') {\n            ans += (char)(c + ('A' - 'A' + 1));\n      \
    \  } else {\n            ans += c;\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            ans[ans.size() - 1] = (char)(c\
    \ - ('a' - 'a' + 1));\n        } else if (c >= 'A' && c <= 'Z') {\n          \
    \  ans[ans.size() - 1] = (char)(c - ('A' - 'A' + 1));\n        }\n    }\n    return\
    \ ans;", "    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encoded += c + 2;\n        }\n    }\n\
    \    return encoded;", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \ ans += c;\n        }\n        else {\n            ans += 'a' + c - 'a';\n  \
    \      }\n    }\n    return ans;", "    std::string encodedMessage = \"\";\n \
    \   for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        encodedMessage += c;\n        }\n        else {\n            int index\
    \ = c - 'a';\n            int index2 = c - 'a';\n            int index3 = c -\
    \ 'a';\n            int index4 = c - 'a';\n            int index5 = c - 'a';\n\
    \            int index6 = c - 'a';\n            int index7 = c - 'a';\n      \
    \      int index8 = c - 'a';\n            int index9 = c - 'a';\n            int\
    \ index10 = c - 'a';\n            int index11 = c - 'a';\n            int index12\
    \ = c - 'a';\n            int index13 = c - 'a';\n            int index14 = c\
    \ - 'a';\n            int index15 = c - 'a';\n            int index16 = c - 'a';\n\
    \            int index17 = c - 'a';\n            int index18 = c - 'a';\n    \
    \        int index19 = c - 'a';\n            int index20 = c - 'a';\n        \
    \    int index21 = c - 'a';\n            int index22 = c - 'a';\n            int\
    \ index23 = c - 'a';\n            int index24 = c - 'a';\n            int index25\
    \ = c - 'a';\n            int index26 = c - 'a';\n            int index27 = c\
    \ - 'a';\n            int index28 = c - 'a';\n            int index29 = c - 'a';\n\
    \            int index30 = c - 'a';\n            int index31 = c - 'a';\n    \
    \        int index32 = c - 'a';\n            int index33 = c - 'a';\n        \
    \    int index34 = c - 'a';\n            int index35 = c - 'a';\n            int\
    \ index36 = c - 'a';\n            int index37 = c - 'a';\n            int index38\
    \ = c - 'a';\n            int index39 = c - 'a';\n            int index40 = c\
    \ - 'a';\n            int index41 = c - 'a';\n            int index42 = c - 'a';\n\
    \            int index43 = c - 'a';\n            int index44 = c - 'a';\n    \
    \        int index45 = c - 'a';\n            int index46 = c - 'a';\n        \
    \    int index47 = c - 'a';\n            int index", "    std::string encoded\
    \ = message;\n    for (auto &c: encoded) {\n        c = tolower(c);\n    }\n \
    \   for (auto &c: encoded) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            c = toupper(c);\n        }\n    }\n   \
    \ for (auto &c: encoded) {\n        if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            c = tolower(c);\n        }\n    }\n    for\
    \ (auto &c: encoded) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            c = toupper(c);\n        }\n    }\n    for (auto\
    \ &c: encoded) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c:\
    \ encoded) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            c = toupper(c);\n        }\n    }\n    for (auto &c: encoded)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            c = tolower(c);\n        }\n    }\n    for (auto &c: encoded) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         c = toupper(c);\n        }\n    }\n    for (auto &c: encoded) {\n  \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       c = tolower(c);\n        }\n    }\n    for (auto &c: encoded) {\n    \
    \    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \     c = toupper(c);\n        }\n    }\n    for (auto &c: encoded) {\n      \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   c = tolower(c);\n        }\n    }\n    for (auto &c: encoded) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            c\
    \ = toupper(c);\n        }\n    }\n    for (auto &c: encoded) {\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c: encoded) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            c = toupper(c);\n  \
    \      }", "    std::string encoded = message;\n    for(int i = 0; i < encoded.size();\
    \ i++) {\n        if(isalpha(encoded[i])) {\n            int index = tolower(encoded[i])\
    \ - 'a';\n            int index2 = tolower(encoded[i]) - 'a';\n            assert(index\
    \ >= 0 && index2 >= 0);\n            assert(index < 26 && index2 < 26);\n    \
    \        encoded = encoded.replace(i, 1, tolower(encoded[index]));\n         \
    \   encoded = encoded.replace(i, 2, tolower(encoded[index2]));\n        }\n  \
    \  }\n    return encoded;", "    std::string encodedMessage;\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        char c = message[i];\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage\
    \ += c;\n        } else {\n            int index = c - 'a';\n            encodedMessage\
    \ += ((message[i - 1] == 'a') ? 'b' : 'a') + index;\n        }\n    }\n    return\
    \ encodedMessage;", "    std::string encoded = \"\";\n    for (auto &c: message)\
    \ {\n        switch (c) {\n            case 'a':\n            case 'e':\n    \
    \        case 'i':\n            case 'o':\n            case 'u':\n           \
    \     encoded += 'A';\n                break;\n            case 'b':\n       \
    \     case 'f':\n            case 'n':\n            case 'r':\n            case\
    \ 't':\n                encoded += 'B';\n                break;\n            case\
    \ 'c':\n            case 'd':\n            case 'm':\n            case 'p':\n\
    \            case 's':\n                encoded += 'C';\n                break;\n\
    \            case 'e':\n            case 'f':\n            case 'g':\n       \
    \     case 'h':\n            case 'j':\n                encoded += 'D';\n    \
    \            break;\n            case 'f':\n            case 'g':\n          \
    \  case 'h':\n            case 'j':\n            case 'k':\n                encoded\
    \ += 'E';\n                break;\n            case 'g':\n            case 'h':\n\
    \            case 'j':\n            case 'k':\n            case 'l':\n       \
    \         encoded += 'F';\n                break;\n            case 'h':\n   \
    \         case 'j':\n            case 'k':\n            case 'l':\n          \
    \  case 'm':\n                encoded += 'G';\n                break;\n      \
    \      case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n                encoded\
    \ += 'H';\n                break;\n            case 'i':\n            case 'j':\n\
    \            case 'k':\n            case 'l':\n            case 'm':\n       \
    \     case 'n':\n            case 'o':\n                encoded += 'I';\n    \
    \            break;\n            case 'j':\n            case 'k':\n          \
    \  case 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n                encoded += 'J';\n                break;\n\
    \            case 'k':\n            case 'l':\n            case 'm':\n       \
    \     case 'n':\n            case 'o':\n            case 'p':\n            case\
    \ 'q':\n                encoded += 'K';\n                break;\n            case\
    \ 'l':\n            case 'm':\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \         encoded += 'L';\n                break;\n            case 'm':\n   \
    \         case 'n':\n            case 'o':\n            case 'p':\n          \
    \  case 'q':\n            case 'r':\n            case 's':\n                encoded\
    \ += 'M';\n                break;\n            case 'n':\n            case 'o':\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n                encoded += 'N';\n    \
    \            break;\n            case 'o':\n            case 'p':\n          \
    \  case 'q':\n            case 'r':\n            case 's':\n            case 't':\n\
    \            case 'u':\n                encoded += 'O';\n                break;\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n            case '", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if ('a' <= c && c <= 'z') {\n            ans += c;\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans += 'a';\n        }\n        else if (c == 'B' ||\
    \ c == 'F' || c == 'J' || c == 'K' || c == 'M' || c == 'N' || c == 'P' || c ==\
    \ 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y'\
    \ || c == 'Z') {\n            ans += 'b';\n        }\n        else if (c == 'c'\
    \ || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c\
    \ == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p'\
    \ || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            ans += 'c';\n   \
    \     }\n        else if (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c ==\
    \ 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K'\
    \ || c == 'L' || c == 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c\
    \ == 'R' || c == 'S' || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X'\
    \ || c == 'Y' || c == 'Z') {\n            ans += 'd';\n        }\n        else\
    \ if (c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' ||\
    \ c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c ==\
    \ 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c\
    \ == 'z') {\n            ans += 'e';\n        }\n        else if (c == 'A' ||\
    \ c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'G' || c ==\
    \ 'H' || c == '", "    std::string encoded = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            encoded += c;\n        }\n     \
    \   else {\n            char nextLetter = message[(i + 2) % message.length()];\n\
    \            encoded += nextLetter;\n        }\n    }\n    return encoded;", " \
    \   std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'a';\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[i] = ans[i+1];\n        }\n    }\n\
    \    return ans;", "    std::string encoded = \"\";\n    for (auto c : message)\
    \ {\n        if ('A' <= c && c <= 'Z') {\n            encoded += c;\n        }\n\
    \        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            encoded += c + 2;\n        }\n        else {\n            encoded\
    \ += c;\n        }\n    }\n    return encoded;", "    std::string encoded = \"\
    \";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        encoded += c;\n        } else {\n            char a = c;\n          \
    \  char b = message[i+1];\n            if(b == 'a' || b == 'e' || b == 'i' ||\
    \ b == 'o' || b == 'u') {\n                encoded += b;\n            } else {\n\
    \                encoded += a;\n            }\n        }\n    }\n    return encoded;",
  "    std::string ans = \"\";\n    for (char c : message) {\n        if (c >= 'a'\
    \ && c <= 'z') {\n            ans += c;\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            ans += c;\n        } else if (c >= '0' && c <= '9') {\n     \
    \       ans += c;\n        } else if (c == '.' || c == '!' || c == '?' || c ==\
    \ '-' || c == '_' || c == '/' || c == '\\\\' || c == '^' || c == '&' || c == '*'\
    \ || c == '(' || c == ')' || c == '[' || c == ']' || c == '{'|| c == '}' || c\
    \ == '|' || c == '~') {\n            ans += c;\n        } else {\n           \
    \ ans += 'a' + c - 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        ans += c;\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans += 'A';\n        }\n        if(c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans +=\
    \ 'a';\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n   \
    \ for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if ('a' <= c && c <= 'z') {\n            ans += c;\n        } else if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans\
    \ += 'a';\n        } else {\n            ans += 'A';\n        }\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'a';\n\
    \        } else {\n            ans[i] = 'A';\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        }\n        else {\n            ans\
    \ += 'A' + (c - 'a');\n        }\n    }\n    return ans;", "    std::string ans;\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char ch = message[i];\n\
    \        ans += (ch >= 'a' && ch <= 'z') ? ch - 'a' + 'A' : ch;\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (auto &c : message) {\n       \
    \ ans += (c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c;\n    }\n    for (auto &c\
    \ : ans) {\n        ans += (c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c;\n   \
    \ }\n    return ans;", "    std::string encoded = message;\n    for(int i = 0;\
    \ i < encoded.size(); i++) {\n        if(isalpha(encoded[i])) {\n            char\
    \ c = encoded[i];\n            int index = c - 'a';\n            char newChar\
    \ = encoded[index];\n            encoded[i] = newChar;\n        }\n    }\n   \
    \ for(int i = 0; i < encoded.size(); i++) {\n        if(isalpha(encoded[i])) {\n\
    \            char c = encoded[i];\n            int index = c - 'a';\n        \
    \    char newChar = encoded[index];\n            encoded[i] = newChar;\n     \
    \   }\n    }\n    return encoded;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        ans\
    \ += c;\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c =\
    \ ans[i];\n        ans[i] = tolower(c);\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if(isalpha(c)) {\n            ans[i]\
    \ = toupper(c);\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n\
    \        char c = ans[i];\n        if(isalpha(c)) {\n            ans[i] = tolower(c);\n\
    \        }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded\
    \ += c;\n        } else {\n            char nextVowel = message[(i + 2) % message.length()];\n\
    \            char nextLetter = message[(i + 1) % message.length()];\n        \
    \    char nextLetter2 = message[(i + 3) % message.length()];\n            char\
    \ nextLetter3 = message[(i + 4) % message.length()];\n            char nextLetter4\
    \ = message[(i + 5) % message.length()];\n            char nextLetter5 = message[(i\
    \ + 6) % message.length()];\n            char nextLetter6 = message[(i + 7) %\
    \ message.length()];\n            char nextLetter7 = message[(i + 8) % message.length()];\n\
    \            char nextLetter8 = message[(i + 9) % message.length()];\n       \
    \     char nextLetter9 = message[(i + 10) % message.length()];\n            char\
    \ nextLetter10 = message[(i + 11) % message.length()];\n            char nextLetter11\
    \ = message[(i + 12) % message.length()];\n            char nextLetter12 = message[(i\
    \ + 13) % message.length()];\n            char nextLetter13 = message[(i + 14)\
    \ % message.length()];\n            char nextLetter14 = message[(i + 15) % message.length()];\n\
    \            char nextLetter15 = message[(i + 16) % message.length()];\n     \
    \       char nextLetter16 = message[(i + 17) % message.length()];\n          \
    \  char nextLetter17 = message[(i + 18) % message.length()];\n            char\
    \ nextLetter18 = message[(i + 19) % message.length()];\n            char nextLetter19\
    \ = message[(i + 20) % message.length()];\n            char nextLetter20 = message[(i\
    \ + 21) % message.length()];\n            char nextLetter21 = message[(i + 22)\
    \ % message.length()];\n            char nextLetter22 = message[(i + 23) % message.length()];\n\
    \            char nextLetter23 = message[(i + 24) % message.length()];\n     \
    \       char nextLetter24 = message[(i + 25) % message.length()];\n          \
    \  char nextLetter25 = message[(i + 26) % message.length()];\n            char\
    \ nextLetter26 = message[(i + 27) % message.length()];\n            char nextLetter27\
    \ = message[(i + 28) % message.length()];\n            char nextLetter28 = message[(i\
    \ + 29) % message.length()];\n            char nextLetter29 = message[(i + 30",
  "    std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'a';\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[i] = ans[i + 1];\n        }\n  \
    \  }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if ('A' <= c && c <= 'Z') {\n            encoded +=\
    \ c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            encoded += c + 2;\n        }\n        else {\n \
    \           encoded += c;\n        }\n    }\n    return encoded;", "    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       if (message[i] >= 'a' && message[i] <= 'z') {\n            encodedMessage\
    \ += message[i];\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encodedMessage += message[i];\n        }\n        else\
    \ if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i]\
    \ == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encodedMessage\
    \ += message[i];\n        }\n        else if (message[i] == 'b' || message[i]\
    \ == 'c' || message[i] == 'd' || message[i] == 'f' || message[i] == 'g' || message[i]\
    \ == 'h' || message[i] == 'j' || message[i] == 'k' || message[i] == 'l' || message[i]\
    \ == 'm' || message[i] == 'n' || message[i] == 'p' || message[i] == 'q' || message[i]\
    \ == 'r' || message[i] == 's' || message[i] == 't' || message[i] == 'v' || message[i]\
    \ == 'w' || message[i] == 'x' || message[i] == 'y' || message[i] == 'z') {\n \
    \           encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;",
  "    std::string ans;\n    for(int i=0;i<message.length();i++){\n        char c\
    \ = message[i];\n        if(c>='A' && c<='Z'){\n            ans += (char)(c +\
    \ ('a' - 'A'));\n        }\n        else if(c>='a' && c<='z'){\n            ans\
    \ += (char)(c + ('A' - 'a'));\n        }\n        else if(c>='A' && c<='Z' ||\
    \ c>='a' && c<='z'){\n            ans += c;\n        }\n    }\n    return ans;",
  "    std::string encoded = \"\";\n    for (int i = 0; i < message.length(); i++)\
    \ {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ >= '0' && message[i] <= '9') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] == '.' || message[i] == '!' || message[i] ==\
    \ '?') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '_') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '-') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '+') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '/') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '(') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == ')') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '[') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == ']') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '{') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '}') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '%') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '&') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '*') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '|') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '~') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '^') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '~') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '>') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '<') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '=') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '%') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '$') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '@') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '!') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '?') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '.') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '\"') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '\\", "    std::string encodedMessage = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char encodedChar = c;\n      \
    \  if ('a' <= c && c <= 'z') {\n            encodedChar = c + 2;\n        }\n\
    \        if ('A' <= c && c <= 'Z') {\n            encodedChar = c + 2;\n     \
    \   }\n        if ('0' <= c && c <= '9') {\n            encodedChar = c + 1;\n\
    \        }\n        encodedMessage += encodedChar;\n    }\n    return encodedMessage;",
  "    std::string encoded = message;\n    for (auto &c : message) {\n        switch\
    \ (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'A':\n       \
    \     case 'E':\n            case 'I':\n            case 'O':\n            case\
    \ 'U':\n                c = tolower(c);\n                break;\n            case\
    \ 'b':\n            case 'c':\n            case 'd':\n            case 'f':\n\
    \            case 'g':\n            case 'B':\n            case 'C':\n       \
    \     case 'D':\n            case 'F':\n            case 'G':\n              \
    \  c = toupper(c);\n                break;\n            case 'y':\n          \
    \  case 'z':\n                c = tolower(c);\n                break;\n      \
    \      default:\n                c = toupper(c);\n                break;\n   \
    \     }\n    }\n    for (auto &c : message) {\n        switch (c) {\n        \
    \    case 'a':\n            case 'e':\n            case 'i':\n            case\
    \ 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n\
    \            case 'I':\n            case 'O':\n            case 'U':\n       \
    \         c = toupper(c);\n                break;\n            case 'b':\n   \
    \         case 'c':\n            case 'd':\n            case 'f':\n          \
    \  case 'g':\n            case 'B':\n            case 'C':\n            case 'D':\n\
    \            case 'F':\n            case 'G':\n                c = tolower(c);\n\
    \                break;\n            case 'y':\n            case 'z':\n      \
    \          c = toupper(c);\n                break;\n            default:\n   \
    \             c = tolower(c);\n                break;\n        }\n    }\n    return\
    \ encoded;", "    std::string encoded = message;\n    for (auto &c : encoded)\
    \ {\n        switch (c) {\n            case 'a':\n            case 'e':\n    \
    \        case 'i':\n            case 'o':\n            case 'u':\n           \
    \ case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n\
    \            case 'U':\n                c = c + 2;\n                break;\n \
    \           default:\n                c = c;\n                break;\n       \
    \ }\n    }\n    for (auto &c : encoded) {\n        switch (c) {\n            case\
    \ 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n\
    \            case 'U':\n                c = c - 'A' + 'a';\n                break;\n\
    \            default:\n                c = c;\n                break;\n      \
    \  }\n    }\n    return encoded;", "    std::string ans = \"\";\n    for(int i\
    \ = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        }\n        else {\n            ans += 'a';\n        }\n    }\n \
    \   return ans;", "    std::string encodedMessage = \"\";\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        char c = message[i];\n        if (c >=\
    \ 'a' && c <= 'z') {\n            encodedMessage += c;\n        } else if (c >=\
    \ 'A' && c <= 'Z') {\n            encodedMessage += c;\n        } else if (c >=\
    \ '0' && c <= '9') {\n            encodedMessage += c;\n        } else if (c ==\
    \ '.') {\n            encodedMessage += c;\n        } else if (c == '!') {\n \
    \           encodedMessage += c;\n        } else if (c == '?') {\n           \
    \ encodedMessage += c;\n        } else if (c == '-') {\n            encodedMessage\
    \ += c;\n        } else if (c == '_') {\n            encodedMessage += c;\n  \
    \      } else if (c == '+') {\n            encodedMessage += c;\n        } else\
    \ if (c == '/') {\n            encodedMessage += c;\n        } else if (c == '(')\
    \ {\n            encodedMessage += c;\n        } else if (c == ')') {\n      \
    \      encodedMessage += c;\n        } else if (c == '[') {\n            encodedMessage\
    \ += c;\n        } else if (c == ']') {\n            encodedMessage += c;\n  \
    \      } else if (c == '{') {\n            encodedMessage += c;\n        } else\
    \ if (c == '}') {\n            encodedMessage += c;\n        } else if (c == '<')\
    \ {\n            encodedMessage += c;\n        } else if (c == '>') {\n      \
    \      encodedMessage += c;\n        } else if (c == '/') {\n            encodedMessage\
    \ += c;\n        } else if (c == '\\\\') {\n            encodedMessage += c;\n\
    \        } else if (c == '%') {\n            encodedMessage += c;\n        } else\
    \ if (c == '&') {\n            encodedMessage += c;\n        } else if (c == '=')\
    \ {\n            encodedMessage += c;\n        } else if (c == '!') {\n      \
    \      encodedMessage += c;\n        } else if (c == '@') {\n            encodedMessage\
    \ += c;\n        } else if (c == '#') {\n            encodedMessage += c;\n  \
    \      } else if (c == '$') {\n            encodedMessage += c;\n        } else\
    \ if (c == '%') {\n            encodedMessage += c;\n        } else if (c == '^')\
    \ {\n            encodedMessage += c;\n        } else if (c == '&') {\n      \
    \      encodedMessage += c;\n        } else if (c == '*') {\n            encodedMessage\
    \ += c;\n        } else if (c == '(') {\n            encodedMessage += c;\n  \
    \      } else if (c == ')') {\n            encodedMessage += c;\n        } else\
    \ if (c == '+') {\n            encodedMessage += c;\n        } else if (c == '=')\
    \ {\n            encodedMessage += c;\n        } else if (c == '+') {\n      \
    \      encodedMessage += c;\n        } else if (c == '=') {\n            encodedMessage\
    \ += c;\n        } else if (c == '+') {\n            encodedMessage += c;\n  \
    \      } else if (c == '=') {\n            encodedMessage += c;\n        } else\
    \ if (c == '+') {\n            encodedMessage += ", "    std::string encoded =\
    \ message;\n    for(int i = 0; i < encoded.size(); i++) {\n        if(isalpha(encoded[i]))\
    \ {\n            int index = tolower(encoded[i]) - 'a';\n            encoded[i]\
    \ = toupper(encoded[i]);\n            encoded[index + 2] = tolower(encoded[index\
    \ + 2]);\n        }\n    }\n    return encoded;", "    std::string encoded = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            encoded += c;\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            encoded += c;\n        } else if (c\
    \ >= '0' && c <= '9') {\n            encoded += c;\n        } else if (c == '.'\
    \ || c == '!' || c == '?' || c == '-' || c == '_' || c == '/' || c == '\\\\' ||\
    \ c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '[' || c ==\
    \ ']' || c == '{' || c == '}' || c == '|' || c == '~') {\n            encoded\
    \ += c;\n        } else {\n            int index = c - 'a';\n            int index2\
    \ = c - 'A';\n            int index3 = c - '0';\n            int index4 = c -\
    \ '9';\n            int index5 = c - '!';\n            int index6 = c - '.';\n\
    \            int index7 = c - '?';\n            int index8 = c - '-';\n      \
    \      int index9 = c - '_';\n            int index10 = c - '/';\n           \
    \ int index11 = c - '\\\\';\n            int index12 = c - '^';\n            int\
    \ index13 = c - '&';\n            int index14 = c - '*';\n            int index15\
    \ = c - '(';\n            int index16 = c - ')';\n            int index17 = c\
    \ - '[';\n            int index18 = c - ']';\n            int index19 = c - '{';\n\
    \            int index20 = c - '}';\n            int index21 = c - '|';\n    \
    \        int index22 = c - '~';\n            int index23 = c - 'a';\n        \
    \    int index24 = c - 'A';\n            int index25 = c - '0';\n            int\
    \ index26 = c - '9';\n            int index27 = c - '!';\n            int index28\
    \ = c - '.';\n            int index29 = c - '?';\n            int index30 = c\
    \ - '-';\n            int index31 = c - '_';\n            int index32 = c - '/';\n\
    \            int index33 = c - '\\\\';\n            int index34 = c - '^';\n \
    \           int index35 = c - '&';\n            int index36 = c - '*';\n     \
    \       int index37 = c - '(';\n            int index38 = c - ')';\n         \
    \   int index39 = c - '[';", "    std::string encoded = \"\";\n    for (auto &c:\
    \ message) {\n        switch (c) {\n            case 'a':\n            case 'e':\n\
    \            case 'i':\n            case 'o':\n            case 'u':\n       \
    \         encoded += 'A';\n                break;\n            case 'b':\n   \
    \         case 'f':\n            case 'n':\n            case 'r':\n          \
    \  case 't':\n                encoded += 'B';\n                break;\n      \
    \      case 'c':\n            case 'd':\n            case 'g':\n            case\
    \ 'j':\n            case 'k':\n                encoded += 'C';\n             \
    \   break;\n            case 'e':\n            case 'h':\n            case 'j':\n\
    \            case 'l':\n            case 'n':\n                encoded += 'E';\n\
    \                break;\n            case 'f':\n            case 'h':\n      \
    \      case 'k':\n            case 'l':\n            case 'n':\n             \
    \   encoded += 'F';\n                break;\n            case 'g':\n         \
    \   case 'j':\n            case 'k':\n            case 'l':\n            case\
    \ 'n':\n                encoded += 'G';\n                break;\n            case\
    \ 'h':\n            case 'j':\n            case 'k':\n            case 'l':\n\
    \            case 'n':\n                encoded += 'H';\n                break;\n\
    \            case 'i':\n            case 'j':\n            case 'k':\n       \
    \     case 'l':\n            case 'n':\n                encoded += 'I';\n    \
    \            break;\n            case 'j':\n            case 'k':\n          \
    \  case 'l':\n            case 'n':\n                encoded += 'J';\n       \
    \         break;\n            case 'k':\n            case 'l':\n            case\
    \ 'n':\n                encoded += 'K';\n                break;\n            case\
    \ 'l':\n            case 'n':\n                encoded += 'L';\n             \
    \   break;\n            case 'm':\n            case 'n':\n                encoded\
    \ += 'M';\n                break;\n            case 'o':\n            case 'p':\n\
    \            case 'q':\n            case 'r':\n            case 's':\n       \
    \         encoded += 'O';\n                break;\n            case 'p':\n   \
    \         case 'q':\n            case 'r':\n            case 's':\n          \
    \      encoded += 'P';\n                break;\n            case 'q':\n      \
    \      case 'r':\n            case 's':\n                encoded += 'Q';\n   \
    \             break;\n            case 'r':\n            case 's':\n         \
    \       encoded += 'R';\n                break;\n            case 's':\n     \
    \           encoded += 'S';\n                break;\n            case 't':\n \
    \           case 'u':\n            case 'v':\n            case 'w':\n        \
    \    case 'x':\n                encoded += 'T';\n                break;\n    \
    \        case 'u':\n            case 'v':\n            case 'w':\n           \
    \ case 'x':\n                encoded += 'U';\n                break;\n       \
    \     case 'v':\n            case 'w':\n            case 'x':\n              \
    \  encoded += 'V';\n                break;\n            case 'w':\n          \
    \  case 'x':\n                encoded += 'W';\n                break;\n      \
    \      case 'x':\n                encoded += 'X';\n                break;\n  \
    \          ", "    std::string encodedMessage;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n\
    \            encodedMessage += c;\n        } else if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += message[++i];\n\
    \        }\n    }\n    return encodedMessage;", "    std::string encoded = message;\n\
    \    for(int i = 0; i < encoded.size(); i++) {\n        if(isalpha(encoded[i]))\
    \ {\n            char c = encoded[i];\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                char d = c + 1;\n     \
    \           encoded[i] = d;\n            }\n        }\n    }\n    return encoded;",
  "    std::string encoded = message;\n    for (int i = 0; i < encoded.length(); i++)\
    \ {\n        if (encoded[i] == 'a' || encoded[i] == 'e' || encoded[i] == 'i' ||\
    \ encoded[i] == 'o' || encoded[i] == 'u') {\n            encoded[i] = encoded[i\
    \ + 1];\n        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n\
    \        if (encoded[i] == 'a' || encoded[i] == 'e' || encoded[i] == 'i' || encoded[i]\
    \ == 'o' || encoded[i] == 'u') {\n            encoded[i] = encoded[i - 1];\n \
    \       }\n    }\n    return encoded;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        ans\
    \ += c;\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c =\
    \ ans[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[i] = 'A';\n        } else if(c == 'b' || c == 'c' || c ==\
    \ 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l'\
    \ || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c\
    \ == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n    \
    \        ans[i] = 'B';\n        } else if(c == 'A' || c == 'B' || c == 'C' ||\
    \ c == 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c ==\
    \ 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q'\
    \ || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c\
    \ == 'Y' || c == 'Z') {\n            ans[i] = 'a';\n        } else if(c == 'a'\
    \ || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c\
    \ == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            ans[i] = 'b';\n \
    \       } else if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c ==\
    \ 'L' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n\
    \            ans[i] = 'c';\n        } else if(c == 'a' || c == 'b' || c == 'c'\
    \ || c == 'd' || c == 'e' || c == 'f", "    std::string ans;\n    for(int i =\
    \ 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ 'A';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans += 'a';\n        }\n        else {\n       \
    \     ans += c;\n        }\n    }\n    return ans;", "    std::string encoded\
    \ = message;\n    for(int i = 0; i < encoded.size(); i++) {\n        char c =\
    \ encoded[i];\n        if('a' <= c && c <= 'z') {\n            encoded[i] = c\
    \ + 1;\n        }\n        else if('A' <= c && c <= 'Z') {\n            encoded[i]\
    \ = c + 1;\n        }\n        else if('0' <= c && c <= '9') {\n            encoded[i]\
    \ = c + 1;\n        }\n    }\n    return encoded;", "    std::string ans;\n  \
    \  for(int i=0;i<message.length();i++){\n        if(message[i]=='a' || message[i]=='e'\
    \ || message[i]=='i' || message[i]=='o' || message[i]=='u'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='A' || message[i]=='E'\
    \ || message[i]=='I' || message[i]=='O' || message[i]=='U'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='b' || message[i]=='c'\
    \ || message[i]=='d' || message[i]=='f' || message[i]=='g' || message[i]=='h'\
    \ || message[i]=='j' || message[i]=='k' || message[i]=='l' || message[i]=='m'\
    \ || message[i]=='n' || message[i]=='p' || message[i]=='q' || message[i]=='r'\
    \ || message[i]=='s' || message[i]=='t' || message[i]=='v' || message[i]=='w'\
    \ || message[i]=='x' || message[i]=='y' || message[i]=='z'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='B' || message[i]=='C'\
    \ || message[i]=='D' || message[i]=='F' || message[i]=='G' || message[i]=='H'\
    \ || message[i]=='J' || message[i]=='K' || message[i]=='L' || message[i]=='M'\
    \ || message[i]=='N' || message[i]=='P' || message[i]=='Q' || message[i]=='R'\
    \ || message[i]=='S' || message[i]=='T' || message[i]=='V' || message[i]=='W'\
    \ || message[i]=='X' || message[i]=='Y' || message[i]=='Z'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='0'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='1'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='2'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='3'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='4'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='5'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='6'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='7'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='8'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='9'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='.'){\n            ans\
    \ += message[i];\n        }\n        else if(message[i]=='-'){\n", "    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       if (message[i] >= 'a' && message[i] <= 'z') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encodedMessage += message[i];\n        } else if (message[i] >= '0'\
    \ && message[i] <= '9') {\n            encodedMessage += message[i];\n       \
    \ } else if (message[i] == '.') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '_') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '-') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '+') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '/') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '(') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == ')') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '[') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == ']') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '{') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '}') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '%') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '!') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '@') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '#') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '$') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '%') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '&') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '*') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '(') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == ')') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '*') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '+') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '-') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '.') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '/') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '=') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '<') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '>') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '?') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '!') {\n            encodedMessage += message[i];\n\
    \        } else if (message[i] == '.", "    std::string encoded = message;\n \
    \   for (auto &c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            std::swap(encoded.at(c), encoded.at(c+1));\n\
    \        }\n    }\n    for (auto &c : encoded) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            std::swap(encoded.at(c),\
    \ encoded.at(c+1));\n        }\n    }\n    return encoded;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if ('A' <= c && c <= 'Z') {\n            encoded +=\
    \ c;\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            encoded += c + 2;\n        } else {\n            encoded\
    \ += c;\n        }\n    }\n    return encoded;", "    std::string ans = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if ('a' <= c && c <= 'z') {\n            ans += c;\n        } else {\n\
    \            ans += 'A' + (c - 'a');\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c && c\
    \ <= 'z') {\n            ans[i] = c;\n        } else {\n            ans[i] = 'a'\
    \ + (c - 'a');\n        }\n    }\n    return ans;", "    std::string encoded =\
    \ \"\";\n    for (auto c : message) {\n        if ('A' <= c && c <= 'Z') {\n \
    \           encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encoded += c + 2;\n        }\n    }\n\
    \    return encoded;", "    std::string encodedMessage;\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        char c = message[i];\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage\
    \ += c;\n        } else {\n            encodedMessage += tolower(c);\n       \
    \ }\n    }\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            encodedMessage += message[(i + 2) % message.length()];\n\
    \        } else {\n            encodedMessage += tolower(c);\n        }\n    }\n\
    \    return encodedMessage;", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < message.length(); i++) {\n        char c = message[i];\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n\
    \        }\n        else {\n            ans += 'a' + message[i] - 'a';\n     \
    \   }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c >= 'a' && c <= 'z') {\n            encoded += c;\n        } else if (c >=\
    \ 'A' && c <= 'Z') {\n            encoded += c;\n        } else if (c >= '0' &&\
    \ c <= '9') {\n            encoded += c;\n        } else {\n            char nextLetter\
    \ = message[(i + 1) % (message.length())];\n            char nextVowel = message[(i\
    \ + 2) % (message.length())];\n            char nextVowel2 = message[(i + 3) %\
    \ (message.length())];\n            char nextVowel3 = message[(i + 4) % (message.length())];\n\
    \            char nextVowel4 = message[(i + 5) % (message.length())];\n      \
    \      char nextVowel5 = message[(i + 6) % (message.length())];\n            char\
    \ nextVowel6 = message[(i + 7) % (message.length())];\n            char nextVowel7\
    \ = message[(i + 8) % (message.length())];\n            char nextVowel8 = message[(i\
    \ + 9) % (message.length())];\n            char nextVowel9 = message[(i + 10)\
    \ % (message.length())];\n            char nextVowel10 = message[(i + 11) % (message.length())];\n\
    \            char nextVowel11 = message[(i + 12) % (message.length())];\n    \
    \        char nextVowel12 = message[(i + 13) % (message.length())];\n        \
    \    char nextVowel13 = message[(i + 14) % (message.length())];\n            char\
    \ nextVowel14 = message[(i + 15) % (message.length())];\n            char nextVowel15\
    \ = message[(i + 16) % (message.length())];\n            char nextVowel16 = message[(i\
    \ + 17) % (message.length())];\n            char nextVowel17 = message[(i + 18)\
    \ % (message.length())];\n            char nextVowel18 = message[(i + 19) % (message.length())];\n\
    \            char nextVowel19 = message[(i + 20) % (message.length())];\n    \
    \        char nextVowel20 = message[(i + 21) % (message.length())];\n        \
    \    char nextVowel21 = message[(i + 22) % (message.length())];\n            char\
    \ nextVowel22 = message[(i + 23) % (message.length())];\n            char nextV",
  "    std::string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            char temp = c;\n            c = message[++i];\n\
    \            encoded = encoded + temp;\n            c = message[++i];\n      \
    \      encoded = encoded + temp;\n        }\n        encoded = encoded + c;\n\
    \    }\n    return encoded;", "    std::string encoded = \"\";\n    for (auto\
    \ &c : message) {\n        switch (c) {\n            case 'a':\n            case\
    \ 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \                encoded += 'A';\n                break;\n            case 'b':\n\
    \            case 'f':\n            case 'n':\n            case 'r':\n       \
    \     case 't':\n                encoded += 'B';\n                break;\n   \
    \         case 'c':\n            case 'd':\n            case 'g':\n          \
    \  case 'j':\n            case 'k':\n                encoded += 'C';\n       \
    \         break;\n            case 'e':\n            case 'h':\n            case\
    \ 'j':\n            case 'l':\n            case 'n':\n                encoded\
    \ += 'E';\n                break;\n            case 'f':\n            case 'h':\n\
    \            case 'j':\n            case 'k':\n                encoded += 'F';\n\
    \                break;\n            case 'g':\n            case 'h':\n      \
    \      case 'j':\n            case 'l':\n            case 'n':\n             \
    \   encoded += 'G';\n                break;\n            case 'h':\n         \
    \   case 'j':\n            case 'k':\n                encoded += 'H';\n      \
    \          break;\n            case 'i':\n            case 'j':\n            case\
    \ 'k':\n                encoded += 'I';\n                break;\n            case\
    \ 'j':\n            case 'k':\n                encoded += 'J';\n             \
    \   break;\n            case 'k':\n                encoded += 'K';\n         \
    \       break;\n            case 'l':\n            case 'm':\n            case\
    \ 'n':\n                encoded += 'L';\n                break;\n            case\
    \ 'm':\n            case 'n':\n                encoded += 'M';\n             \
    \   break;\n            case 'n':\n                encoded += 'N';\n         \
    \       break;\n            case 'o':\n            case 'p':\n            case\
    \ 'q':\n            case 'r':\n            case 's':\n                encoded\
    \ += 'O';\n                break;\n            case 'p':\n            case 'q':\n\
    \            case 'r':\n            case 's':\n                encoded += 'P';\n\
    \                break;\n            case 'q':\n            case 'r':\n      \
    \      case 's':\n                encoded += 'Q';\n                break;\n  \
    \          case 'r':\n            case 's':\n                encoded += 'R';\n\
    \                break;\n            case 's':\n                encoded += 'S';\n\
    \                break;\n            case 't':\n            case 'u':\n      \
    \      case 'v':\n            case 'w':\n                encoded += 'T';\n   \
    \             break;\n            case 'u':\n            case 'v':\n         \
    \   case 'w':\n                encoded += 'U';\n                break;\n     \
    \       case 'v':\n            case 'w':\n                encoded += 'V';\n  \
    \              break;\n            case 'w':\n                encoded += 'W';\n\
    \                break;\n            case 'x':\n            case 'y':\n      \
    \      case 'z':\n                encoded += 'X';\n                break;\n  \
    \          case 'y':\n            case 'z':\n                encoded += 'Y';\n\
    \                break;\n            case 'z':\n                encoded += 'Z';\n\
    \                break;\n", "    std::string ans = \"\";\n    for(int i = 0; i\
    \ < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            ans += message[i];\n        }\n        else if(message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            ans += message[i];\n        }\n   \
    \     else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i]\
    \ == 'o' || message[i] == 'u' || message[i] == 'y') {\n            ans += message[i];\n\
    \        }\n        else {\n            ans += message[i] + 2;\n        }\n  \
    \  }\n    return ans;", "    std::string encoded = \"\";\n    for (char c : message)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            encoded += c;\n        } else {\n            char temp = c;\n   \
    \         int index = c - 'a';\n            int index2 = c - 'a';\n          \
    \  int index3 = c - 'a';\n            int index4 = c - 'a';\n            int index5\
    \ = c - 'a';\n            int index6 = c - 'a';\n            int index7 = c -\
    \ 'a';\n            int index8 = c - 'a';\n            int index9 = c - 'a';\n\
    \            int index10 = c - 'a';\n            int index11 = c - 'a';\n    \
    \        int index12 = c - 'a';\n            int index13 = c - 'a';\n        \
    \    int index14 = c - 'a';\n            int index15 = c - 'a';\n            int\
    \ index16 = c - 'a';\n            int index17 = c - 'a';\n            int index18\
    \ = c - 'a';\n            int index19 = c - 'a';\n            int index20 = c\
    \ - 'a';\n            int index21 = c - 'a';\n            int index22 = c - 'a';\n\
    \            int index23 = c - 'a';\n            int index24 = c - 'a';\n    \
    \        int index25 = c - 'a';\n            int index26 = c - 'a';\n        \
    \    int index27 = c - 'a';\n            int index28 = c - 'a';\n            int\
    \ index29 = c - 'a';\n            int index30 = c - 'a';\n            int index31\
    \ = c - 'a';\n            int index32 = c - 'a';\n            int index33 = c\
    \ - 'a';\n            int index34 = c - 'a';\n            int index35 = c - 'a';\n\
    \            int index36 = c - 'a';\n            int index37 = c - 'a';\n    \
    \        int index38 = c - 'a';\n            int index39 = c - 'a';\n        \
    \    int index40 = c - 'a';\n            int index41 = c - 'a';\n            int\
    \ index42 = c - 'a';\n            int index43 = c - 'a';\n            int index44\
    \ = c - 'a';\n            int index45 = c - 'a';\n            int index46 = c\
    \ - 'a';\n            int index47 = c - 'a';\n            int index48 = c - 'a",
  "    std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n         \
    \   ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans += 'a';\n        } else {\n            ans +=\
    \ 'A';\n        }\n    }\n    return ans;", "    std::string encoded = message;\n\
    \    for (int i = 0; i < encoded.length(); i++) {\n        if (encoded[i] == 'a')\
    \ {\n            encoded[i] = 'e';\n        } else if (encoded[i] == 'e') {\n\
    \            encoded[i] = 'i';\n        } else if (encoded[i] == 'i') {\n    \
    \        encoded[i] = 'o';\n        } else if (encoded[i] == 'o') {\n        \
    \    encoded[i] = 'u';\n        } else if (encoded[i] == 'u') {\n            encoded[i]\
    \ = 'a';\n        }\n    }\n    return encoded;", "    std::string ans = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >=\
    \ 'a' && message[i] <= 'z') {\n            ans += message[i];\n        }\n   \
    \     else if (message[i] >= 'A' && message[i] <= 'Z') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] >= '0' && message[i] <= '9') {\n     \
    \       ans += message[i];\n        }\n        else if (message[i] == '.' || message[i]\
    \ == '!' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '_') {\n            ans += message[i];\n     \
    \   }\n        else if (message[i] == '-') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '+') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '/') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '(') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == ')') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '[') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == ']') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '{') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '}') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '|') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '\\\\') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '$') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '%') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '&') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '!') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '@') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '.') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '\"') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '<') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '>') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '?') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '^') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '~') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '`') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '|') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '\\\\') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '$", "    std::string ans;\n    for(int\
    \ i=0;i<message.length();i++){\n        char c = message[i];\n        if(c>='a'\
    \ && c<='z'){\n            ans += c;\n        }\n        else if(c>='A' && c<='Z'){\n\
    \            ans += c;\n        }\n        else if(c>='0' && c<='9'){\n      \
    \      ans += c;\n        }\n        else{\n            ans += 'A';\n        }\n\
    \    }\n    return ans;", "    std::string encoded = \"\";\n    for (auto &c :\
    \ message) {\n        switch (c) {\n        case 'A':\n            encoded +=\
    \ \"a\";\n            break;\n        case 'B':\n            encoded += \"b\"\
    ;\n            break;\n        case 'C':\n            encoded += \"c\";\n    \
    \        break;\n        case 'D':\n            encoded += \"d\";\n          \
    \  break;\n        case 'E':\n            encoded += \"e\";\n            break;\n\
    \        case 'F':\n            encoded += \"f\";\n            break;\n      \
    \  case 'G':\n            encoded += \"g\";\n            break;\n        case\
    \ 'H':\n            encoded += \"h\";\n            break;\n        case 'I':\n\
    \            encoded += \"i\";\n            break;\n        case 'J':\n      \
    \      encoded += \"j\";\n            break;\n        case 'K':\n            encoded\
    \ += \"k\";\n            break;\n        case 'L':\n            encoded += \"\
    l\";\n            break;\n        case 'M':\n            encoded += \"m\";\n \
    \           break;\n        case 'N':\n            encoded += \"n\";\n       \
    \     break;\n        case 'O':\n            encoded += \"o\";\n            break;\n\
    \        case 'P':\n            encoded += \"p\";\n            break;\n      \
    \  case 'Q':\n            encoded += \"q\";\n            break;\n        case\
    \ 'R':\n            encoded += \"r\";\n            break;\n        case 'S':\n\
    \            encoded += \"s\";\n            break;\n        case 'T':\n      \
    \      encoded += \"t\";\n            break;\n        case 'U':\n            encoded\
    \ += \"u\";\n            break;\n        case 'V':\n            encoded += \"\
    v\";\n            break;\n        case 'W':\n            encoded += \"w\";\n \
    \           break;\n        case 'X':\n            encoded += \"x\";\n       \
    \     break;\n        case 'Y':\n            encoded += \"y\";\n            break;\n\
    \        case 'Z':\n            encoded += \"z\";\n            break;\n      \
    \  case 'a':\n            encoded += \"a\";\n            break;\n        case\
    \ 'b':\n            encoded += \"b\";\n            break;\n        case 'c':\n\
    \            encoded += \"c\";\n            break;\n        case 'd':\n      \
    \      encoded += \"d\";\n            break;\n        case 'e':\n            encoded\
    \ += \"e\";\n            break;\n        case 'f':\n            encoded += \"\
    f\";\n            break;\n        case 'g':\n            encoded += \"g\";\n \
    \           break;\n        case 'h':\n            encoded += \"h\";\n       \
    \     break;\n        case 'i':\n            encoded += \"i\";\n            break;\n\
    \        case 'j':\n            encoded += \"j\";\n            break;\n      \
    \  case 'k':\n            encoded += \"k\";\n            break;\n        case\
    \ 'l':\n            encoded += \"l\";\n            break;\n        case 'm':\n\
    \            encoded += \"m\";\n            break;\n        case 'n':\n      \
    \      encoded += \"n\";\n            break;\n        case 'o':\n            encoded\
    \ += \"o\";\n            break;\n        case 'p':\n", "    std::string encoded\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            encoded += c;\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            encoded += c;\n     \
    \   } else if (c >= '0' && c <= '9') {\n            encoded += c;\n        } else\
    \ if (c == '_') {\n            encoded += c;\n        } else {\n            char\
    \ nextVowel = message[++i];\n            char nextVowel2 = message[++i];\n   \
    \         if (nextVowel == 'a' || nextVowel == 'e' || nextVowel == 'i' || nextVowel\
    \ == 'o' || nextVowel == 'u' || nextVowel == 'y') {\n                encoded +=\
    \ nextVowel2;\n            } else {\n                encoded += c;\n         \
    \   }\n        }\n    }\n    return encoded;", "    std::string encodedMessage;\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        encodedMessage += c;\n        }\n        else {\n            int index\
    \ = c - 'a';\n            int index2 = c - 'a';\n            int index3 = c -\
    \ 'a';\n            int index4 = c - 'a';\n            int index5 = c - 'a';\n\
    \            int index6 = c - 'a';\n            int index7 = c - 'a';\n      \
    \      int index8 = c - 'a';\n            int index9 = c - 'a';\n            int\
    \ index10 = c - 'a';\n            int index11 = c - 'a';\n            int index12\
    \ = c - 'a';\n            int index13 = c - 'a';\n            int index14 = c\
    \ - 'a';\n            int index15 = c - 'a';\n            int index16 = c - 'a';\n\
    \            int index17 = c - 'a';\n            int index18 = c - 'a';\n    \
    \        int index19 = c - 'a';\n            int index20 = c - 'a';\n        \
    \    int index21 = c - 'a';\n            int index22 = c - 'a';\n            int\
    \ index23 = c - 'a';\n            int index24 = c - 'a';\n            int index25\
    \ = c - 'a';\n            int index26 = c - 'a';\n            int index27 = c\
    \ - 'a';\n            int index28 = c - 'a';\n            int index29 = c - 'a';\n\
    \            int index30 = c - 'a';\n            int index31 = c - 'a';\n    \
    \        int index32 = c - 'a';\n            int index33 = c - 'a';\n        \
    \    int index34 = c - 'a';\n            int index35 = c - 'a';\n            int\
    \ index36 = c - 'a';\n            int index37 = c - 'a';\n            int index38\
    \ = c - 'a';\n            int index39 = c - 'a';\n            int index40 = c\
    \ - 'a';\n            int index41 = c - 'a';\n            int index42 = c - 'a';\n\
    \            int index43 = c - 'a';\n            int index44 = c - 'a';\n    \
    \        int index45 = c - 'a';\n            int index46 = c - 'a';\n        \
    \    int index47 = c - 'a';\n            int index", "    std::string encoded\
    \ = message;\n    for (auto &c : message) {\n        c = tolower(c);\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : message) {\n      \
    \  if (c >= 'a' && c <= 'z') {\n            c = toupper(c);\n        }\n    }\n\
    \    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n        \
    \    c = toupper(c);\n        }", "    std::string encoded = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded\
    \ += c;\n        }\n        else {\n            int index = c - 'a';\n       \
    \     int index2 = c - 'a';\n            int index3 = c - 'a';\n            int\
    \ index4 = c - 'a';\n            int index5 = c - 'a';\n            int index6\
    \ = c - 'a';\n            int index7 = c - 'a';\n            int index8 = c -\
    \ 'a';\n            int index9 = c - 'a';\n            int index10 = c - 'a';\n\
    \            int index11 = c - 'a';\n            int index12 = c - 'a';\n    \
    \        int index13 = c - 'a';\n            int index14 = c - 'a';\n        \
    \    int index15 = c - 'a';\n            int index16 = c - 'a';\n            int\
    \ index17 = c - 'a';\n            int index18 = c - 'a';\n            int index19\
    \ = c - 'a';\n            int index20 = c - 'a';\n            int index21 = c\
    \ - 'a';\n            int index22 = c - 'a';\n            int index23 = c - 'a';\n\
    \            int index24 = c - 'a';\n            int index25 = c - 'a';\n    \
    \        int index26 = c - 'a';\n            int index27 = c - 'a';\n        \
    \    int index28 = c - 'a';\n            int index29 = c - 'a';\n            int\
    \ index30 = c - 'a';\n            int index31 = c - 'a';\n            int index32\
    \ = c - 'a';\n            int index33 = c - 'a';\n            int index34 = c\
    \ - 'a';\n            int index35 = c - 'a';\n            int index36 = c - 'a';\n\
    \            int index37 = c - 'a';\n            int index38 = c - 'a';\n    \
    \        int index39 = c - 'a';\n            int index40 = c - 'a';\n        \
    \    int index41 = c - 'a';\n            int index42 = c - 'a';\n            int\
    \ index43 = c - 'a';\n            int index44 = c - 'a';\n            int index45\
    \ = c - 'a';\n            int index46 = c - 'a';\n            int index47 = c\
    \ - 'a';\n            int index48", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans += c;\n        }\n        else {\n         \
    \   ans += 'a' + message[i] - 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += 'A';\n        }\n        else if(c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n   \
    \     }\n        else {\n            ans += c;\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n         \
    \   ans += c;\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans += 'a';\n        } else if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'A';\n      \
    \  }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if ('A' <= c && c <= 'Z') {\n            ans[i] = c;\n        } else\
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  ans[i] = 'a';\n        } else if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            ans[i] = 'A';\n        }\n    }\n    return\
    \ ans;", "    std::string encodedMessage;\n    for(char c : message) {\n     \
    \   switch(c) {\n            case 'a':\n            case 'e':\n            case\
    \ 'i':\n            case 'o':\n            case 'u':\n                encodedMessage\
    \ += c;\n                break;\n            default:\n                encodedMessage\
    \ += tolower(c);\n        }\n    }\n    for(char c : message) {\n        switch(c)\
    \ {\n            case 'a':\n            case 'e':\n            case 'i':\n   \
    \         case 'o':\n            case 'u':\n                encodedMessage +=\
    \ toupper(c);\n                break;\n            default:\n                encodedMessage\
    \ += c;\n        }\n    }\n    return encodedMessage;", "    std::string ans =\
    \ \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += c;\n        } else {\n            ans += 'a';\n        }\n   \
    \ }\n    return ans;", "    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] == 'a' || message[i] == 'e' || message[i] ==\
    \ 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == 'A' || message[i] == 'E' || message[i]\
    \ == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded +=\
    \ message[i];\n        }\n        else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;", "    std::string ans = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n   \
    \     if ('a' <= c && c <= 'z') {\n            ans += c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans +=\
    \ 'a';\n        } else if (c == 'B' || c == 'C' || c == 'D' || c == 'F' || c ==\
    \ 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N'\
    \ || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c\
    \ == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n            ans += 'b';\n   \
    \     } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans += 'a';\n        } else if (c == 'b' || c == 'c' || c == 'd'\
    \ || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c\
    \ == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n           \
    \ ans += 'b';\n        }\n    }\n    return ans;", "    std::string encoded =\
    \ \"\";\n    for (auto &c : message) {\n        switch (c) {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n                encoded += 'A';\n                break;\n\
    \            case 'b':\n            case 'f':\n            case 'n':\n       \
    \     case 'r':\n            case 't':\n                encoded += 'B';\n    \
    \            break;\n            case 'c':\n            case 'd':\n          \
    \  case 'm':\n            case 'p':\n            case 's':\n                encoded\
    \ += 'C';\n                break;\n            case 'e':\n            case 'f':\n\
    \            case 'g':\n            case 'h':\n            case 'j':\n       \
    \         encoded += 'D';\n                break;\n            case 'f':\n   \
    \         case 'g':\n            case 'h':\n            case 'j':\n          \
    \  case 'k':\n                encoded += 'E';\n                break;\n      \
    \      case 'g':\n            case 'h':\n            case 'j':\n            case\
    \ 'k':\n            case 'l':\n                encoded += 'F';\n             \
    \   break;\n            case 'h':\n            case 'j':\n            case 'k':\n\
    \            case 'l':\n            case 'm':\n                encoded += 'G';\n\
    \                break;\n            case 'i':\n            case 'j':\n      \
    \      case 'k':\n            case 'l':\n            case 'm':\n            case\
    \ 'n':\n                encoded += 'H';\n                break;\n            case\
    \ 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n\
    \            case 'm':\n            case 'n':\n            case 'o':\n       \
    \         encoded += 'I';\n                break;\n            case 'j':\n   \
    \         case 'k':\n            case 'l':\n            case 'm':\n          \
    \  case 'n':\n            case 'o':\n            case 'p':\n                encoded\
    \ += 'J';\n                break;\n            case 'k':\n            case 'l':\n\
    \            case 'm':\n            case 'n':\n            case 'o':\n       \
    \     case 'p':\n            case 'q':\n                encoded += 'K';\n    \
    \            break;\n            case 'l':\n            case 'm':\n          \
    \  case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n\
    \            case 'r':\n                encoded += 'L';\n                break;\n\
    \            case 'm':\n            case 'n':\n            case 'o':\n       \
    \     case 'p':\n            case 'q':\n            case 'r':\n            case\
    \ 's':\n                encoded += 'M';\n                break;\n            case\
    \ 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n\
    \            case 'r':\n            case 's':\n            case 't':\n       \
    \         encoded += 'N';\n                break;\n            case 'o':\n   \
    \         case 'p':\n            case 'q':\n            case 'r':\n          \
    \  case 's':\n            case 't':\n            case 'u':\n                encoded\
    \ += 'O';\n                break;\n            case 'p':\n            case 'q':\n\
    \            case 'r':\n            case 's':\n            case 't':\n", "   \
    \ std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n         \
    \   ans += c;\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans += 'A';\n        } else if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n      \
    \  }\n    }\n    return ans;", "    std::string ans;\n    for(int i = 0; i < message.length();\
    \ i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            ans\
    \ += message[i];\n        }\n        else if(message[i] >= 'A' && message[i] <=\
    \ 'Z') {\n            ans += message[i];\n        }\n        else if(message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u') {\n            ans += message[i];\n        }\n        else if(message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            ans += message[i];\n        }\n        else {\n     \
    \       ans += 'a';\n        }\n    }\n    return ans;", "    std::string encoded\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if ('a' <= c && c <= 'z') {\n            encoded += c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            char nextLetter = message[++i];\n            if (nextLetter ==\
    \ 'a' || nextLetter == 'e' || nextLetter == 'i' || nextLetter == 'o' || nextLetter\
    \ == 'u') {\n                encoded += nextLetter;\n            }\n        }\n\
    \    }\n    return encoded;", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            ans += message[i];\n        }\n        else if(message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            ans += message[i];\n        }\n\
    \        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] ==\
    \ 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n    \
    \        ans += message[i];\n        }\n        else {\n            ans += 'a';\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        }\n        else {\n            ans += 'a';\n        }\n    }\n \
    \   return ans;", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ encoded = message;\n    for (int i = 0; i < encoded.size(); i++) {\n       \
    \ if (encoded[i] == 'a') {\n            encoded[i] = 'e';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'a';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'o';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'i';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'u';\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if ('a' <= c && c <= 'z') {\n            ans += c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans += 'a';\n        } else if (c == 'B' || c == 'C' || c ==\
    \ 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'M'\
    \ || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c\
    \ == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n            ans +=\
    \ 'b';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans += 'a';\n        } else if (c == 'b' || c == 'c' ||\
    \ c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c ==\
    \ 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't'\
    \ || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n           \
    \ ans += 'b';\n        }\n    }\n    return ans;", "    std::string encoded =\
    \ message;\n    for(int i = 0; i < encoded.length(); i++) {\n        if(isalpha(encoded[i]))\
    \ {\n            char c = encoded[i];\n            int pos = c - 'a';\n      \
    \      int pos2 = c - 'a' + 2;\n            char newC = pos > pos2 ? 'a' + (pos\
    \ - pos2) : 'a' + pos;\n            encoded[i] = newC;\n        }\n    }\n   \
    \ return encoded;", "    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        } else {\n            ans += 'a' + (c - 'a');\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else {\n            ans[i] = 'a' + (c - 'a');\n        }\n    }\n \
    \   return ans;", "    std::string encoded = message;\n    for(int i = 0; i <\
    \ encoded.length(); i++) {\n        if(isalpha(encoded[i])) {\n            int\
    \ index = tolower(encoded[i]) - 'a';\n            int index2 = tolower(encoded[i+1])\
    \ - 'a';\n            int index3 = tolower(encoded[i+2]) - 'a';\n            int\
    \ index4 = tolower(encoded[i+3]) - 'a';\n            int index5 = tolower(encoded[i+4])\
    \ - 'a';\n            int index6 = tolower(encoded[i+5]) - 'a';\n            int\
    \ index7 = tolower(encoded[i+6]) - 'a';\n            int index8 = tolower(encoded[i+7])\
    \ - 'a';\n            int index9 = tolower(encoded[i+8]) - 'a';\n            int\
    \ index10 = tolower(encoded[i+9]) - 'a';\n            int index11 = tolower(encoded[i+10])\
    \ - 'a';\n            int index12 = tolower(encoded[i+11]) - 'a';\n          \
    \  int index13 = tolower(encoded[i+12]) - 'a';\n            int index14 = tolower(encoded[i+13])\
    \ - 'a';\n            int index15 = tolower(encoded[i+14]) - 'a';\n          \
    \  int index16 = tolower(encoded[i+15]) - 'a';\n            int index17 = tolower(encoded[i+16])\
    \ - 'a';\n            int index18 = tolower(encoded[i+17]) - 'a';\n          \
    \  int index19 = tolower(encoded[i+18]) - 'a';\n            int index20 = tolower(encoded[i+19])\
    \ - 'a';\n            int index21 = tolower(encoded[i+20]) - 'a';\n          \
    \  int index22 = tolower(encoded[i+21]) - 'a';\n            int index23 = tolower(encoded[i+22])\
    \ - 'a';\n            int index24 = tolower(encoded[i+23]) - 'a';\n          \
    \  int index25 = tolower(encoded[i+24]) - 'a';\n            int index26 = tolower(encoded[i+25])\
    \ - 'a';\n            int index27 = tolower(encoded[i+26]) - 'a';\n          \
    \  int index28 = tolower(encoded[i+27]) - 'a';\n            int index29 = tolower(encoded[i+28])\
    \ - 'a';\n            int index30 = tolower(encoded[i+29]) - 'a';\n          \
    \  int index31 = tolower(encoded[i+30]) - 'a';\n            int index32 = tolower(encoded[i+31])\
    \ - 'a';\n            int index33 = tolower(encoded[i+32]) - 'a';\n          \
    \  int index34 = to", "    std::string encoded = \"\";\n    for(int i = 0; i <\
    \ message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 'a' + 'A';\n        } else if(message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] - 'A' + 'a';\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;", "    std::string encoded = message;\n    for (int i = 0; i < encoded.size();\
    \ i++) {\n        char c = encoded[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            encoded[i] = 'A';\n        }\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded[i] = 'a';\n        }\n        if ('0' <= c && c <= '9') {\n\
    \            encoded[i] = '0';\n        }\n    }\n    for (int i = 0; i < encoded.size();\
    \ i++) {\n        char c = encoded[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            encoded[i] = 'a';\n        }\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded[i] = 'A';\n        }\n        if ('0' <= c && c <= '9') {\n\
    \            encoded[i] = '0';\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        char temp = c;\n       \
    \ if (temp >= 'a' && temp <= 'z') {\n            ans += temp - 'a' + 'A';\n  \
    \      } else if (temp >= 'A' && temp <= 'Z') {\n            ans += temp - 'A'\
    \ + 'a';\n        } else {\n            ans += temp;\n        }\n    }\n    return\
    \ ans;", "    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char e = c;\n        if (e ==\
    \ 'a' || e == 'e' || e == 'i' || e == 'o' || e == 'u') {\n            e = tolower(e);\n\
    \        }\n        encoded = encoded + e;\n    }\n    return encoded;", "   \
    \ std::string encoded = \"\";\n    for (auto &c : message) {\n        switch (c)\
    \ {\n            case 'A':\n            case 'E':\n            case 'I':\n   \
    \         case 'O':\n            case 'U':\n                encoded += 'a';\n\
    \                break;\n            case 'B':\n            case 'F':\n      \
    \      case 'J':\n            case 'S':\n                encoded += 'b';\n   \
    \             break;\n            case 'C':\n            case 'G':\n         \
    \   case 'K':\n                encoded += 'c';\n                break;\n     \
    \       case 'D':\n            case 'H':\n            case 'L':\n            \
    \    encoded += 'd';\n                break;\n            case 'E':\n        \
    \    case 'I':\n            case 'O':\n            case 'U':\n               \
    \ encoded += 'e';\n                break;\n            case 'F':\n           \
    \ case 'J':\n            case 'S':\n                encoded += 'f';\n        \
    \        break;\n            case 'G':\n            case 'K':\n              \
    \  encoded += 'g';\n                break;\n            case 'H':\n          \
    \  case 'L':\n                encoded += 'h';\n                break;\n      \
    \      case 'I':\n            case 'O':\n            case 'U':\n             \
    \   encoded += 'i';\n                break;\n            case 'J':\n         \
    \   case 'S':\n                encoded += 'j';\n                break;\n     \
    \       case 'K':\n                encoded += 'k';\n                break;\n \
    \           case 'L':\n                encoded += 'l';\n                break;\n\
    \            case 'M':\n                encoded += 'm';\n                break;\n\
    \            case 'N':\n                encoded += 'n';\n                break;\n\
    \            case 'O':\n                encoded += 'o';\n                break;\n\
    \            case 'P':\n                encoded += 'p';\n                break;\n\
    \            case 'Q':\n                encoded += 'q';\n                break;\n\
    \            case 'R':\n                encoded += 'r';\n                break;\n\
    \            case 'S':\n                encoded += 's';\n                break;\n\
    \            case 'T':\n                encoded += 't';\n                break;\n\
    \            case 'U':\n                encoded += 'u';\n                break;\n\
    \            case 'V':\n                encoded += 'v';\n                break;\n\
    \            case 'W':\n                encoded += 'w';\n                break;\n\
    \            case 'X':\n                encoded += 'x';\n                break;\n\
    \            case 'Y':\n                encoded += 'y';\n                break;\n\
    \            case 'Z':\n                encoded += 'z';\n                break;\n\
    \            default:\n                encoded += c;\n        }\n    }\n    return\
    \ encoded;", "    std::string encodedMessage;\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char currentChar = message[i];\n        if (currentChar == 'a'\
    \ || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar\
    \ == 'u' || currentChar == 'A' || currentChar == 'E' || currentChar == 'I' ||\
    \ currentChar == 'O' || currentChar == 'U') {\n            encodedMessage += currentChar;\n\
    \        } else {\n            int currentVowelIndex = currentChar - 'a';\n  \
    \          int currentVowelIndex2 = currentVowelIndex + 1;\n            char currentVowel\
    \ = message[currentVowelIndex2];\n            char currentChar2 = message[i];\n\
    \            char currentChar3 = message[currentVowelIndex];\n            char\
    \ currentChar4 = message[currentVowelIndex2];\n            char currentChar5 =\
    \ message[currentVowelIndex2 + 1];\n            char currentChar6 = message[currentVowelIndex2\
    \ + 2];\n            char currentChar7 = message[currentVowelIndex2 + 3];\n  \
    \          char currentChar8 = message[currentVowelIndex2 + 4];\n            char\
    \ currentChar9 = message[currentVowelIndex2 + 5];\n            char currentChar10\
    \ = message[currentVowelIndex2 + 6];\n            char currentChar11 = message[currentVowelIndex2\
    \ + 7];\n            char currentChar12 = message[currentVowelIndex2 + 8];\n \
    \           char currentChar13 = message[currentVowelIndex2 + 9];\n          \
    \  char currentChar14 = message[currentVowelIndex2 + 10];\n            char currentChar15\
    \ = message[currentVowelIndex2 + 11];\n            char currentChar16 = message[currentVowelIndex2\
    \ + 12];\n            char currentChar17 = message[currentVowelIndex2 + 13];\n\
    \            char currentChar18 = message[currentVowelIndex2 + 14];\n        \
    \    char currentChar19 = message[currentVowelIndex2 + 15];\n            char\
    \ currentChar20 = message[currentVowelIndex2 + 16];\n            char currentChar21\
    \ = message[currentVowelIndex2 + 17];\n            char currentChar22 = message[currentVowelIndex2\
    \ + 18];\n            char currentChar23 = message[currentVowelIndex2 + 19];\n\
    \            char currentChar24 = message[currentVowelIndex2 + 20];\n        \
    \    char currentChar25 = message[currentVowelIndex2 + 21];\n            ", " \
    \   std::string ans = \"\";\n    for (auto &i : message) {\n        switch (i)\
    \ {\n        case 'a':\n            ans += 'A';\n            break;\n        case\
    \ 'b':\n            ans += 'B';\n            break;\n        case 'c':\n     \
    \       ans += 'C';\n            break;\n        case 'd':\n            ans +=\
    \ 'D';\n            break;\n        case 'e':\n            ans += 'E';\n     \
    \       break;\n        case 'f':\n            ans += 'F';\n            break;\n\
    \        case 'g':\n            ans += 'G';\n            break;\n        case\
    \ 'h':\n            ans += 'H';\n            break;\n        case 'i':\n     \
    \       ans += 'I';\n            break;\n        case 'j':\n            ans +=\
    \ 'J';\n            break;\n        case 'k':\n            ans += 'K';\n     \
    \       break;\n        case 'l':\n            ans += 'L';\n            break;\n\
    \        case 'm':\n            ans += 'M';\n            break;\n        case\
    \ 'n':\n            ans += 'N';\n            break;\n        case 'o':\n     \
    \       ans += 'O';\n            break;\n        case 'p':\n            ans +=\
    \ 'P';\n            break;\n        case 'q':\n            ans += 'Q';\n     \
    \       break;\n        case 'r':\n            ans += 'R';\n            break;\n\
    \        case 's':\n            ans += 'S';\n            break;\n        case\
    \ 't':\n            ans += 'T';\n            break;\n        case 'u':\n     \
    \       ans += 'U';\n            break;\n        case 'v':\n            ans +=\
    \ 'V';\n            break;\n        case 'w':\n            ans += 'W';\n     \
    \       break;\n        case 'x':\n            ans += 'X';\n            break;\n\
    \        case 'y':\n            ans += 'Y';\n            break;\n        case\
    \ 'z':\n            ans += 'Z';\n            break;\n        default:\n      \
    \      ans += i;\n        }\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += 'A';\n        }\n        else if(c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n        }\n       \
    \ else {\n            ans += c;\n        }\n    }\n    return ans;", "    std::string\
    \ encoded = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if('A' <= c && c <= 'Z') {\n            encoded.push_back(c\
    \ + ('a' - 'A'));\n        }\n        else if('a' <= c && c <= 'z') {\n      \
    \      encoded.push_back(c + ('A' - 'a'));\n        }\n        else if('0' <=\
    \ c && c <= '9') {\n            encoded.push_back(c + ('0' - '0'));\n        }\n\
    \        else {\n            encoded.push_back(c);\n        }\n    }\n    return\
    \ encoded;", "    std::string encodedMessage;\n    int vowelCount = 0;\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           vowelCount++;\n        }\n    }\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encodedMessage\
    \ += message[i];\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encodedMessage += message[i];\n        }\n        else\
    \ if (message[i] == ' ') {\n            encodedMessage += ' ';\n        }\n  \
    \      else if (message[i] == '.') {\n            encodedMessage += '.';\n   \
    \     }\n        else if (message[i] == '?') {\n            encodedMessage +=\
    \ '?';\n        }\n        else if (message[i] == '!') {\n            encodedMessage\
    \ += '!';\n        }\n        else if (message[i] == '-') {\n            encodedMessage\
    \ += '-';\n        }\n        else if (message[i] == '_') {\n            encodedMessage\
    \ += '_';\n        }\n        else if (message[i] == '*') {\n            encodedMessage\
    \ += '*';\n        }\n        else if (message[i] == '(') {\n            encodedMessage\
    \ += '(';\n        }\n        else if (message[i] == ')') {\n            encodedMessage\
    \ += ')';\n        }\n        else if (message[i] == '+') {\n            encodedMessage\
    \ += '+';\n        }\n        else if (message[i] == '=') {\n            encodedMessage\
    \ += '=';\n        }\n        else if (message[i] == '$') {\n            encodedMessage\
    \ += '$';\n        }\n        else if (message[i] == '%') {\n            encodedMessage\
    \ += '%';\n        }\n        else if (message[i] == '&') {\n            encodedMessage\
    \ += '&';\n        }\n        else if (message[i] == '#') {\n            encodedMessage\
    \ += '#';\n        }\n        else if (message[i] == '$') {\n            encodedMessage\
    \ += '$';\n        }\n        else if (message[i] == '%') {\n            encodedMessage\
    \ += '%';\n        }\n        else if (message[i] == '@') {\n            encodedMessage\
    \ += '@';\n        }\n        else if (message[i] == '!') {\n            encodedMessage\
    \ += '!';\n        }\n        else if (message[i] == '\"') {\n            encodedMessage\
    \ += '\"';\n        }\n        else if (message[i] == '<') {\n            encodedMessage\
    \ += '<';\n        }\n        else if (message[i] == '>') {\n            encodedMessage\
    \ += '>';\n        }\n        else if (message[i] == '?') {\n            encodedMessage\
    \ += '?';\n        }\n        else if (message[i] == '/') {\n            encodedMessage\
    \ += '/';\n        }\n        else if (message[i] == '\\\\') {\n            encodedMessage\
    \ += '\\\\';\n        }\n        else if (message[i] == '|') {\n            ",
  "    std::string encoded = \"\";\n    for (auto &c: message) {\n        switch (c)\
    \ {\n            case 'A':\n            case 'a':\n                encoded +=\
    \ \"a\";\n                break;\n            case 'B':\n            case 'b':\n\
    \                encoded += \"b\";\n                break;\n            case 'C':\n\
    \            case 'c':\n                encoded += \"c\";\n                break;\n\
    \            case 'D':\n            case 'd':\n                encoded += \"d\"\
    ;\n                break;\n            case 'E':\n            case 'e':\n    \
    \            encoded += \"e\";\n                break;\n            case 'F':\n\
    \            case 'f':\n                encoded += \"f\";\n                break;\n\
    \            case 'G':\n            case 'g':\n                encoded += \"g\"\
    ;\n                break;\n            case 'H':\n            case 'h':\n    \
    \            encoded += \"h\";\n                break;\n            case 'I':\n\
    \            case 'i':\n                encoded += \"i\";\n                break;\n\
    \            case 'J':\n            case 'j':\n                encoded += \"j\"\
    ;\n                break;\n            case 'K':\n            case 'k':\n    \
    \            encoded += \"k\";\n                break;\n            case 'L':\n\
    \            case 'l':\n                encoded += \"l\";\n                break;\n\
    \            case 'M':\n            case 'm':\n                encoded += \"m\"\
    ;\n                break;\n            case 'N':\n            case 'n':\n    \
    \            encoded += \"n\";\n                break;\n            case 'O':\n\
    \            case 'o':\n                encoded += \"o\";\n                break;\n\
    \            case 'P':\n            case 'p':\n                encoded += \"p\"\
    ;\n                break;\n            case 'Q':\n            case 'q':\n    \
    \            encoded += \"q\";\n                break;\n            case 'R':\n\
    \            case 'r':\n                encoded += \"r\";\n                break;\n\
    \            case 'S':\n            case 's':\n                encoded += \"s\"\
    ;\n                break;\n            case 'T':\n            case 't':\n    \
    \            encoded += \"t\";\n                break;\n            case 'U':\n\
    \            case 'u':\n                encoded += \"u\";\n                break;\n\
    \            case 'V':\n            case 'v':\n                encoded += \"v\"\
    ;\n                break;\n            case 'W':\n            case 'w':\n    \
    \            encoded += \"w\";\n                break;\n            case 'X':\n\
    \            case 'x':\n                encoded += \"x\";\n                break;\n\
    \            case 'Y':\n            case 'y':\n                encoded += \"y\"\
    ;\n                break;\n            case 'Z':\n            case 'z':\n    \
    \            encoded += \"z\";\n                break;\n            default:\n\
    \                encoded += c;\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        }\n        else {\n            ans\
    \ += 'A' + (c - 'a');\n        }\n    }\n    return ans;", "    std::string encodedMessage\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if ('a' <= c && c <= 'z') {\n            encodedMessage\
    \ += c;\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            encodedMessage += message[++i];\n        }\n\
    \        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            encodedMessage += message[++i];\n        }\n    }\n    return encodedMessage;",
  "    std::string encodedMessage;\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encodedMessage += c;\n        }\n  \
    \      else {\n            int index = c - 'a';\n            int index2 = c -\
    \ 'a';\n            encodedMessage += message[index];\n            encodedMessage\
    \ += message[index2];\n        }\n    }\n    return encodedMessage;", "    std::string\
    \ ans = \"\";\n    for (char &c : message) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            c = c + 2; // add 2 to current letter\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z') {\n            c = c - 2; // subtract 2 from current\
    \ letter\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            c = c + 2; // add 2 to current letter\n    \
    \    }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            c = c - 2; // subtract 2 from current letter\n        }\n\
    \        ans += c;\n    }\n    return ans;", "    std::string encodedMessage =\
    \ \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if ('a' <= c && c <= 'z') {\n            encodedMessage += c;\n     \
    \   } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n \
    \           encodedMessage += c + 2;\n        } else {\n            encodedMessage\
    \ += c;\n        }\n    }\n    return encodedMessage;", "    std::string encoded\
    \ = \"\";\n    for (auto &c : message) {\n        if (std::isalpha(c)) {\n   \
    \         char temp = c;\n            std::swap(temp, std::toupper(c));\n    \
    \        encoded.append(temp);\n        } else {\n            encoded.append(c);\n\
    \        }\n    }\n    return encoded;", "    std::string encodedMessage = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            encodedMessage += c;\n     \
    \   } else if (c >= 'A' && c <= 'Z') {\n            encodedMessage += c;\n   \
    \     } else if (c >= '0' && c <= '9') {\n            encodedMessage += c;\n \
    \       } else {\n            encodedMessage += ' ';\n        }\n    }\n    return\
    \ encodedMessage;", "    std::string encoded = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            encoded += c;\n        } else {\n\
    \            int index = c - 'a';\n            int index2 = c - 'a';\n       \
    \     int index3 = c - 'a';\n            int index4 = c - 'a';\n            int\
    \ index5 = c - 'a';\n            int index6 = c - 'a';\n            int index7\
    \ = c - 'a';\n            int index8 = c - 'a';\n            int index9 = c -\
    \ 'a';\n            int index10 = c - 'a';\n            int index11 = c - 'a';\n\
    \            int index12 = c - 'a';\n            int index13 = c - 'a';\n    \
    \        int index14 = c - 'a';\n            int index15 = c - 'a';\n        \
    \    int index16 = c - 'a';\n            int index17 = c - 'a';\n            int\
    \ index18 = c - 'a';\n            int index19 = c - 'a';\n            int index20\
    \ = c - 'a';\n            int index21 = c - 'a';\n            int index22 = c\
    \ - 'a';\n            int index23 = c - 'a';\n            int index24 = c - 'a';\n\
    \            int index25 = c - 'a';\n            int index26 = c - 'a';\n    \
    \        int index27 = c - 'a';\n            int index28 = c - 'a';\n        \
    \    int index29 = c - 'a';\n            int index30 = c - 'a';\n            int\
    \ index31 = c - 'a';\n            int index32 = c - 'a';\n            int index33\
    \ = c - 'a';\n            int index34 = c - 'a';\n            int index35 = c\
    \ - 'a';\n            int index36 = c - 'a';\n            int index37 = c - 'a';\n\
    \            int index38 = c - 'a';\n            int index39 = c - 'a';\n    \
    \        int index40 = c - 'a';\n            int index41 = c - 'a';\n        \
    \    int index42 = c - 'a';\n            int index43 = c - 'a';\n            int\
    \ index44 = c - 'a';\n            int index45 = c - 'a';\n            int index46\
    \ = c - 'a';\n            int index47 = c - 'a';\n            int index48 = c\
    \ - ", "    std::string encoded = message;\n    for(int i = 0; i < encoded.length();\
    \ i++) {\n        if(isalpha(encoded[i])) {\n            char c = encoded[i];\n\
    \            int index = c - 'a';\n            char next = c + 2;\n          \
    \  while(next < 'z') {\n                next = next + 1;\n            }\n    \
    \        encoded[i] = next;\n        }\n    }\n    return encoded;", "    std::string\
    \ encoded = message;\n    for(int i = 0; i < encoded.length(); i++) {\n      \
    \  if(encoded[i] == 'a' || encoded[i] == 'e' || encoded[i] == 'i' || encoded[i]\
    \ == 'o' || encoded[i] == 'u') {\n            encoded[i] = encoded[i + 1];\n \
    \       }\n    }\n    for(int i = 0; i < encoded.length(); i++) {\n        if(encoded[i]\
    \ == 'a' || encoded[i] == 'e' || encoded[i] == 'i' || encoded[i] == 'o' || encoded[i]\
    \ == 'u') {\n            encoded[i] = encoded[i + 2];\n        }\n    }\n    return\
    \ encoded;", "    std::string ans;\n    for(int i=0;i<message.length();i++){\n\
    \        char c = message[i];\n        if(c>='A' && c<='Z'){\n            ans\
    \ += c;\n        }\n        else if(c>='a' && c<='z'){\n            ans += 'A';\n\
    \        }\n        else{\n            ans += 'a';\n        }\n    }\n    return\
    \ ans;", "    std::string encodedMessage;\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char currentChar = message[i];\n        char nextChar = message[i+1];\n\
    \        if(currentChar == 'a' || currentChar == 'e' || currentChar == 'i' ||\
    \ currentChar == 'o' || currentChar == 'u' || currentChar == 'A' || currentChar\
    \ == 'E' || currentChar == 'I' || currentChar == 'O' || currentChar == 'U') {\n\
    \            encodedMessage += currentChar;\n            i++;\n        }\n   \
    \     else if(currentChar == 'b' || currentChar == 'c' || currentChar == 'd' ||\
    \ currentChar == 'f' || currentChar == 'g' || currentChar == 'h' || currentChar\
    \ == 'j' || currentChar == 'k' || currentChar == 'l' || currentChar == 'm' ||\
    \ currentChar == 'n' || currentChar == 'p' || currentChar == 'q' || currentChar\
    \ == 'r' || currentChar == 's' || currentChar == 't' || currentChar == 'v' ||\
    \ currentChar == 'w' || currentChar == 'x' || currentChar == 'y' || currentChar\
    \ == 'z') {\n            encodedMessage += nextChar;\n            i++;\n     \
    \   }\n        else if(currentChar == 'A' || currentChar == 'B' || currentChar\
    \ == 'C' || currentChar == 'D' || currentChar == 'E' || currentChar == 'F' ||\
    \ currentChar == 'G' || currentChar == 'H' || currentChar == 'I' || currentChar\
    \ == 'J' || currentChar == 'K' || currentChar == 'L' || currentChar == 'M' ||\
    \ currentChar == 'N' || currentChar == 'O' || currentChar == 'P' || currentChar\
    \ == 'Q' || currentChar == 'R' || currentChar == 'S' || currentChar == 'T' ||\
    \ currentChar == 'V' || currentChar == 'W' || currentChar == 'X' || currentChar\
    \ == 'Y' || currentChar == 'Z') {\n            encodedMessage += currentChar;\n\
    \            i++;\n        }\n        else {\n            encodedMessage += currentChar;\n\
    \        }\n    }\n    return encodedMessage;", "    std::string ans = \"\";\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += c;\n        } else {\n            ans += 'a' + message[i] - 'a';\n\
    \        }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n   \
    \     if ('A' <= c && c <= 'Z') {\n            encoded += c;\n        } else if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded\
    \ += c + 2;\n        } else {\n            encoded += c;\n        }\n    }\n \
    \   return encoded;", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'a' + message[i] - 'a';\n        }\n    }\n    return\
    \ ans;", "    std::string encodedMessage = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        char encodedChar = c;\n      \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   encodedChar = c + 2;\n        }\n        encodedMessage += encodedChar;\n\
    \    }\n    return encodedMessage;", "    std::string encodedMessage = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encodedMessage += message[i];\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] >= '0' && message[i] <= '9') {\n\
    \            encodedMessage += message[i];\n        } else if (message[i] == '.'\
    \ || message[i] == '!' || message[i] == '?') {\n            encodedMessage +=\
    \ message[i];\n        } else if (message[i] == '-') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '_') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '/') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '\\\\') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '*') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '(') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == ')') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '+') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '=') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '[') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == ']') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '%') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '&') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '@') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '#') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '$') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '^') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '&') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '*') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '(') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == ')') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '+') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '=') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '[') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == ']') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '%') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '&') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '@') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '#') {\n            encodedMessage\
    \ += message[i];\n        } else if (message[i] == '$') {\n            encodedMessage ",
  "    std::string encoded = message;\n    for (auto &c : message) {\n        if (std::isalpha(c))\
    \ {\n            std::swap(tolower(c), tolower(c));\n        }\n    }\n    for\
    \ (auto &c : message) {\n        if (std::isalpha(c)) {\n            std::transform(c.begin(),\
    \ c.end(), c.begin(), ::tolower);\n        }\n    }\n    for (auto &c : message)\
    \ {\n        if (std::isalpha(c)) {\n            std::transform(c.begin(), c.end(),\
    \ c.begin(), ::toupper);\n        }\n    }\n    for (auto &c : message) {\n  \
    \      if (std::isalpha(c)) {\n            std::transform(c.begin(), c.end(),\
    \ c.begin(), ::toupper);\n        }\n    }\n    for (auto &c : message) {\n  \
    \      if (std::isalpha(c)) {\n            std::transform(c.begin(), c.end(),\
    \ c.begin(), ::tolower);\n        }\n    }\n    return encoded;", "    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       char c = message[i];\n        if ('a' <= c && c <= 'z') {\n          \
    \  encodedMessage += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            encodedMessage += c + 2;\n        } else\
    \ {\n            encodedMessage += c;\n        }\n    }\n    return encodedMessage;",
  "    std::string encodedMessage;\n    for(int i = 0; i < message.length(); i++)\
    \ {\n        char currentChar = message[i];\n        if(currentChar >= 'a' &&\
    \ currentChar <= 'z') {\n            char nextChar = message[i+1];\n         \
    \   if(nextChar >= 'a' && nextChar <= 'z') {\n                encodedMessage +=\
    \ currentChar - 'a' + nextChar - 'a' + 2;\n            } else {\n            \
    \    encodedMessage += currentChar - 'a' + 2;\n            }\n        } else {\n\
    \            encodedMessage += currentChar;\n        }\n    }\n    return encodedMessage;",
  "    std::string encodedMessage = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char currentChar = message[i];\n        if (currentChar >= 'a'\
    \ && currentChar <= 'z') {\n            encodedMessage += currentChar - 'a' +\
    \ 'A';\n        } else if (currentChar >= 'A' && currentChar <= 'Z') {\n     \
    \       encodedMessage += currentChar - 'A' + 'a';\n        } else {\n       \
    \     encodedMessage += currentChar;\n        }\n    }\n    return encodedMessage;",
  "    std::string encoded = \"\";\n    for (auto &c : message) {\n        char temp\
    \ = c;\n        if (std::isalpha(c)) {\n            temp = std::tolower(c);\n\
    \        }\n        if (std::isupper(c)) {\n            temp = std::toupper(c);\n\
    \        }\n        if (std::islower(c)) {\n            temp = std::tolower(c);\n\
    \        }\n        encoded = encoded + temp;\n    }\n    return encoded;", " \
    \   std::string ans = \"\";\n    for (auto &c: message) {\n        ans += (c >=\
    \ 'a' && c <= 'z') ? c + ('a' - 'a' + 1) : c;\n    }\n    for (auto &c: ans) {\n\
    \        ans[ans.find(c) - 1] = (c >= 'a' && c <= 'z') ? c + ('a' - 'a' + 1) :\
    \ c;\n    }\n    return ans;", "    std::string ans = \"\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        char c = message[i];\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans += c;\n        } else if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n   \
    \     } else if (c == 'B' || c == 'C' || c == 'D' || c == 'F' || c == 'G' || c\
    \ == 'H' || c == 'J' || c == 'K' || c == 'M' || c == 'N' || c == 'P' || c == 'Q'\
    \ || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c\
    \ == 'Y' || c == 'Z') {\n            ans += 'b';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'a';\n\
    \        } else if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' ||\
    \ c == 'h' || c == 'j' || c == 'k' || c == 'm' || c == 'n' || c == 'p' || c ==\
    \ 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z') {\n            ans += 'b';\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            ans += 'a';\n        } else if (c == 'B'\
    \ || c == 'C' || c == 'D' || c == 'F' || c == 'G' || c == 'H' || c == 'J' || c\
    \ == 'K' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'V' || c == 'W' || c == 'Y') {\n            ans += 'b';\n\
    \        } else if (c == 'F' || c == 'H' || c == 'K' || c == 'N' || c == 'Q' ||\
    \ c == 'R' || c == 'T' || c == 'V' || c == 'W' || c == 'Y') {\n            ans\
    \ += 'f';\n        } else if (c == 'D' || c == 'J' || c == 'M' || c == 'P' ||\
    \ c == 'S' || c == 'X' || c == 'Z') {\n            ans += 'd';\n        } else\
    \ if (c == 'C' || c == 'B' || c == 'A' || c == 'F' || c == 'G' || c == 'H' ||\
    \ c == 'J' || c == 'K' || c == 'M' || c == 'N' || c == 'P' || c == 'Q' || c ==\
    \ 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'Y') {\n       \
    \     ans += 'c';\n        } else if (c == 'B' || c == 'C' || c == 'D' || c ==\
    \ 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'M' || c == 'N'\
    \ || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c\
    \ == 'W' || c == 'Y') {\n            ans += 'b';\n        } else if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n\
    \        } else if (c == 'F' || c == 'H' || c == 'K' || c == 'N' || c == 'Q' ||\
    \ c == 'R' || c == 'T' || c == 'V' || c == 'W' || c == 'Y') {\n            ans\
    \ += 'f';\n        } else if (c == 'D' || c == 'J' || c == 'M' || c == 'P' ||\
    \ c == 'S' || c == 'X' || c == 'Z') {\n            ans += 'd';\n        } else\
    \ if (c == '", "    std::string ans;\n    for(int i=0;i<message.length();i++){\n\
    \        if(message[i]=='a' || message[i]=='e' || message[i]=='i' || message[i]=='o'\
    \ || message[i]=='u'){\n            ans += message[i];\n        }\n        else\
    \ if(message[i]=='A' || message[i]=='E' || message[i]=='I' || message[i]=='O'\
    \ || message[i]=='U'){\n            ans += message[i];\n        }\n        else{\n\
    \            ans += 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ encodedMessage;\n    for(int i = 0; i < message.length(); i++) {\n        char\
    \ letter = message[i];\n        char encodedLetter = letter;\n        for(int\
    \ j = 0; j < 2; j++) {\n            int index = letter - 'a';\n            letter\
    \ = message[i + j];\n            encodedLetter = encodedLetter + 'a' + index;\n\
    \        }\n        encodedMessage += encodedLetter;\n    }\n    return encodedMessage;",
  "    std::string encoded = \"\";\n    for (auto &c : message) {\n        if ('A'\
    \ <= c && c <= 'Z') {\n            c += ('A' - 'a');\n        }\n        else\
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  c += 'A' - 'a';\n        }\n        encoded.append(c);\n    }\n    return encoded;",
  "    std::string encoded = \"\";\n    for (auto &c : message) {\n        switch\
    \ (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n                encoded += 'A';\n\
    \                break;\n            case 'b':\n            case 'f':\n      \
    \      case 'n':\n            case 'r':\n            case 't':\n             \
    \   encoded += 'B';\n                break;\n            case 'c':\n         \
    \   case 'd':\n            case 'm':\n            case 'p':\n            case\
    \ 's':\n                encoded += 'C';\n                break;\n            case\
    \ 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n\
    \            case 'j':\n                encoded += 'D';\n                break;\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'j':\n            case 'k':\n                encoded += 'E';\n    \
    \            break;\n            case 'g':\n            case 'h':\n          \
    \  case 'j':\n            case 'k':\n            case 'l':\n                encoded\
    \ += 'F';\n                break;\n            case 'h':\n            case 'j':\n\
    \            case 'k':\n            case 'l':\n            case 'm':\n       \
    \         encoded += 'G';\n                break;\n            case 'i':\n   \
    \         case 'j':\n            case 'k':\n            case 'l':\n          \
    \  case 'm':\n            case 'n':\n                encoded += 'H';\n       \
    \         break;\n            case 'i':\n            case 'j':\n            case\
    \ 'k':\n            case 'l':\n            case 'm':\n            case 'n':\n\
    \            case 'o':\n                encoded += 'I';\n                break;\n\
    \            case 'j':\n            case 'k':\n            case 'l':\n       \
    \     case 'm':\n            case 'n':\n            case 'o':\n            case\
    \ 'p':\n                encoded += 'J';\n                break;\n            case\
    \ 'k':\n            case 'l':\n            case 'm':\n            case 'n':\n\
    \            case 'o':\n            case 'p':\n            case 'q':\n       \
    \         encoded += 'K';\n                break;\n            case 'l':\n   \
    \         case 'm':\n            case 'n':\n            case 'o':\n          \
    \  case 'p':\n            case 'q':\n            case 'r':\n                encoded\
    \ += 'L';\n                break;\n            case 'm':\n            case 'n':\n\
    \            case 'o':\n            case 'p':\n            case 'q':\n       \
    \     case 'r':\n            case 's':\n                encoded += 'M';\n    \
    \            break;\n            case 'n':\n            case 'o':\n          \
    \  case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n\
    \            case 't':\n                encoded += 'N';\n                break;\n\
    \            case 'o':\n            case 'p':\n            case 'q':\n       \
    \     case 'r':\n            case 's':\n            case 't':\n            case\
    \ 'u':\n                encoded += 'O';\n                break;\n            case\
    \ 'p':\n            case 'q':\n            case 'r':\n            case 's':\n\
    \            case 't':\n", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto\
    \ &c : ans) {\n        if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c)\
    \ - 2] = tolower(ans[ans.find(c) - 2]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c >= 'a' && c <= 'z') {\n            ans[ans.find(c) + 2]\
    \ = toupper(ans[ans.find(c) + 2]);\n        }\n    }\n    return ans;", "    std::string\
    \ encoded;\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 'a' + 'A';\n\
    \        }\n        else if(message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded += message[i] - 'A' + 'a';\n        }\n        else {\n       \
    \     encoded += message[i];\n        }\n    }\n    return encoded;", "    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n          \
    \  encodedMessage += c + 1;\n        } else if (c >= 'A' && c <= 'Z') {\n    \
    \        encodedMessage += c + 2;\n        } else if (c >= '0' && c <= '9') {\n\
    \            encodedMessage += c;\n        }\n    }\n    return encodedMessage;",
  "    std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        }\n        else {\n            ans\
    \ += 'A' + (c - 'a');\n        }\n    }\n    return ans;", "    std::string encodedMessage;\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        encodedMessage += c;\n        }\n        else {\n            int index\
    \ = c - 'a';\n            encodedMessage += message[index];\n        }\n    }\n\
    \    return encodedMessage;", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < message.length(); i++) {\n        char c = message[i];\n        if('a' <=\
    \ c && c <= 'z') {\n            ans += c;\n        } else if('A' <= c && c <=\
    \ 'Z') {\n            ans += c;\n        } else if('0' <= c && c <= '9') {\n \
    \           ans += c;\n        } else if(c == '.') {\n            ans += '.';\n\
    \        } else if(c == '_') {\n            ans += '_';\n        } else if(c ==\
    \ '-') {\n            ans += '-';\n        } else if(c == '+') {\n           \
    \ ans += '+';\n        } else if(c == '/') {\n            ans += '/';\n      \
    \  } else if(c == '@') {\n            ans += '@';\n        } else if(c == '!')\
    \ {\n            ans += '!';\n        } else if(c == '?') {\n            ans +=\
    \ '?';\n        } else if(c == '$') {\n            ans += '$';\n        } else\
    \ if(c == '%') {\n            ans += '%';\n        } else if(c == '^') {\n   \
    \         ans += '^';\n        } else if(c == '&') {\n            ans += '&';\n\
    \        } else if(c == '*') {\n            ans += '*';\n        } else if(c ==\
    \ '(') {\n            ans += '(';\n        } else if(c == ')') {\n           \
    \ ans += ')';\n        } else if(c == '[') {\n            ans += '[';\n      \
    \  } else if(c == ']') {\n            ans += ']';\n        } else if(c == '{')\
    \ {\n            ans += '{';\n        } else if(c == '}') {\n            ans +=\
    \ '}';\n        } else if(c == '|') {\n            ans += '|';\n        } else\
    \ if(c == '~') {\n            ans += '~';\n        } else if(c == '!') {\n   \
    \         ans += '!';\n        } else if(c == '.') {\n            ans += '.';\n\
    \        } else if(c == '_') {\n            ans += '_';\n        } else if(c ==\
    \ '-') {\n            ans += '-';\n        } else if(c == '+') {\n           \
    \ ans += '+';\n        } else if(c == '/') {\n            ans += '/';\n      \
    \  } else if(c == '@') {\n            ans += '@';\n        } else if(c == '!')\
    \ {\n            ans += '!';\n        } else if(c == '?') {\n            ans +=\
    \ '?';\n", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'a' + message[i] - 'a';\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'a' + message[i] - 'a';\n        }\n    }\n    return\
    \ ans;", "    std::string encodedMessage;\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char letter = message[i];\n        if(letter >= 'a' && letter\
    \ <= 'z') {\n            letter = letter - 'a' + 'A';\n        }\n        encodedMessage\
    \ += letter;\n    }\n    return encodedMessage;", "    std::string encodedMessage;\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        char encodedChar = c;\n        for(int j = 0; j < 26; j++) {\n      \
    \      if(c == alphabet[j]) {\n                encodedChar = alphabet[j + 2];\n\
    \                break;\n            }\n        }\n        encodedMessage += encodedChar;\n\
    \    }\n    return encodedMessage;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        ans += (c >= 'a' && c <= 'z') ? c + ('a' - 'a' + 1)\
    \ : c;\n    }\n    for (auto &c : ans) {\n        ans[ans.find(c) - 1] = (c >=\
    \ 'a' && c <= 'z') ? c + ('a' - 'a' + 1) : c;\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if ('a' <= c && c <= 'z') {\n            ans += c;\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans += 'a';\n        }\n        else if (c == 'B' ||\
    \ c == 'F' || c == 'J' || c == 'M' || c == 'O' || c == 'Q' || c == 'S' || c ==\
    \ 'U') {\n            ans += 'b';\n        }\n        else if (c == 'C' || c ==\
    \ 'G' || c == 'K' || c == 'N' || c == 'P' || c == 'R' || c == 'T' || c == 'V'\
    \ || c == 'W' || c == 'Y') {\n            ans += 'c';\n        }\n        else\
    \ if (c == 'D' || c == 'H' || c == 'J' || c == 'K' || c == 'N' || c == 'P' ||\
    \ c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c ==\
    \ 'Y') {\n            ans += 'd';\n        }\n        else if (c == 'E' || c ==\
    \ 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'N' || c == 'P'\
    \ || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c\
    \ == 'Y') {\n            ans += 'e';\n        }\n        else if (c == 'F' ||\
    \ c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'N' || c == 'P' || c ==\
    \ 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'Y')\
    \ {\n            ans += 'f';\n        }\n        else if (c == 'G' || c == 'H'\
    \ || c == 'J' || c == 'K' || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c\
    \ == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'Y') {\n            ans +=\
    \ 'g';\n        }\n        else if (c == 'H' || c == 'J' || c == 'K' || c == 'N'\
    \ || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c\
    \ == 'W' || c == 'Y') {\n            ans += 'h';\n        }\n        else if (c\
    \ == 'I' || c == 'J' || c == 'K' || c == 'N' || c == 'P' || c == 'Q' || c", " \
    \   std::string encodedMessage = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            encodedMessage += c;\n        } else if (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n            encodedMessage += c + 2;\n\
    \        } else {\n            encodedMessage += c;\n        }\n    }\n    return\
    \ encodedMessage;", "    std::string encodedMessage = \"\";\n    for (int i =\
    \ 0; i < message.length(); i++) {\n        char c = message[i];\n        if (c\
    \ >= 'a' && c <= 'z') {\n            encodedMessage += c;\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            encodedMessage += c;\n        } else if (c\
    \ >= '0' && c <= '9') {\n            encodedMessage += c;\n        } else {\n\
    \            encodedMessage += tolower(c);\n        }\n    }\n    for (int i =\
    \ 0; i < encodedMessage.length(); i++) {\n        char c = encodedMessage[i];\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         encodedMessage[i] = 'a';\n        } else if (c == 'b' || c == 'c' ||\
    \ c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c ==\
    \ 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n\
    \            encodedMessage[i] = 'b';\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            encodedMessage[i] = 'A';\n\
    \        } else if (c == 'B' || c == 'C' || c == 'D' || c == 'F' || c == 'G' ||\
    \ c == 'H' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c ==\
    \ 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W'\
    \ || c == 'X' || c == 'Y' || c == 'Z') {\n            encodedMessage[i] = 'B';\n\
    \        } else if (c == '0' || c == '1' || c == '2' || c == '3' || c == '4' ||\
    \ c == '5' || c == '6' || c == '7' || c == '8' || c == '9') {\n            encodedMessage[i]\
    \ = '0';\n        }\n    }\n    return encodedMessage;", "    std::string ans\
    \ = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if ('a' <= c && c <= 'z') {\n            ans += c;\n  \
    \      } else {\n            ans += 'a' + (c - 'a' + 1) % 2 + 'a';\n        }\n\
    \    }\n    return ans;", "    std::string encodedMessage;\n    int vowelCount\
    \ = 0;\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        vowelCount++;\n        }\n    }\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            char nextVowel = message[vowelCount\
    \ + 1];\n            encodedMessage += nextVowel;\n            vowelCount++;\n\
    \        }\n    }\n    return encodedMessage;", "    std::string ans;\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ 'A';\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans += 'a';\n        }\n        else {\n       \
    \     ans += c;\n        }\n    }\n    return ans;", "    std::string encoded\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        encoded += c;\n        } else {\n            char nextLetter = message[(i\
    \ + 2) % message.length()];\n            char nextVowel = message[(i + 1) % message.length()];\n\
    \            char nextVowel2 = message[(i + 3) % message.length()];\n        \
    \    char nextVowel3 = message[(i + 4) % message.length()];\n            char\
    \ nextVowel4 = message[(i + 5) % message.length()];\n            char nextVowel5\
    \ = message[(i + 6) % message.length()];\n            char nextVowel6 = message[(i\
    \ + 7) % message.length()];\n            char nextVowel7 = message[(i + 8) % message.length()];\n\
    \            char nextVowel8 = message[(i + 9) % message.length()];\n        \
    \    char nextVowel9 = message[(i + 10) % message.length()];\n            char\
    \ nextVowel10 = message[(i + 11) % message.length()];\n            char nextVowel11\
    \ = message[(i + 12) % message.length()];\n            char nextVowel12 = message[(i\
    \ + 13) % message.length()];\n            char nextVowel13 = message[(i + 14)\
    \ % message.length()];\n            char nextVowel14 = message[(i + 15) % message.length()];\n\
    \            char nextVowel15 = message[(i + 16) % message.length()];\n      \
    \      char nextVowel16 = message[(i + 17) % message.length()];\n            char\
    \ nextVowel17 = message[(i + 18) % message.length()];\n            char nextVowel18\
    \ = message[(i + 19) % message.length()];\n            char nextVowel19 = message[(i\
    \ + 20) % message.length()];\n            char nextVowel20 = message[(i + 21)\
    \ % message.length()];\n            char nextVowel21 = message[(i + 22) % message.length()];\n\
    \            char nextVowel22 = message[(i + 23) % message.length()];\n      \
    \      char nextVowel23 = message[(i + 24) % message.length()];\n            char\
    \ nextVowel24 = message[(i + 25) % message.length()];\n            char nextVowel25\
    \ = message[(i + 26) % message.length()];\n            char nextVowel26 = message[(i",
  "    std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else if(c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans +=\
    \ c;\n        }\n        else {\n            ans += 'a' + message[i] - 'a';\n\
    \        }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for\
    \ (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] >= '0' && message[i] <= '9') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] == '.' || message[i]\
    \ == '!' || message[i] == '?') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] == '_') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '-') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '_') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '.' || message[i] == '!' || message[i]\
    \ == '?') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '_') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '-') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '_') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '!' || message[i] == '?') {\n            encoded +=\
    \ message[i];\n        }\n        else if (message[i] == '_') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] == '-') {\n         \
    \   encoded += message[i];\n        }\n        else if (message[i] == '_') {\n\
    \            encoded += message[i];\n        }\n        else if (message[i] ==\
    \ '.' || message[i] == '!' || message[i] == '?') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '_') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '-') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '_') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '.' || message[i] == '!' || message[i]\
    \ == '?') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '_') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '-') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '_') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '!' || message[i] == '?') {\n            encoded +=\
    \ message[i];\n        }\n        else if (message[i] == '_') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] == '-') {\n         \
    \   encoded += message[i];\n        }\n        else if (message[i] == '_') {\n\
    \            encoded += message[i];\n        }\n        else if (message[i] ==\
    \ '.' || message[i] == '!' || message[i]", "    std::string encoded = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        char e = c;\n        if (c >= 'a' && c <= 'z') {\n            e = c +\
    \ 2;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n            e = c +\
    \ 2;\n        }\n        else if (c >= '0' && c <= '9') {\n            e = c +\
    \ 1;\n        }\n        encoded = encoded + e;\n    }\n    return encoded;",
  "    std::string encoded = message;\n    for(int i = 0; i < encoded.length(); i++)\
    \ {\n        if(isalpha(encoded[i])) {\n            char c = encoded[i];\n   \
    \         int index = tolower(c) - 'a';\n            int index2 = tolower(c) -\
    \ 'a';\n            int index3 = tolower(c) - 'a';\n            int index4 = tolower(c)\
    \ - 'a';\n            int index5 = tolower(c) - 'a';\n            int index6 =\
    \ tolower(c) - 'a';\n            int index7 = tolower(c) - 'a';\n            int\
    \ index8 = tolower(c) - 'a';\n            int index9 = tolower(c) - 'a';\n   \
    \         int index10 = tolower(c) - 'a';\n            int index11 = tolower(c)\
    \ - 'a';\n            int index12 = tolower(c) - 'a';\n            int index13\
    \ = tolower(c) - 'a';\n            int index14 = tolower(c) - 'a';\n         \
    \   int index15 = tolower(c) - 'a';\n            int index16 = tolower(c) - 'a';\n\
    \            int index17 = tolower(c) - 'a';\n            int index18 = tolower(c)\
    \ - 'a';\n            int index19 = tolower(c) - 'a';\n            int index20\
    \ = tolower(c) - 'a';\n            int index21 = tolower(c) - 'a';\n         \
    \   int index22 = tolower(c) - 'a';\n            int index23 = tolower(c) - 'a';\n\
    \            int index24 = tolower(c) - 'a';\n            int index25 = tolower(c)\
    \ - 'a';\n            int index26 = tolower(c) - 'a';\n            int index27\
    \ = tolower(c) - 'a';\n            int index28 = tolower(c) - 'a';\n         \
    \   int index29 = tolower(c) - 'a';\n            int index30 = tolower(c) - 'a';\n\
    \            int index31 = tolower(c) - 'a';\n            int index32 = tolower(c)\
    \ - 'a';\n            int index33 = tolower(c) - 'a';\n            int index34\
    \ = tolower(c) - 'a';\n            int index35 = tolower(c) - 'a';\n         \
    \   int index36 = tolower(c) - 'a';\n            int index37 = tolower(c) - 'a';\n\
    \            int index38 = tolower(c) - 'a';\n            int index39 = tolower(c)\
    \ - 'a';\n            int index40 = tolower(c) - 'a';\n            ", "    std::string\
    \ ans;\n    for(int i=0;i<message.length();i++){\n        if(message[i]=='a' ||\
    \ message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u'){\n\
    \            ans += message[i];\n        }\n        else if(message[i]=='A' ||\
    \ message[i]=='E' || message[i]=='I' || message[i]=='O' || message[i]=='U'){\n\
    \            ans += message[i];\n        }\n        else if(message[i]=='b' ||\
    \ message[i]=='c' || message[i]=='d' || message[i]=='f' || message[i]=='g' ||\
    \ message[i]=='h' || message[i]=='j' || message[i]=='k' || message[i]=='l' ||\
    \ message[i]=='m' || message[i]=='n' || message[i]=='p' || message[i]=='q' ||\
    \ message[i]=='r' || message[i]=='s' || message[i]=='t' || message[i]=='v' ||\
    \ message[i]=='w' || message[i]=='x' || message[i]=='y' || message[i]=='z'){\n\
    \            ans += message[i];\n        }\n        else if(message[i]=='B' ||\
    \ message[i]=='C' || message[i]=='D' || message[i]=='F' || message[i]=='G' ||\
    \ message[i]=='H' || message[i]=='J' || message[i]=='K' || message[i]=='L' ||\
    \ message[i]=='M' || message[i]=='N' || message[i]=='P' || message[i]=='Q' ||\
    \ message[i]=='R' || message[i]=='S' || message[i]=='T' || message[i]=='V' ||\
    \ message[i]=='W' || message[i]=='X' || message[i]=='Y' || message[i]=='Z'){\n\
    \            ans += message[i];\n        }\n        else if(message[i]=='0' ||\
    \ message[i]=='1' || message[i]=='2' || message[i]=='3' || message[i]=='4' ||\
    \ message[i]=='5' || message[i]=='6' || message[i]=='7' || message[i]=='8' ||\
    \ message[i]=='9'){\n            ans += message[i];\n        }\n        else if(message[i]=='B'\
    \ || message[i]=='C' || message[i]=='D' || message[i]=='F' || message[i]=='G'\
    \ || message[i]=='H' || message[i]=='J' || message[i]=='K' || message[i]=='L'\
    \ || message[i]=='M' || message[i]=='N' || message[i]=='P' || message[i]=='Q'\
    \ || message[i]=='R' || message[i]=='S' || message[i]=='T' || message[i]=='V'\
    \ || message[i]=='W' || message[i]=='X' || message[i]=='Y' || message[i]=='Z'){\n\
    \            ans += message[i];\n        }\n        else if(message[i]=='a' ||\
    \ message[i]=='", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;",
  "    std::string encoded;\n    for(int i = 0; i < message.length(); i++) {\n   \
    \     if(message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i];\n\
    \        }\n        else if(message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded += message[i];\n        }\n        else if(message[i] >= '0' &&\
    \ message[i] <= '9') {\n            encoded += message[i];\n        }\n      \
    \  else if(message[i] == '.' || message[i] == '!' || message[i] == '?') {\n  \
    \          encoded += message[i];\n        }\n        else {\n            int\
    \ index = message[i] - 'a';\n            int index2 = message[i] - 'a';\n    \
    \        int index3 = message[i] - 'a';\n            int index4 = message[i] -\
    \ 'a';\n            int index5 = message[i] - 'a';\n            int index6 = message[i]\
    \ - 'a';\n            int index7 = message[i] - 'a';\n            int index8 =\
    \ message[i] - 'a';\n            int index9 = message[i] - 'a';\n            int\
    \ index10 = message[i] - 'a';\n            int index11 = message[i] - 'a';\n \
    \           int index12 = message[i] - 'a';\n            int index13 = message[i]\
    \ - 'a';\n            int index14 = message[i] - 'a';\n            int index15\
    \ = message[i] - 'a';\n            int index16 = message[i] - 'a';\n         \
    \   int index17 = message[i] - 'a';\n            int index18 = message[i] - 'a';\n\
    \            int index19 = message[i] - 'a';\n            int index20 = message[i]\
    \ - 'a';\n            int index21 = message[i] - 'a';\n            int index22\
    \ = message[i] - 'a';\n            int index23 = message[i] - 'a';\n         \
    \   int index24 = message[i] - 'a';\n            int index25 = message[i] - 'a';\n\
    \            int index26 = message[i] - 'a';\n            int index27 = message[i]\
    \ - 'a';\n            int index28 = message[i] - 'a';\n            int index29\
    \ = message[i] - 'a';\n            int index30 = message[i] - 'a';\n         \
    \   int index31 = message[i] - 'a';\n            int index32 = message[i] - 'a';\n\
    \            int index33 = message[i] - 'a';\n            int index34 = message[i]\
    \ - 'a';\n            int index35 = message[i] - ", "    std::string encoded =\
    \ message;\n    for (int i = 0; i < encoded.size(); i++) {\n        char c = encoded[i];\n\
    \        char e = encoded[i + 1];\n        if (e == 'a' || e == 'e' || e == 'i'\
    \ || e == 'o' || e == 'u') {\n            encoded[i] = 'A';\n            encoded[i\
    \ + 1] = e;\n        }\n        else if (e == 'A' || e == 'E' || e == 'I' || e\
    \ == 'O' || e == 'U') {\n            encoded[i] = e;\n            encoded[i +\
    \ 1] = 'a';\n        }\n    }\n    return encoded;", "    std::string ans = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if ('a' <= c && c <= 'z') {\n            ans += c;\n        } else if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans\
    \ += 'a';\n        } else if (c == 'B' || c == 'F' || c == 'J' || c == 'M' ||\
    \ c == 'O' || c == 'Q' || c == 'S' || c == 'T' || c == 'U') {\n            ans\
    \ += 'b';\n        } else if (c == 'C' || c == 'G' || c == 'K' || c == 'N' ||\
    \ c == 'P' || c == 'R' || c == 'V' || c == 'W' || c == 'Y' || c == 'Z') {\n  \
    \          ans += 'c';\n        } else if (c == 'D' || c == 'H' || c == 'J' ||\
    \ c == 'N' || c == 'Q' || c == 'S' || c == 'T' || c == 'X' || c == 'Z') {\n  \
    \          ans += 'd';\n        } else if (c == 'E' || c == 'F' || c == 'G' ||\
    \ c == 'H' || c == 'K' || c == 'N' || c == 'P' || c == 'R' || c == 'V' || c ==\
    \ 'W' || c == 'Y' || c == 'Z') {\n            ans += 'e';\n        } else if (c\
    \ == 'F' || c == 'G' || c == 'H' || c == 'J' || c == 'K' || c == 'N' || c == 'P'\
    \ || c == 'R' || c == 'V' || c == 'W' || c == 'Y' || c == 'Z') {\n           \
    \ ans += 'f';\n        } else if (c == 'G' || c == 'H' || c == 'J' || c == 'K'\
    \ || c == 'N' || c == 'P' || c == 'R' || c == 'V' || c == 'W' || c == 'Y' || c\
    \ == 'Z') {\n            ans += 'g';\n        } else if (c == 'H' || c == 'I'\
    \ || c == 'J' || c == 'K' || c == 'N' || c == 'P' || c == 'R' || c == 'V' || c\
    \ == 'W' || c == 'Y' || c == 'Z') {\n            ans += 'h';\n        } else if\
    \ (c == 'I' || c == 'J' || c == 'K' || c == 'N' || c == 'P' || c == 'R' || c ==\
    \ 'V' || c == 'W' || c == 'Y' || c == 'Z') {\n            ans += 'i';\n      \
    \  } else if (c == 'J' || c == 'K' || c == 'N' || c == 'P' || c == 'R' || c ==\
    \ 'V' || c == 'W' || c == 'Y' || c == 'Z') {\n            ", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] >= 'A' && message[i] <= 'Z') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == 'a' || message[i] ==\
    \ 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n    \
    \        ans += message[i] + 2;\n        }\n        else if (message[i] == 'A'\
    \ || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U') {\n            ans += message[i] + 2;\n        }\n    }\n    return\
    \ ans;", "    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i]\
    \ == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i]\
    \ == 'O' || message[i] == 'U') {\n            encoded += message[i];\n       \
    \ }\n        else {\n            int index = message[i] - 'a';\n            int\
    \ index2 = message[i] - 'a';\n            int index3 = message[i] - 'a';\n   \
    \         int index4 = message[i] - 'a';\n            int index5 = message[i]\
    \ - 'a';\n            int index6 = message[i] - 'a';\n            int index7 =\
    \ message[i] - 'a';\n            int index8 = message[i] - 'a';\n            int\
    \ index9 = message[i] - 'a';\n            int index10 = message[i] - 'a';\n  \
    \          int index11 = message[i] - 'a';\n            int index12 = message[i]\
    \ - 'a';\n            int index13 = message[i] - 'a';\n            int index14\
    \ = message[i] - 'a';\n            int index15 = message[i] - 'a';\n         \
    \   int index16 = message[i] - 'a';\n            int index17 = message[i] - 'a';\n\
    \            int index18 = message[i] - 'a';\n            int index19 = message[i]\
    \ - 'a';\n            int index20 = message[i] - 'a';\n            int index21\
    \ = message[i] - 'a';\n            int index22 = message[i] - 'a';\n         \
    \   int index23 = message[i] - 'a';\n            int index24 = message[i] - 'a';\n\
    \            int index25 = message[i] - 'a';\n            int index26 = message[i]\
    \ - 'a';\n            int index27 = message[i] - 'a';\n            int index28\
    \ = message[i] - 'a';\n            int index29 = message[i] - 'a';\n         \
    \   int index30 = message[i] - 'a';\n            int index31 = message[i] - 'a';\n\
    \            int index32 = message[i] - 'a';\n            int index33 = message[i]\
    \ - 'a';\n            int index34 = message[i] - 'a", "    std::string ans = \"\
    \";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] >= 'A' && message[i] <= 'Z') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == 'a' || message[i] ==\
    \ 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'y') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U' || message[i] == 'Y') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?' || message[i] == '.'\
    \ || message[i] == ',') {\n            ans += message[i];\n        }\n       \
    \ else if (message[i] == '!' || message[i] == '?' || message[i] == '.' || message[i]\
    \ == ',') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '?' || message[i] == '.' || message[i] == ',') {\n \
    \           ans += message[i];\n        }\n        else if (message[i] == '!'\
    \ || message[i] == '?' || message[i] == '.' || message[i] == ',') {\n        \
    \    ans += message[i];\n        }\n        else if (message[i] == '!' || message[i]\
    \ == '?' || message[i] == '.' || message[i] == ',') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '!' || message[i] == '?' || message[i]\
    \ == '.' || message[i] == ',') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?' || message[i] == '.'\
    \ || message[i] == ',') {\n            ans += message[i];\n        }\n       \
    \ else if (message[i] == '!' || message[i] == '?' || message[i] == '.' || message[i]\
    \ == ',') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '?' || message[i] == '.' || message[i] == ',') {\n \
    \           ans += message[i];\n        }\n        else if (message[i] == '!'\
    \ || message[i] == '?' || message[i] == '.' || message[i] == ',') {\n        \
    \    ans += message[i];\n        }\n        else if (message[i] == '!' || message[i]\
    \ == '?' || message[i] == '.' || message[i] == ',') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '!' || message[i] == '?' || message[i]\
    \ == '.' || message[i] == ',') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?' || message[i] == '.'\
    \ || message[i] == ',') {\n            ans += message[i];\n", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            ans += message[i];\n        }\n\
    \        else if(message[i] >= 'A' && message[i] <= 'Z') {\n            ans +=\
    \ message[i];\n        }\n        else if(message[i] == 'a' || message[i] == 'e'\
    \ || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'y') {\n            ans += message[i];\n        }\n        else if(message[i]\
    \ == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i]\
    \ == 'U' || message[i] == 'Y') {\n            ans += message[i];\n        }\n\
    \        else if(message[i] == '2') {\n            ans += message[i];\n      \
    \  }\n        else if(message[i] == '3') {\n            ans += message[i];\n \
    \       }\n        else if(message[i] == '4') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '5') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '6') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '7') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '8') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '9') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '0') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '1') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '2') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '3') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '4') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '5') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '6') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '7') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '8') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '9') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '0') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '1') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '2') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '3') {\n            ans += message[i];\n\
    \        }\n        else if(message[i] == '4') {\n            ans += message[i];\n\
    \        }\n        else if(message", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            ans += message[i];\n        }\n    }\n    for(int i =\
    \ 0; i < ans.length(); i++) {\n        if(ans[i] >= 'a' && ans[i] <= 'z') {\n\
    \            ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for(int i = 0;\
    \ i < ans.length(); i++) {\n        if(ans[i] == 'a' || ans[i] == 'e' || ans[i]\
    \ == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[i] - 'a'\
    \ + 'A';\n        }\n    }\n    return ans;", "    std::string encoded;\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            char\
    \ nextC = message[i+1];\n            if(c == 'a' && nextC == 'e') {\n        \
    \        encoded += \"AE\";\n            } else if(c == 'a' && nextC == 'i') {\n\
    \                encoded += \"AI\";\n            } else if(c == 'a' && nextC ==\
    \ 'o') {\n                encoded += \"AO\";\n            } else if(c == 'a' &&\
    \ nextC == 'u') {\n                encoded += \"AU\";\n            } else if(c\
    \ == 'e' && nextC == 'i') {\n                encoded += \"EI\";\n            }\
    \ else if(c == 'e' && nextC == 'o') {\n                encoded += \"EO\";\n  \
    \          } else if(c == 'e' && nextC == 'u') {\n                encoded += \"\
    EU\";\n            } else if(c == 'i' && nextC == 'o') {\n                encoded\
    \ += \"IO\";\n            } else if(c == 'i' && nextC == 'u') {\n            \
    \    encoded += \"IU\";\n            } else if(c == 'o' && nextC == 'u') {\n \
    \               encoded += \"OU\";\n            } else if(c == 'u' && nextC ==\
    \ 'u') {\n                encoded += \"UU\";\n            }\n        } else {\n\
    \            encoded += c;\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += c;\n        }\n\
    \        else {\n            ans += 'a' + c - 'a';\n        }\n    }\n    return\
    \ ans;", "    std::string encoded = message;\n    for (int i = 0; i < encoded.size();\
    \ i++) {\n        char c = encoded[i];\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            encoded[i] = 'A';\n        }\
    \ else if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'h'\
    \ || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c\
    \ == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x'\
    \ || c == 'y' || c == 'z') {\n            encoded[i] = 'B';\n        } else if\
    \ (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c ==\
    \ 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L' || c == 'M'\
    \ || c == 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c\
    \ == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n            encoded[i]\
    \ = 'a';\n        } else if (c == 'a' || c == 'b' || c == 'c' || c == 'd' || c\
    \ == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k'\
    \ || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c\
    \ == 's' || c == 't' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z')\
    \ {\n            encoded[i] = 'b';\n        } else if (c == 'A' || c == 'B' ||\
    \ c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c ==\
    \ 'I' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'P'\
    \ || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c\
    \ == 'X' || c == 'Y' || c == 'Z') {\n            encoded[i] = 'c';\n        }\
    \ else if (c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c\
    \ == 'm' || c == '", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto\
    \ &c : ans) {\n        switch (c) {\n            case 'A':\n            case 'E':\n\
    \            case 'I':\n            case 'O':\n            case 'U':\n       \
    \         ans[ans.find(c) + 2] = 'A';\n                break;\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n                ans[ans.find(c) + 2] = 'A';\n        \
    \        break;\n            case 'B':\n            case 'F':\n            case\
    \ 'I':\n            case 'L':\n            case 'N':\n            case 'O':\n\
    \            case 'U':\n                ans[ans.find(c) + 2] = 'B';\n        \
    \        break;\n            case 'b':\n            case 'f':\n            case\
    \ 'i':\n            case 'l':\n            case 'n':\n            case 'o':\n\
    \            case 'u':\n                ans[ans.find(c) + 2] = 'B';\n        \
    \        break;\n            case 'C':\n            case 'G':\n            case\
    \ 'J':\n            case 'P':\n            case 'S':\n            case 'T':\n\
    \            case 'W':\n                ans[ans.find(c) + 2] = 'C';\n        \
    \        break;\n            case 'c':\n            case 'g':\n            case\
    \ 'j':\n            case 'p':\n            case 's':\n            case 't':\n\
    \            case 'w':\n                ans[ans.find(c) + 2] = 'C';\n        \
    \        break;\n            case 'D':\n            case 'H':\n            case\
    \ 'K':\n            case 'P':\n            case 'T':\n            case 'V':\n\
    \                ans[ans.find(c) + 2] = 'D';\n                break;\n       \
    \     case 'd':\n            case 'h':\n            case 'k':\n            case\
    \ 'p':\n            case 't':\n            case 'v':\n                ans[ans.find(c)\
    \ + 2] = 'D';\n                break;\n            case 'E':\n            case\
    \ 'J':\n            case 'R':\n            case 'S':\n            case 'T':\n\
    \            case 'W':\n                ans[ans.find(c) + 2] = 'E';\n        \
    \        break;\n            case 'e':\n            case 'j':\n            case\
    \ 'r':\n            case 's':\n            case 't':\n            case 'w':\n\
    \                ans[ans.find(c) + 2] = 'E';\n                break;\n       \
    \     case 'F':\n            case 'L':\n            case 'N':\n            case\
    \ 'O':\n            case 'U':\n                ans[ans.find(c) + 2] = 'F';\n \
    \               break;\n            case 'f':\n            case 'l':\n       \
    \     case 'n':\n            case 'o':\n            case 'u':\n              \
    \  ans[ans.find(c) + 2] = 'F';\n                break;\n            case 'G",
  "    std::string encoded = message;\n    for (int i = 0; i < encoded.size(); i++)\
    \ {\n        char c = encoded[i];\n        char d = encoded[i + 1];\n        char\
    \ e = encoded[i + 2];\n        char f = encoded[i + 3];\n        char g = encoded[i\
    \ + 4];\n        char h = encoded[i + 5];\n        char i = encoded[i + 6];\n\
    \        char j = encoded[i + 7];\n        char k = encoded[i + 8];\n        char\
    \ l = encoded[i + 9];\n        char m = encoded[i + 10];\n        char n = encoded[i\
    \ + 11];\n        char o = encoded[i + 12];\n        char p = encoded[i + 13];\n\
    \        char q = encoded[i + 14];\n        char r = encoded[i + 15];\n      \
    \  char s = encoded[i + 16];\n        char t = encoded[i + 17];\n        char\
    \ u = encoded[i + 18];\n        char v = encoded[i + 19];\n        char w = encoded[i\
    \ + 20];\n        char x = encoded[i + 21];\n        char y = encoded[i + 22];\n\
    \        char z = encoded[i + 23];\n        char A = encoded[i + 24];\n      \
    \  char B = encoded[i + 25];\n        char C = encoded[i + 26];\n        char\
    \ D = encoded[i + 27];\n        char E = encoded[i + 28];\n        char F = encoded[i\
    \ + 29];\n        char G = encoded[i + 30];\n        char H = encoded[i + 31];\n\
    \        char I = encoded[i + 32];\n        char J = encoded[i + 33];\n      \
    \  char K = encoded[i + 34];\n        char L = encoded[i + 35];\n        char\
    \ M = encoded[i + 36];\n        char N = encoded[i + 37];\n        char O = encoded[i\
    \ + 38];\n        char P = encoded[i + 39];\n        char Q = encoded[i + 40];\n\
    \        char R = encoded[i + 41];\n        char S = encoded[i + 42];\n      \
    \  char T = encoded[i + 43];\n        char U = encoded[i + 44];\n        char\
    \ V = encoded[i + 45];\n        char W = encoded[i + 46];\n        char X = encoded[i\
    \ + 47];\n        char Y = encoded[i + 48];\n        char Z = encoded[i + 49];\n\
    \        char a = encoded[i + 50];\n        char b = encoded[i + 51];\n      \
    \  char c = encoded[i + 52];\n        char d = encoded[i + 53];\n        char\
    \ e = encoded[i + 54];\n        char f = encoded[i + 55];\n        char g = encoded[i\
    \ + 56];\n        char h = encoded[i + 57];\n        char i = encoded[i + 58];\n\
    \        char j = encoded[i + 59];\n        char k = encoded[i + 60];\n", "  \
    \  std::string encoded = message;\n    for (int i = 0; i < encoded.size(); i++)\
    \ {\n        char c = encoded[i];\n        if ('a' <= c && c <= 'z') {\n     \
    \       encoded[i] = 'A';\n        }\n        if ('A' <= c && c <= 'Z') {\n  \
    \          encoded[i] = 'a';\n        }\n        if ('0' <= c && c <= '9') {\n\
    \            encoded[i] = '0';\n        }\n    }\n    for (int i = 0; i < encoded.size();\
    \ i++) {\n        char c = encoded[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            encoded[i] = 'a';\n        }\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded[i] = 'A';\n        }\n        if ('0' <= c && c <= '9') {\n\
    \            encoded[i] = '0';\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            ans += c;\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            ans += c + 1;\n     \
    \   } else if (c >= '0' && c <= '9') {\n            ans += c + 2;\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            ans[i] = c - 'a' + 1;\n    \
    \    } else if (c >= 'A' && c <= 'Z') {\n            ans[i] = c - 'A' + 1;\n \
    \       } else if (c >= '0' && c <= '9') {\n            ans[i] = c - '0' + 2;\n\
    \        }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        char\
    \ e = c;\n        for(int j = 0; j < 2; j++) {\n            e = tolower(e);\n\
    \        }\n        for(int j = 0; j < 26; j++) {\n            if(c == tolower(static_cast<char>(j)))\
    \ {\n                e = static_cast<char>(j);\n                break;\n     \
    \       }\n        }\n        encoded += e;\n    }\n    return encoded;", "  \
    \  std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'a';\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[i] = ans[i + 1];\n        }\n  \
    \  }\n    return ans;", "    std::string encoded = \"\";\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            encoded += message[i] - 'a' + 'A';\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] - 'A' + 'a';\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;", "    std::string encoded = message;\n    for(auto &c: encoded)\n\
    \    {\n        if(isalpha(c))\n        {\n            char temp = c;\n      \
    \      int index = c - 'a';\n            int index2 = c - 'a';\n            while(index2\
    \ < 26)\n            {\n                index2++;\n            }\n           \
    \ char temp2 = encoded.at(index2);\n            encoded.replace(index2, index2\
    \ + 1, temp2);\n            encoded.replace(index, index + 1, temp);\n       \
    \ }\n    }\n    return encoded;", "    std::string encodedMessage = \"\";\n  \
    \  for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            encodedMessage += c;\n     \
    \   } else if (c >= 'A' && c <= 'Z') {\n            encodedMessage += c;\n   \
    \     } else if (c >= '0' && c <= '9') {\n            encodedMessage += c;\n \
    \       } else if (c == '.') {\n            encodedMessage += c;\n        } else\
    \ if (c == '_') {\n            encodedMessage += c;\n        } else if (c == '-')\
    \ {\n            encodedMessage += c;\n        } else if (c == '+') {\n      \
    \      encodedMessage += c;\n        } else if (c == '/') {\n            encodedMessage\
    \ += c;\n        } else if (c == '(') {\n            encodedMessage += c;\n  \
    \      } else if (c == ')') {\n            encodedMessage += c;\n        } else\
    \ if (c == '[') {\n            encodedMessage += c;\n        } else if (c == ']')\
    \ {\n            encodedMessage += c;\n        } else if (c == '{') {\n      \
    \      encodedMessage += c;\n        } else if (c == '}') {\n            encodedMessage\
    \ += c;\n        } else if (c == '%') {\n            encodedMessage += c;\n  \
    \      } else if (c == '!') {\n            encodedMessage += c;\n        } else\
    \ if (c == '@') {\n            encodedMessage += c;\n        } else if (c == '#')\
    \ {\n            encodedMessage += c;\n        } else if (c == '$') {\n      \
    \      encodedMessage += c;\n        } else if (c == '%') {\n            encodedMessage\
    \ += c;\n        } else if (c == '^') {\n            encodedMessage += c;\n  \
    \      } else if (c == '&') {\n            encodedMessage += c;\n        } else\
    \ if (c == '*') {\n            encodedMessage += c;\n        } else if (c == '(')\
    \ {\n            encodedMessage += c;\n        } else if (c == ')') {\n      \
    \      encodedMessage += c;\n        } else if (c == '[') {\n            encodedMessage\
    \ += c;\n        } else if (c == ']') {\n            encodedMessage += c;\n  \
    \      } else if (c == '{') {\n            encodedMessage += c;\n        } else\
    \ if (c == '}') {\n            encodedMessage += c;\n        } else if (c == '<')\
    \ {\n            encodedMessage += c;\n        } else if (c == '>') {\n      \
    \      encodedMessage += c;\n        } else if (c == '?') {\n            encodedMessage\
    \ += c;\n        } else if (c == '!') {\n            encodedMessage += c;\n  \
    \      } else if (c == '|') {\n            encodedMessage += c;\n        } else\
    \ if (c == '\\\\') {\n            encodedMessage += c;\n        } else if (c ==\
    \ '\"') {\n            encodedMessage += c;\n        } else if (c == '\\'') {\n\
    \            encodedMessage += c;\n        } else if (c == '~') {\n          \
    \  encodedMessage += c;\n        } else if (c == '`') {\n            encodedMessage\
    \ += c;\n        } else if (c == '-') {\n            encodedMessage += ", "  \
    \  std::string encoded = message;\n    for (int i = 0; i < encoded.size(); i++)\
    \ {\n        char c = encoded[i];\n        if (c >= 'a' && c <= 'z') {\n     \
    \       encoded[i] = c + 2;\n        } else if (c >= 'A' && c <= 'Z') {\n    \
    \        encoded[i] = c + 1;\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        }\n        else {\n            ans\
    \ += 'a' + message[i] - 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (c >= 'a' && c <=\
    \ 'z') ? c : ((c >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c + 2 : c));\n\
    \    }\n    return ans;", "    std::string encoded = \"\";\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <=\
    \ 'z') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] >= '0' && message[i] <= '9') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] == '.') {\n         \
    \   encoded += message[i];\n        }\n        else if (message[i] == '!') {\n\
    \            encoded += message[i];\n        }\n        else if (message[i] ==\
    \ '?') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '-') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '_') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '~') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '*') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '&') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '%') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '$') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '^') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '&') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '*') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '(') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == ')') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '+') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '=') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '[') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == ']') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '<') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '>') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '/') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '\\\\') {\n            encoded += message[i];\n        }\n        else if\
    \ (message[i] == '|') {\n            encoded += message[i];\n        }\n     \
    \   else if (message[i] == '{') {\n            encoded += message[i];\n      \
    \  }\n        else if (message[i] == '}') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '[') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == ']') {\n            encoded += message[i];\n\
    \        }\n        else if (message[i] == '<') {\n            encoded += message[i];\n\
    \        }\n        else if (", "    std::string encoded = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if('A'\
    \ <= c && c <= 'Z') {\n            encoded += c;\n        } else if('a' <= c &&\
    \ c <= 'z') {\n            encoded += c;\n        } else if('0' <= c && c <= '9')\
    \ {\n            encoded += c;\n        } else if('!' <= c && c <= '@') {\n  \
    \          encoded += c;\n        } else if('[' <= c && c <= '^') {\n        \
    \    encoded += c;\n        } else if('{' <= c && c <= '}') {\n            encoded\
    \ += c;\n        } else if('$' <= c && c <= '~') {\n            encoded += c;\n\
    \        } else {\n            assert(0);\n        }\n    }\n    return encoded;",
  "    std::string ans;\n    for(int i = 0; i < message.length(); i++) {\n       \
    \ char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans += c;\n        }\n        else {\n         \
    \   ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;", "    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       char currentChar = message[i];\n        if (currentChar == 'a' || currentChar\
    \ == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n\
    \            encodedMessage += currentChar;\n        }\n        else if (currentChar\
    \ == 'A' || currentChar == 'E' || currentChar == 'I' || currentChar == 'O' ||\
    \ currentChar == 'U') {\n            encodedMessage += currentChar;\n        }\n\
    \        else if (currentChar == 'b' || currentChar == 'c' || currentChar == 'd'\
    \ || currentChar == 'f' || currentChar == 'g' || currentChar == 'h' || currentChar\
    \ == 'j' || currentChar == 'k' || currentChar == 'l' || currentChar == 'm' ||\
    \ currentChar == 'n' || currentChar == 'p' || currentChar == 'q' || currentChar\
    \ == 'r' || currentChar == 's' || currentChar == 't' || currentChar == 'v' ||\
    \ currentChar == 'w' || currentChar == 'x' || currentChar == 'y' || currentChar\
    \ == 'z') {\n            encodedMessage += currentChar;\n        }\n        else\
    \ if (currentChar == 'B' || currentChar == 'C' || currentChar == 'D' || currentChar\
    \ == 'F' || currentChar == 'G' || currentChar == 'H' || currentChar == 'J' ||\
    \ currentChar == 'K' || currentChar == 'L' || currentChar == 'M' || currentChar\
    \ == 'N' || currentChar == 'P' || currentChar == 'Q' || currentChar == 'R' ||\
    \ currentChar == 'S' || currentChar == 'T' || currentChar == 'V' || currentChar\
    \ == 'W' || currentChar == 'X' || currentChar == 'Y' || currentChar == 'Z') {\n\
    \            encodedMessage += currentChar;\n        }\n        else if (currentChar\
    \ == '.') {\n            encodedMessage += currentChar;\n        }\n        else\
    \ if (currentChar == '!') {\n            encodedMessage += currentChar;\n    \
    \    }\n        else if (currentChar == '?') {\n            encodedMessage +=\
    \ currentChar;\n        }\n        else if (currentChar == '-') {\n          \
    \  encodedMessage += currentChar;\n        }\n        else if (currentChar ==\
    \ '_') {\n            encodedMessage += currentChar;\n        }\n        else\
    \ if (currentChar == '~') {\n            encodedMessage += currentChar;\n    \
    \    }\n        else if (currentChar == '*') {\n            encodedMessage +=\
    \ currentChar;\n        }\n        else if (currentChar == '(') {\n          \
    \  encodedMessage += currentChar;\n        }\n        else if (currentChar ==\
    \ ')') {\n            encodedMessage += currentChar;\n        }\n        else\
    \ if (currentChar == '[') {\n            encodedMessage += currentChar;\n    \
    \    }\n        else if (currentChar == ']') {\n            encodedMessage +=\
    \ currentChar", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'a' + message[i] - 'a';\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n\
    \            ans += c;\n        }\n        else if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n        }\n    \
    \    else if (c == 'B' || c == 'C' || c == 'D' || c == 'F' || c == 'G' || c ==\
    \ 'H' || c == 'J' || c == 'K' || c == 'M' || c == 'N' || c == 'P' || c == 'Q'\
    \ || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'X' || c\
    \ == 'Y' || c == 'Z') {\n            ans += 'b';\n        }\n        else if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ 'a';\n        }\n        else if (c == 'b' || c == 'c' || c == 'd' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'm' || c == 'n' || c\
    \ == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'v' || c == 'w'\
    \ || c == 'x' || c == 'y' || c == 'z') {\n            ans += 'b';\n        }\n\
    \    }\n    return ans;", "    std::string encoded = message;\n    for(int i =\
    \ 0; i < encoded.length(); i++) {\n        char c = encoded[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded[i]\
    \ = 'A';\n        }\n        else if(c == 'b' || c == 'c' || c == 'd' || c ==\
    \ 'f' || c == 'g' || c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm'\
    \ || c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c\
    \ == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            encoded[i]\
    \ = 'B';\n        }\n        else if(c == 'A' || c == 'B' || c == 'C' || c ==\
    \ 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J'\
    \ || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'O' || c == 'P' || c\
    \ == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'V' || c == 'W' || c == 'X'\
    \ || c == 'Y' || c == 'Z') {\n            encoded[i] = 'a';\n        }\n    }\n\
    \    return encoded;", "    std::string encodedMessage;\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        char c = message[i];\n        if ('A' <=\
    \ c && c <= 'Z') {\n            encodedMessage += c;\n        } else if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            int index\
    \ = c - 'a';\n            int index2 = index - 2;\n            char temp = encodedMessage[index];\n\
    \            encodedMessage[index] = encodedMessage[index2];\n            encodedMessage[index2]\
    \ = temp;\n        }\n    }\n    return encodedMessage;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += c;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'a' + c - 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            encoded +=\
    \ c;\n        } else if (c >= 'A' && c <= 'Z') {\n            encoded += c;\n\
    \        } else if (c >= '0' && c <= '9') {\n            encoded += c;\n     \
    \   } else if (c == '.') {\n            encoded += c;\n        } else if (c ==\
    \ '!') {\n            encoded += c;\n        } else if (c == '?') {\n        \
    \    encoded += c;\n        } else if (c == '-') {\n            encoded += c;\n\
    \        } else if (c == '_') {\n            encoded += c;\n        } else if\
    \ (c == '/') {\n            encoded += c;\n        } else if (c == '\\\\') {\n\
    \            encoded += c;\n        } else if (c == '^') {\n            encoded\
    \ += c;\n        } else if (c == '%') {\n            encoded += c;\n        }\
    \ else if (c == '&') {\n            encoded += c;\n        } else if (c == '*')\
    \ {\n            encoded += c;\n        } else if (c == '(') {\n            encoded\
    \ += c;\n        } else if (c == ')') {\n            encoded += c;\n        }\
    \ else if (c == '[') {\n            encoded += c;\n        } else if (c == ']')\
    \ {\n            encoded += c;\n        } else if (c == '{') {\n            encoded\
    \ += c;\n        } else if (c == '}') {\n            encoded += c;\n        }\
    \ else if (c == '|') {\n            encoded += c;\n        } else if (c == '~')\
    \ {\n            encoded += c;\n        } else if (c == '<') {\n            encoded\
    \ += c;\n        } else if (c == '>') {\n            encoded += c;\n        }\
    \ else if (c == '%') {\n            encoded += c;\n        } else if (c == '+')\
    \ {\n            encoded += c;\n        } else if (c == '=') {\n            encoded\
    \ += c;\n        } else if (c == '%') {\n            encoded += c;\n        }\
    \ else if (c == '!') {\n            encoded += c;\n        } else if (c == '@')\
    \ {\n            encoded += c;\n        } else if (c == '#') {\n            encoded\
    \ += c;\n        } else if (c == '$') {\n            encoded += c;\n        }\
    \ else if (c == '%') {\n            encoded += c;\n        } else if (c == '^')\
    \ {\n            encoded += c;\n        } else if (c == '&') {\n            encoded\
    \ += c;\n        } else if (c == '*') {\n            encoded += c;\n        }\
    \ else if (c == '(') {\n            encoded += c;\n        } else if (c == ')')\
    \ {\n            encoded += c;\n        } else if (c == '[') {\n            encoded\
    \ += c;\n        } else if (c == ']') {\n            encoded += c;\n        }\
    \ else if (c == '{') {\n            encoded += c;\n        } else if (c == '}')\
    \ {\n            encoded += c;\n        } else if (c == '|') {\n            encoded\
    \ += c;\n        } else if (c == '~') {\n", "    std::string encodedMessage;\n\
    \    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            encodedMessage += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encodedMessage\
    \ += message[i] - 'A' + 'a';\n        } else {\n            encodedMessage +=\
    \ message[i];\n        }\n    }\n    return encodedMessage;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            encoded +=\
    \ c;\n        } else if (c >= 'A' && c <= 'Z') {\n            encoded += c;\n\
    \        } else if (c >= '0' && c <= '9') {\n            encoded += c;\n     \
    \   } else if (c == '.') {\n            encoded += c;\n        } else if (c ==\
    \ '_') {\n            encoded += c;\n        } else if (c == '-') {\n        \
    \    encoded += c;\n        } else if (c == '/') {\n            encoded += c;\n\
    \        } else if (c == '+') {\n            encoded += c;\n        } else if\
    \ (c == '!') {\n            encoded += c;\n        } else if (c == '@') {\n  \
    \          encoded += c;\n        } else if (c == '#') {\n            encoded\
    \ += c;\n        } else if (c == '$') {\n            encoded += c;\n        }\
    \ else if (c == '%') {\n            encoded += c;\n        } else if (c == '^')\
    \ {\n            encoded += c;\n        } else if (c == '&') {\n            encoded\
    \ += c;\n        } else if (c == '*') {\n            encoded += c;\n        }\
    \ else if (c == '(') {\n            encoded += c;\n        } else if (c == ')')\
    \ {\n            encoded += c;\n        } else if (c == '[') {\n            encoded\
    \ += c;\n        } else if (c == ']') {\n            encoded += c;\n        }\
    \ else if (c == '{') {\n            encoded += c;\n        } else if (c == '}')\
    \ {\n            encoded += c;\n        } else if (c == '|') {\n            encoded\
    \ += c;\n        } else if (c == '~') {\n            encoded += c;\n        }\
    \ else if (c == '<') {\n            encoded += c;\n        } else if (c == '>')\
    \ {\n            encoded += c;\n        } else if (c == '?') {\n            encoded\
    \ += c;\n        } else if (c == '=') {\n            encoded += c;\n        }\
    \ else if (c == '+') {\n            encoded += c;\n        } else if (c == '\\\
    \\') {\n            encoded += c;\n        } else if (c == '\"') {\n         \
    \   encoded += c;\n        } else if (c == '|') {\n            encoded += c;\n\
    \        } else if (c == '~') {\n            encoded += c;\n        } else if\
    \ (c == '>') {\n            encoded += c;\n        } else if (c == '<') {\n  \
    \          encoded += c;\n        } else if (c == '=') {\n            encoded\
    \ += c;\n        } else if (c == '+') {\n            encoded += c;\n        }\
    \ else if (c == '\\\\') {\n            encoded += c;\n        } else if (c ==\
    \ '\"') {\n            encoded += c;\n        } else if (c == '|') {\n       \
    \     encoded += c;\n        } else if (c == '~') {\n            encoded += c;\n\
    \        } else if (c == '>') {\n            encoded += c;\n        } else if\
    \ (c == '<') {\n            encoded += c;\n        } else if (c == '='", "   \
    \ std::string ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c))\
    \ ? (tolower(c)) : (toupper(c));\n    }\n    for (auto &c : ans) {\n        if\
    \ (isalpha(c)) {\n            int index = c - 'a';\n            ans[index] = tolower(ans[index]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (isalpha(c)) {\n    \
    \        int index = c - 'a';\n            ans[index] = toupper(ans[index]);\n\
    \        }\n    }\n    return ans;", "    std::string encoded = message;\n   \
    \ for (auto &c : message) {\n        switch (c) {\n            case 'a':\n   \
    \             encoded = 'b';\n                break;\n            case 'b':\n\
    \                encoded = 'a';\n                break;\n            case 'c':\n\
    \                encoded = 'd';\n                break;\n            case 'd':\n\
    \                encoded = 'c';\n                break;\n            case 'e':\n\
    \                encoded = 'f';\n                break;\n            case 'f':\n\
    \                encoded = 'e';\n                break;\n            case 'g':\n\
    \                encoded = 'h';\n                break;\n            case 'h':\n\
    \                encoded = 'g';\n                break;\n            case 'i':\n\
    \                encoded = 'j';\n                break;\n            case 'j':\n\
    \                encoded = 'i';\n                break;\n            case 'k':\n\
    \                encoded = 'l';\n                break;\n            case 'l':\n\
    \                encoded = 'k';\n                break;\n            case 'm':\n\
    \                encoded = 'n';\n                break;\n            case 'n':\n\
    \                encoded = 'm';\n                break;\n            case 'o':\n\
    \                encoded = 'p';\n                break;\n            case 'p':\n\
    \                encoded = 'o';\n                break;\n            case 'q':\n\
    \                encoded = 'r';\n                break;\n            case 'r':\n\
    \                encoded = 'q';\n                break;\n            case 's':\n\
    \                encoded = 't';\n                break;\n            case 't':\n\
    \                encoded = 's';\n                break;\n            case 'u':\n\
    \                encoded = 'v';\n                break;\n            case 'v':\n\
    \                encoded = 'u';\n                break;\n            case 'w':\n\
    \                encoded = 'x';\n                break;\n            case 'x':\n\
    \                encoded = 'w';\n                break;\n            case 'y':\n\
    \                encoded = 'z';\n                break;\n            case 'z':\n\
    \                encoded = 'y';\n                break;\n            default:\n\
    \                assert(false);\n        }\n    }\n    return encoded;", "   \
    \ std::string encoded;\n    for(int i = 0; i < message.length(); i++) {\n    \
    \    char c = message[i];\n        char replacement = ' ';\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            replacement\
    \ = c;\n        }\n        else if(c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U') {\n            replacement = ' ';\n        }\n        encoded.append(replacement);\n\
    \    }\n    return encoded;", "    std::string encoded = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] >= '0' && message[i] <= '9') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] == '.' || message[i]\
    \ == '!' || message[i] == '?') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] == '-' || message[i] == '_' || message[i] ==\
    \ '/' || message[i] == '\\\\' || message[i] == '|' || message[i] == '~') {\n \
    \           encoded += message[i];\n        }\n        else if (message[i] ==\
    \ '*') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '&') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '(' || message[i] == ')' || message[i] == '[' || message[i] == ']' || message[i]\
    \ == '{' || message[i] == '}' || message[i] == '<' || message[i] == '>' || message[i]\
    \ == '/' || message[i] == '\\\\' || message[i] == '|' || message[i] == '~') {\n\
    \            encoded += message[i];\n        }\n        else if (message[i] ==\
    \ '%') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '$') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '#') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '@') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '^') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '&') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '=') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '+') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '!') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '?') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '.') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '*') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '&') {\n            encoded += message[i];\n        }\n        else if (message[i]\
    \ == '(' || message[i] == ')' || message[i] == '[' || message[i] == ']' || message[i]\
    \ == '{' || message[i] == '}' || message[i] == '<' || message[i] == '>' || message[i]\
    \ == '/' || message[i] == '\\\\' || message[i] == '|' || message[i] == '~') {\n\
    \            encoded += message[i];\n        }\n        else if (message[i] ==\
    \ '%') {\n"]
stop_tokens:
- "\n}"
